{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "write_value_to_memory_00113dfe",
                "param_1": "value_address",
                "param_2": "new_value",
                "lVar1": "type_constant"
            },
            "code": "\nvoid write_value_to_memory_00113dfe(undefined4 value_address,undefined new_value)\n\n{\n  long type_constant;\n  \n  type_constant = debug_make_type_constprop_0(3,value_address);\n  if (type_constant != 0) {\n    *(undefined *)(type_constant + 0x10) = new_value;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "write_value_to_memory_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "bfd_nonfatal.cold",
                "debug_find_named_type",
                "display_info.isra.0",
                "debug_record_function",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "debug_tag_type",
                "debug_get_real_type.isra.0",
                "stab_context",
                "debug_record_variable",
                "parse_stab",
                "list_supported_targets",
                "debug_name_type",
                "list_matching_formats",
                "finish_stab",
                "parse_stab_type",
                "debug_record_parameter",
                "copy_usage",
                "debug_end_block",
                "main",
                "debug_end_function",
                "bad_stab",
                "warn_stab",
                "stab_bad_demangle",
                "debug_start_block",
                "report",
                "bfd_nonfatal_message",
                "strip_usage",
                "debug_record_line",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "debug_start_source",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_to_name_0010ab4d",
                "param_1": "dataStructure",
                "param_2": "name",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "structPointer",
                "lVar2": "structCopy",
                "auVar3": "result",
                "sVar4": "nameLength",
                "pcVar5": "existingName",
                "sVar6": "existingNameLength",
                "auVar7": "newResult"
            },
            "code": "\nundefined  [16] appendToName_0010ab4d(long dataStructure,char *name,undefined8 param3,undefined8 param4)\n\n{\n  ulong structPointer;\n  long structCopy;\n  undefined result [16];\n  size_t nameLength;\n  char *existingName;\n  size_t existingNameLength;\n  undefined newResult [16];\n  \n  structPointer = *(ulong *)(dataStructure + 0x60);\n  if ((structPointer != 0) && (*(long *)(structPointer + 0x20) != 0)) {\n    existingName = *(char **)(structPointer + 0x30);\n    nameLength = strlen(name);\n    if (existingName == (char *)0x0) {\n      existingName = (char *)xmalloc(nameLength + 3);\n      *existingName = '\\0';\n    }\n    else {\n      existingNameLength = strlen(existingName);\n      existingName = (char *)xrealloc(existingName,nameLength + 4 + existingNameLength);\n    }\n    nameLength = strlen(existingName);\n    sprintf(existingName + nameLength,\"%s::\",name);\n    structCopy = *(long *)(dataStructure + 0x60);\n    *(char **)(structCopy + 0x30) = existingName;\n    newResult._1_7_ = (undefined7)((ulong)structCopy >> 8);\n    newResult[0] = 1;\n    newResult._8_8_ = param4;\n    return newResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = structPointer;\n  return result << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_to_name_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_type_to_namespace_0010c218",
                "param_1": "fileHandle",
                "param_2": "name",
                "param_3": "type",
                "uVar1": "errorMessage",
                "lVar2": "typeHandle",
                "pauVar3": "typeArray",
                "lVar4": "namespaceHandle",
                "_stderr": "errorOutput"
            },
            "code": "\n\n\nlong addTypeToNamespace_0010c218(long fileHandle,long name,long type)\n\n{\n  undefined8 errorMessage;\n  long typeHandle;\n  undefined (*typeArray) [16];\n  long namespaceHandle;\n  \n  if ((name != 0) && (type != 0)) {\n    if ((*(long *)(fileHandle + 8) == 0) || (*(long *)(fileHandle + 0x10) == 0)) {\n      errorMessage = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(errorOutput,\"%s\\n\",errorMessage);\n    }\n    else {\n      typeHandle = debug_make_type_constprop_0(0x16,0);\n      if (typeHandle != 0) {\n        typeArray = (undefined (*) [16])xmalloc(0x10);\n        namespaceHandle = *(long *)(fileHandle + 0x10);\n        *typeArray = ZEXT816(0);\n        *(long *)(*typeArray + 8) = type;\n        *(undefined (**) [16])(typeHandle + 0x10) = typeArray;\n        namespaceHandle = debug_add_to_namespace_constprop_0(namespaceHandle + 0x10,name,0,3);\n        if (namespaceHandle != 0) {\n          *(long *)(namespaceHandle + 0x20) = typeHandle;\n          *(long *)*typeArray = namespaceHandle;\n          return typeHandle;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "fseek",
                "xstrdup",
                "bfd_set_default_target",
                "delete_symbol_htabs",
                "display_info.isra.0",
                "xatexit_cleanup.lto_priv.0",
                "setlocale",
                "filename_cmp",
                "textdomain",
                "parse_flags",
                "getc",
                "htab_create_alloc",
                "section_add_load_file",
                "malloc",
                "bfd_set_error_program_name",
                "non_fatal",
                "fopen",
                "smart_rename",
                "xcalloc",
                "fread",
                "bfd_scan_arch",
                "strlen",
                "dcgettext",
                "memcpy",
                "mkstemp",
                "strcpy",
                "xmalloc",
                "htab_hash_redefnode",
                "bfd_nonfatal_message",
                "close",
                "bfd_init",
                "create_symbol_htab",
                "strchr",
                "bfd_errmsg",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_find_slot",
                "template_in_dir",
                "print_version",
                "stat",
                "ftell",
                "add_redefine_and_check",
                "xexit",
                "xrealloc",
                "htab_elements",
                "copy_file",
                "find_section_list",
                "strtoul",
                "strcasecmp",
                "get_file_size",
                "unlink_if_ordinary",
                "strtol",
                "xmalloc_set_program_name",
                "ferror",
                "strncasecmp",
                "dup",
                "strncpy",
                "free",
                "add_specific_symbols",
                "bindtextdomain",
                "strerror",
                "fprintf",
                "init_section_add",
                "copy_usage",
                "memmove",
                "fatal",
                "strcmp",
                "__errno_location",
                "eq_string_redefnode",
                "handle_remove_section_option",
                "bfd_get_error",
                "strip_usage",
                "fclose",
                "getopt_long",
                "parse_vma",
                "xstrndup",
                "convert_efi_target",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugger_0010be88",
                "param_1": "block",
                "param_2": "debugger",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "lastBlockPtr",
                "uVar2": "success",
                "puVar3": "newBlockPtr",
                "puVar4": "currentBlockPtr",
                "puVar6": "previousBlockPtr",
                "puVar7": "tempBlockPtr",
                "bVar8": "loopCounter",
                "auVar9": "result"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugger_0010be88(long block,undefined8 debugger,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 *lastBlockPtr;\n  undefined8 success;\n  undefined4 *newBlockPtr;\n  undefined8 *currentBlockPtr;\n  long lVar5;\n  undefined8 *previousBlockPtr;\n  undefined4 *tempBlockPtr;\n  byte loopCounter;\n  undefined result [16];\n  \n  loopCounter = 0;\n  if ((*(long *)(block + 8) == 0) || (*(long *)(block + 0x20) == 0)) {\n    success = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    newBlockPtr = (undefined4 *)xmalloc(0x30);\n    tempBlockPtr = newBlockPtr;\n    for (lVar5 = 0xc; lVar5 != 0; lVar5 = lVar5 + -1) {\n      *tempBlockPtr = 0;\n      tempBlockPtr = tempBlockPtr + (ulong)loopCounter * -2 + 1;\n    }\n    lVar5 = *(long *)(block + 0x20);\n    *(undefined8 *)(newBlockPtr + 6) = debugger;\n    *(undefined8 *)(newBlockPtr + 8) = 0xffffffffffffffff;\n    *(long *)(newBlockPtr + 2) = lVar5;\n    lastBlockPtr = *(undefined8 **)(lVar5 + 0x10);\n    previousBlockPtr = (undefined8 *)(lVar5 + 0x10);\n    while (currentBlockPtr = lastBlockPtr, currentBlockPtr != (undefined8 *)0x0) {\n      previousBlockPtr = currentBlockPtr;\n      lastBlockPtr = (undefined8 *)*currentBlockPtr;\n    }\n    *previousBlockPtr = newBlockPtr;\n    success = 1;\n    *(undefined4 **)(block + 0x20) = newBlockPtr;\n  }\n  result._8_8_ = arg4;\n  result._0_8_ = success;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugger_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "inputParams",
                "param_2": "fieldName",
                "param_3": "size",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "typeFlag",
                "iVar2": "fieldCount",
                "lVar3": "returnValue",
                "__s": "type",
                "sVar4": "inputSize",
                "sVar5": "fieldNameSize",
                "sVar6": "typeSize",
                "__s_00": "warningMessage",
                "uVar7": "warningText",
                "uVar8": "result",
                "pcVar9": "flagString",
                "stab_pop_type()": "popTypeFromStack()",
                "xmalloc": "allocateMemory",
                "strlen": "getStringLength",
                "abort()": "stopExecution",
                "sprintf": "formatString",
                "free": "deallocateMemory",
                "dcgettext": "getLocalizedMessage",
                "CONCAT71": "combine"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *inputParams,char *fieldName,undefined8 size,ulong fieldSize,int fieldType)\n\n{\n  char typeFlag;\n  int fieldCount;\n  long returnValue;\n  char *type;\n  size_t inputSize;\n  size_t fieldNameSize;\n  size_t typeSize;\n  char *warningMessage;\n  undefined8 warningText;\n  undefined8 result;\n  char *flagString;\n  \n  typeFlag = *(char *)(inputParams[0xc] + 0x1c);\n  fieldCount = *(int *)(inputParams[0xc] + 0x18);\n  type = (char *)popTypeFromStack();\n  if (*(char **)(inputParams[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    inputSize = getStringLength(*(char **)(inputParams[0xc] + 0x20));\n    fieldNameSize = getStringLength(fieldName);\n    typeSize = getStringLength(type);\n    warningMessage = (char *)allocateMemory(inputSize + 0x32 + fieldNameSize + typeSize);\n    if (fieldType == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((fieldType != 2) && (flagString = \"\", fieldType != 0)) {\n                    \n        stopExecution;\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(fieldCount * 8), fieldSize == 0)) {\n      result = *(undefined8 *)*inputParams;\n      warningText = getLocalizedMessage(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(warningText,result,fieldName);\n    }\n    formatString(warningMessage,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(inputParams[0xc] + 0x20),fieldName,flagString,type,\n            size,fieldSize);\n    deallocateMemory(*(void **)(inputParams[0xc] + 0x20));\n    returnValue = inputParams[0xc];\n    *(char **)(returnValue + 0x20) = warningMessage;\n    if (typeFlag != '\\0') {\n      *(undefined *)(returnValue + 0x1c) = 1;\n    }\n    result = combine((int7)((ulong)returnValue >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "dcgettext",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "create_formatted_string_0010aa53",
                "param_1": "binaryAddress",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "option",
                "cVar1": "storedChar",
                "__s": "poppedString",
                "sVar5": "stringLength",
                "pcVar6": "formattedString",
                "lVar2": "ptrToBinary",
                "cVar3": "charValue",
                "uVar4": "loopCounter",
                "lVar7": "ptrToUpdatedBinary",
                "uVar8": "returnVal",
                "uVar9": "tempCounter",
                "uVar10": "loopCounter2"
            },
            "code": "\nundefined8 createFormattedString_0010aa53(long binaryAddress,undefined8 value,char flag,int option)\n\n{\n  char storedChar;\n  long ptrToBinary;\n  char charValue;\n  uint loopCounter;\n  char *poppedString;\n  size_t stringLength;\n  char *formattedString;\n  long ptrToUpdatedBinary;\n  undefined8 returnVal;\n  ulong tempCounter;\n  ulong loopCounter2;\n  \n  storedChar = *(char *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  poppedString = (char *)stab_pop_type();\n  stringLength = strlen(poppedString);\n  formattedString = (char *)xmalloc(stringLength + 0x19);\n  *formattedString = flag + '0';\n  if (option == 1) {\n    charValue = '1';\n  }\n  else {\n    charValue = '0';\n    if ((option != 2) && (charValue = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedString[1] = charValue;\n  sprintf(formattedString + 2,\"%ld,%s;\",value);\n  free(poppedString);\n  ptrToBinary = *(long *)(binaryAddress + 0x60);\n  returnVal = 0;\n  if ((ptrToBinary != 0) && (*(long *)(ptrToBinary + 0x20) != 0)) {\n    ptrToBinary = *(long *)(ptrToBinary + 0x28);\n    loopCounter2 = 0;\n    if (ptrToBinary != 0) {\n      loopCounter = 0;\n      do {\n        tempCounter = (ulong)loopCounter;\n        loopCounter2 = (ulong)loopCounter;\n        loopCounter = loopCounter + 1;\n      } while (*(long *)(ptrToBinary + tempCounter * 8) != 0);\n    }\n    ptrToUpdatedBinary = xrealloc(ptrToBinary,(ulong)((int)loopCounter2 + 2) << 3);\n    *(char **)(ptrToUpdatedBinary + loopCounter2 * 8) = formattedString;\n    *(undefined8 *)(ptrToUpdatedBinary + (ulong)((int)loopCounter2 + 1) * 8) = 0;\n    ptrToBinary = *(long *)(binaryAddress + 0x60);\n    *(long *)(ptrToBinary + 0x28) = ptrToUpdatedBinary;\n    if (storedChar != '\\0') {\n      *(undefined *)(ptrToBinary + 0x1c) = 1;\n    }\n    returnVal = 1;\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "xmalloc",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_formatted_string_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "analyzer_function_0011173a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "ptr",
                "cVar3": "charVar3",
                "uVar4": "undefinedVar4",
                "iVar5": "intVar5",
                "puVar6": "ptrVar6",
                "plVar7": "longVar7",
                "pcVar8": "charVar8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "lVar11": "longVar11",
                "lVar12": "longVar12",
                "pplVar13": "pointerPointerVar13",
                "uVar14": "ulongVar14",
                "uVar15": "ulongVar15",
                "pcVar16": "charVar16",
                "uVar17": "uintVar17",
                "dVar19": "doubleVar19",
                "local_48": "localCharVar48",
                "local_40": "localPointerArrayVar40"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined analyzerFunction_0011173a(undefined8 param1,long *param2,int param3,int param4,ulong param5,\n                      char *param6)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *ptr;\n  char charVar3;\n  undefined undefinedVar4;\n  int intVar5;\n  undefined8 *ptrVar6;\n  long *longVar7;\n  char *charVar8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  long longVar11;\n  long longVar12;\n  long **pointerPointerVar13;\n  ulong ulongVar14;\n  ulong ulongVar15;\n  char *charVar16;\n  uint uintVar17;\n  long **pplVar18;\n  double doubleVar19;\n  char *localCharVar48;\n  long **localPointerArrayVar40 [2];\n  \n  if (param2[4] != 0) {\n    if (((param3 == 100) && (*param6 != '\\0')) && (param2[5] == param5)) goto LAB_00111a06;\n    charVar3 = debug_set_filename(param1);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param2 + 0x44) = 0;\n    *(undefined4 *)(param2 + 8) = 0;\n    param2[9] = param2[4];\n    if (*(char *)(param2 + 1) == '\\0') {\n      param2[6] = param2[5];\n    }\n    *(undefined4 *)(param2 + 0x10) = 1;\n    ptrVar6 = (undefined8 *)xmalloc(8);\n    param2[0x11] = (long)ptrVar6;\n    *ptrVar6 = 0;\n    param2[4] = 0;\n  }\n  strlen(param6);\n  if (param3 == 0x84) {\nLAB_00111ab7:\n    undefinedVar4 = debug_start_source(param1,param6);\n    return undefinedVar4;\n  }\n  if (param3 < 0x85) {\n    if (param3 == 0x3c) {\n      intVar5 = strcmp(param6,\"gcc2_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(param2 + 8) = 2;\n        return 1;\n      }\n      intVar5 = strcmp(param6,\"gcc_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(param2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param2 + 0x44) = 1;\n      return 1;\n    }\n    if (param3 < 0x3d) {\n      if (param3 == 0x24) {\n        if (*param6 == '\\0') {\n          if (*(char *)(param2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param2 + 1) != '\\0') {\n            param5 = param5 + param2[7];\n          }\n          charVar3 = stab_emit_pending_vars(param1,param2);\n          if (charVar3 != '\\0') {\n            charVar3 = debug_end_function(param1,param5);\n            if (charVar3 != '\\0') {\n              *(undefined *)(param2 + 0xc) = 0;\n              param2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param2 + 0xc) != '\\0') &&\n           ((param5 < (ulong)param2[0xd] || (param2[0xd] == 0xffffffffffffffff)))) {\n          param2[0xd] = param5;\n        }\n      }\n      else if (param3 < 0x25) {\n        if (param3 == 0xc) {\n          return 1;\n        }\n        if (param3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param3 == 0x2a) {\n          return 1;\n        }\n        if (param3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param2 + 0xc) != '\\0') {\n          ulongVar14 = param5;\n          if (((*param6 != '\\0') && (ulongVar15 = param2[0xd], ulongVar15 != 0xffffffffffffffff)) &&\n             (ulongVar14 = ulongVar15, param5 < ulongVar15)) {\n            ulongVar14 = param5;\n          }\n          charVar3 = stab_emit_pending_vars(param1,param2);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          charVar3 = debug_end_function(param1,ulongVar14);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param2 + 0xc) = 0;\n          param2[0xd] = -1;\n        }\n        if (*param6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param2[4];\n        if (ptr == (void *)0x0) {\n          longVar12 = xstrdup(param6);\n          param2[4] = longVar12;\n        }\n        else {\n          if (*param6 == '/') {\n            longVar12 = xstrdup(param6);\n          }\n          else {\n            longVar12 = concat(ptr,param6,0);\n          }\n          param2[4] = longVar12;\n          free(ptr);\n        }\n        param2[5] = param5;\n        return 1;\n      }\n      if (param3 < 0x65) {\n        if (param3 == 0x44) {\n          longVar12 = 0;\n          if (*(char *)(param2 + 0xc) != '\\0') {\n            longVar12 = param2[7];\n          }\n          undefinedVar4 = debug_record_line(param1,(long)param4,longVar12 + param5);\n          return undefinedVar4;\n        }\n        if (param3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param3 == 0x82) {\n        longVar7 = (long *)xmalloc();\n        intVar5 = *(int *)(param2 + 0x10);\n        longVar10 = param2[10];\n        longVar11 = param2[0xb];\n        longVar7[5] = 0;\n        longVar12 = param2[0x11];\n        *(int *)(longVar7 + 4) = intVar5;\n        uintVar17 = intVar5 + 1;\n        *(uint *)(param2 + 0x10) = uintVar17;\n        *longVar7 = longVar11;\n        longVar7[1] = longVar10;\n        longVar7[2] = (long)param6;\n        longVar7[3] = param5;\n        param2[10] = (long)longVar7;\n        param2[0xb] = (long)longVar7;\n        longVar12 = xrealloc(longVar12,(ulong)uintVar17 << 3);\n        uintVar17 = *(uint *)(longVar7 + 4);\n        param2[0x11] = longVar12;\n        *(undefined8 *)(longVar12 + (ulong)uintVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charVar8 = strchr(param6,0x3a);\n    if ((charVar8 != (char *)0x0) && ((charVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param2 + 0xc) != '\\0') {\n        ulongVar14 = param2[0xd];\n        ulongVar15 = param5;\n        if ((ulongVar14 != 0xffffffffffffffff) && (ulongVar15 = ulongVar14, param5 < ulongVar14)) {\n          ulongVar15 = param5;\n        }\n        charVar3 = stab_emit_pending_vars(param1,param2);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        charVar3 = debug_end_function(param1,ulongVar15);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        param2[0xd] = -1;\n      }\n      if (*(char *)(param2 + 1) != '\\0') {\n        param2[7] = param5;\n      }\n      *(undefined *)(param2 + 0xc) = 1;\n    }\n    localCharVar48 = strchr(param6,0x3a);\n    if (localCharVar48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharVar48[1] == ':') goto code_r0x00111cc7;\n    if (*param6 == '$') {\n      charVar3 = param6[1];\n      charVar16 = \"eh_throw\";\n      if (charVar3 != 'e') {\n        if (charVar3 < 'f') {\n          if ((charVar3 != 'X') && (charVar3 != '_')) {\nLAB_00111d1a:\n            undefinedVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(param6,undefinedVar9);\n          }\n        }\n        else {\n          charVar16 = \"this\";\n          if (charVar3 == 't') goto LAB_00111d62;\n          if (charVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charVar16 = (char *)0x0;\n      if ((param6 != localCharVar48) && ((*param6 != ' ' || (localCharVar48 != param6 + 1)))) {\n        charVar16 = (char *)savestring(param6,(int)localCharVar48 - (int)param6);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localCharVar48[1];\n    charVar8 = localCharVar48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    charVar8 = localCharVar48 + 2;\n    charVar3 = localCharVar48[1];\n    switch(charVar3) {\n    case 'C':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      charVar8 = \"debug_record_label: not implemented\";\n      if (longVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      charVar3 = debug_record_function(param1,charVar16,longVar12,charVar3 == 'F',param5);\n      if (charVar3 != '\\0') {\n        do {\n          if (*localCharVar48 != ';') {\n            return 1;\n          }\n          localCharVar48 = localCharVar48 + 1;\n          longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (charVar16 == (char *)0x0) goto LAB_0011208f;\n      longVar10 = param2[3];\n      longVar7 = (long *)param2[2];\n      charVar3 = *(char *)(*(long *)(*param2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param3 == 0x24) {\n        localCharVar48 = charVar8;\n        do {\n          if (*localCharVar48 != ';') {\n            return 1;\n          }\n          localCharVar48 = localCharVar48 + 1;\n          longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      break;\n    case 'S':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar3 = localCharVar48[2];\n      if (charVar3 == 't') {\n        charVar8 = localCharVar48 + 3;\n      }\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,charVar16,&localCharVar48,localPointerArrayVar40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (charVar16 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(param2 + 0x35);\n      longVar7 = (long *)debug_tag_type(param1,charVar16,longVar12);\n      if (longVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPointerArrayVar40[0] != (long **)0x0) {\n        *localPointerArrayVar40[0] = longVar7;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      pointerPointerVar13 = (long **)(param2 + 0x34);\n      pplVar18 = (long **)param2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charVar8 = localCharVar48 + 3;\n      if (((localCharVar48[2] != '\\0') && (charVar8 = localCharVar48 + 4, localCharVar48[3] == 'n')) &&\n         (charVar8 = localCharVar48 + 5, charVar16 = localCharVar48 + 4, localCharVar48 = charVar8, *charVar16 == '0')) {\n        for (; charVar8 = localCharVar48, *localCharVar48 != '\\0'; localCharVar48 = localCharVar48 + 1) {\n          if (*localCharVar48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      break;\n    case 'c':\n      if (localCharVar48[2] == '=') {\n        charVar8 = localCharVar48 + 4;\n        charVar3 = localCharVar48[3];\n        localCharVar48 = charVar8;\n        if (charVar3 == 'i') {\n          longVar12 = strtol(charVar8,(char **)0x0,10);\n          if (charVar16 == (char *)0x0) {\n            return 0;\n          }\n          longVar10 = debug_add_to_current_namespace_constprop_0(param1,charVar16,4);\n          if (longVar10 != 0) {\n            *(long *)(longVar10 + 0x20) = (long)(int)longVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'r') {\n          doubleVar19 = strtod(charVar8,(char **)0x0);\n          if (charVar16 == (char *)0x0) {\n            return 0;\n          }\n          longVar12 = debug_add_to_current_namespace_constprop_0(param1,charVar16,5);\n          if (longVar12 != 0) {\n            *(double *)(longVar12 + 0x20) = doubleVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'e') {\n          longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n          if (longVar12 == 0) {\n            return 0;\n          }\n          charVar8 = localCharVar48;\n          if (*localCharVar48 == ',') {\n            longVar10 = strtol(localCharVar48,(char **)0x0,10);\n            if (charVar16 == (char *)0x0) {\n              return 0;\n            }\n            longVar11 = debug_add_to_current_namespace_constprop_0(param1,charVar16,6);\n            if (longVar11 != 0) {\n              longVar7 = (long *)xmalloc(0x10);\n              *longVar7 = longVar12;\n              longVar7[1] = (long)(int)longVar10;\n              *(long **)(longVar11 + 0x20) = longVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharVar48[2] == 'F') {\n        localCharVar48 = localCharVar48 + 3;\n        longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n        if (longVar12 == 0) {\n          return 0;\n        }\n        undefinedVar9 = debug_make_function_type_isra_0(longVar12,0,0);\n        longVar12 = debug_make_pointer_type_isra_0(undefinedVar9);\n      }\n      else {\n        localCharVar48 = charVar8;\n        longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      }\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 1;\n      break;\n    case 'r':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 5;\nLAB_001123e8:\n      charVar3 = stab_record_variable(param1,param2,charVar16,longVar12,undefinedVar9,param5);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,charVar16,&localCharVar48,localPointerArrayVar40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (charVar16 == (char *)0x0) {\n        return 1;\n      }\n      longVar7 = (long *)debug_name_type(param1,charVar16,longVar12);\n      if (longVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPointerArrayVar40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPointerArrayVar40[0] = longVar7;\n      return 1;\n    case 'v':\n      localCharVar48 = charVar8;\n      longVar12 = parse_stab_type(param1,param2,0,&localCharVar48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n    }\n    charVar3 = debug_record_parameter(param1,charVar16,longVar12,undefinedVar9,param5);\n    goto joined_r0x001123f8;\n  }\n  if (param3 == 0xe0) {\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    charVar3 = stab_emit_pending_vars(param1,param2);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    charVar3 = debug_end_block(param1,param2[7] + param2[6] + param5);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    param2 = param2 + 0xe;\n    *(int *)param2 = *(int *)param2 + -1;\n    charVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param3) {\n      if (param3 == 0xe2) {\n        charVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charVar8 = \"debug_end_common_block: not implemented\";\n        if (param3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar9 = dcgettext(0,charVar8,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar9);\n      return 0;\n    }\n    if (param3 != 0xc0) {\n      if (param3 == 0xc2) {\n        intVar5 = *(int *)(param2 + 0x10);\n        *(uint *)(param2 + 0x10) = intVar5 + 1U;\n        longVar12 = xrealloc(param2[0x11],(ulong)(intVar5 + 1U) << 3);\n        ptrVar6 = (undefined8 *)param2[0xb];\n        param2[0x11] = longVar12;\n        while( true ) {\n          if (ptrVar6 == (undefined8 *)0x0) {\n            undefinedVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(param6,undefinedVar9);\n            *(undefined8 *)(param2[0x11] + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param5 == ptrVar6[3]) && (intVar5 = strcmp((char *)ptrVar6[2],param6), intVar5 == 0))\n          break;\n          ptrVar6 = (undefined8 *)*ptrVar6;\n        }\n        *(undefined8 *)(longVar12 + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = ptrVar6[5];\n        return 1;\n      }\n      if (param3 == 0xa2) {\n        longVar12 = param2[10];\n        if (longVar12 != 0) {\n          longVar10 = *(long *)(longVar12 + 8);\n          uintVar17 = *(uint *)(longVar12 + 0x20);\n          param2[10] = longVar10;\n          if ((uintVar17 < *(uint *)(param2 + 0x10)) &&\n             (*(undefined8 *)(longVar12 + 0x28) = *(undefined8 *)(param2[0x11] + (ulong)uintVar17 * 8),\n             longVar10 != 0)) {\n            param6 = *(char **)(longVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param6 = (char *)param2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param2 + 0xc) != '\\0') {\n      charVar3 = debug_start_block(param1,param2[7] + param2[6] + param5);\n      if (charVar3 == '\\0') {\n        return 0;\n      }\n      charVar3 = stab_emit_pending_vars(param1,param2);\n      if (charVar3 != '\\0') {\n        *(int *)(param2 + 0xe) = *(int *)(param2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charVar8 = \"N_LBRAC not within function\\n\";\n  }\n  charVar8 = (char *)dcgettext(0,charVar8,5);\n  fprintf(_stderr,charVar8);\n  return 0;\ncode_r0x00111cc7:\n  localCharVar48 = localCharVar48 + 2;\n  localCharVar48 = strchr(localCharVar48,0x3a);\n  if (localCharVar48 == (char *)0x0) {\n    charVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharVar48 = charVar8;\n    bad_stab(param6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar3 != 't') {\n      return 1;\n    }\n    longVar7 = (long *)debug_name_type(param1,charVar16,longVar7);\n    if (longVar7 != (long *)0x0) {\n      if (localPointerArrayVar40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPointerArrayVar40[0] = longVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *charVar16) &&\n     (intVar5 = strcmp((char *)pplVar18[1],charVar16), intVar5 == 0)) {\n    pplVar18[3] = longVar7;\n    *pointerPointerVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pointerPointerVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar10 < 1) {\nLAB_0011208f:\n    undefinedVar9 = 1;\nLAB_001121c4:\n    charVar3 = debug_record_variable(param1,charVar16,longVar12,undefinedVar9,param5);\njoined_r0x001123f8:\n    if (charVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charVar8 = *(char **)(*longVar7 + 8);\n  if ((charVar3 != '\\0') && (charVar3 == *charVar8)) {\n    charVar8 = charVar8 + 1;\n  }\n  if ((*charVar8 == *charVar16) && (intVar5 = strcmp(charVar8,charVar16), intVar5 == 0)) {\n    param5 = *(long *)(*longVar7 + 0x10) + *(long *)(*(long *)(*longVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar10 = longVar10 + -1;\n  longVar7 = longVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "xstrdup",
                "debug_record_function",
                "strtod",
                "stab_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_tag_type",
                "strtol",
                "debug_record_variable",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "free",
                "parse_stab_type",
                "fprintf",
                "debug_record_parameter",
                "savestring",
                "debug_end_block",
                "debug_end_function",
                "strlen",
                "bad_stab",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "warn_stab",
                "debug_start_block",
                "stab_emit_pending_vars",
                "strchr",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "debug_start_source",
                "debug_make_function_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyzer_function_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "skipResult",
                "iVar2": "error",
                "uVar3": "sectionAddr",
                "lVar4": "sectionList",
                "puVar5": "relocArray",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "filteredRelocArray",
                "puVar8": "filteredRelocArrayPtr",
                "uVar9": "index",
                "uStack_38": "unusedVariable",
                "strip_symbols": "symbolStrippingSetting",
                "isympp": "symbolPointer"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char skipResult;\n  int error;\n  undefined8 sectionAddr;\n  long sectionList;\n  undefined8 *relocArray;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *filteredRelocArray;\n  undefined8 *filteredRelocArrayPtr;\n  ulong index;\n  undefined8 unusedVariable;\n  \n  skipResult = skip_section(param1,param2,0);\n  if (skipResult != '\\0') {\n    return;\n  }\n  sectionAddr = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (symbolStrippingSetting != 6)) &&\n     (sectionList = find_section_list(*param2,0,0x100), sectionList == 0)) {\n    sectionList = bfd_get_reloc_upper_bound(param1,param2);\n    if (sectionList < 0) {\n      if ((sectionList != -1) || (error = bfd_get_error(), error != 5)) {\n        status = 1;\n        sectionAddr = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,param1,param2,sectionAddr,unusedVariable);\n        return;\n      }\n    }\n    else if (sectionList != 0) {\n      relocArray = (undefined8 *)param2[0xe];\n      if (relocArray == (undefined8 *)0x0) {\n        relocArray = (undefined8 *)bfd_alloc(param3);\n        if (relocArray == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocArray,symbolPointer);\n        if ((long)relocCount < 0) {\n          status = 1;\n          sectionAddr = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (symbolStrippingSetting == 7) {\n        filteredRelocArray = relocArray;\n        for (index = 0; index != relocCount; index = index + 1) {\n          filteredRelocArrayPtr = filteredRelocArray;\n          if (((*(long **)relocArray[index] != (long *)0x0) &&\n              (sectionList = **(long **)relocArray[index], sectionList != 0)) &&\n             (skipResult = is_specified_symbol(*(undefined8 *)(sectionList + 8),keep_specific_htab),\n             skipResult != '\\0')) {\n            filteredRelocArrayPtr = filteredRelocArray + 1;\n            *filteredRelocArray = relocArray[index];\n          }\n          filteredRelocArray = filteredRelocArrayPtr;\n        }\n        *filteredRelocArray = 0;\n        relocCount = (long)filteredRelocArray - (long)relocArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocArray = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param3,sectionAddr,relocArray,relocCount);\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_error",
                "skip_section",
                "dcgettext",
                "copy_relocations_in_section.cold",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "copy_file",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "report",
                "bfd_nonfatal_message",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_find_types_0010d559",
                "param_1": "symbolTable",
                "param_2": "input",
                "param_3": "count",
                "bVar1": "firstChar",
                "pbVar2": "currentChar",
                "cVar3": "demangleResult",
                "uVar4": "demangleCount",
                "iVar5": "comparisonResult",
                "ppcVar6": "typeArray",
                "sVar7": "stringLength",
                "lVar8": "result",
                "plVar9": "typePtrArray",
                "pcVar10": "typeString",
                "__s1": "typeName",
                "__ptr": "tempString",
                "pbVar11": "nextChar",
                "uVar12": "taggedTypeValue",
                "__nptr": "numericString",
                "local_64": "loopCount",
                "local_40": "typeNames"
            },
            "code": "\nundefined8 parseAndFindTypes_0010d559(undefined8 *symbolTable,byte **input,long *count)\n\n{\n  byte firstChar;\n  byte *currentChar;\n  char demangleResult;\n  uint demangleCount;\n  int comparisonResult;\n  char **typeArray;\n  size_t stringLength;\n  long result;\n  long *typePtrArray;\n  char *typeString;\n  char *typeName;\n  void *tempString;\n  byte *nextChar;\n  undefined8 taggedTypeValue;\n  byte *numericString;\n  int loopCount;\n  char *typeNames [2];\n  \n  currentChar = *input;\n  firstChar = currentChar[1];\n  if ((char)firstChar < ':') {\n    if ((char)firstChar < '1') goto LAB_0010d5d8;\n    loopCount = (char)firstChar + -0x30;\n    if (currentChar[2] == 0x5f) {\n      *input = currentChar + 1;\n    }\n    nextChar = *input + 2;\n  }\n  else {\n    if (((firstChar != 0x5f) || (((&_sch_istable)[(ulong)currentChar[2] * 2] & 4) == 0)) ||\n       (currentChar[2] == 0x30)) goto LAB_0010d5d8;\n    numericString = currentChar + 2;\n    result = strtol((char *)numericString,(char **)0x0,10);\n    loopCount = (int)result;\n    while (((&_sch_istable)[(ulong)*numericString * 2] & 4) != 0) {\n      numericString = numericString + 1;\n    }\n    nextChar = numericString + 1;\n    if (*numericString != 0x5f) goto LAB_0010d5d8;\n  }\n  *input = nextChar;\n  typeArray = (char **)0x0;\n  if (count != (long *)0x0) {\n    typeArray = typeNames;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      loopCount = loopCount + -1;\n      if (loopCount == -1) {\n        if (count != (long *)0x0) {\n          *count = result;\n        }\n        return 1;\n      }\n      if (**input == 0x5f) {\n        *input = *input + 1;\n      }\n      if (**input != 0x74) break;\n      demangleResult = stab_demangle_template(symbolTable,input,typeArray);\n      typeString = typeNames[0];\n      if (demangleResult == '\\0') {\n        return 0;\n      }\n      if (count != (long *)0x0) {\n        stringLength = strlen(typeNames[0]);\n        result = stab_find_tagged_type(*symbolTable,symbolTable[1],typeString,stringLength & 0xffffffff,9);\n        free(typeString);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    demangleCount = stab_demangle_count(input);\n    stringLength = strlen((char *)*input);\n    if (stringLength < demangleCount) break;\n    if (count != (long *)0x0) {\n      if ((result != 0) && (typePtrArray = (long *)debug_get_fields_isra_0(result), typePtrArray != (long *)0x0))\n      {\n        typeString = (char *)savestring(*input,demangleCount);\n        for (; result = *typePtrArray, result != 0; typePtrArray = typePtrArray + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(typeString);\n            return 0;\n          }\n          typeName = (char *)debug_get_type_name_constprop_0(result);\n          if ((typeName != (char *)0x0) && (comparisonResult = strcmp(typeName,typeString), comparisonResult == 0)) break;\n        }\n        free(typeString);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      taggedTypeValue = 9;\n      if (loopCount == 0) {\n        tempString = (void *)savestring(*input,demangleCount);\n        result = debug_find_named_type(*symbolTable,tempString);\n        free(tempString);\n        if (result != 0) goto LAB_0010d7ad;\n        taggedTypeValue = 0;\n      }\n      result = stab_find_tagged_type(*symbolTable,symbolTable[1],*input,demangleCount,taggedTypeValue);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input = *input + demangleCount;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(currentChar);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "savestring",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_find_tagged_type",
                "stab_demangle_template",
                "free",
                "debug_get_type_name.constprop.0",
                "stab_demangle_count",
                "strcmp",
                "strtol",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_and_find_types_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "formatArgs",
                "_stdout": "stdoutBuffer",
                "_stderr": "stderrBuffer",
                "program_name": "appName"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list formatArgs)\n\n{\n  fflush(stdoutBuffer);\n  fprintf(stderrBuffer,\"%s: \",appName);\n  vfprintf(stderrBuffer,errorMessage,formatArgs);\n  putc(10,stderrBuffer);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "free_memory_and_set_status_00108466",
                "param_7": "memoryToFree"
            },
            "code": "\nvoid freeMemoryAndSetStatus_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  status = 1;\n  bfd_nonfatal_message(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "free_memory_and_set_status_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_integer_from_string_00108e76",
                "param_1": "string",
                "bVar1": "currentCharacter",
                "iVar2": "result"
            },
            "code": "\nint extractIntegerFromString_00108e76(byte **string)\n\n{\n  byte currentCharacter;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentCharacter = **string;\n    if (((&_sch_istable)[(ulong)currentCharacter * 2] & 4) == 0) break;\n    *string = *string + 1;\n    result = result * 10 + -0x30 + (int)(char)currentCharacter;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_integer_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "param_2": "hash_param_1",
                "param_3": "hash_param_2",
                "lVar1": "hash_object"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 hash_param_1,undefined8 hash_param_2)\n\n{\n  long hash_object;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(hash_param_1,0x30), input_value != 0)) &&\n     (hash_object = bfd_hash_newfunc(input_value,hash_param_1,hash_param_2), hash_object != 0)) {\n    *(undefined8 *)(hash_object + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_object + 0x18) = 0;\n    *(undefined4 *)(hash_object + 0x28) = 0;\n    return hash_object;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "file_path",
                "param_2": "original_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_status"
            },
            "code": "\nchar * check_directory_access_0011283f(char *file_path,char *original_directory)\n\n{\n  int access_result;\n  stat file_status;\n  \n  if ((original_directory == (char *)0x0) && (file_path != (char *)0x0)) {\n    access_result = access(file_path,7);\n    if (access_result == 0) {\n      access_result = stat(file_path,&file_status);\n      if ((access_result == 0) && ((file_status.st_mode & 0xf000) == 0x4000)) {\n        original_directory = file_path;\n      }\n    }\n  }\n  return original_directory;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "copy_section",
                "FUN_00107880",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorPointer",
                "iVar1": "originalErrorCode"
            },
            "code": "\nundefined8 closeFileAndReturnError_00108237(void)\n\n{\n  int originalErrorCode;\n  int *errorPointer;\n  int fileDescriptor;\n  \n  errorPointer = __errno_location();\n  originalErrorCode = *errorPointer;\n  close(fileDescriptor);\n  *errorPointer = originalErrorCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "convert_and_store_debug_info_0010bc80",
                "param_1": "debugInfoStruct",
                "param_2": "filename",
                "param_3": "fileOffset",
                "param_4": "debugLevel",
                "uVar1": "message",
                "plVar2": "infoStructPtr",
                "puVar3": "debugInfoArray",
                "lVar4": "tempVar",
                "puVar5": "tempPtr",
                "pcVar6": "filenameCopy",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nconvertAndStoreDebugInfo_0010bc80(long debugInfoStruct,char *filename,long fileOffset,uint debugLevel,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 message;\n  long *infoStructPtr;\n  undefined4 *debugInfoArray;\n  long tempVar;\n  undefined4 *tempPtr;\n  char *filenameCopy;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  filenameCopy = \"\";\n  if (filename != (char *)0x0) {\n    filenameCopy = filename;\n  }\n  if (fileOffset != 0) {\n    if (*(long *)(debugInfoStruct + 8) == 0) {\n      message = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",message);\n    }\n    else {\n      infoStructPtr = (long *)xmalloc(0x18);\n      *infoStructPtr = fileOffset;\n      *(undefined (*) [16])(infoStructPtr + 1) = ZEXT816(0);\n      debugInfoArray = (undefined4 *)xmalloc(0x30);\n      *(long **)(debugInfoStruct + 0x18) = infoStructPtr;\n      infoStructPtr[2] = (long)debugInfoArray;\n      tempPtr = debugInfoArray;\n      for (tempVar = 0xc; tempVar != 0; tempVar = tempVar + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debugInfoStruct + 0x20) = debugInfoArray;\n      tempVar = *(long *)(debugInfoStruct + 0x10);\n      *(undefined8 *)(debugInfoArray + 6) = param_5;\n      *(undefined8 *)(debugInfoArray + 8) = 0xffffffffffffffff;\n      tempVar = debug_add_to_namespace_constprop_0(tempVar + 0x10,filenameCopy,3,(debugLevel & 0xff) + 1);\n      if (tempVar != 0) {\n        *(long **)(tempVar + 0x20) = infoStructPtr;\n        message = CONCAT71((int7)((ulong)tempVar >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  message = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param_6;\n  returnValue._0_8_ = message;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "convert_and_store_debug_info_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00107880",
                "non_fatal",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "main",
                "simple_copy.cold",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_path_00114cf0",
                "param_1": "path",
                "pcVar1": "last_slash",
                "lVar2": "length",
                "lVar3": "path_start",
                "lVar4": "slash_offset",
                "pcVar5": "path_copy",
                "bVar6": "is_slash"
            },
            "code": "\nvoid allocate_path_00114cf0(char *path)\n\n{\n  char *last_slash;\n  long length;\n  long path_start;\n  long slash_offset;\n  char *path_copy;\n  byte is_slash;\n  \n  is_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_start = 0;\n  }\n  else {\n    slash_offset = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(slash_offset + 0xb);\n    path_start = slash_offset + 1;\n    path_copy = last_slash;\n    for (length = slash_offset; length != 0; length = length + -1) {\n      *path_copy = *path;\n      path = path + (ulong)is_slash * -2 + 1;\n      path_copy = path_copy + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_start) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_start) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_report_0010a181",
                "param_1": "reportData",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "formatFlag",
                "cVar1": "flag",
                "__s": "inputString",
                "__s_00": "additionalInfo",
                "sVar5": "stringLength1",
                "sVar6": "stringLength2",
                "__s_01": "outputString",
                "lVar7": "lineNumber",
                "local_41": "bitFlag",
                "iVar2": "multiplier",
                "iVar3": "result",
                "uVar4": "status"
            },
            "code": "\nundefined4 generateReport_0010a181(long reportData,long startValue,long endValue,byte formatFlag)\n\n{\n  char flag;\n  int multiplier;\n  int result;\n  undefined4 status;\n  char *inputString;\n  char *additionalInfo;\n  size_t stringLength1;\n  size_t stringLength2;\n  char *outputString;\n  long lineNumber;\n  byte bitFlag;\n  \n  flag = *(char *)(*(long *)(reportData + 0x60) + 0x1c);\n  inputString = (char *)stab_pop_type();\n  bitFlag = 1;\n  if (flag == '\\0') {\n    bitFlag = *(byte *)(*(long *)(reportData + 0x60) + 0x1c);\n  }\n  multiplier = *(int *)(*(long *)(reportData + 0x60) + 0x18);\n  additionalInfo = (char *)stab_pop_type(reportData);\n  stringLength1 = strlen(inputString);\n  stringLength2 = strlen(additionalInfo);\n  outputString = (char *)xmalloc(stringLength1 + 100 + stringLength2);\n  if (formatFlag == 0) {\n    *outputString = '\\0';\n    lineNumber = 0;\n    bitFlag = bitFlag & 1;\n  }\n  else {\n    lineNumber = *(long *)(reportData + 0x68);\n    *(long *)(reportData + 0x68) = lineNumber + 1;\n    sprintf(outputString,\"%ld=@S;\",lineNumber);\n    bitFlag = formatFlag;\n  }\n  stringLength1 = strlen(outputString);\n  sprintf(outputString + stringLength1,\"ar%s;%ld;%ld;%s\",inputString,startValue,endValue,additionalInfo);\n  free(inputString);\n  free(additionalInfo);\n  result = 0;\n  if (startValue <= endValue) {\n    result = multiplier * (((int)endValue - (int)startValue) + 1);\n  }\n  status = stab_push_string(reportData,outputString,lineNumber,bitFlag,result);\n  if ((char)status != '\\0') {\n    free(outputString);\n  }\n  return status;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_report_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "pcVar4": "headerFormat",
                "iVar1": "consoleWidth",
                "iVar2": "archIndex",
                "iVar3": "unknownCheck",
                "sVar5": "headerLength",
                "pcVar6": "tempDir",
                "uVar7": "tempDirResult",
                "piVar8": "errorNumber",
                "iVar9": "targetIndex",
                "lVar10": "tempDirLength",
                "lVar11": "currentTarget",
                "ppcVar12": "archInfo",
                "uVar13": "maxArchLength",
                "uVar14": "filenameLength",
                "local_70": "loopIndex"
            },
            "code": "\n\n\nvoid printBFDHeaderInfo_001199d0(void)\n\n{\n  int consoleWidth;\n  int archIndex;\n  int unknownCheck;\n  char *headerFormat;\n  size_t headerLength;\n  char *tempDir;\n  undefined8 tempDirResult;\n  int *errorNumber;\n  int targetIndex;\n  long tempDirLength;\n  long currentTarget;\n  char **archInfo;\n  uint maxArchLength;\n  ulong filenameLength;\n  int loopIndex;\n  \n  headerFormat = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerFormat,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    headerFormat = getenv(\"TMPDIR\");\n    tempDirResult = try_dir_lto_priv_0(headerFormat,0);\n    headerFormat = getenv(\"TMP\");\n    tempDirResult = try_dir_lto_priv_0(headerFormat,tempDirResult);\n    headerFormat = getenv(\"TEMP\");\n    tempDirResult = try_dir_lto_priv_0(headerFormat,tempDirResult);\n    tempDirResult = try_dir_lto_priv_0(&DAT_0011b39a,tempDirResult);\n    tempDirResult = try_dir_lto_priv_0(vartmp,tempDirResult);\n    headerFormat = (char *)try_dir_lto_priv_0(&tmp,tempDirResult);\n    if (headerFormat == (char *)0x0) {\n      headerFormat = \".\";\n    }\n    headerLength = strlen(headerFormat);\n    tempDir = (char *)xmalloc((int)headerLength + 2);\n    memoized_tmpdir = strcpy(tempDir,headerFormat);\n    memoized_tmpdir[headerLength & 0xffffffff] = '/';\n    memoized_tmpdir[(int)headerLength + 1] = '\\0';\n  }\n  headerFormat = memoized_tmpdir;\n  headerLength = strlen(memoized_tmpdir);\n  tempDirLength = (long)(int)headerLength;\n  tempDir = (char *)xmalloc(tempDirLength + 9);\n  strcpy(tempDir,headerFormat);\n  *(undefined2 *)(tempDir + tempDirLength) = 0x6363;\n  *(undefined4 *)(tempDir + tempDirLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempDir + tempDirLength + 2) + 3) = 0x585858;\n  tempDir[tempDirLength + 8] = '\\0';\n  archIndex = mkstemps(tempDir,0);\n  if (archIndex == -1) {\n    errorNumber = __errno_location();\n    tempDir = strerror(*errorNumber);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerFormat,tempDir);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempDir);\n  free(tempDir);\n  loopIndex = 0;\n  do {\n    headerFormat = (char *)bfd_printable_arch_mach(archIndex);\n    headerLength = strlen(headerFormat);\n    if ((int)maxArchLength < (int)(uint)headerLength) {\n      maxArchLength = (uint)headerLength;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerFormat = getenv(\"COLUMNS\");\n  archIndex = loopIndex;\n  if (headerFormat != (char *)0x0) {\n    tempDirLength = strtol(headerFormat,(char **)0x0,10);\n    consoleWidth = (int)tempDirLength;\n    if (consoleWidth != 0) goto LAB_00119b11;\n  }\n  consoleWidth = 0x50;\nLAB_00119b11:\n  do {\n    loopIndex = archIndex;\n    if (-1 < loopIndex) {\n      return;\n    }\n    currentTarget = (long)loopIndex;\n    targetIndex = (consoleWidth - maxArchLength) + -1;\n    tempDirLength = currentTarget;\n    do {\n      archIndex = (int)tempDirLength;\n      if (-1 < archIndex) break;\n      headerLength = strlen(*(char **)(tempDirLength * 0x60));\n      tempDirLength = tempDirLength + 1;\n      targetIndex = (targetIndex - (int)headerLength) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (archInfo = (char **)(currentTarget * 0x60);\n        ((ulong)(uint)(archIndex - loopIndex) + currentTarget) * 0x60 - (long)archInfo != 0;\n        archInfo = archInfo + 0xc) {\n      printf(\"%s \",*archInfo);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerFormat = (char *)bfd_printable_arch_mach(targetIndex,0);\n      unknownCheck = strcmp(headerFormat,\"UNKNOWN!\");\n      if (unknownCheck != 0) {\n        tempDirResult = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,tempDirResult);\n        archInfo = (char **)(currentTarget * 0x60);\n        unknownCheck = loopIndex;\n        while (archIndex != unknownCheck) {\n          if (*(char *)((long)archInfo + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            headerLength = strlen(*archInfo);\n            for (filenameLength = headerLength & 0xffffffff; (int)filenameLength != 0; filenameLength = (ulong)((int)filenameLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archInfo,_stdout);\n          }\n          unknownCheck = unknownCheck + 1;\n          if (archIndex != unknownCheck) {\n            putc(0x20,_stdout);\n          }\n          archInfo = archInfo + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "try_dir.lto_priv.0",
                "strlen",
                "dcgettext",
                "getenv",
                "strcpy",
                "display_info.isra.0.cold",
                "do_display_target",
                "xmalloc",
                "__errno_location",
                "bfd_printable_arch_mach",
                "mkstemps",
                "close",
                "abort",
                "bfd_iterate_over_targets",
                "unlink",
                "free",
                "printf",
                "strerror",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_bfd_header_info_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_attribute_notes_0010847a",
                "parse_build_attribute_notes_00116490": "parse_and_build_attribute_notes"
            },
            "code": "\nvoid initialize_attribute_notes_0010847a(void)\n\n{\n  parse_and_build_attribute_notes();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_attribute_notes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_demangled_string_0010d21c",
                "bVar1": "currentByte",
                "pbVar2": "strPtr",
                "bVar3": "parsedByte",
                "cVar4": "parsedChar",
                "bVar5": "result",
                "uVar6": "returnVal",
                "iVar7": "tempVar",
                "uVar8": "count",
                "sVar9": "length",
                "pbVar10": "currentPtr",
                "__ptr": "stringPtr",
                "__ptr_00": "stringWithPrefixPtr",
                "__haystack": "haystack",
                "pcVar11": "substringPtr",
                "uVar12": "newString",
                "pcVar13": "currentCharPtr",
                "bVar14": "byteVal",
                "pcVar15": "copyPtr",
                "bVar16": "tempByte",
                "bVar17": "var17",
                "bVar18": "var18",
                "bVar19": "var19",
                "uVar20": "loopCounter",
                "uVar21": "countVal",
                "local_3c": "counterArray"
            },
            "code": "\nundefined4 reverseDemangledString_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte currentByte;\n  byte *strPtr;\n  byte parsedByte;\n  char parsedChar;\n  byte result;\n  undefined4 returnVal;\n  int tempVar;\n  uint count;\n  size_t length;\n  byte *currentPtr;\n  void *stringPtr;\n  void *stringWithPrefixPtr;\n  char *haystack;\n  char *substringPtr;\n  undefined8 newString;\n  char *currentCharPtr;\n  byte byteVal;\n  char *copyPtr;\n  byte tempByte;\n  byte var17;\n  byte var18;\n  byte var19;\n  uint loopCounter;\n  ulong countVal;\n  uint counterArray [3];\n  \n  strPtr = *param_2;\n  *param_2 = strPtr + 1;\n  counterArray[0] = stab_demangle_count(param_2);\n  countVal = (ulong)counterArray[0];\n  if (counterArray[0] != 0) {\n    currentPtr = *param_2;\n    length = strlen((char *)currentPtr);\n    if (countVal <= length) {\n      *param_2 = currentPtr + countVal;\n      loopCounter = 0;\n      returnVal = stab_demangle_get_count(param_2,counterArray);\n      if ((char)returnVal != '\\0') {\nLAB_0010d2b4:\n        if (counterArray[0] <= loopCounter) {\n          if (param_3 == (undefined8 *)0x0) {\n            return returnVal;\n          }\n          stringPtr = (void *)savestring(strPtr,(int)*param_2 - (int)strPtr);\n          stringWithPrefixPtr = (void *)concat(\"NoSuchStrinG__\",stringPtr,0);\n          free(stringPtr);\n          haystack = (char *)cplus_demangle(stringWithPrefixPtr,2);\n          free(stringWithPrefixPtr);\n          if ((haystack != (char *)0x0) &&\n             (substringPtr = strstr(haystack,\"::NoSuchStrinG\"), currentCharPtr = haystack,\n             copyPtr = haystack, substringPtr != (char *)0x0)) {\n            for (; currentCharPtr != substringPtr; currentCharPtr = currentCharPtr + 1) {\n              if ((*currentCharPtr != ' ') ||\n                 (((currentCharPtr[1] == '>' && (haystack < currentCharPtr)) && (currentCharPtr[-1] == '>')))) {\n                *copyPtr = *currentCharPtr;\n                copyPtr = copyPtr + 1;\n              }\n            }\n            newString = savestring(haystack,(int)copyPtr - (int)haystack);\n            *param_3 = newString;\n            free(haystack);\n            return returnVal;\n          }\n          stab_bad_demangle(strPtr);\n          free(haystack);\n          return 0;\n        }\n        currentPtr = *param_2;\n        if (*currentPtr != 0x5a) {\n          result = stab_demangle_type_lto_priv_0(param_1,param_2,0);\n          if (result == 0) {\n            return 0;\n          }\n          parsedByte = 0;\n          byteVal = 0;\n          var18 = 0;\n          var17 = 0;\n          var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              tempByte = parsedByte;\n              currentByte = *currentPtr;\n              if ((byteVal | currentByte == 0) != 0) {\n                result = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              parsedByte = result;\n              byteVal = result;\n            } while ('v' < (char)currentByte);\n            if ((char)currentByte < 'b') {\n              if ((char)currentByte < 'U') {\n                if ((char)currentByte < 'C') goto LAB_0010d2e9;\n                countVal = 1L << (currentByte + 0xbd & 0x3f);\n                if ((countVal & 0x11409) == 0) {\n                  if ((countVal & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (currentByte == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(currentByte + 0xab)) goto LAB_0010d2e9;\n              currentPtr = currentPtr + 1;\n              parsedByte = tempByte;\n              byteVal = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(currentByte) {\n            case 0x62:\n              parsedByte = tempByte;\n              var18 = result;\n              break;\n            case 99:\n              parsedByte = tempByte;\n              var19 = result;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              parsedByte = tempByte;\n              var17 = result;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = currentPtr + 1;\n        parsedChar = stab_demangle_type_lto_priv_0(param_1,param_2,0);\n        if (parsedChar == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(strPtr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (tempByte == 0) {\n    if (var19 == 0) {\n      if (var18 == 0) {\n        if (var17 == 0) {\n          if (result != 0) {\n            count = stab_demangle_count(param_2);\n            if (count == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + count;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            currentPtr = *param_2;\n            if (((&_sch_istable)[(ulong)*currentPtr * 2] & 4) == 0) break;\n            *param_2 = currentPtr + 1;\n          }\n          if (*currentPtr == 0x2e) {\n            do {\n              currentPtr = currentPtr + 1;\n              *param_2 = currentPtr;\n            } while (((&_sch_istable)[(ulong)*currentPtr * 2] & 4) != 0);\n          }\n          currentPtr = *param_2;\n          if (*currentPtr == 0x65) {\n            do {\n              currentPtr = currentPtr + 1;\n              *param_2 = currentPtr;\n            } while (((&_sch_istable)[(ulong)*currentPtr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        count = stab_demangle_count(param_2);\n        if (1 < count) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      tempVar = stab_demangle_count(param_2);\n      if (tempVar == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  loopCounter = loopCounter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "cplus_demangle",
                "savestring",
                "strlen",
                "abort",
                "strstr",
                "concat",
                "stab_demangle_type.lto_priv.0",
                "free",
                "stab_demangle_count",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "reverse_demangled_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_and_delete_hashtables_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupAndDeleteHashtables_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(strip_specific_htab);\n  htab_delete(strip_unneeded_htab);\n  htab_delete(keep_specific_htab);\n  htab_delete(localize_specific_htab);\n  htab_delete(globalize_specific_htab);\n  htab_delete(keepglobal_specific_htab);\n  htab_delete(weaken_specific_htab);\n  htab_delete(redefine_specific_htab);\n  htab_delete(redefine_specific_reverse_htab,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_and_delete_hashtables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_or_debug_record_0010c139",
                "param_1": "configuration",
                "param_2": "struct_ptr",
                "param_3": "data_ptr",
                "param_4": "param_a",
                "param_5": "param_b",
                "param_6": "param_c",
                "uVar1": "old_value",
                "cVar2": "char_value",
                "uVar3": "result",
                "puVar4": "allocated_ptr",
                "in_R10": "param_e",
                "unaff_R15": "param_f"
            },
            "code": "\nulong allocate_or_debug_record_0010c139(undefined8 configuration,long struct_ptr,undefined8 data_ptr,undefined8 param_a,\n                  undefined4 param_b,undefined8 param_c)\n\n{\n  undefined8 old_value;\n  char char_value;\n  ulong result;\n  undefined8 *allocated_ptr;\n  undefined8 param_e;\n  undefined8 param_f;\n  \n  char_value = *(char *)(struct_ptr + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(struct_ptr + 0x40) != 0 || (*(char *)(struct_ptr + 0x44) == '\\0')))) {\n    allocated_ptr = (undefined8 *)xmalloc(0x28);\n    old_value = *(undefined8 *)(struct_ptr + 0x78);\n    *(undefined8 *)((long)allocated_ptr + 0x1c) = 0;\n    allocated_ptr[2] = param_a;\n    *(undefined4 *)(allocated_ptr + 3) = param_b;\n    allocated_ptr[4] = param_c;\n    *(undefined8 **)(struct_ptr + 0x78) = allocated_ptr;\n    *allocated_ptr = old_value;\n    allocated_ptr[1] = data_ptr;\n    return CONCAT71((int7)((ulong)param_f >> 8),char_value) & 0xffffffff;\n  }\n  result = debug_record_variable(configuration,data_ptr,param_a,param_b,param_c,param_e);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "allocate_or_debug_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_symbol_0010e439",
                "param_1": "baseAddress",
                "param_2": "symbolValue",
                "stab_write_symbol_lto_priv_0": "writeSymbolLTO"
            },
            "code": "\nvoid updateSymbol_0010e439(long baseAddress,undefined8 symbolValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = symbolValue;\n  writeSymbolLTO(baseAddress,0x84,0,0,symbolValue);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "imported": false,
            "current_name": "update_symbol_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "main",
                "parse_stab",
                "stab_push_string",
                "FUN_0010554f",
                "save_stab"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "stab_modify_type",
                "FUN_00114dc7",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "stab_class_start_method.lto_priv.0",
                "stab_demangle_remember_type",
                "stab_demangle_v3_arglist",
                "do_display_target",
                "stab_class_baseclass.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_class_method_var",
                "stab_demangle_arg",
                "stab_get_struct_index",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "try_dir.lto_priv.0",
                "FUN_00104ea2",
                "main",
                "get_file_size"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "param",
                "param_2": "count",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 param,int count)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (count - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(count - 1U) * 8);\n  }\n  stab_push_defined_type(param,defaultValue,count);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_file_access_00112502",
                "param_1": "file_data",
                "param_2": "file_handle",
                "param_3": "file_size",
                "uVar1": "index",
                "puVar2": "file_array",
                "uVar3": "next_file_handle",
                "cVar4": "valid_line"
            },
            "code": "\nundefined check_file_access_00112502(long file_data,undefined8 file_handle,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_array;\n  undefined8 next_file_handle;\n  char valid_line;\n  \n  do {\n    file_array = *(undefined8 **)(file_data + 0x40);\n    if (file_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_data + 0x48), index < 10 && (file_array[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      valid_line = stab_lineno_lto_priv_0(file_handle,*(undefined8 *)(file_array[1] + 8));\n      if (valid_line == '\\0') {\n        return 0;\n      }\n      *(int *)(file_data + 0x48) = *(int *)(file_data + 0x48) + 1;\n    }\n    next_file_handle = *file_array;\n    *(undefined4 *)(file_data + 0x48) = 0;\n    *(undefined8 *)(file_data + 0x40) = next_file_handle;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "check_file_access_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "unaff_RBX": "current_line",
                "pbVar5": "current_char",
                "unaff_EBP": "line_number",
                "in_R10": "line_buffer",
                "unaff_R13": "result",
                "unaff_R14": "line_start",
                "unaff_R15": "prev_line_start",
                "param_7": "filename",
                "param_8": "result_ptr",
                "param_9": "line_end",
                "ppbVar2": "slot",
                "uVar1": "error_msg",
                "pbVar3": "char_ptr",
                "bVar4": "current_byte"
            },
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_msg;\n  byte **slot;\n  byte *char_ptr;\n  byte current_byte;\n  byte *current_line;\n  byte *current_char;\n  int line_number;\n  byte *line_buffer;\n  undefined8 result;\n  byte *line_start;\n  byte *prev_line_start;\n  undefined8 filename;\n  undefined8 *result_ptr;\n  byte *line_end;\n  \ncode_r0x00104cc1:\n  line_end = line_buffer;\n  error_msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(error_msg,filename,line_number);\n  current_char = current_line;\n  line_buffer = line_end;\nLAB_00114599:\n  do {\n    *line_buffer = 0;\n    if (prev_line_start < line_buffer) {\n      slot = (byte **)htab_find_slot();\n      *slot = prev_line_start;\n    }\n    line_number = line_number + 1;\n    char_ptr = current_char;\n    if (line_start[1] == 0) {\n      *result_ptr = result;\n      return;\n    }\n    for (; current_byte = *char_ptr, line_start = char_ptr, current_byte != 10; char_ptr = char_ptr + 1) {\n      if ((char)current_byte < '\\v') {\n        if (current_byte == 0) {\n          current_line = char_ptr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (current_byte == 0xd) {\n          *char_ptr = 0;\n          current_line = char_ptr + 1;\n          if (char_ptr[1] == 10) {\n            current_line = char_ptr + 2;\n            line_start = char_ptr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (current_byte == 0x23) {\n          process_lines_00104cc1_00104d1c();\n          return;\n        }\n      }\n    }\n    *char_ptr = 0;\n    if (char_ptr[1] == 0xd) {\n      line_start = char_ptr + 1;\n      current_line = char_ptr + 2;\n    }\n    else {\n      current_line = char_ptr + 1;\n    }\nLAB_00114553:\n    current_byte = *current_char;\n    prev_line_start = current_char;\n    while ((current_byte == 0x20 || (line_buffer = prev_line_start, current_byte == 9))) {\n      current_char = prev_line_start + 1;\n      prev_line_start = prev_line_start + 1;\n      current_byte = *current_char;\n    }\n    do {\n      current_char = current_line;\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = line_buffer[1];\n      line_buffer = line_buffer + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    current_byte = line_buffer[1];\n    if ((((((current_byte == 9) || (current_byte == 0x20)) && ((current_byte = line_buffer[2], current_byte == 9 || (current_byte == 0x20)))\n          ) && ((current_byte = line_buffer[3], current_byte == 9 || (current_byte == 0x20)))) &&\n        ((current_byte = line_buffer[4], current_byte == 9 || (current_byte == 0x20)))) &&\n       ((current_byte = line_buffer[5], current_byte == 9 || (current_byte == 0x20)))) {\n      current_byte = line_buffer[6];\n      char_ptr = line_buffer + 6;\n      if ((current_byte == 9) || (current_byte == 0x20)) {\n        do {\n          do {\n            current_byte = char_ptr[1];\n            char_ptr = char_ptr + 1;\n          } while (current_byte == 0x20);\n        } while (current_byte == 9);\n      }\n    }\n    if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "non_fatal",
                "htab_find_slot",
                "dcgettext",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_object_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "objectPointer",
                "plVar2": "newObjectPointer"
            },
            "code": "\nlong createObject_00113bfa(long input1,long input2)\n\n{\n  long objectPointer;\n  long *newObjectPointer;\n  \n  if (((input1 != 0) && (input2 != 0)) &&\n     (objectPointer = debug_make_type_constprop_0(0x12,0), objectPointer != 0)) {\n    newObjectPointer = (long *)xmalloc(0x10);\n    *newObjectPointer = input1;\n    newObjectPointer[1] = input2;\n    *(long **)(objectPointer + 0x10) = newObjectPointer;\n    return objectPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_object_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_needed_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "param2_0",
                "uVar2": "param2_1",
                "unaff_EBX": "ebx"
            },
            "code": "\nuint dropShareFlagIfNeeded_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 param2_0;\n  undefined8 param2_1;\n  uint ebx;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    param2_0 = *param2;\n    ebx = ebx & 0xf7ffffff;\n    param2_1 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(param2_1,param2_0,param3);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_needed_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_push_string_00109e76",
                "param_1": "inputPointer",
                "param_2": "inputUInt",
                "local_5a": "outputString",
                "lVar1": "currentValue"
            },
            "code": "\nvoid updateAndPushString_00109e76(long inputPointer,uint inputUInt)\n\n{\n  long currentValue;\n  char outputString [58];\n  \n  currentValue = *(long *)(inputPointer + 0x68);\n  *(long *)(inputPointer + 0x68) = currentValue + 1;\n  sprintf(outputString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)inputUInt);\n  stab_push_string(inputPointer,outputString,currentValue,1,inputUInt * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_and_push_string_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_saved_stabs_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "nextIndex",
                "lVar2": "entryOffset",
                "uVar3": "duplicatedString"
            },
            "code": "\nulong updateSavedStabsEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int nextIndex;\n  long entryOffset;\n  undefined8 duplicatedString;\n  \n  entryOffset = (long)saved_stabs_index * 0x18;\n  free(*(void **)(saved_stabs + entryOffset + 0x10));\n  *(undefined4 *)(saved_stabs + entryOffset) = newValue1;\n  *(undefined4 *)(saved_stabs + entryOffset + 4) = newValue2;\n  *(undefined8 *)(saved_stabs + entryOffset + 8) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  *(undefined8 *)(saved_stabs + entryOffset + 0x10) = duplicatedString;\n  nextIndex = saved_stabs_index + 1;\n  saved_stabs_index = nextIndex % 0x10;\n  return (long)nextIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_saved_stabs_entry_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "stab_lineno.lto_priv.0",
                "debug_start_source"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_nested_structs_0010afd5",
                "param_1": "ptrList",
                "param_2": "structPtr",
                "param_3": "str",
                "param_4": "strLen",
                "param_5": "value",
                "param_6": "debugVal",
                "__s2": "strCopy",
                "puVar2": "nestedStructPtr",
                "uVar3": "indirectType",
                "lVar4": "tempVar",
                "puVar5": "nestedStructListPtr",
                "puVar6": "flagPtr",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16]\nfindStringInNestedStructs_0010afd5(undefined8 *ptrList,long structPtr,undefined8 str,undefined4 strLen,\n            undefined4 value,undefined8 debugVal)\n\n{\n  int iVar1;\n  char *strCopy;\n  undefined8 *nestedStructPtr;\n  undefined8 indirectType;\n  long tempVar;\n  undefined8 *nestedStructListPtr;\n  undefined4 *flagPtr;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  strCopy = (char *)savestring(str,strLen);\n  for (ptrList = (undefined8 *)*ptrList; ptrList != (undefined8 *)0x0;\n      ptrList = (undefined8 *)*ptrList) {\n    for (nestedStructPtr = (undefined8 *)ptrList[1]; nestedStructPtr != (undefined8 *)0x0;\n        nestedStructPtr = (undefined8 *)*nestedStructPtr) {\n      if ((undefined8 *)nestedStructPtr[2] != (undefined8 *)0x0) {\n        for (nestedStructListPtr = *(undefined8 **)(undefined8 *)nestedStructPtr[2]; nestedStructListPtr != (undefined8 *)0x0;\n            nestedStructListPtr = (undefined8 *)*nestedStructListPtr) {\n          if ((*(int *)((long)nestedStructListPtr + 0x14) == 1) && (*(char *)nestedStructListPtr[1] == *strCopy)) {\n            iVar1 = strcmp((char *)nestedStructListPtr[1],strCopy);\n            if (iVar1 == 0) {\n              tempVar = nestedStructListPtr[4];\n              if (tempVar == 0) goto LAB_0010b05b;\n              free(strCopy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  nestedStructPtr = *(undefined8 **)(structPtr + 0x1a0);\n  do {\n    if (nestedStructPtr == (undefined8 *)0x0) {\n      nestedStructPtr = (undefined8 *)xmalloc(0x28);\n      indirectType = *(undefined8 *)(structPtr + 0x1a0);\n      flagPtr = (undefined4 *)((long)nestedStructPtr + 0x14);\n      for (tempVar = 5; tempVar != 0; tempVar = tempVar + -1) {\n        *flagPtr = 0;\n        flagPtr = flagPtr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(nestedStructPtr + 2) = value;\n      *nestedStructPtr = indirectType;\n      nestedStructPtr[1] = strCopy;\n      indirectType = debug_make_indirect_type_isra_0(nestedStructPtr + 3,strCopy);\n      *(undefined8 **)(structPtr + 0x1a0) = nestedStructPtr;\n      nestedStructPtr[4] = indirectType;\nLAB_0010b0e7:\n      tempVar = nestedStructPtr[4];\nLAB_0010b0eb:\n      result._8_8_ = debugVal;\n      result._0_8_ = tempVar;\n      return result;\n    }\n    if (*(char *)nestedStructPtr[1] == *strCopy) {\n      iVar1 = strcmp((char *)nestedStructPtr[1],strCopy);\n      if (iVar1 == 0) {\n        if (*(int *)(nestedStructPtr + 2) == 0) {\n          *(undefined4 *)(nestedStructPtr + 2) = value;\n        }\n        free(strCopy);\n        goto LAB_0010b0e7;\n      }\n    }\n    nestedStructPtr = (undefined8 *)*nestedStructPtr;\n  } while( true );\n}\n\n",
            "called": [
                "savestring",
                "debug_make_indirect_type.isra.0",
                "free",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_string_in_nested_structs_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_count",
                "debug_get_real_type.isra.0",
                "debug_make_type.constprop.0",
                "malloc",
                "sprintf",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_qualified",
                "debug_make_float_type.isra.0",
                "parse_number",
                "cplus_demangle_init_info",
                "debug_make_void_type.isra.0",
                "savestring",
                "strlen",
                "dcgettext",
                "strcpy",
                "xmalloc",
                "warn_stab",
                "parse_stab_type_number",
                "debug_make_enum_type.isra.0",
                "cplus_demangle_mangled_name",
                "startswith.lto_priv.0.lto_priv.0",
                "strchr",
                "stab_find_tagged_type",
                "xrealloc",
                "debug_find_named_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "stab_find_type",
                "stab_demangle_template",
                "strtol",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_make_const_type.isra.0",
                "free",
                "parse_stab_type",
                "strncmp",
                "fprintf",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_remember_type",
                "bad_stab",
                "strcat",
                "debug_make_offset_type.isra.0",
                "strcmp",
                "stab_bad_demangle",
                "strstr",
                "strspn",
                "concat",
                "debug_make_function_type.isra.0",
                "stab_find_slot",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "offset",
                "piVar3": "stabPtr",
                "iVar4": "index",
                "_stderr": "standardError"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long offset;\n  int *stabPtr;\n  int index;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(standardError,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,standardError);\n  index = saved_stabs_index;\n  do {\n    offset = (long)index * 0x18;\n    stabPtr = (int *)(saved_stabs + offset);\n    if (*(long *)(saved_stabs + offset + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*stabPtr);\n      if (stabName == 0) {\n        if (*stabPtr == 0) {\n          fwrite(\"HdrSym\",1,6,standardError);\n        }\n        else {\n          fprintf(standardError,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(standardError,\"%-6s\",stabName);\n      }\n      fprintf(standardError,\" %-6d \",(ulong)*(uint *)(saved_stabs + offset + 4));\n      fprintf(standardError,\"%08lx\",*(undefined8 *)(saved_stabs + offset + 8));\n      if (*stabPtr != 0) {\n        fprintf(standardError,\" %s\",*(undefined8 *)(saved_stabs + offset + 0x10));\n      }\n      fputc(10,standardError);\n    }\n    index = (index + 1) % 0x10;\n  } while (saved_stabs_index != index);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "ptr",
                "stab_modify_type": "modifyType"
            },
            "code": "\nvoid modifyStabType_0010a083(long ptr)\n\n{\n  modifyType(ptr,0x2a,4,ptr + 0x178,ptr + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_memory_and_copy_00109c2e",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "count",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "lVar1": "newPtr",
                "plVar2": "entry",
                "lVar3": "i",
                "puVar4": "ptrEnd",
                "uVar5": "size",
                "bVar6": "increment",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandMemoryAndCopy_00109c2e(long ptr,long value,ulong count,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long newPtr;\n  long *entry;\n  long i;\n  undefined *ptrEnd;\n  ulong size;\n  byte increment;\n  undefined returnValue [16];\n  \n  increment = 0;\n  count = count & 0xffffffff;\n  size = *(ulong *)(ptr + 0x1b0);\n  if (size <= count) {\n    if (size == 0) {\n      size = 10;\n    }\n    for (; size <= count; size = size * 2) {\n    }\n    newPtr = xrealloc(*(undefined8 *)(ptr + 0x1a8),size * 0x18);\n    *(long *)(ptr + 0x1a8) = newPtr;\n    ptrEnd = (undefined *)(*(long *)(ptr + 0x1b0) * 0x18 + newPtr);\n    for (i = (size - *(long *)(ptr + 0x1b0)) * 0x18; i != 0; i = i + -1) {\n      *ptrEnd = 0;\n      ptrEnd = ptrEnd + (ulong)increment * -2 + 1;\n    }\n    *(ulong *)(ptr + 0x1b0) = size;\n  }\n  entry = (long *)(count * 0x18 + *(long *)(ptr + 0x1a8));\n  if (*entry == 0) {\n    newPtr = *(long *)(ptr + 0x68);\n    *entry = newPtr;\n    *(long *)(ptr + 0x68) = newPtr + 1;\n    entry[1] = value;\n    *(int *)(entry + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(entry + 2) = 0;\n    *(undefined4 *)((long)entry + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)entry + 0x14);\n  }\n  returnValue._8_8_ = data;\n  returnValue._0_8_ = *entry;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_start_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "expand_memory_and_copy_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_message_001053b5",
                "uVar1": "errorString"
            },
            "code": "\nvoid printErrorMessage_001053b5(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "print_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_debug_to_namespace_00112996",
                "param_1": "inputPointer",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 addDebugToNamespace_00112996(long inputPointer,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(inputPointer + 8) != 0) && (*(long *)(inputPointer + 0x10) != 0)) {\n    offset = *(long *)(inputPointer + 0x10) + 0x10;\n    if (*(long *)(inputPointer + 0x20) != 0) {\n      offset = *(long *)(inputPointer + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_debug_to_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "classInfo",
                "param_2": "className",
                "param_3": "type",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "typeSize",
                "lVar3": "infoPtr",
                "piVar4": "typePtr",
                "__s1": "existingName",
                "cVar5": "isSameType",
                "iVar6": "newID",
                "puVar7": "newInfo",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setClassID_0010c7a0(long classInfo,char *className,int *type,undefined8 param4)\n\n{\n  undefined8 result;\n  uint typeSize;\n  long infoPtr;\n  int *typePtr;\n  char *existingName;\n  char isSameType;\n  int newID;\n  undefined8 *newInfo;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  infoPtr = *(long *)(type + 4);\n  newInfo = (undefined8 *)(ulong)*(uint *)(infoPtr + 0xc);\n  if (*(uint *)(infoPtr + 0xc) <= *(uint *)(classInfo + 0x38)) {\n    for (newInfo = *(undefined8 **)(classInfo + 0x50); newInfo != (undefined8 *)0x0;\n        newInfo = (undefined8 *)*newInfo) {\n      typePtr = (int *)newInfo[1];\n      if (*typePtr == *type) {\n        existingName = (char *)newInfo[2];\n        if (className == (char *)0x0) {\n          if (existingName == (char *)0x0) {\nLAB_0010c82c:\n            isSameType = debug_type_samep(classInfo,typePtr,type);\n            if (isSameType != '\\0') {\n              typeSize = *(uint *)(*(long *)(newInfo[1] + 0x10) + 0xc);\n              newInfo = (undefined8 *)(ulong)typeSize;\n              *(uint *)(infoPtr + 0xc) = typeSize;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existingName != (char *)0x0) && (*existingName == *className)) &&\n                (newID = strcmp(existingName,className), newID == 0)) goto LAB_0010c82c;\n      }\n    }\n    newID = *(int *)(classInfo + 0x34) + 1;\n    *(int *)(classInfo + 0x34) = newID;\n    *(int *)(infoPtr + 0xc) = newID;\n    newInfo = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(classInfo + 0x50);\n    newInfo[2] = className;\n    *(undefined8 **)(classInfo + 0x50) = newInfo;\n    *newInfo = result;\n    newInfo[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)newInfo >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "debug_type_samep",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_2": "source",
                "param_3": "target",
                "uVar1": "source_type",
                "uVar2": "target_type",
                "pplVar3": "source_children",
                "ppcVar4": "source_string",
                "ppcVar5": "target_string",
                "lVar6": "source_value",
                "lVar7": "target_value",
                "lVar8": "source_length",
                "pcVar9": "source_char",
                "pcVar10": "target_char",
                "cVar11": "comparison_result",
                "bVar12": "result",
                "iVar13": "comparison",
                "uVar14": "real_type_source",
                "uVar15": "real_type_target",
                "puVar16": "ptr_source",
                "puVar17": "ptr_target",
                "plVar18": "pointer_source",
                "lVar19": "index",
                "lVar22": "offset",
                "local_70": "current_source",
                "local_58": "head",
                "plStack_50": "temp",
                "local_48": "current_target",
                "plVar20": "child_source",
                "plVar21": "child_target"
            },
            "code": "\nbyte checkEquality_0010922b(long param_1,long *source,long *target)\n\n{\n  uint source_type;\n  uint target_type;\n  long **source_children;\n  char **source_string;\n  char **target_string;\n  long source_value;\n  long target_value;\n  long source_length;\n  char *source_char;\n  char *target_char;\n  char comparison_result;\n  byte result;\n  int comparison;\n  undefined8 real_type_source;\n  undefined8 real_type_target;\n  undefined8 *ptr_source;\n  undefined8 *ptr_target;\n  long *pointer_source;\n  long index;\n  long *child_source;\n  long *child_target;\n  long offset;\n  long *current_source;\n  undefined8 *head;\n  long *temp;\n  long *current_target;\n  \n  pointer_source = target;\n  if (source == (long *)0x0) {\nLAB_00109241:\n    return target == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (pointer_source == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    source_type = *(uint *)source;\n    if (source_type == 1) goto code_r0x00109263;\n    while (target_type = *(uint *)target, target_type == 1) {\n      target = **(long ***)target[2];\n      if (target == (long *)0x0) {\n        return false;\n      }\n    }\n    if (source == target) {\n      return true;\n    }\n    if (source_type != 0x16) break;\n    if (target_type != 0x17) goto LAB_001092cb;\n    source = *(long **)(source[2] + 8);\n    if (source == (long *)0x0) goto LAB_00109241;\n  }\n  if ((source_type == 0x17) && (target_type == 0x16)) {\n    target = *(long **)(target[2] + 8);\n    pointer_source = target;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*source != *target) {\n    return false;\n  }\n  if (source_type == 3) {\n    return *(char *)(source + 2) == *(char *)(target + 2);\n  }\n  if (source_type < 4) {\n    if (source_type == 2) {\n      return true;\n    }\n  }\n  else if (source_type - 4 < 3) {\n    return true;\n  }\n  head = *(undefined8 **)(param_1 + 0x58);\n  for (ptr_target = head; ptr_target != (undefined8 *)0x0; ptr_target = (undefined8 *)*ptr_target) {\n    if (((long *)ptr_target[1] == source) && ((long *)ptr_target[2] == target)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_1 + 0x58) = &head;\n  temp = source;\n  current_target = target;\n  switch(source_type) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    pointer_source = (long *)source[2];\n    source_children = (long **)target[2];\n    if (pointer_source == (long *)0x0) {\n      result = source_children == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (source_children == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_1 + 0x38) < *(uint *)((long)pointer_source + 0xc)) &&\n       (*(uint *)((long)pointer_source + 0xc) == *(uint *)((long)source_children + 0xc))) goto LAB_001097af;\n    ptr_target = (undefined8 *)*pointer_source;\n    current_source = *source_children;\n    if (((ptr_target == (undefined8 *)0x0) == (current_source == (long *)0x0)) &&\n       ((((pointer_source[2] == 0) == (source_children[2] == (long *)0x0) &&\n         ((pointer_source[3] == 0) == (source_children[3] == (long *)0x0))) &&\n        ((pointer_source[4] == 0) == (source_children[4] == (long *)0x0))))) {\n      if (ptr_target == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((pointer_source[4] != 0) &&\n           (comparison_result = checkEquality_0010922b(param_1,pointer_source[4],source_children[4]), comparison_result == '\\0'))\n        goto LAB_00109382;\n        child_target = (long *)pointer_source[2];\n        if (child_target == (long *)0x0) {\nLAB_00109540:\n          ptr_target = (undefined8 *)pointer_source[3];\n          if (ptr_target == (undefined8 *)0x0) goto LAB_001097af;\n          pointer_source = source_children[3];\n          while( true ) {\n            target_string = (char **)*ptr_target;\n            if (target_string == (char **)0x0) {\n              result = *pointer_source == 0;\n              goto LAB_001099c4;\n            }\n            source_string = (char **)*pointer_source;\n            if (source_string == (char **)0x0) break;\n            if ((**target_string != **source_string) || (comparison = strcmp(*target_string,*source_string), comparison != 0))\n            break;\n            source_char = target_string[1];\n            target_char = source_string[1];\n            if ((source_char == (char *)0x0) != (target_char == (char *)0x0)) break;\n            if (source_char != (char *)0x0) {\n              offset = 0;\n              while( true ) {\n                target_string = *(char ***)(source_char + offset);\n                source_string = *(char ***)(target_char + offset);\n                if (target_string == (char **)0x0) break;\n                if (source_string == (char **)0x0) goto LAB_00109382;\n                if ((((**target_string != **source_string) ||\n                     ((((ulong)target_string[2] ^ (ulong)source_string[2]) & 0xffffffffffff) != 0)) ||\n                    ((target_string[3] != source_string[3] ||\n                     ((((target_string[4] == (char *)0x0) != (source_string[4] == (char *)0x0) ||\n                       (comparison = strcmp(*target_string,*source_string), comparison != 0)) ||\n                      (comparison_result = checkEquality_0010922b(param_1,target_string[1],source_string[1]), comparison_result == '\\0')))))) ||\n                   ((target_string[4] != (char *)0x0 &&\n                    (comparison_result = checkEquality_0010922b(param_1,target_string[4],source_string[4]), comparison_result == '\\0'))))\n                goto LAB_00109382;\n                offset = offset + 8;\n              }\n              if (source_string == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_target = ptr_target + 1;\n            pointer_source = pointer_source + 1;\n          }\n        }\n        else {\n          child_source = source_children[2];\n          for (; ptr_target = (undefined8 *)*child_target, ptr_target != (undefined8 *)0x0;\n              child_target = child_target + 1) {\n            ptr_source = (undefined8 *)*child_source;\n            if ((((ptr_source == (undefined8 *)0x0) ||\n                 (((ptr_target[1] ^ ptr_source[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_target + 2) != *(int *)(ptr_source + 2))) ||\n               (comparison_result = checkEquality_0010922b(param_1,*ptr_target,*ptr_source), comparison_result == '\\0'))\n            goto LAB_00109382;\n            child_source = child_source + 1;\n          }\n          if (*child_source == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; target_string = (char **)*ptr_target, target_string != (char **)0x0; ptr_target = ptr_target + 1) {\n          source_string = (char **)*current_source;\n          if (source_string == (char **)0x0) goto LAB_00109382;\n          source_char = *source_string;\n          target_char = *target_string;\n          if ((*target_char != *source_char) ||\n             ((((ulong)target_string[2] ^ (ulong)source_string[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)target_string + 0x14) == '\\0') {\n            if (target_string[3] == source_string[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison = strcmp(target_string[3],source_string[3]);\n          if (comparison != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison = strcmp(target_char,source_char);\n          if (((comparison != 0) || (target_string[1] == (char *)0x0)) || (source_string[1] == (char *)0x0))\n          goto LAB_00109382;\n          real_type_source = debug_get_real_type_isra_0(source_string[1],0);\n          real_type_target = debug_get_real_type_isra_0(target_string[1],0);\n          comparison_result = checkEquality_0010922b(param_1,real_type_target,real_type_source);\n          if (comparison_result == '\\0') goto LAB_00109382;\n          current_source = current_source + 1;\n        }\n        if (*current_source == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    pointer_source = (long *)source[2];\n    child_target = (long *)target[2];\n    if (pointer_source == (long *)0x0) {\n      result = child_target == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (child_target == (long *)0x0) goto LAB_00109382;\n    offset = *pointer_source;\n    source_value = *child_target;\n    index = 0;\n    target_value = pointer_source[1];\n    source_length = child_target[1];\n    do {\n      source_char = *(char **)(offset + index);\n      if (source_char == (char *)0x0) {\n        result = *(long *)(source_value + index) == 0;\n        goto LAB_001099c1;\n      }\n      target_char = *(char **)(source_value + index);\n      if (((target_char == (char *)0x0) || (*source_char != *target_char)) ||\n         (*(long *)(target_value + index) != *(long *)(source_length + index))) break;\n      comparison = strcmp(source_char,target_char);\n      index = index + 8;\n    } while (comparison == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(param_1,source[2],target[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)source[2] + 2) == *(char *)((undefined8 *)target[2] + 2)) &&\n       (comparison_result = checkEquality_0010922b(param_1,*(undefined8 *)source[2],*(undefined8 *)target[2]),\n       comparison_result != '\\0')) {\n      pointer_source = *(long **)(source[2] + 8);\n      child_target = *(long **)(target[2] + 8);\n      if ((pointer_source == (long *)0x0) == (child_target == (long *)0x0)) {\n        if (pointer_source == (long *)0x0) goto LAB_001097af;\n        while (((*pointer_source != 0 && (*child_target != 0)) &&\n               (comparison_result = checkEquality_0010922b(param_1), comparison_result != '\\0'))) {\n          pointer_source = pointer_source + 1;\n          child_target = child_target + 1;\n        }\nLAB_0010995d:\n        if (*pointer_source != 0) goto LAB_00109964;\n        result = *child_target == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_target = (undefined8 *)target[2];\n    ptr_source = (undefined8 *)source[2];\n    result = 0;\n    if ((ptr_source[1] == ptr_target[1]) && (ptr_source[2] == ptr_target[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(param_1,*ptr_source,*ptr_target);\n    }\n    break;\n  case 0x10:\n    ptr_target = (undefined8 *)target[2];\n    ptr_source = (undefined8 *)source[2];\n    result = 0;\n    if (((ptr_source[2] == ptr_target[2]) && (ptr_source[3] == ptr_target[3])) &&\n       (*(char *)(ptr_source + 4) == *(char *)(ptr_target + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_target = (undefined8 *)target[2];\n    ptr_source = (undefined8 *)source[2];\n    result = 0;\n    if (*(char *)(ptr_source + 1) == *(char *)(ptr_target + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    comparison_result = checkEquality_0010922b(param_1,*(undefined8 *)source[2],*(undefined8 *)target[2]);\n    result = 0;\n    if (comparison_result != '\\0') {\n      result = checkEquality_0010922b(param_1,*(undefined8 *)(source[2] + 8),*(undefined8 *)(target[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)source[2] + 3) == *(char *)((undefined8 *)target[2] + 3)) &&\n        (comparison_result = checkEquality_0010922b(param_1,*(undefined8 *)source[2],*(undefined8 *)target[2]),\n        comparison_result != '\\0')) &&\n       (comparison_result = checkEquality_0010922b(param_1,*(undefined8 *)(source[2] + 8),\n                              *(undefined8 *)(target[2] + 8)), comparison_result != '\\0')) {\n      pointer_source = *(long **)(source[2] + 0x10);\n      child_target = *(long **)(target[2] + 0x10);\n      if ((pointer_source == (long *)0x0) == (child_target == (long *)0x0)) {\n        if (pointer_source != (long *)0x0) {\n          while (((*pointer_source != 0 && (*child_target != 0)) &&\n                 (comparison_result = checkEquality_0010922b(param_1), comparison_result != '\\0'))) {\n            pointer_source = pointer_source + 1;\n            child_target = child_target + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    pointer_source = (long *)target[2];\n    child_target = (long *)source[2];\n    comparison = strcmp(*(char **)(*child_target + 8),*(char **)(*pointer_source + 8));\n    result = 0;\n    if (comparison == 0) {\n      result = checkEquality_0010922b(param_1,child_target[1],pointer_source[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_1 + 0x58) = head;\n  return result;\ncode_r0x00109263:\n  source = **(long ***)source[2];\n  pointer_source = source;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "debug_type_samep",
                "strcmp",
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_set_class_id.lto_priv.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "archivePath",
                "cVar1": "formatValid",
                "iVar2": "arch",
                "iVar3": "statResult",
                "ppcVar4": "archPtr",
                "lVar5": "breadResult",
                "uVar6": "translationResult",
                "__format": "errMsgFormat",
                "puVar7": "tempDirPtr",
                "piVar8": "errnoLocationPtr",
                "uVar9": "errMsg",
                "lVar12": "tempDirLen",
                "pcVar10": "currentCharPtr",
                "ppcVar11": "filePtr",
                "lVar15": "bytesRemaining",
                "pcVar16": "subPathPtr",
                "psVar17": "statStructPtr",
                "unaff_R14": "fileCopyPtr",
                "unaff_R15": "archivePtr",
                "bVar18": "preserveDates",
                "unaff_retaddr": "returnAddr",
                "in_stack_00000008": "archiveNamePtr",
                "in_stack_00000010": "tempDirPtr2",
                "in_stack_00000018": "tempDirPath",
                "in_stack_00000020": "filePtr2",
                "in_stack_00000028": "openMode",
                "in_stack_00000030": "formatSpec",
                "in_stack_000000f8": "filePermissions",
                "in_stack_00000110": "archiveFileSize"
            },
            "code": "\nvoid extractAndCopyArchive_001052a2(undefined8 param1,undefined8 param2,char *archivePath)\n\n{\n  char formatValid;\n  int arch;\n  int statResult;\n  char **archPtr;\n  long breadResult;\n  undefined8 translationResult;\n  char *errMsgFormat;\n  undefined8 *tempDirPtr;\n  int *errnoLocationPtr;\n  undefined8 errMsg;\n  long in_RAX;\n  char *currentCharPtr;\n  char **filePtr;\n  long tempDirLen;\n  void *pvVar13;\n  code *pformatValid4;\n  long bytesRemaining;\n  char *subPathPtr;\n  stat *statStructPtr;\n  undefined8 *fileCopyPtr;\n  char **archivePtr;\n  byte preserveDates;\n  undefined8 returnAddr;\n  undefined8 *archiveNamePtr;\n  long *tempDirPtr2;\n  char *tempDirPath;\n  undefined8 *filePtr2;\n  undefined8 openMode;\n  undefined8 formatSpec;\n  uint filePermissions;\n  long archiveFileSize;\n  \n  preserveDates = 0;\n  currentCharPtr = (char *)(in_RAX + 1);\n  do {\n    if (*currentCharPtr == '/') {\n      extractAndCopyArchive_001052a2();\n      return;\n    }\n    while (*currentCharPtr == '\\0') {\n      currentCharPtr = (char *)concat(tempDirPath,&DAT_0011b47d);\n      statResult = stat(currentCharPtr,(stat *)&stack0x00000050);\n      tempDirPtr = fileCopyPtr;\n      if (-1 < statResult) {\n        tempDirLen = make_tempdir(currentCharPtr);\n        free(currentCharPtr);\n        if (tempDirLen == 0) {\n          errnoLocationPtr = __errno_location();\n          currentCharPtr = strerror(*errnoLocationPtr);\n          errMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errMsg,currentCharPtr);\n          goto LAB_00104e93;\n        }\n        tempDirPtr = (undefined8 *)xmalloc(0x18);\n        currentCharPtr = *archivePtr;\n        *tempDirPtr = fileCopyPtr;\n        tempDirPtr[2] = 0;\n        tempDirPtr[1] = tempDirLen;\n        currentCharPtr = (char *)concat(tempDirLen,&DAT_0011b47d,currentCharPtr);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        statStructPtr = (stat *)&stack0x00000050;\n        for (tempDirLen = 0x24; tempDirLen != 0; tempDirLen = tempDirLen + -1) {\n          *(undefined4 *)&statStructPtr->st_dev = 0;\n          statStructPtr = (stat *)((long)statStructPtr + (ulong)preserveDates * -8 + 4);\n        }\n        filePtr = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          filePtr = archivePtr;\n        }\n        statResult = (**(code **)(filePtr[1] + 0x1e8))(archivePtr,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          subPathPtr = *archivePtr;\n          errMsg = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errMsg,subPathPtr);\n        }\n      }\n      fileCopyPtr = (undefined8 *)xmalloc(0x18);\n      fileCopyPtr[1] = currentCharPtr;\n      *fileCopyPtr = tempDirPtr;\n      fileCopyPtr[2] = 0;\n      formatValid = bfd_check_format(archivePtr,1);\n      if (formatValid == '\\0') {\n        errMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archivePtr,0,errMsg);\n        filePtr = (char **)bfd_openw(currentCharPtr,openMode);\n        if (filePtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archPtr = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          archPtr = archivePtr;\n        }\n        arch = (**(code **)(archPtr[1] + 0x1e8))(archivePtr,&stack0x000000e0);\n        tempDirLen = archiveFileSize;\n        if (arch == 0) {\n          if (archiveFileSize < 0) {\n            errMsg = bfd_get_archive_filename(archivePtr);\n            translationResult = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(translationResult,errMsg);\n          }\n          else {\n            arch = bfd_seek(archivePtr,0,0);\n            if (arch == 0) {\n              if (verbose != '\\0') {\n                subPathPtr = *filePtr;\n                errMsg = bfd_get_archive_filename(archivePtr);\n                errMsgFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(errMsgFormat,errMsg,subPathPtr);\n              }\n              pvVar13 = (void *)xmalloc(0x2000);\n              for (; tempDirLen != 0; tempDirLen = tempDirLen - bytesRemaining) {\n                bytesRemaining = 0x2000;\n                if (tempDirLen < 0x2001) {\n                  bytesRemaining = tempDirLen;\n                }\n                breadResult = bfd_bread(pvVar13,bytesRemaining,archivePtr);\n                archPtr = archivePtr;\n                if ((bytesRemaining != breadResult) ||\n                   (breadResult = bfd_bwrite(pvVar13,bytesRemaining,filePtr), archPtr = filePtr, bytesRemaining != breadResult\n                   )) {\n                  bfd_nonfatal_message(0,archPtr,0,0);\n                  free(pvVar13);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*filePtr,filePermissions | 0x100);\n              free(pvVar13);\n              formatValid = bfd_close_all_done(filePtr);\n              if (formatValid == '\\0') {\n                bfd_nonfatal_message(currentCharPtr,0,0,0);\n                status = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errMsg = bfd_get_archive_filename(archivePtr);\n            bfd_nonfatal(errMsg);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archivePtr,0,0);\n        }\nLAB_00104f00:\n        formatValid = bfd_close_all_done(filePtr);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(currentCharPtr,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentCharPtr);\n        status = 1;\n      }\n      else {\n        if (formatSpec._7_1_ == '\\0') {\n          filePtr = (char **)bfd_openw(currentCharPtr,*(undefined8 *)archivePtr[1]);\n        }\n        else {\n          filePtr = (char **)bfd_openw(currentCharPtr,openMode);\n        }\n        if (filePtr == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currentCharPtr,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatValid = copy_object(archivePtr,filePtr,returnAddr);\n        if (formatValid == '\\0') {\n          arch = bfd_get_arch(archivePtr);\n          if (arch == 0) goto LAB_00104d75;\n          formatValid = bfd_close_all_done(filePtr);\n          if (formatValid == '\\0') {\n            bfd_nonfatal_message(currentCharPtr,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatValid = bfd_close(filePtr);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(currentCharPtr,0,0,0);\n          status = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(currentCharPtr,(stat *)&stack0x00000050);\n        }\n        tempDirLen = bfd_openr(currentCharPtr,openMode);\n        fileCopyPtr[2] = tempDirLen;\n        *tempDirPtr2 = tempDirLen;\n        tempDirPtr2 = (long *)(tempDirLen + 0xf0);\n        filePtr = (char **)bfd_openr_next_archived_file(filePtr2,archivePtr);\n        bfd_close(archivePtr);\n        archivePtr = filePtr;\n      }\n      if ((status != 0) || (archivePtr == (char **)0x0)) {\n        *tempDirPtr2 = 0;\n        pvVar13 = (void *)xstrdup(*archiveNamePtr);\n        if (status == 0) {\n          pformatValid4 = bfd_close;\n        }\n        else {\n          pformatValid4 = bfd_close_all_done;\n        }\n        formatValid = (*pformatValid4)(archiveNamePtr);\n        if (formatValid == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(pvVar13,0,0,0);\n        }\n        free(pvVar13);\n        pvVar13 = (void *)xstrdup(*filePtr2);\n        formatValid = bfd_close(filePtr2);\n        if (formatValid == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(pvVar13,0,0,0);\n        }\n        free(pvVar13);\n        goto LAB_00114b4b;\n      }\n      currentCharPtr = *archivePtr;\n      archivePath = currentCharPtr;\n      if (*currentCharPtr == '/') goto LAB_0010527d;\n    }\n    subPathPtr = currentCharPtr;\n    if ((*currentCharPtr == '.') && (subPathPtr = currentCharPtr + 1, currentCharPtr[1] == '.')) {\n      subPathPtr = currentCharPtr + 2;\n      if ((currentCharPtr[2] == '\\0') || (currentCharPtr[2] == '/')) {\nLAB_0010527d:\n        errMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errMsg,archivePath);\nLAB_00104e93:\n        status = 1;\nLAB_00114b4b:\n        while (fileCopyPtr != (undefined8 *)0x0) {\n          if (fileCopyPtr[2] == 0) {\n            rmdir((char *)fileCopyPtr[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)fileCopyPtr[1]);\n          }\n          free((void *)fileCopyPtr[1]);\n          tempDirPtr = (undefined8 *)*fileCopyPtr;\n          free(fileCopyPtr);\n          fileCopyPtr = tempDirPtr;\n        }\n        rmdir(tempDirPath);\n        free(tempDirPath);\n        return;\n      }\n    }\n    for (; (currentCharPtr = subPathPtr, *subPathPtr != '\\0' && (*subPathPtr != '/')); subPathPtr = subPathPtr + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "extract_and_push_symbols_0010e453",
                "param_1": "symbolTable",
                "param_2": "name",
                "param_3": "typeList",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "strLen",
                "__s": "formattedString",
                "uVar4": "isSuccess",
                "lVar5": "count",
                "ppcVar6": "typePtr",
                "lVar7": "offset"
            },
            "code": "\nundefined8 extractAndPushSymbols_0010e453(long symbolTable,char *name,char **typeList)\n\n{\n  long length;\n  char result;\n  size_t strLen;\n  undefined2 *formattedString;\n  undefined8 isSuccess;\n  long count;\n  char **typePtr;\n  long offset;\n  \n  if (typeList == (char **)0x0) {\n    if (name != (char *)0x0) {\n      strLen = strlen(name);\n      formattedString = (undefined2 *)xmalloc(strLen + 10);\n      sprintf((char *)formattedString,\"xe%s:\",name);\nLAB_0010e578:\n      result = stab_push_string(symbolTable,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    isSuccess = 0;\n  }\n  else {\n    count = 10;\n    typePtr = typeList;\n    if (name != (char *)0x0) {\n      strLen = strlen(name);\n      count = strLen + 10;\n    }\n    for (; *typePtr != (char *)0x0; typePtr = typePtr + 1) {\n      strLen = strlen(*typePtr);\n      count = count + 0x14 + strLen;\n    }\n    formattedString = (undefined2 *)xmalloc(count);\n    if (name == (char *)0x0) {\n      *formattedString = 0x65;\n      count = 0;\n    }\n    else {\n      count = *(long *)(symbolTable + 0x68);\n      *(long *)(symbolTable + 0x68) = count + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",name,count);\n    }\n    offset = 0;\n    while( true ) {\n      length = *(long *)((long)typeList + offset);\n      strLen = strlen((char *)formattedString);\n      if (length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + strLen),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + strLen) = 0x3b;\n    if (name == (char *)0x0) goto LAB_0010e578;\n    result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = stab_push_defined_type(symbolTable,count,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    isSuccess = 1;\n  }\n  return isSuccess;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_and_push_symbols_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "inputData",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 inputData)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(inputData,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "param_1": "struct_address",
                "param_2": "new_value",
                "param_3": "additional_data",
                "extraout_RDX": "extra_data",
                "in_R10": "temporary_data",
                "cVar1": "success_flag",
                "iVar2": "counter",
                "uVar3": "updated_value",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] updateMaxValue_0010ed2c(long struct_address,ulong new_value,undefined8 additional_data)\n\n{\n  char success_flag;\n  int counter;\n  undefined8 extra_data;\n  ulong updated_value;\n  undefined8 temporary_data;\n  undefined result [16];\n  \n  if (*(ulong *)(struct_address + 0x1f0) < new_value) {\n    *(ulong *)(struct_address + 0x1f0) = new_value;\n  }\n  if (*(long *)(struct_address + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(struct_address + 0x1f8) != 0) {\n      counter = *(int *)(struct_address + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)additional_data >> 8),1);\n      *(int *)(struct_address + 0x1f8) = counter;\n      if (counter != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (struct_address,0xe0,0,new_value - *(long *)(struct_address + 0x200),0,temporary_data);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    success_flag = stab_write_symbol_lto_priv_0(struct_address,0xc0,0,*(long *)(struct_address + 0x208),0);\n    if (success_flag != '\\0') {\n      *(undefined8 *)(struct_address + 0x208) = 0xffffffffffffffff;\n      additional_data = extra_data;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  result._0_8_ = updated_value & 0xffffffff;\n  result._8_8_ = temporary_data;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_max_value_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "src_memory",
                "param_2": "dst_memory",
                "param_3": "src_length",
                "param_4": "dst_length",
                "uVar1": "src_available",
                "uVar2": "dst_available",
                "iVar3": "comparison_result",
                "extraout_var": "extra_var",
                "uVar4": "final_result",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *src_memory,ulong *dst_memory,undefined8 src_length,undefined8 dst_length)\n\n{\n  ulong src_available;\n  ulong dst_available;\n  int comparison_result;\n  undefined4 extra_var;\n  ulong final_result;\n  undefined result [16];\n  \n  final_result = *src_memory;\n  if (*dst_memory <= *src_memory) {\n    final_result = *dst_memory;\n  }\n  comparison_result = memcmp((void *)(src_memory[3] + 3),(void *)(dst_memory[3] + 3),final_result - 3);\n  final_result = CONCAT44(extra_var,comparison_result);\n  if (comparison_result == 0) {\n    src_available = src_memory[8];\n    if (src_available < dst_memory[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      dst_available = dst_memory[8];\n      if (dst_available < src_memory[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (dst_memory[7] <= src_memory[7]) {\n          if (dst_available < src_available) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (dst_available <= src_available) {\n              if (src_memory[2] == 0x100) {\n                final_result = (ulong)-(uint)(dst_memory[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(dst_memory[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = dst_length;\n  result._0_8_ = final_result;\n  return result;\n}\n\n",
            "called": [
                "compare_gnu_build_notes.cold",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "parse_build_attribute_notes_001163d0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result",
                "uVar2": "var_2",
                "uVar3": "var_3",
                "bVar4": "is_condition_met",
                "puVar5": "ptr_uVar5",
                "iVar6": "var_6",
                "uVar7": "var_7",
                "lVar8": "var_8",
                "__ptr": "ptr",
                "uVar9": "var_9",
                "uVar10": "var_10",
                "uVar11": "var_11",
                "uVar12": "var_12",
                "uVar13": "var_13",
                "__ptr_00": "ptr_00",
                "uVar14": "var_14",
                "uVar15": "var_15",
                "uVar16": "var_16",
                "puVar17": "ptr_uVar17",
                "puVar18": "ptr_uVar18",
                "cVar19": "char_19",
                "puVar20": "ptr_uVar20",
                "iVar21": "var_21",
                "puVar22": "ptr_uVar22",
                "puVar23": "ptr_uVar23",
                "uVar24": "var_24",
                "__nmemb": "nmemb",
                "puVar25": "ptr_uVar25",
                "bVar26": "byte_26",
                "local_88": "local_var_88",
                "uStack_80": "stack_var_80",
                "local_70": "local_var_70",
                "local_68": "local_var_68",
                "local_60": "local_ptr_uVar60"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong parse_build_attribute_notes_001163d0(undefined8 *input_param_1,undefined8 *input_param_2,ulong input_param_3,undefined *input_param_4)\n\n{\n  ulong result;\n  undefined8 var_2;\n  undefined8 var_3;\n  bool is_condition_met;\n  ulong *ptr_uVar5;\n  int var_6;\n  undefined8 var_7;\n  long var_8;\n  void *ptr;\n  ulong var_9;\n  ulong var_10;\n  ulong var_11;\n  ulong var_12;\n  undefined *ptr_00;\n  ulong var_13;\n  ulong var_14;\n  ulong var_15;\n  ulong var_16;\n  ulong *ptr_uVar17;\n  undefined *ptr_uVar18;\n  char char_19;\n  undefined *ptr_uVar20;\n  int var_21;\n  undefined *ptr_uVar22;\n  ulong *ptr_uVar23;\n  ulong var_24;\n  size_t nmemb;\n  ulong *ptr_uVar25;\n  byte byte_26;\n  ulong local_var_88;\n  ulong stack_var_80;\n  ulong local_var_70;\n  ulong local_var_68;\n  ulong *local_ptr_uVar60;\n  \n  byte_26 = 0;\n  var_8 = bfd_get_reloc_upper_bound();\n  local_var_68 = input_param_3;\n  if (0 < var_8) {\n    ptr = (void *)xmalloc(var_8);\n    var_8 = bfd_canonicalize_reloc(input_param_1,input_param_2,ptr,isympp);\n    free(ptr);\n    if (var_8 != 0) {\n      if (is_strip == 0) {\n        var_2 = *input_param_1;\n        var_3 = *input_param_2;\n        var_7 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(var_7,var_2,var_3);\n      }\n      local_ptr_uVar60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_ptr_uVar60 = (ulong *)xcalloc(input_param_3 / 0xc,0x48,input_param_3 % 0xc);\n  local_var_88 = 0;\n  local_var_70 = 0;\n  var_16 = input_param_3;\n  var_15 = 0;\n  ptr_uVar23 = local_ptr_uVar60;\n  var_14 = 0;\n  ptr_uVar22 = input_param_4;\n  while (0xb < var_16) {\n    var_10 = (**(code **)(input_param_1[1] + 0x40))(ptr_uVar22);\n    *ptr_uVar23 = var_10;\n    var_10 = (**(code **)(input_param_1[1] + 0x40))(ptr_uVar22 + 4);\n    ptr_uVar23[1] = var_10;\n    var_11 = (**(code **)(input_param_1[1] + 0x40))(ptr_uVar22 + 8);\n    var_10 = *ptr_uVar23;\n    ptr_uVar23[2] = var_11;\n    var_12 = ptr_uVar23[1];\n    var_13 = var_10 + 3 & 0xfffffffffffffffc;\n    ptr_uVar23[6] = var_13;\n    if (var_12 != (var_12 + 3 & 0xfffffffffffffffc)) {\n      var_8 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var_11 - 0x100) {\n      var_8 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var_13 + var_12 + 0xc;\n    if (var_16 < result) {\n      var_8 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var_10 < 2) {\n      var_8 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr_uVar23[3] = (ulong)(ptr_uVar22 + 0xc);\n    ptr_uVar23[4] = (ulong)(ptr_uVar22 + var_13 + 0xc);\n    var_16 = var_16 + (-0xc - (var_13 + var_12));\n    if (var_10 != 2) {\n      if (ptr_uVar22[0xc] == '$') {\n        if ((ptr_uVar22[0xd] == '\\x01') && (ptr_uVar22[0xe] == '1')) {\n          var_16 = parse_build_attribute_notes_001163d0_00116490();\n          return var_16;\n        }\n      }\n      else if ((((4 < var_10) && (ptr_uVar22[0xc] == 'G')) && (ptr_uVar22[0xd] == 'A')) &&\n              ((ptr_uVar22[0xe] == '$' && (ptr_uVar22[0xf] == '\\x01')))) {\n        if (ptr_uVar22[0x10] == '2') {\n          var_16 = parse_build_attribute_notes_001163d0_00116490();\n          return var_16;\n        }\n        if (ptr_uVar22[0x10] == '3') {\n          var_16 = parse_build_attribute_notes_001163d0_00116490();\n          return var_16;\n        }\n        var_8 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var_9 = var_15;\n    var_24 = var_14;\n    if (var_12 == 0) {\n      if (var_11 == 0x100) {\n        ptr_uVar23[7] = local_var_88;\nLAB_001164af:\n        var_12 = var_14;\n        var_24 = var_14;\n      }\n      else {\n        ptr_uVar23[7] = local_var_70;\nLAB_0011669e:\n        var_9 = var_15;\n        var_12 = var_15;\n      }\n    }\n    else {\n      if (var_12 != 0x10) {\n        if (var_12 < 0x11) {\n          if (var_12 == 4) {\n            var_11 = (**(code **)(input_param_1[1] + 0x40))();\n            var_12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var_12 == 8) {\n            var_16 = FUNC_001086af();\n            return var_16;\n          }\n        }\n        var_8 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var_11 = (**(code **)(input_param_1[1] + 0x28))(ptr_uVar22 + var_13 + 0xc);\n      var_12 = (**(code **)(input_param_1[1] + 0x28))();\n      if (var_12 < var_11) {\n        var_11 = var_12;\n      }\nLAB_00116631:\n      if (ptr_uVar23[2] == 0x100) {\n        if (var_11 == 0) {\n          var_11 = local_var_88;\n        }\n        var_10 = *ptr_uVar23;\n        ptr_uVar23[7] = var_11;\n        var_24 = var_12;\n        local_var_88 = var_11;\n        if (var_12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var_11 == 0) {\n          var_11 = local_var_70;\n        }\n        var_10 = *ptr_uVar23;\n        ptr_uVar23[7] = var_11;\n        var_9 = var_12;\n        local_var_70 = var_11;\n        if (var_12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr_uVar23[8] = var_12;\n    if (*(char *)((ptr_uVar23[3] - 1) + var_10) != '\\0') {\n      var_8 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_uVar23 = ptr_uVar23 + 9;\n    var_15 = var_9;\n    var_14 = var_24;\n    ptr_uVar22 = ptr_uVar22 + result;\n  }\n  if (var_16 == 0) {\n    var_2 = *input_param_1;\n    var_3 = *input_param_2;\n    var_7 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(var_7,var_2,var_3);\n    nmemb = ((long)ptr_uVar23 - (long)local_ptr_uVar60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(local_ptr_uVar60,nmemb,0x48,compare_gnu_build_notes);\n    for (ptr_uVar17 = local_ptr_uVar60; ptr_uVar17 < ptr_uVar23; ptr_uVar17 = ptr_uVar17 + 9) {\n      var_16 = ptr_uVar17[2];\n      if (var_16 != 0) {\n        var_15 = ptr_uVar17[7];\n        var_14 = ptr_uVar17[8];\n        ptr_uVar25 = ptr_uVar17;\n        var_21 = 0;\n        if (var_15 == var_14) {\n          ptr_uVar17[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr_uVar5 = ptr_uVar25;\n              ptr_uVar25 = ptr_uVar5 + -9;\n              if (ptr_uVar25 < local_ptr_uVar60) goto LAB_001167f5;\n              var_10 = ptr_uVar5[-7];\n            } while (var_10 == 0);\n            if ((*ptr_uVar25 != *ptr_uVar17) ||\n               (var_6 = memcmp((void *)ptr_uVar5[-6],(void *)ptr_uVar17[3],*ptr_uVar17), var_6 != 0)) break;\n            var_12 = ptr_uVar5[-2];\n            var_11 = ptr_uVar5[-1];\n            if (var_15 == var_12) {\n              if (var_14 == var_11) {\n                ptr_uVar17[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var_14 <= var_11) {\n                ptr_uVar17[2] = 0;\n                break;\n              }\n              if (var_11 < var_15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var_11) || (var_15 <= (var_11 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_build_notes_00116852;\n              }\nLAB_001167b8:\n              if ((var_16 == 0x101) == (var_10 == 0x101)) {\n                if (var_11 <= var_14) {\n                  var_11 = var_14;\n                }\n                if (var_12 < var_15) {\n                  var_15 = var_12;\n                }\n                ptr_uVar5[-1] = var_11;\n                ptr_uVar5[-2] = var_15;\n                ptr_uVar17[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var_12 <= var_15) goto LAB_001167a6;\n              if (var_11 < var_15) goto LAB_0010852c;\n              if (var_14 < var_15) {\n                if ((0xfffffffffffffff0 < var_14) || (var_12 <= (var_14 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_build_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (var_14 != var_11) goto LAB_001167b8;\n            }\nextract_build_notes_00116852:\n            is_condition_met = var_21 < 0x11;\n            var_21 = var_21 + 1;\n          } while (is_condition_met);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(local_ptr_uVar60,nmemb,0x48,sort_gnu_build_notes);\n    ptr_00 = (undefined *)xmalloc(input_param_3 * 2);\n    stack_var_80 = 0;\n    local_var_70 = 0;\n    ptr_uVar22 = ptr_00;\n    for (ptr_uVar17 = local_ptr_uVar60; ptr_uVar17 < ptr_uVar23; ptr_uVar17 = ptr_uVar17 + 9) {\n      if (ptr_uVar17[2] != 0) {\n        ptr_uVar18 = ptr_uVar22 + 0xc;\n        if ((ptr_uVar17[7] == local_var_70) && (ptr_uVar17[8] == stack_var_80)) {\n          (**(code **)(input_param_1[1] + 0x50))(*ptr_uVar17,ptr_uVar22);\n          (**(code **)(input_param_1[1] + 0x50))(0,ptr_uVar22 + 4);\n          (**(code **)(input_param_1[1] + 0x50))(ptr_uVar17[2],ptr_uVar22 + 8);\n          var_15 = ptr_uVar17[6];\n          var_16 = *ptr_uVar17;\n          ptr_uVar22 = (undefined *)ptr_uVar17[3];\n          ptr_uVar20 = ptr_uVar18;\n          for (var_14 = var_16; var_14 != 0; var_14 = var_14 - 1) {\n            *ptr_uVar20 = *ptr_uVar22;\n            ptr_uVar22 = ptr_uVar22 + (ulong)byte_26 * -2 + 1;\n            ptr_uVar20 = ptr_uVar20 + (ulong)byte_26 * -2 + 1;\n          }\n          if (var_16 < var_15) {\n            for (var_8 = var_15 - var_16; var_8 != 0; var_8 = var_8 + -1) {\n              *ptr_uVar20 = 0;\n              ptr_uVar20 = ptr_uVar20 + (ulong)byte_26 * -2 + 1;\n            }\n          }\n          ptr_uVar22 = ptr_uVar18 + var_15;\n        }\n        else {\n          (**(code **)(input_param_1[1] + 0x50))();\n          if (*(int *)(input_param_1[1] + 8) == 5) {\n            char_19 = (*(char *)(input_param_1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_19 = '\\b';\n          }\n          (**(code **)(input_param_1[1] + 0x50))(char_19,ptr_uVar22 + 4);\n          (**(code **)(input_param_1[1] + 0x50))(ptr_uVar17[2],ptr_uVar22 + 8);\n          var_16 = *ptr_uVar17;\n          ptr_uVar22 = (undefined *)ptr_uVar17[3];\n          ptr_uVar20 = ptr_uVar18;\n          for (var_15 = var_16; var_15 != 0; var_15 = var_15 - 1) {\n            *ptr_uVar20 = *ptr_uVar22;\n            ptr_uVar22 = ptr_uVar22 + (ulong)byte_26 * -2 + 1;\n            ptr_uVar20 = ptr_uVar20 + (ulong)byte_26 * -2 + 1;\n          }\n          var_15 = ptr_uVar17[6];\n          if (var_16 < var_15) {\n            for (var_8 = var_15 - var_16; var_8 != 0; var_8 = var_8 + -1) {\n              *ptr_uVar20 = 0;\n              ptr_uVar20 = ptr_uVar20 + (ulong)byte_26 * -2 + 1;\n            }\n          }\n          var_8 = input_param_1[1];\n          ptr_uVar18 = ptr_uVar18 + var_15;\n          ptr_uVar22 = ptr_uVar18 + 8;\n          if ((*(int *)(var_8 + 8) == 5) && (*(char *)(input_param_1[0x22] + 4) == '\\x02')) {\n            (**(code **)(var_8 + 0x38))(ptr_uVar17[7],ptr_uVar18);\n            (**(code **)(input_param_1[1] + 0x38))(ptr_uVar17[8],ptr_uVar22);\n            ptr_uVar22 = ptr_uVar18 + 0x10;\n          }\n          else {\n            (**(code **)(var_8 + 0x50))(ptr_uVar17[7],ptr_uVar18);\n            (**(code **)(input_param_1[1] + 0x50))(ptr_uVar17[8],ptr_uVar18 + 4);\n          }\n          local_var_70 = ptr_uVar17[7];\n          stack_var_80 = ptr_uVar17[8];\n        }\n      }\n    }\n    var_15 = (long)ptr_uVar22 - (long)ptr_00;\n    var_16 = var_15;\n    ptr_uVar22 = ptr_00;\n    local_var_68 = input_param_3;\n    if (var_15 < input_param_3) {\n      for (; local_var_68 = var_15, var_16 != 0; var_16 = var_16 - 1) {\n        *input_param_4 = *ptr_uVar22;\n        ptr_uVar22 = ptr_uVar22 + (ulong)byte_26 * -2 + 1;\n        input_param_4 = input_param_4 + (ulong)byte_26 * -2 + 1;\n      }\n    }\n    free(ptr_00);\n  }\n  else {\n    var_8 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (var_8 != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,input_param_1,input_param_2,var_8);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_ptr_uVar60);\n  return local_var_68;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "file",
                "param_2": "errorCode",
                "uVar1": "programName",
                "pcVar2": "text"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *file,int errorCode)\n\n{\n  undefined8 programName;\n  char *text;\n  \n  programName = program_name;\n  text = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(file,text,programName);\n  text = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(file,text);\n  list_supported_targets(program_name,file);\n  if (errorCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_driver_name_00108c86",
                "param_1": "driver_data",
                "cVar1": "startsWithLTO",
                "iVar2": "comparison_result",
                "sVar3": "name_length",
                "puVar4": "driver_name",
                "lVar5": "address_offset",
                "__s": "name_ptr",
                "__s1": "arch",
                "puVar6": "new_driver_name_ptr",
                "uVar7": "result",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_driver_name_00108c86(long *driver_data)\n\n{\n  char startsWithLTO;\n  int comparison_result;\n  size_t name_length;\n  undefined2 *driver_name;\n  long address_offset;\n  char *name_ptr;\n  char *arch;\n  undefined2 *new_driver_name_ptr;\n  undefined8 result;\n  byte flag;\n  \n  flag = 0;\n  address_offset = *driver_data;\n  name_ptr = (char *)(address_offset + 4);\n  startsWithLTO = startswith_lto_priv_0_lto_priv_0(name_ptr,&DAT_0011b73b);\n  if (startsWithLTO == '\\0') {\n    startsWithLTO = startswith_lto_priv_0_lto_priv_0(name_ptr,\"bsdrv-\");\n    if (startsWithLTO == '\\0') {\n      startsWithLTO = startswith_lto_priv_0_lto_priv_0(name_ptr,\"rtdrv-\");\n      if (startsWithLTO == '\\0') {\n        return 0xffffffff;\n      }\n      name_ptr = (char *)(address_offset + 6);\n      result = 0xc;\n    }\n    else {\n      name_ptr = (char *)(address_offset + 6);\n      result = 0xb;\n    }\n  }\n  else {\n    result = 10;\n  }\n  name_length = strlen(name_ptr);\n  driver_name = (undefined2 *)xmalloc(name_length + 8);\n  arch = name_ptr + 4;\n  new_driver_name_ptr = driver_name;\n  for (address_offset = name_length + 1; address_offset != 0; address_offset = address_offset + -1) {\n    *(char *)new_driver_name_ptr = *name_ptr;\n    name_ptr = name_ptr + (ulong)flag * -2 + 1;\n    new_driver_name_ptr = (undefined2 *)((long)new_driver_name_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(driver_name + 1) = 0x69;\n  *driver_name = 0x6570;\n  comparison_result = strcmp(arch,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)driver_name + 7) = 0x36;\n    *(undefined2 *)((long)driver_name + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(arch,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)driver_name + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(arch,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)driver_name + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_data = (long)driver_name;\n  return result;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_file_and_return_status_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "bfdPointer"
            },
            "code": "\nundefined4 closeFileAndReturnStatus_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *bfdPointer;\n  \n  bfd_nonfatal(*bfdPointer);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_file_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_data_permissions_00104bba",
                "in_EAX": "eaxValue",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value",
                "uVar1": "errorString"
            },
            "code": "\nvoid checkAndSetDataPermissions_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorString;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorString = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorString);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorString = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorString);\n  }\n  errorString = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorString);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "check_and_set_data_permissions_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "stab_class_baseclass.lto_priv.0",
                "display_info.isra.0",
                "stab_class_static_member.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_template",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "src",
                "param_2": "length",
                "puVar1": "dest",
                "lVar2": "i",
                "puVar3": "destPtr",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *src,int length)\n\n{\n  undefined *dest;\n  long i;\n  undefined *destPtr;\n  byte increment;\n  \n  increment = 0;\n  dest = (undefined *)xmalloc((long)(length + 1));\n  destPtr = dest;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *destPtr = *src;\n    src = src + (ulong)increment * -2 + 1;\n    destPtr = destPtr + (ulong)increment * -2 + 1;\n  }\n  dest[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_memory_0010da0b",
                "param_1": "memory",
                "param_2": "slotIndex",
                "param_3": "param3",
                "param_4": "param4",
                "plVar2": "allocatedMemory",
                "lVar3": "offset",
                "lVar4": "loopCounter",
                "uVar1": "errorMessage",
                "uVar5": "tempSlotIndex",
                "bVar6": "tempByte",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocateAndInitializeMemory_0010da0b(long **memory,ulong slotIndex,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 errorMessage;\n  long *allocatedMemory;\n  long offset;\n  long loopCounter;\n  ulong tempSlotIndex;\n  byte tempByte;\n  undefined result [16];\n  \n  tempByte = 0;\n  tempSlotIndex = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)tempSlotIndex; tempSlotIndex = tempSlotIndex - 0x10) {\n      if (*memory == (long *)0x0) {\n        allocatedMemory = (long *)xmalloc(0x88);\n        *memory = allocatedMemory;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)allocatedMemory = 0;\n          allocatedMemory = (long *)((long)allocatedMemory + (ulong)tempByte * -8 + 4);\n        }\n      }\n      memory = (long **)*memory;\n    }\n    offset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      offset = 0;\n    }\n    if (*memory == (long *)0x0) {\n      allocatedMemory = (long *)xmalloc(0x88);\n      *memory = allocatedMemory;\n      for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *(undefined4 *)allocatedMemory = 0;\n        allocatedMemory = (long *)((long)allocatedMemory + (ulong)tempByte * -8 + 4);\n      }\n    }\n    result._8_8_ = param4;\n    result._0_8_ = *memory + slotIndex + offset + 1;\n    return result;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "puVar1": "memoryBlock",
                "puVar2": "currentPtr",
                "lVar3": "loopCounter",
                "bVar4": "byteVar"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 data1,undefined data2,undefined8 data3,undefined8 data4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *currentPtr;\n  long loopCounter;\n  byte byteVar;\n  \n  byteVar = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  currentPtr = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)currentPtr = 0;\n    currentPtr = (undefined8 *)((long)currentPtr + (ulong)byteVar * -8 + 4);\n  }\n  *memoryBlock = data1;\n  *(undefined *)(memoryBlock + 1) = data2;\n  memoryBlock[2] = data3;\n  memoryBlock[3] = data4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  currentPtr = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = currentPtr;\n  *currentPtr = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "remove_first_element_and_return_second_00109b2f",
                "param_1": "array",
                "__ptr": "firstElement",
                "puVar1": "secondElement"
            },
            "code": "\nundefined8 * removeFirstElementAndReturnSecond_00109b2f(long array)\n\n{\n  undefined8 *firstElement;\n  undefined8 *secondElement;\n  \n  firstElement = *(undefined8 **)(array + 0x60);\n  if (firstElement != (undefined8 *)0x0) {\n    secondElement = (undefined8 *)firstElement[1];\n    *(undefined8 *)(array + 0x60) = *firstElement;\n    free(firstElement);\n    return secondElement;\n  }\n  return firstElement;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_modify_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "remove_first_element_and_return_second_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_for_redefinitions_00108d9a",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "return_value",
                "ppcVar1": "symbol_pair",
                "pcVar2": "symbol_name_copy",
                "lVar3": "symbol_result",
                "uVar4": "translation_result",
                "plVar5": "symbol_slot",
                "redefine_specific_htab": "symbol_definition_htab",
                "redefine_specific_reverse_htab": "reverse_symbol_definition_htab"
            },
            "code": "\nundefined8 check_for_redefinitions_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 return_value)\n\n{\n  char **symbol_pair;\n  char *symbol_name_copy;\n  long symbol_result;\n  undefined8 translation_result;\n  long *symbol_slot;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_pair = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  translation_result = symbol_definition_htab;\n  symbol_pair[1] = symbol_name_copy;\n  symbol_result = htab_find(translation_result,symbol_pair);\n  if (symbol_result != 0) {\n    translation_result = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(translation_result,error_message,symbol_name);\n  }\n  symbol_result = htab_find(reverse_symbol_definition_htab,target_symbol);\n  if (symbol_result != 0) {\n    translation_result = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(translation_result,error_message,target_symbol);\n  }\n  symbol_slot = (long *)htab_find_slot(symbol_definition_htab,symbol_pair,1);\n  translation_result = reverse_symbol_definition_htab;\n  *symbol_slot = (long)symbol_pair;\n  symbol_name_copy = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(translation_result,symbol_name_copy,1);\n  *symbol_pair = symbol_name_copy;\n  return return_value;\n}\n\n",
            "called": [
                "htab_find",
                "strdup",
                "htab_find_slot",
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_for_redefinitions_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_with_prefix_0010e9a0",
                "param_1": "symbolTable",
                "param_2": "prefix",
                "param_3": "type",
                "__s": "symbol",
                "__s_00": "newSymbol",
                "lVar1": "symbolCount",
                "pcVar5": "symbolType",
                "uVar6": "prefixCode",
                "sVar3": "prefixLength",
                "sVar4": "symbolLength",
                "__s_01": "symbolWithPrefix",
                "stab_pop_type": "popType",
                "_sch_istable": "characterTable",
                "xmalloc": "allocateMemory",
                "sprintf": "formatString",
                "free": "deallocateMemory",
                "stab_write_symbol_lto_priv_0": "writeSymbolToPrivateTable"
            },
            "code": "\nundefined4 writeSymbolWithPrefix_0010e9a0(long symbolTable,char *prefix,undefined4 type,undefined8 param_4)\n\n{\n  long symbolCount;\n  undefined4 uVar2;\n  byte *symbol;\n  byte *newSymbol;\n  size_t prefixLength;\n  size_t symbolLength;\n  char *symbolWithPrefix;\n  char *symbolType;\n  undefined8 prefixCode;\n  \n  symbol = (byte *)popType();\n  switch(type) {\n  case 1:\n    symbolType = \"G\";\n    prefixCode = 0x20;\n    break;\n  case 2:\n    symbolType = \"S\";\n    prefixCode = 0x26;\n    break;\n  case 3:\n    symbolType = \"V\";\n    prefixCode = 0x26;\n    break;\n  case 4:\n    symbolType = \"\";\n    prefixCode = 0x80;\n    if (((&characterTable)[(ulong)*symbol * 2] & 4) == 0) {\n      symbolCount = *(long *)(symbolTable + 0x68);\n      *(long *)(symbolTable + 0x68) = symbolCount + 1;\n      prefixLength = strlen((char *)symbol);\n      newSymbol = (byte *)allocateMemory(prefixLength + 0x14);\n      formatString((char *)newSymbol,\"%ld=%s\",symbolCount,symbol);\n      deallocateMemory(symbol);\n      symbol = newSymbol;\n    }\n    break;\n  case 5:\n    symbolType = \"r\";\n    prefixCode = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  prefixLength = strlen(prefix);\n  symbolLength = strlen((char *)symbol);\n  symbolWithPrefix = (char *)allocateMemory(prefixLength + 3 + symbolLength);\n  formatString(symbolWithPrefix,\"%s:%s%s\",prefix,symbolType,symbol);\n  deallocateMemory(symbol);\n  uVar2 = writeSymbolToPrivateTable(symbolTable,prefixCode,0,param_4,symbolWithPrefix);\n  if ((char)uVar2 != '\\0') {\n    deallocateMemory(symbolWithPrefix);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_prefix_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_matching_error_0010827b",
                "uVar1": "section",
                "uVar2": "errorMessage",
                "unaff_RBX": "sectionPtr"
            },
            "code": "\nvoid handleSectionMatchingError_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  section = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,section);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_section_matching_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "bfd_nonfatal_message",
                "FUN_00107880",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hashtable_00113f20",
                "htab_create_alloc": "createHashtableWithAlloc",
                "htab_hash_string": "hashString",
                "htab_eq_string": "areStringsEqual",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashtable_00113f20(void)\n\n{\n  createHashtableWithAlloc(0x10,hashString,areStringsEqual,0,allocateMemory,releaseMemory);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc",
                "free",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hashtable_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "get_file_size.cold",
                "smart_rename.cold",
                "main",
                "simple_copy.cold",
                "simple_copy",
                "set_times.cold",
                "FUN_00104ea2",
                "FUN_00107880",
                "section_add_load_file.cold",
                "add_specific_symbols",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_main_loop_00116aa0",
                "param_1": "entryPoint",
                "param_2": "commandLineArguments",
                "auStack_8": "stackFrame"
            },
            "code": "\nvoid processEntry startMainLoop_00116aa0(undefined8 entryPoint,undefined8 commandLineArguments)\n\n{\n  undefined stackFrame [8];\n  \n  __libc_start_main(main,commandLineArguments,&stack0x00000008,0,0,entryPoint,stackFrame);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "rbxValue",
                "unaff_RBP": "rbpValue",
                "unaff_R12": "r12Value",
                "unaff_R14B": "r14bValue",
                "unaff_R15": "r15Value",
                "lVar1": "loadVar1",
                "lVar2": "loadVar2",
                "cVar3": "charValue",
                "lVar4": "loadVar4",
                "lVar5": "loadVar5"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long loadVar1;\n  long loadVar2;\n  char charValue;\n  long loadVar4;\n  long loadVar5;\n  long rbxValue;\n  long rbpValue;\n  long r12Value;\n  char r14bValue;\n  long r15Value;\n  \n  loadVar4 = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15Value + 0xb4) = *(undefined4 *)(rbxValue + 0xb4);\n  *(byte *)(r15Value + 0x28) =\n       *(byte *)(r15Value + 0x28) & 0xcf | *(byte *)(rbxValue + 0x28) & 0x30;\n  *(long *)(rbxValue + 0x60) = r15Value;\n  *(undefined8 *)(rbxValue + 0x58) = 0;\n  if ((*(byte *)(rbxValue + 0x27) & 2) != 0) {\n    loadVar1 = *(long *)(rbxValue + 0xd0);\n    loadVar5 = group_signature_isra_0(loadVar1,*(undefined8 *)(rbxValue + 0xe0));\n    if ((loadVar5 != 0) &&\n       (loadVar2 = *(long *)(r12Value + 8), *(uint *)(loadVar5 + 0x18) = *(uint *)(loadVar5 + 0x18) | 0x20,\n       *(int *)(loadVar2 + 8) == 5)) {\n      *(long *)(loadVar1 + 0xb0) = loadVar5;\n      charValue = (**(code **)(*(long *)(rbpValue + 8) + 0x158))();\n      if (charValue == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charValue = (**(code **)(*(long *)(rbpValue + 8) + 0x158))();\n  if (charValue == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (r14bValue != '\\0') {\n    *(undefined4 *)(*(long *)(r15Value + 0xd0) + 4) = 8;\n  }\n  if (loadVar4 != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "group_signature.isra.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "reallocate_memory_and_assign_value_00109022",
                "param_1": "fileNumber",
                "param_2": "typeIndex",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "typeIndexValue",
                "pcVar2": "errorString",
                "plVar3": "allocatedMemory",
                "lVar4": "loopCounter",
                "uVar5": "startIndex",
                "pplVar6": "pointerArray",
                "bVar7": "byteValue",
                "auVar8": "returnObject"
            },
            "code": "\n\n\nundefined  [16] reallocateMemoryAndAssignValue_00109022(long fileNumber,uint *typeIndex,undefined8 arg1,undefined8 arg2)\n\n{\n  uint typeIndexValue;\n  char *errorString;\n  long *allocatedMemory;\n  long loopCounter;\n  uint startIndex;\n  long **pointerArray;\n  byte byteValue;\n  undefined returnObject [16];\n  \n  byteValue = 0;\n  startIndex = *typeIndex;\n  typeIndexValue = typeIndex[1];\n  if (((int)startIndex < 0) || (*(uint *)(fileNumber + 0x80) <= startIndex)) {\n    errorString = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)startIndex);\n  }\n  else {\n    if (-1 < (int)typeIndexValue) {\n      pointerArray = (long **)(*(long *)(fileNumber + 0x88) + (long)(int)startIndex * 8);\n      for (startIndex = typeIndexValue; 0xf < (int)startIndex; startIndex = startIndex - 0x10) {\n        if (*pointerArray == (long *)0x0) {\n          allocatedMemory = (long *)xmalloc(0x88);\n          *pointerArray = allocatedMemory;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)allocatedMemory = 0;\n            allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteValue * -8 + 4);\n          }\n        }\n        pointerArray = (long **)*pointerArray;\n      }\n      if (*pointerArray == (long *)0x0) {\n        allocatedMemory = (long *)xmalloc(0x88);\n        *pointerArray = allocatedMemory;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)allocatedMemory = 0;\n          allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteValue * -8 + 4);\n        }\n      }\n      allocatedMemory = *pointerArray + (long)(int)((typeIndexValue >> 4) * -0x10 + typeIndexValue) + 1;\n      goto LAB_00109117;\n    }\n    errorString = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)typeIndexValue);\n  }\n  allocatedMemory = (long *)0x0;\nLAB_00109117:\n  returnObject._8_8_ = arg2;\n  returnObject._0_8_ = allocatedMemory;\n  return returnObject;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "reallocate_memory_and_assign_value_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "recordPtr",
                "param_2": "variableId",
                "param_3": "namespaceId",
                "param_4": "fileType",
                "param_5": "unknownValue",
                "param_6": "returnValue",
                "auVar1": "tempVar1",
                "auVar9": "tempVar2",
                "uVar2": "result",
                "piVar3": "tempPtr1",
                "cVar4": "flag",
                "lVar5": "loopCounter",
                "lVar6": "currentFilePtr",
                "piVar7": "tempPtr2",
                "bVar8": "byteValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariable_0010c05d(long recordPtr,long variableId,ulong namespaceId,int fileType,undefined8 unknownValue,\n            undefined8 returnValue)\n\n{\n  undefined tempVar1 [16];\n  undefined8 result;\n  int *tempPtr1;\n  char flag;\n  long loopCounter;\n  long currentFilePtr;\n  int *tempPtr2;\n  byte byteValue;\n  undefined tempVar2 [16];\n  \n  byteValue = 0;\n  if (variableId == 0) {\n    tempVar1._8_8_ = 0;\n    tempVar1._0_8_ = namespaceId;\n    return tempVar1 << 0x40;\n  }\n  if (namespaceId != 0) {\n    if ((*(long *)(recordPtr + 8) == 0) || (currentFilePtr = *(long *)(recordPtr + 0x10), currentFilePtr == 0)) {\n      result = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      if (fileType - 1U < 2) {\n        currentFilePtr = currentFilePtr + 0x10;\n        flag = (fileType == 1) + '\\x01';\n      }\n      else if (*(long *)(recordPtr + 0x20) == 0) {\n        currentFilePtr = currentFilePtr + 0x10;\n        flag = '\\0';\n      }\n      else {\n        currentFilePtr = *(long *)(recordPtr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      currentFilePtr = debug_add_to_namespace_constprop_0(currentFilePtr,variableId,2,flag);\n      if (currentFilePtr != 0) {\n        tempPtr1 = (int *)xmalloc(0x18);\n        tempPtr2 = tempPtr1 + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *tempPtr2 = 0;\n          tempPtr2 = tempPtr2 + (ulong)byteValue * -2 + 1;\n        }\n        *tempPtr1 = fileType;\n        result = 1;\n        *(ulong *)(tempPtr1 + 2) = namespaceId;\n        *(undefined8 *)(tempPtr1 + 4) = unknownValue;\n        *(int **)(currentFilePtr + 0x20) = tempPtr1;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  result = 0;\nLAB_0010c12e:\n  tempVar2._8_8_ = returnValue;\n  tempVar2._0_8_ = result;\n  return tempVar2;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_emit_pending_vars",
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "push_type_or_string_00109d97",
                "param_1": "functionData",
                "local_40": "outputString",
                "lVar1": "counter"
            },
            "code": "\nvoid pushTypeOrString_00109d97(long functionData)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(functionData + 0x70) != 0) {\n    stab_push_defined_type(functionData,*(long *)(functionData + 0x70),0);\n    return;\n  }\n  counter = *(long *)(functionData + 0x68);\n  *(long *)(functionData + 0x68) = counter + 1;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  stab_push_string(functionData,outputString,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_type_or_string_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "create_symbol_htab",
                "main",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = parse_build_attribute_notes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = parse_build_attribute_notes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = parse_build_attribute_notes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto extract_build_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto extract_build_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nextract_build_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "FUN_00116490",
                "dcgettext",
                "qsort",
                "merge_gnu_build_notes.cold",
                "bfd_set_error",
                "compare_gnu_build_notes"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_class_method_variable_0010add5",
                "stab_class_method_var": "executeStabClassMethodVar"
            },
            "code": "\nvoid initializeClassMethodVariable_0010add5(void)\n\n{\n  executeStabClassMethodVar();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_variable_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_debug_type_00113e17",
                "debug_make_type_constprop_0": "debugDeclareConstProp"
            },
            "code": "\nvoid initializeDebugType_00113e17(void)\n\n{\n  debugDeclareConstProp(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_00109b52",
                "param_1": "dataStructure",
                "param_2": "sourceString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "previousData",
                "puVar2": "allocatedMemory",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeData_00109b52(long dataStructure,undefined8 sourceString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 previousData;\n  undefined8 *allocatedMemory;\n  undefined8 duplicatedString;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  allocatedMemory[2] = param3;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  previousData = *(undefined8 *)(dataStructure + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = param4;\n  *(undefined4 *)(allocatedMemory + 3) = param5;\n  *(undefined8 **)(dataStructure + 0x60) = allocatedMemory;\n  *allocatedMemory = previousData;\n  allocatedMemory[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_modify_type",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_number_00109a32",
                "param_1": "string_pointer",
                "param_2": "error_code",
                "param_3": "end_of_string",
                "param_4": "unused_param",
                "param_5": "result_ptr",
                "__nptr": "number_string",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_number",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_unsigned_number_00109a32(char **string_pointer,undefined *error_code,char *end_of_string,undefined8 unused_param,undefined8 result_ptr)\n\n{\n  char *number_string;\n  int *errno_ptr;\n  ulong parsed_number;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (error_code != (undefined *)0x0) {\n    *error_code = 0;\n  }\n  number_string = *string_pointer;\n  if ((number_string < end_of_string) && (*number_string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_number = strtoul(number_string,string_pointer,0);\n    if ((parsed_number != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_code == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(number_string,error_message);\n    }\n    else {\n      *error_code = 1;\n    }\n  }\n  parsed_number = 0;\nLAB_00109aa9:\n  result._8_8_ = result_ptr;\n  result._0_8_ = parsed_number;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "warn_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_unsigned_number_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "find_matching_type_and_add_to_namespace_0010c6be",
                "param_1": "fileAddress",
                "param_2": "tagName",
                "param_3": "tagPointer",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "piVar3": "newTagPointer",
                "pauVar4": "newPointerArray",
                "lVar5": "tempAddress",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * findMatchingTypeAndAddToNamespace_0010c6be(long fileAddress,char *tagName,int *tagPointer)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  int *newTagPointer;\n  undefined (*newPointerArray) [16];\n  long tempAddress;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagPointer != (int *)0x0)) {\n    if (*(long *)(fileAddress + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagPointer != 0x17) {\n        newTagPointer = (int *)debug_make_type_constprop_0(0x17,0);\n        if (newTagPointer == (int *)0x0) {\n          return (int *)0x0;\n        }\n        newPointerArray = (undefined (*) [16])xmalloc(0x10);\n        tempAddress = *(long *)(fileAddress + 0x10);\n        *newPointerArray = ZEXT816(0);\n        *(int **)(*newPointerArray + 8) = tagPointer;\n        *(undefined (**) [16])(newTagPointer + 4) = newPointerArray;\n        tempAddress = debug_add_to_namespace_constprop_0(tempAddress + 0x10,tagName,1,3);\n        if (tempAddress == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(tempAddress + 0x20) = newTagPointer;\n        *(long *)*newPointerArray = tempAddress;\n        return newTagPointer;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagPointer + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagPointer;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "finish_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "find_matching_type_and_add_to_namespace_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "hasError",
                "__ptr": "result",
                "__format": "errorMessage",
                "lVar1": "demangledValue",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "newCount",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * demangleV3Arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *hasError)\n\n{\n  void *result;\n  char *errorMessage;\n  long demangledValue;\n  ulong count;\n  ulong capacity;\n  uint newCount;\n  char buffer [9];\n  \n  capacity = 10;\n  count = 0;\n  result = (void *)xmalloc(0x50);\n  *hasError = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      errorMessage = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,errorMessage);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangledValue = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,buffer);\n    if (demangledValue == 0) {\n      if (buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *hasError = 1;\n    }\n    else {\n      newCount = (int)count + 1;\n      if ((uint)capacity <= newCount) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + count * 8) = demangledValue;\n      count = (ulong)newCount;\n    }\n  }\n  *(undefined8 *)((long)result + count * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "stab_demangle_v3_arg",
                "xmalloc",
                "free",
                "xrealloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "decode_and_copy_section_0011a2e0",
                "param_1": "source_buffer",
                "param_2": "target_binary",
                "uVar1": "section_size",
                "uVar2": "section_name",
                "lVar3": "decoded_section",
                "lVar4": "section"
            },
            "code": "\nlong decode_and_copy_section_0011a2e0(long source_buffer,long target_binary)\n\n{\n  undefined8 section_size;\n  undefined8 section_name;\n  long decoded_section;\n  long section;\n  \n  decoded_section = (**(code **)(*(long *)(target_binary + 8) + 0x208))(target_binary);\n  section = *(long *)(source_buffer + 0x20);\n  *(undefined8 *)(decoded_section + 8) = *(undefined8 *)(source_buffer + 8);\n  *(undefined8 *)(decoded_section + 0x10) = *(undefined8 *)(source_buffer + 0x10);\n  *(undefined4 *)(decoded_section + 0x18) = *(undefined4 *)(source_buffer + 0x18);\n  if (section == 0) {\n    section = 0x128598;\n  }\n  else {\n    section = bfd_get_section_by_name(target_binary);\n    if (section == 0) {\n      section_size = *(undefined8 *)(source_buffer + 0x20);\n      section_name = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(section_name,section_size);\n    }\n  }\n  *(long *)(decoded_section + 0x20) = section;\n  return decoded_section;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decode_and_copy_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_symbol_with_lto_0010e8a9",
                "param_1": "symbol",
                "param_2": "privData",
                "param_3": "inputString",
                "__s": "formattedString",
                "uVar1": "result",
                "sVar2": "inputStringLength"
            },
            "code": "\nundefined4 writeSymbolWithLTO_0010e8a9(undefined8 symbol,undefined8 privData,char *inputString)\n\n{\n  undefined4 result;\n  size_t inputStringLength;\n  char *formattedString;\n  \n  inputStringLength = strlen(inputString);\n  formattedString = (char *)xmalloc(inputStringLength + 0x14);\n  sprintf(formattedString,\"%s:c=f%g\",symbol,inputString);\n  result = stab_write_symbol_lto_priv_0(privData,0x80,0,0,formattedString);\n  if ((char)result != '\\0') {\n    free(formattedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_lto_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "section_flag_parser_00104ad6",
                "unaff_RBP": "substring",
                "__s": "inputString",
                "sVar4": "inputLength",
                "iVar5": "substringLength",
                "unaff_R14D": "flagValue",
                "unaff_R15": "comparisonString",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress",
                "iVar1": "comparisonResult",
                "pcVar3": "delimiter"
            },
            "code": "\nundefined  [16] sectionFlagParser_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *delimiter;\n  char *substring;\n  char *inputString;\n  size_t inputLength;\n  int substringLength;\n  uint flagValue;\n  char *comparisonString;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    flagValue = flagValue | 0x2000;\n    inputString = substring;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (inputString == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = flagValue;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              delimiter = strchr(inputString,0x2c);\n              if (delimiter == (char *)0x0) {\n                inputLength = strlen(inputString);\n                substringLength = (int)inputLength;\n                substring = (char *)0x0;\n              }\n              else {\n                substring = delimiter + 1;\n                substringLength = (int)delimiter - (int)inputString;\n              }\n              inputLength = (size_t)substringLength;\n              comparisonResult = strncasecmp(comparisonString,inputString,inputLength);\n              if (comparisonResult != 0) break;\n              flagValue = flagValue | 1;\n              inputString = substring;\n            }\n            comparisonResult = strncasecmp(\"load\",inputString,inputLength);\n            if (comparisonResult != 0) break;\n            flagValue = flagValue | 2;\n            inputString = substring;\n          }\n          comparisonResult = strncasecmp(\"noload\",inputString,inputLength);\n          if (comparisonResult != 0) break;\n          flagValue = flagValue | 0x200;\n          inputString = substring;\n        }\n        comparisonResult = strncasecmp(\"readonly\",inputString,inputLength);\n        if (comparisonResult != 0) break;\n        flagValue = flagValue | 8;\n        inputString = substring;\n      }\n      comparisonResult = strncasecmp(\"debug\",inputString,inputLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",inputString,inputLength);\n      if (comparisonResult == 0) {\n        flagValue = flagValue | 0x10;\n        inputString = substring;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",inputString,inputLength);\n        if (comparisonResult == 0) {\n          flagValue = flagValue | 0x20;\n          inputString = substring;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",inputString,inputLength);\n          if (comparisonResult == 0) {\n            flagValue = flagValue | 0x40;\n            inputString = substring;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",inputString,inputLength);\n            if (comparisonResult == 0) {\n              flagValue = flagValue | 0x8000;\n              inputString = substring;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",inputString,inputLength);\n              if (comparisonResult == 0) {\n                flagValue = flagValue | 0x8000000;\n                inputString = substring;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",inputString,inputLength);\n                if (comparisonResult == 0) {\n                  flagValue = flagValue | 0x100;\n                  inputString = substring;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",inputString,inputLength);\n                  if (comparisonResult == 0) {\n                    flagValue = flagValue | 0x800000;\n                    inputString = substring;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",inputString,inputLength);\n                    if (comparisonResult != 0) {\n                      delimiter = (char *)xmalloc((long)(substringLength + 1));\n                      strncpy(delimiter,inputString,inputLength);\n                      delimiter[inputLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(uVar2,delimiter);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(uVar2,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    flagValue = flagValue | 0x1000000;\n                    inputString = substring;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "strchr",
                "non_fatal",
                "strlen",
                "dcgettext",
                "parse_flags.cold",
                "fatal",
                "strncpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "section_flag_parser_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_value_001087da",
                "in_RAX": "value",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkValue_001087da(void)\n\n{\n  long value;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = value == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_value_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "cu_start",
                "param_2": "type_name",
                "param_3": "data_start",
                "param_4": "data_end",
                "lVar1": "cu_end",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_entry",
                "lVar5": "header_entry",
                "puVar6": "entry",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long cu_start,char *type_name,undefined8 data_start,undefined8 data_end)\n\n{\n  long cu_end;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long header_entry;\n  undefined8 *entry;\n  undefined result [16];\n  \n  cu_end = *(long *)(cu_start + 8);\n  if (cu_end == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (header_entry = *(long *)(cu_start + 0x20); header_entry != 0; header_entry = *(long *)(header_entry + 8)) {\n      if (*(undefined8 **)(header_entry + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(header_entry + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (entry = *(undefined8 **)(cu_end + 8); entry != (undefined8 *)0x0;\n        entry = (undefined8 *)*entry) {\n      if ((undefined8 *)entry[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)entry[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = data_end;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_dwo_section_0010829e",
                "unaff_EBP": "ebp_value",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_dwo_section_0010829e(void)\n\n{\n  undefined8 result;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    result = invert_and_check_dwo_section_0010829e_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_dwo_section_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_binary_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultValue",
                "iVar2": "comparisonResult",
                "pcVar5": "archMachString",
                "sVar4": "stringLength",
                "uVar6": "printableArchMach",
                "iVar7": "archMachIterator",
                "lVar8": "paramIterator",
                "iVar9": "innerIterator",
                "uVar10": "unsignedVar",
                "uVar11": "archMachOffset",
                "param_7": "paramValue",
                "uStack000000000000000c": "stackValue"
            },
            "code": "\n\n\nvoid printReverseBinaryInfo_00104943(void)\n\n{\n  int defaultValue;\n  int comparisonResult;\n  char *inputString;\n  long convertedValue;\n  size_t stringLength;\n  char *archMachString;\n  undefined8 printableArchMach;\n  int archMachIterator;\n  long paramIterator;\n  int innerIterator;\n  uint unaff_R15D;\n  ulong unsignedVar;\n  uint archMachOffset;\n  int paramValue;\n  uint stackValue;\n  undefined8 param_11;\n  long param_13;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)convertedValue;\n  innerIterator = paramValue;\n  stackValue = unaff_R15D;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    paramValue = innerIterator;\n    if (param_11._4_4_ <= paramValue) {\n      return;\n    }\n    paramIterator = (long)paramValue;\n    archMachIterator = (defaultValue - stackValue) + -1;\n    convertedValue = paramIterator;\n    do {\n      innerIterator = (int)convertedValue;\n      if (param_11._4_4_ <= innerIterator) break;\n      stringLength = strlen(*(char **)(param_13 + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      archMachIterator = (archMachIterator - (int)stringLength) + -1;\n    } while (-1 < archMachIterator);\n    printf(\"\\n%*s\",(ulong)(stackValue + 1),&DAT_0011b4a1);\n    for (convertedValue = paramIterator * 0x60; ((ulong)(uint)(innerIterator - paramValue) + paramIterator) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param_13 + convertedValue));\n    }\n    archMachIterator = 2;\n    putc(10,_stdout);\n    do {\n      archMachString = (char *)bfd_printable_arch_mach(archMachIterator,0);\n      comparisonResult = strcmp(archMachString,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        printableArchMach = bfd_printable_arch_mach(archMachIterator,0);\n        printf(\"%*s \",(ulong)stackValue,printableArchMach);\n        archMachOffset = archMachIterator - 2;\n        convertedValue = paramIterator * 0x60;\n        comparisonResult = paramValue;\n        while (innerIterator != comparisonResult) {\n          archMachString = *(char **)(param_13 + convertedValue);\n          if (*(char *)((long)(char **)(param_13 + convertedValue) + (ulong)archMachOffset + 8) == '\\0') {\n            stringLength = strlen(archMachString);\n            for (unsignedVar = stringLength & 0xffffffff; (int)unsignedVar != 0; unsignedVar = (ulong)((int)unsignedVar - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMachString,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (innerIterator != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMachIterator = archMachIterator + 1;\n    } while (archMachIterator != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "fputs",
                "strcmp",
                "printf",
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_reverse_binary_info_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_type_with_parameters_00113e23",
                "param_1": "type",
                "param_2": "value",
                "lVar1": "typeWithValue",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createTypeWithParameters_00113e23(undefined8 type,undefined8 value)\n\n{\n  long typeWithValue;\n  undefined8 *allocatedMemory;\n  \n  typeWithValue = debug_make_type_constprop_0(1,0);\n  if (typeWithValue != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = type;\n    allocatedMemory[1] = value;\n    *(undefined8 **)(typeWithValue + 0x10) = allocatedMemory;\n  }\n  return typeWithValue;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_tagged_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "create_type_with_parameters_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_error_message_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab_type_number",
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_from_string_00108ea1",
                "param_1": "input_string",
                "param_2": "parsed_number",
                "pbVar2": "current_char",
                "pbVar3": "next_char",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_from_string_00108ea1(byte **input_string,int *parsed_number)\n\n{\n  int iVar1;\n  byte *current_char;\n  byte *next_char;\n  ulong result;\n  \n  current_char = *input_string;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_char * 2] & 4) != 0) {\n    next_char = current_char + 1;\n    iVar1 = (char)*current_char + -0x30;\n    *parsed_number = iVar1;\n    *input_string = next_char;\n    if (((&_sch_istable)[(ulong)current_char[1] * 2] & 4) != 0) {\n      do {\n        current_char = next_char;\n        iVar1 = iVar1 * 10 + -0x30 + (int)(char)*current_char;\n        next_char = current_char + 1;\n      } while (((&_sch_istable)[(ulong)current_char[1] * 2] & 4) != 0);\n      if (current_char[1] == 0x5f) {\n        next_char = current_char + 2;\n        *input_string = next_char;\n        *parsed_number = iVar1;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_number_from_string_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_addresses_00108072",
                "unaff_RBX": "sectionObject",
                "unaff_RBP": "basePointer",
                "unaff_R12": "signatureObject",
                "lVar5": "errorMessage",
                "lVar6": "sectionList1",
                "lVar7": "sectionAddress",
                "unaff_R14B": "isGroupSignature",
                "unaff_R15": "sectionAddressObject",
                "lVar8": "change_section_address",
                "uVar2": "sectionValue",
                "bVar1": "byteValue",
                "uVar4": "uintValue"
            },
            "code": "\nvoid setSectionAddresses_00108072(void)\n\n{\n  byte byteValue;\n  undefined8 sectionValue;\n  char cVar3;\n  uint uintValue;\n  long errorMessage;\n  long sectionList1;\n  long sectionAddress;\n  undefined8 *sectionObject;\n  long basePointer;\n  long signatureObject;\n  long change_section_address;\n  char isGroupSignature;\n  long sectionAddressObject;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  change_section_address = sectionObject[6];\n  sectionList1 = find_section_list(*sectionObject,0,0x18);\n  if (sectionList1 == 0) {\n    *(byte *)(sectionAddressObject + 0x28) = *(byte *)(sectionAddressObject + 0x28) | 1;\n    sectionValue = *sectionObject;\n    change_section_address = change_section_address + change_section_address;\n    *(long *)(sectionAddressObject + 0x30) = change_section_address;\n    *(long *)(sectionAddressObject + 0x38) = change_section_address;\n    change_section_address = sectionObject[7];\n    sectionList1 = find_section_list(sectionValue,0,0x60);\n    if (sectionList1 == 0) goto LAB_00115695;\nLAB_00115860:\n    sectionAddress = *(long *)(sectionList1 + 0x20);\n    if ((*(byte *)(sectionList1 + 0x14) & 0x40) != 0) {\n      sectionAddress = sectionAddress + change_section_address;\n    }\n    *(long *)(sectionAddressObject + 0x38) = sectionAddress;\n    change_section_address = find_section_list(*sectionObject,0,0x200);\n    if (change_section_address != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintValue = *(uint *)((long)sectionObject + 0x7c);\n    if (uintValue < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(sectionAddressObject + 0xb4) = *(undefined4 *)((long)sectionObject + 0xb4);\n    *(byte *)(sectionAddressObject + 0x28) =\n         *(byte *)(sectionAddressObject + 0x28) & 0xcf | *(byte *)(sectionObject + 5) & 0x30;\n    sectionObject[0xc] = sectionAddressObject;\n    sectionObject[0xb] = 0;\n    byteValue = *(byte *)((long)sectionObject + 0x27);\n  }\n  else {\n    sectionAddress = *(long *)(sectionList1 + 0x18);\n    if ((*(byte *)(sectionList1 + 0x14) & 8) == 0) {\n      sectionAddress = sectionAddress + change_section_address;\n    }\n    *(byte *)(sectionAddressObject + 0x28) = *(byte *)(sectionAddressObject + 0x28) | 1;\n    sectionValue = *sectionObject;\n    *(long *)(sectionAddressObject + 0x30) = sectionAddress;\n    *(long *)(sectionAddressObject + 0x38) = sectionAddress;\n    change_section_address = sectionObject[7];\n    sectionList1 = find_section_list(sectionValue,0,0x60);\n    if (sectionList1 != 0) goto LAB_00115860;\nLAB_00115695:\n    sectionValue = *sectionObject;\n    *(long *)(sectionAddressObject + 0x38) = change_section_address + change_section_address;\n    change_section_address = find_section_list(sectionValue,0,0x200);\n    if (change_section_address == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintValue = *(uint *)(change_section_address + 0x2c);\n    if (0x3e < uintValue) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(sectionAddressObject + 0x7c) = uintValue;\n    *(undefined4 *)(sectionAddressObject + 0xb4) = *(undefined4 *)((long)sectionObject + 0xb4);\n    *(byte *)(sectionAddressObject + 0x28) =\n         *(byte *)(sectionAddressObject + 0x28) & 0xcf | *(byte *)(sectionObject + 5) & 0x30;\n    sectionObject[0xc] = sectionAddressObject;\n    sectionObject[0xb] = 0;\n    byteValue = *(byte *)((long)sectionObject + 0x27);\n  }\n  if ((byteValue & 2) != 0) {\n    change_section_address = sectionObject[0x1a];\n    sectionList1 = group_signature_isra_0(change_section_address,sectionObject[0x1c]);\n    if ((sectionList1 != 0) &&\n       (sectionAddress = *(long *)(signatureObject + 8), *(uint *)(sectionList1 + 0x18) = *(uint *)(sectionList1 + 0x18) | 0x20,\n       *(int *)(sectionAddress + 8) == 5)) {\n      *(long *)(change_section_address + 0xb0) = sectionList1;\n      cVar3 = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (isGroupSignature != '\\0') {\n    *(undefined4 *)(*(long *)(sectionAddressObject + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "FUN_00108179",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_addresses_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "reverse_string_0010a2b9",
                "param_1": "input_address",
                "param_2": "flag",
                "param_3": "unused_param",
                "param_4": "output_param",
                "cVar1": "char_flag",
                "__s": "input_string",
                "sVar2": "input_length",
                "__s_00": "output_string",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] reverse_string_0010a2b9(long input_address,char flag,undefined8 unused_param,undefined8 output_param)\n\n{\n  char char_flag;\n  char *input_string;\n  size_t input_length;\n  char *output_string;\n  long counter;\n  undefined result [16];\n  \n  char_flag = *(char *)(*(long *)(input_address + 0x60) + 0x1c);\n  input_string = (char *)stab_pop_type();\n  input_length = strlen(input_string);\n  output_string = (char *)xmalloc(input_length + 0x1e);\n  if (flag == '\\0') {\n    *output_string = '\\0';\n    counter = 0;\n    flag = char_flag;\n  }\n  else {\n    counter = *(long *)(input_address + 0x68);\n    *(long *)(input_address + 0x68) = counter + 1;\n    sprintf(output_string,\"%ld=@S;\",counter);\n  }\n  input_length = strlen(output_string);\n  sprintf(output_string + input_length,\"S%s\",input_string);\n  free(input_string);\n  result._0_4_ = stab_push_string(input_address,output_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(output_string);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_string_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_and_write_symbol_0010ec73",
                "param_1": "symbolData",
                "param_2": "inputData",
                "param_3": "unused1",
                "param_4": "unused2",
                "param_5": "unused3",
                "param_6": "unused4",
                "iVar1": "iterationCount",
                "cVar2": "result",
                "stab_write_symbol_lto_priv_0": "writeSymbol"
            },
            "code": "\nundefined updateAndWriteSymbol_0010ec73(long *symbolData,long inputData,undefined8 unused1,undefined8 unused2,\n                      undefined8 unused3,undefined8 unused4)\n\n{\n  int iterationCount;\n  char result;\n  \n  if (symbolData[0x3c] != -1) {\n    (**(code **)(*(long *)(*symbolData + 8) + 0x50))(inputData,symbolData[1] + 8 + symbolData[0x3c]);\n    symbolData[0x3c] = -1;\n  }\n  if (symbolData[0x3d] != -1) {\n    (**(code **)(*(long *)(*symbolData + 8) + 0x50))(inputData,symbolData[1] + 8 + symbolData[0x3d]);\n    symbolData[0x3d] = -1;\n  }\n  iterationCount = *(int *)(symbolData + 0x3f);\n  *(int *)(symbolData + 0x3f) = iterationCount + 1;\n  if (iterationCount == 0) {\n    symbolData[0x40] = inputData;\n  }\n  else {\n    if ((symbolData[0x41] != -1) &&\n       (result = writeSymbol(symbolData,0xc0,0,symbolData[0x41],0,unused4,unused2),\n       result == '\\0')) {\n      return 0;\n    }\n    symbolData[0x41] = inputData - symbolData[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_and_write_symbol_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_unlink_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "numBytesCopied",
                "param_5": "shouldSetTimes",
                "param_6": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "numBytesCopied",
                "auVar6": "result"
            },
            "code": "\nundefined  [16]\ncopyAndUnlinkFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 numBytesCopied,char shouldSetTimes,\n            undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong numBytesCopied;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    numBytesCopied = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFilePath,numBytesCopied);\n    numBytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPtr = __errno_location();\n      errorString = strerror(*errnoPtr);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetTimes != '\\0') {\n    set_times(destinationFilePath,numBytesCopied);\n  }\n  result._8_8_ = errorCode;\n  result._0_8_ = numBytesCopied;\n  return result;\n}\n\n",
            "called": [
                "smart_rename.cold",
                "simple_copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_stab_class_method_var_0010adf2",
                "stab_class_method_var": "initialize_stab_class_method_var"
            },
            "code": "\nvoid initialize_stab_class_method_var_0010adf2(void)\n\n{\n  initialize_stab_class_method_var_0010adf2();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_stab_class_method_var_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "param_1": "param_address",
                "param_2": "param_value",
                "param_3": "output_array",
                "param_4": "count_ptr",
                "param_5": "capacity_ptr",
                "uVar1": "param_value_copy",
                "cVar2": "demangle_success",
                "uVar3": "remembered_type",
                "lVar4": "output_array_value",
                "plVar5": "output_array_ptr",
                "uVar6": "count",
                "local_40": "type_info_buffer"
            },
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 param_address,undefined8 *param_value,long *output_array,uint *count_ptr,uint *capacity_ptr)\n\n{\n  undefined8 param_value_copy;\n  char demangle_success;\n  undefined4 remembered_type;\n  long output_array_value;\n  long *output_array_ptr;\n  uint count;\n  long type_info_buffer [2];\n  \n  param_value_copy = *param_value;\n  output_array_ptr = type_info_buffer;\n  if (output_array == (long *)0x0) {\n    output_array_ptr = (long *)0x0;\n  }\n  demangle_success = stab_demangle_type_lto_priv_0(param_address,param_value,output_array_ptr);\n  if ((demangle_success != '\\0') &&\n     (remembered_type = stab_demangle_remember_type(param_address,param_value_copy,(int)*param_value - (int)param_value_copy),\n     (char)remembered_type != '\\0')) {\n    if (output_array == (long *)0x0) {\n      return remembered_type;\n    }\n    if (type_info_buffer[0] != 0) {\n      if (*capacity_ptr <= *count_ptr + 1) {\n        count = *capacity_ptr + 10;\n        output_array_value = *output_array;\n        *capacity_ptr = count;\n        output_array_value = xrealloc(output_array_value,(ulong)count << 3);\n        *output_array = output_array_value;\n      }\n      count = *count_ptr;\n      *(long *)(*output_array + (ulong)count * 8) = type_info_buffer[0];\n      *count_ptr = count + 1;\n      return remembered_type;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "stab_demangle_type.lto_priv.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "demangle_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_size_or_display_warning_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errorLocation",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong getFileSizeOrDisplayWarning_00113f50(char *filePath)\n\n{\n  int status;\n  int *errorLocation;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStat);\n    if (status < 0) {\n      errorLocation = __errno_location();\n      if (*errorLocation == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errorLocation);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "get_file_size.cold",
                "non_fatal",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "copy_file",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "get_file_size_or_display_warning_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "extract_debug_symbols_0011378f",
                "param_1": "symbolTable",
                "param_2": "compilationUnit",
                "param_3": "outputPointer",
                "param_4": "outputSize",
                "param_5": "outputString",
                "param_6": "outputFlag",
                "auVar1": "tempArray",
                "cVar2": "status",
                "uVar3": "errorCode",
                "uVar4": "errorMessage",
                "puVar5": "outputBuffer",
                "sVar6": "stringLength",
                "lVar7": "loopCounter",
                "puVar8": "symbolPointer",
                "puVar9": "symbolArray",
                "__dest": "destination",
                "puVar10": "loopVariable",
                "plVar11": "nestedLoopVariable",
                "bVar12": "flag",
                "local_258": "symbolTableCopy",
                "local_250": "memoryAllocationSize",
                "local_248": "localVariable1",
                "uStack_244": "localVariable2",
                "uStack_240": "localVariable3",
                "uStack_23c": "localVariable4",
                "local_238": "temporaryMemory",
                "local_228": "initializedFlag",
                "local_220": "hashTable1",
                "local_1f8": "loopCounter2",
                "local_1f0": "initializedFlag2",
                "local_1e8": "nestedLoopArray",
                "local_a0": "hashTable2",
                "local_78": "loopCounter3",
                "uStack_70": "loopVariable2",
                "local_68": "localVariable5",
                "local_60": "localVariable6",
                "local_58": "localVariable7",
                "uStack_54": "localVariable8",
                "uStack_50": "localVariable9",
                "uStack_4c": "localVariable10"
            },
            "code": "\nundefined4\nextractDebugSymbols_0011378f(undefined8 *symbolTable,undefined8 *compilationUnit,long *outputPointer,undefined8 *outputSize,\n            undefined8 *outputString,undefined8 *outputFlag)\n\n{\n  undefined tempArray [16];\n  char status;\n  undefined4 errorCode;\n  undefined8 errorMessage;\n  undefined *outputBuffer;\n  size_t stringLength;\n  long loopCounter;\n  undefined8 *symbolPointer;\n  undefined4 *symbolArray;\n  char *destination;\n  undefined8 *loopVariable;\n  long *nestedLoopVariable;\n  byte flag;\n  undefined8 *symbolTableCopy;\n  long memoryAllocationSize;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined temporaryMemory [16];\n  undefined8 initializedFlag;\n  undefined hashTable1 [40];\n  undefined8 loopCounter2;\n  undefined8 initializedFlag2;\n  undefined4 nestedLoopArray [82];\n  undefined hashTable2 [40];\n  undefined loopCounter3 [8];\n  undefined8 loopVariable2;\n  undefined8 localVariable5;\n  undefined4 localVariable6;\n  undefined4 localVariable7;\n  undefined4 localVariable8;\n  undefined4 localVariable9;\n  undefined4 localVariable10;\n  \n  flag = 0;\n  localVariable1 = 0;\n  localVariable2 = 0;\n  localVariable3 = 500;\n  localVariable4 = 0;\n  symbolTableCopy = symbolTable;\n  memoryAllocationSize = xmalloc(500);\n  initializedFlag = 1;\n  temporaryMemory = ZEXT816(0);\n  status = bfd_hash_table_init(hashTable1,string_hash_newfunc_lto_priv_0,0x30);\n  if ((status == '\\0') ||\n     (status = bfd_hash_table_init(hashTable2,string_hash_newfunc_lto_priv_0,0x30), status == '\\0')) {\n    errorCode = bfd_get_error();\n    errorMessage = bfd_errmsg(errorCode);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",errorMessage);\n  }\n  else {\n    loopCounter2 = 0;\n    unique0x100000e9 = 0xffffffff;\n    loopCounter3 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    symbolArray = nestedLoopArray;\n    for (loopCounter = 0x52; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *symbolArray = 0;\n      symbolArray = symbolArray + (ulong)flag * -2 + 1;\n    }\n    localVariable5 = 0;\n    localVariable6 = 0;\n    initializedFlag2 = 1;\n    localVariable7 = 0;\n    localVariable8 = 0;\n    localVariable9 = 0xffffffff;\n    localVariable10 = 0xffffffff;\n    status = stab_write_symbol_lto_priv_0(&symbolTableCopy,0,0,0,0);\n    tempArray = _loopCounter3;\n    if (status != '\\0') {\n      loopCounter3._4_4_ = localVariable2;\n      loopCounter3._0_4_ = localVariable1;\n      loopVariable2 = tempArray._8_8_;\n      status = stab_write_symbol_lto_priv_0(&symbolTableCopy,100,0,0,*symbolTable);\n      if (status != '\\0') {\n        *(int *)(compilationUnit + 6) = *(int *)(compilationUnit + 6) + 1;\n        compilationUnit[10] = 0;\n        loopVariable = (undefined8 *)*compilationUnit;\n        *(undefined4 *)(compilationUnit + 7) = *(undefined4 *)((long)compilationUnit + 0x34);\n        for (; loopVariable != (undefined8 *)0x0; loopVariable = (undefined8 *)*loopVariable) {\n          compilationUnit[8] = loopVariable[2];\n          *(undefined4 *)(compilationUnit + 9) = 0;\n          status = stab_start_compilation_unit_lto_priv_0(&symbolTableCopy,*(undefined8 *)(loopVariable[1] + 8))\n          ;\n          if (status == '\\0') {\n            return 0;\n          }\n          nestedLoopVariable = (long *)loopVariable[1];\n          if (nestedLoopVariable != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)nestedLoopVariable[2] != (undefined8 *)0x0) {\n                for (symbolPointer = *(undefined8 **)(undefined8 *)nestedLoopVariable[2]; symbolPointer != (undefined8 *)0x0;\n                    symbolPointer = (undefined8 *)*symbolPointer) {\n                  status = debug_write_name_constprop_0(compilationUnit,&symbolTableCopy);\n                  if (status == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              nestedLoopVariable = (long *)*nestedLoopVariable;\n              if (nestedLoopVariable == (long *)0x0) break;\n              status = stab_start_source_lto_priv_0(&symbolTableCopy,nestedLoopVariable[1]);\n              if (status == '\\0') {\n                return 0;\n              }\n            }\n          }\n          status = debug_write_linenos_constprop_0(compilationUnit,&symbolTableCopy,0xffffffffffffffff);\n          if (status == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(localVariable10,localVariable9) == -1) &&\n           (errorCode = stab_write_symbol_lto_priv_0(&symbolTableCopy,100,0,localVariable5,0), (char)errorCode != '\\0'))\n        {\n          (**(code **)(symbolTable[1] + 0x50))(initializedFlag,memoryAllocationSize + 8);\n          *outputPointer = memoryAllocationSize;\n          *outputSize = CONCAT44(localVariable2,localVariable1);\n          *outputFlag = initializedFlag;\n          outputBuffer = (undefined *)xmalloc();\n          *outputBuffer = 0;\n          destination = outputBuffer + 1;\n          *outputString = outputBuffer;\n          for (loopCounter = temporaryMemory._0_8_; loopCounter != 0; loopCounter = *(long *)(loopCounter + 0x18)) {\n            strcpy(destination,*(char **)(loopCounter + 8));\n            stringLength = strlen(destination);\n            destination = destination + stringLength + 1;\n          }\n          return errorCode;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "bfd_hash_table_init",
                "strlen",
                "debug_write_linenos.constprop.0",
                "string_hash_newfunc.lto_priv.0",
                "strcpy",
                "debug_write_name.constprop.0",
                "xmalloc",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_debug_symbols_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "dcgettext": "getTranslatedString",
                "non_fatal": "handleNonFatalError"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = getTranslatedString(0,\"\\'%s\\': No such file\",5);\n    handleNonFatalError(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = getTranslatedString(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    handleNonFatalError(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_type_based_on_stab_0010a0a0",
                "param_1": "input_value",
                "stab_modify_type": "modify_type_in_stab"
            },
            "code": "\nvoid modify_type_based_on_stab_0010a0a0(long input_value)\n\n{\n  modify_type_in_stab(input_value,0x26,4,input_value + 0x198,input_value + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_based_on_stab_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "reportFunction",
                "param_10": "data1",
                "param_11": "data2",
                "param_12": "data3",
                "param_13": "data4",
                "param_14": "data5",
                "in_AL": "condition",
                "local_d8": "bufferSize",
                "local_d4": "localVar1",
                "local_d0": "localVar2",
                "local_c8": "localVar3",
                "local_b8": "localArray",
                "local_b0": "localData1",
                "local_a8": "localData2",
                "local_a0": "localData3",
                "local_98": "localData4",
                "local_90": "localData5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid reportData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 reportFunction,undefined8 data1,undefined8 data2,undefined8 data3,\n                 undefined8 data4,undefined8 data5)\n\n{\n  char condition;\n  undefined4 bufferSize;\n  undefined4 localVar1;\n  undefined *localVar2;\n  undefined *localVar3;\n  undefined localArray [8];\n  undefined8 localData1;\n  undefined8 localData2;\n  undefined8 localData3;\n  undefined8 localData4;\n  undefined8 localData5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (condition != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  localVar2 = &stack0x00000008;\n  bufferSize = 8;\n  localVar3 = localArray;\n  localVar1 = 0x30;\n  localData1 = data1;\n  localData2 = data2;\n  localData3 = data3;\n  localData4 = data4;\n  localData5 = data5;\n  report(reportFunction,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "main",
                "merge_gnu_build_notes",
                "get_file_size",
                "parse_flags.cold",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "set_times.cold",
                "FUN_00105828",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00107880",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "report_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "decompile_and_improve_00112c1f",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "plVar1": "ptrVar1",
                "lVar2": "var1",
                "puVar3": "ptrVar3",
                "puVar4": "ptrVar4",
                "cVar5": "charVar",
                "piVar6": "ptrVar6",
                "uVar7": "var2",
                "uVar8": "var3",
                "iVar9": "var4",
                "uVar10": "var5",
                "uVar11": "var6",
                "uVar12": "var7",
                "uVar13": "var8",
                "bVar14": "boolVar",
                "local_3c": "var9"
            },
            "code": "\n\n\nundefined8 decompile_and_improve_00112c1f(ulong arg1,undefined8 arg2,int *arg3,long arg4)\n\n{\n  long *ptrVar1;\n  long var1;\n  undefined8 *ptrVar3;\n  undefined8 *ptrVar4;\n  char charVar;\n  int *ptrVar6;\n  undefined8 var2;\n  undefined8 var3;\n  int var4;\n  undefined4 var5;\n  undefined8 var6;\n  ulong var7;\n  uint var8;\n  bool boolVar;\n  uint var9;\n  \n  var7 = arg1;\nLAB_00112c39:\n  if (arg3 != (int *)0x0) {\n    var4 = *arg3;\n    if (var4 - 0x16U < 2) {\n      do {\n        ptrVar1 = *(long **)(arg3 + 4);\n        var8 = *(uint *)(arg1 + 0x30);\n        var7 = (ulong)var8;\n        var1 = *ptrVar1;\n        if (*(uint *)(var1 + 0x10) == var8) {\n          if (var4 == 0x16) {\n            var2 = stab_typedef_type_lto_priv_0(arg2,*(undefined8 *)(var1 + 8));\n            return var2;\n          }\nLAB_00112c94:\n          ptrVar6 = (int *)debug_get_real_type_isra_0(arg3,0);\n          if (ptrVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptrVar6 - 7U < 4) && (*(long *)(ptrVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptrVar6 + 4) + 0xc) <= *(uint *)(arg1 + 0x38)) &&\n               (charVar = debug_set_class_id_lto_priv_0\n                                  (arg1,*(undefined8 *)(**(long **)(arg3 + 4) + 8),ptrVar6),\n               charVar == '\\0')) {\n              return 0;\n            }\n            var8 = *(uint *)(*(long *)(ptrVar6 + 4) + 0xc);\n          }\n          else {\n            var8 = 0;\n          }\n          var4 = *ptrVar6;\n          var2 = *(undefined8 *)(**(long **)(arg3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var4 == 0x17) {\n          if (var1 != arg4) goto LAB_00112c94;\n          *(uint *)(arg4 + 0x10) = var8;\n          arg4 = *ptrVar1;\n          arg3 = (int *)ptrVar1[1];\n          goto LAB_00112c39;\n        }\n        if (arg4 != 0) {\n          *(uint *)(arg4 + 0x10) = var8;\n        }\n        arg3 = (int *)ptrVar1[1];\n        if (arg3 == (int *)0x0) goto LAB_00112dd6;\n        var4 = *arg3;\n        arg4 = 0;\n      } while (var4 - 0x16U < 2);\nLAB_00112d74:\n      var2 = 0;\n    }\n    else {\n      if (arg4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(arg4 + 0x10) = *(undefined4 *)(arg1 + 0x30);\n      if (*(int *)(arg4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      var2 = *(undefined8 *)(arg4 + 8);\n    }\n    switch(var4) {\n    case 0:\n      var2 = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",var2);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      var2 = stab_void_type_lto_priv_0(arg2);\n      return var2;\n    case 3:\n      var2 = stab_int_type_lto_priv_0(arg2,arg3[1],*(undefined *)(arg3 + 4));\n      return var2;\n    case 4:\n      var2 = stab_float_type_lto_priv_0(arg2,arg3[1]);\n      return var2;\n    case 5:\n      var2 = stab_complex_type_lto_priv_0(arg2,arg3[1]);\n      return var2;\n    case 6:\n      var2 = stab_bool_type_lto_priv_0(arg2,arg3[1]);\n      return var2;\n    case 7:\n    case 8:\n      if (*(long *)(arg3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(arg3 + 4) + 0xc) <= *(uint *)(arg1 + 0x38)) &&\n           (charVar = debug_set_class_id_lto_priv_0(arg1,var2,arg3), charVar == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(arg3 + 4);\n        if (*(int *)(arg1 + 0x30) == *(int *)(var1 + 8)) {\n          var8 = *(uint *)(var1 + 0xc);\n          if (var8 <= *(uint *)(arg1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var4 = *arg3;\nLAB_00112ed2:\n          var2 = stab_tag_type_lto_priv_0(arg2,var2,var8,var4);\n          return var2;\n        }\n        *(int *)(var1 + 8) = *(int *)(arg1 + 0x30);\n      }\n      var5 = 0;\n      if (*(long *)(arg3 + 4) != 0) {\n        var5 = *(undefined4 *)(*(long *)(arg3 + 4) + 0xc);\n      }\n      charVar = stab_start_struct_type_lto_priv_0(arg2,var2,var5,*arg3 == 7,arg3[1]);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(arg3 + 4) != (long *)0x0) && (var7 = 0, **(long **)(arg3 + 4) != 0)) {\n        while( true ) {\n          ptrVar4 = *(undefined8 **)(**(long **)(arg3 + 4) + var7 * 8);\n          if (ptrVar4 == (undefined8 *)0x0) break;\n          charVar = decompile_and_improve_00112c1f(arg1,arg2,ptrVar4[1],0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n          charVar = stab_struct_field_lto_priv_0\n                            (arg2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3),\n                             *(undefined4 *)((long)ptrVar4 + 0x1c),*(undefined4 *)(ptrVar4 + 2));\n          if (charVar == '\\0') {\n            return 0;\n          }\n          var7 = (ulong)((int)var7 + 1);\n        }\n      }\n      var2 = stab_end_struct_type_lto_priv_0(arg2);\n      return var2;\n    case 9:\n    case 10:\n      if (*(long *)(arg3 + 4) == 0) {\n        var8 = 0;\n        ptrVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(arg3 + 4) + 0xc) <= *(uint *)(arg1 + 0x38)) &&\n           (var7 = arg1, charVar = debug_set_class_id_lto_priv_0(arg1,var2,arg3),\n           charVar == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(arg3 + 4);\n        var8 = *(uint *)(var1 + 0xc);\n        if (*(int *)(arg1 + 0x30) == *(int *)(var1 + 8)) {\n          if (var8 <= *(uint *)(arg1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var4 = *arg3;\n          goto LAB_00112ed2;\n        }\n        ptrVar6 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(arg1 + 0x30);\n        if (((ptrVar6 != (int *)0x0) && (arg3 != ptrVar6)) &&\n           (var7 = arg1, charVar = decompile_and_improve_00112c1f(arg1,arg2,ptrVar6,0), charVar == '\\0')) {\n          return 0;\n        }\n      }\n      charVar = stab_start_class_type_lto_priv_0\n                        (arg2,var2,var8,*arg3 == 9,arg3[1],ptrVar6 != (int *)0x0,\n                         arg3 == ptrVar6,var7);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (*(long **)(arg3 + 4) != (long *)0x0) {\n        var8 = 0;\n        if (**(long **)(arg3 + 4) != 0) {\n          while (ptrVar4 = *(undefined8 **)(**(long **)(arg3 + 4) + (ulong)var8 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar = decompile_and_improve_00112c1f(arg1,arg2,ptrVar4[1],0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptrVar4 + 0x14) == '\\0') {\n              charVar = stab_struct_field_lto_priv_0(arg2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3));\n            }\n            else {\n              charVar = stab_class_static_member_lto_priv_0(arg2,*ptrVar4,ptrVar4[3]);\n            }\n            if (charVar == '\\0') {\n              return 0;\n            }\n            var8 = var8 + 1;\n          }\n        }\n        var8 = 0;\n        if (*(long *)(*(long *)(arg3 + 4) + 0x10) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(arg3 + 4) + 0x10) + (ulong)var8 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar = decompile_and_improve_00112c1f(arg1,arg2,*ptrVar4,0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            charVar = stab_class_baseclass_lto_priv_0\n                              (arg2,*(undefined4 *)(ptrVar4 + 1),\n                               *(undefined *)((long)ptrVar4 + 0xc));\n            if (charVar == '\\0') {\n              return 0;\n            }\n            var8 = var8 + 1;\n          }\n        }\n        var9 = 0;\n        if (*(long *)(*(long *)(arg3 + 4) + 0x18) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(arg3 + 4) + 0x18) + (ulong)var9 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar = stab_class_start_method_lto_priv_0(arg2,*ptrVar4);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            var8 = 0;\n            while (ptrVar3 = *(undefined8 **)(ptrVar4[1] + (ulong)var8 * 8),\n                  ptrVar3 != (undefined8 *)0x0) {\n              if ((ptrVar3[4] != 0) &&\n                 (charVar = decompile_and_improve_00112c1f(arg1,arg2,ptrVar3[4],0), charVar == '\\0')) {\n                return 0;\n              }\n              charVar = decompile_and_improve_00112c1f(arg1,arg2,ptrVar3[1],0);\n              if (charVar == '\\0') {\n                return 0;\n              }\n              if (ptrVar3[3] == -1) {\n                charVar = stab_class_static_method_variant_lto_priv_0\n                                  (arg2,*ptrVar3,*(undefined4 *)(ptrVar3 + 2),\n                                   *(undefined *)((long)ptrVar3 + 0x14),\n                                   *(undefined *)((long)ptrVar3 + 0x15));\n              }\n              else {\n                charVar = stab_class_method_variant_lto_priv_0(arg2);\n              }\n              if (charVar == '\\0') {\n                return 0;\n              }\n              var8 = var8 + 1;\n            }\n            charVar = stab_class_end_method_lto_priv_0(arg2);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            var9 = var9 + 1;\n          }\n        }\n      }\n      var2 = stab_end_class_type_lto_priv_0(arg2);\n      return var2;\n    case 0xb:\n      ptrVar4 = *(undefined8 **)(arg3 + 4);\n      if (ptrVar4 == (undefined8 *)0x0) {\n        var3 = 0;\n        var6 = 0;\n      }\n      else {\n        var3 = ptrVar4[1];\n        var6 = *ptrVar4;\n      }\n      var2 = stab_enum_type_lto_priv_0(arg2,var2,var6,var3);\n      return var2;\n    case 0xc:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,*(undefined8 *)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_pointer_type_lto_priv_0(arg2);\n      return var2;\n    case 0xd:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var7 = 0;\n      if (*(long *)(*(long *)(arg3 + 4) + 8) == 0) {\n        var7 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(arg3 + 4) + 8) + var7 * 8), var1 != 0) {\n          var7 = var7 + 1;\n          charVar = decompile_and_improve_00112c1f(arg1,arg2,var1,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n        var7 = var7 & 0xffffffff;\n      }\n      var2 = stab_function_type_lto_priv_0\n                        (arg2,var7,*(undefined *)(*(long *)(arg3 + 4) + 0x10));\n      return var2;\n    case 0xe:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,*(undefined8 *)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_reference_type_lto_priv_0(arg2);\n      return var2;\n    case 0xf:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_range_type_lto_priv_0\n                        (arg2,*(undefined8 *)(*(long *)(arg3 + 4) + 8),\n                         *(undefined8 *)(*(long *)(arg3 + 4) + 0x10));\n      return var2;\n    case 0x10:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,*(undefined8 *)(*(long *)(arg3 + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(arg3 + 4);\n      var2 = stab_array_type_lto_priv_0\n                        (arg2,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                         *(undefined *)(var1 + 0x20));\n      return var2;\n    case 0x11:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_set_type_lto_priv_0(arg2,*(undefined *)(*(long *)(arg3 + 4) + 8));\n      return var2;\n    case 0x12:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,*(undefined8 *)(*(long *)(arg3 + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_offset_type_lto_priv_0(arg2);\n      return var2;\n    case 0x13:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,**(undefined8 **)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var7 = 0;\n      if (*(long *)(*(long *)(arg3 + 4) + 0x10) == 0) {\n        var7 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(arg3 + 4) + 0x10) + var7 * 8), var1 != 0)\n        {\n          var7 = var7 + 1;\n          charVar = decompile_and_improve_00112c1f(arg1,arg2,var1,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(arg3 + 4) + 8) != 0) &&\n         (charVar = decompile_and_improve_00112c1f(arg1,arg2,*(long *)(*(long *)(arg3 + 4) + 8),0),\n         charVar == '\\0')) {\n        return 0;\n      }\n      var2 = stab_method_type_lto_priv_0\n                        (arg2,*(long *)(*(long *)(arg3 + 4) + 8) != 0,var7 & 0xffffffff,\n                         *(undefined *)(*(long *)(arg3 + 4) + 0x18));\n      return var2;\n    case 0x14:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,*(undefined8 *)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_const_type_lto_priv_0(arg2);\n      return var2;\n    case 0x15:\n      charVar = decompile_and_improve_00112c1f(arg1,arg2,*(undefined8 *)(arg3 + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = stab_volatile_type_lto_priv_0(arg2);\n      return var2;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar = *(int **)**(undefined8 **)(arg3 + 4) == arg3;\n  arg3 = *(int **)**(undefined8 **)(arg3 + 4);\n  if (boolVar) {\nLAB_00112dd6:\n    var2 = stab_empty_type_lto_priv_0(arg2);\n    return var2;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "__assert_fail",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_tag_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "abort",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "fprintf",
                "stab_function_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_method_variant.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "dcgettext",
                "stab_int_type.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "flag",
                "unaff_R15": "sourcePtr",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char flag;\n  long sourcePtr;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(sourcePtr + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "in_RAX": "result",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 result;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,source,message,result);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "iVar1": "architecture",
                "uVar2": "arch",
                "uVar3": "filename",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileArchitecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 arch;\n  undefined8 filename;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    filename = bfd_get_archive_filename();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(errorMessage,filename);\n  }\n  else {\n    filename = bfd_get_mach();\n    arch = bfd_get_arch();\n    filename = bfd_printable_arch_mach(arch,filename);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(errorMessage,filename);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "non_fatal",
                "bfd_get_arch",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_architecture_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "directory_path",
                "pcVar1": "result",
                "template_in_dir": "get_template_from_directory",
                "mkdtemp": "create_directory",
                "free": "release_memory"
            },
            "code": "\nchar * create_temporary_directory_0011a0e0(void)\n\n{\n  char *directory_path;\n  char *result;\n  \n  directory_path = (char *)get_template_from_directory();\n  result = create_directory(directory_path);\n  if (result == (char *)0x0) {\n    release_memory(directory_path);\n  }\n  return result;\n}\n\n",
            "called": [
                "make_tempdir.cold",
                "template_in_dir",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "param_1": "base_address",
                "param_2": "identifier",
                "lVar1": "hash_result",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long base_address,undefined8 identifier)\n\n{\n  long hash_result;\n  undefined8 result;\n  \n  hash_result = bfd_hash_lookup(base_address + 0x1b8,identifier,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    result = stab_push_defined_type(base_address,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "write_stab_symbol_0010e6a8",
                "param_1": "binary_base",
                "param_2": "symbol_name",
                "__s": "type_name",
                "sVar3": "symbol_name_length",
                "sVar4": "type_name_length",
                "__s_00": "new_symbol_name",
                "lVar5": "symbol_lookup_result",
                "uVar9": "write_result",
                "auVar10": "return_value",
                "uVar1": "write_success",
                "uVar2": "symbol_type",
                "lVar8": "symbol_counter"
            },
            "code": "\nundefined  [16] write_stab_symbol_0010e6a8(long binary_base,char *symbol_name,undefined8 param_3,undefined8 param_4)\n\n{\n  uint write_success;\n  undefined4 symbol_type;\n  char *type_name;\n  size_t symbol_name_length;\n  size_t type_name_length;\n  char *new_symbol_name;\n  long symbol_lookup_result;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  long symbol_counter;\n  ulong write_result;\n  undefined return_value [16];\n  \n  symbol_counter = *(long *)(*(long *)(binary_base + 0x60) + 0x10);\n  symbol_type = *(undefined4 *)(*(long *)(binary_base + 0x60) + 0x18);\n  type_name = (char *)stab_pop_type();\n  symbol_name_length = strlen(symbol_name);\n  type_name_length = strlen(type_name);\n  new_symbol_name = (char *)xmalloc(symbol_name_length + 0x14 + type_name_length);\n  if (symbol_counter < 1) {\n    symbol_counter = *(long *)(binary_base + 0x68);\n    *(long *)(binary_base + 0x68) = symbol_counter + 1;\n    sprintf(new_symbol_name,\"%s:t%ld=%s\",symbol_name,symbol_counter,type_name);\n  }\n  else {\n    sprintf(new_symbol_name,\"%s:t%s\",symbol_name,type_name);\n  }\n  free(type_name);\n  write_success = stab_write_symbol_lto_priv_0(binary_base,0x80,0,0,new_symbol_name);\n  write_result = (ulong)write_success;\n  if ((char)write_success != '\\0') {\n    free(new_symbol_name);\n    symbol_lookup_result = bfd_hash_lookup(binary_base + 0x1b8,symbol_name,1,0);\n    if (symbol_lookup_result != 0) {\n      *(long *)(symbol_lookup_result + 0x20) = symbol_counter;\n      *(undefined4 *)(symbol_lookup_result + 0x28) = symbol_type;\n      goto LAB_0010e7b3;\n    }\n    symbol_type = bfd_get_error();\n    uVar6 = bfd_errmsg(symbol_type);\n    uVar7 = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(uVar7,uVar6);\n  }\n  write_result = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = write_result;\n  return return_value;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "bfd_get_error",
                "stab_pop_type",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "sprintf",
                "dcgettext",
                "bfd_hash_lookup",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "reverse_symbol_and_write_0010e7c2",
                "param_1": "symbol",
                "param_2": "prefix",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "symbol_to_write",
                "sVar1": "prefix_length",
                "sVar2": "symbol_length",
                "__s_00": "output_symbol",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] reverse_symbol_and_write_0010e7c2(undefined8 symbol,char *prefix,undefined8 param3,undefined8 param4)\n\n{\n  char *symbol_to_write;\n  size_t prefix_length;\n  size_t symbol_length;\n  char *output_symbol;\n  undefined result [16];\n  \n  symbol_to_write = (char *)stab_pop_type();\n  prefix_length = strlen(prefix);\n  symbol_length = strlen(symbol_to_write);\n  output_symbol = (char *)xmalloc(prefix_length + 3 + symbol_length);\n  sprintf(output_symbol,\"%s:T%s\",prefix,symbol_to_write);\n  free(symbol_to_write);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol,0x80,0,0,output_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(output_symbol);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_symbol_and_write_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data1",
                "param_10": "data2",
                "param_11": "data3",
                "param_12": "data4",
                "param_13": "data5",
                "param_14": "data6",
                "in_AL": "isSet",
                "local_d8": "size1",
                "local_d4": "size2",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "data2_copy",
                "local_a8": "data3_copy",
                "local_a0": "data4_copy",
                "local_98": "data5_copy",
                "local_90": "data6_copy",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy"
            },
            "code": "\nvoid reportAndExit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data1,undefined8 data2,undefined8 data3,undefined8 data4,\n                 undefined8 data5,undefined8 data6)\n\n{\n  char isSet;\n  undefined4 size1;\n  undefined4 size2;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 data2_copy;\n  undefined8 data3_copy;\n  undefined8 data4_copy;\n  undefined8 data5_copy;\n  undefined8 data6_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (isSet != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  pointer1 = &stack0x00000008;\n  size1 = 8;\n  pointer2 = buffer;\n  size2 = 0x30;\n  data2_copy = data2;\n  data3_copy = data3;\n  data4_copy = data4;\n  data5_copy = data5;\n  data6_copy = data6;\n  report(data1,&size1);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "copy_file",
                "find_section_list",
                "FUN_00114dc7",
                "copy_section.cold",
                "main",
                "parse_flags.cold",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "coff_get_slot.lto_priv.0",
                "init_section_add.cold",
                "section_add_load_file.cold",
                "FUN_0010554f",
                "add_redefine_and_check",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "report_and_exit_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_file",
                "FUN_00107880",
                "copy_object",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "fileDescriptor",
                "iVar1": "errorCode",
                "unaff_RBP": "ptrRetVal",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleBfdError_001083b7(long fileDescriptor)\n\n{\n  int errorCode;\n  undefined8 *ptrRetVal;\n  undefined8 returnAddress;\n  \n  if (fileDescriptor == -1) {\n    errorCode = bfd_get_error();\n    if (errorCode == 5) {\n      return returnAddress;\n    }\n  }\n  bfd_nonfatal(*ptrRetVal);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "extract_build_notes_00116852",
                "param_7": "target_address",
                "param_9": "target_size",
                "param_10": "max_buffer_size",
                "param_11": "build_notes",
                "param_12": "output_buffer",
                "param_13": "context",
                "param_14": "num_notes",
                "in_R10": "note_count",
                "unaff_RBX": "min_address",
                "unaff_RBP": "ctx_ptr",
                "unaff_R13": "current_note",
                "unaff_R14": "note",
                "unaff_R15": "max_address",
                "in_RCX": "end_of_notes",
                "in_R11": "note_entry_size",
                "sVar1": "note_entry_type",
                "iVar3": "memcmp_result",
                "uVar4": "index",
                "uVar5": "note_size",
                "uVar6": "note_address",
                "lVar7": "difference",
                "uVar8": "note_id",
                "__ptr": "temporary_buffer",
                "puVar9": "buffer_ptr",
                "cVar10": "special_value",
                "puVar11": "buffer_ptr2",
                "puVar12": "buffer_ptr3",
                "pcVar2": "function_ptr",
                "psVar13": "current_note_ptr",
                "bVar14": "byte_value"
            },
            "code": "\nulong extract_build_notes_00116852(void)\n\n{\n  size_t note_entry_type;\n  code *function_ptr;\n  int memcmp_result;\n  uint index;\n  undefined *temporary_buffer;\n  size_t *end_of_notes;\n  ulong note_size;\n  ulong note_address;\n  long difference;\n  ulong note_id;\n  size_t min_address;\n  size_t *ctx_ptr;\n  undefined *buffer_ptr;\n  char special_value;\n  undefined *buffer_ptr2;\n  ulong note_count;\n  undefined *buffer_ptr3;\n  size_t note_entry_size;\n  size_t *current_note;\n  size_t *note;\n  size_t max_address;\n  size_t *current_note_ptr;\n  byte byte_value;\n  size_t target_address;\n  size_t target_size;\n  ulong max_buffer_size;\n  size_t *build_notes;\n  undefined *output_buffer;\n  long context;\n  size_t num_notes;\n  \n  byte_value = 0;\ncode_r0x00116852:\n  index = (int)note_count + 1;\n  if (0x10 < (int)note_count) goto LAB_001167f5;\nLAB_00116863:\n  note = note + -9;\n  do {\n    if (current_note <= note) {\n      note_entry_type = note[2];\n      if (note_entry_type == 0) goto LAB_00116863;\n      note_id = (ulong)index;\n      if ((*note == *ctx_ptr) &&\n         (memcmp_result = memcmp((void *)note[3],(void *)ctx_ptr[3],*ctx_ptr), memcmp_result == 0)) {\n        note_address = note[7];\n        note_size = note[8];\n        note_count = note_id & 0xffffffff;\n        if (max_address == note_address) {\n          if (min_address != note_size) goto LAB_001167a6;\n          ctx_ptr[2] = 0;\n        }\n        else {\n          if (max_address < note_address) {\n            if (note_size < max_address) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < note_size) || (max_address <= (note_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_address < max_address) {\n              if ((0xfffffffffffffff0 < min_address) ||\n                 (note_address <= (min_address + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_address == note_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_address <= note_size) {\n              ctx_ptr[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (note_size < max_address) goto LAB_0010852c;\n          }\n          if ((note_entry_size == 0x101) != (note_entry_type == 0x101)) goto code_r0x00116852;\n          if (note_size <= min_address) {\n            note_size = min_address;\n          }\n          if (note_address < max_address) {\n            max_address = note_address;\n          }\n          note[8] = note_size;\n          note[7] = max_address;\n          ctx_ptr[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        note = ctx_ptr;\n        ctx_ptr = note + 9;\n        if (end_of_notes <= ctx_ptr) {\n          qsort(build_notes,num_notes,0x48,sort_gnu_build_notes);\n          temporary_buffer = (undefined *)xmalloc(max_buffer_size * 2);\n          target_address = 0;\n          buffer_ptr3 = temporary_buffer;\n          for (current_note_ptr = build_notes; current_note_ptr < end_of_notes; current_note_ptr = current_note_ptr + 9) {\n            if (current_note_ptr[2] != 0) {\n              buffer_ptr2 = buffer_ptr3 + 4;\n              buffer_ptr = buffer_ptr3 + 0xc;\n              function_ptr = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((current_note_ptr[7] == target_size) && (current_note_ptr[8] == target_address)) {\n                (*function_ptr)(*current_note_ptr,buffer_ptr3);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,buffer_ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_note_ptr[2],buffer_ptr3 + 8);\n                note_address = current_note_ptr[6];\n                note_id = *current_note_ptr;\n                buffer_ptr3 = (undefined *)current_note_ptr[3];\n                buffer_ptr2 = buffer_ptr;\n                for (note_size = note_id; note_size != 0; note_size = note_size - 1) {\n                  *buffer_ptr2 = *buffer_ptr3;\n                  buffer_ptr3 = buffer_ptr3 + (ulong)byte_value * -2 + 1;\n                  buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n                }\n                if (note_id < note_address) {\n                  for (difference = note_address - note_id; difference != 0; difference = difference + -1) {\n                    *buffer_ptr2 = 0;\n                    buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n                  }\n                }\n                buffer_ptr3 = buffer_ptr + note_address;\n              }\n              else {\n                (*function_ptr)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  special_value = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  special_value = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(special_value,buffer_ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(current_note_ptr[2],buffer_ptr3 + 8);\n                note_id = *current_note_ptr;\n                buffer_ptr3 = (undefined *)current_note_ptr[3];\n                buffer_ptr2 = buffer_ptr;\n                for (note_address = note_id; note_address != 0; note_address = note_address - 1) {\n                  *buffer_ptr2 = *buffer_ptr3;\n                  buffer_ptr3 = buffer_ptr3 + (ulong)byte_value * -2 + 1;\n                  buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n                }\n                note_address = current_note_ptr[6];\n                if (note_id < note_address) {\n                  for (difference = note_address - note_id; difference != 0; difference = difference + -1) {\n                    *buffer_ptr2 = 0;\n                    buffer_ptr2 = buffer_ptr2 + (ulong)byte_value * -2 + 1;\n                  }\n                }\n                difference = *(long *)(context + 8);\n                buffer_ptr = buffer_ptr + note_address;\n                buffer_ptr3 = buffer_ptr + 8;\n                if ((*(int *)(difference + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(difference + 0x38))(current_note_ptr[7],buffer_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(current_note_ptr[8],buffer_ptr3);\n                  buffer_ptr3 = buffer_ptr + 0x10;\n                }\n                else {\n                  (**(code **)(difference + 0x50))(current_note_ptr[7],buffer_ptr);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(current_note_ptr[8],buffer_ptr + 4);\n                }\n                target_size = current_note_ptr[7];\n                target_address = current_note_ptr[8];\n              }\n            }\n          }\n          note_address = (long)buffer_ptr3 - (long)temporary_buffer;\n          note_id = note_address;\n          buffer_ptr3 = temporary_buffer;\n          if (note_address < max_buffer_size) {\n            for (; max_buffer_size = note_address, note_id != 0; note_id = note_id - 1) {\n              *output_buffer = *buffer_ptr3;\n              buffer_ptr3 = buffer_ptr3 + (ulong)byte_value * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_value * -2 + 1;\n            }\n          }\n          free(temporary_buffer);\n          free(build_notes);\n          return max_buffer_size;\n        }\n        note_entry_size = note[0xb];\n      } while (note_entry_size == 0);\n      max_address = note[0x10];\n      min_address = note[0x11];\n      index = 0;\n      if (max_address != min_address) break;\n      note[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "sort_gnu_build_notes",
                "qsort",
                "xmalloc",
                "free",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "extract_build_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_type_00113d3a",
                "param_1": "input",
                "lVar1": "typePointer"
            },
            "code": "\nlong initializeType_00113d3a(long input)\n\n{\n  long typePointer;\n  \n  if (input != 0) {\n    typePointer = *(long *)(input + 8);\n    if (typePointer == 0) {\n      typePointer = debug_make_type_constprop_0(0xc,0);\n      if (typePointer == 0) {\n        typePointer = 0;\n      }\n      else {\n        *(long *)(typePointer + 0x10) = input;\n        *(long *)(input + 8) = typePointer;\n      }\n    }\n    return typePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_type_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "main",
                "parse_stab",
                "display_info.isra.0.cold",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "section_add_load_file",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "input",
                "stab_modify_type": "modifyStabType"
            },
            "code": "\nvoid modifyStabType_0010a0d3(long input)\n\n{\n  modifyStabType_0010a0d3(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_1": "param_flags",
                "param_2": "param_strings",
                "param_3": "bfd_handler",
                "lVar1": "temp_var1",
                "pcVar2": "temp_var2",
                "ppcVar3": "rename_list_ptr",
                "cVar4": "conversion_result",
                "iVar5": "temp_var3",
                "uVar6": "temp_var4",
                "sVar7": "strlen_var1",
                "sVar8": "strlen_var2",
                "lVar9": "section_list_var",
                "pcVar10": "output_section",
                "pcVar11": "temp_var5",
                "pcVar12": "temp_var6",
                "uVar13": "temp_var7",
                "bVar14": "temp_var8",
                "local_50": "error_message",
                "local_48": "output_section_name",
                "local_40": "size_temp_buffer"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid create_output_section_00115530(long param_flags,char **param_strings,long bfd_handler)\n\n{\n  long temp_var1;\n  char *temp_var2;\n  char **rename_list_ptr;\n  char conversion_result;\n  int temp_var3;\n  uint temp_var4;\n  size_t strlen_var1;\n  size_t strlen_var2;\n  long section_list_var;\n  char *output_section;\n  char *temp_var5;\n  char *temp_var6;\n  uint temp_var7;\n  bool temp_var8;\n  long error_message;\n  char *output_section_name;\n  long size_temp_buffer [2];\n  \n  conversion_result = is_strip_section_isra_0(param_strings);\n  if (conversion_result != '\\0') {\n    return;\n  }\n  output_section = *param_strings;\n  temp_var7 = *(uint *)((long)param_strings + 0x24);\n  output_section_name = output_section;\n  rename_list_ptr = section_rename_list;\n  if (*(int *)(*(long *)(param_flags + 8) + 8) != *(int *)(*(long *)(bfd_handler + 8) + 8)) {\n    temp_var7 = temp_var7 & *(uint *)(*(long *)(param_flags + 8) + 0x18) &\n             *(uint *)(*(long *)(bfd_handler + 8) + 0x18);\n  }\n  for (; rename_list_ptr != (char **)0x0; rename_list_ptr = (char **)rename_list_ptr[3]) {\n    temp_var3 = strcmp(*rename_list_ptr,output_section);\n    if (temp_var3 == 0) {\n      if (*(uint *)(rename_list_ptr + 2) != 0xffffffff) {\n        temp_var7 = *(uint *)(rename_list_ptr + 2);\n      }\n      if (output_section != rename_list_ptr[1]) {\n        output_section_name = rename_list_ptr[1];\n        temp_var7 = check_new_section_flags(temp_var7,bfd_handler);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (output_section = prefix_alloc_sections_string, (*(byte *)((long)param_strings + 0x24) & 1) != 0)) ||\n     (output_section = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    strlen_var1 = strlen(output_section);\n    strlen_var2 = strlen(output_section_name);\n    temp_var6 = (char *)xmalloc(strlen_var1 + 1 + strlen_var2);\n    output_section = strcpy(temp_var6,output_section);\n    output_section_name = strcat(output_section,output_section_name);\n  }\n  section_list_var = find_section_list(*param_strings,0,0x80);\n  temp_var8 = false;\n  if (section_list_var == 0) {\n    if ((strip_symbols == 4) && ((temp_var7 & 0x2000001) != 0)) {\n      temp_var3 = *(int *)(*(long *)(param_flags + 8) + 8);\n      if (temp_var3 == 5) {\n        if (*(int *)(param_strings[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(bfd_handler + 8) + 8) == 5) {\n            temp_var8 = (temp_var7 & 0x2000000) == 0;\n            temp_var4 = ~((-(uint)((temp_var7 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param_strings + 0x24) = *(uint *)((long)param_strings + 0x24) & temp_var4;\n          }\n          else {\n            temp_var4 = 0xfdfffefd;\n          }\n          temp_var7 = temp_var7 & temp_var4;\n        }\n      }\n      else if ((temp_var3 != 2) || (temp_var3 = strcmp(*param_strings,\".buildid\"), temp_var3 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    temp_var7 = check_new_section_flags(temp_var7 & 0x104 | *(uint *)(section_list_var + 0x28),bfd_handler,*param_strings);\n  }\n  conversion_result = bfd_convert_section_setup(param_flags,param_strings,bfd_handler,&output_section_name,size_temp_buffer);\n  if (conversion_result == '\\0') {\n    output_section = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  output_section = (char *)bfd_make_section_anyway_with_flags(bfd_handler,output_section_name,temp_var7);\n  if (output_section == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      size_temp_buffer[0] = 0;\n      goto LAB_001158e7;\n    }\n    conversion_result = bfd_set_section_size(output_section,size_temp_buffer[0]);\n    if (conversion_result == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    size_temp_buffer[0] = ((((long)interleave - 1U) + size_temp_buffer[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    conversion_result = bfd_set_section_size(output_section);\n    if (conversion_result == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  error_message = 0;\n  temp_var6 = param_strings[6];\n  section_list_var = find_section_list(*param_strings,0,0x18);\n  if (section_list_var == 0) {\n    output_section[0x28] = output_section[0x28] | 1;\n    temp_var5 = *param_strings;\n    temp_var6 = temp_var6 + change_section_address;\n    *(char **)(output_section + 0x30) = temp_var6;\n    *(char **)(output_section + 0x38) = temp_var6;\n    temp_var6 = param_strings[7];\n    section_list_var = find_section_list(temp_var5,0,0x60);\n    if (section_list_var == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_var5 = *(char **)(section_list_var + 0x20);\n    if ((*(byte *)(section_list_var + 0x14) & 0x40) != 0) {\n      temp_var5 = temp_var5 + (long)temp_var6;\n    }\n    *(char **)(output_section + 0x38) = temp_var5;\n    section_list_var = find_section_list(*param_strings,0,0x200);\n    if (section_list_var != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp_var7 = *(uint *)((long)param_strings + 0x7c);\n    if (temp_var7 < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(output_section + 0xb4) = *(undefined4 *)((long)param_strings + 0xb4);\n    output_section[0x28] = output_section[0x28] & 0xcfU | *(byte *)(param_strings + 5) & 0x30;\n    param_strings[0xc] = output_section;\n    param_strings[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_strings + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    conversion_result = (**(code **)(*(long *)(bfd_handler + 8) + 0x158))(param_flags,param_strings,bfd_handler,output_section);\n    if (conversion_result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    temp_var5 = *(char **)(section_list_var + 0x18);\n    if ((*(byte *)(section_list_var + 0x14) & 8) == 0) {\n      temp_var5 = temp_var5 + (long)temp_var6;\n    }\n    output_section[0x28] = output_section[0x28] | 1;\n    temp_var2 = *param_strings;\n    *(char **)(output_section + 0x30) = temp_var5;\n    *(char **)(output_section + 0x38) = temp_var5;\n    temp_var6 = param_strings[7];\n    section_list_var = find_section_list(temp_var2,0,0x60);\n    if (section_list_var != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_var5 = *param_strings;\n    *(char **)(output_section + 0x38) = temp_var6 + change_section_address;\n    section_list_var = find_section_list(temp_var5,0,0x200);\n    if (section_list_var == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp_var7 = *(uint *)(section_list_var + 0x2c);\n    if (0x3e < temp_var7) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(output_section + 0x7c) = temp_var7;\n    *(undefined4 *)(output_section + 0xb4) = *(undefined4 *)((long)param_strings + 0xb4);\n    output_section[0x28] = output_section[0x28] & 0xcfU | *(byte *)(param_strings + 5) & 0x30;\n    param_strings[0xc] = output_section;\n    param_strings[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_strings + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var6 = param_strings[0x1a];\n    section_list_var = group_signature_isra_0(temp_var6,param_strings[0x1c]);\n    if ((section_list_var == 0) ||\n       (temp_var1 = *(long *)(param_flags + 8), *(uint *)(section_list_var + 0x18) = *(uint *)(section_list_var + 0x18) | 0x20,\n       *(int *)(temp_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var6 + 0xb0) = section_list_var;\n    conversion_result = (**(code **)(*(long *)(bfd_handler + 8) + 0x158))(param_flags,param_strings,bfd_handler,output_section);\n    if (conversion_result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (temp_var8) {\n    *(undefined4 *)(*(long *)(output_section + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,bfd_handler,output_section,error_message);\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "setup_section.cold",
                "strlen",
                "strcat",
                "dcgettext",
                "bfd_make_section_anyway_with_flags",
                "strcpy",
                "strcmp",
                "is_strip_section.isra.0",
                "xmalloc",
                "bfd_convert_section_setup",
                "check_new_section_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "input",
                "stab_modify_type": "updateStabType"
            },
            "code": "\nvoid modifyStabType_0010a0bd(long input)\n\n{\n  updateStabType(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_and_parse_type_00113e5e",
                "param_1": "input_string",
                "param_2": "ptr_to_string",
                "param_3": "string_length",
                "cVar1": "startswith_result",
                "local_20": "prev_ptr_to_string"
            },
            "code": "\nundefined8 check_and_parse_type_00113e5e(undefined8 input_string,char **ptr_to_string,long string_length)\n\n{\n  char startswith_result;\n  char *prev_ptr_to_string [2];\n  \n  prev_ptr_to_string[0] = *ptr_to_string;\n  *ptr_to_string = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)prev_ptr_to_string[0] < 5) ||\n      (startswith_result = startswith_lto_priv_0_lto_priv_0(prev_ptr_to_string[0],\"type\"), startswith_result == '\\0')) ||\n     ((prev_ptr_to_string[0][4] != '$' && (prev_ptr_to_string[0][4] != '.')))) {\n    if (*prev_ptr_to_string[0] != '_') {\n      return 1;\n    }\n    if (prev_ptr_to_string[0][1] != '_') {\n      return 1;\n    }\n    if (prev_ptr_to_string[0][2] != 'o') {\n      return 1;\n    }\n    if (prev_ptr_to_string[0][3] != 'p') {\n      return 1;\n    }\n    prev_ptr_to_string[0] = prev_ptr_to_string[0] + 4;\n  }\n  else {\n    prev_ptr_to_string[0] = prev_ptr_to_string[0] + 5;\n  }\n  startswith_result = stab_demangle_type_lto_priv_0(input_string,prev_ptr_to_string,0);\n  if (startswith_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "check_and_parse_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "create_new_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "analyze_input_0010abdd",
                "param_1": "ptr",
                "param_2": "input_string",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "data",
                "param_8": "flag4",
                "lVar1": "ptr_data",
                "pcVar2": "string1",
                "bVar3": "flag",
                "pcVar4": "string2",
                "__s": "string3",
                "sVar5": "size_string1",
                "sVar6": "size_string2",
                "sVar7": "size_input_string",
                "sVar8": "size_string3",
                "uVar9": "result",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "local_flag"
            },
            "code": "\nundefined8\nanalyze_input_0010abdd(long ptr,char *input_string,uint length,char flag1,char flag2,char flag3,\n            undefined8 data,char flag4)\n\n{\n  long ptr_data;\n  char *string1;\n  byte flag;\n  char *string2;\n  char *string3;\n  size_t size_string1;\n  size_t size_string2;\n  size_t size_input_string;\n  size_t size_string3;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_flag;\n  \n  string3 = (char *)0x0;\n  local_flag = *(byte *)(*(long *)(ptr + 0x60) + 0x1c);\n  string2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    flag = 1;\n    if (local_flag == 0) {\n      flag = *(byte *)(*(long *)(ptr + 0x60) + 0x1c);\n    }\n    local_flag = flag & 1;\n    string3 = (char *)stab_pop_type(ptr);\n  }\n  ptr_data = *(long *)(ptr + 0x60);\n  if ((ptr_data == 0) || (string1 = *(char **)(ptr_data + 0x30), string1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    size_string1 = strlen(string1);\n    size_string2 = strlen(string2);\n    size_input_string = strlen(input_string);\n    size_string3 = 0;\n    if (flag4 != '\\0') {\n      size_string3 = strlen(string3);\n    }\n    result = xrealloc(string1,size_input_string + size_string1 + 0x28 + size_string2 + size_string3);\n    *(undefined8 *)(ptr_data + 0x30) = result;\n    string1 = *(char **)(*(long *)(ptr + 0x60) + 0x30);\n    size_string1 = strlen(string1);\n    sprintf(string1 + size_string1,\"%s:%s;%c%c%c\",string2,input_string,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,size_string1);\n    free(string2);\n    if (flag4 != '\\0') {\n      string2 = *(char **)(*(long *)(ptr + 0x60) + 0x30);\n      size_string1 = strlen(string2);\n      sprintf(string2 + size_string1,\"%ld;%s;\",data,string3);\n      free(string3);\n    }\n    if (local_flag != 0) {\n      *(undefined *)(*(long *)(ptr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "analyze_input_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flag",
                "param_2": "parameters",
                "param_3": "outputFormat",
                "uVar1": "value1",
                "uVar2": "errorMessage"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint flag,undefined8 *parameters,undefined8 outputFormat)\n\n{\n  undefined8 value1;\n  undefined8 errorMessage;\n  \n  if (((flag & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    value1 = *parameters;\n    flag = flag & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(errorMessage,value1,outputFormat);\n  }\n  return flag;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "setup_section"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "pointerToNestedArray",
                "piVar2": "currentNestedArray"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *pointerToNestedArray;\n  int *currentNestedArray;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    pointerToNestedArray = (undefined8 *)(inputArray + 4);\n    currentNestedArray = **(int ***)(undefined8 *)*pointerToNestedArray;\n  } while ((inputArray != currentNestedArray) && (inputArray = currentNestedArray, currentNestedArray != (int *)0x0));\n  return ((undefined8 *)*pointerToNestedArray)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_check_dwo_section_001082b3",
                "uVar1": "section_result"
            },
            "code": "\nuint invert_and_check_dwo_section_001082b3(void)\n\n{\n  uint section_result;\n  \n  section_result = is_dwo_section_constprop_0();\n  return section_result ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_check_dwo_section_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_object_00114690",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "fileDescriptor",
                "param_4": "statStruct",
                "param_5": "target",
                "param_6": "fileSize",
                "param_7": "flags",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerPointerChar1",
                "pvVar7": "pointerVoid1",
                "lVar8": "longVar6",
                "puVar9": "pointerUndefined8_1",
                "piVar10": "pointerInt1",
                "uVar11": "undefined8Var1",
                "uVar12": "undefined8Var2",
                "lVar13": "longVar4",
                "puVar14": "pointerUndefined8_6",
                "pcVar15": "sourceTempDir",
                "ppcVar16": "pointerPointerChar2",
                "pcVar17": "sourceTempDir",
                "pcVar18": "concatenatedPath",
                "pcVar19": "pointerChar1",
                "pcVar20": "pointerCode1",
                "lVar21": "longVar5",
                "uVar22": "uintVar1",
                "pcVar23": "pointerChar2",
                "psVar24": "pointerStat1",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "localPointerUndefined8",
                "local_198": "localPointerLong",
                "local_158": "localStat",
                "local_c8": "localPointerVoid3",
                "uStack_b0": "uintStackVar1",
                "lStack_98": "longStackVar1"
            },
            "code": "\nvoid copyObject_00114690(undefined8 sourceFilePath,undefined8 destinationFilePath,int fileDescriptor,undefined8 statStruct,\n                 undefined8 target,long fileSize,undefined8 flags)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **pointerPointerChar1;\n  void *pointerVoid1;\n  long longVar6;\n  undefined8 *pointerUndefined8_1;\n  int *pointerInt1;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  long longVar4;\n  undefined8 *pointerUndefined8_6;\n  char *sourceTempDir;\n  char **pointerPointerChar2;\n  char *sourceTempDir;\n  char *concatenatedPath;\n  undefined8 *__ptr;\n  char **ppointerChar1;\n  code *pointerCode1;\n  long longVar5;\n  uint uintVar1;\n  char *pointerChar2;\n  stat *pointerStat1;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *localPointerUndefined8;\n  long *localPointerLong;\n  stat localStat;\n  void *localPointerVoid3 [3];\n  uint uintStackVar1;\n  long longStackVar1;\n  \n  byteVar2 = 0;\n  longVar4 = get_file_size();\n  if (longVar4 < 1) {\n    if (longVar4 == 0) {\n      undefined8Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(undefined8Var2,sourceFilePath);\n    }\n    status = 1;\n    return;\n  }\n  pointerUndefined8_6 = (undefined8 *)bfd_openr(sourceFilePath,target);\n  if ((pointerUndefined8_6 == (undefined8 *)0x0) || (intVar2 = bfd_stat(pointerUndefined8_6,statStruct), intVar2 != 0)) {\n    bfd_nonfatal_message(sourceFilePath,0,0,0);\n    status = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerUndefined8_6 + 0x44) = *(uint *)((long)pointerUndefined8_6 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerUndefined8_6 + 0x44) = *(uint *)((long)pointerUndefined8_6 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerUndefined8_6 + 0x44) = *(uint *)((long)pointerUndefined8_6 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerUndefined8_6 + 0x44) = *(uint *)((long)pointerUndefined8_6 + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)pointerUndefined8_6 + 0x44) = *(uint *)((long)pointerUndefined8_6 + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)pointerUndefined8_6 + 0x44) = *(uint *)((long)pointerUndefined8_6 + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(pointerUndefined8_6,2);\n  if (charVar1 != '\\0') {\n    if (fileSize == 0) {\n      charVar1 = '\\0';\n      fileSize = *(long *)pointerUndefined8_6[1];\n    }\n    if (fileDescriptor < 0) {\n      localPointerUndefined8 = (undefined8 *)bfd_openw(destinationFilePath,fileSize);\n    }\n    else {\n      localPointerUndefined8 = (undefined8 *)bfd_fdopenw(destinationFilePath,fileSize,fileDescriptor);\n    }\n    if (localPointerUndefined8 != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        undefined8Var2 = *pointerUndefined8_6;\n        undefined8Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(undefined8Var1,undefined8Var2);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(localPointerUndefined8,pointerUndefined8_6,long_section_names);\n      localPointerLong = localPointerUndefined8 + 0x1f;\n      if ((*(byte *)((long)pointerUndefined8_6 + 0x49) & 0x10) != 0) {\n        status = 1;\n        bfd_set_error(5);\n        undefined8Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,pointerUndefined8_6,0,undefined8Var2);\n        return;\n      }\n      sourceTempDir = (char *)make_tempdir(*localPointerUndefined8);\n      if (sourceTempDir == (char *)0x0) {\n        pointerInt1 = __errno_location();\n        sourceTempDir = strerror(*pointerInt1);\n        undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(undefined8Var2,sourceTempDir);\n      }\n      if (strip_symbols == 7) {\n        byteVar1 = *(byte *)((long)pointerUndefined8_6 + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerUndefined8_6 + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = deterministic != 0;\n      *(byte *)((long)localPointerUndefined8 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)localPointerUndefined8 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)localPointerUndefined8 + 0x44) = *(uint *)((long)localPointerUndefined8 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      pointerPointerChar2 = (char **)bfd_openr_next_archived_file(pointerUndefined8_6,0);\n      charVar2 = bfd_set_format(localPointerUndefined8,*(byte *)(pointerUndefined8_6 + 9) & 7);\n      if (charVar2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(0,localPointerUndefined8,0,0);\n        remove_directory_and_free_memory_00114b84();\n        return;\n      }\n      while ((status == 0 && (pointerPointerChar2 != (char **)0x0))) {\n        concatenatedPath = *pointerPointerChar2;\n        sourceTempDir = concatenatedPath;\n        if (*concatenatedPath == '/') {\nLAB_0010527d:\n          undefined8Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(undefined8Var2,concatenatedPath);\nLAB_00104e93:\n          status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*sourceTempDir != '\\0') {\n          pointerChar2 = sourceTempDir;\n          if ((*sourceTempDir == '.') && (pointerChar2 = sourceTempDir + 1, sourceTempDir[1] == '.')) {\n            pointerChar2 = sourceTempDir + 2;\n            if ((sourceTempDir[2] == '\\0') || (sourceTempDir[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerChar2 != '\\0' && (*pointerChar2 != '/')); pointerChar2 = pointerChar2 + 1) {\n          }\n          sourceTempDir = pointerChar2;\n          if (*pointerChar2 == '/') {\n            extract_and_copy_archive_001052a2();\n            return;\n          }\n        }\n        concatenatedPath = (char *)concat(sourceTempDir,&DAT_0011b47d);\n        intVar2 = stat(concatenatedPath,&localStat);\n        pointerUndefined8_1 = __ptr;\n        if (-1 < intVar2) {\n          longVar4 = make_tempdir(concatenatedPath);\n          free(concatenatedPath);\n          if (longVar4 == 0) {\n            pointerInt1 = __errno_location();\n            concatenatedPath = strerror(*pointerInt1);\n            undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(undefined8Var2,concatenatedPath);\n            goto LAB_00104e93;\n          }\n          pointerUndefined8_1 = (undefined8 *)xmalloc(0x18);\n          concatenatedPath = *pointerPointerChar2;\n          *pointerUndefined8_1 = __ptr;\n          pointerUndefined8_1[2] = 0;\n          pointerUndefined8_1[1] = longVar4;\n          concatenatedPath = (char *)concat(longVar4,&DAT_0011b47d,concatenatedPath);\n        }\n        intVar2 = 0;\n        if (preserve_dates != '\\0') {\n          pointerStat1 = &localStat;\n          for (longVar4 = 0x24; longVar4 != 0; longVar4 = longVar4 + -1) {\n            *(undefined4 *)&pointerStat1->st_dev = 0;\n            pointerStat1 = (stat *)((long)pointerStat1 + (ulong)byteVar2 * -8 + 4);\n          }\n          ppointerChar1 = (char **)pointerPointerChar2[0x1d];\n          if ((char **)pointerPointerChar2[0x1d] == (char **)0x0) {\n            ppointerChar1 = pointerPointerChar2;\n          }\n          intVar2 = (**(code **)(ppointerChar1[1] + 0x1e8))(pointerPointerChar2,&localStat);\n          if (intVar2 != 0) {\n            sourceTempDir = *pointerPointerChar2;\n            undefined8Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(undefined8Var2,sourceTempDir);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = concatenatedPath;\n        *__ptr = pointerUndefined8_1;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(pointerPointerChar2,1);\n        if (charVar2 == '\\0') {\n          undefined8Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,pointerPointerChar2,0,undefined8Var2);\n          ppointerChar1 = (char **)bfd_openw(concatenatedPath,fileSize);\n          if (ppointerChar1 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(concatenatedPath,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerPointerChar1 = (char **)pointerPointerChar2[0x1d];\n          if ((char **)pointerPointerChar2[0x1d] == (char **)0x0) {\n            pointerPointerChar1 = pointerPointerChar2;\n          }\n          intVar1 = (**(code **)(pointerPointerChar1[1] + 0x1e8))(pointerPointerChar2);\n          longVar4 = longStackVar1;\n          if (intVar1 == 0) {\n            if (longStackVar1 < 0) {\n              bfd_get_archive_filename(pointerPointerChar2);\n              undefined8Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(undefined8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(pointerPointerChar2,0,0);\n              if (intVar1 == 0) {\n                if (verbose != '\\0') {\n                  sourceTempDir = *ppointerChar1;\n                  undefined8Var2 = bfd_get_archive_filename(pointerPointerChar2);\n                  pointerChar2 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerChar2,undefined8Var2,sourceTempDir);\n                }\n                pointerVoid1 = (void *)xmalloc(0x2000);\n                for (; longVar4 != 0; longVar4 = longVar4 - longVar5) {\n                  longVar5 = 0x2000;\n                  if (longVar4 < 0x2001) {\n                    longVar5 = longVar4;\n                  }\n                  longVar6 = bfd_bread(pointerVoid1,longVar5,pointerPointerChar2);\n                  pointerPointerChar1 = pointerPointerChar2;\n                  if ((longVar5 != longVar6) ||\n                     (longVar6 = bfd_bwrite(pointerVoid1,longVar5,ppointerChar1), pointerPointerChar1 = ppointerChar1,\n                     longVar5 != longVar6)) {\n                    bfd_nonfatal_message(0,pointerPointerChar1,0,0);\n                    free(pointerVoid1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppointerChar1,uintStackVar1 | 0x100);\n                free(pointerVoid1);\n                charVar2 = bfd_close_all_done(ppointerChar1);\n                if (charVar2 == '\\0') {\n                  bfd_nonfatal_message(concatenatedPath,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8Var2 = bfd_get_archive_filename(pointerPointerChar2);\n              bfd_nonfatal(undefined8Var2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,pointerPointerChar2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(ppointerChar1);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(concatenatedPath,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(concatenatedPath);\n          status = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            ppointerChar1 = (char **)bfd_openw(concatenatedPath,*(undefined8 *)pointerPointerChar2[1]);\n          }\n          else {\n            ppointerChar1 = (char **)bfd_openw(concatenatedPath,fileSize);\n          }\n          if (ppointerChar1 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = copy_object(pointerPointerChar2,ppointerChar1,flags);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(pointerPointerChar2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(ppointerChar1);\n            if (charVar2 == '\\0') {\n              bfd_nonfatal_message(concatenatedPath,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(ppointerChar1);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(concatenatedPath,0,0,0);\n            status = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (intVar2 == 0)) {\n            set_times(concatenatedPath,&localStat);\n          }\n          longVar4 = bfd_openr(concatenatedPath,fileSize);\n          __ptr[2] = longVar4;\n          *localPointerLong = longVar4;\n          localPointerLong = (long *)(longVar4 + 0xf0);\n          ppointerChar1 = (char **)bfd_openr_next_archived_file(pointerUndefined8_6);\n          bfd_close(pointerPointerChar2);\n          pointerPointerChar2 = ppointerChar1;\n        }\n      }\n      *localPointerLong = 0;\n      pointerVoid1 = (void *)xstrdup(*localPointerUndefined8);\n      if (status == 0) {\n        pointerCode1 = bfd_close;\n      }\n      else {\n        pointerCode1 = bfd_close_all_done;\n      }\n      charVar1 = (*pointerCode1)(localPointerUndefined8);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerVoid1,0,0,0);\n      }\n      free(pointerVoid1);\n      pointerVoid1 = (void *)xstrdup(*pointerUndefined8_6);\n      charVar1 = bfd_close(pointerUndefined8_6);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerVoid1,0,0,0);\n      }\n      free(pointerVoid1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointerUndefined8_6 = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointerUndefined8_6;\n      }\n      rmdir(sourceTempDir);\n      free(sourceTempDir);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfd_nonfatal_message(destinationFilePath,0,0,0);\n    status = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(pointerUndefined8_6,1,localPointerVoid3);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(pointerUndefined8_6,3,&localStat);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      bfd_nonfatal_message(sourceFilePath,0,0,0);\n      if (intVar2 == 0xd) {\n        list_matching_formats(localPointerVoid3[0]);\n      }\n      if (intVar1 != 0xd) {\n        status = 1;\n        return;\n      }\n      list_matching_formats(localStat.st_dev);\n      status = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(localPointerVoid3[0]);\n    }\n  }\n  if (fileSize == 0) {\n    fileSize = *(long *)pointerUndefined8_6[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar4 = bfd_openw(destinationFilePath,fileSize);\n  }\n  else {\n    longVar4 = bfd_fdopenw(destinationFilePath,fileSize,fileDescriptor);\n  }\n  if (longVar4 == 0) goto LAB_00105231;\n  set_long_section_mode(longVar4,pointerUndefined8_6,long_section_names);\n  charVar1 = copy_object(pointerUndefined8_6,longVar4,flags);\n  if (charVar1 == '\\0') {\n    status = 1;\n  }\n  else if (status == 0) {\n    charVar1 = bfd_close(longVar4);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(longVar4);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    status = 1;\n    bfd_nonfatal_message(destinationFilePath,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(pointerUndefined8_6);\n  if (charVar1 == '\\0') {\n    status = 1;\n    bfd_nonfatal_message(sourceFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "set_long_section_mode",
                "get_file_size",
                "bfd_openw",
                "bfd_set_error",
                "non_fatal",
                "bfd_close",
                "copy_object",
                "bfd_set_format",
                "list_matching_formats",
                "bfd_openr",
                "free",
                "strerror",
                "make_tempdir",
                "dcgettext",
                "fatal",
                "copy_file.cold",
                "bfd_fdopenw",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_check_format_matches",
                "bfd_get_error",
                "close",
                "bfd_stat",
                "bfd_check_format",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_object_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointerToValue",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "tempValue",
                "lVar5": "bitwiseValue",
                "local_8c": "formatString",
                "auStack_8a": "arrayStack"
            },
            "code": "\nundefined8 processIntType_0010b800(long baseAddress,int size,char flag)\n\n{\n  long *pointerToValue;\n  undefined8 result;\n  size_t stringLength;\n  long tempValue;\n  long bitwiseValue;\n  undefined2 formatString;\n  undefined4 arrayStack [24];\n  \n  if (size - 1U < 8) {\n    tempValue = baseAddress + 0xb8;\n    if (flag != '\\0') {\n      tempValue = baseAddress + 0x78;\n    }\n    pointerToValue = (long *)(tempValue + (ulong)(size - 1U) * 8);\n    tempValue = *pointerToValue;\n    if (tempValue != 0) {\n      result = stab_push_defined_type(baseAddress,tempValue,size);\n      return result;\n    }\n    tempValue = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempValue + 1;\n    *pointerToValue = tempValue;\n    sprintf((char *)&formatString,\"%ld=r%ld;\",tempValue,tempValue);\n    if (flag == '\\0') {\n      bitwiseValue = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&formatString);\n      sprintf((char *)((long)&formatString + stringLength),\"%ld;%ld;\",-bitwiseValue,bitwiseValue + -1);\n    }\n    else {\n      stringLength = strlen((char *)&formatString);\n      *(undefined2 *)((long)&formatString + stringLength) = 0x3b30;\n      *(undefined *)((long)&formatString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formatString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formatString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(baseAddress,&formatString,tempValue,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "strlen",
                "stab_push_string",
                "sprintf",
                "dcgettext",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "stab_float_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "parse_input_00109ed3",
                "param_1": "inputAddr",
                "param_2": "charVal",
                "param_3": "paramVal",
                "param_4": "array",
                "param_5": "arraySize",
                "uVar1": "inputSize",
                "uVar2": "newSize",
                "cVar3": "pushResult",
                "pcVar4": "inputString",
                "sVar5": "inputLength",
                "__s": "outputString",
                "lVar6": "index",
                "__ptr": "popResult",
                "uVar7": "returnVal",
                "uVar8": "isDefined",
                "lVar9": "loopIndex",
                "uVar10": "currentSize",
                "puVar11": "ptr",
                "bVar12": "byteZero"
            },
            "code": "\nundefined8 parseInput_00109ed3(long inputAddr,uint charVal,undefined4 paramVal,long *array,ulong *arraySize)\n\n{\n  ulong inputSize;\n  ulong newSize;\n  char pushResult;\n  char *inputString;\n  size_t inputLength;\n  char *outputString;\n  long index;\n  void *popResult;\n  undefined8 returnVal;\n  undefined isDefined;\n  long loopIndex;\n  ulong currentSize;\n  undefined *ptr;\n  byte byteZero;\n  \n  byteZero = 0;\n  index = *(long *)(inputAddr + 0x60);\n  if (index != 0) {\n    inputSize = *(ulong *)(index + 0x10);\n    if (((long)inputSize < 1) || (array == (long *)0x0)) {\n      isDefined = *(undefined *)(index + 0x1c);\n      inputString = (char *)stab_pop_type(inputAddr);\n      inputLength = strlen(inputString);\n      outputString = (char *)xmalloc(inputLength + 2);\n      sprintf(outputString,\"%c%s\",(ulong)charVal,inputString);\n      free(inputString);\n      index = 0;\n    }\n    else {\n      currentSize = *arraySize;\n      if (currentSize <= inputSize) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= inputSize; currentSize = currentSize * 2) {\n        }\n        index = xrealloc(*array,currentSize * 8);\n        newSize = *arraySize;\n        *array = index;\n        ptr = (undefined *)(index + newSize * 8);\n        for (loopIndex = (currentSize - newSize) * 8; loopIndex != 0; loopIndex = loopIndex + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)byteZero * -2 + 1;\n        }\n        *arraySize = currentSize;\n      }\n      index = *(long *)(*array + inputSize * 8);\n      if ((index != 0) && (*(char *)(*(long *)(inputAddr + 0x60) + 0x1c) == '\\0')) {\n        popResult = (void *)stab_pop_type(inputAddr);\n        free(popResult);\n        returnVal = stab_push_defined_type(inputAddr,index,paramVal);\n        return returnVal;\n      }\n      index = *(long *)(inputAddr + 0x68);\n      *(long *)(inputAddr + 0x68) = index + 1;\n      inputString = (char *)stab_pop_type(inputAddr);\n      inputLength = strlen(inputString);\n      outputString = (char *)xmalloc(inputLength + 0x14);\n      sprintf(outputString,\"%ld=%c%s\",index,(ulong)charVal,inputString);\n      free(inputString);\n      isDefined = 1;\n      *(long *)(*array + inputSize * 8) = index;\n    }\n    pushResult = stab_push_string(inputAddr,outputString,index,isDefined,paramVal);\n    if (pushResult != '\\0') {\n      free(outputString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_const_type.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_input_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "counter",
                "puVar5": "ptr4",
                "pcVar6": "defaultFilename",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long counter;\n  undefined4 *ptr4;\n  char *defaultFilename;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (counter = 6; counter != 0; counter = counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = defaultFilename;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (counter = 6; counter != 0; counter = counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUNC_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "dcgettext",
                "bfd_set_format",
                "bfd_get_archive_filename",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_valid_value_00115d00",
                "param_1": "inputValue",
                "param_2": "binaryData",
                "uVar1": "tempVar1",
                "lVar2": "result",
                "isympp": "firstValidValue"
            },
            "code": "\nlong findValidValue_00115d00(long inputValue,long binaryData)\n\n{\n  uint tempVar1;\n  long result;\n  \n  result = firstValidValue;\n  if (firstValidValue != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputValue + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        tempVar1 = *(uint *)(inputValue + 0x2c);\n        if (tempVar1 == 0) {\n          result = 0;\n        }\n        else if ((ulong)tempVar1 <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(firstValidValue + (ulong)(tempVar1 - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "find_valid_value_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "lVar1": "dataStructurePtr",
                "plVar2": "dataPtr",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ninitializeDataStructure_00113c43(long input1,long input2,long input3,long input4,undefined input5,\n            undefined8 input6)\n\n{\n  long dataStructurePtr;\n  long *dataPtr;\n  undefined returnValue [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    dataStructurePtr = debug_make_type_constprop_0(0x10,0);\n    if (dataStructurePtr != 0) {\n      dataPtr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)dataPtr + 0x21) = 0;\n      *dataPtr = input1;\n      *(undefined4 *)((long)dataPtr + 0x24) = 0;\n      dataPtr[1] = input2;\n      dataPtr[2] = input3;\n      dataPtr[3] = input4;\n      *(undefined *)(dataPtr + 4) = input5;\n      *(long **)(dataStructurePtr + 0x10) = dataPtr;\n      goto LAB_00113caa;\n    }\n  }\n  dataStructurePtr = 0;\nLAB_00113caa:\n  returnValue._8_8_ = input6;\n  returnValue._0_8_ = dataStructurePtr;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "get_file_size.cold",
                "FUN_00107880",
                "smart_rename.cold",
                "main",
                "section_add_load_file.cold",
                "set_times.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "uVar1": "result",
                "lVar2": "type",
                "plVar3": "slotPointer"
            },
            "code": "\nbool recordDebugInfo_00112a33(undefined8 arg1,long arg2,undefined8 arg3,byte arg4,undefined8 arg5\n                 ,undefined8 arg6,uint arg7)\n\n{\n  undefined result;\n  long type;\n  long *slotPointer;\n  \n  if (arg4 < 0x12) {\n    if (arg4 != 0) {\n      switch(arg4) {\n      case 1:\n        result = debug_record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,4,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,(arg7 & 0xff) + 2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = debug_record_variable\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,5,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,1,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type = debug_tag_type(arg5,*(undefined8 *)(arg2 + 8));\n        if (type == 0) {\n          return false;\n        }\n        slotPointer = (long *)coff_get_slot_lto_priv_0(arg1,arg3);\n        *slotPointer = type;\n        break;\n      case 0xd:\n        type = debug_name_type(arg5,*(undefined8 *)(arg2 + 8));\n        return type != 0;\n      case 0x11:\n        result = debug_record_parameter\n                          (arg5,*(undefined8 *)(arg2 + 8),arg6,2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (arg4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable\n                      (arg5,*(undefined8 *)(arg2 + 8),arg6,1,\n                       *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_record_parameter",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "debug_tag_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "extract_xcoff_type_0010c2d2",
                "param_1": "symbolTable",
                "param_2": "baseAddress",
                "param_3": "typeInfo",
                "uVar1": "typeCode",
                "pcVar2": "typeDescription",
                "uVar3": "debugType",
                "lVar4": "typeAddress",
                "plVar5": "symbolSlot",
                "uVar6": "negTypeCode"
            },
            "code": "\n\n\nlong extractXCOFFType_0010c2d2(undefined8 symbolTable,long baseAddress,int *typeInfo)\n\n{\n  uint typeCode;\n  char *typeDescription;\n  undefined8 debugType;\n  long typeAddress;\n  long *symbolSlot;\n  uint negTypeCode;\n  \n  if ((*typeInfo == 0) && (typeCode = typeInfo[1], (int)typeCode < 0)) {\n    negTypeCode = ~typeCode;\n    if (negTypeCode < 0x22) {\n      typeAddress = *(long *)(baseAddress + 0x90 + (ulong)negTypeCode * 8);\n      if (typeAddress == 0) {\n        switch(negTypeCode) {\n        case 1:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeDescription = \"char\";\n          break;\n        case 2:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeDescription = \"short\";\n          break;\n        case 3:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeDescription = \"long\";\n          break;\n        case 4:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeDescription = \"unsigned char\";\n          break;\n        case 5:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeDescription = \"signed char\";\n          break;\n        case 6:\n          debugType = debug_make_int_type_isra_0(2,1);\n          typeDescription = \"unsigned short\";\n          break;\n        case 7:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeDescription = \"unsigned int\";\n          break;\n        case 8:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeDescription = \"unsigned\";\n          break;\n        case 9:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeDescription = \"unsigned long\";\n          break;\n        case 10:\n          debugType = debug_make_void_type_isra_0();\n          typeDescription = \"void\";\n          break;\n        case 0xb:\n          debugType = debug_make_float_type_isra_0(4);\n          typeDescription = \"float\";\n          break;\n        case 0xc:\n          debugType = debug_make_float_type_isra_0(8);\n          typeDescription = \"double\";\n          break;\n        case 0xd:\n          debugType = debug_make_float_type_isra_0(8);\n          typeDescription = \"long double\";\n          break;\n        case 0xe:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeDescription = \"integer\";\n          break;\n        case 0xf:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeDescription = \"boolean\";\n          break;\n        case 0x10:\n          debugType = debug_make_float_type_isra_0(4);\n          typeDescription = \"short real\";\n          break;\n        case 0x11:\n          debugType = debug_make_float_type_isra_0(8);\n          typeDescription = \"real\";\n          break;\n        case 0x12:\n          typeDescription = \"stringptr\";\n          debugType = 0;\n          break;\n        case 0x13:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeDescription = \"character\";\n          break;\n        case 0x14:\n          debugType = debug_make_type_constprop_0(6,1);\n          typeDescription = \"logical*1\";\n          break;\n        case 0x15:\n          debugType = debug_make_type_constprop_0(6,2);\n          typeDescription = \"logical*2\";\n          break;\n        case 0x16:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeDescription = \"logical*4\";\n          break;\n        case 0x17:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeDescription = \"logical\";\n          break;\n        case 0x18:\n          debugType = debug_make_type_constprop_0(5,8);\n          typeDescription = \"complex\";\n          break;\n        case 0x19:\n          debugType = debug_make_type_constprop_0(5,0x10);\n          typeDescription = \"double complex\";\n          break;\n        case 0x1a:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeDescription = \"integer*1\";\n          break;\n        case 0x1b:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeDescription = \"integer*2\";\n          break;\n        case 0x1c:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeDescription = \"integer*4\";\n          break;\n        case 0x1d:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeDescription = \"wchar\";\n          break;\n        case 0x1e:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeDescription = \"long long\";\n          break;\n        case 0x1f:\n          debugType = debug_make_int_type_isra_0(8,1);\n          typeDescription = \"unsigned long long\";\n          break;\n        case 0x20:\n          debugType = debug_make_type_constprop_0(6,8);\n          typeDescription = \"logical*8\";\n          break;\n        case 0x21:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeDescription = \"integer*8\";\n          break;\n        default:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeDescription = \"int\";\n        }\n        typeAddress = debug_name_type(symbolTable,typeDescription,debugType);\n        *(long *)(baseAddress + 0x90 + (ulong)negTypeCode * 8) = typeAddress;\n        return typeAddress;\n      }\n      return typeAddress;\n    }\n    typeDescription = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeDescription,(ulong)typeCode);\n  }\n  else {\n    symbolSlot = (long *)stab_find_slot(baseAddress);\n    if (symbolSlot != (long *)0x0) {\n      if (*symbolSlot == 0) {\n        typeAddress = debug_make_indirect_type_isra_0(symbolSlot,0);\n        return typeAddress;\n      }\n      return *symbolSlot;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "dcgettext",
                "debug_name_type",
                "stab_find_slot",
                "debug_make_float_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_xcoff_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "param_2": "symbol_table",
                "param_5": "coff_header",
                "lVar1": "symbol_table_len",
                "lVar2": "symbol_table_entry",
                "lVar3": "symbol_index",
                "cVar4": "result",
                "uVar5": "bfd_error",
                "__ptr": "parsed_symbols",
                "uVar6": "type",
                "uVar7": "errmsg",
                "puVar8": "symbol_info",
                "pcVar9": "error_msg_format",
                "puVar10": "auxent_buffer",
                "uVar11": "misc_info",
                "lVar12": "parsed_symbols_index",
                "iVar13": "some_value",
                "iVar14": "alloc_size",
                "local_a8": "local_type_1",
                "uStack_a4": "local_type_2",
                "uStack_a0": "local_type_3",
                "uStack_9c": "local_type_4",
                "local_88": "syment_buffer",
                "local_6a": "local_variable_1",
                "local_68": "local_variable_2",
                "local_67": "local_variable_3",
                "local_60": "local_variable_4",
                "local_56": "local_variable_5"
            },
            "code": "\nundefined8\nparse_coff_symbols_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int param_4,long coff_header,\n            undefined8 param_6)\n\n{\n  long symbol_table_len;\n  long symbol_table_entry;\n  long symbol_index;\n  char result;\n  undefined4 bfd_error;\n  void *parsed_symbols;\n  undefined8 type;\n  undefined8 errmsg;\n  undefined4 *symbol_info;\n  char *error_msg_format;\n  undefined *auxent_buffer;\n  uint misc_info;\n  long parsed_symbols_index;\n  int some_value;\n  int alloc_size;\n  undefined4 local_type_1;\n  undefined4 local_type_2;\n  undefined4 local_type_3;\n  undefined4 local_type_4;\n  undefined syment_buffer [30];\n  undefined2 local_variable_1;\n  byte local_variable_2;\n  byte local_variable_3;\n  undefined local_variable_4 [10];\n  ushort local_variable_5;\n  \n  alloc_size = 10;\n  parsed_symbols_index = 0;\n  symbol_table_len = *(long *)(coff_header + 0x18);\n  parsed_symbols = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_table_len && (symbol_table[2] < symbol_table[1]))) {\n    symbol_table_entry = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_table_entry,syment_buffer);\n    if (result == '\\0') {\n      bfd_error = bfd_get_error();\n      type = bfd_errmsg(bfd_error);\n      error_msg_format = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errmsg = dcgettext(0,error_msg_format,5);\n      non_fatal(errmsg,type);\n      free(parsed_symbols);\n      return 0;\n    }\n    symbol_index = symbol_table[3];\n    auxent_buffer = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_index + 1 + (ulong)local_variable_3;\n    if (local_variable_3 != 0) {\n      auxent_buffer = local_variable_4;\n      result = bfd_coff_get_auxent(param_1,symbol_table_entry,0,auxent_buffer);\n      if (result == '\\0') {\n        bfd_error = bfd_get_error();\n        type = bfd_errmsg(bfd_error);\n        error_msg_format = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_variable_2 == 0x12) {\n      misc_info = (uint)local_variable_5;\n      some_value = (int)*(undefined8 *)(symbol_table_entry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_table_entry + 0x20) + 0x30);\n    }\n    else {\n      if (local_variable_2 < 0x13) {\n        if ((local_variable_2 == 8) || (local_variable_2 == 0xb)) {\n          misc_info = 0;\n          some_value = ((int)*(undefined8 *)(symbol_table_entry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_table_entry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_variable_2 == 0x66) break;\n      misc_info = 0;\n      some_value = 0;\n    }\nLAB_0010e214:\n    errmsg = parse_coff_type_lto_priv_0(param_1,symbol_table,param_3,symbol_index,local_variable_1,auxent_buffer,1);\n    type = *(undefined8 *)(symbol_table_entry + 8);\n    symbol_info = (undefined4 *)xmalloc(0x20);\n    local_type_1 = (undefined4)type;\n    local_type_2 = (undefined4)((ulong)type >> 0x20);\n    local_type_3 = (undefined4)errmsg;\n    local_type_4 = (undefined4)((ulong)errmsg >> 0x20);\n    *(undefined8 *)(symbol_info + 5) = 0;\n    symbol_info[6] = some_value;\n    symbol_info[7] = misc_info;\n    symbol_info[4] = 0;\n    *symbol_info = local_type_1;\n    symbol_info[1] = local_type_2;\n    symbol_info[2] = local_type_3;\n    symbol_info[3] = local_type_4;\n    if (alloc_size <= (int)parsed_symbols_index + 1) {\n      alloc_size = alloc_size + 10;\n      parsed_symbols = (void *)xrealloc(parsed_symbols,(long)alloc_size << 3,symbol_info,0,param_6);\n    }\n    *(undefined4 **)((long)parsed_symbols + parsed_symbols_index * 8) = symbol_info;\n    parsed_symbols_index = parsed_symbols_index + 1;\n  }\n  *(undefined8 *)((long)parsed_symbols + (long)(int)parsed_symbols_index * 8) = 0;\n  type = debug_make_struct_type_isra_0(param_4 == 8,*(undefined2 *)(coff_header + 10),parsed_symbols);\n  return type;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "non_fatal",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "dcgettext",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_symbols_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_zero_001082c3",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getZero_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "get_zero_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_lines_00114460",
                "param_1": "filename",
                "param_2": "hash_table",
                "param_3": "file_content",
                "iVar1": "line_count",
                "piVar2": "error",
                "pcVar3": "error_message",
                "uVar4": "translated_message",
                "__n": "file_size",
                "__ptr": "file_buffer",
                "__stream": "file_stream",
                "sVar5": "bytes_read",
                "ppbVar6": "hash_slot",
                "pbVar7": "pointer_7",
                "bVar8": "byte_value",
                "pbVar9": "pointer_9",
                "pbVar10": "current_byte",
                "pbVar11": "new_line_byte",
                "pbVar12": "previous_byte"
            },
            "code": "\nvoid readAndProcessFileLines_00114460(char *filename,undefined8 hash_table,byte **file_content)\n\n{\n  int line_count;\n  int *error;\n  char *error_message;\n  undefined8 translated_message;\n  size_t file_size;\n  byte *file_buffer;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_slot;\n  byte *pointer_7;\n  byte byte_value;\n  byte *pointer_9;\n  byte *current_byte;\n  byte *new_line_byte;\n  byte *previous_byte;\n  \n  file_size = get_file_size();\n  if (file_size == 0) {\n    status = 1;\n  }\n  else {\n    file_buffer = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(filename,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      error = __errno_location();\n      error_message = strerror(*error);\n      translated_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translated_message,filename,error_message);\n    }\n    bytes_read = fread(file_buffer,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_count = ferror(file_stream), line_count != 0)) {\n      translated_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translated_message,filename);\n    }\n    line_count = 1;\n    fclose(file_stream);\n    *(undefined2 *)(file_buffer + file_size) = 10;\n    byte_value = *file_buffer;\n    previous_byte = file_buffer;\n    while (current_byte = previous_byte, byte_value != 0) {\n      for (; byte_value = *current_byte, new_line_byte = current_byte, byte_value != 10; current_byte = current_byte + 1) {\n        if ((char)byte_value < '\\v') {\n          if (byte_value == 0) {\n            pointer_9 = current_byte + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (byte_value == 0xd) {\n            *current_byte = 0;\n            pointer_9 = current_byte + 1;\n            if (current_byte[1] == 10) {\n              pointer_9 = current_byte + 2;\n              new_line_byte = current_byte + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (byte_value == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_byte = 0;\n      if (current_byte[1] == 0xd) {\n        new_line_byte = current_byte + 1;\n        pointer_9 = current_byte + 2;\n      }\n      else {\n        pointer_9 = current_byte + 1;\n      }\nLAB_00114553:\n      byte_value = *previous_byte;\n      while ((byte_value == 0x20 || (current_byte = previous_byte, byte_value == 9))) {\n        current_byte = previous_byte + 1;\n        previous_byte = previous_byte + 1;\n        byte_value = *current_byte;\n      }\n      do {\n        if ((byte_value == 10) || (byte_value == 0xd)) goto LAB_00114676;\n        if (byte_value == 0) goto LAB_00114599;\n        byte_value = current_byte[1];\n        current_byte = current_byte + 1;\n      } while ((byte_value != 0x20) && (byte_value != 9));\n      if ((char)byte_value < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (byte_value & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        byte_value = current_byte[1];\n        if ((((((byte_value == 9) || (byte_value == 0x20)) &&\n              ((byte_value = current_byte[2], byte_value == 9 || (byte_value == 0x20)))) &&\n             ((byte_value = current_byte[3], byte_value == 9 || (byte_value == 0x20)))) &&\n            ((byte_value = current_byte[4], byte_value == 9 || (byte_value == 0x20)))) &&\n           ((byte_value = current_byte[5], byte_value == 9 || (byte_value == 0x20)))) {\n          byte_value = current_byte[6];\n          pointer_7 = current_byte + 6;\n          if ((byte_value == 9) || (byte_value == 0x20)) {\n            do {\n              do {\n                byte_value = pointer_7[1];\n                pointer_7 = pointer_7 + 1;\n              } while (byte_value == 0x20);\n            } while (byte_value == 9);\n          }\n        }\n        if ((0xd < byte_value) || ((-0x2402L >> (byte_value & 0x3f) & 1U) != 0)) {\n          translated_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translated_message,filename,line_count);\n        }\n      }\nLAB_00114599:\n      *current_byte = 0;\n      if (previous_byte < current_byte) {\n        hash_slot = (byte **)htab_find_slot(hash_table,previous_byte,1);\n        *hash_slot = previous_byte;\n      }\n      line_count = line_count + 1;\n      previous_byte = pointer_9;\n      byte_value = new_line_byte[1];\n    }\n    *file_content = file_buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "fread",
                "ferror",
                "dcgettext",
                "fopen",
                "get_file_size",
                "fatal",
                "fclose",
                "xmalloc",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_process_file_lines_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "param_1": "dataStruct",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "__s": "string3",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "flagString",
                "cVar1": "flagValue",
                "lVar2": "dataStructPointer",
                "sVar3": "lengthString1",
                "sVar4": "lengthString2",
                "sVar5": "lengthString3",
                "sVar6": "lengthString4"
            },
            "code": "\nundefined8 generateFormattedString_0010a94e(long dataStruct,char *string1,char *string2,int flag)\n\n{\n  char flagValue;\n  long dataStructPointer;\n  char *string3;\n  size_t lengthString1;\n  size_t lengthString2;\n  size_t lengthString3;\n  size_t lengthString4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flagValue = *(char *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  string3 = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(dataStruct + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    lengthString1 = strlen(formattedString);\n    lengthString2 = strlen(string1);\n    lengthString3 = strlen(string3);\n    lengthString4 = strlen(string2);\n    formattedString = (char *)xmalloc(lengthString1 + 10 + lengthString2 + lengthString3 + lengthString4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(dataStruct + 0x60) + 0x20),string1,flagString,\n            string3,string2,*(long *)(dataStruct + 0x60));\n    free(*(void **)(*(long *)(dataStruct + 0x60) + 0x20));\n    dataStructPointer = *(long *)(dataStruct + 0x60);\n    *(char **)(dataStructPointer + 0x20) = formattedString;\n    if (flagValue != '\\0') {\n      *(undefined *)(dataStructPointer + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)dataStructPointer >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_type_00113b1e",
                "param_1": "input",
                "param_2": "param",
                "param_3": "output",
                "param_4": "other_param",
                "auVar1": "result1",
                "piVar2": "ptr",
                "uVar3": "value",
                "auVar4": "result2"
            },
            "code": "\nundefined  [16] extract_real_type_00113b1e(long input,undefined8 param,ulong output,undefined8 other_param)\n\n{\n  undefined result1 [16];\n  int *ptr;\n  undefined8 value;\n  undefined result2 [16];\n  \n  if (input != 0) {\n    ptr = (int *)debug_get_real_type_isra_0(input,0);\n    if ((ptr == (int *)0x0) || (3 < *ptr - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(ptr + 4);\n    }\n    result2._8_8_ = other_param;\n    result2._0_8_ = value;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = output;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "extract_real_type_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "bfd_get_archive_filename",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "update_stab_string_0010a0e9",
                "param_1": "binary",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "data_offset",
                "uVar2": "result",
                "__s": "type_string",
                "sVar3": "string_length",
                "__s_00": "formatted_string"
            },
            "code": "\nundefined4 update_stab_string_0010a0e9(long binary,undefined8 value1,undefined8 value2)\n\n{\n  undefined data_offset;\n  undefined4 result;\n  char *type_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  data_offset = *(undefined *)(*(long *)(binary + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(binary + 0x60) + 0x18);\n  type_string = (char *)stab_pop_type();\n  string_length = strlen(type_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",type_string,value1,value2);\n  free(type_string);\n  result = stab_push_string(binary,formatted_string,0,data_offset,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_stab_string_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_unused_sections_00114c20",
                "param_1": "binaryAddress",
                "cVar1": "startsWithSection",
                "pcVar2": "sectionAddress",
                "sections_removed": "numSectionsRemoved"
            },
            "code": "\nvoid removeUnusedSections_00114c20(long binaryAddress)\n\n{\n  char startsWithSection;\n  char *sectionAddress;\n  \n  find_section_list(binaryAddress,1,1);\n  startsWithSection = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (startsWithSection != '\\0') {\n    sectionAddress = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      sectionAddress = (char *)(binaryAddress + 4);\n    }\n    if (*sectionAddress != '\\0') {\n      find_section_list(sectionAddress,1,0x100);\n    }\n  }\n  numSectionsRemoved = 1;\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_unused_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_update_sections_00115f50",
                "param_1": "sectionPointer",
                "param_2": "symbolArray",
                "param_3": "isMergeAllowed",
                "__s1": "symbol",
                "uVar1": "strcmpResult",
                "uVar2": "tempVar",
                "extraout_EDX": "extraOutput",
                "plVar3": "updateSectionPointer",
                "auVar4": "checkResult"
            },
            "code": "\nuint checkUpdateSections_00115f50(long sectionPointer,char **symbolArray,char isMergeAllowed)\n\n{\n  char *symbol;\n  uint strcmpResult;\n  undefined4 tempVar;\n  undefined4 extraOutput;\n  long *updateSectionPointer;\n  undefined checkResult [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  checkResult = is_strip_section_isra_0(symbolArray);\n  if (checkResult[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      symbol = *symbolArray;\n      updateSectionPointer = update_sections;\n      do {\n        strcmpResult = strcmp(symbol,(char *)updateSectionPointer[1]);\n        checkResult._4_4_ = 0;\n        checkResult._0_4_ = strcmpResult;\n        checkResult._8_4_ = extraOutput;\n        if (strcmpResult == 0) {\n          return 1;\n        }\n        updateSectionPointer = (long *)*updateSectionPointer;\n      } while (updateSectionPointer != (long *)0x0);\n    }\n    tempVar = checkResult._8_4_;\n    if (((((isMergeAllowed == '\\0') || (merge_notes == '\\0')) ||\n         (checkResult._8_4_ = tempVar, checkResult._0_8_ = *(long *)(sectionPointer + 8),\n         *(int *)(*(long *)(sectionPointer + 8) + 8) != 5)) ||\n        ((checkResult._0_8_ = (ulong)symbolArray[0x1a], *(int *)(symbolArray[0x1a] + 4) != 7 ||\n         (checkResult = startswith_lto_priv_0_lto_priv_0(*symbolArray,\".gnu.build.attributes\"),\n         checkResult[0] == '\\0')))) && ((*(byte *)((long)symbolArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(checkResult._1_7_,symbolArray[8] == (char *)0x0) |\n             CONCAT31(checkResult._9_3_,symbolArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp",
                "is_strip_section.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_section",
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "check_update_sections_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "handle_section_byte_reversal_error_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionByteReversalError_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "handle_section_byte_reversal_error_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_param_0010b948",
                "param_1": "param1",
                "param_2": "param2",
                "lVar1": "localVar1",
                "cVar2": "charVar",
                "__ptr": "ptr",
                "uVar3": "ulongVar",
                "uVar4": "uintVar",
                "local_5a": "localArray"
            },
            "code": "\nvoid processParam_0010b948(long param1,uint param2)\n\n{\n  long localVar1;\n  char charVar;\n  void *ptr;\n  ulong ulongVar;\n  uint uintVar;\n  char localArray [50];\n  \n  uintVar = param2 - 1;\n  ulongVar = (ulong)param2;\n  if ((uintVar < 0x10) && (localVar1 = *(long *)(param1 + 0xf8 + (ulong)uintVar * 8), localVar1 != 0)) {\n    stab_push_defined_type(param1,localVar1,ulongVar);\n    return;\n  }\n  charVar = stab_int_type_lto_priv_0(param1,4,0);\n  if (charVar != '\\0') {\n    ptr = (void *)stab_pop_type(param1);\n    localVar1 = *(long *)(param1 + 0x68);\n    *(long *)(param1 + 0x68) = localVar1 + 1;\n    if (uintVar < 0x10) {\n      *(long *)(param1 + 0xf8 + (ulong)uintVar * 8) = localVar1;\n    }\n    sprintf(localArray,\"%ld=r%s;%u;0;\",localVar1,ptr,ulongVar);\n    free(ptr);\n    stab_push_string(param1,localArray,localVar1,1,ulongVar);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_param_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "input_ptr",
                "param_2": "debug_info_ptr",
                "iVar1": "input_value",
                "__format": "format_str",
                "piVar3": "result_ptr",
                "plVar4": "current_ptr",
                "bVar5": "is_circular",
                "local_18": "local_debug_info_ptr",
                "local_10": "local_input_ptr",
                "uVar2": "type_name"
            },
            "code": "\n\n\nint * get_real_type_00112b6e(int *input_ptr,long *debug_info_ptr)\n\n{\n  int input_value;\n  undefined8 type_name;\n  char *format_str;\n  int *result_ptr;\n  long *current_ptr;\n  bool is_circular;\n  long *local_debug_info_ptr;\n  int *local_input_ptr;\n  \n  input_value = *input_ptr;\n  if ((input_value != 1) && (1 < input_value - 0x16U)) {\n    return input_ptr;\n  }\n  current_ptr = debug_info_ptr;\n  while (current_ptr != (long *)0x0) {\n    if ((input_ptr == (int *)current_ptr[1]) ||\n       (is_circular = current_ptr == (long *)*current_ptr, current_ptr = (long *)*current_ptr, is_circular)) {\n      type_name = debug_get_type_name_constprop_0\n                        (input_ptr,\"debug_get_real_type_00112b6e: circular debug information for %s\\n\");\n      format_str = (char *)dcgettext(0);\n      fprintf(_stderr,format_str,type_name);\n      return (int *)0x0;\n    }\n  }\n  local_debug_info_ptr = debug_info_ptr;\n  local_input_ptr = input_ptr;\n  if (input_value - 0x16U < 2) {\n    result_ptr = (int *)get_real_type_00112b6e((*(undefined8 **)(input_ptr + 4))[1],&local_debug_info_ptr);\n    return result_ptr;\n  }\n  result_ptr = *(int **)**(undefined8 **)(input_ptr + 4);\n  if (input_ptr == result_ptr) {\n    return input_ptr;\n  }\n  if (result_ptr == (int *)0x0) {\n    return input_ptr;\n  }\n  result_ptr = (int *)get_real_type_00112b6e(result_ptr,&local_debug_info_ptr);\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_fields.isra.0",
                "debug_write_type.constprop.0",
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_structure_0010a83e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "uVar1": "result",
                "__s": "string_ptr",
                "__s_00": "formatted_string_ptr",
                "sVar2": "string_length",
                "cVar3": "flag",
                "stab_start_struct_type_lto_priv_0": "start_structure",
                "stab_pop_type": "pop_type",
                "xmalloc": "allocate_memory",
                "free": "deallocate_memory",
                "sprintf": "format_string",
                "strlen": "string_length"
            },
            "code": "\nundefined4\nprocess_structure_0010a83e(long arg1,undefined8 arg2,ulong arg3,undefined arg4,ulong arg5,\n            byte arg6,byte arg7)\n\n{\n  undefined4 result;\n  char *string_ptr;\n  char *formatted_string_ptr;\n  size_t string_length;\n  char flag;\n  \n  if (((arg7 ^ 1) & arg6) == 0) {\n    string_ptr = (char *)0x0;\n    flag = '\\0';\n  }\n  else {\n    flag = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n    string_ptr = (char *)pop_type();\n    arg5 = arg5 & 0xffffffff;\n    arg3 = arg3 & 0xffffffff;\n  }\n  result = start_structure(arg1,arg2,arg3,arg4,arg5);\n  if ((char)result != '\\0') {\n    if (arg6 == 0) {\n      return result;\n    }\n    if (arg7 == 0) {\n      if (string_ptr == (char *)0x0) {\n        return 0;\n      }\n      string_length = string_length(string_ptr);\n      formatted_string_ptr = (char *)allocate_memory(string_length + 3);\n      format_string(formatted_string_ptr,\"~%%%s\",string_ptr);\n      deallocate_memory(string_ptr);\n      if (flag != '\\0') {\n        *(undefined *)(*(long *)(arg1 + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(arg1 + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      formatted_string_ptr = (char *)allocate_memory(0x14);\n      format_string(formatted_string_ptr,\"~%%%ld\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(arg1 + 0x60) + 0x38) = formatted_string_ptr;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "stab_start_struct_type.lto_priv.0",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_structure_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_initialize_00113d6e",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "type_pointer",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong allocate_and_initialize_00113d6e(undefined8 input_value_1,undefined8 input_value_2)\n\n{\n  long type_pointer;\n  undefined8 *allocated_memory;\n  \n  type_pointer = debug_make_type_constprop_0(0xb,0);\n  if (type_pointer != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_value_1;\n    allocated_memory[1] = input_value_2;\n    *(undefined8 **)(type_pointer + 0x10) = allocated_memory;\n  }\n  return type_pointer;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "bfd_nonfatal_message",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "process_function_00114d50",
                "param_1": "functionParameter1",
                "param_2": "functionParameter2",
                "param_3": "functionParameter3"
            },
            "code": "\nvoid processFunction_00114d50(long functionParameter1,long functionParameter2,uint functionParameter3)\n\n{\n  if (*(int *)(*(long *)(functionParameter1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((functionParameter3 == 2) && (*(int *)(*(long *)(functionParameter2 + 8) + 8) == 2)) {\n    functionParameter3 = (uint)*(byte *)(*(long *)(*(long *)(functionParameter2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(functionParameter1 + 8) + 0x380) + 0x78))(functionParameter1,functionParameter3 != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "process_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,message);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_bfd_error_message_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "archiveFilename",
                "param_10": "archiveHandle",
                "param_11": "errorFlag",
                "param_12": "errorMessageFmt",
                "param_13": "errorParam1",
                "param_14": "errorParam2",
                "in_AL": "flag",
                "iVar1": "bfdError",
                "uVar2": "errorMsg",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localVar3",
                "local_f0": "localVar4",
                "local_e8": "localBuffer",
                "local_c8": "localParam1",
                "local_c0": "localParam2",
                "local_b8": "localErrorCode1",
                "local_a8": "localErrorCode2",
                "local_98": "localErrorCode3",
                "local_88": "localErrorCode4",
                "local_78": "localErrorCode5",
                "local_68": "localErrorCode6",
                "local_58": "localErrorCode7",
                "local_48": "localErrorCode8",
                "_stdout": "stdout",
                "_stderr": "stderr",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printBFDErrorMessage_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long archiveFilename,long archiveHandle,long *errorFlag,char *errorMessageFmt,undefined8 errorParam1,\n                 undefined8 errorParam2)\n\n{\n  char flag;\n  int bfdError;\n  undefined8 errorMsg;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localBuffer [32];\n  undefined8 localParam1;\n  undefined8 localParam2;\n  undefined4 localErrorCode1;\n  undefined4 localErrorCode2;\n  undefined4 localErrorCode3;\n  undefined4 localErrorCode4;\n  undefined4 localErrorCode5;\n  undefined4 localErrorCode6;\n  undefined4 localErrorCode7;\n  undefined4 localErrorCode8;\n  \n  if (flag != '\\0') {\n    localErrorCode1 = errorCode1;\n    localErrorCode2 = errorCode2;\n    localErrorCode3 = errorCode3;\n    localErrorCode4 = errorCode4;\n    localErrorCode5 = errorCode5;\n    localErrorCode6 = errorCode6;\n    localErrorCode7 = errorCode7;\n    localErrorCode8 = errorCode8;\n  }\n  localParam1 = errorParam1;\n  localParam2 = errorParam2;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMsg = bfd_errmsg();\n  }\n  fflush(stdout);\n  fputs(programName,stderr);\n  if (archiveHandle != 0) {\n    if (archiveFilename == 0) {\n      archiveFilename = bfd_get_archive_filename(archiveHandle);\n    }\n    if ((errorFlag != (long *)0x0) && (*errorFlag != 0)) {\n      fprintf(stderr,\": %s[%s]\",archiveFilename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(stderr,\": %s\",archiveFilename);\nLAB_001127c1:\n  if (errorMessageFmt != (char *)0x0) {\n    localVar3 = &stack0x00000008;\n    localVar4 = localBuffer;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,stderr);\n    vfprintf(stderr,errorMessageFmt,&localVar1);\n  }\n  fprintf(stderr,\": %s\\n\",errorMsg);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fwrite",
                "bfd_get_error",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_archive_filename",
                "vfprintf",
                "fputs",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00108466",
                "copy_file",
                "FUN_0010808f",
                "main",
                "copy_relocations_in_section",
                "FUN_001086af",
                "copy_file.cold",
                "copy_object.cold",
                "copy_section",
                "FUN_00104ea2",
                "FUN_00107880",
                "copy_object",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "create_type_constprop_00113b4a",
                "param_1": "input_parameter",
                "lVar1": "result",
                "debug_make_type_constprop_0": "allocate_memory"
            },
            "code": "\nlong create_type_constprop_00113b4a(long input_parameter)\n\n{\n  long result;\n  \n  if (input_parameter != 0) {\n    result = allocate_memory(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_parameter;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_constprop_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_symbol_in_table_0010edb4",
                "param_1": "symbolTable",
                "param_2": "newSymbol",
                "param_3": "param3",
                "param_4": "symbolSize",
                "cVar1": "isSymbolWritten",
                "iVar2": "filenameComparisonResult",
                "uVar3": "symbolWriteResult",
                "in_R10": "someRegister"
            },
            "code": "\nundefined8 updateSymbolInTable_0010edb4(long symbolTable,undefined8 newSymbol,undefined4 param3,ulong symbolSize)\n\n{\n  char isSymbolWritten;\n  int filenameComparisonResult;\n  undefined8 symbolWriteResult;\n  undefined8 someRegister;\n  \n  if (*(long *)(symbolTable + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbolTable + 0x1f0) < symbolSize) {\n    *(ulong *)(symbolTable + 0x1f0) = symbolSize;\n  }\n  filenameComparisonResult = filename_cmp(newSymbol);\n  if (filenameComparisonResult != 0) {\n    isSymbolWritten = stab_write_symbol_lto_priv_0(symbolTable,0x84,0,symbolSize,newSymbol);\n    if (isSymbolWritten == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbolTable + 0x210) = newSymbol;\n  }\n  symbolWriteResult = stab_write_symbol_lto_priv_0\n                    (symbolTable,0x44,param3,symbolSize - *(long *)(symbolTable + 0x200),0,someRegister);\n  return symbolWriteResult;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_in_table_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "length",
                "cVar1": "charValue",
                "__ptr": "memoryPtr",
                "__s": "stringPtr",
                "sVar2": "stringLength",
                "__s_00": "newStringPtr",
                "in_R10": "inputValue",
                "iVar3": "counter",
                "auVar4": "returnData"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPointer,int length)\n\n{\n  char charValue;\n  void *memoryPtr;\n  char *stringPtr;\n  size_t stringLength;\n  char *newStringPtr;\n  ulong inputValue;\n  int counter;\n  undefined returnData [16];\n  \n  counter = 0;\n  do {\n    if (length <= counter) {\n      returnData = stab_modify_type(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,inputValue);\n      return returnData;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      memoryPtr = (void *)stab_pop_type(dataPointer);\n      free(memoryPtr);\n    }\n    else {\n      stringPtr = (char *)stab_pop_type(dataPointer);\n      stringLength = strlen(stringPtr);\n      newStringPtr = (char *)xmalloc(stringLength + 3);\n      sprintf(newStringPtr,\":t%s\",stringPtr);\n      free(stringPtr);\n      charValue = stab_write_symbol_lto_priv_0(dataPointer,0x80,0,0,newStringPtr);\n      if (charValue == '\\0') {\n        returnData._8_8_ = 0;\n        returnData._0_8_ = inputValue;\n        return returnData << 0x40;\n      }\n      free(newStringPtr);\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "stab_modify_type",
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_function_00104d25",
                "param_7": "errorMessage",
                "status": "statusFlag"
            },
            "code": "\nvoid cleanupFunction_00104d25(void)\n\n{\n  undefined8 errorMessage;\n  \n  statusFlag = 1;\n  bfd_nonfatal_message(0,errorMessage,0,0);\n  remove_directory_and_free_memory_00114b84();\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_function_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "FUNC_0010551d"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_0010551d(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  code *pcVar4;\n  undefined8 *puVar5;\n  ulong uVar6;\n  ulong uVar7;\n  char *__s;\n  char cVar8;\n  char cVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *__s_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *puVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppuVar37;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = dump_sections;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (cVar9 = startswith_lto_priv_0_lto_priv_0(), cVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    cVar9 = bfd_get_full_section_contents();\n    if (cVar9 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (cVar9 = bfd_set_section_size(), cVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      __s_00 = fopen((char *)puVar29[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar29[2],0,0);\n      }\n      else {\n        cVar9 = bfd_malloc_and_get_section();\n        if (cVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,__s_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar17);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        uVar6 = uVar24;\n        uVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = uVar6, uVar7 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            uVar6 = uVar20;\n            uVar7 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUNC_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar37 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *puVar34 = 0;\n      puVar34 = puVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        cVar9 = bfd_get_section_contents();\n        if (cVar9 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                bVar2 = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      iVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(iVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar13,lVar27,pcVar33);\n                    cVar9 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar9 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)bVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppuVar37 = ppuVar37 + 2;\n    } while (ppuVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar9 = finish_stab(), cVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (plVar15 = plVar32; plVar15 < plVar32 + in_stack_00000010; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\\\')) &&\n                   (plVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(plVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              plVar15 = plVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar28);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (cVar9 = finish_stab(), cVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      cVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        cVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (cVar8 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          non_fatal(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (cVar8 = bfd_coff_get_auxent(), cVar8 == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            cVar8 = debug_set_filename(puStack0000000000000020);\n            if (cVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          cVar8 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar11 = strcmp(pcVar33,\".bb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              iVar11 = strcmp(pcVar33,\".eb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              iVar11 = strcmp(pcVar33,\".bf\");\n              if (iVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (cVar9 = debug_record_function(puStack0000000000000020), cVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      cVar8 = debug_record_line(puStack0000000000000020,iVar11 + iVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar11 = strcmp(pcVar33,\".ef\");\n                if (iVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar9 != '\\0') {\n                  cVar9 = debug_end_function(puStack0000000000000020);\n                  if (cVar9 == '\\0') goto LAB_00105981;\n                  cVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_coff_type_lto_priv_0();\n          if (lVar21 == 0) goto LAB_00105981;\n          cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (cVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = isympp + in_stack_00000010;\n        plVar15 = isympp;\n        do {\n          uVar10 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar10 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar10 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar32 != plVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar11 = bfd_get_error();\n      if (iVar11 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        iVar11 = add_symbols;\n        plVar15 = (long *)plVar32[_in_stack_00000018];\n        pcVar4 = (code *)plVar15[4];\n        uVar10 = *(uint *)(plVar15 + 3);\n        pcVar33 = (char *)plVar15[1];\n        pcVar28 = pcVar33;\n        if (add_sym_list != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = add_sym_list;\n          while( true ) {\n            if ((iVar11 <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = create_new_symbol(puVar29);\n          uVar17 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          cVar9 = *pcVar33;\n          if (cVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            lVar27 = unaff_R14[1];\n            cVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (iVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), iVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = section_rename_list, (uVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            iVar11 = strcmp(*ppcVar35,pcVar33);\n            if (iVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        plVar15[1] = (long)pcVar28;\n        cVar9 = *pcVar28;\n        if (cVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = prefix_symbols_string;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == cVar9) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uVar10 & 0x82) == 0 && (pcVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          cVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (cVar9 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = cVar9;\n          plVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          __s = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pcVar33,prefix_symbols_string);\n            sVar18 = strlen(__s);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          plVar15[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uVar10 & 0x20) == 0) &&\n           (((uVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uVar10 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (iVar11 = bfd_decode_symclass(plVar15), iVar11 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uVar10 & 0x82) == 0) && (pcVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(plVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  cVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            cVar9 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (cVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(uVar17);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          cVar9 = is_strip_section_isra_0(plVar15[4]);\n          if (cVar9 == '\\0') {\n            if (((uVar10 & 0x800002) == 0) && (pcVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uVar10 & 0x82) != 0) {\n                cVar9 = is_specified_symbol(pcVar28);\n                if ((cVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uVar12 = *(uint *)(plVar15 + 3), (uVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *plVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uVar12 = *(uint *)(plVar15 + 3);\n                }\n                *(uint *)(plVar15 + 3) = uVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uVar10 & 1) != 0) && (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pcVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = plVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      puVar29 = add_sym_list;\n      iVar11 = add_symbols;\n      for (lVar27 = 0; lVar27 < iVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = create_new_symbol(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          iVar11 = add_symbols;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      iVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((iVar11 != 5) && (iVar11 != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      cVar9 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (cVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (cVar9 = bfd_set_section_size(lVar25,in_stack_00000110), cVar9 == '\\0')) ||\n         (cVar9 = bfd_set_section_size(lVar27,in_stack_00000140), cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      cVar9 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((cVar9 == '\\0') ||\n         (cVar9 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,copy_section,in_stack_00000008);\n  for (puVar29 = add_sections; puVar5 = update_sections, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; puVar5 != (undefined8 *)0x0; puVar5 = (undefined8 *)*puVar5) {\n    uVar17 = *(undefined8 *)(puVar5[5] + 0x60);\n    cVar9 = bfd_set_section_contents(in_stack_00000008,uVar17,puVar5[4],0,puVar5[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, cVar9 != '\\0')) {\n      uVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uVar10;\n      if ((char)uVar10 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        cVar9 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (cVar9 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(uVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (cVar9 = startswith_lto_priv_0_lto_priv_0(*puVar29,\".gnu.build.attributes\"), cVar9 != '\\0'))\n    {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      plVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (cVar9 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = plVar15;\n          if (*(undefined8 **)(*plVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)plVar15[3];\n          plVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800"
            },
            "code": "\nvoid hashString_00108800(undefined8 *param_1)\n\n{\n  htab_hash_string(*param_1);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "parse_stab",
                "stab_demangle_template",
                "FUN_0010554f",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "record_and_free_variables_0010c1c6",
                "param_1": "functionPointer",
                "param_2": "dataPointer",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextPointer",
                "cVar2": "continueFlag",
                "__ptr": "currentPointer"
            },
            "code": "\nundefined recordAndFreeVariables_0010c1c6(undefined8 functionPointer,long dataPointer,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextPointer;\n  char continueFlag;\n  undefined8 *currentPointer;\n  \n  currentPointer = *(undefined8 **)(dataPointer + 0x78);\n  while( true ) {\n    if (currentPointer == (undefined8 *)0x0) {\n      *(undefined8 *)(dataPointer + 0x78) = 0;\n      return 1;\n    }\n    continueFlag = debug_record_variable\n                      (functionPointer,currentPointer[1],currentPointer[2],*(undefined4 *)(currentPointer + 3),currentPointer[4],param6,param5\n                      );\n    if (continueFlag == '\\0') break;\n    nextPointer = (undefined8 *)*currentPointer;\n    free(currentPointer);\n    currentPointer = nextPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "record_and_free_variables_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_write_symbol.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "unaff_RBX": "symbolTable",
                "uVar1": "symbolCount",
                "lVar2": "symbolAddress",
                "cVar3": "isSymbolSpecified",
                "puVar4": "symbolIndex",
                "puVar5": "filteredSymbolIndex",
                "unaff_RBP": "basePointer",
                "uVar6": "currentIndex",
                "unaff_R13": "symbols",
                "strip_symbols": "symbolStrippingFlag",
                "keep_specific_htab": "specifiedHashTable"
            },
            "code": "\nvoid processSymbols_001082df(void)\n\n{\n  uint symbolCount;\n  long symbolAddress;\n  char isSymbolSpecified;\n  long symbolTable;\n  undefined8 *symbolIndex;\n  undefined8 *filteredSymbolIndex;\n  long basePointer;\n  ulong currentIndex;\n  undefined8 *symbols;\n  \n  symbolCount = *(uint *)(symbolTable + 0x78);\n  if (symbolStrippingFlag == 7) {\n    symbolIndex = symbols;\n    for (currentIndex = 0; currentIndex != symbolCount; currentIndex = currentIndex + 1) {\n      filteredSymbolIndex = symbolIndex;\n      if (((*(long **)symbols[currentIndex] != (long *)0x0) &&\n          (symbolAddress = **(long **)symbols[currentIndex], symbolAddress != 0)) &&\n         (isSymbolSpecified = is_specified_symbol(*(undefined8 *)(symbolAddress + 8),specifiedHashTable), isSymbolSpecified != '\\0')\n         ) {\n        filteredSymbolIndex = symbolIndex + 1;\n        *symbolIndex = symbols[currentIndex];\n      }\n      symbolIndex = filteredSymbolIndex;\n    }\n    *symbolIndex = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(basePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbols_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "copy_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_00114d60",
                "param_1": "filePath",
                "iVar1": "isEOF",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "__stream": "filePtr",
                "uVar5": "allocatedMemory",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "allocatedSize"
            },
            "code": "\nvoid readFile_00114d60(long filePath)\n\n{\n  int isEOF;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 errorString;\n  FILE *filePtr;\n  undefined8 allocatedMemory;\n  size_t bytesRead;\n  long totalBytesRead;\n  long allocatedSize;\n  \n  filePtr = fopen(*(char **)(filePath + 0x10),\"r\");\n  if (filePtr == (FILE *)0x0) {\n    errorNumber = __errno_location();\n    errorMessage = strerror(*errorNumber);\n    allocatedMemory = *(undefined8 *)(filePath + 0x10);\n    errorString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorString,allocatedMemory,errorMessage);\n  }\n  allocatedSize = 0x1000;\n  totalBytesRead = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(filePath + 0x20) = allocatedMemory;\n  while( true ) {\n    isEOF = feof(filePtr);\n    if (isEOF != 0) {\n      *(long *)(filePath + 0x18) = totalBytesRead;\n      fclose(filePtr);\n      return;\n    }\n    if (totalBytesRead == allocatedSize) {\n      allocatedSize = totalBytesRead * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(filePath + 0x20),allocatedSize);\n      *(undefined8 *)(filePath + 0x20) = allocatedMemory;\n    }\n    bytesRead = fread((void *)(*(long *)(filePath + 0x20) + totalBytesRead),1,allocatedSize - totalBytesRead,filePtr);\n    isEOF = ferror(filePtr);\n    if (isEOF != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  allocatedMemory = *(undefined8 *)(filePath + 0x10);\n  errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorString,allocatedMemory);\n}\n\n",
            "called": [
                "fopen",
                "section_add_load_file.cold",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_missing_section_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionPtr",
                "uVar2": "errorMsg",
                "dcgettext": "getLocalizedErrorMessage",
                "fatal": "forceQuit"
            },
            "code": "\nvoid findMissingSection_00108808(void)\n\n{\n  undefined8 sectionPtr;\n  undefined8 errorMsg;\n  long basePointer;\n  \n  sectionPtr = *(undefined8 *)(basePointer + 0x20);\n  errorMsg = getLocalizedErrorMessage(0,\"Section %s not found\",5);\n                    \n  forceQuit(errorMsg,sectionPtr);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "find_missing_section_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "line_counter",
                "unaff_R13": "file_handle",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char",
                "in_stack_00000008": "line_number",
                "in_stack_00000010": "return_address",
                "ppbVar2": "slot_ptr",
                "pbVar3": "first_non_space_char",
                "bVar4": "current_char_value",
                "pbVar5": "next_line",
                "pbVar6": "current_char_ptr",
                "pbVar7": "next_char"
            },
            "code": "\nvoid process_lines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **slot_ptr;\n  byte *first_non_space_char;\n  byte current_char_value;\n  byte *next_line;\n  int line_counter;\n  byte *current_char_ptr;\n  undefined8 file_handle;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 line_number;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char_value = *current_line;\n    next_char = current_line;\n    if (current_char_value == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char_value < '\\v') {\n      if (current_char_value != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char_value != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_char_value = *current_char;\n    while ((current_char_value == 0x20 || (current_char_ptr = current_char, current_char_value == 9))) {\n      current_char_ptr = current_char + 1;\n      current_char = current_char + 1;\n      current_char_value = *current_char_ptr;\n    }\n    do {\n      if ((current_char_value == 10) || (current_char_value == 0xd)) goto LAB_00114676;\n      if (current_char_value == 0) goto LAB_00114599;\n      current_char_value = current_char_ptr[1];\n      current_char_ptr = current_char_ptr + 1;\n    } while ((current_char_value != 0x20) && (current_char_value != 9));\n    if ((char)current_char_value < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char_value & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char_value = current_char_ptr[1];\n      if ((((((current_char_value == 9) || (current_char_value == 0x20)) &&\n            ((current_char_value = current_char_ptr[2], current_char_value == 9 || (current_char_value == 0x20)))) &&\n           ((current_char_value = current_char_ptr[3], current_char_value == 9 || (current_char_value == 0x20)))) &&\n          ((current_char_value = current_char_ptr[4], current_char_value == 9 || (current_char_value == 0x20)))) &&\n         ((current_char_value = current_char_ptr[5], current_char_value == 9 || (current_char_value == 0x20)))) {\n        current_char_value = current_char_ptr[6];\n        first_non_space_char = current_char_ptr + 6;\n        if ((current_char_value == 9) || (current_char_value == 0x20)) {\n          do {\n            do {\n              current_char_value = first_non_space_char[1];\n              first_non_space_char = first_non_space_char + 1;\n            } while (current_char_value == 0x20);\n          } while (current_char_value == 9);\n        }\n      }\n      if ((0xd < current_char_value) || ((-0x2402L >> (current_char_value & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(uVar1,line_number,line_counter);\n      }\n    }\nLAB_00114599:\n    *current_char_ptr = 0;\n    if (current_char < current_char_ptr) {\n      slot_ptr = (byte **)htab_find_slot();\n      *slot_ptr = current_char;\n    }\n    line_counter = line_counter + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = file_handle;\n      return;\n    }\n  } while( true );\n  if (current_char_value == 0x23) {\n    process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_handle_bad_number_00119940",
                "param_1": "inputValue",
                "param_2": "errorMessage",
                "uVar1": "translatedErrorMessage",
                "local_20": "scannedValue"
            },
            "code": "\nvoid checkAndHandleBadNumber_00119940(undefined8 inputValue,undefined8 errorMessage)\n\n{\n  undefined8 translatedErrorMessage;\n  char *scannedValue [2];\n  \n  bfd_scan_vma(inputValue,scannedValue,0);\n  if (*scannedValue[0] == '\\0') {\n    return;\n  }\n  translatedErrorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(translatedErrorMessage,errorMessage,inputValue);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "parse_vma.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_handle_bad_number_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "functionParam",
                "param_2": "dataParam",
                "param_3": "conditionParam",
                "in_RAX": "tempVar"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 functionParam,long dataParam,uint conditionParam)\n\n{\n  long tempVar;\n  \n  if ((conditionParam == 2) && (*(int *)(*(long *)(dataParam + 8) + 8) == 2)) {\n    conditionParam = (uint)*(byte *)(*(long *)(*(long *)(dataParam + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(tempVar + 0x380) + 0x78))(functionParam,conditionParam != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00114dc7",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "copy_section",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "input4",
                "param_5": "input5",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "ptr",
                "auVar4": "array"
            },
            "code": "\nundefined8\nprocessFunction_00113a4d(undefined8 input1,undefined8 input2,long data,undefined8 input4,\n            undefined8 input5)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptr;\n  undefined array [16];\n  \n  result = debug_write_linenos_constprop_0(input1,input2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = stab_start_block_lto_priv_0(input2,*(undefined8 *)(data + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = debug_write_name_constprop_0(input1,input2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = processFunction_00113a4d(input1,input2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    array = debug_write_linenos_constprop_0(input1,input2,*(undefined8 *)(data + 0x20));\n    if (array[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return array._0_8_;\n      }\n      returnValue = stab_end_block_lto_priv_0\n                        (input2,*(undefined8 *)(data + 0x20),array._8_8_,input5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_start_block.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "debug_write_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_block.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryBlock"
            },
            "code": "\nundefined8 releaseMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryBlock;\n  undefined8 param_7;\n  \n  param_7 = returnValue;\n  free(memoryBlock);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "is_specified_symbol_predicate",
                "find_section_list"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "param_1": "inputValue",
                "lVar1": "debugTypePtr"
            },
            "code": "\nlong initializeDebugType_00113b71(long inputValue)\n\n{\n  long debugTypePtr;\n  \n  if (inputValue != 0) {\n    debugTypePtr = debug_make_type_constprop_0(0x14,0);\n    if (debugTypePtr == 0) {\n      debugTypePtr = 0;\n    }\n    else {\n      *(long *)(debugTypePtr + 0x10) = inputValue;\n    }\n    return debugTypePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "push_and_format_00109dfe",
                "param_1": "input",
                "lVar1": "count",
                "local_40": "formattedString"
            },
            "code": "\nvoid pushAndFormat_00109dfe(long input)\n\n{\n  long count;\n  char formattedString [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  count = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = count + 1;\n  *(long *)(input + 0x70) = count;\n  sprintf(formattedString,\"%ld=%ld\",count,count);\n  stab_push_string(input,formattedString,count,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_and_format_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "dataPointer",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long dataPointer)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(dataPointer + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(dataPointer + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "reverse_and_join_strings_0010ae0e",
                "param_1": "inputPointer",
                "lVar1": "entryPointer",
                "lVar2": "tempPointer",
                "__ptr": "tempPointer2",
                "pcVar3": "tempCharPointer",
                "sVar4": "stringLength1",
                "sVar5": "stringLength2",
                "pcVar6": "concatenatedString",
                "uVar7": "returnVal",
                "lVar8": "totalStringLength",
                "uVar9": "counter",
                "uVar10": "elementsCounter"
            },
            "code": "\nundefined8 reverseAndJoinStrings_0010ae0e(long inputPointer)\n\n{\n  long entryPointer;\n  long tempPointer;\n  void *tempPointer2;\n  char *tempCharPointer;\n  size_t stringLength1;\n  size_t stringLength2;\n  char *concatenatedString;\n  undefined8 returnVal;\n  long totalStringLength;\n  uint counter;\n  ulong elementsCounter;\n  \n  returnVal = 0;\n  entryPointer = *(long *)(inputPointer + 0x60);\n  if (((entryPointer != 0) && (*(char **)(entryPointer + 8) != (char *)0x0)) &&\n     (concatenatedString = *(char **)(entryPointer + 0x20), concatenatedString != (char *)0x0)) {\n    stringLength1 = strlen(*(char **)(entryPointer + 8));\n    stringLength2 = strlen(concatenatedString);\n    tempPointer = *(long *)(entryPointer + 0x28);\n    if (tempPointer == 0) {\n      totalStringLength = stringLength1 + stringLength2 + 10;\n      elementsCounter = 0;\n    }\n    else {\n      totalStringLength = stringLength1 + stringLength2 + 0x1e;\n      elementsCounter = 0;\n      while( true ) {\n        concatenatedString = *(char **)(tempPointer + elementsCounter * 8);\n        if (concatenatedString == (char *)0x0) break;\n        stringLength1 = strlen(concatenatedString);\n        elementsCounter = (ulong)((int)elementsCounter + 1);\n        totalStringLength = totalStringLength + stringLength1;\n      }\n    }\n    if (*(char **)(entryPointer + 0x30) != (char *)0x0) {\n      stringLength1 = strlen(*(char **)(entryPointer + 0x30));\n      totalStringLength = totalStringLength + stringLength1;\n    }\n    if (*(char **)(entryPointer + 0x38) != (char *)0x0) {\n      stringLength1 = strlen(*(char **)(entryPointer + 0x38));\n      totalStringLength = totalStringLength + stringLength1;\n    }\n    concatenatedString = (char *)xmalloc(totalStringLength);\n    entryPointer = *(long *)(inputPointer + 0x60);\n    strcpy(concatenatedString,*(char **)(entryPointer + 8));\n    if (*(long *)(entryPointer + 0x28) != 0) {\n      counter = 0;\n      stringLength1 = strlen(concatenatedString);\n      sprintf(concatenatedString + stringLength1,\"!%u,\",elementsCounter);\n      while( true ) {\n        entryPointer = *(long *)(inputPointer + 0x60);\n        elementsCounter = (ulong)counter;\n        tempPointer2 = *(void **)(entryPointer + 0x28);\n        tempCharPointer = *(char **)((long)tempPointer2 + elementsCounter * 8);\n        if (tempCharPointer == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(concatenatedString,tempCharPointer);\n        free(*(void **)(*(long *)(entryPointer + 0x28) + elementsCounter * 8));\n      }\n      free(tempPointer2);\n      *(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x28) = 0;\n    }\n    entryPointer = *(long *)(inputPointer + 0x60);\n    strcat(concatenatedString,*(char **)(entryPointer + 0x20));\n    free(*(void **)(entryPointer + 0x20));\n    entryPointer = *(long *)(inputPointer + 0x60);\n    *(undefined8 *)(entryPointer + 0x20) = 0;\n    if (*(char **)(entryPointer + 0x30) != (char *)0x0) {\n      strcat(concatenatedString,*(char **)(entryPointer + 0x30));\n      free(*(void **)(entryPointer + 0x30));\n      *(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x30) = 0;\n    }\n    stringLength1 = strlen(concatenatedString);\n    entryPointer = *(long *)(inputPointer + 0x60);\n    *(undefined2 *)(concatenatedString + stringLength1) = 0x3b;\n    tempCharPointer = *(char **)(entryPointer + 0x38);\n    if (tempCharPointer != (char *)0x0) {\n      strcpy(concatenatedString + stringLength1 + 1,tempCharPointer);\n      free(*(void **)(entryPointer + 0x38));\n      *(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(inputPointer + 0x60) + 8));\n    entryPointer = *(long *)(inputPointer + 0x60);\n    *(char **)(entryPointer + 8) = concatenatedString;\n    returnVal = CONCAT71((int7)((ulong)entryPointer >> 8),1);\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "strlen",
                "strcat",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_join_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_debug_information_001135a5",
                "param_1": "outputStream",
                "param_2": "inputStream",
                "param_3": "dataPointer",
                "iVar1": "iterationCount",
                "cVar2": "flag",
                "uVar3": "returnValue",
                "puVar4": "currentParam",
                "puVar5": "currentData"
            },
            "code": "\nundefined8 processDebugInformation_001135a5(undefined8 outputStream,undefined8 inputStream,long dataPointer)\n\n{\n  int iterationCount;\n  char flag;\n  undefined8 returnValue;\n  undefined8 *currentParam;\n  undefined8 *currentData;\n  \n  if (6 < *(uint *)(dataPointer + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(dataPointer + 0x14)) {\n  case 0:\n    flag = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(dataPointer + 0x20),dataPointer);\n    if (flag != '\\0') {\n      returnValue = stab_typdef_lto_priv_0(inputStream,*(undefined8 *)(dataPointer + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    flag = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(dataPointer + 0x20),dataPointer);\n    if (flag != '\\0') {\n      returnValue = stab_tag_lto_priv_0(inputStream,*(undefined8 *)(dataPointer + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    flag = debug_write_type_constprop_0\n                      (outputStream,inputStream,*(undefined8 *)(*(long *)(dataPointer + 0x20) + 8),0);\n    if (flag != '\\0') {\n      returnValue = stab_variable_lto_priv_0\n                        (inputStream,*(undefined8 *)(dataPointer + 8),**(undefined4 **)(dataPointer + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(dataPointer + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    currentData = *(undefined8 **)(dataPointer + 0x20);\n    iterationCount = *(int *)(dataPointer + 0x18);\n    returnValue = *(undefined8 *)(dataPointer + 8);\n    flag = debug_write_linenos_constprop_0(outputStream,inputStream,*(undefined8 *)(currentData[2] + 0x18));\n    if (((flag != '\\0') &&\n        (flag = debug_write_type_constprop_0(outputStream,inputStream,*currentData,0), flag != '\\0')) &&\n       (flag = stab_start_function_lto_priv_0(inputStream,returnValue,iterationCount == 2), flag != '\\0')) {\n      for (currentParam = (undefined8 *)currentData[1]; currentParam != (undefined8 *)0x0;\n          currentParam = (undefined8 *)*currentParam) {\n        flag = debug_write_type_constprop_0(outputStream,inputStream,currentParam[2],0);\n        if (flag == '\\0') {\n          return 0;\n        }\n        flag = stab_function_parameter_lto_priv_0(inputStream,currentParam[1],*(undefined4 *)(currentParam + 3));\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n      currentData = (undefined8 *)currentData[2];\n      while( true ) {\n        if (currentData == (undefined8 *)0x0) {\n          returnValue = stab_end_function_lto_priv_0(inputStream);\n          return returnValue;\n        }\n        flag = debug_write_block_constprop_0(outputStream,inputStream,currentData);\n        if (flag == '\\0') break;\n        currentData = (undefined8 *)*currentData;\n      }\n    }\n    break;\n  case 4:\n    returnValue = stab_int_constant_lto_priv_0\n                      (inputStream,*(undefined8 *)(dataPointer + 8),*(undefined8 *)(dataPointer + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(dataPointer + 0x20),inputStream,*(undefined8 *)(dataPointer + 8));\n    return returnValue;\n  case 6:\n    flag = debug_write_type_constprop_0(outputStream,inputStream,**(undefined8 **)(dataPointer + 0x20),0);\n    if (flag != '\\0') {\n      returnValue = stab_typed_constant_lto_priv_0\n                        (inputStream,*(undefined8 *)(dataPointer + 8),\n                         *(undefined8 *)(*(long *)(dataPointer + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_function.lto_priv.0",
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_variable.lto_priv.0",
                "abort",
                "stab_float_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_typdef.lto_priv.0",
                "stab_end_function.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "process_debug_information_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUNC_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001152b6",
                "bfd_get_arch",
                "bfd_set_file_flags",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename",
                "bfd_set_start_address",
                "printf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)debug_make_volatile_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)debug_make_const_type_isra_0(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)debug_make_pointer_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)debug_make_reference_type_isra_0(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = stab_demangle_v3_arglist(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)debug_make_function_type_isra_0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)stab_find_tagged_type(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) ||\n           (plVar4 = (long *)debug_get_fields_isra_0(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)stab_find_tagged_type\n                               (param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)debug_get_type_name_constprop_0(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_demangle_v3_arglist",
                "debug_make_reference_type.isra.0",
                "dcgettext",
                "stab_demangle_v3_arg",
                "strcmp",
                "debug_make_type.constprop.0",
                "cplus_demangle_print",
                "debug_make_int_type.isra.0",
                "abort",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_float_type.isra.0",
                "fprintf",
                "strncmp"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arglist",
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "in_CL": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineNumber",
                "pbVar5": "currentPosition",
                "unaff_R13": "errorCallback",
                "unaff_R14": "lastChar",
                "unaff_R15": "currentLineStart",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "reversedFunctions"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte currentChar;\n  byte nextChar;\n  byte *currentLine;\n  int lineNumber;\n  byte *currentPosition;\n  undefined8 errorCallback;\n  byte *lastChar;\n  byte *currentLineStart;\n  undefined8 filename;\n  undefined8 *reversedFunctions;\n  \n  do {\n    currentPosition = currentLineStart;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = currentPosition[1];\n      currentPosition = currentPosition + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = currentPosition[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = currentPosition[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = currentPosition[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = currentPosition[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = currentPosition[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = currentPosition[6];\n        pbVar3 = currentPosition + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = pbVar3[1];\n              pbVar3 = pbVar3 + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(uVar1,filename,lineNumber);\n      }\n    }\nLAB_00114599:\n    *currentPosition = 0;\n    if (currentLineStart < currentPosition) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = currentLineStart;\n    }\n    lineNumber = lineNumber + 1;\n    currentPosition = currentLine;\n    if (lastChar[1] == 0) {\n      *reversedFunctions = errorCallback;\n      return;\n    }\n    for (; nextChar = *currentPosition, lastChar = currentPosition, nextChar != 10; currentPosition = currentPosition + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          pbVar3 = currentPosition + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentPosition = 0;\n          pbVar3 = currentPosition + 1;\n          if (currentPosition[1] == 10) {\n            pbVar3 = currentPosition + 2;\n            lastChar = currentPosition + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentPosition = 0;\n    if (currentPosition[1] == 0xd) {\n      lastChar = currentPosition + 1;\n      pbVar3 = currentPosition + 2;\n    }\n    else {\n      pbVar3 = currentPosition + 1;\n    }\nLAB_00114553:\n    currentChar = *currentLine;\n    currentLineStart = currentLine;\n    while (currentLine = pbVar3, currentChar == 0x20) {\nLAB_00104c3f:\n      currentPosition = currentLineStart + 1;\n      currentLineStart = currentLineStart + 1;\n      pbVar3 = currentLine;\n      currentChar = *currentPosition;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "FUNC_0010554f"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 FUNC_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,get_sections,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = gap_fill_set != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_7,*plVar28);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (pad_to_set != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = pad_to * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaff_R14,1,plVar28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = parse_stab(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = finish_stab(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = start_stab_constprop_0(unaff_R14,0,plVar28), lVar14 == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_stab(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar14 != 0) && (cVar7 = finish_stab(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = debug_set_filename(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = debug_set_filename(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,puVar26,0,__ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(__ptr_02,iVar10 + iVar27,\n                                                *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = isympp;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = add_symbols;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = add_sym_list;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = create_new_symbol(puVar26);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(redefine_specific_htab);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(redefine_specific_htab);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = section_rename_list, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = prefix_symbols_string;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = prefix_symbols_string;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = is_strip_section_isra_0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = is_specified_symbol(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(keepglobal_specific_htab), lVar37 == 0 ||\n                      (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar26 = add_sym_list;\n        iVar10 = add_symbols;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = add_symbols;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,isympp);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(strip_specific_htab);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(keep_specific_htab), lVar14 != 0 ||\n           (lVar14 = htab_elements(localize_specific_htab), lVar14 != 0)) ||\n          (lVar14 = htab_elements(globalize_specific_htab), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(keepglobal_specific_htab), lVar14 != 0 ||\n          (lVar14 = htab_elements(weaken_specific_htab), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(redefine_specific_htab), lVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar26 = add_sections; puVar4 = update_sections, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = startswith_lto_priv_0_lto_priv_0(*puVar26,\".gnu.build.attributes\"),\n            cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = gnu_debuglink_filename\n       , cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = gap_fill;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar29 = use_alt_mach_code;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_set_section_size",
                "start_stab.constprop.0",
                "is_specified_symbol",
                "htab_traverse",
                "bfd_set_error",
                "save_stab",
                "free_saved_stabs",
                "bfd_alt_mach_code",
                "non_fatal",
                "qsort",
                "bfd_is_local_label",
                "debug_end_function",
                "copy_relocations_in_section",
                "strlen",
                "mark_symbols_used_in_relocations",
                "bfd_coff_get_syment",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_octets_per_byte",
                "strcpy",
                "xmalloc",
                "is_strip_section.isra.0",
                "is_specified_symbol_predicate",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_errmsg",
                "bfd_map_over_sections",
                "parse_coff_symbol.constprop.0.isra.0",
                "htab_elements",
                "get_sections",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "bfd_map_over_sections",
                "stab_context",
                "copy_section",
                "bfd_set_symtab",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_fill_in_gnu_debuglink_section",
                "free",
                "fprintf",
                "finish_stab",
                "compare_section_lma",
                "bfd_get_section_contents",
                "debug_end_block",
                "fatal",
                "bfd_decode_symclass",
                "strcmp",
                "debug_start_block",
                "htab_find",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "bfd_set_section_contents",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "create_new_symbol",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_find_named_type",
                "find_section_list",
                "main",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "debug_set_class_id.lto_priv.0",
                "debug_tag_type",
                "debug_type_samep",
                "eq_string_redefnode",
                "parse_stab",
                "skip_section",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "FUN_0010554f",
                "convert_efi_target",
                "is_strip_section_1.isra.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "push_string_to_stack_00109cf4",
                "param_1": "stack",
                "param_2": "value",
                "param_3": "flag",
                "local_3c": "buffer"
            },
            "code": "\nvoid pushStringToStack_00109cf4(undefined8 stack,undefined8 value,undefined4 flag)\n\n{\n  char buffer [28];\n  \n  sprintf(buffer,\"%ld\",value);\n  stab_push_string(stack,buffer,value,0,flag);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_string_to_stack_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_parameters_00109ab1",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "var_3",
                "param_4": "var_4",
                "param_5": "var_5",
                "uVar1": "parsed_number",
                "pcVar2": "current_char",
                "uVar3": "result_1",
                "auVar4": "result",
                "parse_number": "parse_numeric_value",
                "bad_stab": "handle_error"
            },
            "code": "\nundefined  [16]\nparse_parameters_00109ab1(char **input_param,undefined4 *output_param,undefined8 var_3,undefined8 var_4,\n            undefined8 var_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result_1;\n  undefined result [16];\n  \n  current_char = *input_param;\n  if (*current_char == '(') {\n    *input_param = current_char + 1;\n    parsed_number = parse_numeric_value(input_param,0);\n    *output_param = parsed_number;\n    if (**input_param == ',') {\n      *input_param = *input_param + 1;\n      parsed_number = parse_numeric_value(input_param,0,var_3);\n      output_param[1] = parsed_number;\n      if (**input_param == ')') {\n        current_char = *input_param + 1;\n        *input_param = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    handle_error(current_char);\n    result_1 = 0;\n  }\n  else {\n    *output_param = 0;\n    current_char = (char *)parse_numeric_value(input_param,0);\n    output_param[1] = (int)current_char;\nLAB_00109b25:\n    result_1 = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  result._8_8_ = var_5;\n  result._0_8_ = result_1;\n  return result;\n}\n\n",
            "called": [
                "bad_stab",
                "parse_number"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_parameters_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "validate_strip_section_001159d0",
                "param_1": "sectionPtr",
                "uVar1": "symbolPtr",
                "cVar2": "isSpecified",
                "uVar3": "isSectionStripped",
                "lVar4": "groupSignature",
                "lVar5": "currentGroupPtr"
            },
            "code": "\nundefined4 validateStripSection_001159d0(long sectionPtr)\n\n{\n  undefined8 symbolPtr;\n  char isSpecified;\n  undefined4 isSectionStripped;\n  long groupSignature;\n  long currentGroupPtr;\n  \n  isSectionStripped = is_strip_section_1_isra_0();\n  if ((char)isSectionStripped == '\\0') {\n    if ((*(byte *)(sectionPtr + 0x27) & 2) == 0) {\n      return isSectionStripped;\n    }\n    groupSignature = group_signature_isra_0(*(undefined8 *)(sectionPtr + 0xd0),*(undefined8 *)(sectionPtr + 0xe0));\n    if ((groupSignature != 0) &&\n       (((symbolPtr = *(undefined8 *)(groupSignature + 8), strip_symbols != 7 ||\n         (isSpecified = is_specified_symbol(symbolPtr,keep_specific_htab), isSpecified != '\\0')) &&\n        (isSpecified = is_specified_symbol(symbolPtr,strip_specific_htab), isSpecified == '\\0')))) {\n      groupSignature = *(long *)(*(long *)(sectionPtr + 0xd0) + 0xc0);\n      currentGroupPtr = groupSignature;\n      do {\n        if (currentGroupPtr == 0) {\n          return 1;\n        }\n        isSpecified = is_strip_section_1_isra_0(currentGroupPtr);\n        if (isSpecified == '\\0') {\n          return isSectionStripped;\n        }\n        currentGroupPtr = *(long *)(*(long *)(currentGroupPtr + 0xd0) + 0xc0);\n      } while (groupSignature != currentGroupPtr);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_specified_symbol",
                "group_signature.isra.0",
                "is_strip_section_1.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "skip_section",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "validate_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "param_1": "input_address",
                "__s": "first_string",
                "__s_00": "reversed_string",
                "sVar5": "first_string_length",
                "sVar6": "second_string_length",
                "__s_01": "combined_string",
                "uVar4": "result",
                "uVar1": "character",
                "uVar3": "constant_value",
                "lVar2": "structure_address"
            },
            "code": "\nundefined4 combineStrings_0010a77a(long input_address)\n\n{\n  undefined character;\n  long structure_address;\n  char *first_string;\n  undefined8 constant_value;\n  undefined4 result;\n  char *reversed_string;\n  size_t first_string_length;\n  size_t second_string_length;\n  char *combined_string;\n  \n  structure_address = *(long *)(input_address + 0x60);\n  if ((structure_address != 0) && (first_string = *(char **)(structure_address + 0x20), first_string != (char *)0x0)) {\n    result = *(undefined4 *)(structure_address + 0x18);\n    character = *(undefined *)(structure_address + 0x1c);\n    constant_value = *(undefined8 *)(structure_address + 0x10);\n    reversed_string = (char *)stab_pop_type();\n    first_string_length = strlen(reversed_string);\n    second_string_length = strlen(first_string);\n    combined_string = (char *)xmalloc(first_string_length + 2 + second_string_length);\n    sprintf(combined_string,\"%s%s;\",reversed_string,first_string);\n    free(reversed_string);\n    free(first_string);\n    result = stab_push_string(input_address,combined_string,constant_value,character,result);\n    if ((char)result != '\\0') {\n      free(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_message_0010543c",
                "piVar2": "errorNumber",
                "pcVar3": "errorString",
                "uVar1": "fileHandle",
                "uVar4": "errorMessage"
            },
            "code": "\nvoid printErrorMessage_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errorNumber;\n  char *errorString;\n  undefined8 errorMessage;\n  long unaff_RBP;\n  \n  errorNumber = __errno_location();\n  errorString = strerror(*errorNumber);\n  fileHandle = *(undefined8 *)(unaff_RBP + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(errorMessage,fileHandle,errorString);\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "fatal",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "print_error_message_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "param_1": "inputPointer",
                "param_2": "flag",
                "param_3": "numElements",
                "param_4": "conditionFlag",
                "cVar1": "emptyTypeFlag",
                "bVar2": "byteVar",
                "iVar3": "tempVar",
                "uVar4": "returnValue",
                "pcVar5": "pcString",
                "__ptr": "arrayPointer",
                "uVar6": "tempValue",
                "__s": "str",
                "sVar7": "strlen1",
                "sVar8": "strlen2",
                "__s_00": "formattedString",
                "lVar9": "loopVar",
                "bVar10": "byteVar2",
                "lVar11": "strlenLoopVar",
                "uVar12": "undefinedVar"
            },
            "code": "\nundefined4 generateFormattedString_0010a424(long inputPointer,char flag,int numElements,char conditionFlag)\n\n{\n  char emptyTypeFlag;\n  byte byteVar;\n  int tempVar;\n  undefined4 returnValue;\n  char *pcString;\n  undefined8 *arrayPointer;\n  undefined8 tempValue;\n  char *str;\n  size_t strlen1;\n  size_t strlen2;\n  char *formattedString;\n  long loopVar;\n  byte byteVar2;\n  long strlenLoopVar;\n  undefined undefinedVar;\n  \n  if ((flag == '\\0') && (emptyTypeFlag = stab_empty_type_lto_priv_0(), emptyTypeFlag == '\\0')) {\n    return 0;\n  }\n  byteVar2 = *(byte *)(*(long *)(inputPointer + 0x60) + 0x1c);\n  pcString = (char *)stab_pop_type(inputPointer);\n  if (numElements < 0) {\n    arrayPointer = (undefined8 *)0x0;\n    numElements = 0;\nLAB_0010a582:\n    undefinedVar = 1;\n    if (byteVar2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (numElements != 0) {\n      tempVar = numElements + 1;\n      arrayPointer = (undefined8 *)xmalloc((long)tempVar * 8);\n      loopVar = (long)(numElements + -1);\n      do {\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(inputPointer + 0x60) + 0x1c);\n        }\n        tempValue = stab_pop_type(inputPointer);\n        byteVar2 = byteVar & 1;\n        arrayPointer[loopVar] = tempValue;\n        loopVar = loopVar + -1;\n      } while ((int)loopVar != -1);\n      if (conditionFlag == '\\0') {\n        emptyTypeFlag = stab_empty_type_lto_priv_0(inputPointer);\n        if (emptyTypeFlag == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(inputPointer + 0x60) + 0x1c);\n        }\n        byteVar2 = byteVar & 1;\n        tempValue = stab_pop_type(inputPointer);\n        arrayPointer[(long)tempVar + -1] = tempValue;\n        numElements = tempVar;\n      }\n      goto LAB_0010a582;\n    }\n    arrayPointer = (undefined8 *)0x0;\n    if (conditionFlag != '\\0') goto LAB_0010a582;\n    arrayPointer = (undefined8 *)xmalloc(8);\n    emptyTypeFlag = stab_empty_type_lto_priv_0(inputPointer);\n    if (emptyTypeFlag == '\\0') {\n      return 0;\n    }\n    if ((byteVar2 != 0) || (*(char *)(*(long *)(inputPointer + 0x60) + 0x1c) != '\\0')) {\n      tempValue = stab_pop_type(inputPointer);\n      numElements = 1;\n      undefinedVar = 1;\n      *arrayPointer = tempValue;\n      goto LAB_0010a596;\n    }\n    tempValue = stab_pop_type(inputPointer);\n    numElements = 1;\n    *arrayPointer = tempValue;\n  }\n  undefinedVar = *(undefined *)(*(long *)(inputPointer + 0x60) + 0x1c);\nLAB_0010a596:\n  str = (char *)stab_pop_type(inputPointer);\n  strlen1 = strlen(pcString);\n  strlen2 = strlen(str);\n  loopVar = strlen1 + 10 + strlen2;\n  for (strlenLoopVar = 0; (int)strlenLoopVar < numElements; strlenLoopVar = strlenLoopVar + 1) {\n    strlen1 = strlen((char *)arrayPointer[strlenLoopVar]);\n    loopVar = loopVar + strlen1;\n  }\n  formattedString = (char *)xmalloc(loopVar);\n  sprintf(formattedString,\"#%s,%s\",pcString,str);\n  loopVar = 0;\n  free(pcString);\n  free(str);\n  while( true ) {\n    strlen1 = strlen(formattedString);\n    if (numElements <= (int)loopVar) break;\n    *(undefined2 *)(formattedString + strlen1) = 0x2c;\n    pcString = (char *)arrayPointer[loopVar];\n    loopVar = loopVar + 1;\n    strcpy(formattedString + strlen1 + 1,pcString);\n    free(pcString);\n  }\n  *(undefined2 *)(formattedString + strlen1) = 0x3b;\n  free(arrayPointer);\n  returnValue = stab_push_string(inputPointer,formattedString,0,undefinedVar,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(formattedString);\n  return returnValue;\n}\n\n",
            "called": [
                "stab_empty_type.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_binutils_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightText"
            },
            "code": "\nvoid printBinutilsInfo_00119970(undefined8 version)\n\n{\n  char *copyrightText;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightText);\n  copyrightText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_binutils_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "report",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "param_1": "input_string",
                "param_2": "pointer1",
                "param_3": "pointer2",
                "param_4": "pointer3",
                "pcVar1": "equal_sign_position",
                "uVar2": "substring",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 pointer1,undefined8 pointer2,undefined8 pointer3)\n\n{\n  char *equal_sign_position;\n  undefined8 substring;\n  undefined result [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    substring = xstrndup(input_string,(long)equal_sign_position - (long)input_string);\n    result._0_8_[2] = equal_sign_position + 1;\n    result._0_8_[1] = substring;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = pointer1;\n    result._8_8_ = pointer3;\n    return result;\n  }\n  substring = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(substring,pointer2);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_parameter_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_value_0010870e",
                "param_1": "destination",
                "param_2": "newValue",
                "param_3": "pointer",
                "puVar1": "pointerValue"
            },
            "code": "\nvoid updatePointerValue_0010870e(undefined8 destination,undefined8 newValue,long *pointer)\n\n{\n  undefined8 *pointerValue;\n  \n  pointerValue = (undefined8 *)*pointer;\n  *pointerValue = newValue;\n  *pointer = (long)(pointerValue + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_value_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_ptr",
                "param_2": "symbol_table",
                "param_3": "type_section",
                "param_4": "debug_info",
                "param_5": "type_code",
                "param_6": "enum_values",
                "param_7": "is_indirect",
                "param_8": "type_name",
                "lVar1": "temp_var1",
                "cVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "lVar5": "result",
                "uVar6": "temp_var6",
                "plVar7": "temp_ptr_var",
                "__ptr": "temp_ptr1",
                "__ptr_00": "temp_ptr2",
                "bVar8": "temp_var8",
                "iVar9": "temp_var9",
                "pcVar10": "temp_var10",
                "uVar11": "temp_var11",
                "lVar12": "temp_var12",
                "uVar13": "temp_var13",
                "uVar14": "temp_var14",
                "uVar15": "temp_var15",
                "local_68": "local_buffer",
                "local_48": "local_char",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_ptr,long *symbol_table,long type_section,undefined8 debug_info,uint type_code,\n                 long *enum_values,char is_indirect,undefined8 type_name)\n\n{\n  long temp_var1;\n  char temp_var2;\n  undefined4 temp_var3;\n  undefined8 temp_var4;\n  long result;\n  undefined8 temp_var6;\n  long *temp_ptr_var;\n  void *temp_ptr1;\n  void *temp_ptr2;\n  byte temp_var8;\n  int temp_var9;\n  char *temp_var10;\n  ulong temp_var11;\n  long temp_var12;\n  uint temp_var13;\n  uint temp_var14;\n  undefined8 temp_var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  result = *(long *)(coff_ptr + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    temp_var13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    temp_var11 = (ulong)(type_code & *(uint *)(result + 0x40));\n    temp_var8 = (byte)*(undefined4 *)(result + 0x3c);\n    temp_var13 = (temp_var13 ^ type_code) & *(uint *)(result + 0x38) ^ temp_var13;\n    if (temp_var11 == 1L << (temp_var8 & 0x3f)) {\n      temp_var4 = parse_coff_type_0010dac0(coff_ptr,symbol_table,type_section,debug_info,temp_var13,enum_values,is_indirect,type_name);\n      result = debug_make_pointer_type_isra_0(temp_var4);\n      return result;\n    }\n    if (temp_var11 != 2L << (temp_var8 & 0x3f)) {\n      if (temp_var11 != 3L << (temp_var8 & 0x3f)) {\n        temp_var4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          temp_var13);\n        non_fatal(temp_var4,type_code);\n        return 0;\n      }\n      temp_var14 = 0;\n      if (enum_values != (long *)0x0) {\n        temp_var14 = (uint)*(ushort *)(enum_values + 2);\n        temp_ptr_var = enum_values + 2;\n        for (temp_var9 = 0; (*(short *)temp_ptr_var != 0 && (temp_var9 != 3)); temp_var9 = temp_var9 + 1) {\n          *(short *)temp_ptr_var = *(short *)((long)temp_ptr_var + 2);\n          temp_ptr_var = (long *)((long)temp_ptr_var + 2);\n        }\n        *(short *)temp_ptr_var = 0;\n      }\n      temp_var15 = 0;\n      temp_var4 = type_name;\n      temp_var6 = parse_coff_type_0010dac0(coff_ptr,symbol_table,type_section,debug_info,temp_var13,enum_values,0);\n      result = *(long *)(type_section + 0x28);\n      if (result == 0) {\n        temp_var4 = debug_make_int_type_isra_0(4,0,temp_var15,temp_var4);\n        result = debug_name_type(type_name,\"int\",temp_var4);\n        *(long *)(type_section + 0x28) = result;\n      }\n      result = debug_make_array_type_isra_0(temp_var6,result,0,(long)(int)(temp_var14 - 1),0);\n      return result;\n    }\n    temp_var4 = parse_coff_type_0010dac0(coff_ptr,symbol_table,type_section,debug_info,temp_var13,enum_values,is_indirect,type_name);\n    result = debug_make_function_type_isra_0(temp_var4,0,0);\n    return result;\n  }\n  if ((enum_values != (long *)0x0) && (0 < *enum_values)) {\n    temp_ptr_var = (long *)coff_get_slot_lto_priv_0(type_section);\n    if (*temp_ptr_var != 0) {\n      return *temp_ptr_var;\n    }\n    result = debug_make_indirect_type_isra_0(temp_ptr_var,0);\n    return result;\n  }\n  if (is_indirect == '\\0') {\n    enum_values = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = debug_make_void_type_isra_0();\n    return result;\n  }\n  result = *(long *)(type_section + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    temp_var4 = debug_make_void_type_isra_0();\n    temp_var10 = \"void\";\n    break;\n  case 2:\n    temp_var4 = debug_make_int_type_isra_0(1,0);\n    temp_var10 = \"char\";\n    break;\n  case 3:\n    temp_var4 = debug_make_int_type_isra_0(2,0);\n    temp_var10 = \"short\";\n    break;\n  case 4:\n    temp_var4 = debug_make_int_type_isra_0(4,0);\n    temp_var10 = \"int\";\n    break;\n  case 5:\n    temp_var4 = debug_make_int_type_isra_0(4,0);\n    temp_var10 = \"long\";\n    break;\n  case 6:\n    temp_var4 = debug_make_float_type_isra_0(4);\n    temp_var10 = \"float\";\n    break;\n  case 7:\n    temp_var4 = debug_make_float_type_isra_0(8);\n    temp_var10 = \"double\";\n    break;\n  case 8:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var4 = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(coff_ptr,symbol_table,type_section,temp_var4,enum_values,type_name);\nLAB_0010e046:\n    temp_ptr_var = (long *)coff_get_slot_lto_priv_0(type_section,debug_info);\n    *temp_ptr_var = result;\n    return result;\n  case 10:\n    if (enum_values == (long *)0x0) {\n      result = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      result = enum_values[3];\n      temp_ptr1 = (void *)xmalloc(0x50);\n      temp_ptr2 = (void *)xmalloc(0x50);\n      temp_var12 = 0;\n      do {\n        while( true ) {\n          if ((result <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          temp_var9 = (int)temp_var12;\n          temp_var1 = *(long *)(*symbol_table + symbol_table[2] * 8);\n          temp_var2 = bfd_coff_get_syment(coff_ptr,temp_var1,local_buffer);\n          temp_var12 = (long)temp_var9;\n          if (temp_var2 == '\\0') {\n            temp_var3 = bfd_get_error();\n            temp_var4 = bfd_errmsg(temp_var3);\n            temp_var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(temp_var6,temp_var4);\n            free(temp_ptr1);\n            free(temp_ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= temp_var9 + 1) {\n            type_code = type_code + 10;\n            temp_ptr1 = (void *)xrealloc(temp_ptr1);\n            temp_ptr2 = (void *)xrealloc(temp_ptr2,(long)(int)type_code << 3);\n          }\n          temp_var12 = *(long *)(temp_var1 + 0x20);\n          *(undefined8 *)((long)temp_ptr1 + (long)temp_var9 * 8) = *(undefined8 *)(temp_var1 + 8);\n          *(long *)((long)temp_ptr2 + (long)temp_var9 * 8) =\n               *(long *)(temp_var1 + 0x10) + *(long *)(temp_var12 + 0x30);\n          temp_var12 = (long)(temp_var9 + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)temp_ptr1 + temp_var12 * 8) = 0;\n      result = debug_make_enum_type_isra_0(temp_ptr1,temp_ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    temp_var4 = debug_make_int_type_isra_0(1,1);\n    temp_var10 = \"unsigned char\";\n    break;\n  case 0xd:\n    temp_var4 = debug_make_int_type_isra_0(2,1);\n    temp_var10 = \"unsigned short\";\n    break;\n  case 0xe:\n    temp_var4 = debug_make_int_type_isra_0(4,1);\n    temp_var10 = \"unsigned int\";\n    break;\n  case 0xf:\n    temp_var4 = debug_make_int_type_isra_0(4,1);\n    temp_var10 = \"unsigned long\";\n    break;\n  case 0x10:\n    temp_var4 = debug_make_float_type_isra_0(0xc);\n    temp_var10 = \"long double\";\n  }\n  result = debug_name_type(type_name,temp_var10,temp_var4);\nLAB_0010e065:\n  *(long *)(type_section + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "bfd_coff_get_syment",
                "dcgettext",
                "xmalloc",
                "debug_make_enum_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "debug_make_array_type.isra.0",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "extraout_var": "extraVar",
                "iVar1": "result",
                "auVar2": "comparisonResult"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int result;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extraVar;\n  undefined comparisonResult [16];\n  \n  length = strlen(string2);\n  result = strncmp(string1,string2,length);\n  comparisonResult._1_7_ = (undefined7)(CONCAT44(extraVar,result) >> 8);\n  comparisonResult[0] = result == 0;\n  comparisonResult._8_8_ = in_RAX;\n  return comparisonResult;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "handle_remove_section_option",
                "FUN_00107880",
                "main",
                "skip_section",
                "stab_demangle_function_name.constprop.0",
                "FUN_0010554f",
                "convert_efi_target",
                "is_dwo_section.constprop.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "handle_set_time_error_0010882c",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSetTimeError_0010882c(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "handle_set_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_0010ebb0",
                "param_2": "moduleName",
                "param_3": "symbolIndex",
                "__s": "symbolName",
                "uVar2": "index",
                "uVar3": "result",
                "__s_00": "formattedSymbol",
                "cVar1": "symbolChar",
                "sVar4": "moduleNameLength",
                "sVar5": "symbolNameLength"
            },
            "code": "\nundefined4 writeSymbol_0010ebb0(undefined8 param_1,char *moduleName,int symbolIndex,undefined8 param_4)\n\n{\n  char symbolChar;\n  uint index;\n  undefined4 result;\n  char *symbolName;\n  size_t moduleNameLength;\n  size_t symbolNameLength;\n  char *formattedSymbol;\n  \n  symbolName = (char *)stab_pop_type();\n  index = symbolIndex - 1;\n  if (index < 4) {\n    result = *(undefined4 *)(CSWTCH_42 + (ulong)index * 4);\n    symbolChar = *(char *)((long)&CSWTCH_43 + (ulong)index);\n    moduleNameLength = strlen(moduleName);\n    symbolNameLength = strlen(symbolName);\n    formattedSymbol = (char *)xmalloc(moduleNameLength + 3 + symbolNameLength);\n    sprintf(formattedSymbol,\"%s:%c%s\",moduleName,(ulong)(uint)(int)symbolChar,symbolName);\n    free(symbolName);\n    result = stab_write_symbol_lto_priv_0(param_1,result,0,param_4,formattedSymbol);\n    if ((char)result != '\\0') {\n      free(formattedSymbol);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_type_and_allocate_memory_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "typeResult",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong createTypeAndAllocateMemory_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long typeResult;\n  long *allocatedMemory;\n  \n  if ((input1 != 0) && (typeResult = debug_make_type_constprop_0(0x13,0), typeResult != 0)) {\n    allocatedMemory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocatedMemory + 0x19) = 0;\n    *allocatedMemory = input1;\n    *(undefined4 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[1] = input2;\n    allocatedMemory[2] = input3;\n    *(undefined *)(allocatedMemory + 3) = input4;\n    *(long **)(typeResult + 0x10) = allocatedMemory;\n    return typeResult;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_and_allocate_memory_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_wildcard_match_00115d70",
                "param_1": "input_string",
                "param_2": "symbol_table",
                "lVar1": "symbol_index",
                "local_18": "symbol",
                "local_10": "is_match"
            },
            "code": "\nundefined check_wildcard_match_00115d70(undefined8 input_string,undefined8 symbol_table)\n\n{\n  long symbol_index;\n  undefined8 symbol;\n  undefined is_match;\n  \n  if (wildcard == '\\0') {\n    symbol_index = htab_find(symbol_table,input_string);\n    is_match = symbol_index != 0;\n  }\n  else {\n    is_match = 0;\n    symbol = input_string;\n    htab_traverse(symbol_table,is_specified_symbol_predicate,&symbol);\n  }\n  return is_match;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "copy_relocations_in_section.cold",
                "FUN_0010554f",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_wildcard_match_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "start_performance_monitoring_00104000",
                "iVar1": "result"
            },
            "code": "\nint startPerformanceMonitoring_00104000(EVP_PKEY_CTX *ctx)\n\n{\n  int result;\n  \n  result = __gmon_start__();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "start_performance_monitoring_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "FUN_00114dc7",
                "display_info.isra.0",
                "stab_demangle_v3_arg",
                "set_times.cold",
                "copy_object.cold",
                "debug_get_real_type.isra.0",
                "FUN_001152b6",
                "debug_record_variable",
                "list_supported_targets",
                "debug_name_type",
                "section_add_load_file.cold",
                "list_matching_formats",
                "stab_typdef.lto_priv.0",
                "parse_number",
                "copy_section.cold",
                "setup_section.cold",
                "main",
                "debug_end_function",
                "copy_relocations_in_section",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "warn_stab",
                "FUN_00105828",
                "bfd_nonfatal_message",
                "FUN_00107976",
                "print_version",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "add_redefine_and_check",
                "debug_find_named_type",
                "copy_file",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "FUN_00116490",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "get_file_size",
                "stab_find_type",
                "debug_tag_type",
                "stab_context",
                "FUN_00104cc1",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "is_strip_section_1.isra.0.cold",
                "add_specific_symbols",
                "finish_stab",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "FUN_0010808f",
                "endian_string",
                "check_new_section_flags.cold",
                "copy_usage",
                "get_file_size.cold",
                "debug_end_block",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "merge_gnu_build_notes",
                "bad_stab",
                "parse_flags.cold",
                "do_display_target",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "stab_bad_demangle",
                "debug_start_block",
                "FUN_00108179",
                "FUN_00104ea2",
                "FUN_00107880",
                "strip_usage",
                "init_section_add.cold",
                "debug_record_line",
                "debug_start_source",
                "stab_find_slot",
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "expandedData",
                "puVar2": "newElement",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long data,undefined8 value,undefined4 flag)\n\n{\n  undefined8 expandedData;\n  undefined8 *newElement;\n  uint currentSize;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    currentSize = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = currentSize;\n    expandedData = xrealloc(*(undefined8 *)(data + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(data + 0x20) = expandedData;\n  }\n  currentSize = *(uint *)(data + 0x28);\n  newElement = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(data + 0x20));\n  *newElement = value;\n  *(undefined4 *)(newElement + 1) = flag;\n  *(uint *)(data + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)newElement >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_and_null_terminate_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyAndNullTerminateString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "init_section_add",
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_symbol_with_params_0010e918",
                "param_1": "symbolTable",
                "param_2": "name",
                "param_3": "value",
                "__s": "type",
                "sVar2": "nameLength",
                "sVar3": "typeLength",
                "__s_00": "formattedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeSymbolWithParams_0010e918(undefined8 symbolTable,char *name,undefined8 value)\n\n{\n  undefined4 result;\n  char *type;\n  size_t nameLength;\n  size_t typeLength;\n  char *formattedString;\n  \n  type = (char *)stab_pop_type();\n  nameLength = strlen(name);\n  typeLength = strlen(type);\n  formattedString = (char *)xmalloc(nameLength + 0x14 + typeLength);\n  sprintf(formattedString,\"%s:c=e%s,%ld\",name,type,value);\n  free(type);\n  result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedString);\n  if ((char)result != '\\0') {\n    free(formattedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_params_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "param_1": "bfdFile",
                "param_2": "sectionHeaders",
                "param_3": "outputBfd",
                "uVar1": "undefined1",
                "uVar2": "undefined8_2",
                "lVar3": "length",
                "iVar4": "count1",
                "iVar5": "count2",
                "cVar6": "skipFlag",
                "uVar7": "undefined8_3",
                "__ptr": "allocatedMemory",
                "lVar8": "index",
                "uVar9": "count3",
                "iVar10": "divisor",
                "uVar11": "offset1",
                "puVar12": "swapTemp",
                "lVar13": "sectionList",
                "puVar14": "ptr1",
                "puVar15": "ptr2",
                "pvVar16": "ptr3",
                "uVar17": "offset2",
                "uVar18": "divisor2",
                "uVar19": "offset3",
                "bVar20": "byteFlag",
                "local_38": "sectionSize",
                "local_30": "sectionBuffer"
            },
            "code": "\nvoid processSection_00116110(undefined8 bfdFile,undefined8 *sectionHeaders,undefined8 outputBfd)\n\n{\n  undefined undefined1;\n  undefined8 undefined8_2;\n  long length;\n  int count1;\n  int count2;\n  char skipFlag;\n  undefined8 undefined8_3;\n  undefined8 *allocatedMemory;\n  long index;\n  ulong count3;\n  int divisor;\n  ulong offset1;\n  undefined *swapTemp;\n  long sectionList;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  void *ptr3;\n  ulong offset2;\n  ulong divisor2;\n  ulong offset3;\n  byte byteFlag;\n  ulong sectionSize;\n  void *sectionBuffer;\n  \n  byteFlag = 0;\n  skipFlag = skip_section(bfdFile,sectionHeaders,1);\n  if (skipFlag != '\\0') {\n    return;\n  }\n  sectionSize = sectionHeaders[8];\n  length = sectionHeaders[0xc];\n  if (((*(byte *)((long)sectionHeaders + 0x25) & 1) == 0) || ((*(byte *)(length + 0x25) & 1) == 0)) {\n    sectionList = find_section_list(*sectionHeaders,0,0x80);\n    if (sectionList == 0) {\n      return;\n    }\n    if ((*(byte *)(sectionList + 0x29) & 1) == 0) {\n      return;\n    }\n    allocatedMemory = (undefined8 *)xmalloc(sectionSize);\n    ptr2 = allocatedMemory;\n    if (7 < sectionSize) {\n      for (divisor2 = sectionSize >> 3; divisor2 != 0; divisor2 = divisor2 - 1) {\n        *ptr2 = 0;\n        ptr2 = ptr2 + (ulong)byteFlag * -2 + 1;\n      }\n    }\n    ptr1 = ptr2;\n    if ((sectionSize & 4) != 0) {\n      ptr1 = (undefined8 *)((long)ptr2 + (ulong)byteFlag * -8 + 4);\n      *(undefined4 *)ptr2 = 0;\n    }\n    ptr2 = ptr1;\n    if ((sectionSize & 2) != 0) {\n      ptr2 = (undefined8 *)((long)ptr1 + (ulong)byteFlag * -4 + 2);\n      *(undefined2 *)ptr1 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)ptr2 = 0;\n    }\n    skipFlag = bfd_set_section_contents(outputBfd,length,allocatedMemory,0);\n    if (skipFlag != '\\0') {\n      free(allocatedMemory);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputBfd,length,0);\n    free(allocatedMemory);\n    return;\n  }\n  sectionBuffer = (void *)0x0;\n  skipFlag = bfd_get_full_section_contents(bfdFile,sectionHeaders,&sectionBuffer);\n  if ((skipFlag == '\\0') ||\n     (skipFlag = bfd_convert_section_contents(bfdFile,sectionHeaders,outputBfd,&sectionBuffer,&sectionSize),\n     divisor = reverse_bytes, skipFlag == '\\0')) {\n    bfd_set_section_size(length,0);\n    status = 1;\n    bfd_nonfatal_message(0,bfdFile,sectionHeaders,0);\n    free(sectionBuffer);\n    return;\n  }\n  count1 = copy_width;\n  count2 = copy_byte;\n  if (reverse_bytes != 0) {\n    divisor2 = (ulong)reverse_bytes;\n    if (sectionSize % divisor2 != 0) {\n      undefined8_2 = *sectionHeaders;\n      undefined8_3 = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(undefined8_3,undefined8_2,divisor);\n    }\n    divisor = reverse_bytes / 2;\n    offset1 = 0;\n    while (offset3 = offset1, count1 = copy_width, count2 = copy_byte, offset3 < sectionSize) {\n      offset1 = divisor2 + offset3;\n      offset2 = offset1;\n      for (count3 = 0; count3 < (ulong)(long)divisor; count3 = count3 + 1) {\n        offset2 = offset2 - 1;\n        swapTemp = (undefined *)(offset3 + count3 + (long)sectionBuffer);\n        undefined1 = *swapTemp;\n        *swapTemp = *(undefined *)((long)sectionBuffer + offset2);\n        *(undefined *)((long)sectionBuffer + offset2) = undefined1;\n      }\n    }\n  }\n  copy_width = count1;\n  copy_byte = count2;\n  if (-1 < count2) {\n    divisor2 = (ulong)interleave;\n    divisor = (int)((ulong)sectionHeaders[7] % divisor2);\n    offset1 = ((long)count2 - (long)divisor) + (long)sectionBuffer;\n    if (count2 < divisor) {\n      offset1 = offset1 + divisor2;\n    }\n    sectionList = (sectionSize + (long)sectionBuffer) - offset1;\n    ptr3 = sectionBuffer;\n    for (; offset1 < sectionSize + (long)sectionBuffer; offset1 = offset1 + divisor2) {\n      for (index = 0; ((int)index < count1 && (index != sectionList)); index = index + 1) {\n        *(undefined *)((long)ptr3 + index) = *(undefined *)(offset1 + index);\n      }\n      ptr3 = (void *)((long)ptr3 + index);\n      sectionList = sectionList - divisor2;\n    }\n    sectionSize = ((((divisor2 - 1) + sectionSize) - (long)count2) / divisor2) * (long)count1;\n    divisor2 = *(ulong *)(length + 0x38) / divisor2;\n    *(ulong *)(length + 0x38) = divisor2;\n    if (count2 < divisor) {\n      *(ulong *)(length + 0x38) = divisor2 + 1;\n      skipFlag = bfd_set_section_contents(outputBfd,length,sectionBuffer,0,sectionSize);\n      if (skipFlag == '\\0') {\n        free_memory_and_set_status_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  skipFlag = bfd_set_section_contents(outputBfd,length,sectionBuffer,0,sectionSize);\n  if (skipFlag == '\\0') {\n    free_memory_and_set_status_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionBuffer);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "copy_section.cold",
                "bfd_nonfatal_message",
                "find_section_list",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "skip_section",
                "xmalloc",
                "free",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "copy_relocations_in_section",
                "do_display_target",
                "bfd_nonfatal_message",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",programName);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",programName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_value",
                "param_3": "unused",
                "param_4": "return_address",
                "lVar1": "current_block",
                "uVar2": "debug_result",
                "pcVar3": "error_message"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_value,undefined8 unused,undefined8 return_address)\n\n{\n  long current_block;\n  undefined8 debug_result;\n  char *error_message;\n  undefined auVar4 [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_value;\n      debug_result = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  debug_result = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",debug_result);\n  debug_result = 0;\nLAB_0010bf84:\n  auVar4._8_8_ = return_address;\n  auVar4._0_8_ = debug_result;\n  return auVar4;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "FUNC_0010c95e"
            },
            "code": "\nundefined8 FUNC_0010c95e(undefined8 *param_1,byte **param_2,long *param_3)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  char cVar7;\n  uint uVar8;\n  byte *pbVar9;\n  long lVar10;\n  undefined8 uVar11;\n  char *pcVar12;\n  size_t sVar13;\n  ulong uVar14;\n  void *__ptr;\n  long lVar15;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pcVar19;\n  byte *pbVar20;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    pbVar20 = *param_2;\n    bVar1 = *pbVar20;\n    if ('T' < (char)bVar1) break;\n    if ((char)bVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(bVar1) {\n    case 0x41:\n      lVar15 = 0;\n      pbVar3 = pbVar20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x46:\n      *param_2 = pbVar20 + 1;\n      if (param_3 == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      cVar7 = stab_demangle_args(param_1,param_2,ppcVar18,puVar16);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        lVar15 = debug_make_function_type_isra_0(*param_3,local_40[0],local_48 & 0xff);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *param_2 = pbVar20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *param_2 = pbVar20 + 1;\n      if (((&_sch_istable)[(ulong)pbVar20[1] * 2] & 4) == 0) {\n        if (pbVar20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_qualified(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uVar8 = stab_demangle_count(param_2);\n        pbVar3 = *param_2;\n        sVar13 = strlen((char *)pbVar3);\n        if (sVar13 < uVar8) goto switchD_0010cdf9_caseD_60;\n        *param_2 = pbVar3 + uVar8;\n        if ((param_3 != (long *)0x0) &&\n           (local_40[0] = (char *)stab_find_tagged_type(*param_1,param_1[1],pbVar3,uVar8,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      bVar2 = **param_2;\n      if (bVar1 == 0x4d) {\n        if ((bVar2 == 0x43) || (bVar2 == 0x56)) {\n          *param_2 = *param_2 + 1;\n        }\n        if (**param_2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *param_2 = *param_2 + 1;\n        if (param_3 == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        cVar7 = stab_demangle_args(param_1,param_2,puVar16,puVar17);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        if (bVar1 != 0x4d) {\n          lVar15 = debug_make_offset_type_isra_0(local_40[0],*param_3);\n          *param_3 = lVar15;\n          return 1;\n        }\n        lVar15 = debug_make_method_type_isra_0(*param_3,local_40[0],local_48,local_49);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uVar11 = stab_demangle_qualified(param_1,param_2,param_3);\n      return uVar11;\n    case 0x52:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_reference_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x54:\n      *param_2 = pbVar20 + 1;\n      cVar7 = stab_demangle_get_count(param_2,&local_48);\n      if (cVar7 != '\\0') {\n        if ((uint)local_48 < *(uint *)(param_1 + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + param_1[4]);\n          cVar7 = FUNC_0010c95e(param_1,local_40,param_3);\n          if (cVar7 == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (bVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *param_2 = pbVar20 + 1;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar15 = debug_make_pointer_type_isra_0(*param_3);\n    *param_3 = lVar15;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bVar6 = false;\n  bVar4 = false;\n  cVar7 = '\\0';\n  bVar5 = false;\n  do {\n    pbVar3 = *param_2;\n    bVar1 = *pbVar3;\n    if (bVar1 == 0x55) {\n      cVar7 = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)bVar1) {\n      if (bVar1 == 0x56) {\n        bVar6 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)bVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)bVar1 < '_') goto LAB_0010cdfb;\n      switch(bVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (param_3 == (long *)0x0) {\nLAB_0010d0aa:\n          *param_2 = pbVar3 + 1;\n          return 1;\n        }\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120436);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_type_constprop_0(6,4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned char\";\n        if ((cVar7 == '\\0') && (pcVar19 = \"char\", bVar4)) {\n          pcVar19 = \"signed char\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(1,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"float\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned int\";\n        pcVar12 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long unsigned int\";\n        pcVar12 = \"long int\";\nLAB_0010ced2:\n        if (cVar7 == '\\0') {\n          pcVar19 = pcVar12;\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(4,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pcVar19 = \"long double\";\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(8);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"short unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"short int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_template(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        sVar13 = strlen(local_40[0]);\n        lVar15 = stab_find_tagged_type(*param_1,param_1[1],local_40[0],sVar13 & 0xffffffff,9);\n        *param_3 = lVar15;\n        free(local_40[0]);\n        lVar15 = *param_3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120495);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_void_type_isra_0();\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"__wchar_t\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,1);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long long unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"long long int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(8,cVar7);\n          *param_3 = lVar15;\n        }\n      }\n      *param_2 = *param_2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (bVar1 == 0x43) {\n      bVar5 = true;\n      goto LAB_0010cd84;\n    }\n    if (bVar1 != 0x53) goto LAB_0010cdc5;\n    bVar4 = true;\nLAB_0010cd84:\n    *param_2 = pbVar3 + 1;\n  } while( true );\nLAB_0010ca26:\n  pbVar9 = pbVar3 + 1;\n  *param_2 = pbVar9;\n  bVar1 = *pbVar9;\n  if (bVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (bVar1 == 0x5f) {\n    *param_2 = pbVar3 + 2;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar10 = debug_find_named_type(*param_1,\"int\");\n    if (lVar10 == 0) {\n      lVar10 = debug_make_int_type_isra_0(4,0);\n    }\n    lVar15 = debug_make_array_type_isra_0(*param_3,lVar10,0,lVar15,0);\n    *param_3 = lVar15;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)bVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  lVar15 = lVar15 * 10 + (long)((char)bVar1 + -0x30);\n  pbVar3 = pbVar9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)bVar1 < ':') {\n    if ((char)bVar1 < '0') {\n      if (bVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(pbVar20);\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((bVar1 != 0x47) || (*param_2 = pbVar3 + 1, ((&_sch_istable)[(ulong)pbVar3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbVar20 = *param_2;\n  uVar8 = stab_demangle_count(param_2);\n  pbVar3 = *param_2;\n  sVar13 = strlen((char *)pbVar3);\n  uVar14 = (ulong)uVar8;\n  if (uVar14 <= sVar13) {\n    *param_2 = pbVar3 + uVar14;\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    __ptr = (void *)savestring(pbVar3,uVar14);\n    lVar15 = debug_find_named_type(*param_1,__ptr);\n    *param_3 = lVar15;\n    free(__ptr);\n    if (*param_3 == 0) {\n      lVar15 = stab_find_tagged_type(*param_1,param_1[1],pbVar3,(int)*param_2 - (int)pbVar3,0);\n      *param_3 = lVar15;\njoined_r0x0010d1d8:\n      if (lVar15 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bVar5) {\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    if (bVar6) {\n      lVar15 = debug_make_volatile_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(pbVar20);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "debug_make_void_type.isra.0",
                "stab_demangle_get_count",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "savestring",
                "strlen",
                "stab_demangle_args",
                "debug_make_reference_type.isra.0",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "stab_demangle_count",
                "stab_bad_demangle",
                "debug_make_type.constprop.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_template",
                "stab_demangle_arg"
            ],
            "imported": false,
            "current_name": "FUNC_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "bfd_get_arch",
                "bfd_get_full_section_contents",
                "copy_object.cold",
                "fwrite",
                "non_fatal",
                "fopen",
                "bfd_set_format",
                "check_new_section_flags",
                "free",
                "setup_section",
                "strerror",
                "merge_gnu_build_notes",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "xmalloc",
                "bfd_create_gnu_debuglink_section",
                "FUN_00105828",
                "__errno_location",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_map_over_sections",
                "fclose",
                "FUN_0010554f",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "errorText",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 errorText;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoLocation = __errno_location();\n    errorMessage = strerror(*errnoLocation);\n    errorText = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(errorText,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorMessageText",
                "in_R10": "additionalInfo",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorMessage)\n\n{\n  int error;\n  undefined8 errorMessageText;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",programName,errorMessage,errorMessageText,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",programName,errorMessageText,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00104ea2",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "do_display_target.cold",
                "do_display_target",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "paramArray",
                "param_2": "paramFlag",
                "param_3": "paramInt",
                "param_4": "paramString",
                "param_5": "inputString",
                "lVar1": "tempVar1",
                "uVar2": "error",
                "lVar3": "tempVar2",
                "uVar4": "errorString",
                "uVar5": "translatedString",
                "sVar6": "stringLength",
                "lVar7": "offset",
                "local_44": "localVar1",
                "uStack_40": "uStack40",
                "uStack_3f": "uStack3f",
                "uStack_3e": "uStack3e",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *paramArray,undefined paramFlag,int paramInt,undefined8 paramString,char *inputString)\n\n{\n  long tempVar1;\n  undefined4 error;\n  long tempVar2;\n  undefined8 errorString;\n  undefined8 translatedString;\n  size_t stringLength;\n  long offset;\n  undefined4 localVar1;\n  undefined uStack40;\n  undefined uStack3f;\n  undefined2 uStack3e;\n  undefined4 localVar2 [3];\n  \n  if (inputString == (char *)0x0) {\n    offset = 0;\n  }\n  else {\n    tempVar2 = bfd_hash_lookup(paramArray + 7,inputString,1,1);\n    if (tempVar2 == 0) {\n      error = bfd_get_error();\n      errorString = bfd_errmsg(error);\n      translatedString = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(translatedString,errorString);\n      return 0;\n    }\n    offset = *(long *)(tempVar2 + 0x20);\n    if (offset == -1) {\n      offset = paramArray[6];\n      tempVar1 = paramArray[5];\n      *(long *)(tempVar2 + 0x20) = offset;\n      if (tempVar1 == 0) {\n        paramArray[4] = tempVar2;\n      }\n      else {\n        *(long *)(tempVar1 + 0x18) = tempVar2;\n      }\n      paramArray[5] = tempVar2;\n      stringLength = strlen(inputString);\n      paramArray[6] = offset + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(offset,&localVar1);\n  uStack3f = 0;\n  uStack40 = paramFlag;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)paramInt,&uStack3e);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(paramString,localVar2);\n  if ((ulong)paramArray[3] < paramArray[2] + 0xcU) {\n    paramArray[3] = paramArray[3] * 2;\n    offset = xrealloc(paramArray[1]);\n    paramArray[1] = offset;\n  }\n  offset = paramArray[2];\n  tempVar2 = paramArray[1];\n  *(ulong *)(tempVar2 + offset) = CONCAT26(uStack3e,CONCAT15(uStack3f,CONCAT14(uStack40,localVar1)));\n  *(undefined4 *)(tempVar2 + 8 + offset) = localVar2[0];\n  paramArray[2] = paramArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)offset >> 8),1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "bfd_hash_lookup",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionString",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "errorString",
                "pcVar3": "commaIndex",
                "pcVar4": "nextSection",
                "sVar5": "sectionLength",
                "iVar6": "length",
                "uVar7": "flags",
                "auVar8": "resultStruct"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionString,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 errorString;\n  char *commaIndex;\n  char *nextSection;\n  size_t sectionLength;\n  int length;\n  uint flags;\n  undefined resultStruct [16];\n  \n  flags = 0;\n  do {\n    commaIndex = strchr(sectionString,0x2c);\n    if (commaIndex == (char *)0x0) {\n      sectionLength = strlen(sectionString);\n      length = (int)sectionLength;\n      nextSection = (char *)0x0;\n    }\n    else {\n      nextSection = commaIndex + 1;\n      length = (int)commaIndex - (int)sectionString;\n    }\n    sectionLength = (size_t)length;\n    result = strncasecmp(\"alloc\",sectionString,sectionLength);\n    if (result == 0) {\n      flags = flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionString,sectionLength);\n      if (result == 0) {\n        flags = flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionString,sectionLength);\n        if (result == 0) {\n          flags = flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionString,sectionLength);\n          if (result == 0) {\n            flags = flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionString,sectionLength);\n            if (result == 0) {\n              flags = flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionString,sectionLength);\n              if (result == 0) {\n                flags = flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionString,sectionLength);\n                if (result == 0) {\n                  flags = flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionString,sectionLength);\n                  if (result == 0) {\n                    flags = flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionString,sectionLength);\n                    if (result == 0) {\n                      flags = flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionString,sectionLength);\n                      if (result == 0) {\n                        flags = flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionString,sectionLength);\n                        if (result == 0) {\n                          flags = flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionString,sectionLength);\n                          if (result == 0) {\n                            flags = flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionString,sectionLength);\n                            if (result != 0) {\n                              commaIndex = (char *)xmalloc((long)(length + 1));\n                              strncpy(commaIndex,sectionString,sectionLength);\n                              commaIndex[sectionLength] = '\\0';\n                              errorString = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(errorString,commaIndex);\n                              errorString = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(errorString,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            flags = flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionString = nextSection;\n  } while (nextSection != (char *)0x0);\n  resultStruct._4_4_ = 0;\n  resultStruct._0_4_ = flags;\n  resultStruct._8_8_ = param4;\n  return resultStruct;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_modified_string_001125fa",
                "param_1": "arguments",
                "uVar1": "combinedStringLength",
                "ppcVar2": "pointerToArgArray",
                "sVar3": "argArrayLength",
                "sVar4": "originalStringLength",
                "__s": "originalString"
            },
            "code": "\nchar * getModifiedString_001125fa(char **arguments)\n\n{\n  ulong combinedStringLength;\n  char **pointerToArgArray;\n  size_t argArrayLength;\n  size_t originalStringLength;\n  char *originalString;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  pointerToArgArray = (char **)arguments[0x1d];\n  originalString = *arguments;\n  if ((pointerToArgArray != (char **)0x0) && ((*(byte *)((long)pointerToArgArray + 0x49) & 0x10) == 0)) {\n    argArrayLength = strlen(*pointerToArgArray);\n    originalStringLength = strlen(originalString);\n    combinedStringLength = argArrayLength + 3 + originalStringLength;\n    if (curr_1 < combinedStringLength) {\n      if (curr_1 != 0) {\n        free(buf_0);\n      }\n      curr_1 = (combinedStringLength >> 1) + combinedStringLength;\n      buf_0 = (char *)xmalloc();\n    }\n    sprintf(buf_0,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    originalString = buf_0;\n  }\n  return originalString;\n}\n\n",
            "called": [
                "strlen",
                "__assert_fail",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "copy_object",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "get_modified_string_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "stab_demangle_template",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "bfd_nonfatal_message",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "is_one_00108f05"
            },
            "code": "\nundefined is_one_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "is_one_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_saved_stabs_00108863",
                "puVar1": "currentStab",
                "puVar2": "nextStab",
                "saved_stabs": "stabArray",
                "saved_stabs_index": "stabArrayIndex"
            },
            "code": "\nvoid clearSavedStabs_00108863(void)\n\n{\n  undefined4 *currentStab;\n  undefined4 *nextStab;\n  \n  currentStab = (undefined4 *)stabArray;\n  do {\n    nextStab = currentStab + 6;\n    free(*(void **)(currentStab + 4));\n    *(undefined8 *)(currentStab + 4) = 0;\n    currentStab = nextStab;\n  } while (nextStab != &stabArrayIndex);\n  stabArrayIndex = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_saved_stabs_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_obj",
                "param_2": "filename",
                "iVar1": "cmp_result",
                "uVar2": "result",
                "puVar3": "list",
                "puVar4": "current_node",
                "lVar5": "loop_counter",
                "puVar6": "head",
                "pcVar7": "current_filename",
                "puVar8": "prev_node",
                "bVar9": "is_zero"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_obj,char *filename)\n\n{\n  int cmp_result;\n  undefined8 result;\n  undefined8 *list;\n  undefined8 *current_node;\n  long loop_counter;\n  undefined8 *head;\n  char *current_filename;\n  undefined8 *prev_node;\n  byte is_zero;\n  \n  is_zero = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_obj + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (list = *(undefined8 **)(*(long *)(source_obj + 8) + 8); list != (undefined8 *)0x0;\n        list = (undefined8 *)*list) {\n      cmp_result = filename_cmp(list[1],current_filename);\n      if (cmp_result == 0) goto LAB_00108fad;\n    }\n    list = (undefined8 *)xmalloc(0x18);\n    head = *(undefined8 **)(source_obj + 0x10);\n    prev_node = list;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)prev_node = 0;\n      prev_node = (undefined8 *)((long)prev_node + (ulong)is_zero * -8 + 4);\n    }\n    list[1] = current_filename;\n    prev_node = (undefined8 *)*head;\n    while (current_node = prev_node, current_node != (undefined8 *)0x0) {\n      head = current_node;\n      prev_node = (undefined8 *)*current_node;\n    }\n    *head = list;\nLAB_00108fad:\n    *(undefined8 **)(source_obj + 0x10) = list;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_and_free_memory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectoryAndFreeMemory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "copy_file.cold"
            ],
            "imported": false,
            "current_name": "remove_directory_and_free_memory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "update_sections_00114190",
                "param_1": "input_ptr",
                "param_2": "flag",
                "param_3": "flags",
                "uVar1": "temp_var1",
                "plVar2": "temp_var2",
                "pplVar3": "temp_ptr1",
                "iVar4": "temp_var3",
                "uVar5": "temp_var4",
                "pplVar6": "current_sections",
                "pplVar7": "previous_sections",
                "pplVar8": "next_sections"
            },
            "code": "\nlong ** update_sections_00114190(long *input_ptr,char flag,uint flags)\n\n{\n  uint temp_var1;\n  long *temp_var2;\n  long **temp_ptr1;\n  int temp_var3;\n  undefined8 temp_var4;\n  long **current_sections;\n  long **previous_sections;\n  long **next_sections;\n  \n  previous_sections = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      current_sections = (long **)*previous_sections;\n      if (current_sections == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_sections = (long **)0x0;\n    }\n    else {\n      temp_var2 = change_sections[1];\n      if (*(char *)temp_var2 == '!') {\n        temp_var3 = fnmatch((char *)((long)temp_var2 + 1),(char *)input_ptr,0);\n        current_sections = previous_sections;\n        if (temp_var3 == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      temp_var3 = fnmatch((char *)temp_var2,(char *)input_ptr,0);\n      if (temp_var3 != 0) goto LAB_001141e5;\n      current_sections = (long **)*previous_sections;\n      if (current_sections == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_sections + 0x14)) != 0) {\n      temp_var2 = current_sections[1];\n      if (*(char *)temp_var2 == '!') {\n        temp_var3 = fnmatch((char *)((long)temp_var2 + 1),(char *)input_ptr,0);\n        if (temp_var3 == 0) {\nLAB_0011438e:\n          *(undefined *)(current_sections + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        temp_var3 = fnmatch((char *)temp_var2,(char *)input_ptr,0);\n        if ((previous_sections == (long **)0x0) && (temp_var3 == 0)) {\n          next_sections = (long **)*current_sections;\n          previous_sections = current_sections;\n          if (next_sections == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_sections = (long **)*current_sections;\n    current_sections = previous_sections;\n    if (next_sections != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    temp_var3 = strcmp((char *)change_sections[1],(char *)input_ptr);\n    if (temp_var3 == 0) {\nLAB_001143cd:\n      temp_var1 = *(uint *)((long)previous_sections + 0x14);\n      if ((((temp_var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((temp_var1 & 2) != 0)))) {\n        temp_var4 = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(temp_var4,input_ptr);\n      }\n      if ((((temp_var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        temp_var4 = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(temp_var4,input_ptr);\n      }\n      if ((((temp_var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_sections + 0x14) = temp_var1 | flags;\n        return previous_sections;\n      }\n      temp_var4 = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(temp_var4,input_ptr);\n    }\n    previous_sections = (long **)*previous_sections;\n    if (previous_sections == (long **)0x0) goto LAB_001142a9;\n    temp_var3 = strcmp((char *)previous_sections[1],(char *)input_ptr);\n    if (temp_var3 == 0) goto LAB_001143cd;\n    next_sections = (long **)*previous_sections;\n    current_sections = (long **)0x0;\n    if (next_sections == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_sections = current_sections;\n      if (flag == '\\0') {\n        while (current_sections = next_sections, temp_ptr1 = previous_sections, next_sections = current_sections,\n              (flags & *(uint *)((long)current_sections + 0x14)) != 0) {\n          temp_var2 = current_sections[1];\n          if (*(char *)temp_var2 == '!') {\n            temp_var3 = fnmatch((char *)((long)temp_var2 + 1),(char *)input_ptr,0);\n            if (temp_var3 == 0) goto LAB_0011438e;\n            next_sections = (long **)*current_sections;\n            if ((long **)*current_sections == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            temp_var3 = fnmatch((char *)temp_var2,(char *)input_ptr,0);\n            if ((previous_sections == (long **)0x0) && (temp_var3 == 0)) {\n              previous_sections = current_sections;\n              next_sections = (long **)*current_sections;\n              if ((long **)*current_sections == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_sections = (long **)*current_sections;\n              if ((long **)*current_sections == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        temp_var3 = strcmp((char *)next_sections[1],(char *)input_ptr);\n        temp_ptr1 = current_sections;\n        previous_sections = next_sections;\n        if (temp_var3 == 0) goto LAB_001143cd;\n      }\n      current_sections = temp_ptr1;\n      next_sections = (long **)*next_sections;\n      previous_sections = current_sections;\n    } while (next_sections != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      current_sections = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_sections + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_sections + 2) = 0;\n      *(uint *)((long)current_sections + 0x14) = flags;\n      current_sections[5] = (long *)0x0;\n      previous_sections = current_sections;\n      *current_sections = (long *)change_sections;\n      change_sections = previous_sections;\n      current_sections[1] = input_ptr;\n      return current_sections;\n    }\n  }\nLAB_00114212:\n  if (previous_sections == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_sections + 2) = 1;\n  return previous_sections;\n}\n\n",
            "called": [
                "find_section_list.cold",
                "dcgettext",
                "fatal",
                "fnmatch",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "copy_section",
                "handle_remove_section_option",
                "setup_section.cold",
                "FUN_00107880",
                "main",
                "copy_relocations_in_section",
                "is_strip_section_1.isra.0",
                "setup_section"
            ],
            "imported": false,
            "current_name": "update_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "parse_build_attribute_notes_00116490",
                "param_2": "note_size",
                "param_3": "note_data",
                "param_4": "note_length",
                "uVar1": "return_value",
                "uVar2": "temp_variable",
                "uVar3": "temp_variable2",
                "bVar4": "condition",
                "puVar5": "pointer",
                "iVar6": "index",
                "lVar7": "temp_variable3",
                "uVar8": "temp_variable4",
                "in_RAX": "note_type",
                "uVar9": "temp_variable5",
                "uVar10": "temp_variable6",
                "uVar11": "temp_variable7",
                "uVar12": "temp_variable8",
                "__ptr": "dynamic_array",
                "uVar13": "temp_variable9",
                "unaff_RBX": "remaining_data_size2",
                "unaff_RBP": "initial_value2",
                "puVar14": "pointer",
                "cVar16": "character",
                "puVar17": "pointer",
                "puVar18": "pointer",
                "in_R11": "dynamic_array_size",
                "unaff_R12": "pointer",
                "puVar19": "pointer",
                "unaff_R13": "temp_variable10",
                "__nmemb": "number_of_elements",
                "unaff_R14": "pointer",
                "unaff_retaddr": "return_address",
                "param_7": "buffer_size",
                "param_8": "condition2",
                "param_9": "initial_value3",
                "in_stack_00000020": "buffer_size2",
                "in_stack_00000028": "pointer",
                "in_stack_00000030": "pointer",
                "in_stack_00000038": "condition3",
                "in_stack_00000040": "condition4",
                "in_stack_00000048": "pointer"
            },
            "code": "\nulong parse_build_attribute_notes_00116490(undefined8 param_1,ulong note_size,ulong note_data,long note_length)\n\n{\n  undefined8 return_value;\n  undefined8 temp_variable;\n  ulong temp_variable2;\n  bool condition;\n  ulong *pointer;\n  int index;\n  long temp_variable3;\n  undefined8 temp_variable4;\n  ulong note_type;\n  ulong temp_variable5;\n  ulong temp_variable6;\n  ulong temp_variable7;\n  ulong temp_variable8;\n  undefined *dynamic_array;\n  ulong temp_variable9;\n  ulong remaining_data_size2;\n  ulong initial_value2;\n  ulong *pointer;\n  undefined *preturn_value5;\n  char character;\n  undefined *pointer;\n  undefined *pointer;\n  ulong dynamic_array_size;\n  ulong *pointer;\n  ulong *pointer;\n  ulong temp_variable10;\n  size_t number_of_elements;\n  undefined8 *pointer;\n  ulong *ptemp_variable0;\n  byte bVar21;\n  int iVar22;\n  ulong return_address;\n  ulong buffer_size;\n  uint condition2;\n  ulong initial_value3;\n  ulong buffer_size2;\n  ulong *pointer;\n  undefined *pointer;\n  uint condition3;\n  uint condition4;\n  undefined8 *pointer;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  temp_variable3 = note_length;\n  temp_variable6 = initial_value2;\n  temp_variable9 = temp_variable10;\n  if (note_type == 0) {\n    if (note_size == 0x100) {\n      pointer[7] = return_address;\n      temp_variable7 = return_address;\nLAB_001164af:\n      temp_variable5 = temp_variable10;\n      temp_variable9 = temp_variable10;\n      return_address = temp_variable7;\n    }\n    else {\n      pointer[7] = initial_value3;\nLAB_0011669e:\n      temp_variable6 = initial_value2;\n      temp_variable5 = initial_value2;\n    }\nLAB_001164bb:\n    pointer[8] = temp_variable5;\n    if (*(char *)((pointer[3] - 1) + note_data) != '\\0') {\n      temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointer = pointer + 9;\n    if (0xb < remaining_data_size2) {\n      temp_variable5 = (**(code **)(pointer[1] + 0x40))(temp_variable3);\n      *pointer = temp_variable5;\n      temp_variable5 = (**(code **)(pointer[1] + 0x40))(temp_variable3 + 4);\n      pointer[10] = temp_variable5;\n      note_size = (**(code **)(pointer[1] + 0x40))(temp_variable3 + 8);\n      note_data = *pointer;\n      pointer[0xb] = note_size;\n      note_type = pointer[10];\n      temp_variable5 = note_data + 3 & 0xfffffffffffffffc;\n      pointer[0xf] = temp_variable5;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_size - 0x100) {\n        temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp_variable7 = temp_variable5 + note_type + 0xc;\n      if (remaining_data_size2 < temp_variable7) {\n        temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_data < 2) {\n        temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      pointer[0xc] = temp_variable3 + 0xc;\n      dynamic_array_size = temp_variable3 + 0xc + temp_variable5;\n      pointer[0xd] = dynamic_array_size;\n      remaining_data_size2 = remaining_data_size2 + (-0xc - (temp_variable5 + note_type));\n      note_length = temp_variable3 + temp_variable7;\n      initial_value2 = temp_variable6;\n      pointer = pointer;\n      temp_variable10 = temp_variable9;\n      if (note_data != 2) {\n        if (*(char *)(temp_variable3 + 0xc) == '$') {\n          if ((*(char *)(temp_variable3 + 0xd) == '\\x01') && (*(char *)(temp_variable3 + 0xe) == '1')) {\n            temp_variable6 = parse_build_attribute_notes_00116490();\n            return temp_variable6;\n          }\n        }\n        else if ((((4 < note_data) && (*(char *)(temp_variable3 + 0xc) == 'G')) &&\n                 (*(char *)(temp_variable3 + 0xd) == 'A')) &&\n                ((*(char *)(temp_variable3 + 0xe) == '$' && (*(char *)(temp_variable3 + 0xf) == '\\x01')))) {\n          if (*(char *)(temp_variable3 + 0x10) == '2') {\n            temp_variable6 = parse_build_attribute_notes_00116490();\n            return temp_variable6;\n          }\n          if (*(char *)(temp_variable3 + 0x10) == '3') {\n            temp_variable6 = parse_build_attribute_notes_00116490();\n            return temp_variable6;\n          }\n          temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_data_size2 != 0) {\n      temp_variable3 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((condition3 | condition4 | condition2) == 0) {\n      return_value = *pointer;\n      temp_variable = *pointer;\n      temp_variable4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(temp_variable4,return_value,temp_variable);\nLAB_0011671b:\n      number_of_elements = ((long)pointer - (long)pointer >> 3) * -0x71c71c71c71c71c7;\n      qsort(pointer,number_of_elements,0x48,compare_gnu_build_notes);\n      for (pointer = pointer; pointer < pointer; pointer = pointer + 9) {\n        temp_variable6 = pointer[2];\n        if (temp_variable6 != 0) {\n          temp_variable9 = pointer[7];\n          temp_variable5 = pointer[8];\n          ptemp_variable0 = pointer;\n          iVar22 = 0;\n          if (temp_variable9 == temp_variable5) {\n            pointer[2] = 0;\n          }\n          else {\n            do {\n              do {\n                pointer = ptemp_variable0;\n                ptemp_variable0 = pointer + -9;\n                if (ptemp_variable0 < pointer) goto LAB_001167f5;\n                temp_variable7 = pointer[-7];\n              } while (temp_variable7 == 0);\n              if ((*ptemp_variable0 != *pointer) ||\n                 (index = memcmp((void *)pointer[-6],(void *)pointer[3],*pointer), index != 0))\n              break;\n              temp_variable2 = pointer[-2];\n              temp_variable8 = pointer[-1];\n              if (temp_variable9 == temp_variable2) {\n                if (temp_variable5 == temp_variable8) {\n                  pointer[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp_variable5 <= temp_variable8) {\n                  pointer[2] = 0;\n                  break;\n                }\n                if (temp_variable8 < temp_variable9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp_variable8) ||\n                     (temp_variable9 <= (temp_variable8 + 0xf & 0xfffffffffffffff0))) goto extract_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((temp_variable6 == 0x101) == (temp_variable7 == 0x101)) {\n                  if (temp_variable8 <= temp_variable5) {\n                    temp_variable8 = temp_variable5;\n                  }\n                  if (temp_variable2 < temp_variable9) {\n                    temp_variable9 = temp_variable2;\n                  }\n                  pointer[-1] = temp_variable8;\n                  pointer[-2] = temp_variable9;\n                  pointer[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (temp_variable2 <= temp_variable9) goto LAB_001167a6;\n                if (temp_variable8 < temp_variable9) goto LAB_0010852c;\n                if (temp_variable5 < temp_variable9) {\n                  if ((0xfffffffffffffff0 < temp_variable5) || (temp_variable2 <= (temp_variable5 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp_variable5 != temp_variable8) goto LAB_001167b8;\n              }\nextract_build_notes_00116852:\n              condition = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (condition);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(pointer,number_of_elements,0x48,sort_gnu_build_notes);\n      dynamic_array = (undefined *)xmalloc(buffer_size2 * 2);\n      buffer_size = 0;\n      initial_value3 = 0;\n      pointer = dynamic_array;\n      for (pointer = pointer; pointer < pointer; pointer = pointer + 9) {\n        if (pointer[2] != 0) {\n          pointer = pointer + 4;\n          preturn_value5 = pointer + 0xc;\n          if ((pointer[7] == initial_value3) && (pointer[8] == buffer_size)) {\n            (**(code **)(pointer[1] + 0x50))(*pointer,pointer);\n            (**(code **)(pointer[1] + 0x50))(0,pointer);\n            (**(code **)(pointer[1] + 0x50))(pointer[2],pointer + 8);\n            temp_variable9 = pointer[6];\n            temp_variable6 = *pointer;\n            pointer = (undefined *)pointer[3];\n            pointer = preturn_value5;\n            for (temp_variable5 = temp_variable6; temp_variable5 != 0; temp_variable5 = temp_variable5 - 1) {\n              *pointer = *pointer;\n              pointer = pointer + (ulong)bVar21 * -2 + 1;\n              pointer = pointer + (ulong)bVar21 * -2 + 1;\n            }\n            if (temp_variable6 < temp_variable9) {\n              for (temp_variable3 = temp_variable9 - temp_variable6; temp_variable3 != 0; temp_variable3 = temp_variable3 + -1) {\n                *pointer = 0;\n                pointer = pointer + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            pointer = preturn_value5 + temp_variable9;\n          }\n          else {\n            (**(code **)(pointer[1] + 0x50))();\n            if (*(int *)(pointer[1] + 8) == 5) {\n              character = (*(char *)(pointer[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              character = '\\b';\n            }\n            (**(code **)(pointer[1] + 0x50))(character,pointer);\n            (**(code **)(pointer[1] + 0x50))(pointer[2],pointer + 8);\n            temp_variable6 = *pointer;\n            pointer = (undefined *)pointer[3];\n            pointer = preturn_value5;\n            for (temp_variable9 = temp_variable6; temp_variable9 != 0; temp_variable9 = temp_variable9 - 1) {\n              *pointer = *pointer;\n              pointer = pointer + (ulong)bVar21 * -2 + 1;\n              pointer = pointer + (ulong)bVar21 * -2 + 1;\n            }\n            temp_variable9 = pointer[6];\n            if (temp_variable6 < temp_variable9) {\n              for (temp_variable3 = temp_variable9 - temp_variable6; temp_variable3 != 0; temp_variable3 = temp_variable3 + -1) {\n                *pointer = 0;\n                pointer = pointer + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            temp_variable3 = pointer[1];\n            preturn_value5 = preturn_value5 + temp_variable9;\n            pointer = preturn_value5 + 8;\n            if ((*(int *)(temp_variable3 + 8) == 5) && (*(char *)(pointer[0x22] + 4) == '\\x02')) {\n              (**(code **)(temp_variable3 + 0x38))(pointer[7],preturn_value5);\n              (**(code **)(pointer[1] + 0x38))(pointer[8],pointer);\n              pointer = preturn_value5 + 0x10;\n            }\n            else {\n              (**(code **)(temp_variable3 + 0x50))(pointer[7],preturn_value5);\n              (**(code **)(pointer[1] + 0x50))(pointer[8],preturn_value5 + 4);\n            }\n            initial_value3 = pointer[7];\n            buffer_size = pointer[8];\n          }\n        }\n      }\n      temp_variable9 = (long)pointer - (long)dynamic_array;\n      temp_variable6 = temp_variable9;\n      pointer = dynamic_array;\n      if (temp_variable9 < buffer_size2) {\n        for (; buffer_size2 = temp_variable9, temp_variable6 != 0; temp_variable6 = temp_variable6 - 1) {\n          *pointer = *pointer;\n          pointer = pointer + (ulong)bVar21 * -2 + 1;\n          pointer = pointer + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(dynamic_array);\nLAB_001166f8:\n      free(pointer);\n      return buffer_size2;\n    }\n    if (((condition4 | condition2) == 0) || (condition3 == 0)) {\n      if (condition4 == 0) {\n        if (condition2 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (condition2 == 0) goto LAB_001166f8;\n    }\n    temp_variable3 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      temp_variable7 = (**(code **)(pointer[1] + 0x28))(dynamic_array_size);\n      temp_variable5 = (**(code **)(pointer[1] + 0x28))(pointer[4] + 8);\n      if (temp_variable5 < temp_variable7) {\n        temp_variable7 = temp_variable5;\n      }\nLAB_00116631:\n      if (pointer[2] == 0x100) {\n        if (temp_variable7 == 0) {\n          temp_variable7 = return_address;\n        }\n        note_data = *pointer;\n        pointer[7] = temp_variable7;\n        temp_variable9 = temp_variable5;\n        return_address = temp_variable7;\n        if (temp_variable5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_variable7 == 0) {\n          temp_variable7 = initial_value3;\n        }\n        note_data = *pointer;\n        pointer[7] = temp_variable7;\n        temp_variable6 = temp_variable5;\n        initial_value3 = temp_variable7;\n        if (temp_variable5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        temp_variable7 = (**(code **)(pointer[1] + 0x40))(dynamic_array_size);\n        temp_variable5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        temp_variable6 = FUNC_001086af();\n        return temp_variable6;\n      }\n    }\n    temp_variable3 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (temp_variable3 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,pointer,pointer,temp_variable3);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto extract_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nextract_build_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "output",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentEntry"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *output)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentEntry;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentEntry = targetList;\n  while( true ) {\n    currentTarget = *currentEntry;\n    currentEntry = currentEntry + 1;\n    if (currentTarget == 0) break;\n    fprintf(output,\" %s\");\n  }\n  fputc(10,output);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "copy_usage",
                "strip_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "localVar1",
                "uVar2": "outputValue",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] debugEndFunction_0010be1a(long param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  long localVar1;\n  undefined8 outputValue;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if (((*(long *)(param1 + 8) == 0) || (localVar1 = *(long *)(param1 + 0x20), localVar1 == 0)) ||\n     (*(long *)(param1 + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(localVar1 + 8) == 0) {\n      *(undefined8 *)(localVar1 + 0x20) = param2;\n      outputValue = CONCAT71((int7)((ulong)localVar1 >> 8),1);\n      *(undefined (*) [16])(param1 + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  outputValue = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",outputValue);\n  outputValue = 0;\nLAB_0010be86:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = outputValue;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_modify_type",
                "display_info.isra.0",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_qualified",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "setup_section",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "parse_flags.cold",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "display_info.isra.0.cold",
                "is_dwo_section.constprop.0",
                "stab_typed_constant.lto_priv.0",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "FUN_0010554f",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "start_stab.constprop.0",
                "debug_make_struct_type.isra.0",
                "display_info.isra.0",
                "stab_record_variable",
                "stab_class_start_method.lto_priv.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "section_add_load_file",
                "debug_make_type.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "savestring",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "debug_make_enum_type.isra.0",
                "stab_find_tagged_type",
                "template_in_dir",
                "bfd_get_archive_filename",
                "FUN_0010554f",
                "add_redefine_and_check",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "debug_add_to_namespace.constprop.0",
                "stab_modify_type",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "debug_make_indirect_type.isra.0",
                "stab_push_string",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "debug_tag_type",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "debug_make_array_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_struct_field.lto_priv.0",
                "add_specific_symbols",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "debug_make_method_type.isra.0",
                "init_section_add",
                "merge_gnu_build_notes",
                "stab_start_struct_type.lto_priv.0",
                "parse_flags.cold",
                "debug_make_offset_type.isra.0",
                "debug_set_class_id.lto_priv.0",
                "debug_start_block",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_variable.lto_priv.0",
                "debug_set_filename",
                "stab_float_constant.lto_priv.0",
                "debug_record_line",
                "stab_offset_type.lto_priv.0",
                "xstrndup",
                "debug_make_function_type.isra.0",
                "debug_start_source",
                "convert_efi_target",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "byteValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "lVar2": "counter",
                "puVar3": "currentPointer",
                "bVar4": "loopIndex",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeMemory_00113da9(byte byteValue,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *memoryBlock;\n  long counter;\n  undefined8 *currentPointer;\n  byte loopIndex;\n  undefined result [16];\n  \n  loopIndex = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byteValue);\n  if (result._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    currentPointer = memoryBlock + 1;\n    for (counter = 8; counter != 0; counter = counter + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)loopIndex * -8 + 4);\n    }\n    *memoryBlock = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = memoryBlock;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "timestamp1"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong timestamp1;\n  \n  timestamp1 = record1[2];\n  if (timestamp1 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((timestamp1 == 0) || ((timestamp1 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "create_modified_string_0010a69a",
                "param_1": "paramPointer",
                "param_2": "paramAddress",
                "param_3": "structSize",
                "param_4": "isCharZero",
                "param_5": "paramValue",
                "uVar1": "returnValue",
                "lVar2": "structIndex",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "isIndexValid",
                "local_60": "modifiedString"
            },
            "code": "\nundefined4 createModifiedString_0010a69a(long paramPointer,undefined8 paramAddress,int structSize,char isCharZero,uint paramValue)\n\n{\n  undefined4 returnValue;\n  long structIndex;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined isIndexValid;\n  char modifiedString [48];\n  \n  if (structSize == 0) {\n    modifiedString[0] = '\\0';\n    isIndexValid = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    isIndexValid = 1;\n    sprintf(modifiedString,\"%ld=\",structIndex);\n  }\n  stringLength = strlen(modifiedString);\n  sprintf(modifiedString + stringLength,\"%c%u\",(ulong)((-(uint)(isCharZero == '\\0') & 2) + 0x73),(ulong)paramValue);\n  returnValue = stab_push_string(paramPointer,modifiedString,structIndex,isIndexValid,paramValue);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(paramPointer + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(paramPointer + 0x60) + 0x20) = 0;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_modified_string_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "stab_end_class_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_and_process_sections_00115b70",
                "param_1": "sections",
                "pcVar1": "current_section",
                "iVar2": "symbol_cmp_result",
                "iVar3": "strip_symbols_mode",
                "lVar4": "matching_copy_section",
                "lVar5": "matching_remove_section",
                "uVar6": "result",
                "plVar7": "update_sections_list"
            },
            "code": "\nundefined8 check_and_process_sections_00115b70(char **sections)\n\n{\n  char *current_section;\n  int symbol_cmp_result;\n  int strip_symbols_mode;\n  long matching_copy_section;\n  long matching_remove_section;\n  undefined8 result;\n  long *update_sections_list;\n  \n  matching_copy_section = find_section_list(*sections,0,4);\n  if (matching_copy_section == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      matching_copy_section = find_section_list(*sections,0,1);\n      matching_remove_section = find_section_list(*sections,0,2);\n      if (matching_copy_section != 0) {\n        if (matching_remove_section != 0) {\n          current_section = *sections;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_section);\n        }\n        if (matching_copy_section != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_section = *sections;\n          update_sections_list = update_sections;\n          do {\n            strip_symbols_mode = strcmp(current_section,(char *)update_sections_list[1]);\n            if (strip_symbols_mode == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_section);\n            }\n            update_sections_list = (long *)*update_sections_list;\n          } while (update_sections_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (matching_remove_section == 0)) {\n        return 1;\n      }\n    }\n    strip_symbols_mode = strip_symbols;\n    if ((*(byte *)((long)sections + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_section = *sections;\n        symbol_cmp_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((symbol_cmp_result != 0) && (symbol_cmp_result = strcmp(current_section,\".gnu_debuglink\"), symbol_cmp_result != 0)) {\n          strip_symbols_mode = strcmp(current_section,\".reloc\");\n          if (strip_symbols_mode != 0) {\n            return 1;\n          }\n          result = check_dwo_section_0010829e();\n          return result;\n        }\n      }\n      if (strip_symbols_mode == 5) {\n        result = is_dwo_section_constprop_0(sections);\n        return result;\n      }\n      if (strip_symbols_mode == 4) {\n        return 0;\n      }\n    }\n    if (strip_symbols_mode == 6) {\n      result = invert_and_check_dwo_section_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "find_section_list",
                "dcgettext",
                "FUN_0010829e",
                "fatal",
                "strcmp",
                "is_strip_section_1.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_and_process_sections_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "finalize_dso_handle_00116b40",
                "completed_0": "isCompleted",
                "__cxa_finalize": "finalizeCxa",
                "__dso_handle": "dsoHandle",
                "deregister_tm_clones": "deregisterTmClones"
            },
            "code": "\nvoid finalizeDsoHandle_00116b40(void)\n\n{\n  if (isCompleted != '\\0') {\n    return;\n  }\n  finalizeCxa(dsoHandle);\n  deregisterTmClones();\n  isCompleted = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "finalize_dso_handle_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocations_00116030",
                "param_1": "input_file",
                "param_2": "base_address",
                "plVar1": "relocated_pointer",
                "lVar2": "relocated_value",
                "lVar3": "constant_value1",
                "lVar4": "constant_value2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "upper_bound",
                "__ptr": "reloc_buffer",
                "lVar7": "num_relocs",
                "extraout_RAX": "output",
                "lVar8": "index",
                "uStack_28": "fallback_result"
            },
            "code": "\n\n\nundefined8 process_relocations_00116030(undefined8 *input_file,long base_address)\n\n{\n  long *relocated_pointer;\n  long relocated_value;\n  long constant_value1;\n  long constant_value2;\n  int error_code;\n  undefined8 result;\n  long upper_bound;\n  void *reloc_buffer;\n  long num_relocs;\n  undefined8 output;\n  long index;\n  undefined8 fallback_result;\n  \n  if (*(long *)(base_address + 0x60) == 0) {\n    return result;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      bfd_nonfatal(*input_file);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(input_file,base_address,reloc_buffer);\n    constant_value2 = _DAT_00128680;\n    constant_value1 = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (num_relocs < 0) {\n      bfd_nonfatal(*input_file);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      index = 0;\n      do {\n        relocated_pointer = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((relocated_pointer != (long *)0x0) && (relocated_value = *relocated_pointer, relocated_value != 0)) && (relocated_value != upper_bound)) &&\n           ((relocated_value != constant_value2 && (relocated_value != constant_value1)))) {\n          *(uint *)(relocated_value + 0x18) = *(uint *)(relocated_value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (num_relocs != index);\n    }\n    free(reloc_buffer);\n    return output;\n  }\n  return fallback_result;\n}\n\n",
            "called": [
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "mark_symbols_used_in_relocations.cold",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocations_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "string_ptr",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **string_ptr)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_ptr == (char **)0x0) {\n    return 0;\n  }\n  string = *string_ptr;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Address",
                "lVar2": "record2Address",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Address;\n  long record2Address;\n  int result;\n  uint flag;\n  \n  record1Address = *record1;\n  record2Address = *record2;\n  flag = *(uint *)(record2Address + 0x24) & 0x102;\n  if ((*(uint *)(record1Address + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1Address + 0x38) <= *(ulong *)(record2Address + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2Address + 0x38) <= *(ulong *)(record1Address + 0x38)) {\n      if (*(ulong *)(record2Address + 0x40) < *(ulong *)(record1Address + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2Address + 0x40) <= *(ulong *)(record1Address + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1Address + 0x18) <= *(uint *)(record2Address + 0x18)) {\n            return -(uint)(*(uint *)(record1Address + 0x18) < *(uint *)(record2Address + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "display_info.isra.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "copy_object.cold",
                "save_stab",
                "stab_class_baseclass.lto_priv.0",
                "free_saved_stabs",
                "stab_int_constant.lto_priv.0",
                "list_supported_targets",
                "stab_class_method_var",
                "stab_demangle_qualified",
                "list_matching_formats",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_find_tagged_type",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_modify_type",
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_demangle_template",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_struct_field.lto_priv.0",
                "parse_stab_type",
                "FUN_00108466",
                "stab_pop_type",
                "merge_gnu_build_notes",
                "make_tempdir.cold",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_emit_pending_vars",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "init_section_add",
                "main",
                "parse_stab",
                "parse_flags.cold",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_types_0010c892",
                "param_1": "functionPtr",
                "param_2": "dataPtr",
                "cVar1": "status",
                "lVar2": "typePtr",
                "lVar3": "taggedType",
                "uVar4": "result",
                "puVar5": "listPtr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugTypes_0010c892(undefined8 functionPtr,long dataPtr)\n\n{\n  char status;\n  long typePtr;\n  long taggedType;\n  undefined8 result;\n  undefined8 *listPtr;\n  int kind;\n  \n  if (*(char *)(dataPtr + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (listPtr = *(undefined8 **)(dataPtr + 0x1a0); listPtr != (undefined8 *)0x0;\n        listPtr = (undefined8 *)*listPtr) {\n      kind = *(int *)(listPtr + 2);\n      taggedType = listPtr[1];\n      if (kind != 0) {\n        if (taggedType != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        listPtr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (taggedType == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      typePtr = debug_make_type_constprop_0(kind,0);\n      if (typePtr == 0) goto LAB_0010c910;\n      taggedType = debug_tag_type(functionPtr,taggedType,typePtr);\n      listPtr[3] = taggedType;\n      if (taggedType == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    status = stab_emit_pending_vars();\n    if (status != '\\0') {\n      status = debug_end_function(functionPtr,*(undefined8 *)(dataPtr + 0x68));\n      if (status != '\\0') {\n        *(undefined *)(dataPtr + 0x60) = 0;\n        *(undefined8 *)(dataPtr + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "stab_emit_pending_vars",
                "debug_end_function",
                "dcgettext",
                "debug_tag_type",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_types_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "dataPointer",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid initializeData_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *dataPointer;\n  \n  dataPointer = (undefined4 *)allocateMemory(0x18);\n  *dataPointer = input1;\n  dataPointer[1] = input2;\n  *(undefined (*) [16])(dataPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "debug_make_struct_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "debug_tag_type",
                "debug_make_enum_type.isra.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "debug_make_float_type.isra.0",
                "finish_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_data_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_exit_functions_0011a390",
                "plVar4": "exitFunctionList",
                "uVar5": "loopCounter",
                "lVar1": "index",
                "lVar2": "previousIndex",
                "lVar3": "currentIndex"
            },
            "code": "\nvoid executeExitFunctions_0011a390(void)\n\n{\n  long index;\n  long previousIndex;\n  long currentIndex;\n  long *exitFunctionList;\n  uint loopCounter;\n  \n  exitFunctionList = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      loopCounter = *(int *)(exitFunctionList + 1) - 1;\n      if (-1 < (int)loopCounter) {\n        index = (long)(int)loopCounter;\n        loopCounter = loopCounter & 7;\n        (*(code *)exitFunctionList[index + 2])();\n        previousIndex = index + -1;\n        if (-1 < (int)previousIndex) {\n          currentIndex = previousIndex;\n          if (loopCounter != 0) {\n            if (loopCounter != 1) {\n              if (loopCounter != 2) {\n                if (loopCounter != 3) {\n                  if (loopCounter != 4) {\n                    if (loopCounter != 5) {\n                      if (loopCounter != 6) {\n                        (*(code *)exitFunctionList[index + 1])();\n                        previousIndex = index + -2;\n                      }\n                      (*(code *)exitFunctionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)exitFunctionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)exitFunctionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)exitFunctionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)exitFunctionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)exitFunctionList[previousIndex + 2])();\n            currentIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)exitFunctionList[currentIndex + 2])();\n            index = currentIndex + -1;\n            (*(code *)exitFunctionList[currentIndex + 1])();\n            (*(code *)exitFunctionList[currentIndex])();\n            (*(code *)exitFunctionList[index])();\n            (*(code *)exitFunctionList[currentIndex + -2])();\n            (*(code *)exitFunctionList[currentIndex + -3])();\n            (*(code *)exitFunctionList[currentIndex + -4])();\n            (*(code *)exitFunctionList[currentIndex + -5])();\n            currentIndex = currentIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      exitFunctionList = (long *)*exitFunctionList;\n    } while (exitFunctionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "do_display_target",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_stab_symbol_0010e842",
                "param_1": "symbolTable",
                "param_2": "name",
                "param_3": "index",
                "param_4": "value",
                "__s": "formattedString",
                "sVar1": "nameLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] writeStabSymbol_0010e842(undefined8 symbolTable,char *name,undefined8 index,undefined8 value)\n\n{\n  size_t nameLength;\n  char *formattedString;\n  undefined result [16];\n  \n  nameLength = strlen(name);\n  formattedString = (char *)xmalloc(nameLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",name,index);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "create_debug_constant_00113cb9",
                "param_1": "input_value",
                "lVar1": "debug_constant"
            },
            "code": "\nlong create_debug_constant_00113cb9(long input_value)\n\n{\n  long debug_constant;\n  \n  if (input_value != 0) {\n    debug_constant = debug_make_type_constprop_0(0xe,0);\n    if (debug_constant == 0) {\n      debug_constant = 0;\n    }\n    else {\n      *(long *)(debug_constant + 0x10) = input_value;\n    }\n    return debug_constant;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_constant_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_symbol_to_table_0010eafe",
                "param_1": "tablePointer",
                "param_2": "symbolName",
                "param_3": "isPublic",
                "__s": "poppedType",
                "sVar2": "symbolNameLength",
                "sVar3": "poppedTypeLength",
                "__s_00": "newSymbol",
                "stab_pop_type": "popTypeFromTable",
                "xmalloc": "allocateMemory",
                "stab_write_symbol_lto_priv_0": "writeSymbolToTablePrivately",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 writeSymbolToTable_0010eafe(long tablePointer,char *symbolName,char isPublic)\n\n{\n  undefined4 returnValue;\n  char *poppedType;\n  size_t symbolNameLength;\n  size_t poppedTypeLength;\n  char *newSymbol;\n  \n  if ((*(int *)(tablePointer + 0x1f8) == 0) && (*(long *)(tablePointer + 0x1e8) == -1)) {\n    poppedType = (char *)popTypeFromTable();\n    symbolNameLength = strlen(symbolName);\n    poppedTypeLength = strlen(poppedType);\n    newSymbol = (char *)allocateMemory(symbolNameLength + 3 + poppedTypeLength);\n    sprintf(newSymbol,\"%s:%c%s\",symbolName,(ulong)((-(uint)(isPublic == '\\0') & 0x20) + 0x46),poppedType);\n    *(undefined8 *)(tablePointer + 0x1e8) = *(undefined8 *)(tablePointer + 0x10);\n    returnValue = writeSymbolToTable_0010eafePrivately(tablePointer,0x24,0,0,newSymbol);\n    if ((char)returnValue != '\\0') {\n      free(newSymbol);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_table_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "make_type_constant_00113df2",
                "param_1": "value",
                "debug_make_type_constprop_0": "setConstantTypeProperty"
            },
            "code": "\nvoid makeTypeConstant_00113df2(undefined4 value)\n\n{\n  setConstantTypeProperty(4,value);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "make_type_constant_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "copy_usage",
                "strip_usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "reverse_and_push_string_0010a377",
                "param_1": "input_address",
                "cVar1": "flag",
                "__s": "pop_type_string",
                "__s_00": "pop_type_string_param",
                "sVar3": "string_length_1",
                "sVar4": "string_length_2",
                "__s_01": "result_string",
                "uVar2": "push_result",
                "uVar5": "is_null"
            },
            "code": "\nundefined4 reverse_and_push_string_0010a377(long input_address)\n\n{\n  char flag;\n  undefined4 push_result;\n  char *pop_type_string;\n  char *pop_type_string_param;\n  size_t string_length_1;\n  size_t string_length_2;\n  char *result_string;\n  undefined is_null;\n  \n  is_null = 1;\n  flag = *(char *)(*(long *)(input_address + 0x60) + 0x1c);\n  pop_type_string = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    is_null = *(undefined *)(*(long *)(input_address + 0x60) + 0x1c);\n  }\n  pop_type_string_param = (char *)stab_pop_type(input_address);\n  string_length_1 = strlen(pop_type_string);\n  string_length_2 = strlen(pop_type_string_param);\n  result_string = (char *)xmalloc(string_length_1 + 3 + string_length_2);\n  sprintf(result_string,\"@%s,%s\",pop_type_string_param,pop_type_string);\n  free(pop_type_string_param);\n  free(pop_type_string);\n  push_result = stab_push_string(input_address,result_string,0,is_null,0);\n  if ((char)push_result != '\\0') {\n    free(result_string);\n  }\n  return push_result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_push_string_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "demangle_stab_0010d882",
                "param_1": "input_ptr",
                "param_2": "string_array",
                "param_3": "output_ptr",
                "param_4": "flag_ptr",
                "iVar1": "iterator",
                "pcVar2": "current_char",
                "cVar3": "current_char",
                "lVar4": "allocated_ptr",
                "pcVar5": "current_string",
                "uVar6": "count",
                "bVar7": "bool_value",
                "local_50": "index",
                "local_4c": "constant",
                "local_48": "count",
                "local_44": "iterations",
                "local_40": "temp_array"
            },
            "code": "\nundefined8 demangle_stab_0010d882(long input_ptr,char **string_array,long *output_ptr,undefined *flag_ptr)\n\n{\n  int iterator;\n  char *current_char;\n  char current_char;\n  long allocated_ptr;\n  char *current_string;\n  ulong count;\n  bool bool_value;\n  uint index;\n  undefined4 constant;\n  uint count;\n  int iterations;\n  undefined8 temp_array [2];\n  \n  current_char = *string_array;\n  constant = 10;\n  if (output_ptr != (long *)0x0) {\n    allocated_ptr = xmalloc();\n    *output_ptr = allocated_ptr;\n    *flag_ptr = 0;\n  }\n  index = 0;\n  while( true ) {\n    current_string = *string_array;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *string_array = current_string + 1;\n      if (current_char == 'T') {\n        iterations = 1;\n      }\n      else {\n        current_char = stab_demangle_get_count(string_array,&iterations);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = stab_demangle_get_count(string_array,&count);\n      if ((current_char == '\\0') || (*(uint *)(input_ptr + 0x28) <= count)) {\nLAB_0010d958:\n        stab_bad_demangle(current_char);\n        return 0;\n      }\n      count = (ulong)count;\n      while (iterator = iterations + -1, bool_value = iterations != 0, iterations = iterator, bool_value) {\n        temp_array[0] = *(undefined8 *)(*(long *)(input_ptr + 0x20) + count * 0x10);\n        current_char = stab_demangle_arg(input_ptr,temp_array,output_ptr,&index,&constant);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = stab_demangle_arg(input_ptr,string_array,output_ptr,&index,&constant);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_ptr == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_ptr + (ulong)index * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *flag_ptr = 1;\n  }\n  current_string = current_string + 1;\n  *string_array = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_arg",
                "xmalloc",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_stab_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "arrayPtr",
                "param_2": "valuePtr",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "newArray",
                "pauVar2": "existingArrayPtr",
                "lVar3": "loopCounter",
                "puVar4": "arrayPtrCopy",
                "bVar5": "byteVar"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**arrayPtr) [16],undefined8 valuePtr,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *newArray;\n  undefined (*existingArrayPtr) [16];\n  long loopCounter;\n  undefined4 *arrayPtrCopy;\n  byte byteVar;\n  \n  byteVar = 0;\n  newArray = (undefined4 *)xmalloc(0x28);\n  arrayPtrCopy = newArray;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *arrayPtrCopy = 0;\n    arrayPtrCopy = arrayPtrCopy + (ulong)byteVar * -2 + 1;\n  }\n  existingArrayPtr = *arrayPtr;\n  *(undefined8 *)(newArray + 2) = valuePtr;\n  newArray[5] = value1;\n  newArray[6] = value2;\n  if (existingArrayPtr == (undefined (*) [16])0x0) {\n    existingArrayPtr = (undefined (*) [16])xmalloc(0x10);\n    *existingArrayPtr = ZEXT816(0);\n    *arrayPtr = existingArrayPtr;\n    *(undefined (**) [16])(*existingArrayPtr + 8) = existingArrayPtr;\n  }\n  **(undefined8 **)(*existingArrayPtr + 8) = newArray;\n  *(undefined4 **)(*existingArrayPtr + 8) = newArray;\n  return newArray;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_record_function",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_name_type",
                "debug_tag_type"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "ptrRecord",
                "param_2": "newParam2",
                "param_3": "newParam3",
                "uVar1": "returnValue",
                "puVar2": "ptrUnit",
                "uVar3": "counter",
                "puVar4": "ptrMem",
                "lVar5": "index",
                "puVar6": "ptrTemp",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 updateDebugRecordLine_0010bf86(long ptrRecord,undefined8 newParam2,undefined8 newParam3)\n\n{\n  undefined8 returnValue;\n  undefined8 *ptrUnit;\n  ulong counter;\n  undefined4 *ptrMem;\n  long index;\n  undefined4 *ptrTemp;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(ptrRecord + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    index = *(long *)(ptrRecord + 0x28);\n    if ((index != 0) && (*(long *)(index + 8) == *(long *)(ptrRecord + 0x10))) {\n      counter = 0;\n      do {\n        if (*(long *)(index + 0x10 + counter * 8) == -1) {\n          ptrUnit = (undefined8 *)(counter & 0xffffffff);\n          *(undefined8 *)(index + 0x10 + (long)ptrUnit * 8) = newParam2;\n          *(undefined8 *)(index + 0x60 + (long)ptrUnit * 8) = newParam3;\n          goto LAB_0010c056;\n        }\n        counter = counter + 1;\n      } while (counter != 10);\n    }\n    ptrMem = (undefined4 *)xmalloc(0xb0);\n    ptrTemp = ptrMem;\n    for (index = 0x2c; index != 0; index = index + -1) {\n      *ptrTemp = 0;\n      ptrTemp = ptrTemp + (ulong)flag * -2 + 1;\n    }\n    returnValue = *(undefined8 *)(ptrRecord + 0x10);\n    *(undefined8 *)(ptrMem + 4) = newParam2;\n    *(undefined8 *)(ptrMem + 2) = returnValue;\n    *(undefined8 *)(ptrMem + 0x18) = newParam3;\n    ptrTemp = ptrMem + 6;\n    for (index = 0x48; index != 0; index = index + -1) {\n      *(undefined *)ptrTemp = 0xff;\n      ptrTemp = (undefined4 *)((long)ptrTemp + (ulong)flag * -2 + 1);\n    }\n    ptrUnit = *(undefined8 **)(ptrRecord + 0x28);\n    if (ptrUnit == (undefined8 *)0x0) {\n      ptrUnit = *(undefined8 **)(ptrRecord + 8);\n      ptrUnit[2] = ptrMem;\n    }\n    else {\n      *ptrUnit = ptrMem;\n    }\n    *(undefined4 **)(ptrRecord + 0x28) = ptrMem;\nLAB_0010c056:\n    returnValue = CONCAT71((int7)((ulong)ptrUnit >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "text",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **text)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*text,0);\n    if (matchResult == 0) {\n      *(undefined *)(text + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*text,0);\n    if (matchResult == 0) {\n      *(undefined *)(text + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_info",
                "param_2": "param_size",
                "param_3": "param_count",
                "param_4": "param_type",
                "param_5": "param_value",
                "puVar1": "last_node",
                "uVar2": "error_message",
                "puVar3": "new_node",
                "puVar4": "current_node",
                "lVar5": "i",
                "puVar6": "previous_node",
                "puVar7": "temp_node",
                "bVar8": "is_debug",
                "xmalloc": "allocate_memory",
                "dcgettext": "get_translation",
                "_stderr": "error_output"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_info,long param_size,long param_count,undefined4 param_type,undefined8 param_value)\n\n{\n  undefined8 *last_node;\n  undefined8 error_message;\n  undefined4 *new_node;\n  undefined8 *current_node;\n  long i;\n  undefined8 *previous_node;\n  undefined4 *temp_node;\n  byte is_debug;\n  \n  is_debug = 0;\n  if (param_size == 0) {\n    return 0;\n  }\n  if (param_count != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      new_node = (undefined4 *)allocate_memory(0x28);\n      temp_node = new_node;\n      for (i = 10; i != 0; i = i + -1) {\n        *temp_node = 0;\n        temp_node = temp_node + (ulong)is_debug * -2 + 1;\n      }\n      i = *(long *)(function_info + 0x18);\n      *(long *)(new_node + 2) = param_size;\n      *(long *)(new_node + 4) = param_count;\n      new_node[6] = param_type;\n      last_node = *(undefined8 **)(i + 8);\n      *(undefined8 *)(new_node + 8) = param_value;\n      previous_node = (undefined8 *)(i + 8);\n      while (current_node = last_node, current_node != (undefined8 *)0x0) {\n        previous_node = current_node;\n        last_node = (undefined8 *)*current_node;\n      }\n      *previous_node = new_node;\n      return 1;\n    }\n    error_message = get_translation(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(error_output,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_files_00104ea2",
                "unaff_R12": "archive_path",
                "unaff_R15": "file_list",
                "unaff_RBP": "stats_buf",
                "unaff_retaddr": "return_address",
                "param_7": "source_file",
                "param_8": "bytes_copied",
                "param_9": "temp_dir",
                "param_10": "archive_file",
                "param_11": "write_mode",
                "param_18": "permission",
                "param_19": "total_size",
                "status": "exit_status",
                "preserve_dates": "should_preserve_dates",
                "verbose": "is_verbose",
                "stack0x00000050": "temp_buf",
                "bVar17": "byte_flag",
                "lVar12": "remaining_size",
                "ppcVar6": "bfd_output_file",
                "cVar1": "char_flag",
                "iVar2": "int_flag",
                "pcVar7": "path_ptr",
                "pcVar10": "filename_ptr",
                "puVar8": "temp_dir_info",
                "piVar9": "errno_ptr",
                "pcVar15": "path_end_ptr",
                "lVar5": "bytes_read",
                "lVar14": "bytes_written",
                "pcVar13": "bfd_close_func",
                "unaff_R13": "temp_dir_list",
                "uVar11": "str_message"
            },
            "code": "\nvoid copy_archive_files_00104ea2(void)\n\n{\n  char char_flag;\n  int int_flag;\n  char **ppcVar3;\n  void *pvVar4;\n  long bytes_read;\n  char **bfd_output_file;\n  char *path_ptr;\n  undefined8 *temp_dir_info;\n  int *errno_ptr;\n  char *filename_ptr;\n  undefined8 str_message;\n  long remaining_size;\n  code *bfd_close_func;\n  long bytes_written;\n  int unaff_EBX;\n  stat *stats_buf;\n  char *path_end_ptr;\n  stat *psVar16;\n  char *archive_path;\n  undefined8 *temp_dir_list;\n  char **file_list;\n  byte byte_flag;\n  undefined8 return_address;\n  undefined8 *source_file;\n  long *bytes_copied;\n  char *temp_dir;\n  undefined8 *archive_file;\n  undefined8 write_mode;\n  undefined8 in_stack_00000030;\n  uint permission;\n  long total_size;\n  \n  byte_flag = 0;\ncode_r0x00104ea2:\n  bfd_output_file = (char **)bfd_openw(archive_path,write_mode);\n  if (bfd_output_file == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archive_path,0,0,0);\nLAB_00104e93:\n    exit_status = 1;\n  }\n  else {\nLAB_00114a5f:\n    char_flag = copy_object(file_list,bfd_output_file,return_address);\n    if (char_flag == '\\0') {\n      int_flag = bfd_get_arch(file_list);\n      if (int_flag == 0) goto LAB_00104d75;\n      char_flag = bfd_close_all_done(bfd_output_file);\n      if (char_flag != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    char_flag = bfd_close(bfd_output_file);\n    bfd_output_file = file_list;\n    if (char_flag == '\\0') {\n      bfd_nonfatal_message(archive_path,0,0,0);\n      exit_status = 1;\n    }\nLAB_00114a86:\n    if ((should_preserve_dates != '\\0') && (unaff_EBX == 0)) {\n      set_times(archive_path,stats_buf);\n    }\n    remaining_size = bfd_openr(archive_path,write_mode);\n    temp_dir_list[2] = remaining_size;\n    *bytes_copied = remaining_size;\n    bytes_copied = (long *)(remaining_size + 0xf0);\n    file_list = (char **)bfd_openr_next_archived_file(archive_file,bfd_output_file);\n    bfd_close(bfd_output_file);\n    while ((exit_status == 0 && (file_list != (char **)0x0))) {\n      filename_ptr = *file_list;\n      path_ptr = filename_ptr;\n      if (*filename_ptr == '/') {\nLAB_0010527d:\n        str_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(str_message,filename_ptr);\n        goto LAB_00104e93;\n      }\n      while (*path_ptr != '\\0') {\n        path_end_ptr = path_ptr;\n        if ((*path_ptr == '.') && (path_end_ptr = path_ptr + 1, path_ptr[1] == '.')) {\n          path_end_ptr = path_ptr + 2;\n          if ((path_ptr[2] == '\\0') || (path_ptr[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*path_end_ptr != '\\0' && (*path_end_ptr != '/')); path_end_ptr = path_end_ptr + 1) {\n        }\n        path_ptr = path_end_ptr;\n        if (*path_end_ptr == '/') {\n          extract_and_copy_archive_001052a2();\n          return;\n        }\n      }\n      stats_buf = (stat *)&temp_buf;\n      archive_path = (char *)concat(temp_dir,&DAT_0011b47d);\n      int_flag = stat(archive_path,stats_buf);\n      temp_dir_info = temp_dir_list;\n      if (-1 < int_flag) {\n        remaining_size = make_tempdir(archive_path);\n        free(archive_path);\n        if (remaining_size == 0) {\n          errno_ptr = __errno_location();\n          filename_ptr = strerror(*errno_ptr);\n          str_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(str_message,filename_ptr);\n          goto LAB_00104e93;\n        }\n        temp_dir_info = (undefined8 *)xmalloc(0x18);\n        filename_ptr = *file_list;\n        *temp_dir_info = temp_dir_list;\n        temp_dir_info[2] = 0;\n        temp_dir_info[1] = remaining_size;\n        archive_path = (char *)concat(remaining_size,&DAT_0011b47d,filename_ptr);\n      }\n      unaff_EBX = 0;\n      if (should_preserve_dates != '\\0') {\n        psVar16 = stats_buf;\n        for (remaining_size = 0x24; remaining_size != 0; remaining_size = remaining_size + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)byte_flag * -8 + 4);\n        }\n        bfd_output_file = (char **)file_list[0x1d];\n        if ((char **)file_list[0x1d] == (char **)0x0) {\n          bfd_output_file = file_list;\n        }\n        unaff_EBX = (**(code **)(bfd_output_file[1] + 0x1e8))(file_list,stats_buf);\n        if (unaff_EBX != 0) {\n          filename_ptr = *file_list;\n          str_message = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(str_message,filename_ptr);\n        }\n      }\n      temp_dir_list = (undefined8 *)xmalloc(0x18);\n      temp_dir_list[1] = archive_path;\n      *temp_dir_list = temp_dir_info;\n      temp_dir_list[2] = 0;\n      char_flag = bfd_check_format(file_list,1);\n      if (char_flag != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        bfd_output_file = (char **)bfd_openw(archive_path,*(undefined8 *)file_list[1]);\n        if (bfd_output_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      str_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,file_list,0,str_message);\n      bfd_output_file = (char **)bfd_openw(archive_path,write_mode);\n      if (bfd_output_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)file_list[0x1d];\n      if ((char **)file_list[0x1d] == (char **)0x0) {\n        ppcVar3 = file_list;\n      }\n      int_flag = (**(code **)(ppcVar3[1] + 0x1e8))(file_list);\n      remaining_size = total_size;\n      if (int_flag == 0) {\n        if (total_size < 0) {\n          bfd_get_archive_filename(file_list);\n          str_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(str_message);\n        }\n        else {\n          int_flag = bfd_seek(file_list,0,0);\n          if (int_flag == 0) {\n            if (is_verbose != '\\0') {\n              filename_ptr = *bfd_output_file;\n              str_message = bfd_get_archive_filename(file_list);\n              path_ptr = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(path_ptr,str_message,filename_ptr);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remaining_size == 0) {\n                chmod(*bfd_output_file,permission | 0x100);\n                free(pvVar4);\n                char_flag = bfd_close_all_done(bfd_output_file);\n                bfd_output_file = file_list;\n                if (char_flag == '\\0') {\n                  bfd_nonfatal_message(archive_path,0,0,0);\n                  exit_status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (remaining_size < 0x2001) {\n                bytes_written = remaining_size;\n              }\n              bytes_read = bfd_bread(pvVar4,bytes_written,file_list);\n              ppcVar3 = file_list;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(pvVar4,bytes_written,bfd_output_file), ppcVar3 = bfd_output_file, bytes_written != bytes_read))\n              break;\n              remaining_size = remaining_size - bytes_written;\n            }\n            bfd_nonfatal_message(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            str_message = bfd_get_archive_filename(file_list);\n            bfd_nonfatal(str_message);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,file_list,0,0);\n      }\n      char_flag = bfd_close_all_done(bfd_output_file);\n      if (char_flag == '\\0') {\n        bfd_nonfatal_message(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archive_path);\n      exit_status = 1;\n    }\n    *bytes_copied = 0;\n    pvVar4 = (void *)xstrdup(*source_file);\n    if (exit_status == 0) {\n      bfd_close_func = bfd_close;\n    }\n    else {\n      bfd_close_func = bfd_close_all_done;\n    }\n    char_flag = (*bfd_close_func)(source_file);\n    if (char_flag == '\\0') {\n      exit_status = 1;\n      bfd_nonfatal_message(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*archive_file);\n    char_flag = bfd_close(archive_file);\n    if (char_flag == '\\0') {\n      exit_status = 1;\n      bfd_nonfatal_message(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (temp_dir_list != (undefined8 *)0x0) {\n    if (temp_dir_list[2] == 0) {\n      rmdir((char *)temp_dir_list[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_dir_list[1]);\n    }\n    free((void *)temp_dir_list[1]);\n    temp_dir_info = (undefined8 *)*temp_dir_list;\n    free(temp_dir_list);\n    temp_dir_list = temp_dir_info;\n  }\n  rmdir(temp_dir);\n  free(temp_dir);\n  return;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_close_all_done",
                "bfd_get_arch",
                "bfd_bwrite",
                "bfd_openw",
                "non_fatal",
                "bfd_close",
                "FUN_001052a2",
                "copy_object",
                "set_times",
                "bfd_bread",
                "unlink",
                "free",
                "bfd_openr",
                "bfd_close",
                "strerror",
                "chmod",
                "rmdir",
                "make_tempdir",
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_seek",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "concat",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "stat",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_files_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "create_debug_type_00113ce0",
                "param_1": "type_id",
                "param_2": "param_value",
                "param_3": "undefined_param",
                "param_4": "unused_param_1",
                "param_5": "unused_param_2",
                "lVar1": "debug_type",
                "plVar2": "debug_type_ptr",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ncreate_debug_type_00113ce0(long type_id,long param_value,undefined undefined_param,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  long debug_type;\n  long *debug_type_ptr;\n  undefined return_value [16];\n  \n  if (type_id != 0) {\n    debug_type = debug_make_type_constprop_0(0xd,0);\n    if (debug_type != 0) {\n      debug_type_ptr = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)debug_type_ptr + 0x11) = 0;\n      *debug_type_ptr = type_id;\n      *(undefined4 *)((long)debug_type_ptr + 0x14) = 0;\n      debug_type_ptr[1] = param_value;\n      *(undefined *)(debug_type_ptr + 2) = undefined_param;\n      *(long **)(debug_type + 0x10) = debug_type_ptr;\n      goto LAB_00113d2f;\n    }\n  }\n  debug_type = 0;\nLAB_00113d2f:\n  return_value._8_8_ = unused_param_2;\n  return_value._0_8_ = debug_type;\n  return return_value;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "filePtr",
                "unaff_RBP": "bufferPtr",
                "unaff_R12": "startPos",
                "unaff_R14": "endPos",
                "iVar1": "errorStatus",
                "sVar4": "readSize",
                "uVar2": "errorMsg",
                "uVar3": "translatedErrorMsg"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int errorStatus;\n  undefined8 errorMsg;\n  undefined8 translatedErrorMsg;\n  size_t readSize;\n  FILE *filePtr;\n  long bufferPtr;\n  long startPos;\n  long endPos;\n  \n  while( true ) {\n    readSize = fread((void *)(*(long *)(bufferPtr + 0x20) + startPos),1,endPos - startPos,\n                  filePtr);\n    errorStatus = ferror(filePtr);\n    if (errorStatus != 0) {\n      translatedErrorMsg = *(undefined8 *)(bufferPtr + 0x10);\n      errorMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMsg,translatedErrorMsg);\n    }\n    startPos = startPos + readSize;\n    errorStatus = feof(filePtr);\n    if (errorStatus != 0) break;\n    if (startPos == endPos) {\n      endPos = startPos * 2;\n      translatedErrorMsg = xrealloc(*(undefined8 *)(bufferPtr + 0x20),endPos);\n      *(undefined8 *)(bufferPtr + 0x20) = translatedErrorMsg;\n    }\n  }\n  *(long *)(bufferPtr + 0x18) = startPos;\n  fclose(filePtr);\n  return;\n}\n\n",
            "called": [
                "FUN_00114dc7",
                "ferror",
                "fread",
                "feof",
                "dcgettext",
                "fclose",
                "fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_data_00119f70",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "uVar1": "status",
                "cVar2": "char_flag",
                "iVar3": "counter",
                "uVar4": "endian_string_1",
                "uVar5": "endian_string_2",
                "__format": "format_string",
                "lVar6": "buffer_size",
                "uVar7": "data",
                "lVar8": "realloc_result"
            },
            "code": "\nundefined4 process_data_00119f70(undefined8 *input_buffer,undefined8 *output_buffer)\n\n{\n  undefined4 status;\n  char char_flag;\n  int counter;\n  undefined8 endian_string_1;\n  undefined8 endian_string_2;\n  char *format_string;\n  long buffer_size;\n  undefined8 data;\n  long realloc_result;\n  \n  counter = *(int *)((long)output_buffer + 0xc) + 1;\n  *(int *)((long)output_buffer + 0xc) = counter;\n  if ((ulong)output_buffer[2] < (ulong)((long)counter * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < counter) {\n      buffer_size = (long)counter * 0xc0;\n    }\n    realloc_result = xrealloc(output_buffer[3]);\n    output_buffer[3] = realloc_result;\n    memset((void *)(realloc_result + output_buffer[2]),0,buffer_size - output_buffer[2]);\n    output_buffer[2] = buffer_size;\n  }\n  status = *(undefined4 *)((long)input_buffer + 0xc);\n  *(undefined8 *)((long)*(int *)((long)output_buffer + 0xc) * 0x60 + output_buffer[3] + -0x60) = *input_buffer;\n  endian_string_1 = endian_string(status);\n  endian_string_2 = endian_string(*(undefined4 *)(input_buffer + 2));\n  data = *input_buffer;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,data,endian_string_2,endian_string_1);\n  buffer_size = bfd_openw(*output_buffer,*input_buffer);\n  if (buffer_size == 0) {\n    bfd_nonfatal(*output_buffer);\n    *(undefined4 *)(output_buffer + 1) = 1;\n  }\n  else {\n    counter = 2;\n    char_flag = bfd_set_format(buffer_size,1);\n    if (char_flag == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        bfd_nonfatal(*input_buffer);\n        *(undefined4 *)(output_buffer + 1) = 1;\n      }\n    }\n    else {\n      do {\n        char_flag = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,counter,0);\n        if (char_flag != '\\0') {\n          data = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",data);\n          *(undefined *)\n           ((long)*(int *)((long)output_buffer + 0xc) * 0x60 + output_buffer[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(output_buffer + 1);\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "endian_string",
                "bfd_close_all_done",
                "bfd_get_error",
                "dcgettext",
                "bfd_set_format",
                "do_display_target.cold",
                "bfd_openw",
                "memset",
                "printf",
                "xrealloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "process_data_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "file_descriptor",
                "param_2": "destination_file",
                "param_3": "source_file",
                "iVar1": "saved_errno",
                "__fd": "destination_fd",
                "iVar2": "bytes_read",
                "_Var3": "current_offset",
                "uVar4": "result",
                "sVar5": "bytes_written",
                "piVar6": "errno_ptr",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_00115a90(int file_descriptor,char *destination_file,long source_file)\n\n{\n  int saved_errno;\n  int destination_fd;\n  int bytes_read;\n  __off_t current_offset;\n  ulong result;\n  size_t bytes_written;\n  int *errno_ptr;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (current_offset = lseek(file_descriptor,0,0), current_offset == 0)) {\n    destination_fd = open(destination_file,0x201);\n    if (destination_fd < 0) {\n      result = simple_copy_cold();\n      return result;\n    }\n    do {\n      result = read(file_descriptor,buffer,0x2000);\n      bytes_read = (int)result;\n      if (bytes_read < 1) {\n        errno_ptr = __errno_location();\n        saved_errno = *errno_ptr;\n        fchmod(destination_fd,*(__mode_t *)(source_file + 0x18));\n        close(file_descriptor);\n        close(destination_fd);\n        if (bytes_read != 0) {\n          *errno_ptr = saved_errno;\n          return 0xffffffff;\n        }\n        return result & 0xffffffff;\n      }\n      bytes_written = write(destination_fd,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    errno_ptr = __errno_location();\n    bytes_read = *errno_ptr;\n    close(file_descriptor);\n    close(destination_fd);\n    *errno_ptr = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close",
                "simple_copy.cold",
                "read",
                "write",
                "fchmod",
                "lseek",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_00108200",
                "unaff_RBP": "filename",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "errorCode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyFile_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorMessage;\n  char *filename;\n  char shouldSetTimes;\n  ulong errorCode;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filename);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  auVar3._0_8_ = errorCode & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "set_times",
                "dcgettext",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00108200"
        }
    },
    "used_tokens": 224666,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}