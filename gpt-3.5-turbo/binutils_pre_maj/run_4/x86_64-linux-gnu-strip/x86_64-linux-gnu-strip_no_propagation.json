{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_value_in_pointer_00113dfe",
                "param_1": "ptr",
                "param_2": "value",
                "lVar1": "result"
            },
            "code": "\nvoid updateValueInPointer_00113dfe(undefined4 ptr,undefined value)\n\n{\n  long result;\n  \n  result = FUN_00112904(3,ptr);\n  if (result != 0) {\n    *(undefined *)(result + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "update_value_in_pointer_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_to_log_0010ab4d",
                "param_1": "logPointer",
                "param_2": "logMessage",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "logStruct",
                "lVar2": "logStruct2",
                "auVar3": "result",
                "sVar4": "messageLength",
                "pcVar5": "existingLog",
                "sVar6": "existingLogLength",
                "auVar7": "returnVal"
            },
            "code": "\nundefined  [16] appendToLog_0010ab4d(long logPointer,char *logMessage,undefined8 param3,undefined8 param4)\n\n{\n  ulong logStruct;\n  long logStruct2;\n  undefined result [16];\n  size_t messageLength;\n  char *existingLog;\n  size_t existingLogLength;\n  undefined returnVal [16];\n  \n  logStruct = *(ulong *)(logPointer + 0x60);\n  if ((logStruct != 0) && (*(long *)(logStruct + 0x20) != 0)) {\n    existingLog = *(char **)(logStruct + 0x30);\n    messageLength = strlen(logMessage);\n    if (existingLog == (char *)0x0) {\n      existingLog = (char *)xmalloc(messageLength + 3);\n      *existingLog = '\\0';\n    }\n    else {\n      existingLogLength = strlen(existingLog);\n      existingLog = (char *)xrealloc(existingLog,messageLength + 4 + existingLogLength);\n    }\n    messageLength = strlen(existingLog);\n    sprintf(existingLog + messageLength,\"%s::\",logMessage);\n    logStruct2 = *(long *)(logPointer + 0x60);\n    *(char **)(logStruct2 + 0x30) = existingLog;\n    returnVal._1_7_ = (undefined7)((ulong)logStruct2 >> 8);\n    returnVal[0] = 1;\n    returnVal._8_8_ = param4;\n    return returnVal;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = logStruct;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "xrealloc",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_to_log_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_file_type_0010c218",
                "param_1": "file_type",
                "param_2": "debug_name",
                "param_3": "current_file",
                "uVar1": "error_message",
                "lVar2": "file_handle",
                "pauVar3": "allocated_memory",
                "lVar4": "file_pointer"
            },
            "code": "\n\n\nlong process_file_type_0010c218(long file_type,long debug_name,long current_file)\n\n{\n  undefined8 error_message;\n  long file_handle;\n  undefined (*allocated_memory) [16];\n  long file_pointer;\n  \n  if ((debug_name != 0) && (current_file != 0)) {\n    if ((*(long *)(file_type + 8) == 0) || (*(long *)(file_type + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      file_handle = FUN_00112904(0x16,0);\n      if (file_handle != 0) {\n        allocated_memory = (undefined (*) [16])xmalloc(0x10);\n        file_pointer = *(long *)(file_type + 0x10);\n        *allocated_memory = ZEXT816(0);\n        *(long *)(*allocated_memory + 8) = current_file;\n        *(undefined (**) [16])(file_handle + 0x10) = allocated_memory;\n        file_pointer = FUN_00112925(file_pointer + 0x10,debug_name,0,3);\n        if (file_pointer != 0) {\n          *(long *)(file_pointer + 0x20) = file_handle;\n          *(long *)*allocated_memory = file_pointer;\n          return file_handle;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "process_file_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = FUN_00113f20();\n  DAT_00127a10 = FUN_00113f20();\n  DAT_00127a28 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_00127a00 = FUN_00113f20();\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278e8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = FUN_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    FUN_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = FUN_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = FUN_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    FUN_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "htab_find_slot",
                "FUN_00113f50",
                "getopt_long",
                "FUN_0011a390",
                "FUN_00108c86",
                "mkstemp",
                "FUN_00108d9a",
                "strncasecmp",
                "fseek",
                "FUN_00114460",
                "ftell",
                "strcmp",
                "FUN_00108898",
                "FUN_00119dd0",
                "dup",
                "FUN_00108a2a",
                "FUN_00114c20",
                "getc",
                "FUN_00114190",
                "xmalloc",
                "unlink_if_ordinary",
                "htab_create_alloc",
                "xrealloc",
                "strtol",
                "bfd_errmsg",
                "textdomain",
                "fopen",
                "strlen",
                "strcpy",
                "FUN_00114cf0",
                "bfd_scan_arch",
                "close",
                "FUN_0011a480",
                "FUN_00114690",
                "FUN_00113fe0",
                "memcpy",
                "free",
                "dcgettext",
                "FUN_00113fb0",
                "FUN_00119940",
                "xstrdup",
                "filename_cmp",
                "xcalloc",
                "strerror",
                "FUN_001126c0",
                "bfd_init",
                "FUN_001054af",
                "fread",
                "FUN_00108800",
                "fprintf",
                "FUN_00119970",
                "bfd_set_default_target",
                "strncpy",
                "bfd_get_error",
                "htab_elements",
                "FUN_001199d0",
                "FUN_00114d60",
                "strcasecmp",
                "FUN_00108916",
                "bfd_set_error_program_name",
                "malloc",
                "stat",
                "strchr",
                "FUN_00119ed0",
                "FUN_00115970",
                "strtoul",
                "FUN_00114c80",
                "memmove",
                "ferror",
                "free",
                "__errno_location",
                "fclose",
                "setlocale",
                "bindtextdomain",
                "xmalloc_set_program_name",
                "FUN_00113f20",
                "xexit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "returnVal",
                "puVar1": "blockPtrIter",
                "uVar2": "result",
                "puVar3": "newBlock",
                "puVar4": "tempPtr",
                "puVar6": "lastBlock",
                "puVar7": "currentBlock",
                "bVar8": "isBlockEmpty",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockPtr,undefined8 param2,undefined8 param3,undefined8 returnVal)\n\n{\n  undefined8 *blockPtrIter;\n  undefined8 result;\n  undefined4 *newBlock;\n  undefined8 *tempPtr;\n  long lVar5;\n  undefined8 *lastBlock;\n  undefined4 *currentBlock;\n  byte isBlockEmpty;\n  undefined returnValue [16];\n  \n  isBlockEmpty = 0;\n  if ((*(long *)(blockPtr + 8) == 0) || (*(long *)(blockPtr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    currentBlock = newBlock;\n    for (lVar5 = 0xc; lVar5 != 0; lVar5 = lVar5 + -1) {\n      *currentBlock = 0;\n      currentBlock = currentBlock + (ulong)isBlockEmpty * -2 + 1;\n    }\n    lVar5 = *(long *)(blockPtr + 0x20);\n    *(undefined8 *)(newBlock + 6) = param2;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = lVar5;\n    blockPtrIter = *(undefined8 **)(lVar5 + 0x10);\n    lastBlock = (undefined8 *)(lVar5 + 0x10);\n    while (tempPtr = blockPtrIter, tempPtr != (undefined8 *)0x0) {\n      lastBlock = tempPtr;\n      blockPtrIter = (undefined8 *)*tempPtr;\n    }\n    *lastBlock = newBlock;\n    result = 1;\n    *(undefined4 **)(blockPtr + 0x20) = newBlock;\n  }\n  returnValue._8_8_ = returnVal;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010e6a8",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_field_string_0010ba08",
                "param_1": "paramArray",
                "param_2": "field",
                "param_3": "param3",
                "param_4": "fieldSize",
                "param_5": "param5",
                "cVar1": "flag",
                "iVar2": "value",
                "lVar3": "ptr",
                "__s": "warning",
                "sVar4": "fieldStrLength",
                "sVar5": "inputFieldLength",
                "sVar6": "specialStrLength",
                "__s_00": "finalFieldStr",
                "uVar7": "warningMessage",
                "uVar8": "result",
                "pcVar9": "specialStr"
            },
            "code": "\nundefined8\ngenerateFieldString_0010ba08(undefined8 *paramArray,char *field,undefined8 param3,ulong fieldSize,int param5)\n\n{\n  char flag;\n  int value;\n  long ptr;\n  char *warning;\n  size_t fieldStrLength;\n  size_t inputFieldLength;\n  size_t specialStrLength;\n  char *finalFieldStr;\n  undefined8 warningMessage;\n  undefined8 result;\n  char *specialStr;\n  \n  flag = *(char *)(paramArray[0xc] + 0x1c);\n  value = *(int *)(paramArray[0xc] + 0x18);\n  warning = (char *)FUN_00109b2f();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    fieldStrLength = strlen(*(char **)(paramArray[0xc] + 0x20));\n    inputFieldLength = strlen(field);\n    specialStrLength = strlen(warning);\n    finalFieldStr = (char *)xmalloc(fieldStrLength + 0x32 + inputFieldLength + specialStrLength);\n    if (param5 == 1) {\n      specialStr = \"/1\";\n    }\n    else {\n      specialStr = \"/0\";\n      if ((param5 != 2) && (specialStr = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(value * 8), fieldSize == 0)) {\n      result = *(undefined8 *)*paramArray;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warningMessage,result,field);\n    }\n    sprintf(finalFieldStr,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),field,specialStr,warning,\n            param3,fieldSize);\n    free(*(void **)(paramArray[0xc] + 0x20));\n    ptr = paramArray[0xc];\n    *(char **)(ptr + 0x20) = finalFieldStr;\n    if (flag != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_field_string_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "update_record_0010aa53",
                "param_1": "record",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "status",
                "cVar1": "flagVal",
                "__s": "string1",
                "sVar5": "length",
                "pcVar6": "modifiedString",
                "cVar3": "statusVal",
                "lVar2": "structPtr",
                "uVar8": "result",
                "uVar9": "counter",
                "uVar10": "maxCounter",
                "uVar4": "loopCounter",
                "lVar7": "reallocPtr"
            },
            "code": "\nundefined8 updateRecord_0010aa53(long record,undefined8 value,char flag,int status)\n\n{\n  char flagVal;\n  long structPtr;\n  char statusVal;\n  uint loopCounter;\n  char *string1;\n  size_t length;\n  char *modifiedString;\n  long reallocPtr;\n  undefined8 result;\n  ulong counter;\n  ulong maxCounter;\n  \n  flagVal = *(char *)(*(long *)(record + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  length = strlen(string1);\n  modifiedString = (char *)xmalloc(length + 0x19);\n  *modifiedString = flag + '0';\n  if (status == 1) {\n    statusVal = '1';\n  }\n  else {\n    statusVal = '0';\n    if ((status != 2) && (statusVal = '2', status != 0)) {\n                    \n      abort();\n    }\n  }\n  modifiedString[1] = statusVal;\n  sprintf(modifiedString + 2,\"%ld,%s;\",value);\n  free(string1);\n  structPtr = *(long *)(record + 0x60);\n  result = 0;\n  if ((structPtr != 0) && (*(long *)(structPtr + 0x20) != 0)) {\n    structPtr = *(long *)(structPtr + 0x28);\n    maxCounter = 0;\n    if (structPtr != 0) {\n      loopCounter = 0;\n      do {\n        counter = (ulong)loopCounter;\n        maxCounter = (ulong)loopCounter;\n        loopCounter = loopCounter + 1;\n      } while (*(long *)(structPtr + counter * 8) != 0);\n    }\n    reallocPtr = xrealloc(structPtr,(ulong)((int)maxCounter + 2) << 3);\n    *(char **)(reallocPtr + maxCounter * 8) = modifiedString;\n    *(undefined8 *)(reallocPtr + (ulong)((int)maxCounter + 1) * 8) = 0;\n    structPtr = *(long *)(record + 0x60);\n    *(long *)(structPtr + 0x28) = reallocPtr;\n    if (flagVal != '\\0') {\n      *(undefined *)(structPtr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_record_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_debug_info_0011173a",
                "param_1": "paramOne",
                "param_2": "debugInfo",
                "param_3": "opcode",
                "param_4": "mode",
                "param_5": "address",
                "param_6": "name",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "pointer",
                "cVar3": "charVar2",
                "uVar4": "undefinedVar",
                "iVar5": "intVar",
                "puVar6": "pointerVar",
                "plVar7": "longVar",
                "pcVar8": "charPointer",
                "uVar9": "undefinedVar",
                "lVar10": "longVar1",
                "lVar11": "longVar2",
                "lVar12": "longVar3",
                "pplVar13": "pointerPointer",
                "uVar14": "ulongVar1",
                "uVar15": "ulongVar2",
                "pcVar16": "charPointer2",
                "uVar17": "uintVar",
                "dVar19": "doubleVar",
                "local_48": "localCharPointer",
                "local_40": "localPointerArray"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parseDebugInfo_0011173a(undefined8 paramOne,long *debugInfo,int opcode,int mode,ulong address,\n                      char *name)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *pointer;\n  char charVar2;\n  undefined undefinedVar;\n  int intVar;\n  undefined8 *pointerVar;\n  long *longVar;\n  char *charPointer;\n  undefined8 undefinedVar;\n  long longVar1;\n  long longVar2;\n  long longVar3;\n  long **pointerPointer;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *charPointer2;\n  uint uintVar;\n  long **pplVar18;\n  double doubleVar;\n  char *localCharPointer;\n  long **localPointerArray [2];\n  \n  if (debugInfo[4] != 0) {\n    if (((opcode == 100) && (*name != '\\0')) && (debugInfo[5] == address)) goto LAB_00111a06;\n    charVar2 = FUN_0010bbd3(paramOne);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugInfo + 0x44) = 0;\n    *(undefined4 *)(debugInfo + 8) = 0;\n    debugInfo[9] = debugInfo[4];\n    if (*(char *)(debugInfo + 1) == '\\0') {\n      debugInfo[6] = debugInfo[5];\n    }\n    *(undefined4 *)(debugInfo + 0x10) = 1;\n    pointerVar = (undefined8 *)xmalloc(8);\n    debugInfo[0x11] = (long)pointerVar;\n    *pointerVar = 0;\n    debugInfo[4] = 0;\n  }\n  strlen(name);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefinedVar = FUN_00108f08(paramOne,name);\n    return undefinedVar;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      intVar = strcmp(name,\"gcc2_compiled.\");\n      if (intVar == 0) {\n        *(undefined4 *)(debugInfo + 8) = 2;\n        return 1;\n      }\n      intVar = strcmp(name,\"gcc_compiled.\");\n      if (intVar == 0) {\n        *(undefined4 *)(debugInfo + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugInfo + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debugInfo + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugInfo + 1) != '\\0') {\n            address = address + debugInfo[7];\n          }\n          charVar2 = FUN_0010c1c6(paramOne,debugInfo);\n          if (charVar2 != '\\0') {\n            charVar2 = FUN_0010be1a(paramOne,address);\n            if (charVar2 != '\\0') {\n              *(undefined *)(debugInfo + 0xc) = 0;\n              debugInfo[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugInfo + 0xc) != '\\0') &&\n           ((address < (ulong)debugInfo[0xd] || (debugInfo[0xd] == 0xffffffffffffffff)))) {\n          debugInfo[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debugInfo + 0xc) != '\\0') {\n          ulongVar1 = address;\n          if (((*name != '\\0') && (ulongVar2 = debugInfo[0xd], ulongVar2 != 0xffffffffffffffff)) &&\n             (ulongVar1 = ulongVar2, address < ulongVar2)) {\n            ulongVar1 = address;\n          }\n          charVar2 = FUN_0010c1c6(paramOne,debugInfo);\n          if (charVar2 == '\\0') {\n            return 0;\n          }\n          charVar2 = FUN_0010be1a(paramOne,ulongVar1);\n          if (charVar2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugInfo + 0xc) = 0;\n          debugInfo[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        pointer = (void *)debugInfo[4];\n        if (pointer == (void *)0x0) {\n          longVar3 = xstrdup(name);\n          debugInfo[4] = longVar3;\n        }\n        else {\n          if (*name == '/') {\n            longVar3 = xstrdup(name);\n          }\n          else {\n            longVar3 = concat(pointer,name,0);\n          }\n          debugInfo[4] = longVar3;\n          free(pointer);\n        }\n        debugInfo[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          longVar3 = 0;\n          if (*(char *)(debugInfo + 0xc) != '\\0') {\n            longVar3 = debugInfo[7];\n          }\n          undefinedVar = FUN_0010bf86(paramOne,(long)mode,longVar3 + address);\n          return undefinedVar;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        longVar = (long *)xmalloc();\n        intVar = *(int *)(debugInfo + 0x10);\n        longVar1 = debugInfo[10];\n        longVar2 = debugInfo[0xb];\n        longVar[5] = 0;\n        longVar3 = debugInfo[0x11];\n        *(int *)(longVar + 4) = intVar;\n        uintVar = intVar + 1;\n        *(uint *)(debugInfo + 0x10) = uintVar;\n        *longVar = longVar2;\n        longVar[1] = longVar1;\n        longVar[2] = (long)name;\n        longVar[3] = address;\n        debugInfo[10] = (long)longVar;\n        debugInfo[0xb] = (long)longVar;\n        longVar3 = xrealloc(longVar3,(ulong)uintVar << 3);\n        uintVar = *(uint *)(longVar + 4);\n        debugInfo[0x11] = longVar3;\n        *(undefined8 *)(longVar3 + (ulong)uintVar * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charPointer = strchr(name,0x3a);\n    if ((charPointer != (char *)0x0) && ((charPointer[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugInfo + 0xc) != '\\0') {\n        ulongVar1 = debugInfo[0xd];\n        ulongVar2 = address;\n        if ((ulongVar1 != 0xffffffffffffffff) && (ulongVar2 = ulongVar1, address < ulongVar1)) {\n          ulongVar2 = address;\n        }\n        charVar2 = FUN_0010c1c6(paramOne,debugInfo);\n        if (charVar2 == '\\0') {\n          return 0;\n        }\n        charVar2 = FUN_0010be1a(paramOne,ulongVar2);\n        if (charVar2 == '\\0') {\n          return 0;\n        }\n        debugInfo[0xd] = -1;\n      }\n      if (*(char *)(debugInfo + 1) != '\\0') {\n        debugInfo[7] = address;\n      }\n      *(undefined *)(debugInfo + 0xc) = 1;\n    }\n    localCharPointer = strchr(name,0x3a);\n    if (localCharPointer == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharPointer[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      charVar2 = name[1];\n      charPointer2 = \"eh_throw\";\n      if (charVar2 != 'e') {\n        if (charVar2 < 'f') {\n          if ((charVar2 != 'X') && (charVar2 != '_')) {\nLAB_00111d1a:\n            undefinedVar = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(name,undefinedVar);\n          }\n        }\n        else {\n          charPointer2 = \"this\";\n          if (charVar2 == 't') goto LAB_00111d62;\n          if (charVar2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charPointer2 = (char *)0x0;\n      if ((name != localCharPointer) && ((*name != ' ' || (localCharPointer != name + 1)))) {\n        charPointer2 = (char *)FUN_00109a0b(name,(int)localCharPointer - (int)name);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localCharPointer[1];\n    charPointer = localCharPointer + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    charPointer = localCharPointer + 2;\n    charVar2 = localCharPointer[1];\n    switch(charVar2) {\n    case 'C':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      charPointer = \"debug_record_label: not implemented\";\n      if (longVar3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      charVar2 = FUN_0010bc80(paramOne,charPointer2,longVar3,charVar2 == 'F',address);\n      if (charVar2 != '\\0') {\n        do {\n          if (*localCharPointer != ';') {\n            return 1;\n          }\n          localCharPointer = localCharPointer + 1;\n          longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n        } while (longVar3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (charPointer2 == (char *)0x0) goto LAB_0011208f;\n      longVar1 = debugInfo[3];\n      longVar = (long *)debugInfo[2];\n      charVar2 = *(char *)(*(long *)(*debugInfo + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localCharPointer = charPointer;\n        do {\n          if (*localCharPointer != ';') {\n            return 1;\n          }\n          localCharPointer = localCharPointer + 1;\n          longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n        } while (longVar3 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 2;\n      break;\n    case 'S':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar2 = localCharPointer[2];\n      if (charVar2 == 't') {\n        charPointer = localCharPointer + 3;\n      }\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,charPointer2,&localCharPointer,localPointerArray);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (charPointer2 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(debugInfo + 0x35);\n      longVar = (long *)FUN_0010c6be(paramOne,charPointer2,longVar3);\n      if (longVar == (long *)0x0) {\n        return 0;\n      }\n      if (localPointerArray[0] != (long **)0x0) {\n        *localPointerArray[0] = longVar;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      pointerPointer = (long **)(debugInfo + 0x34);\n      pplVar18 = (long **)debugInfo[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charPointer = localCharPointer + 3;\n      if (((localCharPointer[2] != '\\0') && (charPointer = localCharPointer + 4, localCharPointer[3] == 'n')) &&\n         (charPointer = localCharPointer + 5, charPointer2 = localCharPointer + 4, localCharPointer = charPointer, *charPointer2 == '0')) {\n        for (; charPointer = localCharPointer, *localCharPointer != '\\0'; localCharPointer = localCharPointer + 1) {\n          if (*localCharPointer == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 4;\n      break;\n    case 'c':\n      if (localCharPointer[2] == '=') {\n        charPointer = localCharPointer + 4;\n        charVar2 = localCharPointer[3];\n        localCharPointer = charPointer;\n        if (charVar2 == 'i') {\n          longVar3 = strtol(charPointer,(char **)0x0,10);\n          if (charPointer2 == (char *)0x0) {\n            return 0;\n          }\n          longVar1 = FUN_00112996(paramOne,charPointer2,4);\n          if (longVar1 != 0) {\n            *(long *)(longVar1 + 0x20) = (long)(int)longVar3;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar2 == 'r') {\n          doubleVar = strtod(charPointer,(char **)0x0);\n          if (charPointer2 == (char *)0x0) {\n            return 0;\n          }\n          longVar3 = FUN_00112996(paramOne,charPointer2,5);\n          if (longVar3 != 0) {\n            *(double *)(longVar3 + 0x20) = doubleVar;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar2 == 'e') {\n          longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n          if (longVar3 == 0) {\n            return 0;\n          }\n          charPointer = localCharPointer;\n          if (*localCharPointer == ',') {\n            longVar1 = strtol(localCharPointer,(char **)0x0,10);\n            if (charPointer2 == (char *)0x0) {\n              return 0;\n            }\n            longVar2 = FUN_00112996(paramOne,charPointer2,6);\n            if (longVar2 != 0) {\n              longVar = (long *)xmalloc(0x10);\n              *longVar = longVar3;\n              longVar[1] = (long)(int)longVar1;\n              *(long **)(longVar2 + 0x20) = longVar;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharPointer[2] == 'F') {\n        localCharPointer = localCharPointer + 3;\n        longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n        if (longVar3 == 0) {\n          return 0;\n        }\n        undefinedVar = FUN_00113ce0(longVar3,0,0);\n        longVar3 = FUN_00113d3a(undefinedVar);\n      }\n      else {\n        localCharPointer = charPointer;\n        longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      }\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 1;\n      break;\n    case 'r':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 5;\nLAB_001123e8:\n      charVar2 = FUN_0010c139(paramOne,debugInfo,charPointer2,longVar3,undefinedVar,address);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,charPointer2,&localCharPointer,localPointerArray);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (charPointer2 == (char *)0x0) {\n        return 1;\n      }\n      longVar = (long *)FUN_0010c218(paramOne,charPointer2,longVar3);\n      if (longVar == (long *)0x0) {\n        return 0;\n      }\n      if (localPointerArray[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPointerArray[0] = longVar;\n      return 1;\n    case 'v':\n      localCharPointer = charPointer;\n      longVar3 = FUNC_0010ee3f(paramOne,debugInfo,0,&localCharPointer,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar = 3;\n    }\n    charVar2 = FUN_0010bd62(paramOne,charPointer2,longVar3,undefinedVar,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (mode == 1)) {\n      return 1;\n    }\n    charVar2 = FUN_0010c1c6(paramOne,debugInfo);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    charVar2 = FUN_0010bf20(paramOne,debugInfo[7] + debugInfo[6] + address);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    debugInfo = debugInfo + 0xe;\n    *(int *)debugInfo = *(int *)debugInfo + -1;\n    charPointer = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugInfo) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        charPointer = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charPointer = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar = dcgettext(0,charPointer,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        intVar = *(int *)(debugInfo + 0x10);\n        *(uint *)(debugInfo + 0x10) = intVar + 1U;\n        longVar3 = xrealloc(debugInfo[0x11],(ulong)(intVar + 1U) << 3);\n        pointerVar = (undefined8 *)debugInfo[0xb];\n        debugInfo[0x11] = longVar3;\n        while( true ) {\n          if (pointerVar == (undefined8 *)0x0) {\n            undefinedVar = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(name,undefinedVar);\n            *(undefined8 *)(debugInfo[0x11] + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == pointerVar[3]) && (intVar = strcmp((char *)pointerVar[2],name), intVar == 0))\n          break;\n          pointerVar = (undefined8 *)*pointerVar;\n        }\n        *(undefined8 *)(longVar3 + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = pointerVar[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        longVar3 = debugInfo[10];\n        if (longVar3 != 0) {\n          longVar1 = *(long *)(longVar3 + 8);\n          uintVar = *(uint *)(longVar3 + 0x20);\n          debugInfo[10] = longVar1;\n          if ((uintVar < *(uint *)(debugInfo + 0x10)) &&\n             (*(undefined8 *)(longVar3 + 0x28) = *(undefined8 *)(debugInfo[0x11] + (ulong)uintVar * 8),\n             longVar1 != 0)) {\n            name = *(char **)(longVar1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debugInfo[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (mode == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugInfo + 0xc) != '\\0') {\n      charVar2 = FUN_0010be88(paramOne,debugInfo[7] + debugInfo[6] + address);\n      if (charVar2 == '\\0') {\n        return 0;\n      }\n      charVar2 = FUN_0010c1c6(paramOne,debugInfo);\n      if (charVar2 != '\\0') {\n        *(int *)(debugInfo + 0xe) = *(int *)(debugInfo + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charPointer = \"N_LBRAC not within function\\n\";\n  }\n  charPointer = (char *)dcgettext(0,charPointer,5);\n  fprintf(_stderr,charPointer);\n  return 0;\ncode_r0x00111cc7:\n  localCharPointer = localCharPointer + 2;\n  localCharPointer = strchr(localCharPointer,0x3a);\n  if (localCharPointer == (char *)0x0) {\n    charPointer = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharPointer = charPointer;\n    FUN_00108fb9(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar2 != 't') {\n      return 1;\n    }\n    longVar = (long *)FUN_0010c218(paramOne,charPointer2,longVar);\n    if (longVar != (long *)0x0) {\n      if (localPointerArray[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPointerArray[0] = longVar;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *charPointer2) &&\n     (intVar = strcmp((char *)pplVar18[1],charPointer2), intVar == 0)) {\n    pplVar18[3] = longVar;\n    *pointerPointer = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pointerPointer = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar1 < 1) {\nLAB_0011208f:\n    undefinedVar = 1;\nLAB_001121c4:\n    charVar2 = FUN_0010c05d(paramOne,charPointer2,longVar3,undefinedVar,address);\njoined_r0x001123f8:\n    if (charVar2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charPointer = *(char **)(*longVar + 8);\n  if ((charVar2 != '\\0') && (charVar2 == *charPointer)) {\n    charPointer = charPointer + 1;\n  }\n  if ((*charPointer == *charPointer2) && (intVar = strcmp(charPointer,charPointer2), intVar == 0)) {\n    address = *(long *)(*longVar + 0x10) + *(long *)(*(long *)(*longVar + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar1 = longVar1 + -1;\n  longVar = longVar + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c05d",
                "xstrdup",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "fprintf",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_0010c139",
                "strcmp",
                "FUN_00113d3a",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "xmalloc",
                "FUN_0010bbd3",
                "strchr",
                "xrealloc",
                "FUN_0010c1c6",
                "FUN_0010c6be",
                "strtod",
                "FUN_00112996",
                "strtol",
                "strlen",
                "FUN_0010bf86",
                "FUN_0010be1a",
                "free",
                "FUN_0010bc80",
                "FUN_0010be88",
                "concat",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "relocated_function_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "isError",
                "iVar2": "error",
                "uVar3": "relocSize",
                "lVar4": "upperBound",
                "puVar5": "relocArray",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "dstPtr",
                "puVar8": "nextDstPtr",
                "uStack_38": "unusedStackVar"
            },
            "code": "\nvoid relocatedFunction_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char isError;\n  int error;\n  undefined8 relocSize;\n  long upperBound;\n  undefined8 *relocArray;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *dstPtr;\n  undefined8 *nextDstPtr;\n  ulong uVar9;\n  undefined8 unusedStackVar;\n  \n  isError = FUN_00115f50(param1,param2,0);\n  if (isError != '\\0') {\n    return;\n  }\n  relocSize = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (upperBound = FUN_00114190(*param2,0,0x100), upperBound == 0)) {\n    upperBound = bfd_get_reloc_upper_bound(param1,param2);\n    if (upperBound < 0) {\n      if ((upperBound != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a40 = 1;\n        relocSize = 0;\nLAB_00108315:\n        FUN_001126c0(0,param1,param2,relocSize,unusedStackVar);\n        return;\n      }\n    }\n    else if (upperBound != 0) {\n      relocArray = (undefined8 *)param2[0xe];\n      if (relocArray == (undefined8 *)0x0) {\n        relocArray = (undefined8 *)bfd_alloc(param3);\n        if (relocArray == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocArray,DAT_001278d0);\n        if ((long)relocCount < 0) {\n          DAT_00127a40 = 1;\n          relocSize = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        dstPtr = relocArray;\n        for (uVar9 = 0; uVar9 != relocCount; uVar9 = uVar9 + 1) {\n          nextDstPtr = dstPtr;\n          if (((*(long **)relocArray[uVar9] != (long *)0x0) &&\n              (upperBound = **(long **)relocArray[uVar9], upperBound != 0)) &&\n             (isError = FUN_00115d70(*(undefined8 *)(upperBound + 8),DAT_00127a28), isError != '\\0')) {\n            nextDstPtr = dstPtr + 1;\n            *dstPtr = relocArray[uVar9];\n          }\n          dstPtr = nextDstPtr;\n        }\n        *dstPtr = 0;\n        relocCount = (long)dstPtr - (long)relocArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocArray = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param3,relocSize,relocArray,relocCount);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_0011a110",
                "FUN_001082df",
                "bfd_get_error",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "FUN_001126c0",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "relocated_function_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_process_data_0010d559",
                "param_1": "data_ptr",
                "param_2": "byte_array_ptr",
                "param_3": "result_ptr",
                "bVar1": "second_byte",
                "pbVar2": "current_byte_ptr",
                "cVar3": "char_var",
                "uVar4": "var_length",
                "iVar5": "string_compare_result",
                "ppcVar6": "char_array_ptr",
                "sVar7": "string_length",
                "lVar8": "result",
                "plVar9": "result_array_ptr",
                "pcVar10": "temp_char_ptr",
                "__s1": "temp_char_ptr_2",
                "__ptr": "temp_ptr",
                "pbVar11": "next_byte_ptr",
                "uVar12": "default_value",
                "__nptr": "int_string_ptr",
                "local_64": "local_var_1",
                "local_40": "local_char_array"
            },
            "code": "\nundefined8 parse_and_process_data_0010d559(undefined8 *data_ptr,byte **byte_array_ptr,long *result_ptr)\n\n{\n  byte second_byte;\n  byte *current_byte_ptr;\n  char char_var;\n  uint var_length;\n  int string_compare_result;\n  char **char_array_ptr;\n  size_t string_length;\n  long result;\n  long *result_array_ptr;\n  char *temp_char_ptr;\n  char *temp_char_ptr_2;\n  void *temp_ptr;\n  byte *next_byte_ptr;\n  undefined8 default_value;\n  byte *int_string_ptr;\n  int local_var_1;\n  char *local_char_array [2];\n  \n  current_byte_ptr = *byte_array_ptr;\n  second_byte = current_byte_ptr[1];\n  if ((char)second_byte < ':') {\n    if ((char)second_byte < '1') goto LAB_0010d5d8;\n    local_var_1 = (char)second_byte + -0x30;\n    if (current_byte_ptr[2] == 0x5f) {\n      *byte_array_ptr = current_byte_ptr + 1;\n    }\n    next_byte_ptr = *byte_array_ptr + 2;\n  }\n  else {\n    if (((second_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte_ptr[2] * 2] & 4) == 0)) ||\n       (current_byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    int_string_ptr = current_byte_ptr + 2;\n    result = strtol((char *)int_string_ptr,(char **)0x0,10);\n    local_var_1 = (int)result;\n    while (((&_sch_istable)[(ulong)*int_string_ptr * 2] & 4) != 0) {\n      int_string_ptr = int_string_ptr + 1;\n    }\n    next_byte_ptr = int_string_ptr + 1;\n    if (*int_string_ptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_array_ptr = next_byte_ptr;\n  char_array_ptr = (char **)0x0;\n  if (result_ptr != (long *)0x0) {\n    char_array_ptr = local_char_array;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      local_var_1 = local_var_1 + -1;\n      if (local_var_1 == -1) {\n        if (result_ptr != (long *)0x0) {\n          *result_ptr = result;\n        }\n        return 1;\n      }\n      if (**byte_array_ptr == 0x5f) {\n        *byte_array_ptr = *byte_array_ptr + 1;\n      }\n      if (**byte_array_ptr != 0x74) break;\n      char_var = FUN_0010d21c(data_ptr,byte_array_ptr,char_array_ptr);\n      temp_char_ptr = local_char_array[0];\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (result_ptr != (long *)0x0) {\n        string_length = strlen(local_char_array[0]);\n        result = FUN_0010afd5(*data_ptr,data_ptr[1],temp_char_ptr,string_length & 0xffffffff,9);\n        free(temp_char_ptr);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    var_length = FUN_00108e76(byte_array_ptr);\n    string_length = strlen((char *)*byte_array_ptr);\n    if (string_length < var_length) break;\n    if (result_ptr != (long *)0x0) {\n      if ((result != 0) && (result_array_ptr = (long *)FUN_00113b1e(result), result_array_ptr != (long *)0x0)) {\n        temp_char_ptr = (char *)FUN_00109a0b(*byte_array_ptr,var_length);\n        for (; result = *result_array_ptr, result != 0; result_array_ptr = result_array_ptr + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(temp_char_ptr);\n            return 0;\n          }\n          temp_char_ptr_2 = (char *)FUN_001129f4(result);\n          if ((temp_char_ptr_2 != (char *)0x0) && (string_compare_result = strcmp(temp_char_ptr_2,temp_char_ptr), string_compare_result == 0)) break;\n        }\n        free(temp_char_ptr);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      default_value = 9;\n      if (local_var_1 == 0) {\n        temp_ptr = (void *)FUN_00109a0b(*byte_array_ptr,var_length);\n        result = FUN_0010914e(*data_ptr,temp_ptr);\n        free(temp_ptr);\n        if (result != 0) goto LAB_0010d7ad;\n        default_value = 0;\n      }\n      result = FUN_0010afd5(*data_ptr,data_ptr[1],*byte_array_ptr,var_length,default_value);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_array_ptr = *byte_array_ptr + var_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(current_byte_ptr);\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010d21c",
                "strcmp",
                "FUN_0010911f",
                "FUN_00113b1e",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "strtol",
                "FUN_001129f4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,errorMessage,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "putc",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_number_00108e76",
                "param_1": "input",
                "bVar1": "currentChar",
                "iVar2": "number"
            },
            "code": "\nint parseNumber_00108e76(byte **input)\n\n{\n  byte currentChar;\n  int number;\n  \n  number = 0;\n  while( true ) {\n    currentChar = **input;\n    if (((&_sch_istable)[(ulong)currentChar * 2] & 4) == 0) break;\n    *input = *input + 1;\n    number = number * 10 + -0x30 + (int)(char)currentChar;\n  }\n  return number;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "parse_number_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 param_2,undefined8 param_3)\n\n{\n  long hash_ptr;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2,0x30), input_value != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_value,param_2,param_3), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_param_2_and_call_func_thunk_0010e439",
                "param_1": "memory_address",
                "param_2": "value"
            },
            "code": "\nvoid set_param_2_and_call_func_thunk_0010e439(long memory_address,undefined8 value)\n\n{\n  *(undefined8 *)(memory_address + 0x210) = value;\n  FUN_0010e2f0(memory_address,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_2_and_call_func_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "param_1": "directory_path",
                "param_2": "result",
                "iVar1": "access_result",
                "sStack_a8": "file_stat"
            },
            "code": "\nchar * check_directory_permission_0011283f(char *directory_path,char *result)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((result == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        result = directory_path;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permission_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_and_set_errno_00108237",
                "piVar2": "errnoLocation",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "savedErrno"
            },
            "code": "\nundefined8 closeAndSetErrno_00108237(void)\n\n{\n  int savedErrno;\n  int *errnoLocation;\n  int fileDescriptor;\n  \n  errnoLocation = __errno_location();\n  savedErrno = *errnoLocation;\n  close(fileDescriptor);\n  *errnoLocation = savedErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00108237"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "record",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "errorMessage",
                "plVar2": "debugInfo",
                "puVar3": "dataArray",
                "lVar4": "i",
                "puVar5": "ptr",
                "pcVar6": "defaultFilename",
                "bVar7": "flagByte",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long record,char *filename,long size,uint flag,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined8 errorMessage;\n  long *debugInfo;\n  undefined4 *dataArray;\n  long i;\n  undefined4 *ptr;\n  char *defaultFilename;\n  byte flagByte;\n  undefined returnValue [16];\n  \n  flagByte = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(record + 8) == 0) {\n      errorMessage = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      debugInfo = (long *)xmalloc(0x18);\n      *debugInfo = size;\n      *(undefined (*) [16])(debugInfo + 1) = ZEXT816(0);\n      dataArray = (undefined4 *)xmalloc(0x30);\n      *(long **)(record + 0x18) = debugInfo;\n      debugInfo[2] = (long)dataArray;\n      ptr = dataArray;\n      for (i = 0xc; i != 0; i = i + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flagByte * -2 + 1;\n      }\n      *(undefined4 **)(record + 0x20) = dataArray;\n      i = *(long *)(record + 0x10);\n      *(undefined8 *)(dataArray + 6) = param5;\n      *(undefined8 *)(dataArray + 8) = 0xffffffffffffffff;\n      i = FUN_00112925(i + 0x10,defaultFilename,3,(flag & 0xff) + 1);\n      if (i != 0) {\n        *(long **)(i + 0x20) = debugInfo;\n        errorMessage = CONCAT71((int7)((ulong)i >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param6;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107880",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "length",
                "lVar3": "start",
                "lVar4": "slashOffset",
                "pcVar5": "newFilePath",
                "bVar6": "isSlash"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long length;\n  long start;\n  long slashOffset;\n  char *newFilePath;\n  byte isSlash;\n  \n  isSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    start = 0;\n  }\n  else {\n    slashOffset = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(slashOffset + 0xb);\n    start = slashOffset + 1;\n    newFilePath = lastSlash;\n    for (length = slashOffset; length != 0; length = length + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)isSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)isSlash * -2 + 1;\n    }\n    lastSlash[slashOffset] = '/';\n  }\n  *(undefined8 *)(lastSlash + start) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + start) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "dataStruct",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "charFlag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "resultString",
                "local_41": "localFlag",
                "iVar2": "intVar1",
                "lVar7": "longVar",
                "iVar3": "intVar2",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a181(long dataStruct,long startValue,long endValue,byte flag)\n\n{\n  char charFlag;\n  int intVar1;\n  int intVar2;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long longVar;\n  byte localFlag;\n  \n  charFlag = *(char *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (charFlag == '\\0') {\n    localFlag = *(byte *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  }\n  intVar1 = *(int *)(*(long *)(dataStruct + 0x60) + 0x18);\n  string2 = (char *)FUN_00109b2f(dataStruct);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    longVar = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    longVar = *(long *)(dataStruct + 0x68);\n    *(long *)(dataStruct + 0x68) = longVar + 1;\n    sprintf(resultString,\"%ld=@S;\",longVar);\n    localFlag = flag;\n  }\n  length1 = strlen(resultString);\n  sprintf(resultString + length1,\"ar%s;%ld;%ld;%s\",string1,startValue,endValue,string2);\n  free(string1);\n  free(string2);\n  intVar2 = 0;\n  if (startValue <= endValue) {\n    intVar2 = intVar1 * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = FUN_00109b52(dataStruct,resultString,longVar,localFlag,intVar2);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_header_info_001199d0",
                "pcVar4": "headerFormat",
                "iVar1": "columns",
                "iVar2": "target",
                "iVar3": "comparisonResult",
                "pcVar6": "tempFileName",
                "sVar5": "tempFileNameLength",
                "uVar7": "envVarPath",
                "piVar8": "errnoLoc",
                "iVar9": "loopVar",
                "lVar10": "loopVar2",
                "lVar11": "loopVar3",
                "ppcVar12": "archMachArray",
                "uVar13": "maxArchMachLen",
                "uVar14": "archMachLen",
                "local_70": "archIndex"
            },
            "code": "\n\n\nvoid printBFDHeaderInfo_001199d0(void)\n\n{\n  int columns;\n  int target;\n  int comparisonResult;\n  char *headerFormat;\n  size_t tempFileNameLength;\n  char *tempFileName;\n  undefined8 envVarPath;\n  int *errnoLoc;\n  int loopVar;\n  long loopVar2;\n  long loopVar3;\n  char **archMachArray;\n  uint maxArchMachLen;\n  ulong archMachLen;\n  int archIndex;\n  \n  headerFormat = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerFormat,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    headerFormat = getenv(\"TMPDIR\");\n    envVarPath = FUN_0011283f(headerFormat,0);\n    headerFormat = getenv(\"TMP\");\n    envVarPath = FUN_0011283f(headerFormat,envVarPath);\n    headerFormat = getenv(\"TEMP\");\n    envVarPath = FUN_0011283f(headerFormat,envVarPath);\n    envVarPath = FUN_0011283f(&DAT_0011b39a,envVarPath);\n    envVarPath = FUN_0011283f(\"/var/tmp\",envVarPath);\n    headerFormat = (char *)FUN_0011283f(&DAT_00120324,envVarPath);\n    if (headerFormat == (char *)0x0) {\n      headerFormat = \".\";\n    }\n    tempFileNameLength = strlen(headerFormat);\n    tempFileName = (char *)xmalloc((int)tempFileNameLength + 2);\n    DAT_001278e0 = strcpy(tempFileName,headerFormat);\n    DAT_001278e0[tempFileNameLength & 0xffffffff] = '/';\n    DAT_001278e0[(int)tempFileNameLength + 1] = '\\0';\n  }\n  headerFormat = DAT_001278e0;\n  tempFileNameLength = strlen(DAT_001278e0);\n  loopVar2 = (long)(int)tempFileNameLength;\n  tempFileName = (char *)xmalloc(loopVar2 + 9);\n  strcpy(tempFileName,headerFormat);\n  *(undefined2 *)(tempFileName + loopVar2) = 0x6363;\n  *(undefined4 *)(tempFileName + loopVar2 + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFileName + loopVar2 + 2) + 3) = 0x585858;\n  tempFileName[loopVar2 + 8] = '\\0';\n  target = mkstemps(tempFileName,0);\n  if (target == -1) {\n    errnoLoc = __errno_location();\n    tempFileName = strerror(*errnoLoc);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerFormat,tempFileName);\n                    \n    abort();\n  }\n  target = close(target);\n  if (target != 0) {\n                    \n    abort();\n  }\n  maxArchMachLen = 0;\n  target = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempFileName);\n  free(tempFileName);\n  archIndex = 0;\n  do {\n    headerFormat = (char *)bfd_printable_arch_mach(target);\n    tempFileNameLength = strlen(headerFormat);\n    if ((int)maxArchMachLen < (int)(uint)tempFileNameLength) {\n      maxArchMachLen = (uint)tempFileNameLength;\n    }\n    target = target + 1;\n  } while (target != 0x57);\n  headerFormat = getenv(\"COLUMNS\");\n  target = archIndex;\n  if (headerFormat != (char *)0x0) {\n    loopVar2 = strtol(headerFormat,(char **)0x0,10);\n    columns = (int)loopVar2;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    archIndex = target;\n    if (-1 < archIndex) {\n      return;\n    }\n    loopVar3 = (long)archIndex;\n    loopVar = (columns - maxArchMachLen) + -1;\n    loopVar2 = loopVar3;\n    do {\n      target = (int)loopVar2;\n      if (-1 < target) break;\n      tempFileNameLength = strlen(*(char **)(loopVar2 * 0x60));\n      loopVar2 = loopVar2 + 1;\n      loopVar = (loopVar - (int)tempFileNameLength) + -1;\n    } while (-1 < loopVar);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLen + 1),&DAT_0011b4a1);\n    for (archMachArray = (char **)(loopVar3 * 0x60);\n        ((ulong)(uint)(target - archIndex) + loopVar3) * 0x60 - (long)archMachArray != 0;\n        archMachArray = archMachArray + 0xc) {\n      printf(\"%s \",*archMachArray);\n    }\n    loopVar = 2;\n    putc(10,_stdout);\n    do {\n      headerFormat = (char *)bfd_printable_arch_mach(loopVar,0);\n      comparisonResult = strcmp(headerFormat,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        envVarPath = bfd_printable_arch_mach(loopVar,0);\n        printf(\"%*s \",(ulong)maxArchMachLen,envVarPath);\n        archMachArray = (char **)(loopVar3 * 0x60);\n        comparisonResult = archIndex;\n        while (target != comparisonResult) {\n          if (*(char *)((long)archMachArray + (ulong)(loopVar - 2) + 8) == '\\0') {\n            tempFileNameLength = strlen(*archMachArray);\n            for (archMachLen = tempFileNameLength & 0xffffffff; (int)archMachLen != 0; archMachLen = (ulong)((int)archMachLen - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachArray,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (target != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          archMachArray = archMachArray + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      loopVar = loopVar + 1;\n    } while (loopVar != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strerror",
                "mkstemps",
                "bfd_printable_arch_mach",
                "FUN_00119f70",
                "strlen",
                "strcpy",
                "getenv",
                "fprintf",
                "__errno_location",
                "free",
                "bfd_iterate_over_targets",
                "unlink",
                "FUN_0011283f",
                "abort",
                "close",
                "FUN_00104943",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_header_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_program_0010847a"
            },
            "code": "\nvoid initializeProgram_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_program_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_improve_0010d21c",
                "param_1": "input_param",
                "param_2": "byte_pointer",
                "param_3": "output_param",
                "bVar1": "byte_var1",
                "pbVar2": "byte_ptr2",
                "bVar3": "byte_var3",
                "cVar4": "char_var4",
                "bVar5": "byte_var5",
                "uVar6": "result",
                "iVar7": "int_var7",
                "uVar8": "uint_var8",
                "sVar9": "size_var9",
                "pbVar10": "byte_ptr10",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "char_ptr11",
                "uVar12": "result2",
                "pcVar13": "char_ptr13",
                "bVar14": "byte_var14",
                "pcVar15": "char_ptr15",
                "bVar16": "byte_var16",
                "bVar17": "byte_var17",
                "bVar18": "byte_var18",
                "bVar19": "byte_var19",
                "uVar20": "uint_var20",
                "uVar21": "ulong_var21",
                "local_3c": "local_arr"
            },
            "code": "\nundefined4 reverse_and_improve_0010d21c(undefined8 input_param,byte **byte_pointer,undefined8 *output_param)\n\n{\n  byte byte_var1;\n  byte *byte_ptr2;\n  byte byte_var3;\n  char char_var4;\n  byte byte_var5;\n  undefined4 result;\n  int int_var7;\n  uint uint_var8;\n  size_t size_var9;\n  byte *byte_ptr10;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *char_ptr11;\n  undefined8 result2;\n  char *char_ptr13;\n  byte byte_var14;\n  char *char_ptr15;\n  byte byte_var16;\n  byte byte_var17;\n  byte byte_var18;\n  byte byte_var19;\n  uint uint_var20;\n  ulong ulong_var21;\n  uint local_arr [3];\n  \n  byte_ptr2 = *byte_pointer;\n  *byte_pointer = byte_ptr2 + 1;\n  local_arr[0] = FUN_00108e76(byte_pointer);\n  ulong_var21 = (ulong)local_arr[0];\n  if (local_arr[0] != 0) {\n    byte_ptr10 = *byte_pointer;\n    size_var9 = strlen((char *)byte_ptr10);\n    if (ulong_var21 <= size_var9) {\n      *byte_pointer = byte_ptr10 + ulong_var21;\n      uint_var20 = 0;\n      result = FUN_00108ea1(byte_pointer,local_arr);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_arr[0] <= uint_var20) {\n          if (output_param == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)FUN_00109a0b(byte_ptr2,(int)*byte_pointer - (int)byte_ptr2);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (char_ptr11 = strstr(haystack,\"::NoSuchStrinG\"), char_ptr13 = haystack,\n             char_ptr15 = haystack, char_ptr11 != (char *)0x0)) {\n            for (; char_ptr13 != char_ptr11; char_ptr13 = char_ptr13 + 1) {\n              if ((*char_ptr13 != ' ') ||\n                 (((char_ptr13[1] == '>' && (haystack < char_ptr13)) && (char_ptr13[-1] == '>')))) {\n                *char_ptr15 = *char_ptr13;\n                char_ptr15 = char_ptr15 + 1;\n              }\n            }\n            result2 = FUN_00109a0b(haystack,(int)char_ptr15 - (int)haystack);\n            *output_param = result2;\n            free(haystack);\n            return result;\n          }\n          FUN_0010911f(byte_ptr2);\n          free(haystack);\n          return 0;\n        }\n        byte_ptr10 = *byte_pointer;\n        if (*byte_ptr10 != 0x5a) {\n          byte_var5 = FUN_0010c95e(input_param,byte_pointer,0);\n          if (byte_var5 == 0) {\n            return 0;\n          }\n          byte_var3 = 0;\n          byte_var14 = 0;\n          byte_var18 = 0;\n          byte_var17 = 0;\n          byte_var19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte_var16 = byte_var3;\n              byte_var1 = *byte_ptr10;\n              if ((byte_var14 | byte_var1 == 0) != 0) {\n                byte_var5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte_var3 = byte_var5;\n              byte_var14 = byte_var5;\n            } while ('v' < (char)byte_var1);\n            if ((char)byte_var1 < 'b') {\n              if ((char)byte_var1 < 'U') {\n                if ((char)byte_var1 < 'C') goto LAB_0010d2e9;\n                ulong_var21 = 1L << (byte_var1 + 0xbd & 0x3f);\n                if ((ulong_var21 & 0x11409) == 0) {\n                  if ((ulong_var21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte_var1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte_var1 + 0xab)) goto LAB_0010d2e9;\n              byte_ptr10 = byte_ptr10 + 1;\n              byte_var3 = byte_var16;\n              byte_var14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte_var1) {\n            case 0x62:\n              byte_var3 = byte_var16;\n              byte_var18 = byte_var5;\n              break;\n            case 99:\n              byte_var3 = byte_var16;\n              byte_var19 = byte_var5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte_var3 = byte_var16;\n              byte_var17 = byte_var5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byte_pointer = byte_ptr10 + 1;\n        char_var4 = FUN_0010c95e(input_param,byte_pointer,0);\n        if (char_var4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(byte_ptr2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte_var16 == 0) {\n    if (byte_var19 == 0) {\n      if (byte_var18 == 0) {\n        if (byte_var17 == 0) {\n          if (byte_var5 != 0) {\n            uint_var8 = FUN_00108e76(byte_pointer);\n            if (uint_var8 == 0) goto LAB_0010d280;\n            *byte_pointer = *byte_pointer + uint_var8;\n          }\n        }\n        else {\n          if (**byte_pointer == 0x6d) {\n            *byte_pointer = *byte_pointer + 1;\n          }\n          while( true ) {\n            byte_ptr10 = *byte_pointer;\n            if (((&_sch_istable)[(ulong)*byte_ptr10 * 2] & 4) == 0) break;\n            *byte_pointer = byte_ptr10 + 1;\n          }\n          if (*byte_ptr10 == 0x2e) {\n            do {\n              byte_ptr10 = byte_ptr10 + 1;\n              *byte_pointer = byte_ptr10;\n            } while (((&_sch_istable)[(ulong)*byte_ptr10 * 2] & 4) != 0);\n          }\n          byte_ptr10 = *byte_pointer;\n          if (*byte_ptr10 == 0x65) {\n            do {\n              byte_ptr10 = byte_ptr10 + 1;\n              *byte_pointer = byte_ptr10;\n            } while (((&_sch_istable)[(ulong)*byte_ptr10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uint_var8 = FUN_00108e76(byte_pointer);\n        if (1 < uint_var8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byte_pointer == 0x6d) {\n        *byte_pointer = *byte_pointer + 1;\n      }\n      int_var7 = FUN_00108e76(byte_pointer);\n      if (int_var7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byte_pointer == 0x6d) {\n      *byte_pointer = *byte_pointer + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byte_pointer * 2] & 4) != 0) {\n      *byte_pointer = *byte_pointer + 1;\n    }\n  }\nLAB_0010d2b1:\n  uint_var20 = uint_var20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "free",
                "strstr",
                "abort",
                "FUN_0010911f",
                "cplus_demangle",
                "FUN_00108e76",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_data_structures_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "temp"
            },
            "code": "\nvoid cleanupDataStructures_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 temp;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unusedParam2,temp);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_data_structures_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_data_structure_0010c139",
                "param_1": "base_address",
                "param_2": "struct_address",
                "uVar1": "previous_ptr",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "new_structure",
                "in_R10": "unimportant_register",
                "unaff_R15": "unimportant_register"
            },
            "code": "\nulong allocate_data_structure_0010c139(undefined8 base_address,long struct_address,undefined8 param_3,undefined8 param_4,\n                  undefined4 param_5,undefined8 param_6)\n\n{\n  undefined8 previous_ptr;\n  char flag;\n  ulong result;\n  undefined8 *new_structure;\n  undefined8 unimportant_register;\n  undefined8 unimportant_register;\n  \n  flag = *(char *)(struct_address + 0x60);\n  if ((flag != '\\0') && ((*(int *)(struct_address + 0x40) != 0 || (*(char *)(struct_address + 0x44) == '\\0')))) {\n    new_structure = (undefined8 *)xmalloc(0x28);\n    previous_ptr = *(undefined8 *)(struct_address + 0x78);\n    *(undefined8 *)((long)new_structure + 0x1c) = 0;\n    new_structure[2] = param_4;\n    *(undefined4 *)(new_structure + 3) = param_5;\n    new_structure[4] = param_6;\n    *(undefined8 **)(struct_address + 0x78) = new_structure;\n    *new_structure = previous_ptr;\n    new_structure[1] = param_3;\n    return CONCAT71((int7)((ulong)unimportant_register >> 8),flag) & 0xffffffff;\n  }\n  result = FUN_0010c05d(base_address,param_3,param_4,param_5,param_6,unimportant_register);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_data_structure_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_data_0010e439",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "code": "\nvoid updateData_0010e439(long dataAddress,undefined8 newValue)\n\n{\n  *(undefined8 *)(dataAddress + 0x210) = newValue;\n  FUN_0010e2f0(dataAddress,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "update_data_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010abdd",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010e6a8",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_00109dfe",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_00113fb0",
                "FUN_00116b90",
                "FUN_0010abdd",
                "FUN_0010a181",
                "FUN_00113ede",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00115530",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_00104ad6",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "defaultVal"
            },
            "code": "\nvoid processData_00109d3e(undefined8 data,int length)\n\n{\n  undefined8 defaultVal;\n  \n  defaultVal = 0xfffffffffffffff0;\n  if (length - 1U < 8) {\n    defaultVal = *(undefined8 *)(&DAT_00121360 + (ulong)(length - 1U) * 8);\n  }\n  FUN_00109cf4(data,defaultVal,length);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "validate_and_check_00112502",
                "param_1": "input",
                "param_2": "value",
                "param_3": "limit",
                "uVar1": "count",
                "puVar2": "ptr",
                "uVar3": "nextPtr",
                "cVar4": "result"
            },
            "code": "\nundefined validateAndCheck_00112502(long input,undefined8 value,ulong limit)\n\n{\n  uint count;\n  undefined8 *ptr;\n  undefined8 nextPtr;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(input + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((count = *(uint *)(input + 0x48), count < 10 && (ptr[(ulong)count + 2] != -1))) {\n      if (limit <= (ulong)ptr[(ulong)count + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(value,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(input + 0x48) = *(int *)(input + 0x48) + 1;\n    }\n    nextPtr = *ptr;\n    *(undefined4 *)(input + 0x48) = 0;\n    *(undefined8 *)(input + 0x40) = nextPtr;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "validate_and_check_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "in_R10": "currentLine",
                "param_7": "lineFormat",
                "param_8": "output",
                "param_9": "input",
                "unaff_EBP": "lineNumber",
                "unaff_R13": "rubbishMessage",
                "unaff_R14": "currentChar",
                "unaff_R15": "lineStart",
                "unaff_RBX": "nextChar",
                "uVar1": "errorMessage",
                "ppbVar2": "slot",
                "pbVar3": "tmpChar",
                "bVar4": "temp",
                "pbVar5": "inputLine"
            },
            "code": "\nvoid processLines_00104cc1(void)\n\n{\n  undefined8 errorMessage;\n  byte **slot;\n  byte *tmpChar;\n  byte temp;\n  byte *nextChar;\n  byte *inputLine;\n  int lineNumber;\n  byte *currentLine;\n  undefined8 rubbishMessage;\n  byte *currentChar;\n  byte *lineStart;\n  undefined8 lineFormat;\n  undefined8 *output;\n  byte *input;\n  \ncode_r0x00104cc1:\n  input = currentLine;\n  errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(errorMessage,lineFormat,lineNumber);\n  inputLine = nextChar;\n  currentLine = input;\nLAB_00114599:\n  do {\n    *currentLine = 0;\n    if (lineStart < currentLine) {\n      slot = (byte **)htab_find_slot();\n      *slot = lineStart;\n    }\n    lineNumber = lineNumber + 1;\n    tmpChar = inputLine;\n    if (currentChar[1] == 0) {\n      *output = rubbishMessage;\n      return;\n    }\n    for (; temp = *tmpChar, currentChar = tmpChar, temp != 10; tmpChar = tmpChar + 1) {\n      if ((char)temp < '\\v') {\n        if (temp == 0) {\n          nextChar = tmpChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (temp == 0xd) {\n          *tmpChar = 0;\n          nextChar = tmpChar + 1;\n          if (tmpChar[1] == 10) {\n            nextChar = tmpChar + 2;\n            currentChar = tmpChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (temp == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *tmpChar = 0;\n    if (tmpChar[1] == 0xd) {\n      currentChar = tmpChar + 1;\n      nextChar = tmpChar + 2;\n    }\n    else {\n      nextChar = tmpChar + 1;\n    }\nLAB_00114553:\n    temp = *inputLine;\n    lineStart = inputLine;\n    while ((temp == 0x20 || (currentLine = lineStart, temp == 9))) {\n      inputLine = lineStart + 1;\n      lineStart = lineStart + 1;\n      temp = *inputLine;\n    }\n    do {\n      inputLine = nextChar;\n      if ((temp == 10) || (temp == 0xd)) goto LAB_00114676;\n      if (temp == 0) goto LAB_00114599;\n      temp = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((temp != 0x20) && (temp != 9));\n    if ((char)temp < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (temp & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    temp = currentLine[1];\n    if ((((((temp == 9) || (temp == 0x20)) && ((temp = currentLine[2], temp == 9 || (temp == 0x20)))\n          ) && ((temp = currentLine[3], temp == 9 || (temp == 0x20)))) &&\n        ((temp = currentLine[4], temp == 9 || (temp == 0x20)))) &&\n       ((temp = currentLine[5], temp == 9 || (temp == 0x20)))) {\n      temp = currentLine[6];\n      tmpChar = currentLine + 6;\n      if ((temp == 9) || (temp == 0x20)) {\n        do {\n          do {\n            temp = tmpChar[1];\n            tmpChar = tmpChar + 1;\n          } while (temp == 0x20);\n        } while (temp == 9);\n      }\n    }\n    if ((0xd < temp) || ((-0x2402L >> (temp & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0011173a",
                "FUN_0010b6ea",
                "FUN_00109c2e",
                "FUN_00109be3",
                "FUN_0010e07c",
                "FUN_0010e2f0",
                "FUN_0010dac0",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_store_params_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "plVar2": "allocatedParams"
            },
            "code": "\nlong allocateAndStoreParams_00113bfa(long input1,long input2)\n\n{\n  long result;\n  long *allocatedParams;\n  \n  if (((input1 != 0) && (input2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    allocatedParams = (long *)xmalloc(0x10);\n    *allocatedParams = input1;\n    allocatedParams[1] = input2;\n    *(long **)(result + 0x10) = allocatedParams;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_store_params_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "handle_share_flag_00108375",
                "param_2": "params",
                "uVar1": "data",
                "uVar2": "message",
                "unaff_EBX": "result"
            },
            "code": "\nuint handle_share_flag_00108375(undefined8 param_1,undefined8 *params,undefined8 param_3)\n\n{\n  undefined8 data;\n  undefined8 message;\n  uint result;\n  \n  if (*(int *)(params[1] + 8) != 2) {\n    data = *params;\n    result = result & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(message,data,param_3);\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "handle_share_flag_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "process_data_00109e76",
                "param_1": "inputPointer",
                "param_2": "value",
                "lVar1": "previousCount",
                "local_5a": "outputString"
            },
            "code": "\nvoid processData_00109e76(long inputPointer,uint value)\n\n{\n  long previousCount;\n  char outputString [58];\n  \n  previousCount = *(long *)(inputPointer + 0x68);\n  *(long *)(inputPointer + 0x68) = previousCount + 1;\n  sprintf(outputString,\"%ld=r%ld;%u;0;\",previousCount,previousCount,(ulong)value);\n  FUN_00109b52(inputPointer,outputString,previousCount,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_and_return_index_001088ae",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "stringValue",
                "lVar2": "index",
                "lVar3": "offset",
                "uVar4": "duplicatedString",
                "iVar1": "newIndex"
            },
            "code": "\nulong updateDataAndReturnIndex_001088ae(undefined4 value1,undefined4 value2,undefined8 value3,undefined8 stringValue)\n\n{\n  int newIndex;\n  long index;\n  long offset;\n  undefined8 duplicatedString;\n  \n  index = (long)DAT_001278c0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127750)[index * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = value1;\n  *(undefined4 *)(&DAT_00127744 + offset) = value2;\n  *(undefined8 *)(&DAT_00127748 + offset) = value3;\n  duplicatedString = xstrdup(stringValue);\n  (&DAT_00127750)[index * 3] = duplicatedString;\n  newIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_and_return_index_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "lookup_value_0010afd5",
                "param_1": "prevPtr",
                "param_2": "dataStruct",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "__s2": "searchStr",
                "puVar2": "currPtr",
                "uVar3": "result",
                "lVar4": "value",
                "puVar5": "innerPtr",
                "puVar6": "innerParamPtr",
                "bVar7": "counter",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nlookupValue_0010afd5(undefined8 *prevPtr,long dataStruct,undefined8 param3,undefined4 param4,\n            undefined4 param5,undefined8 param6)\n\n{\n  int iVar1;\n  char *searchStr;\n  undefined8 *currPtr;\n  undefined8 result;\n  long value;\n  undefined8 *innerPtr;\n  undefined4 *innerParamPtr;\n  byte counter;\n  undefined returnValue [16];\n  \n  counter = 0;\n  searchStr = (char *)FUN_00109a0b(param3,param4);\n  for (prevPtr = (undefined8 *)*prevPtr; prevPtr != (undefined8 *)0x0;\n      prevPtr = (undefined8 *)*prevPtr) {\n    for (currPtr = (undefined8 *)prevPtr[1]; currPtr != (undefined8 *)0x0;\n        currPtr = (undefined8 *)*currPtr) {\n      if ((undefined8 *)currPtr[2] != (undefined8 *)0x0) {\n        for (innerPtr = *(undefined8 **)(undefined8 *)currPtr[2]; innerPtr != (undefined8 *)0x0;\n            innerPtr = (undefined8 *)*innerPtr) {\n          if ((*(int *)((long)innerPtr + 0x14) == 1) && (*(char *)innerPtr[1] == *searchStr)) {\n            iVar1 = strcmp((char *)innerPtr[1],searchStr);\n            if (iVar1 == 0) {\n              value = innerPtr[4];\n              if (value == 0) goto LAB_0010b05b;\n              free(searchStr);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currPtr = *(undefined8 **)(dataStruct + 0x1a0);\n  do {\n    if (currPtr == (undefined8 *)0x0) {\n      currPtr = (undefined8 *)xmalloc(0x28);\n      result = *(undefined8 *)(dataStruct + 0x1a0);\n      innerParamPtr = (undefined4 *)((long)currPtr + 0x14);\n      for (value = 5; value != 0; value = value + -1) {\n        *innerParamPtr = 0;\n        innerParamPtr = innerParamPtr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(currPtr + 2) = param5;\n      *currPtr = result;\n      currPtr[1] = searchStr;\n      result = FUN_00113e23(currPtr + 3,searchStr);\n      *(undefined8 **)(dataStruct + 0x1a0) = currPtr;\n      currPtr[4] = result;\nLAB_0010b0e7:\n      value = currPtr[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = param6;\n      returnValue._0_8_ = value;\n      return returnValue;\n    }\n    if (*(char *)currPtr[1] == *searchStr) {\n      iVar1 = strcmp((char *)currPtr[1],searchStr);\n      if (iVar1 == 0) {\n        if (*(int *)(currPtr + 2) == 0) {\n          *(undefined4 *)(currPtr + 2) = param5;\n        }\n        free(searchStr);\n        goto LAB_0010b0e7;\n      }\n    }\n    currPtr = (undefined8 *)*currPtr;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "strcmp",
                "FUN_00109a0b",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "lookup_value_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "cplus_demangle_init_info",
                "FUN_00113bfa",
                "FUN_001129f4",
                "FUN_00113df2",
                "FUN_00108fb9",
                "cplus_demangle_mangled_name",
                "strcmp",
                "FUN_00113d3a",
                "FUN_00109022",
                "FUN_00108fe8",
                "xmalloc",
                "strspn",
                "xrealloc",
                "strcat",
                "FUN_00113e5e",
                "FUN_00113e17",
                "strtol",
                "FUN_0010d559",
                "FUN_00113c43",
                "strlen",
                "FUN_00112b6e",
                "strcpy",
                "FUN_00113b4a",
                "strstr",
                "FUN_00109ab1",
                "concat",
                "FUN_0010afd5",
                "FUN_00113fb0",
                "dcgettext",
                "FUN_00113dfe",
                "fprintf",
                "strncmp",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00113cb9",
                "FUN_0010911f",
                "sprintf",
                "malloc",
                "FUN_0010ee3f",
                "strchr",
                "FUN_0010d21c",
                "FUN_00113b71",
                "FUN_00108e76",
                "FUN_0010b6ea",
                "FUN_0010c2d2",
                "FUN_00113da9",
                "FUN_00113d6e",
                "free",
                "FUN_00112904",
                "FUN_0010d882",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00109a0b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00116b90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__format": "formatStr",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stabPtr",
                "iVar5": "counter"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param1,undefined8 param2,undefined8 param3)\n\n{\n  char *formatStr;\n  long stabName;\n  long index;\n  long offset;\n  int *stabPtr;\n  int counter;\n  \n  formatStr = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatStr);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278c0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stabPtr = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabPtr);\n      if (stabName == 0) {\n        if (*stabPtr == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stabPtr != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278c0 != counter);\n  return param3;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a083(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x2a,4,dataPointer + 0x178,dataPointer + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "dataPointer",
                "param_6": "otherData",
                "lVar1": "newIndex",
                "plVar2": "arrayPointer",
                "lVar3": "numZeroes",
                "puVar4": "currentPointer",
                "uVar5": "arraySize",
                "bVar6": "zeroFlag",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandArray_00109c2e(long array,long value,ulong size,int flag,undefined4 *dataPointer,\n            undefined8 otherData)\n\n{\n  long newIndex;\n  long *arrayPointer;\n  long numZeroes;\n  undefined *currentPointer;\n  ulong arraySize;\n  byte zeroFlag;\n  undefined returnValue [16];\n  \n  zeroFlag = 0;\n  size = size & 0xffffffff;\n  arraySize = *(ulong *)(array + 0x1b0);\n  if (arraySize <= size) {\n    if (arraySize == 0) {\n      arraySize = 10;\n    }\n    for (; arraySize <= size; arraySize = arraySize * 2) {\n    }\n    newIndex = xrealloc(*(undefined8 *)(array + 0x1a8),arraySize * 0x18);\n    *(long *)(array + 0x1a8) = newIndex;\n    currentPointer = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newIndex);\n    for (numZeroes = (arraySize - *(long *)(array + 0x1b0)) * 0x18; numZeroes != 0; numZeroes = numZeroes + -1) {\n      *currentPointer = 0;\n      currentPointer = currentPointer + (ulong)zeroFlag * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = arraySize;\n  }\n  arrayPointer = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*arrayPointer == 0) {\n    newIndex = *(long *)(array + 0x68);\n    *arrayPointer = newIndex;\n    *(long *)(array + 0x68) = newIndex + 1;\n    arrayPointer[1] = value;\n    *(int *)(arrayPointer + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(arrayPointer + 2) = 0;\n    *(undefined4 *)((long)arrayPointer + 0x14) = *dataPointer;\n  }\n  else {\n    *dataPointer = *(undefined4 *)((long)arrayPointer + 0x14);\n  }\n  returnValue._8_8_ = otherData;\n  returnValue._0_8_ = *arrayPointer;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "expand_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_bad_format_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedErrorMessage"
            },
            "code": "\nvoid displayBadFormatErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "display_bad_format_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "process_file_00112996",
                "param_1": "fileData",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 processFile_00112996(long fileData,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(fileData + 8) != 0) && (*(long *)(fileData + 0x10) != 0)) {\n    offset = *(long *)(fileData + 0x10) + 0x10;\n    if (*(long *)(fileData + 0x20) != 0) {\n      offset = *(long *)(fileData + 0x20) + 0x28;\n    }\n    result = FUN_00112925(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "process_file_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "object",
                "param_2": "name",
                "param_3": "type",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "newID",
                "lVar3": "typeData",
                "piVar4": "typePtr",
                "__s1": "existingName",
                "cVar5": "isMatch",
                "iVar6": "counter",
                "puVar7": "newEntry",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setClassID_0010c7a0(long object,char *name,int *type,undefined8 param4)\n\n{\n  undefined8 result;\n  uint newID;\n  long typeData;\n  int *typePtr;\n  char *existingName;\n  char isMatch;\n  int counter;\n  undefined8 *newEntry;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typeData = *(long *)(type + 4);\n  newEntry = (undefined8 *)(ulong)*(uint *)(typeData + 0xc);\n  if (*(uint *)(typeData + 0xc) <= *(uint *)(object + 0x38)) {\n    for (newEntry = *(undefined8 **)(object + 0x50); newEntry != (undefined8 *)0x0;\n        newEntry = (undefined8 *)*newEntry) {\n      typePtr = (int *)newEntry[1];\n      if (*typePtr == *type) {\n        existingName = (char *)newEntry[2];\n        if (name == (char *)0x0) {\n          if (existingName == (char *)0x0) {\nLAB_0010c82c:\n            isMatch = FUN_0010922b(object,typePtr,type);\n            if (isMatch != '\\0') {\n              newID = *(uint *)(*(long *)(newEntry[1] + 0x10) + 0xc);\n              newEntry = (undefined8 *)(ulong)newID;\n              *(uint *)(typeData + 0xc) = newID;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existingName != (char *)0x0) && (*existingName == *name)) &&\n                (counter = strcmp(existingName,name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(object + 0x34) + 1;\n    *(int *)(object + 0x34) = counter;\n    *(int *)(typeData + 0xc) = counter;\n    newEntry = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(object + 0x50);\n    newEntry[2] = name;\n    *(undefined8 **)(object + 0x50) = newEntry;\n    *newEntry = result;\n    newEntry[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)newEntry >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strcmp",
                "FUN_0010922b",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "arg1",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "uVar1": "val1",
                "uVar2": "val2",
                "pplVar3": "ptrptr1",
                "ppcVar4": "ptrptr2",
                "ppcVar5": "ptrptr3",
                "lVar6": "var1",
                "lVar7": "var2",
                "lVar8": "var3",
                "pcVar9": "charPtr1",
                "pcVar10": "charPtr2",
                "cVar11": "charResult",
                "bVar12": "boolResult",
                "iVar13": "index",
                "uVar14": "uniqueVal1",
                "uVar15": "uniqueVal2",
                "puVar16": "ptrVar1",
                "puVar17": "ptrVar2",
                "plVar18": "ptrVar3",
                "lVar19": "var4",
                "plVar20": "ptrVar4",
                "plVar21": "ptrVar5",
                "lVar22": "var5",
                "local_70": "localPtr1",
                "local_58": "localPtr2",
                "plStack_50": "stackPtr",
                "local_48": "localPtr3"
            },
            "code": "\nbyte checkEquality_0010922b(long arg1,long *ptr1,long *ptr2)\n\n{\n  uint val1;\n  uint val2;\n  long **ptrptr1;\n  char **ptrptr2;\n  char **ptrptr3;\n  long var1;\n  long var2;\n  long var3;\n  char *charPtr1;\n  char *charPtr2;\n  char charResult;\n  byte boolResult;\n  int index;\n  undefined8 uniqueVal1;\n  undefined8 uniqueVal2;\n  undefined8 *ptrVar1;\n  undefined8 *ptrVar2;\n  long *ptrVar3;\n  long var4;\n  long *ptrVar4;\n  long *ptrVar5;\n  long var5;\n  long *localPtr1;\n  undefined8 *localPtr2;\n  long *stackPtr;\n  long *localPtr3;\n  \n  ptrVar3 = ptr2;\n  if (ptr1 == (long *)0x0) {\nLAB_00109241:\n    return ptr2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptrVar3 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    val1 = *(uint *)ptr1;\n    if (val1 == 1) goto code_r0x00109263;\n    while (val2 = *(uint *)ptr2, val2 == 1) {\n      ptr2 = **(long ***)ptr2[2];\n      if (ptr2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (ptr1 == ptr2) {\n      return true;\n    }\n    if (val1 != 0x16) break;\n    if (val2 != 0x17) goto LAB_001092cb;\n    ptr1 = *(long **)(ptr1[2] + 8);\n    if (ptr1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((val1 == 0x17) && (val2 == 0x16)) {\n    ptr2 = *(long **)(ptr2[2] + 8);\n    ptrVar3 = ptr2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*ptr1 != *ptr2) {\n    return false;\n  }\n  if (val1 == 3) {\n    return *(char *)(ptr1 + 2) == *(char *)(ptr2 + 2);\n  }\n  if (val1 < 4) {\n    if (val1 == 2) {\n      return true;\n    }\n  }\n  else if (val1 - 4 < 3) {\n    return true;\n  }\n  localPtr2 = *(undefined8 **)(arg1 + 0x58);\n  for (ptrVar2 = localPtr2; ptrVar2 != (undefined8 *)0x0; ptrVar2 = (undefined8 *)*ptrVar2) {\n    if (((long *)ptrVar2[1] == ptr1) && ((long *)ptrVar2[2] == ptr2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(arg1 + 0x58) = &localPtr2;\n  stackPtr = ptr1;\n  localPtr3 = ptr2;\n  switch(val1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptrVar3 = (long *)ptr1[2];\n    ptrptr1 = (long **)ptr2[2];\n    if (ptrVar3 == (long *)0x0) {\n      boolResult = ptrptr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrptr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(arg1 + 0x38) < *(uint *)((long)ptrVar3 + 0xc)) &&\n       (*(uint *)((long)ptrVar3 + 0xc) == *(uint *)((long)ptrptr1 + 0xc))) goto LAB_001097af;\n    ptrVar2 = (undefined8 *)*ptrVar3;\n    localPtr1 = *ptrptr1;\n    if (((ptrVar2 == (undefined8 *)0x0) == (localPtr1 == (long *)0x0)) &&\n       ((((ptrVar3[2] == 0) == (ptrptr1[2] == (long *)0x0) &&\n         ((ptrVar3[3] == 0) == (ptrptr1[3] == (long *)0x0))) &&\n        ((ptrVar3[4] == 0) == (ptrptr1[4] == (long *)0x0))))) {\n      if (ptrVar2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptrVar3[4] != 0) &&\n           (charResult = checkEquality_0010922b(arg1,ptrVar3[4],ptrptr1[4]), charResult == '\\0'))\n        goto LAB_00109382;\n        ptrVar5 = (long *)ptrVar3[2];\n        if (ptrVar5 == (long *)0x0) {\nLAB_00109540:\n          ptrVar2 = (undefined8 *)ptrVar3[3];\n          if (ptrVar2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptrVar3 = ptrptr1[3];\n          while( true ) {\n            ptrptr3 = (char **)*ptrVar2;\n            if (ptrptr3 == (char **)0x0) {\n              boolResult = *ptrVar3 == 0;\n              goto LAB_001099c4;\n            }\n            ptrptr2 = (char **)*ptrVar3;\n            if (ptrptr2 == (char **)0x0) break;\n            if ((**ptrptr3 != **ptrptr2) || (index = strcmp(*ptrptr3,*ptrptr2), index != 0))\n            break;\n            charPtr1 = ptrptr3[1];\n            charPtr2 = ptrptr2[1];\n            if ((charPtr1 == (char *)0x0) != (charPtr2 == (char *)0x0)) break;\n            if (charPtr1 != (char *)0x0) {\n              var5 = 0;\n              while( true ) {\n                ptrptr3 = *(char ***)(charPtr1 + var5);\n                ptrptr2 = *(char ***)(charPtr2 + var5);\n                if (ptrptr3 == (char **)0x0) break;\n                if (ptrptr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrptr3 != **ptrptr2) ||\n                     ((((ulong)ptrptr3[2] ^ (ulong)ptrptr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrptr3[3] != ptrptr2[3] ||\n                     ((((ptrptr3[4] == (char *)0x0) != (ptrptr2[4] == (char *)0x0) ||\n                       (index = strcmp(*ptrptr3,*ptrptr2), index != 0)) ||\n                      (charResult = checkEquality_0010922b(arg1,ptrptr3[1],ptrptr2[1]), charResult == '\\0')))))) ||\n                   ((ptrptr3[4] != (char *)0x0 &&\n                    (charResult = checkEquality_0010922b(arg1,ptrptr3[4],ptrptr2[4]), charResult == '\\0'))))\n                goto LAB_00109382;\n                var5 = var5 + 8;\n              }\n              if (ptrptr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptrVar2 = ptrVar2 + 1;\n            ptrVar3 = ptrVar3 + 1;\n          }\n        }\n        else {\n          ptrVar4 = ptrptr1[2];\n          for (; ptrVar2 = (undefined8 *)*ptrVar5, ptrVar2 != (undefined8 *)0x0;\n              ptrVar5 = ptrVar5 + 1) {\n            ptrVar1 = (undefined8 *)*ptrVar4;\n            if ((((ptrVar1 == (undefined8 *)0x0) ||\n                 (((ptrVar2[1] ^ ptrVar1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptrVar2 + 2) != *(int *)(ptrVar1 + 2))) ||\n               (charResult = checkEquality_0010922b(arg1,*ptrVar2,*ptrVar1), charResult == '\\0'))\n            goto LAB_00109382;\n            ptrVar4 = ptrVar4 + 1;\n          }\n          if (*ptrVar4 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrptr3 = (char **)*ptrVar2, ptrptr3 != (char **)0x0; ptrVar2 = ptrVar2 + 1) {\n          ptrptr2 = (char **)*localPtr1;\n          if (ptrptr2 == (char **)0x0) goto LAB_00109382;\n          charPtr1 = *ptrptr2;\n          charPtr2 = *ptrptr3;\n          if ((*charPtr2 != *charPtr1) ||\n             ((((ulong)ptrptr3[2] ^ (ulong)ptrptr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrptr3 + 0x14) == '\\0') {\n            if (ptrptr3[3] == ptrptr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          index = strcmp(ptrptr3[3],ptrptr2[3]);\n          if (index != 0) goto LAB_00109382;\nLAB_00109480:\n          index = strcmp(charPtr2,charPtr1);\n          if (((index != 0) || (ptrptr3[1] == (char *)0x0)) || (ptrptr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          uniqueVal1 = FUN_00112b6e(ptrptr2[1],0);\n          uniqueVal2 = FUN_00112b6e(ptrptr3[1],0);\n          charResult = checkEquality_0010922b(arg1,uniqueVal2,uniqueVal1);\n          if (charResult == '\\0') goto LAB_00109382;\n          localPtr1 = localPtr1 + 1;\n        }\n        if (*localPtr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptrVar3 = (long *)ptr1[2];\n    ptrVar5 = (long *)ptr2[2];\n    if (ptrVar3 == (long *)0x0) {\n      boolResult = ptrVar5 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrVar5 == (long *)0x0) goto LAB_00109382;\n    var5 = *ptrVar3;\n    var1 = *ptrVar5;\n    var4 = 0;\n    var2 = ptrVar3[1];\n    var3 = ptrVar5[1];\n    do {\n      charPtr1 = *(char **)(var5 + var4);\n      if (charPtr1 == (char *)0x0) {\n        boolResult = *(long *)(var1 + var4) == 0;\n        goto LAB_001099c1;\n      }\n      charPtr2 = *(char **)(var1 + var4);\n      if (((charPtr2 == (char *)0x0) || (*charPtr1 != *charPtr2)) ||\n         (*(long *)(var2 + var4) != *(long *)(var3 + var4))) break;\n      index = strcmp(charPtr1,charPtr2);\n      var4 = var4 + 8;\n    } while (index == 0);\nLAB_00109964:\n    boolResult = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    boolResult = checkEquality_0010922b(arg1,ptr1[2],ptr2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)ptr1[2] + 2) == *(char *)((undefined8 *)ptr2[2] + 2)) &&\n       (charResult = checkEquality_0010922b(arg1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n       charResult != '\\0')) {\n      ptrVar3 = *(long **)(ptr1[2] + 8);\n      ptrVar5 = *(long **)(ptr2[2] + 8);\n      if ((ptrVar3 == (long *)0x0) == (ptrVar5 == (long *)0x0)) {\n        if (ptrVar3 == (long *)0x0) goto LAB_001097af;\n        while (((*ptrVar3 != 0 && (*ptrVar5 != 0)) &&\n               (charResult = checkEquality_0010922b(arg1), charResult != '\\0'))) {\n          ptrVar3 = ptrVar3 + 1;\n          ptrVar5 = ptrVar5 + 1;\n        }\nLAB_0010995d:\n        if (*ptrVar3 != 0) goto LAB_00109964;\n        boolResult = *ptrVar5 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptrVar2 = (undefined8 *)ptr2[2];\n    ptrVar1 = (undefined8 *)ptr1[2];\n    boolResult = 0;\n    if ((ptrVar1[1] == ptrVar2[1]) && (ptrVar1[2] == ptrVar2[2])) {\nLAB_00109862:\n      boolResult = checkEquality_0010922b(arg1,*ptrVar1,*ptrVar2);\n    }\n    break;\n  case 0x10:\n    ptrVar2 = (undefined8 *)ptr2[2];\n    ptrVar1 = (undefined8 *)ptr1[2];\n    boolResult = 0;\n    if (((ptrVar1[2] == ptrVar2[2]) && (ptrVar1[3] == ptrVar2[3])) &&\n       (*(char *)(ptrVar1 + 4) == *(char *)(ptrVar2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptrVar2 = (undefined8 *)ptr2[2];\n    ptrVar1 = (undefined8 *)ptr1[2];\n    boolResult = 0;\n    if (*(char *)(ptrVar1 + 1) == *(char *)(ptrVar2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    charResult = checkEquality_0010922b(arg1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]);\n    boolResult = 0;\n    if (charResult != '\\0') {\n      boolResult = checkEquality_0010922b(arg1,*(undefined8 *)(ptr1[2] + 8),*(undefined8 *)(ptr2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)ptr1[2] + 3) == *(char *)((undefined8 *)ptr2[2] + 3)) &&\n        (charResult = checkEquality_0010922b(arg1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n        charResult != '\\0')) &&\n       (charResult = checkEquality_0010922b(arg1,*(undefined8 *)(ptr1[2] + 8),\n                              *(undefined8 *)(ptr2[2] + 8)), charResult != '\\0')) {\n      ptrVar3 = *(long **)(ptr1[2] + 0x10);\n      ptrVar5 = *(long **)(ptr2[2] + 0x10);\n      if ((ptrVar3 == (long *)0x0) == (ptrVar5 == (long *)0x0)) {\n        if (ptrVar3 != (long *)0x0) {\n          while (((*ptrVar3 != 0 && (*ptrVar5 != 0)) &&\n                 (charResult = checkEquality_0010922b(arg1), charResult != '\\0'))) {\n            ptrVar3 = ptrVar3 + 1;\n            ptrVar5 = ptrVar5 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        boolResult = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    boolResult = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptrVar3 = (long *)ptr2[2];\n    ptrVar5 = (long *)ptr1[2];\n    index = strcmp(*(char **)(*ptrVar5 + 8),*(char **)(*ptrVar3 + 8));\n    boolResult = 0;\n    if (index == 0) {\n      boolResult = checkEquality_0010922b(arg1,ptrVar5[1],ptrVar3[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  boolResult = boolResult & 1;\nLAB_001099c4:\n  *(undefined8 **)(arg1 + 0x58) = localPtr2;\n  return boolResult;\ncode_r0x00109263:\n  ptr1 = **(long ***)ptr1[2];\n  ptrVar3 = ptr1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "archivePath",
                "cVar1": "formatCheck",
                "iVar2": "formatType",
                "iVar3": "internalStatError",
                "ppcVar4": "archivePtr",
                "lVar5": "bytesRead",
                "uVar6": "errorString",
                "__format": "copyFormatString",
                "puVar7": "tempDirPtr",
                "piVar8": "errnoPtr",
                "uVar9": "errorMsg",
                "in_RAX": "fileDescriptor",
                "pcVar10": "currentChar",
                "ppcVar11": "unaff_R15_temp",
                "lVar12": "fileSize",
                "pvVar13": "bufferPtr",
                "pcVar14": "closeFunc",
                "lVar15": "bytesRemaining",
                "pcVar16": "nextChar",
                "psVar17": "statStruct",
                "unaff_R14": "archiveInfo",
                "unaff_R15": "openArchivePtr",
                "bVar18": "byteVar",
                "unaff_retaddr": "returnAddr",
                "in_stack_00000008": "param8",
                "in_stack_00000010": "param10",
                "in_stack_00000018": "param18",
                "in_stack_00000020": "param20",
                "in_stack_00000028": "param28",
                "in_stack_00000030": "param30",
                "in_stack_000000f8": "permission",
                "in_stack_00000110": "totalSize"
            },
            "code": "\nvoid extractAndCopyArchive_001052a2(undefined8 param1,undefined8 param2,char *archivePath)\n\n{\n  char formatCheck;\n  int formatType;\n  int internalStatError;\n  char **archivePtr;\n  long bytesRead;\n  undefined8 errorString;\n  char *copyFormatString;\n  undefined8 *tempDirPtr;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  long fileDescriptor;\n  char *currentChar;\n  char **unaff_R15_temp;\n  long fileSize;\n  void *bufferPtr;\n  code *closeFunc;\n  long bytesRemaining;\n  char *nextChar;\n  stat *statStruct;\n  undefined8 *archiveInfo;\n  char **openArchivePtr;\n  byte byteVar;\n  undefined8 returnAddr;\n  undefined8 *param8;\n  long *param10;\n  char *param18;\n  undefined8 *param20;\n  undefined8 param28;\n  undefined8 param30;\n  uint permission;\n  long totalSize;\n  \n  byteVar = 0;\n  currentChar = (char *)(fileDescriptor + 1);\n  do {\n    if (*currentChar == '/') {\n      extractAndCopyArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(param18,&DAT_0011b47d);\n      internalStatError = stat(currentChar,(stat *)&stack0x00000050);\n      tempDirPtr = archiveInfo;\n      if (-1 < internalStatError) {\n        fileSize = FUN_0011a0e0(currentChar);\n        free(currentChar);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currentChar = strerror(*errnoPtr);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(errorMsg,currentChar);\n          goto LAB_00104e93;\n        }\n        tempDirPtr = (undefined8 *)xmalloc(0x18);\n        currentChar = *openArchivePtr;\n        *tempDirPtr = archiveInfo;\n        tempDirPtr[2] = 0;\n        tempDirPtr[1] = fileSize;\n        currentChar = (char *)concat(fileSize,&DAT_0011b47d,currentChar);\n      }\n      internalStatError = 0;\n      if (DAT_001279eb != '\\0') {\n        statStruct = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statStruct->st_dev = 0;\n          statStruct = (stat *)((long)statStruct + (ulong)byteVar * -8 + 4);\n        }\n        unaff_R15_temp = (char **)openArchivePtr[0x1d];\n        if ((char **)openArchivePtr[0x1d] == (char **)0x0) {\n          unaff_R15_temp = openArchivePtr;\n        }\n        internalStatError = (**(code **)(unaff_R15_temp[1] + 0x1e8))(openArchivePtr,(stat *)&stack0x00000050);\n        if (internalStatError != 0) {\n          nextChar = *openArchivePtr;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(errorMsg,nextChar);\n        }\n      }\n      archiveInfo = (undefined8 *)xmalloc(0x18);\n      archiveInfo[1] = currentChar;\n      *archiveInfo = tempDirPtr;\n      archiveInfo[2] = 0;\n      formatCheck = bfd_check_format(openArchivePtr,1);\n      if (formatCheck == '\\0') {\n        errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,openArchivePtr,0,errorMsg);\n        unaff_R15_temp = (char **)bfd_openw(currentChar,param28);\n        if (unaff_R15_temp == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archivePtr = (char **)openArchivePtr[0x1d];\n        if ((char **)openArchivePtr[0x1d] == (char **)0x0) {\n          archivePtr = openArchivePtr;\n        }\n        formatType = (**(code **)(archivePtr[1] + 0x1e8))(openArchivePtr,&stack0x000000e0);\n        fileSize = totalSize;\n        if (formatType == 0) {\n          if (totalSize < 0) {\n            errorMsg = FUN_001125fa(openArchivePtr);\n            errorString = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(errorString,errorMsg);\n          }\n          else {\n            formatType = bfd_seek(openArchivePtr,0,0);\n            if (formatType == 0) {\n              if (DAT_001279e9 != '\\0') {\n                nextChar = *unaff_R15_temp;\n                errorMsg = FUN_001125fa(openArchivePtr);\n                copyFormatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(copyFormatString,errorMsg,nextChar);\n              }\n              bufferPtr = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesRemaining) {\n                bytesRemaining = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesRemaining = fileSize;\n                }\n                bytesRead = bfd_bread(bufferPtr,bytesRemaining,openArchivePtr);\n                archivePtr = openArchivePtr;\n                if ((bytesRemaining != bytesRead) ||\n                   (bytesRead = bfd_bwrite(bufferPtr,bytesRemaining,unaff_R15_temp), archivePtr = unaff_R15_temp, bytesRemaining != bytesRead\n                   )) {\n                  FUN_001126c0(0,archivePtr,0,0);\n                  free(bufferPtr);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*unaff_R15_temp,permission | 0x100);\n              free(bufferPtr);\n              formatCheck = bfd_close_all_done(unaff_R15_temp);\n              if (formatCheck == '\\0') {\n                FUN_001126c0(currentChar,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg = FUN_001125fa(openArchivePtr);\n            FUN_0011a110(errorMsg);\n          }\n        }\n        else {\n          FUN_001126c0(0,openArchivePtr,0,0);\n        }\nLAB_00104f00:\n        formatCheck = bfd_close_all_done(unaff_R15_temp);\n        if (formatCheck == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (param30._7_1_ == '\\0') {\n          unaff_R15_temp = (char **)bfd_openw(currentChar,*(undefined8 *)openArchivePtr[1]);\n        }\n        else {\n          unaff_R15_temp = (char **)bfd_openw(currentChar,param28);\n        }\n        if (unaff_R15_temp == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatCheck = FUNC_00114e50(openArchivePtr,unaff_R15_temp,returnAddr);\n        if (formatCheck == '\\0') {\n          formatType = bfd_get_arch(openArchivePtr);\n          if (formatType == 0) goto LAB_00104d75;\n          formatCheck = bfd_close_all_done(unaff_R15_temp);\n          if (formatCheck == '\\0') {\n            FUN_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatCheck = bfd_close(unaff_R15_temp);\n        if (formatCheck == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (internalStatError == 0)) {\n          FUN_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentChar,param28);\n        archiveInfo[2] = fileSize;\n        *param10 = fileSize;\n        param10 = (long *)(fileSize + 0xf0);\n        unaff_R15_temp = (char **)bfd_openr_next_archived_file(param20,openArchivePtr);\n        bfd_close(openArchivePtr);\n        openArchivePtr = unaff_R15_temp;\n      }\n      if ((DAT_00127a40 != 0) || (openArchivePtr == (char **)0x0)) {\n        *param10 = 0;\n        bufferPtr = (void *)xstrdup(*param8);\n        if (DAT_00127a40 == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        formatCheck = (*closeFunc)(param8);\n        if (formatCheck == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(bufferPtr,0,0,0);\n        }\n        free(bufferPtr);\n        bufferPtr = (void *)xstrdup(*param20);\n        formatCheck = bfd_close(param20);\n        if (formatCheck == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(bufferPtr,0,0,0);\n        }\n        free(bufferPtr);\n        goto LAB_00114b4b;\n      }\n      currentChar = *openArchivePtr;\n      archivePath = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    nextChar = currentChar;\n    if ((*currentChar == '.') && (nextChar = currentChar + 1, currentChar[1] == '.')) {\n      nextChar = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(errorMsg,archivePath);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (archiveInfo != (undefined8 *)0x0) {\n          if (archiveInfo[2] == 0) {\n            rmdir((char *)archiveInfo[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)archiveInfo[1]);\n          }\n          free((void *)archiveInfo[1]);\n          tempDirPtr = (undefined8 *)*archiveInfo;\n          free(archiveInfo);\n          archiveInfo = tempDirPtr;\n        }\n        rmdir(param18);\n        free(param18);\n        return;\n      }\n    }\n    for (; (currentChar = nextChar, *nextChar != '\\0' && (*nextChar != '/')); nextChar = nextChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "extract_data_0010e453",
                "param_1": "inputData",
                "param_2": "prefix",
                "param_3": "dataArray",
                "lVar1": "dataLength",
                "cVar2": "result",
                "sVar3": "stringLength",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "counter",
                "ppcVar6": "dataPointer",
                "lVar7": "offset"
            },
            "code": "\nundefined8 extractData_0010e453(long inputData,char *prefix,char **dataArray)\n\n{\n  long dataLength;\n  char result;\n  size_t stringLength;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long counter;\n  char **dataPointer;\n  long offset;\n  \n  if (dataArray == (char **)0x0) {\n    if (prefix != (char *)0x0) {\n      stringLength = strlen(prefix);\n      formattedString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)formattedString,\"xe%s:\",prefix);\nLAB_0010e578:\n      result = FUN_00109b52(inputData,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    counter = 10;\n    dataPointer = dataArray;\n    if (prefix != (char *)0x0) {\n      stringLength = strlen(prefix);\n      counter = stringLength + 10;\n    }\n    for (; *dataPointer != (char *)0x0; dataPointer = dataPointer + 1) {\n      stringLength = strlen(*dataPointer);\n      counter = counter + 0x14 + stringLength;\n    }\n    formattedString = (undefined2 *)xmalloc(counter);\n    if (prefix == (char *)0x0) {\n      *formattedString = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(inputData + 0x68);\n      *(long *)(inputData + 0x68) = counter + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",prefix,counter);\n    }\n    offset = 0;\n    while( true ) {\n      dataLength = *(long *)((long)dataArray + offset);\n      stringLength = strlen((char *)formattedString);\n      if (dataLength == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + stringLength) = 0x3b;\n    if (prefix == (char *)0x0) goto LAB_0010e578;\n    result = FUN_0010e2f0(inputData,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = FUN_00109cf4(inputData,counter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_call_function_00109d5c",
                "param_1": "input_param",
                "lVar1": "result",
                "uVar2": "output"
            },
            "code": "\nundefined8 check_and_call_function_00109d5c(undefined8 input_param)\n\n{\n  long result;\n  undefined8 output;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    output = FUN_00109cf4(input_param,result,0);\n    return output;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_params_0010ed2c",
                "param_1": "ptr_struct",
                "param_2": "new_value",
                "param_3": "param_three",
                "extraout_RDX": "extra_output_RDX",
                "in_R10": "input_R10",
                "cVar1": "char_var",
                "iVar2": "int_var",
                "uVar3": "updated_var",
                "auVar4": "result_array"
            },
            "code": "\nundefined  [16] updateParams_0010ed2c(long ptr_struct,ulong new_value,undefined8 param_three)\n\n{\n  char char_var;\n  int int_var;\n  undefined8 extra_output_RDX;\n  ulong updated_var;\n  undefined8 input_R10;\n  undefined result_array [16];\n  \n  if (*(ulong *)(ptr_struct + 0x1f0) < new_value) {\n    *(ulong *)(ptr_struct + 0x1f0) = new_value;\n  }\n  if (*(long *)(ptr_struct + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(ptr_struct + 0x1f8) != 0) {\n      int_var = *(int *)(ptr_struct + 0x1f8) + -1;\n      updated_var = CONCAT71((int7)((ulong)param_three >> 8),1);\n      *(int *)(ptr_struct + 0x1f8) = int_var;\n      if (int_var != 0) {\n        result_array = FUN_0010e2f0(ptr_struct,0xe0,0,new_value - *(long *)(ptr_struct + 0x200),0,input_R10);\n        return result_array;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    char_var = FUN_0010e2f0(ptr_struct,0xc0,0,*(long *)(ptr_struct + 0x208),0);\n    if (char_var != '\\0') {\n      *(undefined8 *)(ptr_struct + 0x208) = 0xffffffffffffffff;\n      param_three = extra_output_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_var = 0;\nLAB_0010edae:\n  result_array._0_8_ = updated_var & 0xffffffff;\n  result_array._8_8_ = input_R10;\n  return result_array;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_params_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "size1",
                "uVar2": "size2",
                "iVar3": "result",
                "extraout_var": "extraVar",
                "uVar4": "combinedResult",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *input1,ulong *input2,undefined8 param3,undefined8 param4)\n\n{\n  ulong size1;\n  ulong size2;\n  int result;\n  undefined4 extraVar;\n  ulong combinedResult;\n  undefined output [16];\n  \n  combinedResult = *input1;\n  if (*input2 <= *input1) {\n    combinedResult = *input2;\n  }\n  result = memcmp((void *)(input1[3] + 3),(void *)(input2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraVar,result);\n  if (result == 0) {\n    size1 = input1[8];\n    if (size1 < input2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      size2 = input2[8];\n      if (size2 < input1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (size2 < size1) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (size2 <= size1) {\n              if (input1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = param4;\n  output._0_8_ = combinedResult;\n  return output;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_build_attribute_notes_001163d0",
                "param_1": "inputSection",
                "param_2": "outputSection",
                "param_3": "size",
                "param_4": "outputData",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "condition",
                "puVar5": "tempPtr",
                "iVar6": "tempVar",
                "uVar7": "errorMessage",
                "lVar8": "tmpSize",
                "__ptr": "buffer",
                "uVar9": "temp3",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "uVar13": "temp7",
                "uVar14": "temp8",
                "uVar15": "temp9",
                "uVar16": "remainingSize",
                "puVar17": "arrayPtr",
                "puVar18": "tempPtr1",
                "cVar19": "flag",
                "puVar20": "tempPtr2",
                "iVar21": "loopVar",
                "puVar22": "inputDataPtr",
                "puVar23": "outputDataPtr",
                "uVar24": "temp10",
                "__nmemb": "numElements",
                "puVar25": "tempPtr3",
                "bVar26": "tempFlag",
                "local_88": "var1",
                "uStack_80": "var2",
                "local_70": "var3",
                "local_68": "remainingSize2",
                "local_60": "relocatedDataArray"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong processBuildAttributeNotes_001163d0(undefined8 *inputSection,undefined8 *outputSection,ulong size,undefined *outputData)\n\n{\n  ulong result;\n  undefined8 temp1;\n  undefined8 temp2;\n  bool condition;\n  ulong *tempPtr;\n  int tempVar;\n  undefined8 errorMessage;\n  long tmpSize;\n  void *buffer;\n  ulong temp3;\n  ulong temp4;\n  ulong temp5;\n  ulong temp6;\n  undefined *buffer_00;\n  ulong temp7;\n  ulong temp8;\n  ulong temp9;\n  ulong remainingSize;\n  ulong *arrayPtr;\n  undefined *tempPtr1;\n  char flag;\n  undefined *tempPtr2;\n  int loopVar;\n  undefined *inputDataPtr;\n  ulong *outputDataPtr;\n  ulong temp10;\n  size_t numElements;\n  ulong *tempPtr3;\n  byte tempFlag;\n  ulong var1;\n  ulong var2;\n  ulong var3;\n  ulong remainingSize2;\n  ulong *relocatedDataArray;\n  \n  tempFlag = 0;\n  tmpSize = bfd_get_reloc_upper_bound();\n  remainingSize2 = size;\n  if (0 < tmpSize) {\n    buffer = (void *)xmalloc(tmpSize);\n    tmpSize = bfd_canonicalize_reloc(inputSection,outputSection,buffer,DAT_001278d0);\n    free(buffer);\n    if (tmpSize != 0) {\n      if (_DAT_001264c0 == 0) {\n        temp1 = *inputSection;\n        temp2 = *outputSection;\n        errorMessage = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(errorMessage,temp1,temp2);\n      }\n      relocatedDataArray = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  relocatedDataArray = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  var1 = 0;\n  var3 = 0;\n  remainingSize = size;\n  temp9 = 0;\n  outputDataPtr = relocatedDataArray;\n  temp8 = 0;\n  inputDataPtr = outputData;\n  while (0xb < remainingSize) {\n    temp4 = (**(code **)(inputSection[1] + 0x40))(inputDataPtr);\n    *outputDataPtr = temp4;\n    temp4 = (**(code **)(inputSection[1] + 0x40))(inputDataPtr + 4);\n    outputDataPtr[1] = temp4;\n    temp5 = (**(code **)(inputSection[1] + 0x40))(inputDataPtr + 8);\n    temp4 = *outputDataPtr;\n    outputDataPtr[2] = temp5;\n    temp6 = outputDataPtr[1];\n    temp7 = temp4 + 3 & 0xfffffffffffffffc;\n    outputDataPtr[6] = temp7;\n    if (temp6 != (temp6 + 3 & 0xfffffffffffffffc)) {\n      tmpSize = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp5 - 0x100) {\n      tmpSize = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = temp7 + temp6 + 0xc;\n    if (remainingSize < result) {\n      tmpSize = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp4 < 2) {\n      tmpSize = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    outputDataPtr[3] = (ulong)(inputDataPtr + 0xc);\n    outputDataPtr[4] = (ulong)(inputDataPtr + temp7 + 0xc);\n    remainingSize = remainingSize + (-0xc - (temp7 + temp6));\n    if (temp4 != 2) {\n      if (inputDataPtr[0xc] == '$') {\n        if ((inputDataPtr[0xd] == '\\x01') && (inputDataPtr[0xe] == '1')) {\n          remainingSize = FUN_00116490();\n          return remainingSize;\n        }\n      }\n      else if ((((4 < temp4) && (inputDataPtr[0xc] == 'G')) && (inputDataPtr[0xd] == 'A')) &&\n              ((inputDataPtr[0xe] == '$' && (inputDataPtr[0xf] == '\\x01')))) {\n        if (inputDataPtr[0x10] == '2') {\n          remainingSize = FUN_00116490();\n          return remainingSize;\n        }\n        if (inputDataPtr[0x10] == '3') {\n          remainingSize = FUN_00116490();\n          return remainingSize;\n        }\n        tmpSize = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp3 = temp9;\n    temp10 = temp8;\n    if (temp6 == 0) {\n      if (temp5 == 0x100) {\n        outputDataPtr[7] = var1;\nLAB_001164af:\n        temp6 = temp8;\n        temp10 = temp8;\n      }\n      else {\n        outputDataPtr[7] = var3;\nLAB_0011669e:\n        temp3 = temp9;\n        temp6 = temp9;\n      }\n    }\n    else {\n      if (temp6 != 0x10) {\n        if (temp6 < 0x11) {\n          if (temp6 == 4) {\n            temp5 = (**(code **)(inputSection[1] + 0x40))();\n            temp6 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp6 == 8) {\n            remainingSize = FUN_001086af();\n            return remainingSize;\n          }\n        }\n        tmpSize = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp5 = (**(code **)(inputSection[1] + 0x28))(inputDataPtr + temp7 + 0xc);\n      temp6 = (**(code **)(inputSection[1] + 0x28))();\n      if (temp6 < temp5) {\n        temp5 = temp6;\n      }\nLAB_00116631:\n      if (outputDataPtr[2] == 0x100) {\n        if (temp5 == 0) {\n          temp5 = var1;\n        }\n        temp4 = *outputDataPtr;\n        outputDataPtr[7] = temp5;\n        temp10 = temp6;\n        var1 = temp5;\n        if (temp6 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp5 == 0) {\n          temp5 = var3;\n        }\n        temp4 = *outputDataPtr;\n        outputDataPtr[7] = temp5;\n        temp3 = temp6;\n        var3 = temp5;\n        if (temp6 == 0) goto LAB_0011669e;\n      }\n    }\n    outputDataPtr[8] = temp6;\n    if (*(char *)((outputDataPtr[3] - 1) + temp4) != '\\0') {\n      tmpSize = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    outputDataPtr = outputDataPtr + 9;\n    temp9 = temp3;\n    temp8 = temp10;\n    inputDataPtr = inputDataPtr + result;\n  }\n  if (remainingSize == 0) {\n    temp1 = *inputSection;\n    temp2 = *outputSection;\n    errorMessage = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(errorMessage,temp1,temp2);\n    numElements = ((long)outputDataPtr - (long)relocatedDataArray >> 3) * -0x71c71c71c71c71c7;\n    qsort(relocatedDataArray,numElements,0x48,FUN_0011a1b0);\n    for (arrayPtr = relocatedDataArray; arrayPtr < outputDataPtr; arrayPtr = arrayPtr + 9) {\n      remainingSize = arrayPtr[2];\n      if (remainingSize != 0) {\n        temp9 = arrayPtr[7];\n        temp8 = arrayPtr[8];\n        tempPtr3 = arrayPtr;\n        loopVar = 0;\n        if (temp9 == temp8) {\n          arrayPtr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              tempPtr = tempPtr3;\n              tempPtr3 = tempPtr + -9;\n              if (tempPtr3 < relocatedDataArray) goto LAB_001167f5;\n              temp4 = tempPtr[-7];\n            } while (temp4 == 0);\n            if ((*tempPtr3 != *arrayPtr) ||\n               (tempVar = memcmp((void *)tempPtr[-6],(void *)arrayPtr[3],*arrayPtr), tempVar != 0)) break;\n            temp6 = tempPtr[-2];\n            temp5 = tempPtr[-1];\n            if (temp9 == temp6) {\n              if (temp8 == temp5) {\n                arrayPtr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp8 <= temp5) {\n                arrayPtr[2] = 0;\n                break;\n              }\n              if (temp5 < temp9) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp5) || (temp9 <= (temp5 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((remainingSize == 0x101) == (temp4 == 0x101)) {\n                if (temp5 <= temp8) {\n                  temp5 = temp8;\n                }\n                if (temp6 < temp9) {\n                  temp9 = temp6;\n                }\n                tempPtr[-1] = temp5;\n                tempPtr[-2] = temp9;\n                arrayPtr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp6 <= temp9) goto LAB_001167a6;\n              if (temp5 < temp9) goto LAB_0010852c;\n              if (temp8 < temp9) {\n                if ((0xfffffffffffffff0 < temp8) || (temp6 <= (temp8 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp8 != temp5) goto LAB_001167b8;\n            }\nFUN_00116852:\n            condition = loopVar < 0x11;\n            loopVar = loopVar + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(relocatedDataArray,numElements,0x48,FUN_0011a250);\n    buffer_00 = (undefined *)xmalloc(size * 2);\n    var2 = 0;\n    var3 = 0;\n    inputDataPtr = buffer_00;\n    for (arrayPtr = relocatedDataArray; arrayPtr < outputDataPtr; arrayPtr = arrayPtr + 9) {\n      if (arrayPtr[2] != 0) {\n        tempPtr1 = inputDataPtr + 0xc;\n        if ((arrayPtr[7] == var3) && (arrayPtr[8] == var2)) {\n          (**(code **)(inputSection[1] + 0x50))(*arrayPtr,inputDataPtr);\n          (**(code **)(inputSection[1] + 0x50))(0,inputDataPtr + 4);\n          (**(code **)(inputSection[1] + 0x50))(arrayPtr[2],inputDataPtr + 8);\n          temp9 = arrayPtr[6];\n          remainingSize = *arrayPtr;\n          inputDataPtr = (undefined *)arrayPtr[3];\n          tempPtr2 = tempPtr1;\n          for (temp8 = remainingSize; temp8 != 0; temp8 = temp8 - 1) {\n            *tempPtr2 = *inputDataPtr;\n            inputDataPtr = inputDataPtr + (ulong)tempFlag * -2 + 1;\n            tempPtr2 = tempPtr2 + (ulong)tempFlag * -2 + 1;\n          }\n          if (remainingSize < temp9) {\n            for (tmpSize = temp9 - remainingSize; tmpSize != 0; tmpSize = tmpSize + -1) {\n              *tempPtr2 = 0;\n              tempPtr2 = tempPtr2 + (ulong)tempFlag * -2 + 1;\n            }\n          }\n          inputDataPtr = tempPtr1 + temp9;\n        }\n        else {\n          (**(code **)(inputSection[1] + 0x50))();\n          if (*(int *)(inputSection[1] + 8) == 5) {\n            flag = (*(char *)(inputSection[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            flag = '\\b';\n          }\n          (**(code **)(inputSection[1] + 0x50))(flag,inputDataPtr + 4);\n          (**(code **)(inputSection[1] + 0x50))(arrayPtr[2],inputDataPtr + 8);\n          remainingSize = *arrayPtr;\n          inputDataPtr = (undefined *)arrayPtr[3];\n          tempPtr2 = tempPtr1;\n          for (temp9 = remainingSize; temp9 != 0; temp9 = temp9 - 1) {\n            *tempPtr2 = *inputDataPtr;\n            inputDataPtr = inputDataPtr + (ulong)tempFlag * -2 + 1;\n            tempPtr2 = tempPtr2 + (ulong)tempFlag * -2 + 1;\n          }\n          temp9 = arrayPtr[6];\n          if (remainingSize < temp9) {\n            for (tmpSize = temp9 - remainingSize; tmpSize != 0; tmpSize = tmpSize + -1) {\n              *tempPtr2 = 0;\n              tempPtr2 = tempPtr2 + (ulong)tempFlag * -2 + 1;\n            }\n          }\n          tmpSize = inputSection[1];\n          tempPtr1 = tempPtr1 + temp9;\n          inputDataPtr = tempPtr1 + 8;\n          if ((*(int *)(tmpSize + 8) == 5) && (*(char *)(inputSection[0x22] + 4) == '\\x02')) {\n            (**(code **)(tmpSize + 0x38))(arrayPtr[7],tempPtr1);\n            (**(code **)(inputSection[1] + 0x38))(arrayPtr[8],inputDataPtr);\n            inputDataPtr = tempPtr1 + 0x10;\n          }\n          else {\n            (**(code **)(tmpSize + 0x50))(arrayPtr[7],tempPtr1);\n            (**(code **)(inputSection[1] + 0x50))(arrayPtr[8],tempPtr1 + 4);\n          }\n          var3 = arrayPtr[7];\n          var2 = arrayPtr[8];\n        }\n      }\n    }\n    temp9 = (long)inputDataPtr - (long)buffer_00;\n    remainingSize = temp9;\n    inputDataPtr = buffer_00;\n    remainingSize2 = size;\n    if (temp9 < size) {\n      for (; remainingSize2 = temp9, remainingSize != 0; remainingSize = remainingSize - 1) {\n        *outputData = *inputDataPtr;\n        inputDataPtr = inputDataPtr + (ulong)tempFlag * -2 + 1;\n        outputData = outputData + (ulong)tempFlag * -2 + 1;\n      }\n    }\n    free(buffer_00);\n  }\n  else {\n    tmpSize = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (tmpSize != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,inputSection,outputSection,tmpSize);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(relocatedDataArray);\n  return remainingSize2;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "xcalloc",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_message_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageString",
                "pcVar2": "message",
                "dcgettext": "getTranslatedMessage",
                "fprintf": "printFormattedMessage"
            },
            "code": "\nvoid printUsageMessage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageString;\n  char *message;\n  \n  usageString = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,usageString);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "check_cpu_architecture_00108c86",
                "param_1": "ptr_to_long",
                "cVar1": "is_valid_prefix",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "puVar4": "allocated_memory",
                "lVar5": "memory_offset",
                "__s": "string_start",
                "__s1": "architecture_string",
                "puVar6": "current_position",
                "uVar7": "return_value",
                "bVar8": "byte_flag"
            },
            "code": "\nundefined8 check_cpu_architecture_00108c86(long *ptr_to_long)\n\n{\n  char is_valid_prefix;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *allocated_memory;\n  long memory_offset;\n  char *string_start;\n  char *architecture_string;\n  undefined2 *current_position;\n  undefined8 return_value;\n  byte byte_flag;\n  \n  byte_flag = 0;\n  memory_offset = *ptr_to_long;\n  string_start = (char *)(memory_offset + 4);\n  is_valid_prefix = FUN_00113fb0(string_start,&DAT_0011b73b);\n  if (is_valid_prefix == '\\0') {\n    is_valid_prefix = FUN_00113fb0(string_start,\"bsdrv-\");\n    if (is_valid_prefix == '\\0') {\n      is_valid_prefix = FUN_00113fb0(string_start,\"rtdrv-\");\n      if (is_valid_prefix == '\\0') {\n        return 0xffffffff;\n      }\n      string_start = (char *)(memory_offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      string_start = (char *)(memory_offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string_start);\n  allocated_memory = (undefined2 *)xmalloc(string_length + 8);\n  architecture_string = string_start + 4;\n  current_position = allocated_memory;\n  for (memory_offset = string_length + 1; memory_offset != 0; memory_offset = memory_offset + -1) {\n    *(char *)current_position = *string_start;\n    string_start = string_start + (ulong)byte_flag * -2 + 1;\n    current_position = (undefined2 *)((long)current_position + (ulong)byte_flag * -2 + 1);\n  }\n  *(undefined *)(allocated_memory + 1) = 0x69;\n  *allocated_memory = 0x6570;\n  comparison_result = strcmp(architecture_string,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)allocated_memory + 7) = 0x36;\n    *(undefined2 *)((long)allocated_memory + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture_string,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)allocated_memory + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture_string,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)allocated_memory + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *ptr_to_long = (long)allocated_memory;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "xmalloc",
                "strcmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_cpu_architecture_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_and_return_status_001053d5",
                "unaff_R12": "filePtr",
                "unaff_R14": "bfdPtr"
            },
            "code": "\nundefined4 closeAndReturnStatus_001053d5(void)\n\n{\n  long filePtr;\n  undefined8 *bfdPtr;\n  \n  FUN_0011a110(*bfdPtr);\n  *(undefined4 *)(filePtr + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePtr + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "close_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_errors_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "unaffected_EBP",
                "unaff_R14": "unaffected_R14"
            },
            "code": "\nvoid checkErrors_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint unaffected_EBP;\n  long unaffected_R14;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((unaffected_EBP & 0x10) == 0)) && ((unaffected_EBP & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((unaffected_EBP & 0x40) == 0)) && ((unaffected_EBP & 0x60) != 0x60)) {\n      *(uint *)(unaffected_R14 + 0x14) = flags | unaffected_EBP;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_errors_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "remainingLength",
                "puVar3": "destPtr",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long remainingLength;\n  undefined *destPtr;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destPtr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destPtr = destPtr + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0011173a",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_memory_and_initialize_0010da0b",
                "param_1": "double_pointer",
                "param_2": "slot_index",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "localized_error",
                "plVar2": "allocated_memory",
                "lVar3": "adjusted_slot_index",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "byte_flag",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_memory_and_initialize_0010da0b(long **double_pointer,ulong slot_index,undefined8 arg_3,undefined8 arg_4)\n\n{\n  undefined8 localized_error;\n  long *allocated_memory;\n  long adjusted_slot_index;\n  long loop_counter;\n  ulong remaining_slots;\n  byte byte_flag;\n  undefined result [16];\n  \n  byte_flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*double_pointer == (long *)0x0) {\n        allocated_memory = (long *)xmalloc(0x88);\n        *double_pointer = allocated_memory;\n        for (adjusted_slot_index = 0x22; adjusted_slot_index != 0; adjusted_slot_index = adjusted_slot_index + -1) {\n          *(undefined4 *)allocated_memory = 0;\n          allocated_memory = (long *)((long)allocated_memory + (ulong)byte_flag * -8 + 4);\n        }\n      }\n      double_pointer = (long **)*double_pointer;\n    }\n    adjusted_slot_index = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      adjusted_slot_index = 0;\n    }\n    if (*double_pointer == (long *)0x0) {\n      allocated_memory = (long *)xmalloc(0x88);\n      *double_pointer = allocated_memory;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)allocated_memory = 0;\n        allocated_memory = (long *)((long)allocated_memory + (ulong)byte_flag * -8 + 4);\n      }\n    }\n    result._8_8_ = arg_4;\n    result._0_8_ = *double_pointer + slot_index + adjusted_slot_index + 1;\n    return result;\n  }\n  localized_error = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(localized_error,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "input_param",
                "param_2": "flag",
                "param_3": "data_param_1",
                "param_4": "data_param_2",
                "puVar1": "allocated_memory",
                "puVar2": "ptr",
                "lVar3": "loop_counter",
                "bVar4": "byte_value"
            },
            "code": "\nundefined8 *\ninitialize_data_structure_00112894(undefined8 input_param,undefined flag,undefined8 data_param_1,undefined8 data_param_2)\n\n{\n  undefined8 *allocated_memory;\n  undefined8 *ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  allocated_memory = (undefined8 *)xmalloc(0x1b0);\n  ptr = allocated_memory;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)ptr = 0;\n    ptr = (undefined8 *)((long)ptr + (ulong)byte_value * -8 + 4);\n  }\n  *allocated_memory = input_param;\n  *(undefined *)(allocated_memory + 1) = flag;\n  allocated_memory[2] = data_param_1;\n  allocated_memory[3] = data_param_2;\n  *(undefined4 *)(allocated_memory + 0x10) = 1;\n  ptr = (undefined8 *)xmalloc(8);\n  allocated_memory[0xd] = 0xffffffffffffffff;\n  allocated_memory[0x11] = ptr;\n  *ptr = 0;\n  return allocated_memory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_ptr_00109b2f",
                "param_1": "input_ptr",
                "__ptr": "current_ptr",
                "puVar1": "next_ptr"
            },
            "code": "\nundefined8 * extract_next_ptr_00109b2f(long input_ptr)\n\n{\n  undefined8 *current_ptr;\n  undefined8 *next_ptr;\n  \n  current_ptr = *(undefined8 **)(input_ptr + 0x60);\n  if (current_ptr != (undefined8 *)0x0) {\n    next_ptr = (undefined8 *)current_ptr[1];\n    *(undefined8 *)(input_ptr + 0x60) = *current_ptr;\n    free(current_ptr);\n    return next_ptr;\n  }\n  return current_ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a181",
                "FUN_0010a83e",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "extract_next_ptr_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_00108d9a",
                "param_1": "filename",
                "param_2": "symbol",
                "param_3": "target",
                "param_4": "result",
                "ppcVar1": "stringArray",
                "pcVar2": "symbolCopy",
                "lVar3": "symbolValue",
                "uVar4": "message",
                "plVar5": "ptrToSymbolValue"
            },
            "code": "\nundefined8 checkSymbol_00108d9a(undefined8 filename,char *symbol,char *target,undefined8 result)\n\n{\n  char **stringArray;\n  char *symbolCopy;\n  long symbolValue;\n  undefined8 message;\n  long *ptrToSymbolValue;\n  \n  stringArray = (char **)xmalloc(0x10);\n  symbolCopy = strdup(symbol);\n  *stringArray = symbolCopy;\n  symbolCopy = strdup(target);\n  message = DAT_001278f0;\n  stringArray[1] = symbolCopy;\n  symbolValue = htab_find(message,stringArray);\n  if (symbolValue != 0) {\n    message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(message,filename,symbol);\n  }\n  symbolValue = htab_find(DAT_001278e8,target);\n  if (symbolValue != 0) {\n    message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(message,filename,target);\n  }\n  ptrToSymbolValue = (long *)htab_find_slot(DAT_001278f0,stringArray,1);\n  message = DAT_001278e8;\n  *ptrToSymbolValue = (long)stringArray;\n  symbolCopy = stringArray[1];\n  stringArray = (char **)htab_find_slot(message,symbolCopy,1);\n  *stringArray = symbolCopy;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "htab_find_slot",
                "strdup",
                "FUN_00119dd0",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "create_descriptive_name_0010e9a0",
                "param_1": "inputParam",
                "param_2": "string1",
                "param_3": "option",
                "param_4": "inputParam2",
                "__s": "resultString",
                "__s_00": "newResultString",
                "sVar3": "str1Length",
                "sVar4": "resultStrLength",
                "__s_01": "finalString",
                "pcVar5": "optionString",
                "uVar6": "optionValue",
                "lVar1": "tempVar"
            },
            "code": "\nundefined4 createDescriptiveName_0010e9a0(long inputParam,char *string1,undefined4 option,undefined8 inputParam2)\n\n{\n  long tempVar;\n  undefined4 uVar2;\n  byte *resultString;\n  byte *newResultString;\n  size_t str1Length;\n  size_t resultStrLength;\n  char *finalString;\n  char *optionString;\n  undefined8 optionValue;\n  \n  resultString = (byte *)FUN_00109b2f();\n  switch(option) {\n  case 1:\n    optionString = \"G\";\n    optionValue = 0x20;\n    break;\n  case 2:\n    optionString = \"S\";\n    optionValue = 0x26;\n    break;\n  case 3:\n    optionString = \"V\";\n    optionValue = 0x26;\n    break;\n  case 4:\n    optionString = \"\";\n    optionValue = 0x80;\n    if (((&_sch_istable)[(ulong)*resultString * 2] & 4) == 0) {\n      tempVar = *(long *)(inputParam + 0x68);\n      *(long *)(inputParam + 0x68) = tempVar + 1;\n      str1Length = strlen((char *)resultString);\n      newResultString = (byte *)xmalloc(str1Length + 0x14);\n      sprintf((char *)newResultString,\"%ld=%s\",tempVar,resultString);\n      free(resultString);\n      resultString = newResultString;\n    }\n    break;\n  case 5:\n    optionString = \"r\";\n    optionValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  str1Length = strlen(string1);\n  resultStrLength = strlen((char *)resultString);\n  finalString = (char *)xmalloc(str1Length + 3 + resultStrLength);\n  sprintf(finalString,\"%s:%s%s\",string1,optionString,resultString);\n  free(resultString);\n  uVar2 = FUN_0010e2f0(inputParam,optionValue,0,inputParam2,finalString);\n  if ((char)uVar2 != '\\0') {\n    free(finalString);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_descriptive_name_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_match_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionMatch_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  sectionValue = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_section_match_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "check_and_print_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedError"
            },
            "code": "\nvoid checkAndPrintErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "check_and_print_error_message_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "create_and_initialize_hash_tab_00113f20",
                "htab_create_alloc": "createHashTab",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid createAndInitializeHashTab_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,isEqualString,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_and_initialize_hash_tab_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108d9a",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "initialize_component_00108179",
                "unaff_RBX": "component",
                "unaff_RBP": "basePointer",
                "unaff_R12": "context",
                "unaff_R14B": "isReversed",
                "unaff_R15": "newComponent",
                "lVar1": "newComponentPointer",
                "lVar2": "status",
                "cVar3": "result",
                "lVar4": "errorMessage",
                "lVar5": "allocationResult"
            },
            "code": "\nvoid initializeComponent_00108179(void)\n\n{\n  long newComponentPointer;\n  long status;\n  char result;\n  long errorMessage;\n  long allocationResult;\n  long component;\n  long basePointer;\n  long context;\n  char isReversed;\n  long newComponent;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(newComponent + 0xb4) = *(undefined4 *)(component + 0xb4);\n  *(byte *)(newComponent + 0x28) =\n       *(byte *)(newComponent + 0x28) & 0xcf | *(byte *)(component + 0x28) & 0x30;\n  *(long *)(component + 0x60) = newComponent;\n  *(undefined8 *)(component + 0x58) = 0;\n  if ((*(byte *)(component + 0x27) & 2) != 0) {\n    newComponentPointer = *(long *)(component + 0xd0);\n    allocationResult = FUN_00115d00(newComponentPointer,*(undefined8 *)(component + 0xe0));\n    if ((allocationResult != 0) &&\n       (status = *(long *)(context + 8), *(uint *)(allocationResult + 0x18) = *(uint *)(allocationResult + 0x18) | 0x20,\n       *(int *)(status + 8) == 5)) {\n      *(long *)(newComponentPointer + 0xb0) = allocationResult;\n      result = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (result == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (result == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (isReversed != '\\0') {\n    *(undefined4 *)(*(long *)(newComponent + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "initialize_component_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "load_file_from_number_00109022",
                "param_1": "file_data",
                "param_2": "type_numbers",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "type_index",
                "pcVar2": "error_message",
                "plVar3": "file_ptr",
                "lVar4": "loop_counter",
                "uVar5": "file_number",
                "pplVar6": "file_array_ptr",
                "bVar7": "byte_var"
            },
            "code": "\n\n\nundefined  [16] load_file_from_number_00109022(long file_data,uint *type_numbers,undefined8 arg3,undefined8 arg4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *file_ptr;\n  long loop_counter;\n  uint file_number;\n  long **file_array_ptr;\n  byte byte_var;\n  undefined auVar8 [16];\n  \n  byte_var = 0;\n  file_number = *type_numbers;\n  type_index = type_numbers[1];\n  if (((int)file_number < 0) || (*(uint *)(file_data + 0x80) <= file_number)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)file_number);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      file_array_ptr = (long **)(*(long *)(file_data + 0x88) + (long)(int)file_number * 8);\n      for (file_number = type_index; 0xf < (int)file_number; file_number = file_number - 0x10) {\n        if (*file_array_ptr == (long *)0x0) {\n          file_ptr = (long *)xmalloc(0x88);\n          *file_array_ptr = file_ptr;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)file_ptr = 0;\n            file_ptr = (long *)((long)file_ptr + (ulong)byte_var * -8 + 4);\n          }\n        }\n        file_array_ptr = (long **)*file_array_ptr;\n      }\n      if (*file_array_ptr == (long *)0x0) {\n        file_ptr = (long *)xmalloc(0x88);\n        *file_array_ptr = file_ptr;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)file_ptr = 0;\n          file_ptr = (long *)((long)file_ptr + (ulong)byte_var * -8 + 4);\n        }\n      }\n      file_ptr = *file_array_ptr + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  file_ptr = (long *)0x0;\nLAB_00109117:\n  auVar8._8_8_ = arg4;\n  auVar8._0_8_ = file_ptr;\n  return auVar8;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "load_file_from_number_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "filePtr",
                "param_2": "variable",
                "param_3": "value",
                "param_4": "type",
                "auVar1": "result",
                "uVar2": "returnValue",
                "piVar3": "newEntry",
                "cVar4": "checkFlag",
                "lVar5": "loopCounter",
                "lVar6": "currentRecord",
                "piVar7": "newEntryPtr",
                "bVar8": "bitFlag",
                "auVar9": "finalResult"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariable_0010c05d(long filePtr,long variable,ulong value,int type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 returnValue;\n  int *newEntry;\n  char checkFlag;\n  long loopCounter;\n  long currentRecord;\n  int *newEntryPtr;\n  byte bitFlag;\n  undefined finalResult [16];\n  \n  bitFlag = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = value;\n    return result << 0x40;\n  }\n  if (value != 0) {\n    if ((*(long *)(filePtr + 8) == 0) || (currentRecord = *(long *)(filePtr + 0x10), currentRecord == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (type - 1U < 2) {\n        currentRecord = currentRecord + 0x10;\n        checkFlag = (type == 1) + '\\x01';\n      }\n      else if (*(long *)(filePtr + 0x20) == 0) {\n        currentRecord = currentRecord + 0x10;\n        checkFlag = '\\0';\n      }\n      else {\n        currentRecord = *(long *)(filePtr + 0x20) + 0x28;\n        checkFlag = '\\0';\n      }\n      currentRecord = FUN_00112925(currentRecord,variable,2,checkFlag);\n      if (currentRecord != 0) {\n        newEntry = (int *)xmalloc(0x18);\n        newEntryPtr = newEntry + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *newEntryPtr = 0;\n          newEntryPtr = newEntryPtr + (ulong)bitFlag * -2 + 1;\n        }\n        *newEntry = type;\n        returnValue = 1;\n        *(ulong *)(newEntry + 2) = value;\n        *(undefined8 *)(newEntry + 4) = param_5;\n        *(int **)(currentRecord + 0x20) = newEntry;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  finalResult._8_8_ = param_6;\n  finalResult._0_8_ = returnValue;\n  return finalResult;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c139",
                "FUN_0010c1c6",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_function_00109d97",
                "param_1": "functionParam",
                "lVar1": "counter",
                "local_40": "outputString"
            },
            "code": "\nvoid processFunction_00109d97(long functionParam)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(functionParam + 0x70) != 0) {\n    FUN_00109cf4(functionParam,*(long *)(functionParam + 0x70),0);\n    return;\n  }\n  counter = *(long *)(functionParam + 0x68);\n  *(long *)(functionParam + 0x68) = counter + 1;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(functionParam,outputString,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_function_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "extract_build_attributes_001086af",
                "uVar1": "result",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "hasExcessData",
                "puVar5": "pointer1",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "__ptr": "ptr",
                "in_RCX": "rcxValue",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "unaff_RBX": "rbxValue",
                "unaff_RBP": "rbpValue",
                "puVar15": "arrayPointer",
                "puVar16": "pointer2",
                "cVar17": "charValue",
                "puVar18": "pointer3",
                "puVar19": "pointer4",
                "unaff_R12": "r12Value",
                "unaff_R13": "r13Value",
                "uVar20": "var20",
                "__nmemb": "size",
                "unaff_R14": "r14Value",
                "puVar21": "pointer5",
                "bVar22": "byteValue",
                "iVar23": "loopIndex",
                "unaff_retaddr": "retaddrValue",
                "param_7": "param7Value",
                "param_8": "param8Value",
                "param_9": "param9Value",
                "param_10": "param10Value",
                "param_11": "param11Value",
                "in_stack_00000030": "stackValue1",
                "in_stack_00000038": "stackValue2",
                "param_13": "param13Value",
                "param_14": "param14Value"
            },
            "code": "\nulong extractBuildAttributes_001086af(void)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool hasExcessData;\n  ulong *pointer1;\n  int index;\n  long length;\n  undefined8 var8;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  undefined *ptr;\n  ulong rcxValue;\n  ulong var12;\n  ulong var13;\n  ulong var14;\n  ulong rbxValue;\n  ulong rbpValue;\n  ulong *arrayPointer;\n  undefined *pointer2;\n  char charValue;\n  undefined *pointer3;\n  undefined *pointer4;\n  ulong *r12Value;\n  ulong r13Value;\n  ulong var20;\n  size_t size;\n  undefined8 *r14Value;\n  ulong *pointer5;\n  byte byteValue;\n  int loopIndex;\n  ulong retaddrValue;\n  ulong param7Value;\n  uint param8Value;\n  ulong param9Value;\n  ulong param10Value;\n  ulong *param11Value;\n  undefined *stackValue1;\n  uint stackValue2;\n  uint param13Value;\n  undefined8 *param14Value;\n  \n  byteValue = 0;\n  param7Value = rcxValue;\n  var9 = (**(code **)(r14Value[1] + 0x40))();\n  var10 = (**(code **)(r14Value[1] + 0x40))(r12Value[4] + 4);\nLAB_0011662a:\n  var13 = rbpValue;\n  var20 = r13Value;\n  if (var10 < var9) {\n    var9 = var10;\n  }\n  do {\n    var11 = param7Value;\n    var12 = param7Value;\n    arrayPointer = r12Value;\n    if (r12Value[2] == 0x100) {\n      if (var9 == 0) {\n        var9 = retaddrValue;\n      }\n      var14 = *r12Value;\n      r12Value[7] = var9;\n      rbpValue = var13;\n      r13Value = var10;\n      retaddrValue = var9;\n      if (var10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (var9 == 0) {\n        var9 = param9Value;\n      }\n      var14 = *r12Value;\n      r12Value[7] = var9;\n      rbpValue = var10;\n      r13Value = var20;\n      param9Value = var9;\n      if (var10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    arrayPointer[8] = var10;\n    if (*(char *)((arrayPointer[3] - 1) + var14) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    r12Value = arrayPointer + 9;\n    if (rbxValue < 0xc) {\n      if (rbxValue != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stackValue2 | param13Value | param8Value) != 0) {\n        if (((param13Value | param8Value) == 0) || (stackValue2 == 0)) {\n          if (param13Value == 0) {\n            if (param8Value != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param8Value == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      var2 = *r14Value;\n      var3 = *param14Value;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(var8,var2,var3);\nLAB_0011671b:\n      size = ((long)r12Value - (long)param11Value >> 3) * -0x71c71c71c71c71c7;\n      qsort(param11Value,size,0x48,FUN_0011a1b0);\n      arrayPointer = param11Value;\n      goto LAB_001167f9;\n    }\n    var10 = (**(code **)(r14Value[1] + 0x40))(var12);\n    *r12Value = var10;\n    var10 = (**(code **)(r14Value[1] + 0x40))(var12 + 4);\n    arrayPointer[10] = var10;\n    var9 = (**(code **)(r14Value[1] + 0x40))(var12 + 8);\n    var14 = *r12Value;\n    arrayPointer[0xb] = var9;\n    var10 = arrayPointer[10];\n    var13 = var14 + 3 & 0xfffffffffffffffc;\n    arrayPointer[0xf] = var13;\n    if (var10 != (var10 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var9 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    var11 = var13 + var10 + 0xc;\n    if (rbxValue < var11) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var14 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    arrayPointer[0xc] = var12 + 0xc;\n    result = var12 + 0xc + var13;\n    arrayPointer[0xd] = result;\n    rbxValue = rbxValue + (-0xc - (var13 + var10));\n    var11 = var12 + var11;\n    if (var14 != 2) {\n      if (*(char *)(var12 + 0xc) == '$') {\n        if ((*(char *)(var12 + 0xd) == '\\x01') && (*(char *)(var12 + 0xe) == '1')) {\n          var10 = FUN_00116490();\n          return var10;\n        }\n      }\n      else if ((((4 < var14) && (*(char *)(var12 + 0xc) == 'G')) &&\n               (*(char *)(var12 + 0xd) == 'A')) &&\n              ((*(char *)(var12 + 0xe) == '$' && (*(char *)(var12 + 0xf) == '\\x01')))) {\n        if (*(char *)(var12 + 0x10) == '2') {\n          var10 = FUN_00116490();\n          return var10;\n        }\n        if (*(char *)(var12 + 0x10) == '3') {\n          var10 = FUN_00116490();\n          return var10;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var13 = rbpValue;\n    var20 = r13Value;\n    if (var10 == 0) {\n      if (var9 == 0x100) {\n        arrayPointer[0x10] = retaddrValue;\nLAB_001164af:\n        var12 = var11;\n        var10 = var20;\n        arrayPointer = r12Value;\n        r13Value = var20;\n      }\n      else {\n        arrayPointer[0x10] = param9Value;\nLAB_0011669e:\n        rbpValue = var13;\n        var12 = var11;\n        var10 = var13;\n        arrayPointer = r12Value;\n        r13Value = var20;\n      }\n      goto LAB_001164bb;\n    }\n    if (var10 == 0x10) break;\n    if (0x10 < var10) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,r14Value,param14Value,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (var10 != 4) {\n      if (var10 == 8) {\n        var10 = extractBuildAttributes_001086af();\n        return var10;\n      }\n      goto LAB_00116679;\n    }\n    param7Value = var11;\n    var9 = (**(code **)(r14Value[1] + 0x40))();\n    var10 = 0xffffffffffffffff;\n  } while( true );\n  param7Value = var11;\n  var9 = (**(code **)(r14Value[1] + 0x28))(result);\n  var10 = (**(code **)(r14Value[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (r12Value <= arrayPointer) {\n    qsort(param11Value,size,0x48,FUN_0011a250);\n    ptr = (undefined *)xmalloc(param10Value * 2);\n    param7Value = 0;\n    param9Value = 0;\n    pointer4 = ptr;\n    for (arrayPointer = param11Value; arrayPointer < r12Value; arrayPointer = arrayPointer + 9) {\n      if (arrayPointer[2] != 0) {\n        pointer3 = pointer4 + 4;\n        pointer2 = pointer4 + 0xc;\n        if ((arrayPointer[7] == param9Value) && (arrayPointer[8] == param7Value)) {\n          (**(code **)(r14Value[1] + 0x50))(*arrayPointer,pointer4);\n          (**(code **)(r14Value[1] + 0x50))(0,pointer3);\n          (**(code **)(r14Value[1] + 0x50))(arrayPointer[2],pointer4 + 8);\n          var9 = arrayPointer[6];\n          var10 = *arrayPointer;\n          pointer4 = (undefined *)arrayPointer[3];\n          pointer3 = pointer2;\n          for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n            *pointer3 = *pointer4;\n            pointer4 = pointer4 + (ulong)byteValue * -2 + 1;\n            pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n          }\n          if (var10 < var9) {\n            for (length = var9 - var10; length != 0; length = length + -1) {\n              *pointer3 = 0;\n              pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n            }\n          }\n          pointer4 = pointer2 + var9;\n        }\n        else {\n          (**(code **)(r14Value[1] + 0x50))();\n          if (*(int *)(r14Value[1] + 8) == 5) {\n            charValue = (*(char *)(r14Value[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charValue = '\\b';\n          }\n          (**(code **)(r14Value[1] + 0x50))(charValue,pointer3);\n          (**(code **)(r14Value[1] + 0x50))(arrayPointer[2],pointer4 + 8);\n          var10 = *arrayPointer;\n          pointer4 = (undefined *)arrayPointer[3];\n          pointer3 = pointer2;\n          for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n            *pointer3 = *pointer4;\n            pointer4 = pointer4 + (ulong)byteValue * -2 + 1;\n            pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n          }\n          var9 = arrayPointer[6];\n          if (var10 < var9) {\n            for (length = var9 - var10; length != 0; length = length + -1) {\n              *pointer3 = 0;\n              pointer3 = pointer3 + (ulong)byteValue * -2 + 1;\n            }\n          }\n          length = r14Value[1];\n          pointer2 = pointer2 + var9;\n          pointer4 = pointer2 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(r14Value[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(arrayPointer[7],pointer2);\n            (**(code **)(r14Value[1] + 0x38))(arrayPointer[8],pointer4);\n            pointer4 = pointer2 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(arrayPointer[7],pointer2);\n            (**(code **)(r14Value[1] + 0x50))(arrayPointer[8],pointer2 + 4);\n          }\n          param9Value = arrayPointer[7];\n          param7Value = arrayPointer[8];\n        }\n      }\n    }\n    var9 = (long)pointer4 - (long)ptr;\n    var10 = var9;\n    pointer4 = ptr;\n    if (var9 < param10Value) {\n      for (; param10Value = var9, var10 != 0; var10 = var10 - 1) {\n        *stackValue1 = *pointer4;\n        pointer4 = pointer4 + (ulong)byteValue * -2 + 1;\n        stackValue1 = stackValue1 + (ulong)byteValue * -2 + 1;\n      }\n    }\n    free(ptr);\nLAB_001166f8:\n    free(param11Value);\n    return param10Value;\n  }\n  if (arrayPointer[2] != 0) {\n    var10 = arrayPointer[7];\n    var9 = arrayPointer[8];\n    var13 = arrayPointer[2];\n    pointer5 = arrayPointer;\n    loopIndex = 0;\n    if (var10 == var9) {\n      arrayPointer[2] = 0;\n    }\n    else {\n      do {\n        do {\n          pointer1 = pointer5;\n          pointer5 = pointer1 + -9;\n          if (pointer5 < param11Value) goto LAB_001167f5;\n          var20 = pointer1[-7];\n        } while (var20 == 0);\n        param7Value = var13;\n        if ((*pointer5 != *arrayPointer) ||\n           (index = memcmp((void *)pointer1[-6],(void *)arrayPointer[3],*arrayPointer), index != 0)) break;\n        var13 = pointer1[-2];\n        var11 = pointer1[-1];\n        if (var10 == var13) {\n          if (var9 == var11) {\n            arrayPointer[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (var9 <= var11) {\n            arrayPointer[2] = 0;\n            break;\n          }\n          if (var11 < var10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < var11) || (var10 <= (var11 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((param7Value == 0x101) == (var20 == 0x101)) {\n            if (var11 <= var9) {\n              var11 = var9;\n            }\n            if (var13 < var10) {\n              var10 = var13;\n            }\n            pointer1[-1] = var11;\n            pointer1[-2] = var10;\n            arrayPointer[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var13 <= var10) goto LAB_001167a6;\n          if (var11 < var10) goto LAB_0010852c;\n          if (var9 < var10) {\n            if ((0xfffffffffffffff0 < var9) || (var13 <= (var9 + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (var9 != var11) goto LAB_001167b8;\n        }\nFUN_00116852:\n        hasExcessData = loopIndex < 0x11;\n        var13 = param7Value;\n        loopIndex = loopIndex + 1;\n      } while (hasExcessData);\n    }\n  }\nLAB_001167f5:\n  arrayPointer = arrayPointer + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_error",
                "FUN_00119ed0",
                "FUN_0011a1b0",
                "FUN_0010847a",
                "FUN_00116490",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "perform_initialization_0010add5"
            },
            "code": "\nvoid performInitialization_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "perform_initialization_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_application_00113e17"
            },
            "code": "\nvoid initializeApplication_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_application_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructure",
                "param_2": "str",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "prevItem",
                "puVar2": "newItem",
                "uVar3": "strCopy"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructure,undefined8 str,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 prevItem;\n  undefined8 *newItem;\n  undefined8 strCopy;\n  \n  newItem = (undefined8 *)xmalloc(0x40);\n  strCopy = xstrdup(str);\n  newItem[2] = param3;\n  *(undefined (*) [16])(newItem + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newItem + 6) = ZEXT816(0);\n  prevItem = *(undefined8 *)(dataStructure + 0x60);\n  *(undefined *)((long)newItem + 0x1c) = param4;\n  *(undefined4 *)(newItem + 3) = param5;\n  *(undefined8 **)(dataStructure + 0x60) = newItem;\n  *newItem = prevItem;\n  newItem[1] = strCopy;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010e453",
                "FUN_0010a69a",
                "FUN_00109ed3",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_and_check_numeric_input_00109a32",
                "param_1": "input_string",
                "param_2": "error_flag",
                "param_3": "end_ptr",
                "param_4": "unused1",
                "param_5": "unused2",
                "__nptr": "current_char",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_msg",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparseAndCheckNumericInput_00109a32(char **input_string,undefined *error_flag,char *end_ptr,undefined8 unused1,undefined8 unused2)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_msg;\n  undefined result [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_ptr) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_msg = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(current_char,error_msg);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = unused2;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00108fe8",
                "__errno_location",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "parse_and_check_numeric_input_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "param_1": "baseAddress",
                "param_2": "fileName",
                "param_3": "tag",
                "iVar1": "comparisonResult",
                "uVar2": "translation",
                "piVar3": "newTag",
                "pauVar4": "tagContainer",
                "lVar5": "fileAddress",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * processDebugTag_0010c6be(long baseAddress,char *fileName,int *tag)\n\n{\n  int comparisonResult;\n  undefined8 translation;\n  int *newTag;\n  undefined (*tagContainer) [16];\n  long fileAddress;\n  char *errorMessage;\n  \n  if ((fileName != (char *)0x0) && (tag != (int *)0x0)) {\n    if (*(long *)(baseAddress + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag != 0x17) {\n        newTag = (int *)FUN_00112904(0x17,0);\n        if (newTag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tagContainer = (undefined (*) [16])xmalloc(0x10);\n        fileAddress = *(long *)(baseAddress + 0x10);\n        *tagContainer = ZEXT816(0);\n        *(int **)(*tagContainer + 8) = tag;\n        *(undefined (**) [16])(newTag + 4) = tagContainer;\n        fileAddress = FUN_00112925(fileAddress + 0x10,fileName,1,3);\n        if (fileAddress == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(fileAddress + 0x20) = newTag;\n        *(long *)*tagContainer = fileAddress;\n        return newTag;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tag + 4) + 8),fileName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tag;\n      }\n    }\n    translation = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translation);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "process_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "input_arg1",
                "param_2": "input_arg2",
                "param_3": "arglist_ptr",
                "param_4": "error_flag",
                "__ptr": "result_ptr",
                "__format": "error_message_template",
                "lVar1": "result_value",
                "uVar2": "num_results",
                "uVar3": "result_ptr_size",
                "uVar4": "result_counter",
                "local_39": "demangled_str"
            },
            "code": "\n\n\nvoid * demangleArglist_0010b6ea(undefined8 input_arg1,undefined8 input_arg2,int *arglist_ptr,undefined *error_flag)\n\n{\n  void *result_ptr;\n  char *error_message_template;\n  long result_value;\n  ulong num_results;\n  ulong result_ptr_size;\n  uint result_counter;\n  char demangled_str [9];\n  \n  result_ptr_size = 10;\n  num_results = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist_ptr != (int *)0x0; arglist_ptr = *(int **)(arglist_ptr + 6)) {\n    if (*arglist_ptr != 0x2e) {\n      error_message_template = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message_template);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist_ptr + 4) == 0) break;\n    result_value = FUN_0010b0fa(input_arg1,input_arg2,*(long *)(arglist_ptr + 4),0,demangled_str);\n    if (result_value == 0) {\n      if (demangled_str[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      result_counter = (int)num_results + 1;\n      if ((uint)result_ptr_size <= result_counter) {\n        result_ptr_size = (ulong)((uint)result_ptr_size + 10);\n        result_ptr = (void *)xrealloc(result_ptr,result_ptr_size << 3);\n      }\n      *(long *)((long)result_ptr + num_results * 8) = result_value;\n      num_results = (ulong)result_counter;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + num_results * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "free",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_0011a2e0",
                "param_1": "binary_info",
                "param_2": "param",
                "uVar1": "section_ptr",
                "uVar2": "error_message",
                "lVar3": "section_info",
                "lVar4": "section_name"
            },
            "code": "\nlong extract_section_0011a2e0(long binary_info,long param)\n\n{\n  undefined8 section_ptr;\n  undefined8 error_message;\n  long section_info;\n  long section_name;\n  \n  section_info = (**(code **)(*(long *)(param + 8) + 0x208))(param);\n  section_name = *(long *)(binary_info + 0x20);\n  *(undefined8 *)(section_info + 8) = *(undefined8 *)(binary_info + 8);\n  *(undefined8 *)(section_info + 0x10) = *(undefined8 *)(binary_info + 0x10);\n  *(undefined4 *)(section_info + 0x18) = *(undefined4 *)(binary_info + 0x18);\n  if (section_name == 0) {\n    section_name = 0x128598;\n  }\n  else {\n    section_name = bfd_get_section_by_name(param);\n    if (section_name == 0) {\n      section_ptr = *(undefined8 *)(binary_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(error_message,section_ptr);\n    }\n  }\n  *(long *)(section_info + 0x20) = section_name;\n  return section_info;\n}\n\n",
            "called": [
                "FUN_00108808",
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "format_and_send_data_0010e8a9",
                "param_1": "text_prefix",
                "param_2": "target_address",
                "param_3": "data",
                "uVar1": "result",
                "sVar2": "data_length",
                "__s": "formatted_data"
            },
            "code": "\nundefined4 format_and_send_data_0010e8a9(undefined8 text_prefix,undefined8 target_address,char *data)\n\n{\n  undefined4 result;\n  size_t data_length;\n  char *formatted_data;\n  \n  data_length = strlen(data);\n  formatted_data = (char *)xmalloc(data_length + 0x14);\n  sprintf(formatted_data,\"%s:c=f%g\",text_prefix,data);\n  result = FUN_0010e2f0(target_address,0x80,0,0,formatted_data);\n  if ((char)result != '\\0') {\n    free(formatted_data);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionText",
                "sVar4": "textLength",
                "iVar1": "comparisonResult",
                "iVar5": "sectionLength",
                "unaff_R14D": "sectionFlags",
                "auVar6": "result",
                "pcVar3": "commaPosition",
                "unaff_R15": "flagText",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentFlag;\n  char *sectionText;\n  size_t textLength;\n  int sectionLength;\n  uint sectionFlags;\n  char *flagText;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    sectionText = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionText == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaPosition = strchr(sectionText,0x2c);\n              if (commaPosition == (char *)0x0) {\n                textLength = strlen(sectionText);\n                sectionLength = (int)textLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                sectionLength = (int)commaPosition - (int)sectionText;\n              }\n              textLength = (size_t)sectionLength;\n              comparisonResult = strncasecmp(flagText,sectionText,textLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              sectionText = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionText,textLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            sectionText = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionText,textLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          sectionText = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionText,textLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        sectionText = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionText,textLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionText,textLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        sectionText = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionText,textLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          sectionText = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionText,textLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            sectionText = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionText,textLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              sectionText = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionText,textLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                sectionText = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionText,textLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  sectionText = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionText,textLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    sectionText = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionText,textLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(sectionLength + 1));\n                      strncpy(commaPosition,sectionText,textLength);\n                      commaPosition[textLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    sectionText = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strncasecmp",
                "strncpy",
                "strchr",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "inputValue",
                "auVar1": "resultArray",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long inputValue;\n  undefined resultArray [16];\n  undefined8 returnAddress;\n  \n  resultArray._1_7_ = 0;\n  resultArray[0] = inputValue == 0x100;\n  resultArray._8_8_ = returnAddress;\n  return resultArray;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentUnitPtr",
                "iVar2": "comparisonResult",
                "uVar3": "message",
                "puVar4": "ptr",
                "lVar5": "nextTypePtr",
                "puVar6": "typePtr",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentUnitPtr;\n  int comparisonResult;\n  undefined8 message;\n  undefined8 *ptr;\n  long nextTypePtr;\n  undefined8 *typePtr;\n  undefined result [16];\n  \n  currentUnitPtr = *(long *)(compilationUnit + 8);\n  if (currentUnitPtr == 0) {\n    message = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",message);\n  }\n  else {\n    for (nextTypePtr = *(long *)(compilationUnit + 0x20); nextTypePtr != 0; nextTypePtr = *(long *)(nextTypePtr + 8)) {\n      if (*(undefined8 **)(nextTypePtr + 0x28) != (undefined8 *)0x0) {\n        for (ptr = (undefined8 *)**(undefined8 **)(nextTypePtr + 0x28); ptr != (undefined8 *)0x0;\n            ptr = (undefined8 *)*ptr) {\n          if (*(int *)((long)ptr + 0x14) == 0) {\n            if (*(char *)ptr[1] == *typeName) {\n              comparisonResult = strcmp((char *)ptr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (typePtr = *(undefined8 **)(currentUnitPtr + 8); typePtr != (undefined8 *)0x0;\n        typePtr = (undefined8 *)*typePtr) {\n      if ((undefined8 *)typePtr[2] != (undefined8 *)0x0) {\n        for (ptr = *(undefined8 **)(undefined8 *)typePtr[2]; ptr != (undefined8 *)0x0;\n            ptr = (undefined8 *)*ptr) {\n          if (*(int *)((long)ptr + 0x14) == 0) {\n            if (*(char *)ptr[1] == *typeName) {\n              comparisonResult = strcmp((char *)ptr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  message = 0;\nLAB_00109223:\n  result._8_8_ = param4;\n  result._0_8_ = message;\n  return result;\nLAB_00109216:\n  message = ptr[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_requirements_0010829e",
                "unaff_EBP": "errorCode",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkRequirements_0010829e(void)\n\n{\n  undefined8 result;\n  int errorCode;\n  \n  if (errorCode == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((errorCode != 4) && (errorCode == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_requirements_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_binary_information_00104943",
                "in_RAX": "inputString",
                "iVar1": "intValue",
                "iVar2": "archIndex",
                "lVar3": "index",
                "sVar4": "length",
                "pcVar5": "archMach",
                "uVar6": "printableArchMach",
                "iVar7": "archStart",
                "lVar8": "startIndex",
                "iVar9": "endIndex",
                "unaff_R15D": "initialArch",
                "uVar10": "loopCounter",
                "uVar11": "archDifference",
                "param_7": "targetIndex",
                "uStack000000000000000c": "stackVar",
                "param_11": "paramSize",
                "param_13": "dataAddress"
            },
            "code": "\n\n\nvoid printBinaryInformation_00104943(void)\n\n{\n  int intValue;\n  int archIndex;\n  char *inputString;\n  long index;\n  size_t length;\n  char *archMach;\n  undefined8 printableArchMach;\n  int archStart;\n  long startIndex;\n  int endIndex;\n  uint initialArch;\n  ulong loopCounter;\n  uint archDifference;\n  int targetIndex;\n  uint stackVar;\n  undefined8 paramSize;\n  long dataAddress;\n  \n  index = strtol(inputString,(char **)0x0,10);\n  intValue = (int)index;\n  endIndex = targetIndex;\n  stackVar = initialArch;\n  if (intValue == 0) {\n    intValue = 0x50;\n  }\n  do {\n    targetIndex = endIndex;\n    if (paramSize._4_4_ <= targetIndex) {\n      return;\n    }\n    startIndex = (long)targetIndex;\n    archStart = (intValue - stackVar) + -1;\n    index = startIndex;\n    do {\n      endIndex = (int)index;\n      if (paramSize._4_4_ <= endIndex) break;\n      length = strlen(*(char **)(dataAddress + index * 0x60));\n      index = index + 1;\n      archStart = (archStart - (int)length) + -1;\n    } while (-1 < archStart);\n    printf(\"\\n%*s\",(ulong)(stackVar + 1),&DAT_0011b4a1);\n    for (index = startIndex * 0x60; ((ulong)(uint)(endIndex - targetIndex) + startIndex) * 0x60 - index != 0;\n        index = index + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataAddress + index));\n    }\n    archStart = 2;\n    putc(10,_stdout);\n    do {\n      archMach = (char *)bfd_printable_arch_mach(archStart,0);\n      archIndex = strcmp(archMach,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        printableArchMach = bfd_printable_arch_mach(archStart,0);\n        printf(\"%*s \",(ulong)stackVar,printableArchMach);\n        archDifference = archStart - 2;\n        index = startIndex * 0x60;\n        archIndex = targetIndex;\n        while (endIndex != archIndex) {\n          archMach = *(char **)(dataAddress + index);\n          if (*(char *)((long)(char **)(dataAddress + index) + (ulong)archDifference + 8) == '\\0') {\n            length = strlen(archMach);\n            for (loopCounter = length & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMach,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (endIndex != archIndex) {\n            putc(0x20,_stdout);\n          }\n          index = index + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archStart = archStart + 1;\n    } while (archStart != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_binary_information_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "allocate_and_store_values_00113e23",
                "param_1": "value_1",
                "param_2": "value_2",
                "lVar1": "result",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong allocate_and_store_values_00113e23(undefined8 value_1,undefined8 value_2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = value_1;\n    allocated_memory[1] = value_2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_store_values_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_error_message_00108fb9",
                "param_1": "errorMessage",
                "__format": "translationString"
            },
            "code": "\n\n\nvoid printErrorMessage_00108fb9(undefined8 errorMessage)\n\n{\n  char *translationString;\n  \n  translationString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,translationString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_error_message_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input_ptr",
                "param_2": "output_value_ptr",
                "iVar1": "current_value",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **input_ptr,int *output_value_ptr)\n\n{\n  int current_value;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_ptr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_value = (char)*current_byte + -0x30;\n    *output_value_ptr = current_value;\n    *input_ptr = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_value = current_value * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_ptr = next_byte;\n        *output_value_ptr = current_value;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_size_and_alignment_00108072",
                "lVar5": "error_message",
                "lVar8": "offset",
                "lVar6": "result",
                "lVar7": "adjusted_offset",
                "unaff_RBX": "parameters",
                "unaff_RBP": "base_pointer",
                "unaff_R12": "register_12",
                "unaff_R14B": "flag",
                "unaff_R15": "register_15",
                "bVar1": "byte_var",
                "uVar2": "uvar2",
                "cVar3": "char_var",
                "uVar4": "uint_var"
            },
            "code": "\n\n\nvoid set_size_and_alignment_00108072(void)\n\n{\n  byte byte_var;\n  undefined8 uvar2;\n  char char_var;\n  uint uint_var;\n  long error_message;\n  long result;\n  long adjusted_offset;\n  undefined8 *parameters;\n  long base_pointer;\n  long register_12;\n  long offset;\n  char flag;\n  long register_15;\n  \n  error_message = dcgettext(0,\"failed to set size\",5);\n  offset = parameters[6];\n  result = FUN_00114190(*parameters,0,0x18);\n  if (result == 0) {\n    *(byte *)(register_15 + 0x28) = *(byte *)(register_15 + 0x28) | 1;\n    uvar2 = *parameters;\n    offset = offset + _DAT_001279b0;\n    *(long *)(register_15 + 0x30) = offset;\n    *(long *)(register_15 + 0x38) = offset;\n    offset = parameters[7];\n    result = FUN_00114190(uvar2,0,0x60);\n    if (result == 0) goto LAB_00115695;\nLAB_00115860:\n    adjusted_offset = *(long *)(result + 0x20);\n    if ((*(byte *)(result + 0x14) & 0x40) != 0) {\n      adjusted_offset = adjusted_offset + offset;\n    }\n    *(long *)(register_15 + 0x38) = adjusted_offset;\n    offset = FUN_00114190(*parameters,0,0x200);\n    if (offset != 0) goto LAB_00115889;\nLAB_001156b8:\n    uint_var = *(uint *)((long)parameters + 0x7c);\n    if (uint_var < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register_15 + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(register_15 + 0x28) =\n         *(byte *)(register_15 + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = register_15;\n    parameters[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    adjusted_offset = *(long *)(result + 0x18);\n    if ((*(byte *)(result + 0x14) & 8) == 0) {\n      adjusted_offset = adjusted_offset + offset;\n    }\n    *(byte *)(register_15 + 0x28) = *(byte *)(register_15 + 0x28) | 1;\n    uvar2 = *parameters;\n    *(long *)(register_15 + 0x30) = adjusted_offset;\n    *(long *)(register_15 + 0x38) = adjusted_offset;\n    offset = parameters[7];\n    result = FUN_00114190(uvar2,0,0x60);\n    if (result != 0) goto LAB_00115860;\nLAB_00115695:\n    uvar2 = *parameters;\n    *(long *)(register_15 + 0x38) = offset + _DAT_001279b0;\n    offset = FUN_00114190(uvar2,0,0x200);\n    if (offset == 0) goto LAB_001156b8;\nLAB_00115889:\n    uint_var = *(uint *)(offset + 0x2c);\n    if (0x3e < uint_var) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register_15 + 0x7c) = uint_var;\n    *(undefined4 *)(register_15 + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(register_15 + 0x28) =\n         *(byte *)(register_15 + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = register_15;\n    parameters[0xb] = 0;\n    byte_var = *(byte *)((long)parameters + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    offset = parameters[0x1a];\n    result = FUN_00115d00(offset,parameters[0x1c]);\n    if ((result != 0) &&\n       (adjusted_offset = *(long *)(register_12 + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(adjusted_offset + 8) == 5)) {\n      *(long *)(offset + 0xb0) = result;\n      char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(register_15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_size_and_alignment_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "dataPtr",
                "param_2": "flag",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "cVar1": "char1",
                "__s": "string1",
                "sVar2": "length",
                "__s_00": "newString",
                "lVar3": "count",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long dataPtr,char flag,undefined8 ptr1,undefined8 ptr2)\n\n{\n  char char1;\n  char *string1;\n  size_t length;\n  char *newString;\n  long count;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  length = strlen(string1);\n  newString = (char *)xmalloc(length + 0x1e);\n  if (flag == '\\0') {\n    *newString = '\\0';\n    count = 0;\n    flag = char1;\n  }\n  else {\n    count = *(long *)(dataPtr + 0x68);\n    *(long *)(dataPtr + 0x68) = count + 1;\n    sprintf(newString,\"%ld=@S;\",count);\n  }\n  length = strlen(newString);\n  sprintf(newString + length,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = FUN_00109b52(dataPtr,newString,count,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(newString);\n  }\n  result._8_8_ = ptr2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined updateData_0010ec73(long *data,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = FUN_0010e2f0(data,0xc0,0,data[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "check_endianness_00114e00",
                "param_1": "endianness",
                "dcgettext": "translate"
            },
            "code": "\nvoid checkEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "check_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "mode",
                "param_4": "filePermissions",
                "param_5": "shouldReverse",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "error",
                "uVar5": "copyErrorCode",
                "auVar6": "resultStruct"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 mode,undefined8 filePermissions,char shouldReverse,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 error;\n  ulong copyErrorCode;\n  undefined resultStruct [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copyErrorCode = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(mode,destinationFilePath,filePermissions);\n    copyErrorCode = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      error = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(error,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldReverse != '\\0') {\n    FUN_0011a350(destinationFilePath,filePermissions);\n  }\n  resultStruct._8_8_ = result;\n  resultStruct._0_8_ = copyErrorCode;\n  return resultStruct;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_0010adf2"
            },
            "code": "\nvoid initialize_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "uVar1": "value",
                "cVar2": "result",
                "uVar3": "returnValue",
                "lVar4": "tempVar",
                "plVar5": "localArray",
                "uVar6": "counter"
            },
            "code": "\nundefined4\nprocessData_0010d7d4(undefined8 arg1,undefined8 *arg2,long *arg3,uint *arg4,uint *arg5)\n\n{\n  undefined8 value;\n  char result;\n  undefined4 returnValue;\n  long tempVar;\n  long *localArray;\n  uint counter;\n  long local_40 [2];\n  \n  value = *arg2;\n  localArray = local_40;\n  if (arg3 == (long *)0x0) {\n    localArray = (long *)0x0;\n  }\n  result = FUN_0010c95e(arg1,arg2,localArray);\n  if ((result != '\\0') &&\n     (returnValue = FUN_00109be3(arg1,value,(int)*arg2 - (int)value), (char)returnValue != '\\0')) {\n    if (arg3 == (long *)0x0) {\n      return returnValue;\n    }\n    if (local_40[0] != 0) {\n      if (*arg5 <= *arg4 + 1) {\n        counter = *arg5 + 10;\n        tempVar = *arg3;\n        *arg5 = counter;\n        tempVar = xrealloc(tempVar,(ulong)counter << 3);\n        *arg3 = tempVar;\n      }\n      counter = *arg4;\n      *(long *)(*arg3 + (ulong)counter * 8) = local_40[0];\n      *arg4 = counter + 1;\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xrealloc",
                "FUN_00109be3",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_data_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filepath",
                "iVar1": "status",
                "piVar2": "errnoLoc",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileInfo"
            },
            "code": "\nlong checkFile_00113f50(char *filepath)\n\n{\n  int status;\n  int *errnoLoc;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileInfo;\n  \n  if (filepath != (char *)0x0) {\n    status = stat(filepath,&fileInfo);\n    if (status < 0) {\n      errnoLoc = __errno_location();\n      if (*errnoLoc == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filepath);\n      }\n      else {\n        errorReason = strerror(*errnoLoc);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filepath,errorReason);\n      }\n    }\n    else if ((fileInfo.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filepath);\n    }\n    else if ((fileInfo.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileInfo.st_size) {\n        return fileInfo.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filepath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filepath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_data_001087fd"
            },
            "code": "\nundefined8 initializeData_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_data_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formats",
                "uVar1": "formatVariable",
                "__format": "formatMessage",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formats)\n\n{\n  undefined8 formatVariable;\n  char *formatMessage;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  formatVariable = DAT_00127600;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMessage,formatVariable);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "analyze_binary_0011378f",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "dataSize",
                "param_4": "metadata",
                "param_5": "stringList",
                "param_6": "result",
                "auVar1": "tempVar",
                "cVar2": "status",
                "uVar3": "errorCode",
                "uVar4": "errorString",
                "puVar5": "dynamicAlloc",
                "sVar6": "stringLength",
                "lVar7": "loopCounter",
                "puVar8": "stringPtr",
                "puVar9": "arrayPtr",
                "__dest": "charDest"
            },
            "code": "\nundefined4\nanalyzeBinary_0011378f(undefined8 *inputFile,undefined8 *outputFile,long *dataSize,undefined8 *metadata,\n            undefined8 *stringList,undefined8 *result)\n\n{\n  undefined tempVar [16];\n  char status;\n  undefined4 errorCode;\n  undefined8 errorString;\n  undefined *dynamicAlloc;\n  size_t stringLength;\n  long loopCounter;\n  undefined8 *stringPtr;\n  undefined4 *arrayPtr;\n  char *charDest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = inputFile;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  status = bfd_hash_table_init(local_220,FUN_0010bb52,0x30);\n  if ((status == '\\0') || (status = bfd_hash_table_init(local_a0,FUN_0010bb52,0x30), status == '\\0')) {\n    errorCode = bfd_get_error();\n    errorString = bfd_errmsg(errorCode);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",errorString);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    arrayPtr = local_1e8;\n    for (loopCounter = 0x52; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *arrayPtr = 0;\n      arrayPtr = arrayPtr + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    status = FUN_0010e2f0(&local_258,0,0,0,0);\n    tempVar = _local_78;\n    if (status != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = tempVar._8_8_;\n      status = FUN_0010e2f0(&local_258,100,0,0,*inputFile);\n      if (status != '\\0') {\n        *(int *)(outputFile + 6) = *(int *)(outputFile + 6) + 1;\n        outputFile[10] = 0;\n        puVar10 = (undefined8 *)*outputFile;\n        *(undefined4 *)(outputFile + 7) = *(undefined4 *)((long)outputFile + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          outputFile[8] = puVar10[2];\n          *(undefined4 *)(outputFile + 9) = 0;\n          status = thunk_FUN_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (status == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (stringPtr = *(undefined8 **)(undefined8 *)plVar11[2]; stringPtr != (undefined8 *)0x0;\n                    stringPtr = (undefined8 *)*stringPtr) {\n                  status = FUN_001135a5(outputFile,&local_258);\n                  if (status == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              status = FUN_0010e439(&local_258,plVar11[1]);\n              if (status == '\\0') {\n                return 0;\n              }\n            }\n          }\n          status = FUN_00112502(outputFile,&local_258,0xffffffffffffffff);\n          if (status == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (errorCode = FUN_0010e2f0(&local_258,100,0,local_68,0), (char)errorCode != '\\0')) {\n          (**(code **)(inputFile[1] + 0x50))(local_228,local_250 + 8);\n          *dataSize = local_250;\n          *metadata = CONCAT44(uStack_244,local_248);\n          *result = local_228;\n          dynamicAlloc = (undefined *)xmalloc();\n          *dynamicAlloc = 0;\n          charDest = dynamicAlloc + 1;\n          *stringList = dynamicAlloc;\n          for (loopCounter = local_238._0_8_; loopCounter != 0; loopCounter = *(long *)(loopCounter + 0x18)) {\n            strcpy(charDest,*(char **)(loopCounter + 8));\n            stringLength = strlen(charDest);\n            charDest = charDest + stringLength + 1;\n          }\n          return errorCode;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_errmsg",
                "thunk_FUN_0010e439",
                "bfd_hash_table_init",
                "FUN_0010e439",
                "strlen",
                "strcpy",
                "FUN_00112502",
                "bfd_get_error",
                "FUN_0010e2f0",
                "FUN_0010bb52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_binary_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "ptrErrnum",
                "uVar2": "result",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "getLocalizedMessage",
                "strerror": "getErrorString"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *ptrErrnum;\n  undefined8 result;\n  \n  ptrErrnum = __errno_location();\n  if (*ptrErrnum == 2) {\n    result = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(result);\n  }\n  else {\n    strerror(*ptrErrnum);\n    result = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(result);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "inputValue"
            },
            "code": "\nvoid initializeData_0010a0a0(long inputValue)\n\n{\n  FUN_00109ed3(inputValue,0x26,4,inputValue + 0x198,inputValue + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "initialize_function_00119ed0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "isTrue",
                "local_d8": "localSize",
                "local_d0": "localPtr",
                "local_b8": "localArray"
            },
            "code": "\nvoid initializeFunction_00119ed0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char isTrue;\n  undefined4 localSize;\n  undefined4 local_d4;\n  undefined *localPtr;\n  undefined *local_c8;\n  undefined localArray [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (isTrue != '\\0') {\n    local_88 = param1;\n    local_78 = param2;\n    local_68 = param3;\n    local_58 = param4;\n    local_48 = param5;\n    local_38 = param6;\n    local_28 = param7;\n    local_18 = param8;\n  }\n  localPtr = &stack0x00000008;\n  localSize = 8;\n  local_c8 = localArray;\n  local_d4 = 0x30;\n  local_b0 = param10;\n  local_a8 = param11;\n  local_a0 = param12;\n  local_98 = param13;\n  local_90 = param14;\n  FUN_00119e70(param9,&localSize);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108375",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00113f50",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00105828",
                "FUN_0010e6a8",
                "FUN_0010b800",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001152b6",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "initialize_function_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "reverse_and_improve_00112c1f",
                "param_1": "info",
                "param_2": "name",
                "param_3": "type",
                "param_4": "base_type",
                "plVar1": "ptr1",
                "lVar2": "var1",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "cVar5": "flag",
                "piVar6": "ptr6",
                "uVar7": "result",
                "uVar8": "var2",
                "iVar9": "var3",
                "uVar10": "var4",
                "uVar11": "var5",
                "uVar12": "var6",
                "uVar13": "var7",
                "bVar14": "var8",
                "local_3c": "var9"
            },
            "code": "\n\n\nundefined8 reverse_and_improve_00112c1f(ulong info,undefined8 name,int *type,long base_type)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr3;\n  undefined8 *ptr4;\n  char flag;\n  int *ptr6;\n  undefined8 result;\n  undefined8 var2;\n  int var3;\n  undefined4 var4;\n  undefined8 var5;\n  ulong var6;\n  uint var7;\n  bool var8;\n  uint var9;\n  \n  var6 = info;\nLAB_00112c39:\n  if (type != (int *)0x0) {\n    var3 = *type;\n    if (var3 - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(type + 4);\n        var7 = *(uint *)(info + 0x30);\n        var6 = (ulong)var7;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == var7) {\n          if (var3 == 0x16) {\n            result = FUN_0010bba1(name,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr6 = (int *)FUN_00112b6e(type,0);\n          if (ptr6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr6 - 7U < 4) && (*(long *)(ptr6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr6 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = FUN_0010c7a0(info,*(undefined8 *)(**(long **)(type + 4) + 8),ptr6),\n               flag == '\\0')) {\n              return 0;\n            }\n            var7 = *(uint *)(*(long *)(ptr6 + 4) + 0xc);\n          }\n          else {\n            var7 = 0;\n          }\n          var3 = *ptr6;\n          result = *(undefined8 *)(**(long **)(type + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var3 == 0x17) {\n          if (var1 != base_type) goto LAB_00112c94;\n          *(uint *)(base_type + 0x10) = var7;\n          base_type = *ptr1;\n          type = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (base_type != 0) {\n          *(uint *)(base_type + 0x10) = var7;\n        }\n        type = (int *)ptr1[1];\n        if (type == (int *)0x0) goto LAB_00112dd6;\n        var3 = *type;\n        base_type = 0;\n      } while (var3 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (base_type == 0) goto LAB_00112d74;\n      *(undefined4 *)(base_type + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(base_type + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(base_type + 8);\n    }\n    switch(var3) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = FUN_00109dfe(name);\n      return result;\n    case 3:\n      result = FUN_0010b800(name,type[1],*(undefined *)(type + 4));\n      return result;\n    case 4:\n      result = FUN_0010b948(name,type[1]);\n      return result;\n    case 5:\n      result = FUN_00109e76(name,type[1]);\n      return result;\n    case 6:\n      result = FUN_00109d3e(name,type[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(type + 4) != 0) {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = FUN_0010c7a0(info,result,type), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(type + 4);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          var7 = *(uint *)(var1 + 0xc);\n          if (var7 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var3 = *type;\nLAB_00112ed2:\n          result = FUN_00109d5c(name,result,var7,var3);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n      }\n      var4 = 0;\n      if (*(long *)(type + 4) != 0) {\n        var4 = *(undefined4 *)(*(long *)(type + 4) + 0xc);\n      }\n      flag = FUN_0010a69a(name,result,var4,*type == 7,type[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type + 4) != (long *)0x0) && (var6 = 0, **(long **)(type + 4) != 0)) {\n        while( true ) {\n          ptr4 = *(undefined8 **)(**(long **)(type + 4) + var6 * 8);\n          if (ptr4 == (undefined8 *)0x0) break;\n          flag = reverse_and_improve_00112c1f(info,name,ptr4[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = FUN_0010ba08(name,*ptr4,*(undefined4 *)(ptr4 + 3),\n                               *(undefined4 *)((long)ptr4 + 0x1c),*(undefined4 *)(ptr4 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          var6 = (ulong)((int)var6 + 1);\n        }\n      }\n      result = FUN_0010a77a(name);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(type + 4) == 0) {\n        var7 = 0;\n        ptr6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (var6 = info, flag = FUN_0010c7a0(info,result,type), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(type + 4);\n        var7 = *(uint *)(var1 + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          if (var7 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var3 = *type;\n          goto LAB_00112ed2;\n        }\n        ptr6 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n        if (((ptr6 != (int *)0x0) && (type != ptr6)) &&\n           (var6 = info, flag = reverse_and_improve_00112c1f(info,name,ptr6,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = FUN_0010a83e(name,result,var7,*type == 9,type[1],ptr6 != (int *)0x0,\n                           type == ptr6,var6);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type + 4) != (long *)0x0) {\n        var7 = 0;\n        if (**(long **)(type + 4) != 0) {\n          while (ptr4 = *(undefined8 **)(**(long **)(type + 4) + (ulong)var7 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = reverse_and_improve_00112c1f(info,name,ptr4[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr4 + 0x14) == '\\0') {\n              flag = FUN_0010ba08(name,*ptr4,*(undefined4 *)(ptr4 + 3));\n            }\n            else {\n              flag = FUN_0010a94e(name,*ptr4,ptr4[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            var7 = var7 + 1;\n          }\n        }\n        var7 = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x10) != 0) {\n          while (ptr4 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x10) + (ulong)var7 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = reverse_and_improve_00112c1f(info,name,*ptr4,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = FUN_0010aa53(name,*(undefined4 *)(ptr4 + 1),\n                                 *(undefined *)((long)ptr4 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            var7 = var7 + 1;\n          }\n        }\n        var9 = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x18) != 0) {\n          while (ptr4 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x18) + (ulong)var9 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = FUN_0010ab4d(name,*ptr4);\n            if (flag == '\\0') {\n              return 0;\n            }\n            var7 = 0;\n            while (ptr3 = *(undefined8 **)(ptr4[1] + (ulong)var7 * 8),\n                  ptr3 != (undefined8 *)0x0) {\n              if ((ptr3[4] != 0) &&\n                 (flag = reverse_and_improve_00112c1f(info,name,ptr3[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = reverse_and_improve_00112c1f(info,name,ptr3[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr3[3] == -1) {\n                flag = FUN_0010adf2(name,*ptr3,*(undefined4 *)(ptr3 + 2),\n                                     *(undefined *)((long)ptr3 + 0x14),\n                                     *(undefined *)((long)ptr3 + 0x15));\n              }\n              else {\n                flag = FUN_0010add5(name);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              var7 = var7 + 1;\n            }\n            flag = FUN_00109bbb(name);\n            if (flag == '\\0') {\n              return 0;\n            }\n            var9 = var9 + 1;\n          }\n        }\n      }\n      result = FUN_0010ae0e(name);\n      return result;\n    case 0xb:\n      ptr4 = *(undefined8 **)(type + 4);\n      if (ptr4 == (undefined8 *)0x0) {\n        var2 = 0;\n        var5 = 0;\n      }\n      else {\n        var2 = ptr4[1];\n        var5 = *ptr4;\n      }\n      result = FUN_0010e453(name,result,var5,var2);\n      return result;\n    case 0xc:\n      flag = reverse_and_improve_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a083(name);\n      return result;\n    case 0xd:\n      flag = reverse_and_improve_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var6 = 0;\n      if (*(long *)(*(long *)(type + 4) + 8) == 0) {\n        var6 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(type + 4) + 8) + var6 * 8), var1 != 0) {\n          var6 = var6 + 1;\n          flag = reverse_and_improve_00112c1f(info,name,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        var6 = var6 & 0xffffffff;\n      }\n      result = FUN_0010e5db(name,var6,*(undefined *)(*(long *)(type + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = reverse_and_improve_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0a0(name);\n      return result;\n    case 0xf:\n      flag = reverse_and_improve_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0e9(name,*(undefined8 *)(*(long *)(type + 4) + 8),\n                           *(undefined8 *)(*(long *)(type + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = reverse_and_improve_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = reverse_and_improve_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(type + 4);\n      result = FUN_0010a181(name,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      flag = reverse_and_improve_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a2b9(name,*(undefined *)(*(long *)(type + 4) + 8));\n      return result;\n    case 0x12:\n      flag = reverse_and_improve_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = reverse_and_improve_00112c1f(info,name,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a377(name);\n      return result;\n    case 0x13:\n      flag = reverse_and_improve_00112c1f(info,name,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var6 = 0;\n      if (*(long *)(*(long *)(type + 4) + 0x10) == 0) {\n        var6 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(type + 4) + 0x10) + var6 * 8), var1 != 0)\n        {\n          var6 = var6 + 1;\n          flag = reverse_and_improve_00112c1f(info,name,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type + 4) + 8) != 0) &&\n         (flag = reverse_and_improve_00112c1f(info,name,*(long *)(*(long *)(type + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = FUN_0010a424(name,*(long *)(*(long *)(type + 4) + 8) != 0,var6 & 0xffffffff,\n                           *(undefined *)(*(long *)(type + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = reverse_and_improve_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0bd(name);\n      return result;\n    case 0x15:\n      flag = reverse_and_improve_00112c1f(info,name,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0d3(name);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  var8 = *(int **)**(undefined8 **)(type + 4) == type;\n  type = *(int **)**(undefined8 **)(type + 4);\n  if (var8) {\nLAB_00112dd6:\n    result = FUN_00109d97(name);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c7a0",
                "FUN_0010a181",
                "FUN_00109e76",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010a77a",
                "FUN_0010adf2",
                "FUN_00109dfe",
                "__assert_fail",
                "FUN_0010ba08",
                "FUN_0010e453",
                "FUN_0010a0bd",
                "FUN_0010a69a",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010ae0e",
                "FUN_00112b6e",
                "FUN_0010a94e",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010add5",
                "FUN_0010a377",
                "abort",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_00112c1f",
                "FUN_0010a0a0",
                "FUN_0010ab4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopySuccessful",
                "unaff_R15": "dataAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopySuccessful;\n  long dataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(dataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "filename",
                "in_RAX": "returnValue",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 filename)\n\n{\n  undefined8 returnValue;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,filename,message,returnValue);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "recognize_input_format_00105828",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "inputFormat",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 recognizeInputFormat_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 inputFormat;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    inputFormat = FUN_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFormat);\n  }\n  else {\n    inputFormat = bfd_get_mach();\n    machine = bfd_get_arch();\n    inputFormat = bfd_printable_arch_mach(machine,inputFormat);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(errorMessage,inputFormat);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "recognize_input_format_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "directory_template",
                "pcVar1": "result",
                "mkdtemp": "make_temporary_directory"
            },
            "code": "\nchar * create_temporary_directory_0011a0e0(void)\n\n{\n  char *directory_template;\n  char *result;\n  \n  directory_template = (char *)FUN_00114cf0();\n  result = mkdtemp(directory_template);\n  if (result == (char *)0x0) {\n    free(directory_template);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "find_hash_entry_0010bba1",
                "param_1": "hash_table",
                "param_2": "key",
                "lVar1": "hash_entry",
                "uVar2": "result"
            },
            "code": "\nundefined8 find_hash_entry_0010bba1(long hash_table,undefined8 key)\n\n{\n  long hash_entry;\n  undefined8 result;\n  \n  hash_entry = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((hash_entry != 0) && (0 < *(long *)(hash_entry + 0x20))) {\n    result = FUN_00109cf4(hash_table,*(long *)(hash_entry + 0x20),*(undefined4 *)(hash_entry + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "find_hash_entry_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "reverse_string_lookup_0010e6a8",
                "param_1": "binary_offset",
                "param_2": "input_string",
                "__s": "result_string",
                "sVar3": "input_string_length",
                "sVar4": "result_string_length",
                "__s_00": "modified_string",
                "lVar5": "lookup_result",
                "lVar8": "counter",
                "uVar1": "hash_result",
                "uVar2": "error_code",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "return_value",
                "auVar10": "return_data"
            },
            "code": "\nundefined  [16] reverse_string_lookup_0010e6a8(long binary_offset,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  uint hash_result;\n  undefined4 error_code;\n  char *result_string;\n  size_t input_string_length;\n  size_t result_string_length;\n  char *modified_string;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long counter;\n  ulong return_value;\n  undefined return_data [16];\n  \n  counter = *(long *)(*(long *)(binary_offset + 0x60) + 0x10);\n  error_code = *(undefined4 *)(*(long *)(binary_offset + 0x60) + 0x18);\n  result_string = (char *)FUN_00109b2f();\n  input_string_length = strlen(input_string);\n  result_string_length = strlen(result_string);\n  modified_string = (char *)xmalloc(input_string_length + 0x14 + result_string_length);\n  if (counter < 1) {\n    counter = *(long *)(binary_offset + 0x68);\n    *(long *)(binary_offset + 0x68) = counter + 1;\n    sprintf(modified_string,\"%s:t%ld=%s\",input_string,counter,result_string);\n  }\n  else {\n    sprintf(modified_string,\"%s:t%s\",input_string,result_string);\n  }\n  free(result_string);\n  hash_result = FUN_0010e2f0(binary_offset,0x80,0,0,modified_string);\n  return_value = (ulong)hash_result;\n  if ((char)hash_result != '\\0') {\n    free(modified_string);\n    lookup_result = bfd_hash_lookup(binary_offset + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = error_code;\n      goto LAB_0010e7b3;\n    }\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(error_format,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  return_data._8_8_ = param_4;\n  return_data._0_8_ = return_value;\n  return return_data;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "sprintf",
                "bfd_errmsg",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "reverse_string_lookup_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_and_send_data_0010e7c2",
                "param_1": "inputData",
                "param_2": "message",
                "param_3": "unused1",
                "param_4": "unused2",
                "__s": "result",
                "sVar1": "messageLength",
                "sVar2": "resultLength",
                "__s_00": "formattedData",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e7c2(undefined8 inputData,char *message,undefined8 unused1,undefined8 unused2)\n\n{\n  char *result;\n  size_t messageLength;\n  size_t resultLength;\n  char *formattedData;\n  undefined returnValue [16];\n  \n  result = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  resultLength = strlen(result);\n  formattedData = (char *)xmalloc(messageLength + 3 + resultLength);\n  sprintf(formattedData,\"%s:T%s\",message,result);\n  free(result);\n  returnValue._0_4_ = FUN_0010e2f0(inputData,0x80,0,0,formattedData);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(formattedData);\n  }\n  returnValue._8_8_ = unused2;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "initialize_and_exit_00119dd0",
                "param_1": "init_param_1",
                "param_2": "init_param_2",
                "param_3": "init_param_3",
                "param_4": "init_param_4",
                "param_5": "init_param_5",
                "param_6": "init_param_6",
                "param_7": "init_param_7",
                "param_8": "init_param_8",
                "param_9": "init_param_9",
                "param_10": "init_param_10",
                "param_11": "init_param_11",
                "param_12": "init_param_12",
                "param_13": "init_param_13",
                "param_14": "init_param_14",
                "in_AL": "condition",
                "local_d8": "local_size",
                "local_d4": "buffer_size",
                "local_d0": "local_buffer_ptr",
                "local_c8": "local_b8_ptr",
                "local_b8": "local_buffer",
                "local_b0": "init_param_10",
                "local_a8": "init_param_11",
                "local_a0": "init_param_12",
                "local_98": "init_param_13",
                "local_90": "init_param_14",
                "local_88": "init_param_1",
                "local_78": "init_param_2",
                "local_68": "init_param_3",
                "local_58": "init_param_4",
                "local_48": "init_param_5",
                "local_38": "init_param_6",
                "local_28": "init_param_7",
                "local_18": "init_param_8",
                "xexit": "exitProgram"
            },
            "code": "\nvoid initializeAndExit_00119dd0(undefined4 init_param_1,undefined4 init_param_2,undefined4 init_param_3,undefined4 init_param_4,\n                 undefined4 init_param_5,undefined4 init_param_6,undefined4 init_param_7,undefined4 init_param_8,\n                 undefined8 init_param_9,undefined8 init_param_10,undefined8 init_param_11,undefined8 init_param_12,\n                 undefined8 init_param_13,undefined8 init_param_14)\n\n{\n  char condition;\n  undefined4 local_size;\n  undefined4 buffer_size;\n  undefined *local_buffer_ptr;\n  undefined *local_b8_ptr;\n  undefined local_buffer [8];\n  undefined8 init_param_10;\n  undefined8 init_param_11;\n  undefined8 init_param_12;\n  undefined8 init_param_13;\n  undefined8 init_param_14;\n  undefined4 init_param_1;\n  undefined4 init_param_2;\n  undefined4 init_param_3;\n  undefined4 init_param_4;\n  undefined4 init_param_5;\n  undefined4 init_param_6;\n  undefined4 init_param_7;\n  undefined4 init_param_8;\n  \n  if (condition != '\\0') {\n    init_param_1 = init_param_1;\n    init_param_2 = init_param_2;\n    init_param_3 = init_param_3;\n    init_param_4 = init_param_4;\n    init_param_5 = init_param_5;\n    init_param_6 = init_param_6;\n    init_param_7 = init_param_7;\n    init_param_8 = init_param_8;\n  }\n  local_buffer_ptr = &stack0x00000008;\n  local_size = 8;\n  local_b8_ptr = local_buffer;\n  buffer_size = 0x30;\n  init_param_10 = init_param_10;\n  init_param_11 = init_param_11;\n  init_param_12 = init_param_12;\n  init_param_13 = init_param_13;\n  init_param_14 = init_param_14;\n  FUN_00119e70(init_param_9,&local_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00114190",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00115b70",
                "FUN_00108d9a",
                "FUN_0010543c",
                "FUN_0010da0b",
                "FUN_00108808",
                "FUN_00114460",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001083de"
            ],
            "imported": false,
            "current_name": "initialize_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_retaddr": "RET_unaff_retaddr"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *unaff_RBP;\n  undefined8 RET_unaff_retaddr;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return RET_unaff_retaddr;\n    }\n  }\n  FUN_0011a110(*unaff_RBP);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_binary_data_00116852",
                "in_R10": "index",
                "unaff_R14": "ptr1",
                "unaff_RBP": "ptr2",
                "in_RCX": "arrayEnd",
                "sVar1": "size",
                "uVar4": "count",
                "__ptr": "newArray",
                "unaff_R13": "array",
                "unaff_RBX": "value1",
                "unaff_R15": "value2",
                "psVar13": "currentElement",
                "bVar14": "flag",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "arrayToProcess",
                "param_12": "outputBuffer",
                "param_13": "bufferSize",
                "param_14": "arraySize"
            },
            "code": "\nulong processBinaryData_00116852(void)\n\n{\n  size_t size;\n  code *pcVar2;\n  int iVar3;\n  uint count;\n  undefined *newArray;\n  size_t *arrayEnd;\n  ulong uVar5;\n  ulong uVar6;\n  long lVar7;\n  ulong uVar8;\n  size_t value1;\n  size_t *ptr2;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong index;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *array;\n  size_t *ptr1;\n  size_t value2;\n  size_t *currentElement;\n  byte flag;\n  size_t param1;\n  size_t param2;\n  ulong param3;\n  size_t *arrayToProcess;\n  undefined *outputBuffer;\n  long bufferSize;\n  size_t arraySize;\n  \n  flag = 0;\ncode_r0x00116852:\n  count = (int)index + 1;\n  if (0x10 < (int)index) goto LAB_001167f5;\nLAB_00116863:\n  ptr1 = ptr1 + -9;\n  do {\n    if (array <= ptr1) {\n      size = ptr1[2];\n      if (size == 0) goto LAB_00116863;\n      uVar8 = (ulong)count;\n      if ((*ptr1 == *ptr2) &&\n         (iVar3 = memcmp((void *)ptr1[3],(void *)ptr2[3],*ptr2), iVar3 == 0)) {\n        uVar6 = ptr1[7];\n        uVar5 = ptr1[8];\n        index = uVar8 & 0xffffffff;\n        if (value2 == uVar6) {\n          if (value1 != uVar5) goto LAB_001167a6;\n          ptr2[2] = 0;\n        }\n        else {\n          if (value2 < uVar6) {\n            if (uVar5 < value2) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < uVar5) || (value2 <= (uVar5 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (value1 < value2) {\n              if ((0xfffffffffffffff0 < value1) ||\n                 (uVar6 <= (value1 + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (value1 == uVar5) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (value1 <= uVar5) {\n              ptr2[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (uVar5 < value2) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (size == 0x101)) goto code_r0x00116852;\n          if (uVar5 <= value1) {\n            uVar5 = value1;\n          }\n          if (uVar6 < value2) {\n            value2 = uVar6;\n          }\n          ptr1[8] = uVar5;\n          ptr1[7] = value2;\n          ptr2[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        ptr1 = ptr2;\n        ptr2 = ptr1 + 9;\n        if (arrayEnd <= ptr2) {\n          qsort(arrayToProcess,arraySize,0x48,FUN_0011a250);\n          newArray = (undefined *)xmalloc(param3 * 2);\n          param1 = 0;\n          puVar12 = newArray;\n          for (currentElement = arrayToProcess; currentElement < arrayEnd; currentElement = currentElement + 9) {\n            if (currentElement[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              pcVar2 = *(code **)(*(long *)(bufferSize + 8) + 0x50);\n              if ((currentElement[7] == param2) && (currentElement[8] == param1)) {\n                (*pcVar2)(*currentElement,puVar12);\n                (**(code **)(*(long *)(bufferSize + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(bufferSize + 8) + 0x50))(currentElement[2],puVar12 + 8);\n                uVar6 = currentElement[6];\n                uVar8 = *currentElement;\n                puVar12 = (undefined *)currentElement[3];\n                puVar11 = puVar9;\n                for (uVar5 = uVar8; uVar5 != 0; uVar5 = uVar5 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)flag * -2 + 1;\n                  puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                }\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + uVar6;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(bufferSize + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(bufferSize + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(bufferSize + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(bufferSize + 8) + 0x50))(currentElement[2],puVar12 + 8);\n                uVar8 = *currentElement;\n                puVar12 = (undefined *)currentElement[3];\n                puVar11 = puVar9;\n                for (uVar6 = uVar8; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)flag * -2 + 1;\n                  puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                }\n                uVar6 = currentElement[6];\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)flag * -2 + 1;\n                  }\n                }\n                lVar7 = *(long *)(bufferSize + 8);\n                puVar9 = puVar9 + uVar6;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(lVar7 + 8) == 5) &&\n                   (*(char *)(*(long *)(bufferSize + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(lVar7 + 0x38))(currentElement[7],puVar9);\n                  (**(code **)(*(long *)(bufferSize + 8) + 0x38))(currentElement[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(lVar7 + 0x50))(currentElement[7],puVar9);\n                  (**(code **)(*(long *)(bufferSize + 8) + 0x50))(currentElement[8],puVar9 + 4);\n                }\n                param2 = currentElement[7];\n                param1 = currentElement[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)newArray;\n          uVar8 = uVar6;\n          puVar12 = newArray;\n          if (uVar6 < param3) {\n            for (; param3 = uVar6, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *outputBuffer = *puVar12;\n              puVar12 = puVar12 + (ulong)flag * -2 + 1;\n              outputBuffer = outputBuffer + (ulong)flag * -2 + 1;\n            }\n          }\n          free(newArray);\n          free(arrayToProcess);\n          return param3;\n        }\n        in_R11 = ptr1[0xb];\n      } while (in_R11 == 0);\n      value2 = ptr1[0x10];\n      value1 = ptr1[0x11];\n      count = 0;\n      if (value2 != value1) break;\n      ptr1[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "free",
                "qsort",
                "memcmp",
                "FUN_00116852"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_binary_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_pointer_00113d3a",
                "param_1": "inputPointer",
                "lVar1": "outputPointer"
            },
            "code": "\nlong initializePointer_00113d3a(long inputPointer)\n\n{\n  long outputPointer;\n  \n  if (inputPointer != 0) {\n    outputPointer = *(long *)(inputPointer + 8);\n    if (outputPointer == 0) {\n      outputPointer = FUN_00112904(0xc,0);\n      if (outputPointer == 0) {\n        outputPointer = 0;\n      }\n      else {\n        *(long *)(outputPointer + 0x10) = inputPointer;\n        *(long *)(inputPointer + 8) = outputPointer;\n      }\n    }\n    return outputPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "execute_function_0010a0d3",
                "param_1": "input"
            },
            "code": "\nvoid executeFunction_0010a0d3(long input)\n\n{\n  FUN_00109ed3(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_function_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_1": "binaryReference1",
                "param_2": "inputFiles",
                "param_3": "binaryReference2",
                "lVar1": "lengthVar1",
                "pcVar2": "pointerVar2",
                "ppcVar3": "pointerPointerVar3",
                "cVar4": "charVar",
                "iVar5": "intVar",
                "uVar6": "uintVar",
                "sVar7": "sizeVar1",
                "sVar8": "sizeVar2",
                "lVar9": "lengthVar2",
                "pcVar10": "pointerVar4",
                "pcVar11": "pointerVar5",
                "pcVar12": "pointerVar6",
                "uVar13": "uintVar2",
                "bVar14": "boolVar",
                "local_50": "localVar1",
                "local_48": "localVar2",
                "local_40": "localArray1"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid createOutputSection_00115530(long binaryReference1,char **inputFiles,long binaryReference2)\n\n{\n  long lengthVar1;\n  char *pointerVar2;\n  char **pointerPointerVar3;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  long lengthVar2;\n  char *pointerVar4;\n  char *pointerVar5;\n  char *pointerVar6;\n  uint uintVar2;\n  bool boolVar;\n  long localVar1;\n  char *localVar2;\n  long localArray1 [2];\n  \n  charVar = FUN_001159d0(inputFiles);\n  if (charVar != '\\0') {\n    return;\n  }\n  pointerVar4 = *inputFiles;\n  uintVar2 = *(uint *)((long)inputFiles + 0x24);\n  localVar2 = pointerVar4;\n  pointerPointerVar3 = DAT_001278f8;\n  if (*(int *)(*(long *)(binaryReference1 + 8) + 8) != *(int *)(*(long *)(binaryReference2 + 8) + 8)) {\n    uintVar2 = uintVar2 & *(uint *)(*(long *)(binaryReference1 + 8) + 0x18) &\n             *(uint *)(*(long *)(binaryReference2 + 8) + 0x18);\n  }\n  for (; pointerPointerVar3 != (char **)0x0; pointerPointerVar3 = (char **)pointerPointerVar3[3]) {\n    intVar = strcmp(*pointerPointerVar3,pointerVar4);\n    if (intVar == 0) {\n      if (*(uint *)(pointerPointerVar3 + 2) != 0xffffffff) {\n        uintVar2 = *(uint *)(pointerPointerVar3 + 2);\n      }\n      if (pointerVar4 != pointerPointerVar3[1]) {\n        localVar2 = pointerPointerVar3[1];\n        uintVar2 = FUN_00115f30(uintVar2,binaryReference2);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (pointerVar4 = DAT_00127918, (*(byte *)((long)inputFiles + 0x24) & 1) != 0)) ||\n     (pointerVar4 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    sizeVar1 = strlen(pointerVar4);\n    sizeVar2 = strlen(localVar2);\n    pointerVar6 = (char *)xmalloc(sizeVar1 + 1 + sizeVar2);\n    pointerVar4 = strcpy(pointerVar6,pointerVar4);\n    localVar2 = strcat(pointerVar4,localVar2);\n  }\n  lengthVar2 = FUN_00114190(*inputFiles,0,0x80);\n  boolVar = false;\n  if (lengthVar2 == 0) {\n    if ((DAT_00127a48 == 4) && ((uintVar2 & 0x2000001) != 0)) {\n      intVar = *(int *)(*(long *)(binaryReference1 + 8) + 8);\n      if (intVar == 5) {\n        if (*(int *)(inputFiles[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(binaryReference2 + 8) + 8) == 5) {\n            boolVar = (uintVar2 & 0x2000000) == 0;\n            uintVar = ~((-(uint)((uintVar2 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)inputFiles + 0x24) = *(uint *)((long)inputFiles + 0x24) & uintVar;\n          }\n          else {\n            uintVar = 0xfdfffefd;\n          }\n          uintVar2 = uintVar2 & uintVar;\n        }\n      }\n      else if ((intVar != 2) || (intVar = strcmp(*inputFiles,\".buildid\"), intVar != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uintVar2 = FUN_00115f30(uintVar2 & 0x104 | *(uint *)(lengthVar2 + 0x28),binaryReference2,*inputFiles);\n  }\n  charVar = bfd_convert_section_setup(binaryReference1,inputFiles,binaryReference2,&localVar2,localArray1);\n  if (charVar == '\\0') {\n    pointerVar4 = (char *)0x0;\n    localVar1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  pointerVar4 = (char *)bfd_make_section_anyway_with_flags(binaryReference2,localVar2,uintVar2);\n  if (pointerVar4 == (char *)0x0) {\n    localVar1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      localArray1[0] = 0;\n      goto LAB_001158e7;\n    }\n    charVar = bfd_set_section_size(pointerVar4,localArray1[0]);\n    if (charVar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    localArray1[0] = ((((long)DAT_00127a3c - 1U) + localArray1[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    charVar = bfd_set_section_size(pointerVar4);\n    if (charVar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  localVar1 = 0;\n  pointerVar6 = inputFiles[6];\n  lengthVar2 = FUN_00114190(*inputFiles,0,0x18);\n  if (lengthVar2 == 0) {\n    pointerVar4[0x28] = pointerVar4[0x28] | 1;\n    pointerVar5 = *inputFiles;\n    pointerVar6 = pointerVar6 + _DAT_001279b0;\n    *(char **)(pointerVar4 + 0x30) = pointerVar6;\n    *(char **)(pointerVar4 + 0x38) = pointerVar6;\n    pointerVar6 = inputFiles[7];\n    lengthVar2 = FUN_00114190(pointerVar5,0,0x60);\n    if (lengthVar2 == 0) goto LAB_00115695;\nLAB_00115860:\n    pointerVar5 = *(char **)(lengthVar2 + 0x20);\n    if ((*(byte *)(lengthVar2 + 0x14) & 0x40) != 0) {\n      pointerVar5 = pointerVar5 + (long)pointerVar6;\n    }\n    *(char **)(pointerVar4 + 0x38) = pointerVar5;\n    lengthVar2 = FUN_00114190(*inputFiles,0,0x200);\n    if (lengthVar2 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar2 = *(uint *)((long)inputFiles + 0x7c);\n    if (uintVar2 < 0x3f) goto LAB_001156c4;\n    localVar1 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(pointerVar4 + 0xb4) = *(undefined4 *)((long)inputFiles + 0xb4);\n    pointerVar4[0x28] = pointerVar4[0x28] & 0xcfU | *(byte *)(inputFiles + 5) & 0x30;\n    inputFiles[0xc] = pointerVar4;\n    inputFiles[0xb] = (char *)0x0;\n    if ((*(byte *)((long)inputFiles + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    charVar = (**(code **)(*(long *)(binaryReference2 + 8) + 0x158))(binaryReference1,inputFiles,binaryReference2,pointerVar4);\n    if (charVar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    pointerVar5 = *(char **)(lengthVar2 + 0x18);\n    if ((*(byte *)(lengthVar2 + 0x14) & 8) == 0) {\n      pointerVar5 = pointerVar5 + (long)pointerVar6;\n    }\n    pointerVar4[0x28] = pointerVar4[0x28] | 1;\n    pointerVar2 = *inputFiles;\n    *(char **)(pointerVar4 + 0x30) = pointerVar5;\n    *(char **)(pointerVar4 + 0x38) = pointerVar5;\n    pointerVar6 = inputFiles[7];\n    lengthVar2 = FUN_00114190(pointerVar2,0,0x60);\n    if (lengthVar2 != 0) goto LAB_00115860;\nLAB_00115695:\n    pointerVar5 = *inputFiles;\n    *(char **)(pointerVar4 + 0x38) = pointerVar6 + _DAT_001279b0;\n    lengthVar2 = FUN_00114190(pointerVar5,0,0x200);\n    if (lengthVar2 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar2 = *(uint *)(lengthVar2 + 0x2c);\n    if (0x3e < uintVar2) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(pointerVar4 + 0x7c) = uintVar2;\n    *(undefined4 *)(pointerVar4 + 0xb4) = *(undefined4 *)((long)inputFiles + 0xb4);\n    pointerVar4[0x28] = pointerVar4[0x28] & 0xcfU | *(byte *)(inputFiles + 5) & 0x30;\n    inputFiles[0xc] = pointerVar4;\n    inputFiles[0xb] = (char *)0x0;\n    if ((*(byte *)((long)inputFiles + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    pointerVar6 = inputFiles[0x1a];\n    lengthVar2 = FUN_00115d00(pointerVar6,inputFiles[0x1c]);\n    if ((lengthVar2 == 0) ||\n       (lengthVar1 = *(long *)(binaryReference1 + 8), *(uint *)(lengthVar2 + 0x18) = *(uint *)(lengthVar2 + 0x18) | 0x20,\n       *(int *)(lengthVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(pointerVar6 + 0xb0) = lengthVar2;\n    charVar = (**(code **)(*(long *)(binaryReference2 + 8) + 0x158))(binaryReference1,inputFiles,binaryReference2,pointerVar4);\n    if (charVar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (boolVar) {\n    *(undefined4 *)(*(long *)(pointerVar4 + 0xd0) + 4) = 8;\n  }\n  if (localVar1 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  FUN_001126c0(0,binaryReference2,pointerVar4,localVar1);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00115f30",
                "xmalloc",
                "bfd_set_section_size",
                "strcat",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup",
                "strlen",
                "strcpy",
                "FUN_00108072",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "initialize_function_0010a0bd",
                "param_1": "functionParameter"
            },
            "code": "\nvoid initializeFunction_0010a0bd(long functionParameter)\n\n{\n  FUN_00109ed3(functionParameter,0x6b,*(undefined4 *)(*(long *)(functionParameter + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_function_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "process_input_00113e5e",
                "param_1": "buffer",
                "param_2": "input_string",
                "param_3": "length",
                "cVar1": "type_check",
                "local_20": "temp_ptr"
            },
            "code": "\nundefined8 process_input_00113e5e(undefined8 buffer,char **input_string,long length)\n\n{\n  char type_check;\n  char *temp_ptr [2];\n  \n  temp_ptr[0] = *input_string;\n  *input_string = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)temp_ptr[0] < 5) ||\n      (type_check = FUN_00113fb0(temp_ptr[0],\"type\"), type_check == '\\0')) ||\n     ((temp_ptr[0][4] != '$' && (temp_ptr[0][4] != '.')))) {\n    if (*temp_ptr[0] != '_') {\n      return 1;\n    }\n    if (temp_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (temp_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (temp_ptr[0][3] != 'p') {\n      return 1;\n    }\n    temp_ptr[0] = temp_ptr[0] + 4;\n  }\n  else {\n    temp_ptr[0] = temp_ptr[0] + 5;\n  }\n  type_check = FUN_0010c95e(buffer,temp_ptr,0);\n  if (type_check != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_input_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "data",
                "param_2": "str1",
                "param_3": "num1",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "num2",
                "param_8": "flag4",
                "lVar1": "dataPtr",
                "pcVar2": "str2",
                "bVar3": "byteVar",
                "pcVar4": "str3",
                "__s": "str4",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByteVar"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long data,char *str1,uint num1,char flag1,char flag2,char flag3,\n            undefined8 num2,char flag4)\n\n{\n  long dataPtr;\n  char *str2;\n  byte byteVar;\n  char *str3;\n  char *str4;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByteVar;\n  \n  str4 = (char *)0x0;\n  localByteVar = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  str3 = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (localByteVar == 0) {\n      byteVar = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    localByteVar = byteVar & 1;\n    str4 = (char *)FUN_00109b2f(data);\n  }\n  dataPtr = *(long *)(data + 0x60);\n  if ((dataPtr == 0) || (str2 = *(char **)(dataPtr + 0x30), str2 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < num1) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str2);\n    len2 = strlen(str3);\n    len3 = strlen(str1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str4);\n    }\n    result = xrealloc(str2,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(dataPtr + 0x30) = result;\n    str2 = *(char **)(*(long *)(data + 0x60) + 0x30);\n    len1 = strlen(str2);\n    sprintf(str2 + len1,\"%s:%s;%c%c%c\",str3,str1,(ulong)(byte)(0x32 - (char)num1),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,len1);\n    free(str3);\n    if (flag4 != '\\0') {\n      str3 = *(char **)(*(long *)(data + 0x60) + 0x30);\n      len1 = strlen(str3);\n      sprintf(str3 + len1,\"%ld;%s;\",num2,str4);\n      free(str4);\n    }\n    if (localByteVar != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "parameters",
                "param_3": "output",
                "uVar1": "value",
                "uVar2": "message"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *parameters,undefined8 output)\n\n{\n  undefined8 value;\n  undefined8 message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    value = *parameters;\n    flags = flags & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(message,value,output);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_value_from_binary_001129f4",
                "param_1": "inputArray",
                "puVar1": "arrayPointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 extractValueFromBinary_001129f4(int *inputArray)\n\n{\n  undefined8 *arrayPointer;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    arrayPointer = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*arrayPointer;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*arrayPointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "extract_value_from_binary_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_00114c80",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_xor_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint invert_and_xor_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_xor_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "decompile_and_improve_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_6": "temporaryDir",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "iVar5": "intVar5",
                "ppcVar6": "charPtrPtrVar6",
                "pvVar7": "voidPtrVar7",
                "lVar8": "longVar8",
                "puVar9": "ptrVar9",
                "piVar10": "ptrIntVar10",
                "lVar13": "var1",
                "puVar14": "fileDescriptorPtr",
                "lVar21": "var2",
                "pcVar23": "charVar23",
                "psVar24": "statStructVar24",
                "bVar25": "boolVar25",
                "bVar26": "byteVar26",
                "local_1a0": "localVar1",
                "local_198": "localVar2",
                "local_158": "localStatStruct",
                "local_c8": "localVar3",
                "uStack_b0": "stackVar_b0",
                "lStack_98": "stackVar_98"
            },
            "code": "\n\n\nvoid decompileAndImprove_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 param_4,\n                 undefined8 param_5,long temporaryDir,undefined8 param_7)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int intVar4;\n  int intVar5;\n  char **charPtrPtrVar6;\n  void *voidPtrVar7;\n  long longVar8;\n  undefined8 *ptrVar9;\n  int *ptrIntVar10;\n  undefined8 uVar11;\n  undefined8 uVar12;\n  long var1;\n  undefined8 *fileDescriptorPtr;\n  char *pcVar15;\n  char **ppcVar16;\n  char *pcVar17;\n  char *pcVar18;\n  undefined8 *__ptr;\n  char **ppcVar19;\n  code *pcharVar20;\n  long var2;\n  uint uVar22;\n  char *charVar23;\n  stat *statStructVar24;\n  bool boolVar25;\n  byte byteVar26;\n  undefined8 *localVar1;\n  long *localVar2;\n  stat localStatStruct;\n  void *localVar3 [3];\n  uint stackVar_b0;\n  long stackVar_98;\n  \n  byteVar26 = 0;\n  var1 = FUN_00113f50();\n  if (var1 < 1) {\n    if (var1 == 0) {\n      uVar12 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(uVar12,inputFilePath);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  fileDescriptorPtr = (undefined8 *)bfd_openr(inputFilePath,param_5);\n  if ((fileDescriptorPtr == (undefined8 *)0x0) || (intVar5 = bfd_stat(fileDescriptorPtr,param_4), intVar5 != 0)) {\n    FUN_001126c0(inputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)fileDescriptorPtr + 0x44) = *(uint *)((long)fileDescriptorPtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)fileDescriptorPtr + 0x44) = *(uint *)((long)fileDescriptorPtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)fileDescriptorPtr + 0x44) = *(uint *)((long)fileDescriptorPtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)fileDescriptorPtr + 0x44) = *(uint *)((long)fileDescriptorPtr + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)fileDescriptorPtr + 0x44) = *(uint *)((long)fileDescriptorPtr + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)fileDescriptorPtr + 0x44) = *(uint *)((long)fileDescriptorPtr + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(fileDescriptorPtr,2);\n  if (charVar2 != '\\0') {\n    if (temporaryDir == 0) {\n      charVar2 = '\\0';\n      temporaryDir = *(long *)fileDescriptorPtr[1];\n    }\n    if (fileDescriptor < 0) {\n      localVar1 = (undefined8 *)bfd_openw(outputFilePath,temporaryDir);\n    }\n    else {\n      localVar1 = (undefined8 *)bfd_fdopenw(outputFilePath,temporaryDir,fileDescriptor);\n    }\n    if (localVar1 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        uVar12 = *fileDescriptorPtr;\n        uVar11 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(uVar11,uVar12);\n        DAT_00127a30 = 0;\n      }\n      FUN_00114d50(localVar1,fileDescriptorPtr,DAT_001264b4);\n      localVar2 = localVar1 + 0x1f;\n      if ((*(byte *)((long)fileDescriptorPtr + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        uVar12 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,fileDescriptorPtr,0,uVar12);\n        return;\n      }\n      pcVar15 = (char *)FUN_0011a0e0(*localVar1);\n      if (pcVar15 == (char *)0x0) {\n        ptrIntVar10 = __errno_location();\n        pcVar15 = strerror(*ptrIntVar10);\n        uVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(uVar12,pcVar15);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)fileDescriptorPtr + 0x49);\n        uVar22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)fileDescriptorPtr + 0x49);\n        uVar22 = byteVar1 >> 3 & 1;\n      }\n      boolVar25 = _DAT_001264b0 != 0;\n      *(byte *)((long)localVar1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uVar22 << 3) | *(byte *)((long)localVar1 + 0x49) & 0xe7;\n      if (boolVar25) {\n        *(uint *)((long)localVar1 + 0x44) = *(uint *)((long)localVar1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      ppcVar16 = (char **)bfd_openr_next_archived_file(fileDescriptorPtr,0);\n      charVar3 = bfd_set_format(localVar1,*(byte *)(fileDescriptorPtr + 9) & 7);\n      if (charVar3 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(0,localVar1,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (ppcVar16 != (char **)0x0))) {\n        pcVar18 = *ppcVar16;\n        pcVar17 = pcVar18;\n        if (*pcVar18 == '/') {\nLAB_0010527d:\n          uVar12 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(uVar12,pcVar18);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pcVar17 != '\\0') {\n          charVar23 = pcVar17;\n          if ((*pcVar17 == '.') && (charVar23 = pcVar17 + 1, pcVar17[1] == '.')) {\n            charVar23 = pcVar17 + 2;\n            if ((pcVar17[2] == '\\0') || (pcVar17[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*charVar23 != '\\0' && (*charVar23 != '/')); charVar23 = charVar23 + 1) {\n          }\n          pcVar17 = charVar23;\n          if (*charVar23 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        pcVar18 = (char *)concat(pcVar15,&DAT_0011b47d);\n        intVar5 = stat(pcVar18,&localStatStruct);\n        ptrVar9 = __ptr;\n        if (-1 < intVar5) {\n          var1 = FUN_0011a0e0(pcVar18);\n          free(pcVar18);\n          if (var1 == 0) {\n            ptrIntVar10 = __errno_location();\n            pcVar18 = strerror(*ptrIntVar10);\n            uVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(uVar12,pcVar18);\n            goto LAB_00104e93;\n          }\n          ptrVar9 = (undefined8 *)xmalloc(0x18);\n          pcVar18 = *ppcVar16;\n          *ptrVar9 = __ptr;\n          ptrVar9[2] = 0;\n          ptrVar9[1] = var1;\n          pcVar18 = (char *)concat(var1,&DAT_0011b47d,pcVar18);\n        }\n        intVar5 = 0;\n        if (DAT_001279eb != '\\0') {\n          statStructVar24 = &localStatStruct;\n          for (var1 = 0x24; var1 != 0; var1 = var1 + -1) {\n            *(undefined4 *)&statStructVar24->st_dev = 0;\n            statStructVar24 = (stat *)((long)statStructVar24 + (ulong)byteVar26 * -8 + 4);\n          }\n          ppcVar19 = (char **)ppcVar16[0x1d];\n          if ((char **)ppcVar16[0x1d] == (char **)0x0) {\n            ppcVar19 = ppcVar16;\n          }\n          intVar5 = (**(code **)(ppcVar19[1] + 0x1e8))(ppcVar16,&localStatStruct);\n          if (intVar5 != 0) {\n            pcVar17 = *ppcVar16;\n            uVar12 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(uVar12,pcVar17);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = pcVar18;\n        *__ptr = ptrVar9;\n        __ptr[2] = 0;\n        charVar3 = bfd_check_format(ppcVar16,1);\n        if (charVar3 == '\\0') {\n          uVar12 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,ppcVar16,0,uVar12);\n          ppcVar19 = (char **)bfd_openw(pcVar18,temporaryDir);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(pcVar18,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          charPtrPtrVar6 = (char **)ppcVar16[0x1d];\n          if ((char **)ppcVar16[0x1d] == (char **)0x0) {\n            charPtrPtrVar6 = ppcVar16;\n          }\n          intVar4 = (**(code **)(charPtrPtrVar6[1] + 0x1e8))(ppcVar16);\n          var1 = stackVar_98;\n          if (intVar4 == 0) {\n            if (stackVar_98 < 0) {\n              FUN_001125fa(ppcVar16);\n              uVar12 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(uVar12);\n            }\n            else {\n              intVar4 = bfd_seek(ppcVar16,0,0);\n              if (intVar4 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pcVar17 = *ppcVar19;\n                  uVar12 = FUN_001125fa(ppcVar16);\n                  charVar23 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(charVar23,uVar12,pcVar17);\n                }\n                voidPtrVar7 = (void *)xmalloc(0x2000);\n                for (; var1 != 0; var1 = var1 - var2) {\n                  var2 = 0x2000;\n                  if (var1 < 0x2001) {\n                    var2 = var1;\n                  }\n                  longVar8 = bfd_bread(voidPtrVar7,var2,ppcVar16);\n                  charPtrPtrVar6 = ppcVar16;\n                  if ((var2 != longVar8) ||\n                     (longVar8 = bfd_bwrite(voidPtrVar7,var2,ppcVar19), charPtrPtrVar6 = ppcVar19,\n                     var2 != longVar8)) {\n                    FUN_001126c0(0,charPtrPtrVar6,0,0);\n                    free(voidPtrVar7);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,stackVar_b0 | 0x100);\n                free(voidPtrVar7);\n                charVar3 = bfd_close_all_done(ppcVar19);\n                if (charVar3 == '\\0') {\n                  FUN_001126c0(pcVar18,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              uVar12 = FUN_001125fa(ppcVar16);\n              FUN_0011a110(uVar12);\n            }\n          }\n          else {\n            FUN_001126c0(0,ppcVar16,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(ppcVar19);\n          if (charVar3 == '\\0') {\n            FUN_001126c0(pcVar18,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pcVar18);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            ppcVar19 = (char **)bfd_openw(pcVar18,*(undefined8 *)ppcVar16[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(pcVar18,temporaryDir);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          charVar3 = FUNC_00114e50(ppcVar16,ppcVar19,param_7);\n          if (charVar3 == '\\0') {\n            intVar4 = bfd_get_arch(ppcVar16);\n            if (intVar4 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(ppcVar19);\n            if (charVar3 == '\\0') {\n              FUN_001126c0(pcVar18,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(ppcVar19);\n          if (charVar3 == '\\0') {\n            FUN_001126c0(pcVar18,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar5 == 0)) {\n            FUN_0011a350(pcVar18,&localStatStruct);\n          }\n          var1 = bfd_openr(pcVar18,temporaryDir);\n          __ptr[2] = var1;\n          *localVar2 = var1;\n          localVar2 = (long *)(var1 + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(fileDescriptorPtr);\n          bfd_close(ppcVar16);\n          ppcVar16 = ppcVar19;\n        }\n      }\n      *localVar2 = 0;\n      voidPtrVar7 = (void *)xstrdup(*localVar1);\n      if (DAT_00127a40 == 0) {\n        pcharVar20 = bfd_close;\n      }\n      else {\n        pcharVar20 = bfd_close_all_done;\n      }\n      charVar2 = (*pcharVar20)(localVar1);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(voidPtrVar7,0,0,0);\n      }\n      free(voidPtrVar7);\n      voidPtrVar7 = (void *)xstrdup(*fileDescriptorPtr);\n      charVar2 = bfd_close(fileDescriptorPtr);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(voidPtrVar7,0,0,0);\n      }\n      free(voidPtrVar7);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        fileDescriptorPtr = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = fileDescriptorPtr;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    FUN_001126c0(outputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(fileDescriptorPtr,1,localVar3);\n  if (charVar2 == '\\0') {\n    intVar5 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(fileDescriptorPtr,3,&localStatStruct);\n    if (charVar2 == '\\0') {\n      intVar4 = bfd_get_error();\n      if (intVar5 != intVar4) {\n        bfd_set_error(intVar5);\n      }\n      FUN_001126c0(inputFilePath,0,0,0);\n      if (intVar5 == 0xd) {\n        FUN_0011256b(localVar3[0]);\n      }\n      if (intVar4 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      FUN_0011256b(localStatStruct.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar5 == 0xd) {\n      free(localVar3[0]);\n    }\n  }\n  if (temporaryDir == 0) {\n    temporaryDir = *(long *)fileDescriptorPtr[1];\n  }\n  if (fileDescriptor < 0) {\n    var1 = bfd_openw(outputFilePath,temporaryDir);\n  }\n  else {\n    var1 = bfd_fdopenw(outputFilePath,temporaryDir,fileDescriptor);\n  }\n  if (var1 == 0) goto LAB_00105231;\n  FUN_00114d50(var1,fileDescriptorPtr,DAT_001264b4);\n  charVar2 = FUNC_00114e50(fileDescriptorPtr,var1,param_7);\n  if (charVar2 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar2 = bfd_close(var1);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(var1);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(fileDescriptorPtr);\n  if (charVar2 == '\\0') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113f50",
                "strerror",
                "FUN_0011256b",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "bfd_set_format",
                "bfd_get_error",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_openr",
                "FUN_00114d50",
                "bfd_fdopenw",
                "bfd_set_error",
                "bfd_stat",
                "FUN_00119ed0",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_check_format_matches",
                "bfd_openw",
                "FUN_0011a0e0",
                "__errno_location",
                "free",
                "close",
                "bfd_close",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_integer_type_0010b800",
                "param_1": "input",
                "param_2": "size",
                "param_3": "isNegative",
                "plVar1": "ptrCurrentValue",
                "uVar2": "returnValue",
                "sVar3": "stringLength",
                "lVar4": "currentValue",
                "lVar5": "bitMask",
                "local_8c": "outputString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processIntegerType_0010b800(long input,int size,char isNegative)\n\n{\n  long *ptrCurrentValue;\n  undefined8 returnValue;\n  size_t stringLength;\n  long currentValue;\n  long bitMask;\n  undefined2 outputString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    currentValue = input + 0xb8;\n    if (isNegative != '\\0') {\n      currentValue = input + 0x78;\n    }\n    ptrCurrentValue = (long *)(currentValue + (ulong)(size - 1U) * 8);\n    currentValue = *ptrCurrentValue;\n    if (currentValue != 0) {\n      returnValue = FUN_00109cf4(input,currentValue,size);\n      return returnValue;\n    }\n    currentValue = *(long *)(input + 0x68);\n    *(long *)(input + 0x68) = currentValue + 1;\n    *ptrCurrentValue = currentValue;\n    sprintf((char *)&outputString,\"%ld=r%ld;\",currentValue,currentValue);\n    if (isNegative == '\\0') {\n      bitMask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&outputString);\n      sprintf((char *)((long)&outputString + stringLength),\"%ld;%ld;\",-bitMask,bitMask + -1);\n    }\n    else {\n      stringLength = strlen((char *)&outputString);\n      *(undefined2 *)((long)&outputString + stringLength) = 0x3b30;\n      *(undefined *)((long)&outputString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&outputString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&outputString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = FUN_00109b52(input,&outputString,currentValue,1,size);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(returnValue,size);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_integer_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "input_ptr",
                "param_2": "character",
                "param_3": "flag",
                "param_4": "data_ptr",
                "param_5": "size_ptr",
                "uVar1": "current_size",
                "uVar2": "new_size",
                "cVar3": "result",
                "pcVar4": "string_ptr",
                "sVar5": "string_length",
                "__s": "formatted_string",
                "lVar6": "counter",
                "__ptr": "temp_ptr",
                "uVar7": "return_value",
                "uVar8": "is_free",
                "lVar9": "loop_counter",
                "uVar10": "requested_size",
                "puVar11": "ptr",
                "bVar12": "is_negative"
            },
            "code": "\nundefined8 processData_00109ed3(long input_ptr,uint character,undefined4 flag,long *data_ptr,ulong *size_ptr)\n\n{\n  ulong current_size;\n  ulong new_size;\n  char result;\n  char *string_ptr;\n  size_t string_length;\n  char *formatted_string;\n  long counter;\n  void *temp_ptr;\n  undefined8 return_value;\n  undefined is_free;\n  long loop_counter;\n  ulong requested_size;\n  undefined *ptr;\n  byte is_negative;\n  \n  is_negative = 0;\n  counter = *(long *)(input_ptr + 0x60);\n  if (counter != 0) {\n    current_size = *(ulong *)(counter + 0x10);\n    if (((long)current_size < 1) || (data_ptr == (long *)0x0)) {\n      is_free = *(undefined *)(counter + 0x1c);\n      string_ptr = (char *)FUN_00109b2f(input_ptr);\n      string_length = strlen(string_ptr);\n      formatted_string = (char *)xmalloc(string_length + 2);\n      sprintf(formatted_string,\"%c%s\",(ulong)character,string_ptr);\n      free(string_ptr);\n      counter = 0;\n    }\n    else {\n      requested_size = *size_ptr;\n      if (requested_size <= current_size) {\n        if (requested_size == 0) {\n          requested_size = 10;\n        }\n        for (; requested_size <= current_size; requested_size = requested_size * 2) {\n        }\n        counter = xrealloc(*data_ptr,requested_size * 8);\n        new_size = *size_ptr;\n        *data_ptr = counter;\n        ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (requested_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)is_negative * -2 + 1;\n        }\n        *size_ptr = requested_size;\n      }\n      counter = *(long *)(*data_ptr + current_size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input_ptr + 0x60) + 0x1c) == '\\0')) {\n        temp_ptr = (void *)FUN_00109b2f(input_ptr);\n        free(temp_ptr);\n        return_value = FUN_00109cf4(input_ptr,counter,flag);\n        return return_value;\n      }\n      counter = *(long *)(input_ptr + 0x68);\n      *(long *)(input_ptr + 0x68) = counter + 1;\n      string_ptr = (char *)FUN_00109b2f(input_ptr);\n      string_length = strlen(string_ptr);\n      formatted_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(formatted_string,\"%ld=%c%s\",counter,(ulong)character,string_ptr);\n      free(string_ptr);\n      is_free = 1;\n      *(long *)(*data_ptr + current_size * 8) = counter;\n    }\n    result = FUN_00109b52(input_ptr,formatted_string,counter,is_free,flag);\n    if (result != '\\0') {\n      free(formatted_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "xrealloc",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_0010a0a0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010c7a0",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_00109022",
                "FUN_00114190",
                "FUN_0010e453",
                "FUN_0010c218",
                "FUN_00116110",
                "FUN_0010bbd3",
                "FUN_0010ebb0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_00113c43",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_00113e23",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00109b52",
                "FUN_00114cf0",
                "FUN_00112925",
                "FUN_00107880",
                "FUN_0011a480",
                "FUN_0010afd5",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00113ce0",
                "FUN_0010e07c",
                "FUN_00114d60",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00104ea2",
                "FUN_00114c80",
                "FUN_0010b6ea",
                "FUN_0010bf86",
                "FUN_0010a424",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00112904",
                "FUN_0010a0e9",
                "FUN_0010da0b",
                "FUN_0010a377",
                "FUN_0010bc80",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_00113b98",
                "FUN_00109a0b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr",
                "puVar2": "unitPtr",
                "puVar3": "newUnitPtr",
                "lVar4": "loopCounter",
                "puVar5": "unitPtr2",
                "pcVar6": "filenamePtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr;\n  undefined4 *unitPtr;\n  undefined4 *newUnitPtr;\n  long loopCounter;\n  undefined4 *unitPtr2;\n  char *filenamePtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  unitPtr = (undefined4 *)xmalloc(0x18);\n  unitPtr2 = unitPtr;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *unitPtr2 = 0;\n    unitPtr2 = unitPtr2 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(unitPtr + 2) = filenamePtr;\n  newUnitPtr = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)unitPtr;\n  unitPtr2 = newUnitPtr;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *unitPtr2 = 0;\n    unitPtr2 = unitPtr2 + (ulong)byteVar * -2 + 1;\n  }\n  ptr = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(newUnitPtr + 2) = unitPtr;\n  if (ptr == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)newUnitPtr;\n  }\n  else {\n    *ptr = newUnitPtr;\n  }\n  debugInfo[1] = (long)newUnitPtr;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUN_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUN_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUN_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_element_00115d00",
                "param_1": "data_array",
                "param_2": "context",
                "uVar1": "element_count",
                "lVar2": "result"
            },
            "code": "\nlong find_element_00115d00(long data_array,long context)\n\n{\n  uint element_count;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n      if (*(int *)(data_array + 0x28) == *(int *)(*(long *)(context + 0x110) + 0xd40)) {\n        element_count = *(uint *)(data_array + 0x2c);\n        if (element_count == 0) {\n          result = 0;\n        }\n        else if ((ulong)element_count <\n                 *(ulong *)(*(long *)(context + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(context + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(element_count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "find_element_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_data_00113c43",
                "param_1": "data_size",
                "param_2": "param_value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "allocated_memory",
                "plVar2": "data_ptr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_data_00113c43(long data_size,long param_value,long param3,long param4,undefined param5,\n            undefined8 param6)\n\n{\n  long allocated_memory;\n  long *data_ptr;\n  undefined result [16];\n  \n  if ((data_size != 0) && (param_value != 0)) {\n    allocated_memory = FUN_00112904(0x10,0);\n    if (allocated_memory != 0) {\n      data_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)data_ptr + 0x21) = 0;\n      *data_ptr = data_size;\n      *(undefined4 *)((long)data_ptr + 0x24) = 0;\n      data_ptr[1] = param_value;\n      data_ptr[2] = param3;\n      data_ptr[3] = param4;\n      *(undefined *)(data_ptr + 4) = param5;\n      *(long **)(allocated_memory + 0x10) = data_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  allocated_memory = 0;\nLAB_00113caa:\n  result._8_8_ = param6;\n  result._0_8_ = allocated_memory;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "execute_operation_00112a33",
                "param_1": "result",
                "param_2": "inputData",
                "param_3": "outputData",
                "param_4": "operationCode",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "returnValue",
                "lVar2": "tempValue",
                "plVar3": "resultPointer"
            },
            "code": "\nbool executeOperation_00112a33(undefined8 result,long inputData,undefined8 outputData,byte operationCode,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined returnValue;\n  long tempValue;\n  long *resultPointer;\n  \n  if (operationCode < 0x12) {\n    if (operationCode != 0) {\n      switch(operationCode) {\n      case 1:\n        returnValue = FUN_0010c05d(param5,*(undefined8 *)(inputData + 8),param6,4,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        returnValue = FUN_0010c05d(param5,*(undefined8 *)(inputData + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 4:\n        returnValue = FUN_0010c05d(param5,*(undefined8 *)(inputData + 8),param6,5,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 9:\n        returnValue = FUN_0010bd62(param5,*(undefined8 *)(inputData + 8),param6,1,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tempValue = FUN_0010c6be(param5,*(undefined8 *)(inputData + 8));\n        if (tempValue == 0) {\n          return false;\n        }\n        resultPointer = (long *)FUN_0010da0b(result,outputData);\n        *resultPointer = tempValue;\n        break;\n      case 0xd:\n        tempValue = FUN_0010c218(param5,*(undefined8 *)(inputData + 8));\n        return tempValue != 0;\n      case 0x11:\n        returnValue = FUN_0010bd62(param5,*(undefined8 *)(inputData + 8),param6,2,\n                             *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30)\n                            );\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (operationCode == 0x7f) {\nswitchD_00112a73_caseD_2:\n    returnValue = FUN_0010c05d(param5,*(undefined8 *)(inputData + 8),param6,1,\n                         *(long *)(inputData + 0x10) + *(long *)(*(long *)(inputData + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_0010c6be",
                "FUN_0010bd62"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "execute_operation_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_information_0010c2d2",
                "param_1": "output",
                "param_2": "baseAddress",
                "param_3": "typeIdentifier",
                "uVar1": "typeValue",
                "pcVar2": "typeName",
                "uVar3": "typeInfo",
                "lVar4": "result",
                "plVar5": "pointerToType",
                "uVar6": "negTypeValue"
            },
            "code": "\n\n\nlong getTypeInformation_0010c2d2(undefined8 output,long baseAddress,int *typeIdentifier)\n\n{\n  uint typeValue;\n  char *typeName;\n  undefined8 typeInfo;\n  long result;\n  long *pointerToType;\n  uint negTypeValue;\n  \n  if ((*typeIdentifier == 0) && (typeValue = typeIdentifier[1], (int)typeValue < 0)) {\n    negTypeValue = ~typeValue;\n    if (negTypeValue < 0x22) {\n      result = *(long *)(baseAddress + 0x90 + (ulong)negTypeValue * 8);\n      if (result == 0) {\n        switch(negTypeValue) {\n        case 1:\n          typeInfo = FUN_00113dfe(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          typeInfo = FUN_00113dfe(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          typeInfo = FUN_00113dfe(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          typeInfo = FUN_00113dfe(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          typeInfo = FUN_00113dfe(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          typeInfo = FUN_00113dfe(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          typeInfo = FUN_00113dfe(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          typeInfo = FUN_00113dfe(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          typeInfo = FUN_00113e17();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          typeInfo = FUN_00113df2(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          typeInfo = FUN_00113df2(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          typeInfo = FUN_00113df2(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          typeInfo = FUN_00112904(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          typeInfo = FUN_00113df2(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          typeInfo = FUN_00113df2(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          typeInfo = 0;\n          break;\n        case 0x13:\n          typeInfo = FUN_00113dfe(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          typeInfo = FUN_00112904(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          typeInfo = FUN_00112904(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          typeInfo = FUN_00112904(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          typeInfo = FUN_00112904(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          typeInfo = FUN_00112904(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          typeInfo = FUN_00112904(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          typeInfo = FUN_00113dfe(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          typeInfo = FUN_00113dfe(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          typeInfo = FUN_00113dfe(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          typeInfo = FUN_00113dfe(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          typeInfo = FUN_00113dfe(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          typeInfo = FUN_00112904(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          typeInfo = FUN_00113dfe(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          typeInfo = FUN_00113dfe(4,0);\n          typeName = \"int\";\n        }\n        result = FUN_0010c218(output,typeName,typeInfo);\n        *(long *)(baseAddress + 0x90 + (ulong)negTypeValue * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeName,(ulong)typeValue);\n  }\n  else {\n    pointerToType = (long *)FUN_00109022(baseAddress);\n    if (pointerToType != (long *)0x0) {\n      if (*pointerToType == 0) {\n        result = FUN_00113e23(pointerToType,0);\n        return result;\n      }\n      return *pointerToType;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113df2",
                "FUN_00109022",
                "fprintf",
                "FUN_0010c218",
                "FUN_00112904",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_type_information_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "reconstruct_binary_data_0010e07c",
                "param_1": "binary_file",
                "param_2": "symbol_table",
                "param_3": "section_header_table",
                "param_4": "section_count",
                "param_5": "coff_header",
                "param_6": "error_message",
                "lVar1": "current_symbol_address",
                "lVar2": "current_symbol_entry",
                "lVar3": "current_section",
                "cVar4": "result_code",
                "uVar5": "bfd_error_code",
                "__ptr": "reconstructed_data",
                "uVar6": "symbol_value",
                "uVar7": "section_value",
                "puVar8": "data_entry",
                "pcVar9": "error_format_string",
                "puVar10": "auxiliary_info",
                "uVar11": "auxiliary_value",
                "lVar12": "data_entry_index",
                "iVar13": "auxiliary_info_type",
                "iVar14": "data_entry_capacity",
                "local_a8": "symbol_value_low",
                "uStack_a4": "symbol_value_high",
                "uStack_a0": "section_value_low",
                "uStack_9c": "section_value_high",
                "local_88": "symbol_name",
                "local_6a": "section_type",
                "local_68": "auxiliary_info_tag",
                "local_67": "symbol_size",
                "local_60": "auxiliary_info_data",
                "local_56": "section_value_low"
            },
            "code": "\nundefined8\nreconstruct_binary_data_0010e07c(undefined8 binary_file,long *symbol_table,undefined8 section_header_table,int section_count,long coff_header,\n            undefined8 error_message)\n\n{\n  long current_symbol_address;\n  long current_symbol_entry;\n  long current_section;\n  char result_code;\n  undefined4 bfd_error_code;\n  void *reconstructed_data;\n  undefined8 symbol_value;\n  undefined8 section_value;\n  undefined4 *data_entry;\n  char *error_format_string;\n  undefined *auxiliary_info;\n  uint auxiliary_value;\n  long data_entry_index;\n  int auxiliary_info_type;\n  int data_entry_capacity;\n  undefined4 symbol_value_low;\n  undefined4 symbol_value_high;\n  undefined4 section_value_low;\n  undefined4 section_value_high;\n  undefined symbol_name [30];\n  undefined2 section_type;\n  byte auxiliary_info_tag;\n  byte symbol_size;\n  undefined auxiliary_info_data [10];\n  ushort section_value_low;\n  \n  data_entry_capacity = 10;\n  data_entry_index = 0;\n  current_symbol_address = *(long *)(coff_header + 0x18);\n  reconstructed_data = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < current_symbol_address && (symbol_table[2] < symbol_table[1]))) {\n    current_symbol_entry = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result_code = bfd_coff_get_syment(binary_file,current_symbol_entry,symbol_name);\n    if (result_code == '\\0') {\n      bfd_error_code = bfd_get_error();\n      symbol_value = bfd_errmsg(bfd_error_code);\n      error_format_string = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      section_value = dcgettext(0,error_format_string,5);\n      FUN_00119ed0(section_value,symbol_value);\n      free(reconstructed_data);\n      return 0;\n    }\n    current_section = symbol_table[3];\n    auxiliary_info = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = current_section + 1 + (ulong)symbol_size;\n    if (symbol_size != 0) {\n      auxiliary_info = auxiliary_info_data;\n      result_code = bfd_coff_get_auxent(binary_file,current_symbol_entry,0,auxiliary_info);\n      if (result_code == '\\0') {\n        bfd_error_code = bfd_get_error();\n        symbol_value = bfd_errmsg(bfd_error_code);\n        error_format_string = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (auxiliary_info_tag == 0x12) {\n      auxiliary_value = (uint)section_value_low;\n      auxiliary_info_type = (int)*(undefined8 *)(current_symbol_entry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(current_symbol_entry + 0x20) + 0x30);\n    }\n    else {\n      if (auxiliary_info_tag < 0x13) {\n        if ((auxiliary_info_tag == 8) || (auxiliary_info_tag == 0xb)) {\n          auxiliary_value = 0;\n          auxiliary_info_type = ((int)*(undefined8 *)(current_symbol_entry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(current_symbol_entry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (auxiliary_info_tag == 0x66) break;\n      auxiliary_value = 0;\n      auxiliary_info_type = 0;\n    }\nLAB_0010e214:\n    section_value = FUN_0010dac0(binary_file,symbol_table,section_header_table,current_section,section_type,auxiliary_info,1);\n    symbol_value = *(undefined8 *)(current_symbol_entry + 8);\n    data_entry = (undefined4 *)xmalloc(0x20);\n    symbol_value_low = (undefined4)symbol_value;\n    symbol_value_high = (undefined4)((ulong)symbol_value >> 0x20);\n    section_value_low = (undefined4)section_value;\n    section_value_high = (undefined4)((ulong)section_value >> 0x20);\n    *(undefined8 *)(data_entry + 5) = 0;\n    data_entry[6] = auxiliary_info_type;\n    data_entry[7] = auxiliary_value;\n    data_entry[4] = 0;\n    *data_entry = symbol_value_low;\n    data_entry[1] = symbol_value_high;\n    data_entry[2] = section_value_low;\n    data_entry[3] = section_value_high;\n    if (data_entry_capacity <= (int)data_entry_index + 1) {\n      data_entry_capacity = data_entry_capacity + 10;\n      reconstructed_data = (void *)xrealloc(reconstructed_data,(long)data_entry_capacity << 3,data_entry,0,error_message);\n    }\n    *(undefined4 **)((long)reconstructed_data + data_entry_index * 8) = data_entry;\n    data_entry_index = data_entry_index + 1;\n  }\n  *(undefined8 *)((long)reconstructed_data + (long)(int)data_entry_index * 8) = 0;\n  symbol_value = FUN_00113da9(section_count == 8,*(undefined2 *)(coff_header + 10),reconstructed_data);\n  return symbol_value;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_coff_get_auxent",
                "FUN_00113da9",
                "xmalloc",
                "bfd_get_error",
                "free",
                "FUN_00119ed0",
                "xrealloc",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "reconstruct_binary_data_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_001082c3"
            },
            "code": "\nundefined8 initialize_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_file_data_00114460",
                "param_1": "filename",
                "param_2": "lookupTable",
                "param_3": "dataPtr",
                "iVar1": "lineIndex",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorString",
                "uVar4": "localizedString",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "tempPtr1",
                "bVar8": "byteValue",
                "pbVar9": "tempPtr2",
                "pbVar10": "currentPtr1",
                "pbVar11": "currentPtr2",
                "pbVar12": "lineStartPtr"
            },
            "code": "\nvoid readFileData_00114460(char *filename,undefined8 lookupTable,byte **dataPtr)\n\n{\n  int lineIndex;\n  int *errorNumberPtr;\n  char *errorString;\n  undefined8 localizedString;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *file;\n  size_t bytesRead;\n  byte **hashTableSlot;\n  byte *tempPtr1;\n  byte byteValue;\n  byte *tempPtr2;\n  byte *currentPtr1;\n  byte *currentPtr2;\n  byte *lineStartPtr;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      errorNumberPtr = __errno_location();\n      errorString = strerror(*errorNumberPtr);\n      localizedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(localizedString,filename,errorString);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,file);\n    if ((bytesRead == 0) || (lineIndex = ferror(file), lineIndex != 0)) {\n      localizedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(localizedString,filename);\n    }\n    lineIndex = 1;\n    fclose(file);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    byteValue = *fileBuffer;\n    lineStartPtr = fileBuffer;\n    while (currentPtr1 = lineStartPtr, byteValue != 0) {\n      for (; byteValue = *currentPtr1, currentPtr2 = currentPtr1, byteValue != 10; currentPtr1 = currentPtr1 + 1) {\n        if ((char)byteValue < '\\v') {\n          if (byteValue == 0) {\n            tempPtr2 = currentPtr1 + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (byteValue == 0xd) {\n            *currentPtr1 = 0;\n            tempPtr2 = currentPtr1 + 1;\n            if (currentPtr1[1] == 10) {\n              tempPtr2 = currentPtr1 + 2;\n              currentPtr2 = currentPtr1 + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (byteValue == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr1 = 0;\n      if (currentPtr1[1] == 0xd) {\n        currentPtr2 = currentPtr1 + 1;\n        tempPtr2 = currentPtr1 + 2;\n      }\n      else {\n        tempPtr2 = currentPtr1 + 1;\n      }\nLAB_00114553:\n      byteValue = *lineStartPtr;\n      while ((byteValue == 0x20 || (currentPtr1 = lineStartPtr, byteValue == 9))) {\n        currentPtr1 = lineStartPtr + 1;\n        lineStartPtr = lineStartPtr + 1;\n        byteValue = *currentPtr1;\n      }\n      do {\n        if ((byteValue == 10) || (byteValue == 0xd)) goto LAB_00114676;\n        if (byteValue == 0) goto LAB_00114599;\n        byteValue = currentPtr1[1];\n        currentPtr1 = currentPtr1 + 1;\n      } while ((byteValue != 0x20) && (byteValue != 9));\n      if ((char)byteValue < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (byteValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        byteValue = currentPtr1[1];\n        if ((((((byteValue == 9) || (byteValue == 0x20)) &&\n              ((byteValue = currentPtr1[2], byteValue == 9 || (byteValue == 0x20)))) &&\n             ((byteValue = currentPtr1[3], byteValue == 9 || (byteValue == 0x20)))) &&\n            ((byteValue = currentPtr1[4], byteValue == 9 || (byteValue == 0x20)))) &&\n           ((byteValue = currentPtr1[5], byteValue == 9 || (byteValue == 0x20)))) {\n          byteValue = currentPtr1[6];\n          tempPtr1 = currentPtr1 + 6;\n          if ((byteValue == 9) || (byteValue == 0x20)) {\n            do {\n              do {\n                byteValue = tempPtr1[1];\n                tempPtr1 = tempPtr1 + 1;\n              } while (byteValue == 0x20);\n            } while (byteValue == 9);\n          }\n        }\n        if ((0xd < byteValue) || ((-0x2402L >> (byteValue & 0x3f) & 1U) != 0)) {\n          localizedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(localizedString,filename,lineIndex);\n        }\n      }\nLAB_00114599:\n      *currentPtr1 = 0;\n      if (lineStartPtr < currentPtr1) {\n        hashTableSlot = (byte **)htab_find_slot(lookupTable,lineStartPtr,1);\n        *hashTableSlot = lineStartPtr;\n      }\n      lineIndex = lineIndex + 1;\n      lineStartPtr = tempPtr2;\n      byteValue = currentPtr2[1];\n    }\n    *dataPtr = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "FUN_00113f50",
                "FUN_00119dd0",
                "fclose",
                "strerror",
                "ferror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_data_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "construct_query_string_0010a94e",
                "param_1": "param1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "cVar1": "flag",
                "lVar2": "length",
                "__s": "string",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "result",
                "uVar8": "returnValue",
                "pcVar9": "flagStr"
            },
            "code": "\nundefined8 constructQueryString_0010a94e(long param1,char *parameter2,char *parameter3,int parameter4)\n\n{\n  char flag;\n  long length;\n  char *string;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *result;\n  undefined8 returnValue;\n  char *flagStr;\n  \n  flag = *(char *)(*(long *)(param1 + 0x60) + 0x1c);\n  string = (char *)FUN_00109b2f();\n  result = *(char **)(*(long *)(param1 + 0x60) + 0x20);\n  if (result == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    len1 = strlen(result);\n    len2 = strlen(parameter2);\n    len3 = strlen(string);\n    len4 = strlen(parameter3);\n    result = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (parameter4 == 1) {\n      flagStr = \"/1\";\n    }\n    else {\n      flagStr = \"/0\";\n      if ((parameter4 != 2) && (flagStr = \"\", parameter4 != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(result,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(param1 + 0x60) + 0x20),parameter2,flagStr,\n            string,parameter3,*(long *)(param1 + 0x60));\n    free(*(void **)(*(long *)(param1 + 0x60) + 0x20));\n    length = *(long *)(param1 + 0x60);\n    *(char **)(length + 0x20) = result;\n    if (flag != '\\0') {\n      *(undefined *)(length + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)length >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_query_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_parameter_value_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "result_or_zero",
                "auVar1": "result_value",
                "piVar2": "ptr_to_int",
                "uVar3": "extracted_value",
                "auVar4": "transformed_result"
            },
            "code": "\nundefined  [16] extract_parameter_value_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 result_or_zero)\n\n{\n  undefined result_value [16];\n  int *ptr_to_int;\n  undefined8 extracted_value;\n  undefined transformed_result [16];\n  \n  if (input_param != 0) {\n    ptr_to_int = (int *)FUN_00112b6e(input_param,0);\n    if ((ptr_to_int == (int *)0x0) || (3 < *ptr_to_int - 7U)) {\n      extracted_value = 0;\n    }\n    else {\n      extracted_value = **(undefined8 **)(ptr_to_int + 4);\n    }\n    transformed_result._8_8_ = result_or_zero;\n    transformed_result._0_8_ = extracted_value;\n    return transformed_result;\n  }\n  result_value._8_8_ = 0;\n  result_value._0_8_ = default_value;\n  return result_value << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_parameter_value_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "execute_command_0010a0e9",
                "param_1": "commandHandler",
                "param_2": "paramA",
                "param_3": "paramB",
                "uVar1": "commandType",
                "uVar2": "result",
                "__s": "commandString",
                "sVar3": "stringLength",
                "__s_00": "formattedString"
            },
            "code": "\nundefined4 executeCommand_0010a0e9(long commandHandler,undefined8 paramA,undefined8 paramB)\n\n{\n  undefined commandType;\n  undefined4 result;\n  char *commandString;\n  size_t stringLength;\n  char *formattedString;\n  \n  commandType = *(undefined *)(*(long *)(commandHandler + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(commandHandler + 0x60) + 0x18);\n  commandString = (char *)FUN_00109b2f();\n  stringLength = strlen(commandString);\n  formattedString = (char *)xmalloc(stringLength + 100);\n  sprintf(formattedString,\"r%s;%ld;%ld;\",commandString,paramA,paramB);\n  free(commandString);\n  result = FUN_00109b52(commandHandler,formattedString,0,commandType,result);\n  if ((char)result != '\\0') {\n    free(formattedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_command_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "dataPointer",
                "cVar1": "result",
                "pcVar2": "charPointer"
            },
            "code": "\nvoid initializeData_00114c20(long dataPointer)\n\n{\n  char result;\n  char *charPointer;\n  \n  FUN_00114190(dataPointer,1,1);\n  result = FUN_00113fb0(dataPointer,&DAT_0011b499);\n  if (result != '\\0') {\n    charPointer = (char *)(dataPointer + 5);\n    if (*(char *)(dataPointer + 4) != 'a') {\n      charPointer = (char *)(dataPointer + 4);\n    }\n    if (*charPointer != '\\0') {\n      FUN_00114190(charPointer,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_duplicate_string_00115f50",
                "param_1": "input_value",
                "param_2": "string_array",
                "param_3": "check_flag",
                "__s1": "current_string",
                "uVar1": "string_comparison_result",
                "uVar2": "temp_result",
                "extraout_EDX": "extra_result",
                "plVar3": "pointer_array",
                "auVar4": "result_array"
            },
            "code": "\nuint checkDuplicateString_00115f50(long input_value,char **string_array,char check_flag)\n\n{\n  char *current_string;\n  uint string_comparison_result;\n  undefined4 temp_result;\n  undefined4 extra_result;\n  long *pointer_array;\n  undefined result_array [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  result_array = FUN_001159d0(string_array);\n  if (result_array[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      current_string = *string_array;\n      pointer_array = DAT_001279d8;\n      do {\n        string_comparison_result = strcmp(current_string,(char *)pointer_array[1]);\n        result_array._4_4_ = 0;\n        result_array._0_4_ = string_comparison_result;\n        result_array._8_4_ = extra_result;\n        if (string_comparison_result == 0) {\n          return 1;\n        }\n        pointer_array = (long *)*pointer_array;\n      } while (pointer_array != (long *)0x0);\n    }\n    temp_result = result_array._8_4_;\n    if (((((check_flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (result_array._8_4_ = temp_result, result_array._0_8_ = *(long *)(input_value + 8),\n         *(int *)(*(long *)(input_value + 8) + 8) != 5)) ||\n        ((result_array._0_8_ = (ulong)string_array[0x1a], *(int *)(string_array[0x1a] + 4) != 7 ||\n         (result_array = FUN_00113fb0(*string_array,\".gnu.build.attributes\"), result_array[0] == '\\0')))) &&\n       ((*(byte *)((long)string_array + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(result_array._1_7_,string_array[8] == (char *)0x0) |\n             CONCAT31(result_array._9_3_,string_array[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_duplicate_string_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_in_section_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytesInSection_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_in_section_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "data",
                "param_2": "size",
                "lVar1": "tempVar1",
                "cVar2": "result",
                "__ptr": "ptr",
                "uVar3": "unsignedSize",
                "uVar4": "modifiedSize",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processData_0010b948(long data,uint size)\n\n{\n  long tempVar1;\n  char result;\n  void *ptr;\n  ulong unsignedSize;\n  uint modifiedSize;\n  char formattedString [50];\n  \n  modifiedSize = size - 1;\n  unsignedSize = (ulong)size;\n  if ((modifiedSize < 0x10) && (tempVar1 = *(long *)(data + 0xf8 + (ulong)modifiedSize * 8), tempVar1 != 0)) {\n    FUN_00109cf4(data,tempVar1,unsignedSize);\n    return;\n  }\n  result = FUN_0010b800(data,4,0);\n  if (result != '\\0') {\n    ptr = (void *)FUN_00109b2f(data);\n    tempVar1 = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = tempVar1 + 1;\n    if (modifiedSize < 0x10) {\n      *(long *)(data + 0xf8 + (ulong)modifiedSize * 8) = tempVar1;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",tempVar1,ptr,unsignedSize);\n    free(ptr);\n    FUN_00109b52(data,formattedString,tempVar1,1,unsignedSize);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010827b",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00113f50",
                "FUN_00109a32",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_001053b5",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010551d",
                "FUN_00108fb9",
                "FUN_00114460",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00114190",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_00116490",
                "FUN_00119f70",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00115b70",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_0010543c",
                "FUN_0010be1a",
                "FUN_00107880",
                "FUN_00108808",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_00114690",
                "FUN_00112c1f",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_001086af",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00119970",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_00104920",
                "FUN_0010911f",
                "FUN_00108916",
                "FUN_001083de",
                "FUN_0010808f",
                "FUN_0010ee3f",
                "FUN_0010871c",
                "FUN_00104966",
                "FUN_00114dc7",
                "FUN_00104ea2",
                "FUN_00112996",
                "FUN_0010882c",
                "FUN_0010b6ea",
                "FUN_00107976",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_0010b800",
                "FUN_00108b3e",
                "FUN_00108200",
                "FUN_0010da0b",
                "FUN_0010bc80",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "reverse_and_improve_00112b6e",
                "param_1": "inputArray",
                "param_2": "debugInfo",
                "iVar1": "arraySize",
                "__format": "formatString",
                "piVar3": "resultArray",
                "plVar4": "ptrToDebugInfo",
                "bVar5": "isCircular",
                "local_18": "localDebugInfo",
                "local_10": "localArray"
            },
            "code": "\n\n\nint * reverseAndImprove_00112b6e(int *inputArray,long *debugInfo)\n\n{\n  int arraySize;\n  undefined8 uVar2;\n  char *formatString;\n  int *resultArray;\n  long *ptrToDebugInfo;\n  bool isCircular;\n  long *localDebugInfo;\n  int *localArray;\n  \n  arraySize = *inputArray;\n  if ((arraySize != 1) && (1 < arraySize - 0x16U)) {\n    return inputArray;\n  }\n  ptrToDebugInfo = debugInfo;\n  while (ptrToDebugInfo != (long *)0x0) {\n    if ((inputArray == (int *)ptrToDebugInfo[1]) ||\n       (isCircular = ptrToDebugInfo == (long *)*ptrToDebugInfo, ptrToDebugInfo = (long *)*ptrToDebugInfo, isCircular)) {\n      uVar2 = FUN_001129f4(inputArray,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(_stderr,formatString,uVar2);\n      return (int *)0x0;\n    }\n  }\n  localDebugInfo = debugInfo;\n  localArray = inputArray;\n  if (arraySize - 0x16U < 2) {\n    resultArray = (int *)reverseAndImprove_00112b6e((*(undefined8 **)(inputArray + 4))[1],&localDebugInfo);\n    return resultArray;\n  }\n  resultArray = *(int **)**(undefined8 **)(inputArray + 4);\n  if (inputArray == resultArray) {\n    return inputArray;\n  }\n  if (resultArray == (int *)0x0) {\n    return inputArray;\n  }\n  resultArray = (int *)reverseAndImprove_00112b6e(resultArray,&localDebugInfo);\n  return resultArray;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "modify_string_and_return_0010a83e",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "param_7": "inputParam7",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "stringLength",
                "cVar3": "charValue",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4\nmodifyStringAndReturn_0010a83e(long inputParam1,undefined8 inputParam2,ulong inputParam3,undefined inputParam4,ulong inputParam5,\n            byte inputParam6,byte inputParam7)\n\n{\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t stringLength;\n  char charValue;\n  \n  if (((inputParam7 ^ 1) & inputParam6) == 0) {\n    string1 = (char *)0x0;\n    charValue = '\\0';\n  }\n  else {\n    charValue = *(char *)(*(long *)(inputParam1 + 0x60) + 0x1c);\n    string1 = (char *)FUN_00109b2f();\n    inputParam5 = inputParam5 & 0xffffffff;\n    inputParam3 = inputParam3 & 0xffffffff;\n  }\n  returnValue = FUN_0010a69a(inputParam1,inputParam2,inputParam3,inputParam4,inputParam5);\n  if ((char)returnValue != '\\0') {\n    if (inputParam6 == 0) {\n      return returnValue;\n    }\n    if (inputParam7 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      stringLength = strlen(string1);\n      string2 = (char *)xmalloc(stringLength + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (charValue != '\\0') {\n        *(undefined *)(*(long *)(inputParam1 + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(inputParam1 + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(inputParam1 + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(inputParam1 + 0x60) + 0x38) = string2;\n    return returnValue;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "modify_string_and_return_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_data_00113d6e",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "result",
                "puVar2": "allocated_memory_ptr"
            },
            "code": "\nlong allocate_and_store_data_00113d6e(undefined8 input_value_1,undefined8 input_value_2)\n\n{\n  long result;\n  undefined8 *allocated_memory_ptr;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    allocated_memory_ptr = (undefined8 *)xmalloc(0x10);\n    *allocated_memory_ptr = input_value_1;\n    allocated_memory_ptr[1] = input_value_2;\n    *(undefined8 **)(result + 0x10) = allocated_memory_ptr;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_store_data_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_0010abdd",
                "FUN_00108863",
                "FUN_0011256b",
                "FUN_0010e6a8",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_001088ae",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_00116110",
                "FUN_0010ebb0",
                "FUN_0010c1c6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_00114690",
                "FUN_00114b84",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_0011173a",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_00109b2f",
                "FUN_0010b6ea",
                "FUN_0010a424",
                "FUN_0010a0e9",
                "FUN_001081e9",
                "FUN_0010a377"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_reverse_function_00114d50",
                "param_1": "inputPointer",
                "param_2": "secondInputPointer",
                "param_3": "flag"
            },
            "code": "\nvoid executeReverseFunction_00114d50(long inputPointer,long secondInputPointer,uint flag)\n\n{\n  if (*(int *)(*(long *)(inputPointer + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(secondInputPointer + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(secondInputPointer + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(inputPointer + 8) + 0x380) + 0x78))(inputPointer,flag != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_reverse_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0011283f",
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "versionString",
                "pcVar2": "text"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 versionString;\n  char *text;\n  \n  versionString = DAT_00127600;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,text,versionString);\n  text = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,text);\n  FUN_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_001126c0",
                "param_1": "errorType",
                "param_2": "errorCause",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessageCopy",
                "param_10": "errorFlag",
                "param_11": "errorArray",
                "param_12": "formatString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "local_100": "bufferSize",
                "local_fc": "formatSize",
                "local_f8": "localPointer1",
                "local_f0": "localPointer2",
                "local_e8": "localArray",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "localParam1",
                "local_a8": "localParam2",
                "local_98": "localParam3",
                "local_88": "localParam4",
                "local_78": "localParam5",
                "local_68": "localParam6",
                "local_58": "localParam7",
                "local_48": "localParam8",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream"
            },
            "code": "\n\n\nvoid printError_001126c0(undefined4 errorType,undefined4 errorCause,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long errorMessageCopy,long errorFlag,long *errorArray,char *formatString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char condition;\n  int error;\n  undefined8 errorMessage;\n  undefined4 bufferSize;\n  undefined4 formatSize;\n  undefined *localPointer1;\n  undefined *localPointer2;\n  undefined localArray [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (condition != '\\0') {\n    localParam1 = errorType;\n    localParam2 = errorCause;\n    localParam3 = param3;\n    localParam4 = param4;\n    localParam5 = param5;\n    localParam6 = param6;\n    localParam7 = param7;\n    localParam8 = param8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(stdoutStream);\n  fputs(DAT_00127600,stderrStream);\n  if (errorFlag != 0) {\n    if (errorMessageCopy == 0) {\n      errorMessageCopy = FUN_001125fa(errorFlag);\n    }\n    if ((errorArray != (long *)0x0) && (*errorArray != 0)) {\n      fprintf(stderrStream,\": %s[%s]\",errorMessageCopy);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(stderrStream,\": %s\",errorMessageCopy);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    localPointer1 = &stack0x00000008;\n    localPointer2 = localArray;\n    bufferSize = 0x20;\n    formatSize = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,stderrStream);\n    vfprintf(stderrStream,formatString,&bufferSize);\n  }\n  fprintf(stderrStream,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "fprintf",
                "bfd_get_error",
                "fwrite",
                "fputs",
                "fflush",
                "bfd_errmsg",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_001086af",
                "FUN_00108466",
                "FUN_0010551d",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010808f"
            ],
            "imported": false,
            "current_name": "print_error_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00109b52",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_001088ae"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_variable_00113b4a",
                "param_1": "inputValue",
                "lVar1": "outputValue"
            },
            "code": "\nlong initializeVariable_00113b4a(long inputValue)\n\n{\n  long outputValue;\n  \n  if (inputValue != 0) {\n    outputValue = FUN_00112904(0x15,0);\n    if (outputValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      *(long *)(outputValue + 0x10) = inputValue;\n    }\n    return outputValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_variable_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_data_0010edb4",
                "param_1": "fileData",
                "param_2": "newFilename",
                "param_3": "flags",
                "param_4": "fileSize",
                "cVar1": "result",
                "iVar2": "filenameComparison",
                "uVar3": "fileUpdateResult",
                "in_R10": "additionalData"
            },
            "code": "\nundefined8 updateFileData_0010edb4(long fileData,undefined8 newFilename,undefined4 flags,ulong fileSize)\n\n{\n  char result;\n  int filenameComparison;\n  undefined8 fileUpdateResult;\n  undefined8 additionalData;\n  \n  if (*(long *)(fileData + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileData + 0x1f0) < fileSize) {\n    *(ulong *)(fileData + 0x1f0) = fileSize;\n  }\n  filenameComparison = filename_cmp(newFilename);\n  if (filenameComparison != 0) {\n    result = FUN_0010e2f0(fileData,0x84,0,fileSize,newFilename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileData + 0x210) = newFilename;\n  }\n  fileUpdateResult = FUN_0010e2f0(fileData,0x44,flags,fileSize - *(long *)(fileData + 0x200),0,additionalData);\n  return fileUpdateResult;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_data_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_00119e70",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00104a35",
                "FUN_00108fb9",
                "FUN_001199d0",
                "FUN_0010911f",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00109022",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010871c",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010b6ea",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "FUN_0010be1a",
                "FUN_0010bc80",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_0010b0fa",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "baseAddress",
                "param_2": "limit",
                "cVar1": "condition",
                "__ptr": "ptr1",
                "__s": "str1",
                "sVar2": "length",
                "__s_00": "str2",
                "in_R10": "result",
                "iVar3": "counter",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processData_0010e5db(long baseAddress,int limit)\n\n{\n  char condition;\n  void *ptr1;\n  char *str1;\n  size_t length;\n  char *str2;\n  ulong result;\n  int counter;\n  undefined returnValue [16];\n  \n  counter = 0;\n  do {\n    if (limit <= counter) {\n      returnValue = FUN_00109ed3(baseAddress,0x66,0,baseAddress + 0x188,baseAddress + 400,result);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(baseAddress + 0x60) + 0x1c) == '\\0') {\n      ptr1 = (void *)FUN_00109b2f(baseAddress);\n      free(ptr1);\n    }\n    else {\n      str1 = (char *)FUN_00109b2f(baseAddress);\n      length = strlen(str1);\n      str2 = (char *)xmalloc(length + 3);\n      sprintf(str2,\":t%s\",str1);\n      free(str1);\n      condition = FUN_0010e2f0(baseAddress,0x80,0,0,str2);\n      if (condition == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = result;\n        return returnValue << 0x40;\n      }\n      free(str2);\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109ed3",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_application_00104d25",
                "param_7": "userInput"
            },
            "code": "\nvoid initializeApplication_00104d25(void)\n\n{\n  undefined8 userInput;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0,userInput,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_application_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_debugging_information_0010551d",
                "puVar1": "ptrUInt",
                "bVar2": "byteVar",
                "puVar3": "ptrUndefined",
                "pcVar4": "ptrCodeFunction",
                "puVar5": "ptrUInt64",
                "uVar6": "ulongVar1",
                "uVar7": "ulongVar2",
                "__s": "stringVar",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "uintVar",
                "uVar16": "ulongVar3",
                "bVar38": "boolVar",
                "bVar39": "byteVar2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractDebuggingInformation_0010551d(void)\n\n{\n  uint *ptrUInt;\n  byte byteVar;\n  undefined *ptrUndefined;\n  code *ptrCodeFunction;\n  undefined8 *ptrUInt64;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *stringVar;\n  char charVar;\n  char charVar2;\n  uint uintVar;\n  int iVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  long *plVar15;\n  undefined8 ulongVar3;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *stringVar_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *ptrUndefined4;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pptrUndefined7;\n  bool boolVar;\n  byte byteVar2;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteVar2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar2 = FUN_00113fb0(), charVar2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      lVar27 = FUN_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      stringVar_00 = fopen((char *)puVar29[2],\"w\");\n      if (stringVar_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,stringVar_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          ulongVar3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(ulongVar3,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(stringVar_00);\n          return 0;\n        }\n        fclose(stringVar_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar17);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        ulongVar1 = uVar24;\n        ulongVar2 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulongVar1, ulongVar2 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulongVar1 = uVar20;\n            ulongVar2 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUN_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pptrUndefined7 = &PTR_sstringVartab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptrUndefined4 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *ptrUndefined4 = 0;\n      ptrUndefined4 = ptrUndefined4 + (ulong)byteVar2 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptrUndefined = *pptrUndefined7;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      iVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(iVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,ptrUndefined,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteVar,uVar13,lVar27,pcVar33);\n                    charVar2 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,ptrUndefined,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pptrUndefined7 = pptrUndefined7 + 2;\n    } while (pptrUndefined7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = FUN_0010c892(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (plVar15 = plVar32; plVar15 < plVar32 + in_stack_00000010; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = FUN_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\')) &&\n                   (plVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(plVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              plVar15 = plVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pcVar28);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((lVar25 != 0) && (charVar2 = FUN_0010c892(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)byteVar2 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          FUN_00119ed0(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = FUN_0010bbd3(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar11 = strcmp(pcVar33,\".bb\");\n              if (iVar11 == 0) {\n                charVar = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              iVar11 = strcmp(pcVar33,\".eb\");\n              if (iVar11 == 0) {\n                charVar = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              iVar11 = strcmp(pcVar33,\".bf\");\n              if (iVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = FUN_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charVar2 = FUN_0010bc80(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      charVar = FUN_0010bf86(puStack0000000000000020,iVar11 + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar11 = strcmp(pcVar33,\".ef\");\n                if (iVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = FUN_0010be1a(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = FUN_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          charVar = FUN_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278d0 + in_stack_00000010;\n        plVar15 = DAT_001278d0;\n        do {\n          uintVar = *(uint *)(*plVar15 + 0x18);\n          if ((uintVar & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uintVar & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar32 != plVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          ptrUInt = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *ptrUInt = *ptrUInt | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar11 = bfd_get_error();\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278c8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        iVar11 = DAT_001279c0;\n        plVar15 = (long *)plVar32[_in_stack_00000018];\n        ptrCodeFunction = (code *)plVar15[4];\n        uintVar = *(uint *)(plVar15 + 3);\n        pcVar33 = (char *)plVar15[1];\n        pcVar28 = pcVar33;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((iVar11 <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          ulongVar3 = FUN_0011a2e0(puVar29);\n          uVar17 = DAT_001278f0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = ulongVar3;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *pcVar33;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = unaff_R14[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278f0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (iVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), iVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(DAT_001278f0);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = DAT_001278f8, (uintVar & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            iVar11 = strcmp(*ppcVar35,pcVar33);\n            if (iVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        plVar15[1] = (long)pcVar28;\n        charVar2 = *pcVar28;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127928;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uintVar & 0x82) == 0 && (ptrCodeFunction != bfd_map_over_sections)) &&\n                ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = charVar2;\n          plVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127928;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          stringVar = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127928);\n            sVar18 = strlen(stringVar);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          plVar15[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uintVar & 0x20) == 0) &&\n           (((uintVar & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (iVar11 = bfd_decode_symclass(plVar15), iVar11 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar & 0x82) == 0) && (ptrCodeFunction != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(plVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVar2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(uVar17);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uintVar & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = FUN_001159d0(plVar15[4]);\n          if (charVar2 == '\\0') {\n            if (((uintVar & 0x800002) == 0) && (ptrCodeFunction != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar & 0x82) != 0) {\n                charVar2 = FUN_00115d70(pcVar28);\n                if ((charVar2 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                    (charVar2 = FUN_00115d70(pcVar28), charVar2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uVar12 = *(uint *)(plVar15 + 3), (uVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *plVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uVar12 = *(uint *)(plVar15 + 3);\n                }\n                *(uint *)(plVar15 + 3) = uVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar & 1) != 0) && (charVar2 = FUN_00115d70(pcVar28), charVar2 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVar2 = FUN_00115d70(pcVar28), charVar2 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (ptrCodeFunction != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = plVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      iVar11 = DAT_001279c0;\n      for (lVar27 = 0; lVar27 < iVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = FUN_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          iVar11 = DAT_001279c0;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    boolVar = DAT_001279a0 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((boolVar) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      iVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((iVar11 != 5) && (iVar11 != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,ulongVar3,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar2 = bfd_set_section_size(lVar25,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(lVar27,in_stack_00000140), charVar2 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        FUN_001126c0(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar2 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_00127a18);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a28), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_00127a08), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_00127a00), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279f8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279f0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278f0), lVar25 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279e0; ptrUInt64 = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVar2 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVar2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; ptrUInt64 != (undefined8 *)0x0; ptrUInt64 = (undefined8 *)*ptrUInt64) {\n    uVar17 = *(undefined8 *)(ptrUInt64[5] + 0x60);\n    charVar2 = bfd_set_section_contents(in_stack_00000008,uVar17,ptrUInt64[4],0,ptrUInt64[3]);\n    if (charVar2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      uVar17 = *unaff_R14;\n      ulongVar3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(ulongVar3,uVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = DAT_00127a30, charVar2 != '\\0')) {\n      uintVar = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uintVar;\n      if ((char)uintVar != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        charVar2 = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (charVar2 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(uVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVar2 = FUN_00113fb0(*puVar29,\".gnu.build.attributes\"), charVar2 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      plVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charVar2 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (charVar2 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = plVar15;\n          if (*(undefined8 **)(*plVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)plVar15[3];\n          plVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      FUN_001126c0(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_debugging_information_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00105828",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "htab_hash_string": "computeHash"
            },
            "code": "\nvoid hashString_00108800(undefined8 *param_1)\n\n{\n  htab_hash_string(*param_1);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_memory_0010c1c6",
                "param_1": "param_ptr",
                "param_2": "param_base",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "param_5": "ptr3",
                "param_6": "param_ptr3",
                "puVar1": "next_ptr",
                "cVar2": "result",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined deallocate_memory_0010c1c6(undefined8 param_ptr,long param_base,undefined8 ptr1,undefined8 ptr2,\n                      undefined8 ptr3,undefined8 param_ptr3)\n\n{\n  undefined8 *next_ptr;\n  char result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(param_base + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(param_base + 0x78) = 0;\n      return 1;\n    }\n    result = FUN_0010c05d(param_ptr,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_ptr3,\n                         ptr3);\n    if (result == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "deallocate_memory_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "uVar1": "numElements",
                "lVar2": "currentElement",
                "cVar3": "result",
                "unaff_RBX": "arrayPointer",
                "puVar4": "newArrayPointer",
                "puVar5": "newArrayPointerTemp",
                "unaff_RBP": "basePointer",
                "uVar6": "currentIndex",
                "unaff_R13": "sourceArray"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint numElements;\n  long currentElement;\n  char result;\n  long arrayPointer;\n  undefined8 *newArrayPointer;\n  undefined8 *newArrayPointerTemp;\n  long basePointer;\n  ulong currentIndex;\n  undefined8 *sourceArray;\n  \n  numElements = *(uint *)(arrayPointer + 0x78);\n  if (DAT_00127a48 == 7) {\n    newArrayPointer = sourceArray;\n    for (currentIndex = 0; currentIndex != numElements; currentIndex = currentIndex + 1) {\n      newArrayPointerTemp = newArrayPointer;\n      if (((*(long **)sourceArray[currentIndex] != (long *)0x0) &&\n          (currentElement = **(long **)sourceArray[currentIndex], currentElement != 0)) &&\n         (result = FUN_00115d70(*(undefined8 *)(currentElement + 8),DAT_00127a28), result != '\\0')) {\n        newArrayPointerTemp = newArrayPointer + 1;\n        *newArrayPointer = sourceArray[currentIndex];\n      }\n      newArrayPointer = newArrayPointerTemp;\n    }\n    *newArrayPointer = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(basePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "open_and_read_file_00114d60",
                "param_1": "fileInfo",
                "iVar1": "feofResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "__stream": "filePointer",
                "uVar5": "buffer",
                "sVar6": "bytesRead",
                "lVar7": "currentOffset",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid openAndReadFile_00114d60(long fileInfo)\n\n{\n  int feofResult;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorString;\n  FILE *filePointer;\n  undefined8 buffer;\n  size_t bytesRead;\n  long currentOffset;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errorLocation = __errno_location();\n    errorMessage = strerror(*errorLocation);\n    buffer = *(undefined8 *)(fileInfo + 0x10);\n    errorString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(errorString,buffer,errorMessage);\n  }\n  bufferSize = 0x1000;\n  currentOffset = 0;\n  buffer = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = buffer;\n  while( true ) {\n    feofResult = feof(filePointer);\n    if (feofResult != 0) {\n      *(long *)(fileInfo + 0x18) = currentOffset;\n      fclose(filePointer);\n      return;\n    }\n    if (currentOffset == bufferSize) {\n      bufferSize = currentOffset * 2;\n      buffer = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = buffer;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + currentOffset),1,bufferSize - currentOffset,filePointer);\n    feofResult = ferror(filePointer);\n    if (feofResult != 0) break;\n    currentOffset = currentOffset + bytesRead;\n  }\n  buffer = *(undefined8 *)(fileInfo + 0x10);\n  errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(errorString,buffer);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010543c",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "open_and_read_file_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "check_and_print_section_00108808",
                "unaff_RBP": "stackBase",
                "uVar1": "sectionPtr",
                "uVar2": "sectionNotFoundStr"
            },
            "code": "\nvoid checkAndPrintSection_00108808(void)\n\n{\n  undefined8 sectionPtr;\n  undefined8 sectionNotFoundStr;\n  long stackBase;\n  \n  sectionPtr = *(undefined8 *)(stackBase + 0x20);\n  sectionNotFoundStr = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(sectionNotFoundStr,sectionPtr);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "check_and_print_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_input_lines_00104d1c",
                "unaff_EBP": "line_count",
                "unaff_R13": "error_message",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "unaff_R14": "current_line",
                "unaff_R15": "current_token",
                "uVar1": "translated_msg",
                "ppbVar2": "found_slot",
                "pbVar3": "trimmed_token",
                "bVar4": "current_char",
                "pbVar5": "next_line",
                "pbVar6": "next_token",
                "pbVar7": "line_end_token"
            },
            "code": "\nvoid parse_input_lines_00104d1c(void)\n\n{\n  undefined8 translated_msg;\n  byte **found_slot;\n  byte *trimmed_token;\n  byte current_char;\n  byte *next_line;\n  int line_count;\n  byte *next_token;\n  undefined8 error_message;\n  byte *line_end_token;\n  byte *current_line;\n  byte *current_token;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char = *current_line;\n    line_end_token = current_line;\n    if (current_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        line_end_token = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        line_end_token = current_line + 1;\n      }\n    }\n    current_char = *current_token;\n    while ((current_char == 0x20 || (next_token = current_token, current_char == 9))) {\n      next_token = current_token + 1;\n      current_token = current_token + 1;\n      current_char = *next_token;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = next_token[1];\n      next_token = next_token + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = next_token[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = next_token[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = next_token[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = next_token[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = next_token[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = next_token[6];\n        trimmed_token = next_token + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = trimmed_token[1];\n              trimmed_token = trimmed_token + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        translated_msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(translated_msg,format_string,line_count);\n      }\n    }\nLAB_00114599:\n    *next_token = 0;\n    if (current_token < next_token) {\n      found_slot = (byte **)htab_find_slot();\n      *found_slot = current_token;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_token = next_line;\n    if (line_end_token[1] == 0) {\n      *return_address = error_message;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    parse_input_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_input_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_print_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "error_message",
                "local_20": "scan_result"
            },
            "code": "\nvoid validate_and_print_error_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(error_message,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_conditional_operation_0010540e",
                "param_1": "result",
                "param_2": "input",
                "param_3": "condition",
                "in_RAX": "temp"
            },
            "code": "\nvoid executeConditionalOperation_0010540e(undefined8 result,long input,uint condition)\n\n{\n  long temp;\n  \n  if ((condition == 2) && (*(int *)(*(long *)(input + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(input + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(temp + 0x380) + 0x78))(result,condition != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_conditional_operation_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_data_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "dataPtr",
                "param_4": "temp1",
                "param_5": "temp2",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "dataPointer",
                "auVar4": "auxiliaryVar"
            },
            "code": "\nundefined8\nprocessData_00113a4d(undefined8 input1,undefined8 input2,long dataPtr,undefined8 temp1,\n            undefined8 temp2)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *dataPointer;\n  undefined auxiliaryVar [16];\n  \n  result = FUN_00112502(input1,input2,*(undefined8 *)(dataPtr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(dataPtr + 0x28) == 0 && (*(long *)(dataPtr + 8) != 0)) ||\n      (result = FUN_0010ec73(input2,*(undefined8 *)(dataPtr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(dataPtr + 0x28) != (undefined8 *)0x0) {\n      for (dataPointer = (undefined8 *)**(undefined8 **)(dataPtr + 0x28); dataPointer != (undefined8 *)0x0;\n          dataPointer = (undefined8 *)*dataPointer) {\n        result = FUN_001135a5(input1,input2,dataPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (dataPointer = *(undefined8 **)(dataPtr + 0x10); dataPointer != (undefined8 *)0x0;\n        dataPointer = (undefined8 *)*dataPointer) {\n      result = processData_00113a4d(input1,input2,dataPointer);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    auxiliaryVar = FUN_00112502(input1,input2,*(undefined8 *)(dataPtr + 0x20));\n    if (auxiliaryVar[0] != '\\0') {\n      if ((*(long *)(dataPtr + 0x28) == 0) && (*(long *)(dataPtr + 8) != 0)) {\n        return auxiliaryVar._0_8_;\n      }\n      returnValue = FUN_0010ed2c(input2,*(undefined8 *)(dataPtr + 0x20),auxiliaryVar._8_8_,temp2);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00112502",
                "FUN_00113a4d",
                "FUN_0010ec73",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_and_return_001081e9",
                "in_RAX": "return_value",
                "unaff_RBX": "memory_address"
            },
            "code": "\nundefined8 free_memory_and_return_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_address;\n  undefined8 param_7;\n  \n  param_7 = return_value;\n  free(memory_address);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_and_return_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_data_structure_00113b71",
                "param_1": "inputValue",
                "lVar1": "allocatedMemory"
            },
            "code": "\nlong initializeDataStructure_00113b71(long inputValue)\n\n{\n  long allocatedMemory;\n  \n  if (inputValue != 0) {\n    allocatedMemory = FUN_00112904(0x14,0);\n    if (allocatedMemory == 0) {\n      allocatedMemory = 0;\n    }\n    else {\n      *(long *)(allocatedMemory + 0x10) = inputValue;\n    }\n    return allocatedMemory;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_data_00109dfe",
                "param_1": "data",
                "local_40": "formattedString"
            },
            "code": "\nvoid processData_00109dfe(long data)\n\n{\n  long lVar1;\n  char formattedString [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    FUN_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  lVar1 = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = lVar1 + 1;\n  *(long *)(data + 0x70) = lVar1;\n  sprintf(formattedString,\"%ld=%ld\",lVar1,lVar1);\n  FUN_00109b52(data,formattedString,lVar1,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "add_semicolon_at_end_00109bbb",
                "param_1": "input",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool addSemicolonAtEnd_00109bbb(long input)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "add_semicolon_at_end_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "generate_improved_string_0010ae0e",
                "param_1": "inputPointer",
                "lVar1": "structPointer",
                "lVar2": "subStructPointer",
                "__ptr": "tempPointer",
                "pcVar3": "tempStringPointer",
                "sVar4": "stringLength1",
                "sVar5": "stringLength2",
                "pcVar6": "improvedString",
                "uVar7": "returnValue",
                "lVar8": "length",
                "uVar9": "counter",
                "uVar10": "subCounter"
            },
            "code": "\nundefined8 generateImprovedString_0010ae0e(long inputPointer)\n\n{\n  long structPointer;\n  long subStructPointer;\n  void *tempPointer;\n  char *tempStringPointer;\n  size_t stringLength1;\n  size_t stringLength2;\n  char *improvedString;\n  undefined8 returnValue;\n  long length;\n  uint counter;\n  ulong subCounter;\n  \n  returnValue = 0;\n  structPointer = *(long *)(inputPointer + 0x60);\n  if (((structPointer != 0) && (*(char **)(structPointer + 8) != (char *)0x0)) &&\n     (improvedString = *(char **)(structPointer + 0x20), improvedString != (char *)0x0)) {\n    stringLength1 = strlen(*(char **)(structPointer + 8));\n    stringLength2 = strlen(improvedString);\n    subStructPointer = *(long *)(structPointer + 0x28);\n    if (subStructPointer == 0) {\n      length = stringLength1 + stringLength2 + 10;\n      subCounter = 0;\n    }\n    else {\n      length = stringLength1 + stringLength2 + 0x1e;\n      subCounter = 0;\n      while( true ) {\n        improvedString = *(char **)(subStructPointer + subCounter * 8);\n        if (improvedString == (char *)0x0) break;\n        stringLength1 = strlen(improvedString);\n        subCounter = (ulong)((int)subCounter + 1);\n        length = length + stringLength1;\n      }\n    }\n    if (*(char **)(structPointer + 0x30) != (char *)0x0) {\n      stringLength1 = strlen(*(char **)(structPointer + 0x30));\n      length = length + stringLength1;\n    }\n    if (*(char **)(structPointer + 0x38) != (char *)0x0) {\n      stringLength1 = strlen(*(char **)(structPointer + 0x38));\n      length = length + stringLength1;\n    }\n    improvedString = (char *)xmalloc(length);\n    structPointer = *(long *)(inputPointer + 0x60);\n    strcpy(improvedString,*(char **)(structPointer + 8));\n    if (*(long *)(structPointer + 0x28) != 0) {\n      counter = 0;\n      stringLength1 = strlen(improvedString);\n      sprintf(improvedString + stringLength1,\"!%u,\",subCounter);\n      while( true ) {\n        structPointer = *(long *)(inputPointer + 0x60);\n        subCounter = (ulong)counter;\n        tempPointer = *(void **)(structPointer + 0x28);\n        tempStringPointer = *(char **)((long)tempPointer + subCounter * 8);\n        if (tempStringPointer == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(improvedString,tempStringPointer);\n        free(*(void **)(*(long *)(structPointer + 0x28) + subCounter * 8));\n      }\n      free(tempPointer);\n      *(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x28) = 0;\n    }\n    structPointer = *(long *)(inputPointer + 0x60);\n    strcat(improvedString,*(char **)(structPointer + 0x20));\n    free(*(void **)(structPointer + 0x20));\n    structPointer = *(long *)(inputPointer + 0x60);\n    *(undefined8 *)(structPointer + 0x20) = 0;\n    if (*(char **)(structPointer + 0x30) != (char *)0x0) {\n      strcat(improvedString,*(char **)(structPointer + 0x30));\n      free(*(void **)(structPointer + 0x30));\n      *(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x30) = 0;\n    }\n    stringLength1 = strlen(improvedString);\n    structPointer = *(long *)(inputPointer + 0x60);\n    *(undefined2 *)(improvedString + stringLength1) = 0x3b;\n    tempStringPointer = *(char **)(structPointer + 0x38);\n    if (tempStringPointer != (char *)0x0) {\n      strcpy(improvedString + stringLength1 + 1,tempStringPointer);\n      free(*(void **)(structPointer + 0x38));\n      *(undefined8 *)(*(long *)(inputPointer + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(inputPointer + 0x60) + 8));\n    structPointer = *(long *)(inputPointer + 0x60);\n    *(char **)(structPointer + 8) = improvedString;\n    returnValue = CONCAT71((int7)((ulong)structPointer >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "xmalloc",
                "free",
                "strcat",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_improved_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "index",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "ptr1",
                "puVar5": "ptr2"
            },
            "code": "\nundefined8 process_data_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int index;\n  char flag;\n  undefined8 result;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    flag = FUN_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (flag != '\\0') {\n      result = FUN_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 1:\n    flag = FUN_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (flag != '\\0') {\n      result = FUN_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 2:\n    flag = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (flag != '\\0') {\n      result = FUN_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    result = *(undefined8 *)(data + 8);\n    flag = FUN_00112502(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((flag != '\\0') && (flag = FUN_00112c1f(input1,input2,*ptr2,0), flag != '\\0')) &&\n       (flag = FUN_0010eafe(input2,result,index == 2), flag != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        flag = FUN_00112c1f(input1,input2,ptr1[2],0);\n        if (flag == '\\0') {\n          return 0;\n        }\n        flag = FUN_0010ebb0(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          result = FUN_00108f05(input2);\n          return result;\n        }\n        flag = FUN_00113a4d(input1,input2,ptr2);\n        if (flag == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    result = FUN_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return result;\n  case 5:\n    result = FUN_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return result;\n  case 6:\n    flag = FUN_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (flag != '\\0') {\n      result = FUN_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010ebb0",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010e6a8",
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "abort",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUN_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_get_mach",
                "bfd_set_start_address",
                "FUN_001152b6",
                "bfd_set_file_flags",
                "printf",
                "bfd_get_arch"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00119f70",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00115530",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "print_demangled_type_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "typeInfo",
                "param_4": "size",
                "param_5": "error",
                "uVar1": "typeCode",
                "iVar2": "result",
                "pcVar3": "demangledType",
                "plVar4": "templates",
                "pcVar5": "message",
                "sVar6": "length",
                "__ptr": "ptr",
                "lVar7": "size1",
                "local_40": "buffer"
            },
            "code": "\n\n\nchar * printDemangledType_0010b0fa(undefined8 param1,undefined8 param2,uint *typeInfo,long size,\n                   undefined *error)\n\n{\n  uint typeCode;\n  int result;\n  char *demangledType;\n  long *templates;\n  char *message;\n  size_t length;\n  void *ptr;\n  long size1;\n  undefined buffer [16];\n  \n  if (error != (undefined *)0x0) {\n    *error = 0;\n  }\n  while( true ) {\n    typeCode = *typeInfo;\n    if (0x29 < typeCode) break;\n    if (0x17 < typeCode) {\n      switch(typeCode) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        demangledType = (char *)printDemangledType_0010b0fa(param1,param2,*(undefined8 *)(typeInfo + 4),0,0);\n        if (demangledType != (char *)0x0) {\n          switch(*typeInfo) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            demangledType = (char *)FUN_00113b4a(demangledType);\n            return demangledType;\n          case 0x1b:\n            demangledType = (char *)FUN_00113b71(demangledType);\n            return demangledType;\n          default:\n                    \n            abort();\n          case 0x22:\n            demangledType = (char *)FUN_00113d3a(demangledType);\n            return demangledType;\n          case 0x23:\n            demangledType = (char *)FUN_00113cb9(demangledType);\n            return demangledType;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        demangledType = (char *)cplus_demangle_print(3,typeInfo,0x14,buffer);\n        if (demangledType == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          demangledType = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        result = strcmp(demangledType,\"signed char\");\n        if (result == 0) {\nLAB_0010b406:\n          message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"bool\");\n        if (result == 0) {\n          message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"char\");\n        if (result == 0) goto LAB_0010b406;\n        result = strcmp(demangledType,\"double\");\n        if ((result == 0) || (result = strcmp(demangledType,\"long double\"), result == 0)) {\n          message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"float\");\n        if (result == 0) {\n          message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"__float128\");\n        if (result == 0) {\n          message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned char\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"int\");\n        if (result == 0) {\nLAB_0010b504:\n          message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned int\");\n        if (result == 0) {\nLAB_0010b528:\n          message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"long\");\n        if (result == 0) goto LAB_0010b504;\n        result = strcmp(demangledType,\"unsigned long\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(demangledType,\"__int128\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned __int128\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"short\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned short\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"void\");\n        if (result == 0) {\n          message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"wchar_t\");\n        if (result == 0) goto LAB_0010b528;\n        result = strcmp(demangledType,\"long long\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"unsigned long long\");\n        if (result == 0) {\n          message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        result = strcmp(demangledType,\"...\");\n        if (result == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (error == (undefined *)0x0) goto LAB_0010b6a9;\n          *error = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(demangledType);\n        return message;\n      case 0x29:\n        if (*(long *)(typeInfo + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)printDemangledType_0010b0fa(param1,param2,*(long *)(typeInfo + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          size1 = FUN_0010b6ea(param1,param2,*(undefined8 *)(typeInfo + 6),buffer);\n          if (size1 != 0) {\n            demangledType = (char *)FUN_00113ce0(ptr,size1,buffer[0]);\n            return demangledType;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (typeCode != 1) {\n      if (typeCode == 4) {\n        demangledType = (char *)cplus_demangle_print(3,typeInfo,0x14,buffer);\n        message = \"Failed to print demangled template\\n\";\n        if (demangledType != (char *)0x0) {\n          length = strlen(demangledType);\n          message = (char *)FUN_0010afd5(param1,param2,demangledType,length & 0xffffffff,9);\n          free(demangledType);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return demangledType;\n      }\n      if (typeCode == 0) {\n        if ((size == 0) || (templates = (long *)FUN_00113b1e(size), templates == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    size = printDemangledType_0010b0fa(param1,param2,*(undefined8 *)(typeInfo + 4),size,0);\n    if (size == 0) goto LAB_0010b38c;\n    typeInfo = *(uint **)(typeInfo + 6);\n    error = (undefined *)0x0;\n  }\n  demangledType = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,demangledType,(ulong)typeCode);\nLAB_0010b38c:\n  demangledType = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return demangledType;\nLAB_0010b1a5:\n  if (*templates == 0) {\nswitchD_0010b158_caseD_18:\n    demangledType = (char *)FUN_0010afd5(param1,param2,*(undefined8 *)(typeInfo + 4),typeInfo[6],0);\n    return demangledType;\n  }\n  demangledType = *(char **)(*templates + 8);\n  if (demangledType == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)FUN_001129f4(demangledType);\n  if (message != (char *)0x0) {\n    length = strlen(message);\n    if ((typeInfo[6] == (uint)length) &&\n       (result = strncmp(message,*(char **)(typeInfo + 4),(long)(int)typeInfo[6]), result == 0)) {\n      return demangledType;\n    }\n  }\n  templates = templates + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113dfe",
                "FUN_00113b1e",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_0010b6ea",
                "cplus_demangle_print",
                "strlen",
                "FUN_00113df2",
                "fprintf",
                "FUN_00113b4a",
                "strncmp",
                "FUN_00112904",
                "free",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113cb9",
                "abort",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "print_demangled_type_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineIndex",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "callback",
                "ppbVar2": "slot",
                "pbVar3": "nextChar",
                "unaff_R13": "ignored",
                "unaff_R14": "lastLine",
                "unaff_R15": "firstChar",
                "uVar1": "message",
                "in_CL": "currentChar",
                "bVar4": "nextLineChar",
                "pbVar5": "line"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 message;\n  byte **slot;\n  byte *nextChar;\n  byte currentChar;\n  byte nextLineChar;\n  byte *currentLine;\n  int lineIndex;\n  byte *line;\n  undefined8 ignored;\n  byte *lastLine;\n  byte *firstChar;\n  undefined8 filename;\n  undefined8 *callback;\n  \n  do {\n    line = firstChar;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = line[1];\n      line = line + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextLineChar = line[1];\n      if ((((((nextLineChar == 9) || (nextLineChar == 0x20)) &&\n            ((nextLineChar = line[2], nextLineChar == 9 || (nextLineChar == 0x20)))) &&\n           ((nextLineChar = line[3], nextLineChar == 9 || (nextLineChar == 0x20)))) &&\n          ((nextLineChar = line[4], nextLineChar == 9 || (nextLineChar == 0x20)))) &&\n         ((nextLineChar = line[5], nextLineChar == 9 || (nextLineChar == 0x20)))) {\n        nextLineChar = line[6];\n        nextChar = line + 6;\n        if ((nextLineChar == 9) || (nextLineChar == 0x20)) {\n          do {\n            do {\n              nextLineChar = nextChar[1];\n              nextChar = nextChar + 1;\n            } while (nextLineChar == 0x20);\n          } while (nextLineChar == 9);\n        }\n      }\n      if ((0xd < nextLineChar) || ((-0x2402L >> (nextLineChar & 0x3f) & 1U) != 0)) {\n        message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(message,filename,lineIndex);\n      }\n    }\nLAB_00114599:\n    *line = 0;\n    if (firstChar < line) {\n      slot = (byte **)htab_find_slot();\n      *slot = firstChar;\n    }\n    lineIndex = lineIndex + 1;\n    line = currentLine;\n    if (lastLine[1] == 0) {\n      *callback = ignored;\n      return;\n    }\n    for (; nextLineChar = *line, lastLine = line, nextLineChar != 10; line = line + 1) {\n      if ((char)nextLineChar < '\\v') {\n        if (nextLineChar == 0) {\n          nextChar = line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextLineChar == 0xd) {\n          *line = 0;\n          nextChar = line + 1;\n          if (line[1] == 10) {\n            nextChar = line + 2;\n            lastLine = line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextLineChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *line = 0;\n    if (line[1] == 0xd) {\n      lastLine = line + 1;\n      nextChar = line + 2;\n    }\n    else {\n      nextChar = line + 1;\n    }\nLAB_00114553:\n    currentChar = *currentLine;\n    firstChar = currentLine;\n    while (currentLine = nextChar, currentChar == 0x20) {\nLAB_00104c3f:\n      line = firstChar + 1;\n      firstChar = firstChar + 1;\n      nextChar = currentLine;\n      currentChar = *line;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "process_debug_info_0010554f",
                "param_36": "param_byte1",
                "param_37": "param_byte2",
                "param_38": "param_debug_link_section",
                "param_39": "param_debug_link_section_size",
                "param_40": "param_merged_data",
                "param_41": "param_merged_data_flag",
                "param_42": "param_debug_link_string"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 processDebugInfo_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_byte1;\n  byte param_byte2;\n  undefined8 param_debug_link_section;\n  ushort param_debug_link_section_size;\n  long *param_merged_data;\n  char param_merged_data_flag;\n  char *param_debug_link_string;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_merged_data = param_17;\n    bfd_map_over_sections(param_7,FUN_0010870e,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,param_7,*plVar28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127989 != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUN_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_merged_data_flag == '-') {\n          if (((lVar14 == 0) && (lVar14 = FUN_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((param_debug_link_string == (char *)0x0 || (*param_debug_link_string == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_debug_link_string;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_merged_data,pcVar22);\n          param_9 = FUN_0011173a(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar14 != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_merged_data = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_byte2 + 1 + in_stack_000000d8;\n            if (param_byte2 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_byte1 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_byte1 < '\\0') {\n            if (param_byte1 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_byte1 < 100) {\n              switch(param_byte1) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_byte1) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_byte2 != 0) {\n                      iVar10 = param_debug_link_section_size - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278d0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_merged_data_flag = 0;\n            param_merged_data = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278f8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_merged_data_flag = _param_merged_data_flag & 0xffffffffffffff00;\n                param_merged_data = plVar25;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (param_merged_data_flag == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_merged_data_flag = _param_merged_data_flag & 0xffffffffffffff00;\n            param_merged_data = plVar25;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (param_merged_data_flag != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_merged_data_flag = _param_merged_data_flag & 0xffffffffffffff00;\n              param_merged_data = plVar25;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (param_merged_data_flag != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_merged_data_flag = _param_merged_data_flag & 0xffffffffffffff00;\n              param_merged_data = plVar25;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (param_merged_data_flag != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = FUN_0011378f(param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_debug_link_section), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_merged_data), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_debug_link_section);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_merged_data), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_alt_mach_code",
                "bfd_set_section_size",
                "FUN_0010870e",
                "FUN_0010bf20",
                "FUN_00108863",
                "bfd_set_section_contents",
                "bfd_map_over_sections",
                "strcmp",
                "FUN_00119dd0",
                "FUN_0010dac0",
                "FUN_001088ae",
                "bfd_coff_get_syment",
                "bfd_coff_get_auxent",
                "xmalloc",
                "htab_traverse",
                "bfd_set_error",
                "FUN_00116110",
                "FUN_0010bbd3",
                "bfd_decode_symclass",
                "bfd_get_section_by_name",
                "bfd_errmsg",
                "bfd_make_section_with_flags",
                "strlen",
                "FUN_0010c892",
                "strcpy",
                "bfd_is_local_label",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_0010be1a",
                "htab_find",
                "FUN_001159d0",
                "concat",
                "dcgettext",
                "FUN_00113fb0",
                "xstrdup",
                "qsort",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00112a33",
                "FUN_0011a170",
                "fprintf",
                "bfd_get_error",
                "htab_elements",
                "FUN_0010875d",
                "FUN_0011378f",
                "bfd_octets_per_byte",
                "bfd_set_symtab",
                "FUN_00116030",
                "FUN_00119ed0",
                "FUN_00115d70",
                "bfd_map_over_sections",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "free",
                "FUN_0010bc80",
                "FUN_0011a2e0",
                "FUN_0010be88"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_pass_00109cf4",
                "param_1": "outputBuffer",
                "param_2": "inputValue",
                "param_3": "size",
                "local_3c": "convertedValue"
            },
            "code": "\nvoid convertAndPass_00109cf4(undefined8 outputBuffer,undefined8 inputValue,undefined4 size)\n\n{\n  char convertedValue [28];\n  \n  sprintf(convertedValue,\"%ld\",inputValue);\n  FUN_00109b52(outputBuffer,convertedValue,inputValue,0,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "convert_and_pass_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_arguments_00109ab1",
                "param_1": "input_string",
                "param_2": "output_values",
                "uVar1": "result_1",
                "pcVar2": "current_char",
                "uVar3": "result_2",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_arguments_00109ab1(char **input_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 result_1;\n  char *current_char;\n  undefined8 result_2;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    result_1 = FUN_00109a32(input_string,0);\n    *output_values = result_1;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      result_1 = FUN_00109a32(input_string,0,param_3);\n      output_values[1] = result_1;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(current_char);\n    result_2 = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)FUN_00109a32(input_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result_2 = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result_2;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_and_perform_action_001159d0",
                "param_1": "inputParam",
                "uVar1": "returnValue",
                "cVar2": "flag",
                "uVar3": "result",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2"
            },
            "code": "\nundefined4 checkAndPerformAction_001159d0(long inputParam)\n\n{\n  undefined8 returnValue;\n  char flag;\n  undefined4 result;\n  long tempVar1;\n  long tempVar2;\n  \n  result = FUN_00115b70();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(inputParam + 0x27) & 2) == 0) {\n      return result;\n    }\n    tempVar1 = FUN_00115d00(*(undefined8 *)(inputParam + 0xd0),*(undefined8 *)(inputParam + 0xe0));\n    if ((tempVar1 != 0) &&\n       (((returnValue = *(undefined8 *)(tempVar1 + 8), DAT_00127a48 != 7 ||\n         (flag = FUN_00115d70(returnValue,DAT_00127a28), flag != '\\0')) &&\n        (flag = FUN_00115d70(returnValue,DAT_00127a18), flag == '\\0')))) {\n      tempVar1 = *(long *)(*(long *)(inputParam + 0xd0) + 0xc0);\n      tempVar2 = tempVar1;\n      do {\n        if (tempVar2 == 0) {\n          return 1;\n        }\n        flag = FUN_00115b70(tempVar2);\n        if (flag == '\\0') {\n          return result;\n        }\n        tempVar2 = *(long *)(*(long *)(tempVar2 + 0xd0) + 0xc0);\n      } while (tempVar1 != tempVar2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d00",
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_and_perform_action_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "concatenate_and_send_strings_0010a77a",
                "param_1": "inputParam",
                "uVar1": "tempChar",
                "lVar2": "ptrParam",
                "__s": "string1",
                "uVar4": "result",
                "__s_00": "string2",
                "sVar5": "lengthString2",
                "sVar6": "lengthString1",
                "__s_01": "concatenatedString"
            },
            "code": "\nundefined4 concatenateAndSendStrings_0010a77a(long inputParam)\n\n{\n  undefined tempChar;\n  long ptrParam;\n  char *string1;\n  undefined8 uVar3;\n  undefined4 result;\n  char *string2;\n  size_t lengthString2;\n  size_t lengthString1;\n  char *concatenatedString;\n  \n  ptrParam = *(long *)(inputParam + 0x60);\n  if ((ptrParam != 0) && (string1 = *(char **)(ptrParam + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptrParam + 0x18);\n    tempChar = *(undefined *)(ptrParam + 0x1c);\n    uVar3 = *(undefined8 *)(ptrParam + 0x10);\n    string2 = (char *)FUN_00109b2f();\n    lengthString2 = strlen(string2);\n    lengthString1 = strlen(string1);\n    concatenatedString = (char *)xmalloc(lengthString2 + 2 + lengthString1);\n    sprintf(concatenatedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = FUN_00109b52(inputParam,concatenatedString,uVar3,tempChar,result);\n    if ((char)result != '\\0') {\n      free(concatenatedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_and_send_strings_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_and_handle_error_0010543c",
                "piVar2": "pErrno",
                "pcVar3": "errorMsg",
                "uVar1": "fileDescriptor",
                "uVar4": "errorMessage",
                "unaff_RBP": "stackPointer"
            },
            "code": "\nvoid openFileAndHandleError_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *pErrno;\n  char *errorMsg;\n  undefined8 errorMessage;\n  long stackPointer;\n  \n  pErrno = __errno_location();\n  errorMsg = strerror(*pErrno);\n  fileDescriptor = *(undefined8 *)(stackPointer + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(errorMessage,fileDescriptor,errorMsg);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_and_handle_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_concatenated_string_0010a424",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "cVar1": "resultChar",
                "bVar2": "byteVar",
                "iVar3": "intVar",
                "uVar4": "resultVar",
                "pcVar5": "strVar1",
                "__ptr": "ptrArray",
                "uVar6": "resultVar2",
                "__s": "strVar2",
                "sVar7": "sizeVar1",
                "sVar8": "sizeVar2",
                "__s_00": "concatenatedStr",
                "lVar9": "loopVar1",
                "bVar10": "byteVar2",
                "lVar11": "loopVar2",
                "uVar12": "resultVar3"
            },
            "code": "\nundefined4 generateConcatenatedString_0010a424(long inputParam1,char inputParam2,int inputParam3,char inputParam4)\n\n{\n  char resultChar;\n  byte byteVar;\n  int intVar;\n  undefined4 resultVar;\n  char *strVar1;\n  undefined8 *ptrArray;\n  undefined8 resultVar2;\n  char *strVar2;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  char *concatenatedStr;\n  long loopVar1;\n  byte byteVar2;\n  long loopVar2;\n  undefined resultVar3;\n  \n  if ((inputParam2 == '\\0') && (resultChar = FUN_00109d97(), resultChar == '\\0')) {\n    return 0;\n  }\n  byteVar2 = *(byte *)(*(long *)(inputParam1 + 0x60) + 0x1c);\n  strVar1 = (char *)FUN_00109b2f(inputParam1);\n  if (inputParam3 < 0) {\n    ptrArray = (undefined8 *)0x0;\n    inputParam3 = 0;\nLAB_0010a582:\n    resultVar3 = 1;\n    if (byteVar2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (inputParam3 != 0) {\n      intVar = inputParam3 + 1;\n      ptrArray = (undefined8 *)xmalloc((long)intVar * 8);\n      loopVar1 = (long)(inputParam3 + -1);\n      do {\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(inputParam1 + 0x60) + 0x1c);\n        }\n        resultVar2 = FUN_00109b2f(inputParam1);\n        byteVar2 = byteVar & 1;\n        ptrArray[loopVar1] = resultVar2;\n        loopVar1 = loopVar1 + -1;\n      } while ((int)loopVar1 != -1);\n      if (inputParam4 == '\\0') {\n        resultChar = FUN_00109d97(inputParam1);\n        if (resultChar == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(inputParam1 + 0x60) + 0x1c);\n        }\n        byteVar2 = byteVar & 1;\n        resultVar2 = FUN_00109b2f(inputParam1);\n        ptrArray[(long)intVar + -1] = resultVar2;\n        inputParam3 = intVar;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (inputParam4 != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    resultChar = FUN_00109d97(inputParam1);\n    if (resultChar == '\\0') {\n      return 0;\n    }\n    if ((byteVar2 != 0) || (*(char *)(*(long *)(inputParam1 + 0x60) + 0x1c) != '\\0')) {\n      resultVar2 = FUN_00109b2f(inputParam1);\n      inputParam3 = 1;\n      resultVar3 = 1;\n      *ptrArray = resultVar2;\n      goto LAB_0010a596;\n    }\n    resultVar2 = FUN_00109b2f(inputParam1);\n    inputParam3 = 1;\n    *ptrArray = resultVar2;\n  }\n  resultVar3 = *(undefined *)(*(long *)(inputParam1 + 0x60) + 0x1c);\nLAB_0010a596:\n  strVar2 = (char *)FUN_00109b2f(inputParam1);\n  sizeVar1 = strlen(strVar1);\n  sizeVar2 = strlen(strVar2);\n  loopVar1 = sizeVar1 + 10 + sizeVar2;\n  for (loopVar2 = 0; (int)loopVar2 < inputParam3; loopVar2 = loopVar2 + 1) {\n    sizeVar1 = strlen((char *)ptrArray[loopVar2]);\n    loopVar1 = loopVar1 + sizeVar1;\n  }\n  concatenatedStr = (char *)xmalloc(loopVar1);\n  sprintf(concatenatedStr,\"#%s,%s\",strVar1,strVar2);\n  loopVar1 = 0;\n  free(strVar1);\n  free(strVar2);\n  while( true ) {\n    sizeVar1 = strlen(concatenatedStr);\n    if (inputParam3 <= (int)loopVar1) break;\n    *(undefined2 *)(concatenatedStr + sizeVar1) = 0x2c;\n    strVar1 = (char *)ptrArray[loopVar1];\n    loopVar1 = loopVar1 + 1;\n    strcpy(concatenatedStr + sizeVar1 + 1,strVar1);\n    free(strVar1);\n  }\n  *(undefined2 *)(concatenatedStr + sizeVar1) = 0x3b;\n  free(ptrArray);\n  resultVar = FUN_00109b52(inputParam1,concatenatedStr,0,resultVar3,0);\n  if ((char)resultVar == '\\0') {\n    return 0;\n  }\n  free(concatenatedStr);\n  return resultVar;\n}\n\n",
            "called": [
                "strcpy",
                "FUN_00109d97",
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_concatenated_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_program_info_00119970",
                "param_1": "version",
                "pcVar1": "message"
            },
            "code": "\nvoid printProgramInfo_00119970(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_program_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "param_1": "input_string",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar1": "equal_sign",
                "uVar2": "format_error",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  char *equal_sign;\n  undefined8 format_error;\n  undefined result [16];\n  \n  equal_sign = strchr(input_string,0x3d);\n  if (equal_sign != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    format_error = FUN_0011a480(input_string,(long)equal_sign - (long)input_string);\n    result._0_8_[2] = equal_sign + 1;\n    result._0_8_[1] = format_error;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = param2;\n    result._8_8_ = param4;\n    return result;\n  }\n  format_error = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(format_error,param3);\n}\n\n",
            "called": [
                "FUN_001053b5",
                "xmalloc",
                "strchr",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_parameter_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_param2_and_get_next_0010870e",
                "param_1": "param",
                "param_2": "value",
                "param_3": "ptr",
                "puVar1": "ptrValuePtr"
            },
            "code": "\nvoid storeParam2AndGetNext_0010870e(undefined8 param,undefined8 value,long *ptr)\n\n{\n  undefined8 *ptrValuePtr;\n  \n  ptrValuePtr = (undefined8 *)*ptr;\n  *ptrValuePtr = value;\n  *ptr = (long)(ptrValuePtr + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_param2_and_get_next_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_data",
                "param_2": "header_data",
                "param_3": "symbol_table",
                "param_5": "type_code",
                "param_6": "type_info",
                "lVar1": "length",
                "cVar2": "flag",
                "uVar3": "error_code",
                "uVar4": "result",
                "lVar5": "temp",
                "uVar6": "new_result",
                "plVar7": "ptr",
                "__ptr": "ptr_1",
                "__ptr_00": "ptr_2",
                "bVar8": "byte_value",
                "iVar9": "int_value",
                "pcVar10": "str_value",
                "uVar11": "ulong_value",
                "lVar12": "loop_var",
                "uVar13": "type_code_1",
                "uVar14": "ushort_value",
                "local_68": "local_array",
                "local_48": "local_char",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_data,long *header_data,long symbol_table,undefined8 param_4,uint type_code,\n                 long *type_info,char param_7,undefined8 param_8)\n\n{\n  long length;\n  char flag;\n  undefined4 error_code;\n  undefined8 result;\n  long temp;\n  undefined8 new_result;\n  long *ptr;\n  void *ptr_1;\n  void *ptr_2;\n  byte byte_value;\n  int int_value;\n  char *str_value;\n  ulong ulong_value;\n  long loop_var;\n  uint type_code_1;\n  uint ushort_value;\n  undefined8 uVar15;\n  undefined local_array [32];\n  char local_char;\n  byte local_byte;\n  \n  temp = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(temp + 0x38) & type_code) != 0) {\n    type_code_1 = (int)type_code >> ((byte)*(undefined4 *)(temp + 0x44) & 0x1f);\n    ulong_value = (ulong)(type_code & *(uint *)(temp + 0x40));\n    byte_value = (byte)*(undefined4 *)(temp + 0x3c);\n    type_code_1 = (type_code_1 ^ type_code) & *(uint *)(temp + 0x38) ^ type_code_1;\n    if (ulong_value == 1L << (byte_value & 0x3f)) {\n      result = parse_coff_type_0010dac0(coff_data,header_data,symbol_table,param_4,type_code_1,type_info,param_7,param_8);\n      temp = FUN_00113d3a(result);\n      return temp;\n    }\n    if (ulong_value != 2L << (byte_value & 0x3f)) {\n      if (ulong_value != 3L << (byte_value & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(temp + 0x3c),\n                          type_code_1);\n        FUN_00119ed0(result,type_code);\n        return 0;\n      }\n      ushort_value = 0;\n      if (type_info != (long *)0x0) {\n        ushort_value = (uint)*(ushort *)(type_info + 2);\n        ptr = type_info + 2;\n        for (int_value = 0; (*(short *)ptr != 0 && (int_value != 3)); int_value = int_value + 1) {\n          *(short *)ptr = *(short *)((long)ptr + 2);\n          ptr = (long *)((long)ptr + 2);\n        }\n        *(short *)ptr = 0;\n      }\n      uVar15 = 0;\n      result = param_8;\n      new_result = parse_coff_type_0010dac0(coff_data,header_data,symbol_table,param_4,type_code_1,type_info,0);\n      temp = *(long *)(symbol_table + 0x28);\n      if (temp == 0) {\n        result = FUN_00113dfe(4,0,uVar15,result);\n        temp = FUN_0010c218(param_8,\"int\",result);\n        *(long *)(symbol_table + 0x28) = temp;\n      }\n      temp = FUN_00113c43(new_result,temp,0,(long)(int)(ushort_value - 1),0);\n      return temp;\n    }\n    result = parse_coff_type_0010dac0(coff_data,header_data,symbol_table,param_4,type_code_1,type_info,param_7,param_8);\n    temp = FUN_00113ce0(result,0,0);\n    return temp;\n  }\n  if ((type_info != (long *)0x0) && (0 < *type_info)) {\n    ptr = (long *)FUN_0010da0b(symbol_table);\n    if (*ptr != 0) {\n      return *ptr;\n    }\n    temp = FUN_00113e23(ptr,0);\n    return temp;\n  }\n  if (param_7 == '\\0') {\n    type_info = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    temp = FUN_00113e17();\n    return temp;\n  }\n  temp = *(long *)(symbol_table + 8 + (long)(int)type_code * 8);\n  if (temp != 0) {\n    return temp;\n  }\n  switch(type_code) {\n  default:\n    result = FUN_00113e17();\n    str_value = \"void\";\n    break;\n  case 2:\n    result = FUN_00113dfe(1,0);\n    str_value = \"char\";\n    break;\n  case 3:\n    result = FUN_00113dfe(2,0);\n    str_value = \"short\";\n    break;\n  case 4:\n    result = FUN_00113dfe(4,0);\n    str_value = \"int\";\n    break;\n  case 5:\n    result = FUN_00113dfe(4,0);\n    str_value = \"long\";\n    break;\n  case 6:\n    result = FUN_00113df2(4);\n    str_value = \"float\";\n    break;\n  case 7:\n    result = FUN_00113df2(8);\n    str_value = \"double\";\n    break;\n  case 8:\n    if (type_info == (long *)0x0) {\n      temp = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_info == (long *)0x0) {\n      temp = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    temp = FUN_0010e07c(coff_data,header_data,symbol_table,result,type_info,param_8);\nLAB_0010e046:\n    ptr = (long *)FUN_0010da0b(symbol_table,param_4);\n    *ptr = temp;\n    return temp;\n  case 10:\n    if (type_info == (long *)0x0) {\n      temp = FUN_00113d6e(0,0);\n    }\n    else {\n      temp = type_info[3];\n      ptr_1 = (void *)xmalloc(0x50);\n      ptr_2 = (void *)xmalloc(0x50);\n      loop_var = 0;\n      do {\n        while( true ) {\n          if ((temp <= header_data[3]) || (header_data[1] <= header_data[2])) goto LAB_0010e032;\n          int_value = (int)loop_var;\n          length = *(long *)(*header_data + header_data[2] * 8);\n          flag = bfd_coff_get_syment(coff_data,length,local_array);\n          loop_var = (long)int_value;\n          if (flag == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            new_result = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(new_result,result);\n            free(ptr_1);\n            free(ptr_2);\n            temp = 0;\n            goto LAB_0010e046;\n          }\n          header_data[2] = header_data[2] + 1;\n          header_data[3] = (ulong)local_byte + 1 + header_data[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= int_value + 1) {\n            type_code = type_code + 10;\n            ptr_1 = (void *)xrealloc(ptr_1);\n            ptr_2 = (void *)xrealloc(ptr_2,(long)(int)type_code << 3);\n          }\n          loop_var = *(long *)(length + 0x20);\n          *(undefined8 *)((long)ptr_1 + (long)int_value * 8) = *(undefined8 *)(length + 8);\n          *(long *)((long)ptr_2 + (long)int_value * 8) =\n               *(long *)(length + 0x10) + *(long *)(loop_var + 0x30);\n          loop_var = (long)(int_value + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr_1 + loop_var * 8) = 0;\n      temp = FUN_00113d6e(ptr_1,ptr_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    temp = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = FUN_00113dfe(1,1);\n    str_value = \"unsigned char\";\n    break;\n  case 0xd:\n    result = FUN_00113dfe(2,1);\n    str_value = \"unsigned short\";\n    break;\n  case 0xe:\n    result = FUN_00113dfe(4,1);\n    str_value = \"unsigned int\";\n    break;\n  case 0xf:\n    result = FUN_00113dfe(4,1);\n    str_value = \"unsigned long\";\n    break;\n  case 0x10:\n    result = FUN_00113df2(0xc);\n    str_value = \"long double\";\n  }\n  temp = FUN_0010c218(param_8,str_value,result);\nLAB_0010e065:\n  *(long *)(symbol_table + 8 + (long)(int)type_code * 8) = temp;\n  return temp;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c218",
                "xmalloc",
                "FUN_00119ed0",
                "xrealloc",
                "FUN_00113dfe",
                "FUN_00113e17",
                "bfd_errmsg",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_00113df2",
                "FUN_00113d6e",
                "FUN_00113da9",
                "bfd_get_error",
                "free",
                "FUN_00113ce0",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "extraout_var": "result",
                "iVar1": "comparisonResult",
                "auVar2": "output"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 result;\n  undefined output [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  output._1_7_ = (undefined7)(CONCAT44(result,comparisonResult) >> 8);\n  output[0] = comparisonResult == 0;\n  output._8_8_ = in_RAX;\n  return output;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "display_time_error_0010882c",
                "piVar1": "errorCodePtr",
                "uVar2": "errorText",
                "__errno_location": "getErrorCodeLocation",
                "strerror": "getErrorString",
                "dcgettext": "translateMessage"
            },
            "code": "\nvoid displayTimeError_0010882c(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorText;\n  \n  errorCodePtr = __errno_location();\n  strerror(*errorCodePtr);\n  errorText = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "display_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_and_send_message_0010ebb0",
                "param_1": "source",
                "param_2": "message",
                "param_3": "max_length",
                "param_4": "destination",
                "__s": "source_data",
                "uVar2": "length",
                "uVar3": "result",
                "sVar4": "message_length",
                "sVar5": "source_data_length",
                "__s_00": "formatted_message",
                "cVar1": "format_char"
            },
            "code": "\nundefined4 format_and_send_message_0010ebb0(undefined8 source,char *message,int max_length,undefined8 destination)\n\n{\n  char format_char;\n  uint length;\n  undefined4 result;\n  char *source_data;\n  size_t message_length;\n  size_t source_data_length;\n  char *formatted_message;\n  \n  source_data = (char *)FUN_00109b2f();\n  length = max_length - 1;\n  if (length < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)length * 4);\n    format_char = (&DAT_00121334)[length];\n    message_length = strlen(message);\n    source_data_length = strlen(source_data);\n    formatted_message = (char *)xmalloc(message_length + 3 + source_data_length);\n    sprintf(formatted_message,\"%s:%c%s\",message,(ulong)(uint)(int)format_char,source_data);\n    free(source_data);\n    result = FUN_0010e2f0(source,result,0,destination,formatted_message);\n    if ((char)result != '\\0') {\n      free(formatted_message);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_message_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_new_object_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "result",
                "plVar2": "newObject"
            },
            "code": "\nlong createNewObject_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long result;\n  long *newObject;\n  \n  if ((input1 != 0) && (result = FUN_00112904(0x13,0), result != 0)) {\n    newObject = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)newObject + 0x19) = 0;\n    *newObject = input1;\n    *(undefined4 *)((long)newObject + 0x1c) = 0;\n    newObject[1] = input2;\n    newObject[2] = input3;\n    *(undefined *)(newObject + 3) = input4;\n    *(long **)(result + 0x10) = newObject;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_new_object_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_value_00115d70",
                "param_1": "value",
                "param_2": "hashTable",
                "lVar1": "foundValue",
                "local_18": "currentValue",
                "local_10": "isValuePresent"
            },
            "code": "\nundefined checkValue_00115d70(undefined8 value,undefined8 hashTable)\n\n{\n  long foundValue;\n  undefined8 currentValue;\n  undefined isValuePresent;\n  \n  if (DAT_001279ea == '\\0') {\n    foundValue = htab_find(hashTable,value);\n    isValuePresent = foundValue != 0;\n  }\n  else {\n    isValuePresent = 0;\n    currentValue = value;\n    htab_traverse(hashTable,FUN_0011a170,&currentValue);\n  }\n  return isValuePresent;\n}\n\n",
            "called": [
                "htab_traverse",
                "htab_find",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_0010554f",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_value_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_append_00109be3",
                "param_1": "input",
                "param_2": "data",
                "param_3": "size",
                "uVar1": "reallocResult",
                "puVar2": "destination",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndAppend_00109be3(long input,undefined8 data,undefined4 size)\n\n{\n  undefined8 reallocResult;\n  undefined8 *destination;\n  uint currentSize;\n  \n  if (*(uint *)(input + 0x2c) <= *(uint *)(input + 0x28)) {\n    currentSize = *(uint *)(input + 0x2c) + 10;\n    *(uint *)(input + 0x2c) = currentSize;\n    reallocResult = xrealloc(*(undefined8 *)(input + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(input + 0x20) = reallocResult;\n  }\n  currentSize = *(uint *)(input + 0x28);\n  destination = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(input + 0x20));\n  *destination = data;\n  *(undefined4 *)(destination + 1) = size;\n  *(uint *)(input + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)destination >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "expand_and_append_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "destinationString"
            },
            "code": "\nvoid copyString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *destinationString;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  destinationString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)destinationString + stringLength) = 0;\n  memcpy(destinationString,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "xmalloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "generate_formatted_string_0010e918",
                "param_1": "data",
                "param_2": "inputString",
                "param_3": "value",
                "__s": "randomString",
                "sVar2": "inputStringLength",
                "sVar3": "randomStringLength",
                "__s_00": "formattedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 generateFormattedString_0010e918(undefined8 data,char *inputString,undefined8 value)\n\n{\n  undefined4 result;\n  char *randomString;\n  size_t inputStringLength;\n  size_t randomStringLength;\n  char *formattedString;\n  \n  randomString = (char *)FUN_00109b2f();\n  inputStringLength = strlen(inputString);\n  randomStringLength = strlen(randomString);\n  formattedString = (char *)xmalloc(inputStringLength + 0x14 + randomStringLength);\n  sprintf(formattedString,\"%s:c=e%s,%ld\",inputString,randomString,value);\n  free(randomString);\n  result = FUN_0010e2f0(data,0x80,0,0,formattedString);\n  if ((char)result != '\\0') {\n    free(formattedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0010a424",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "param_1": "bfd_handle",
                "param_2": "section_data",
                "param_3": "output_section",
                "uVar1": "temp_byte",
                "uVar2": "temp_value",
                "lVar3": "section_offset",
                "iVar4": "reverse_count",
                "iVar5": "remainder",
                "cVar6": "error_flag",
                "uVar7": "error_msg",
                "__ptr": "new_section_data",
                "lVar8": "copy_offset",
                "uVar9": "copy_count",
                "iVar10": "byte_count",
                "uVar11": "start_offset",
                "puVar12": "swap_ptr",
                "lVar13": "copy_remainder",
                "puVar14": "copy_ptr",
                "puVar15": "copy_ptr2",
                "pvVar16": "output_ptr",
                "uVar17": "copy_offset2",
                "uVar18": "alignment",
                "uVar19": "loop_index",
                "bVar20": "alignment_flag",
                "local_38": "section_size",
                "local_30": "section_content"
            },
            "code": "\nvoid reverseSection_00116110(undefined8 bfd_handle,undefined8 *section_data,undefined8 output_section)\n\n{\n  undefined temp_byte;\n  undefined8 temp_value;\n  long section_offset;\n  int reverse_count;\n  int remainder;\n  char error_flag;\n  undefined8 error_msg;\n  undefined8 *new_section_data;\n  long copy_offset;\n  ulong copy_count;\n  int byte_count;\n  ulong start_offset;\n  undefined *swap_ptr;\n  long copy_remainder;\n  undefined8 *copy_ptr;\n  undefined8 *copy_ptr2;\n  void *output_ptr;\n  ulong copy_offset2;\n  ulong alignment;\n  ulong loop_index;\n  byte alignment_flag;\n  ulong section_size;\n  void *section_content;\n  \n  alignment_flag = 0;\n  error_flag = FUN_00115f50(bfd_handle,section_data,1);\n  if (error_flag != '\\0') {\n    return;\n  }\n  section_size = section_data[8];\n  section_offset = section_data[0xc];\n  if (((*(byte *)((long)section_data + 0x25) & 1) == 0) || ((*(byte *)(section_offset + 0x25) & 1) == 0)) {\n    copy_remainder = FUN_00114190(*section_data,0,0x80);\n    if (copy_remainder == 0) {\n      return;\n    }\n    if ((*(byte *)(copy_remainder + 0x29) & 1) == 0) {\n      return;\n    }\n    new_section_data = (undefined8 *)xmalloc(section_size);\n    copy_ptr2 = new_section_data;\n    if (7 < section_size) {\n      for (alignment = section_size >> 3; alignment != 0; alignment = alignment - 1) {\n        *copy_ptr2 = 0;\n        copy_ptr2 = copy_ptr2 + (ulong)alignment_flag * -2 + 1;\n      }\n    }\n    copy_ptr = copy_ptr2;\n    if ((section_size & 4) != 0) {\n      copy_ptr = (undefined8 *)((long)copy_ptr2 + (ulong)alignment_flag * -8 + 4);\n      *(undefined4 *)copy_ptr2 = 0;\n    }\n    copy_ptr2 = copy_ptr;\n    if ((section_size & 2) != 0) {\n      copy_ptr2 = (undefined8 *)((long)copy_ptr + (ulong)alignment_flag * -4 + 2);\n      *(undefined2 *)copy_ptr = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)copy_ptr2 = 0;\n    }\n    error_flag = bfd_set_section_contents(output_section,section_offset,new_section_data,0);\n    if (error_flag != '\\0') {\n      free(new_section_data);\n      return;\n    }\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,output_section,section_offset,0);\n    free(new_section_data);\n    return;\n  }\n  section_content = (void *)0x0;\n  error_flag = bfd_get_full_section_contents(bfd_handle,section_data,&section_content);\n  if ((error_flag == '\\0') ||\n     (error_flag = bfd_convert_section_contents(bfd_handle,section_data,output_section,&section_content,&section_size),\n     byte_count = DAT_00127908, error_flag == '\\0')) {\n    bfd_set_section_size(section_offset,0);\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,bfd_handle,section_data,0);\n    free(section_content);\n    return;\n  }\n  reverse_count = DAT_001264b8;\n  remainder = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    alignment = (ulong)DAT_00127908;\n    if (section_size % alignment != 0) {\n      temp_value = *section_data;\n      error_msg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(error_msg,temp_value,byte_count);\n    }\n    byte_count = DAT_00127908 / 2;\n    start_offset = 0;\n    while (loop_index = start_offset, reverse_count = DAT_001264b8, remainder = DAT_001264bc, loop_index < section_size) {\n      start_offset = alignment + loop_index;\n      copy_offset2 = start_offset;\n      for (copy_count = 0; copy_count < (ulong)(long)byte_count; copy_count = copy_count + 1) {\n        copy_offset2 = copy_offset2 - 1;\n        swap_ptr = (undefined *)(loop_index + copy_count + (long)section_content);\n        temp_byte = *swap_ptr;\n        *swap_ptr = *(undefined *)((long)section_content + copy_offset2);\n        *(undefined *)((long)section_content + copy_offset2) = temp_byte;\n      }\n    }\n  }\n  DAT_001264b8 = reverse_count;\n  DAT_001264bc = remainder;\n  if (-1 < remainder) {\n    alignment = (ulong)DAT_00127a3c;\n    byte_count = (int)((ulong)section_data[7] % alignment);\n    start_offset = ((long)remainder - (long)byte_count) + (long)section_content;\n    if (remainder < byte_count) {\n      start_offset = start_offset + alignment;\n    }\n    copy_remainder = (section_size + (long)section_content) - start_offset;\n    output_ptr = section_content;\n    for (; start_offset < section_size + (long)section_content; start_offset = start_offset + alignment) {\n      for (copy_offset = 0; ((int)copy_offset < reverse_count && (copy_offset != copy_remainder)); copy_offset = copy_offset + 1) {\n        *(undefined *)((long)output_ptr + copy_offset) = *(undefined *)(start_offset + copy_offset);\n      }\n      output_ptr = (void *)((long)output_ptr + copy_offset);\n      copy_remainder = copy_remainder - alignment;\n    }\n    section_size = ((((alignment - 1) + section_size) - (long)remainder) / alignment) * (long)reverse_count;\n    alignment = *(ulong *)(section_offset + 0x38) / alignment;\n    *(ulong *)(section_offset + 0x38) = alignment;\n    if (remainder < byte_count) {\n      *(ulong *)(section_offset + 0x38) = alignment + 1;\n      error_flag = bfd_set_section_contents(output_section,section_offset,section_content,0,section_size);\n      if (error_flag == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  error_flag = bfd_set_section_contents(output_section,section_offset,section_content,0,section_size);\n  if (error_flag == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_content);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00115f50",
                "xmalloc",
                "free",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_001083de",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream",
                "fprintf": "printFormatted",
                "fflush": "flushStream"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(stdoutStream);\n  if (errorFlag != 0) {\n    fprintf(stderrStream,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(stderrStream,\"%s: %s\\n\",DAT_00127600,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "close_debug_block_0010bf20",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] closeDebugBlock_0010bf20(long param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if ((*(long *)(param1 + 8) == 0) || (currentBlock = *(long *)(param1 + 0x20), currentBlock == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = param2;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(param1 + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "close_debug_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "decompiled_function_0010c95e",
                "param_1": "paramArray",
                "param_2": "byteArrayPointer",
                "param_3": "longArrayPointer",
                "bVar1": "byteVar1",
                "bVar2": "byteVar2",
                "pbVar3": "bytePointer",
                "bVar4": "boolVar1",
                "bVar5": "boolVar2",
                "bVar6": "boolVar3",
                "cVar7": "charVar1",
                "uVar8": "uintVar1",
                "pbVar9": "bytePointer2",
                "lVar10": "longVar1",
                "uVar11": "undefinedVar1",
                "pcVar12": "charPointer1",
                "sVar13": "sizeVar1",
                "uVar14": "ulongVar1",
                "__ptr": "ptrVar1",
                "lVar15": "longVar2",
                "puVar16": "ulongPointer",
                "puVar17": "undefinedPointer",
                "ppcVar18": "charPointerPointer",
                "pcVar19": "charPointer2",
                "local_49": "undefinedVar2",
                "local_48": "ulongVar2",
                "local_40": "charArray"
            },
            "code": "\nundefined8 decompiledFunction_0010c95e(undefined8 *paramArray,byte **byteArrayPointer,long *longArrayPointer)\n\n{\n  byte byteVar1;\n  byte byteVar2;\n  byte *bytePointer;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  char charVar1;\n  uint uintVar1;\n  byte *bytePointer2;\n  long longVar1;\n  undefined8 undefinedVar1;\n  char *charPointer1;\n  size_t sizeVar1;\n  ulong ulongVar1;\n  void *ptrVar1;\n  long longVar2;\n  ulong *ulongPointer;\n  undefined *undefinedPointer;\n  char **charPointerPointer;\n  char *charPointer2;\n  byte *pbyteVar20;\n  undefined undefinedVar2;\n  ulong ulongVar2;\n  char *charArray [2];\n  \n  while( true ) {\n    pbyteVar20 = *byteArrayPointer;\n    byteVar1 = *pbyteVar20;\n    if ('T' < (char)byteVar1) break;\n    if ((char)byteVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byteVar1) {\n    case 0x41:\n      longVar2 = 0;\n      bytePointer = pbyteVar20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byteArrayPointer = pbyteVar20 + 1;\n      charVar1 = decompiledFunction_0010c95e(paramArray,byteArrayPointer,longArrayPointer);\n      if (charVar1 == '\\0') {\n        return 0;\n      }\n      if (longArrayPointer == (long *)0x0) {\n        return 1;\n      }\n      longVar2 = FUN_00113b71(*longArrayPointer);\n      *longArrayPointer = longVar2;\n      return 1;\n    case 0x46:\n      *byteArrayPointer = pbyteVar20 + 1;\n      if (longArrayPointer == (long *)0x0) {\n        ulongPointer = (ulong *)0x0;\n        charPointerPointer = (char **)0x0;\n      }\n      else {\n        ulongPointer = &ulongVar2;\n        charPointerPointer = charArray;\n      }\n      charVar1 = FUN_0010d882(paramArray,byteArrayPointer,charPointerPointer,ulongPointer);\n      if (charVar1 == '\\0') {\n        return 0;\n      }\n      if (**byteArrayPointer == 0x5f) {\n        *byteArrayPointer = *byteArrayPointer + 1;\n        charVar1 = decompiledFunction_0010c95e(paramArray,byteArrayPointer,longArrayPointer);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        if (longArrayPointer == (long *)0x0) {\n          return 1;\n        }\n        longVar2 = FUN_00113ce0(*longArrayPointer,charArray[0],ulongVar2 & 0xff);\n        *longArrayPointer = longVar2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byteArrayPointer = pbyteVar20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefinedVar2 = 0;\n      charArray[0] = (char *)0x0;\n      ulongVar2 = 0;\n      *byteArrayPointer = pbyteVar20 + 1;\n      if (((&_sch_istable)[(ulong)pbyteVar20[1] * 2] & 4) == 0) {\n        if (pbyteVar20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        charPointerPointer = charArray;\n        if (longArrayPointer == (long *)0x0) {\n          charPointerPointer = (char **)0x0;\n        }\n        charVar1 = FUN_0010d559(paramArray,byteArrayPointer,charPointerPointer);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uintVar1 = FUN_00108e76(byteArrayPointer);\n        bytePointer = *byteArrayPointer;\n        sizeVar1 = strlen((char *)bytePointer);\n        if (sizeVar1 < uintVar1) goto switchD_0010cdf9_caseD_60;\n        *byteArrayPointer = bytePointer + uintVar1;\n        if ((longArrayPointer != (long *)0x0) &&\n           (charArray[0] = (char *)FUN_0010afd5(*paramArray,paramArray[1],bytePointer,uintVar1,9),\n           charArray[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byteVar2 = **byteArrayPointer;\n      if (byteVar1 == 0x4d) {\n        if ((byteVar2 == 0x43) || (byteVar2 == 0x56)) {\n          *byteArrayPointer = *byteArrayPointer + 1;\n        }\n        if (**byteArrayPointer != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byteArrayPointer = *byteArrayPointer + 1;\n        if (longArrayPointer == (long *)0x0) {\n          undefinedPointer = (undefined *)0x0;\n          ulongPointer = (ulong *)0x0;\n        }\n        else {\n          undefinedPointer = &undefinedVar2;\n          ulongPointer = &ulongVar2;\n        }\n        charVar1 = FUN_0010d882(paramArray,byteArrayPointer,ulongPointer,undefinedPointer);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n      }\n      if (**byteArrayPointer == 0x5f) {\n        *byteArrayPointer = *byteArrayPointer + 1;\n        charVar1 = decompiledFunction_0010c95e(paramArray,byteArrayPointer,longArrayPointer);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        if (longArrayPointer == (long *)0x0) {\n          return 1;\n        }\n        if (byteVar1 != 0x4d) {\n          longVar2 = FUN_00113bfa(charArray[0],*longArrayPointer);\n          *longArrayPointer = longVar2;\n          return 1;\n        }\n        longVar2 = FUN_00113b98(*longArrayPointer,charArray[0],ulongVar2,undefinedVar2);\n        *longArrayPointer = longVar2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      undefinedVar1 = FUN_0010d559(paramArray,byteArrayPointer,longArrayPointer);\n      return undefinedVar1;\n    case 0x52:\n      *byteArrayPointer = pbyteVar20 + 1;\n      charVar1 = decompiledFunction_0010c95e(paramArray,byteArrayPointer,longArrayPointer);\n      if (charVar1 == '\\0') {\n        return 0;\n      }\n      if (longArrayPointer == (long *)0x0) {\n        return 1;\n      }\n      longVar2 = FUN_00113cb9(*longArrayPointer);\n      *longArrayPointer = longVar2;\n      return 1;\n    case 0x54:\n      *byteArrayPointer = pbyteVar20 + 1;\n      charVar1 = FUN_00108ea1(byteArrayPointer,&ulongVar2);\n      if (charVar1 != '\\0') {\n        if ((uint)ulongVar2 < *(uint *)(paramArray + 5)) {\n          charArray[0] = *(char **)((ulongVar2 & 0xffffffff) * 0x10 + paramArray[4]);\n          charVar1 = decompiledFunction_0010c95e(paramArray,charArray,longArrayPointer);\n          if (charVar1 == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byteVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byteArrayPointer = pbyteVar20 + 1;\n    charVar1 = decompiledFunction_0010c95e(paramArray,byteArrayPointer,longArrayPointer);\n    if (charVar1 == '\\0') {\n      return 0;\n    }\n    if (longArrayPointer == (long *)0x0) {\n      return 1;\n    }\n    longVar2 = FUN_00113d3a(*longArrayPointer);\n    *longArrayPointer = longVar2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  boolVar3 = false;\n  boolVar1 = false;\n  charVar1 = '\\0';\n  boolVar2 = false;\n  do {\n    bytePointer = *byteArrayPointer;\n    byteVar1 = *bytePointer;\n    if (byteVar1 == 0x55) {\n      charVar1 = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byteVar1) {\n      if (byteVar1 == 0x56) {\n        boolVar3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byteVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)byteVar1 < '_') goto LAB_0010cdfb;\n      switch(byteVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (longArrayPointer == (long *)0x0) {\nLAB_0010d0aa:\n          *byteArrayPointer = bytePointer + 1;\n          return 1;\n        }\n        longVar2 = FUN_0010914e(*paramArray,&DAT_00120436);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00112904(6,4);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        charPointer2 = \"unsigned char\";\n        if ((charVar1 == '\\0') && (charPointer2 = \"char\", boolVar1)) {\n          charPointer2 = \"signed char\";\n        }\n        longVar2 = FUN_0010914e(*paramArray,charPointer2);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113dfe(1,charVar1);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        charPointer2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        longVar2 = FUN_0010914e(*paramArray,\"float\");\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113df2(4);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        charPointer2 = \"unsigned int\";\n        charPointer1 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        charPointer2 = \"long unsigned int\";\n        charPointer1 = \"long int\";\nLAB_0010ced2:\n        if (charVar1 == '\\0') {\n          charPointer2 = charPointer1;\n        }\n        longVar2 = FUN_0010914e(*paramArray,charPointer2);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113dfe(4,charVar1);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        charPointer2 = \"long double\";\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        longVar2 = FUN_0010914e(*paramArray,charPointer2);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113df2(8);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        charPointer2 = \"short unsigned int\";\n        if (charVar1 == '\\0') {\n          charPointer2 = \"short int\";\n        }\n        longVar2 = FUN_0010914e(*paramArray,charPointer2);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113dfe(2,charVar1);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        charPointerPointer = charArray;\n        if (longArrayPointer == (long *)0x0) {\n          charPointerPointer = (char **)0x0;\n        }\n        charVar1 = FUN_0010d21c(paramArray,byteArrayPointer,charPointerPointer);\n        if (charVar1 == '\\0') {\n          return 0;\n        }\n        if (longArrayPointer == (long *)0x0) {\n          return 1;\n        }\n        sizeVar1 = strlen(charArray[0]);\n        longVar2 = FUN_0010afd5(*paramArray,paramArray[1],charArray[0],sizeVar1 & 0xffffffff,9);\n        *longArrayPointer = longVar2;\n        free(charArray[0]);\n        longVar2 = *longArrayPointer;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        longVar2 = FUN_0010914e(*paramArray,&DAT_00120495);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113e17();\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        longVar2 = FUN_0010914e(*paramArray,\"__wchar_t\");\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113dfe(2,1);\n          *longArrayPointer = longVar2;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (longArrayPointer == (long *)0x0) goto LAB_0010d0aa;\n        charPointer2 = \"long long unsigned int\";\n        if (charVar1 == '\\0') {\n          charPointer2 = \"long long int\";\n        }\n        longVar2 = FUN_0010914e(*paramArray,charPointer2);\n        *longArrayPointer = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = FUN_00113dfe(8,charVar1);\n          *longArrayPointer = longVar2;\n        }\n      }\n      *byteArrayPointer = *byteArrayPointer + 1;\n      goto LAB_0010d1de;\n    }\n    if (byteVar1 == 0x43) {\n      boolVar2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byteVar1 != 0x53) goto LAB_0010cdc5;\n    boolVar1 = true;\nLAB_0010cd84:\n    *byteArrayPointer = bytePointer + 1;\n  } while( true );\nLAB_0010ca26:\n  bytePointer2 = bytePointer + 1;\n  *byteArrayPointer = bytePointer2;\n  byteVar1 = *bytePointer2;\n  if (byteVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (byteVar1 == 0x5f) {\n    *byteArrayPointer = bytePointer + 2;\n    charVar1 = decompiledFunction_0010c95e(paramArray,byteArrayPointer,longArrayPointer);\n    if (charVar1 == '\\0') {\n      return 0;\n    }\n    if (longArrayPointer == (long *)0x0) {\n      return 1;\n    }\n    longVar1 = FUN_0010914e(*paramArray,\"int\");\n    if (longVar1 == 0) {\n      longVar1 = FUN_00113dfe(4,0);\n    }\n    longVar2 = FUN_00113c43(*longArrayPointer,longVar1,0,longVar2,0);\n    *longArrayPointer = longVar2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byteVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  longVar2 = longVar2 * 10 + (long)((char)byteVar1 + -0x30);\n  bytePointer = bytePointer2;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byteVar1 < ':') {\n    if ((char)byteVar1 < '0') {\n      if (byteVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(pbyteVar20);\n      if (longArrayPointer == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byteVar1 != 0x47) || (*byteArrayPointer = bytePointer + 1, ((&_sch_istable)[(ulong)bytePointer[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbyteVar20 = *byteArrayPointer;\n  uintVar1 = FUN_00108e76(byteArrayPointer);\n  bytePointer = *byteArrayPointer;\n  sizeVar1 = strlen((char *)bytePointer);\n  ulongVar1 = (ulong)uintVar1;\n  if (ulongVar1 <= sizeVar1) {\n    *byteArrayPointer = bytePointer + ulongVar1;\n    if (longArrayPointer == (long *)0x0) {\n      return 1;\n    }\n    ptrVar1 = (void *)FUN_00109a0b(bytePointer,ulongVar1);\n    longVar2 = FUN_0010914e(*paramArray,ptrVar1);\n    *longArrayPointer = longVar2;\n    free(ptrVar1);\n    if (*longArrayPointer == 0) {\n      longVar2 = FUN_0010afd5(*paramArray,paramArray[1],bytePointer,(int)*byteArrayPointer - (int)bytePointer,0);\n      *longArrayPointer = longVar2;\njoined_r0x0010d1d8:\n      if (longVar2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (boolVar2) {\n      longVar2 = FUN_00113b71(*longArrayPointer);\n      *longArrayPointer = longVar2;\n    }\n    if (boolVar3) {\n      longVar2 = FUN_00113b4a(*longArrayPointer);\n      *longArrayPointer = longVar2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(pbyteVar20);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010d21c",
                "FUN_00113dfe",
                "FUN_00108e76",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00113c43",
                "strlen",
                "FUN_00113df2",
                "FUN_00113b4a",
                "free",
                "FUN_00112904",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010911f",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d21c",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "decompiled_function_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUN_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUN_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUN_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "dcgettext",
                "FUN_001163d0",
                "bfd_set_section_size",
                "fwrite",
                "strerror",
                "FUN_001126c0",
                "FUN_00105828",
                "bfd_get_full_section_contents",
                "bfd_set_format",
                "FUN_0010551d",
                "bfd_map_over_sections",
                "FUN_0010554f",
                "bfd_get_arch",
                "FUN_00114190",
                "FUN_00115f30",
                "xmalloc",
                "FUN_00119ed0",
                "FUN_00115530",
                "bfd_malloc_and_get_section",
                "bfd_get_section_by_name",
                "bfd_make_section_with_flags",
                "bfd_create_gnu_debuglink_section",
                "fopen",
                "free",
                "__errno_location",
                "fclose"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errorNumber = __errno_location();\n    errorMessage = strerror(*errorNumber);\n    translatedMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(translatedMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unused",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unused;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorDescription != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_00127600,errorDescription,errorMessage,unused);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_00127600,errorMessage,unused);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "param_3": "paramCount",
                "param_4": "paramArg",
                "param_5": "inputString",
                "lVar1": "tempVar1",
                "uVar2": "errorCode",
                "lVar3": "tempVar2",
                "uVar4": "errorString",
                "uVar5": "translatedString",
                "sVar6": "stringLength",
                "lVar7": "result",
                "local_44": "localVar1",
                "uStack_40": "stackVar1",
                "uStack_3f": "stackVar2",
                "uStack_3e": "stackVar3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *paramArray,undefined paramValue,int paramCount,undefined8 paramArg,char *inputString)\n\n{\n  long tempVar1;\n  undefined4 errorCode;\n  long tempVar2;\n  undefined8 errorString;\n  undefined8 translatedString;\n  size_t stringLength;\n  long result;\n  undefined4 localVar1;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined2 stackVar3;\n  undefined4 localVar2 [3];\n  \n  if (inputString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    tempVar2 = bfd_hash_lookup(paramArray + 7,inputString,1,1);\n    if (tempVar2 == 0) {\n      errorCode = bfd_get_error();\n      errorString = bfd_errmsg(errorCode);\n      translatedString = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(translatedString,errorString);\n      return 0;\n    }\n    result = *(long *)(tempVar2 + 0x20);\n    if (result == -1) {\n      result = paramArray[6];\n      tempVar1 = paramArray[5];\n      *(long *)(tempVar2 + 0x20) = result;\n      if (tempVar1 == 0) {\n        paramArray[4] = tempVar2;\n      }\n      else {\n        *(long *)(tempVar1 + 0x18) = tempVar2;\n      }\n      paramArray[5] = tempVar2;\n      stringLength = strlen(inputString);\n      paramArray[6] = result + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(result,&localVar1);\n  stackVar2 = 0;\n  stackVar1 = paramValue;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)paramCount,&stackVar3);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(paramArg,localVar2);\n  if ((ulong)paramArray[3] < paramArray[2] + 0xcU) {\n    paramArray[3] = paramArray[3] * 2;\n    result = xrealloc(paramArray[1]);\n    paramArray[1] = result;\n  }\n  result = paramArray[2];\n  tempVar2 = paramArray[1];\n  *(ulong *)(tempVar2 + result) = CONCAT26(stackVar3,CONCAT15(stackVar2,CONCAT14(stackVar1,localVar1)));\n  *(undefined4 *)(tempVar2 + 8 + result) = localVar2[0];\n  paramArray[2] = paramArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)result >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_error",
                "xrealloc",
                "FUN_00119ed0",
                "bfd_hash_lookup",
                "bfd_errmsg",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e453",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010ed2c",
                "FUN_0010e439",
                "FUN_0010e6a8",
                "FUN_0010e5db",
                "FUN_0010e918",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "errorMessage",
                "pcVar3": "commaPosition",
                "pcVar4": "nextSectionFlag",
                "sVar5": "flagLength",
                "iVar6": "sectionFlagLength",
                "uVar7": "parsedFlags",
                "auVar8": "sectionInfo"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 errorMessage;\n  char *commaPosition;\n  char *nextSectionFlag;\n  size_t flagLength;\n  int sectionFlagLength;\n  uint parsedFlags;\n  undefined sectionInfo [16];\n  \n  parsedFlags = 0;\n  do {\n    commaPosition = strchr(sectionFlags,0x2c);\n    if (commaPosition == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      sectionFlagLength = (int)flagLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaPosition + 1;\n      sectionFlagLength = (int)commaPosition - (int)sectionFlags;\n    }\n    flagLength = (size_t)sectionFlagLength;\n    result = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (result == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (result == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (result == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (result == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (result == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (result == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (result == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (result == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (result == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (result == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (result == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (result == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (result != 0) {\n                              commaPosition = (char *)xmalloc((long)(sectionFlagLength + 1));\n                              strncpy(commaPosition,sectionFlags,flagLength);\n                              commaPosition[flagLength] = '\\0';\n                              errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(errorMessage,commaPosition);\n                              errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(errorMessage,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  sectionInfo._4_4_ = 0;\n  sectionInfo._0_4_ = parsedFlags;\n  sectionInfo._8_8_ = param4;\n  return sectionInfo;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "param_1": "arguments",
                "uVar1": "totalLength",
                "ppcVar2": "archiveFilename",
                "sVar3": "archiveLength",
                "sVar4": "stringLength",
                "__s": "formattedString"
            },
            "code": "\nchar * getFormattedString_001125fa(char **arguments)\n\n{\n  ulong totalLength;\n  char **archiveFilename;\n  size_t archiveLength;\n  size_t stringLength;\n  char *formattedString;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archiveFilename = (char **)arguments[0x1d];\n  formattedString = *arguments;\n  if ((archiveFilename != (char **)0x0) && ((*(byte *)((long)archiveFilename + 0x49) & 0x10) == 0)) {\n    archiveLength = strlen(*archiveFilename);\n    stringLength = strlen(formattedString);\n    totalLength = archiveLength + 3 + stringLength;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    formattedString = DAT_00127a50;\n  }\n  return formattedString;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828",
                "FUN_00114e50",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "get_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined get_one_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "currentPtr",
                "puVar2": "nextPtr"
            },
            "code": "\nvoid clearMemory_00108863(void)\n\n{\n  undefined4 *currentPtr;\n  undefined4 *nextPtr;\n  \n  currentPtr = (undefined4 *)&DAT_00127740;\n  do {\n    nextPtr = currentPtr + 6;\n    free(*(void **)(currentPtr + 4));\n    *(undefined8 *)(currentPtr + 4) = 0;\n    currentPtr = nextPtr;\n  } while (nextPtr != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_source_00108f08",
                "param_2": "filename",
                "iVar1": "cmpResult",
                "uVar2": "result",
                "puVar3": "currentNode",
                "puVar4": "lastNode",
                "lVar5": "counter",
                "puVar6": "debugList",
                "pcVar7": "currentFilename",
                "puVar8": "newNode",
                "bVar9": "zeroByte"
            },
            "code": "\n\n\nundefined8 debugSource_00108f08(long param_1,char *filename)\n\n{\n  int cmpResult;\n  undefined8 result;\n  undefined8 *currentNode;\n  undefined8 *lastNode;\n  long counter;\n  undefined8 *debugList;\n  char *currentFilename;\n  undefined8 *newNode;\n  byte zeroByte;\n  \n  zeroByte = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  if (*(long *)(param_1 + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (currentNode = *(undefined8 **)(*(long *)(param_1 + 8) + 8); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      cmpResult = filename_cmp(currentNode[1],currentFilename);\n      if (cmpResult == 0) goto LAB_00108fad;\n    }\n    currentNode = (undefined8 *)xmalloc(0x18);\n    debugList = *(undefined8 **)(param_1 + 0x10);\n    newNode = currentNode;\n    for (counter = 6; counter != 0; counter = counter + -1) {\n      *(undefined4 *)newNode = 0;\n      newNode = (undefined8 *)((long)newNode + (ulong)zeroByte * -8 + 4);\n    }\n    currentNode[1] = currentFilename;\n    newNode = (undefined8 *)*debugList;\n    while (lastNode = newNode, lastNode != (undefined8 *)0x0) {\n      debugList = lastNode;\n      newNode = (undefined8 *)*lastNode;\n    }\n    *debugList = currentNode;\nLAB_00108fad:\n    *(undefined8 **)(param_1 + 0x10) = currentNode;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "cleanup_directory_00114b84",
                "param_9": "directory_path"
            },
            "code": "\nvoid cleanup_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "cleanup_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_filter_00114190",
                "param_1": "inputStr",
                "param_2": "isRecursive",
                "param_3": "flags",
                "uVar1": "flagResult",
                "plVar2": "filterStr",
                "pplVar3": "currentFilter",
                "iVar4": "comparisonResult",
                "uVar5": "errorMsg",
                "pplVar6": "nextFilter",
                "pplVar7": "filterList",
                "pplVar8": "nextFilterList"
            },
            "code": "\nlong ** processFilter_00114190(long *inputStr,char isRecursive,uint flags)\n\n{\n  uint flagResult;\n  long *filterStr;\n  long **currentFilter;\n  int comparisonResult;\n  undefined8 errorMsg;\n  long **nextFilter;\n  long **filterList;\n  long **nextFilterList;\n  \n  filterList = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (isRecursive == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (isRecursive == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      nextFilter = (long **)*filterList;\n      if (nextFilter == (long **)0x0) {\n        return (long **)0x0;\n      }\n      filterList = (long **)0x0;\n    }\n    else {\n      filterStr = DAT_00127900[1];\n      if (*(char *)filterStr == '!') {\n        comparisonResult = fnmatch((char *)((long)filterStr + 1),(char *)inputStr,0);\n        nextFilter = filterList;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)filterStr,(char *)inputStr,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      nextFilter = (long **)*filterList;\n      if (nextFilter == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)nextFilter + 0x14)) != 0) {\n      filterStr = nextFilter[1];\n      if (*(char *)filterStr == '!') {\n        comparisonResult = fnmatch((char *)((long)filterStr + 1),(char *)inputStr,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(nextFilter + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)filterStr,(char *)inputStr,0);\n        if ((filterList == (long **)0x0) && (comparisonResult == 0)) {\n          nextFilterList = (long **)*nextFilter;\n          filterList = nextFilter;\n          if (nextFilterList == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextFilterList = (long **)*nextFilter;\n    nextFilter = filterList;\n    if (nextFilterList != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_00127900[1],(char *)inputStr);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      flagResult = *(uint *)((long)filterList + 0x14);\n      if ((((flagResult & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flagResult & 2) != 0)))) {\n        errorMsg = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(errorMsg,inputStr);\n      }\n      if ((((flagResult & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        errorMsg = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(errorMsg,inputStr);\n      }\n      if ((((flagResult & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)filterList + 0x14) = flagResult | flags;\n        return filterList;\n      }\n      errorMsg = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(errorMsg,inputStr);\n    }\n    filterList = (long **)*filterList;\n    if (filterList == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)filterList[1],(char *)inputStr);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextFilterList = (long **)*filterList;\n    nextFilter = (long **)0x0;\n    if (nextFilterList == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      filterList = nextFilter;\n      if (isRecursive == '\\0') {\n        while (nextFilter = nextFilterList, currentFilter = filterList, nextFilterList = nextFilter,\n              (flags & *(uint *)((long)nextFilter + 0x14)) != 0) {\n          filterStr = nextFilter[1];\n          if (*(char *)filterStr == '!') {\n            comparisonResult = fnmatch((char *)((long)filterStr + 1),(char *)inputStr,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextFilterList = (long **)*nextFilter;\n            if ((long **)*nextFilter == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)filterStr,(char *)inputStr,0);\n            if ((filterList == (long **)0x0) && (comparisonResult == 0)) {\n              filterList = nextFilter;\n              nextFilterList = (long **)*nextFilter;\n              if ((long **)*nextFilter == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextFilterList = (long **)*nextFilter;\n              if ((long **)*nextFilter == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextFilterList[1],(char *)inputStr);\n        currentFilter = nextFilter;\n        filterList = nextFilterList;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      nextFilter = currentFilter;\n      nextFilterList = (long **)*nextFilterList;\n      filterList = nextFilter;\n    } while (nextFilterList != (long **)0x0);\nLAB_001142a1:\n    if (isRecursive != '\\0') {\nLAB_001142a9:\n      nextFilter = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(nextFilter + 3) = (undefined  [16])0x0;\n      *(undefined *)(nextFilter + 2) = 0;\n      *(uint *)((long)nextFilter + 0x14) = flags;\n      nextFilter[5] = (long *)0x0;\n      filterList = nextFilter;\n      *nextFilter = (long *)DAT_00127900;\n      DAT_00127900 = filterList;\n      nextFilter[1] = inputStr;\n      return nextFilter;\n    }\n  }\nLAB_00114212:\n  if (filterList == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(filterList + 2) = 1;\n  return filterList;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_00114c20"
            ],
            "imported": false,
            "current_name": "process_filter_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "reverse_and_improve_code_00116490",
                "param_1": "param1",
                "param_2": "numberOfNotes",
                "param_3": "noteData",
                "param_4": "noteDataSize",
                "uVar1": "result",
                "uVar2": "temp",
                "uVar3": "temp2",
                "bVar4": "isMatch",
                "puVar5": "tempPtr",
                "iVar6": "counter",
                "lVar7": "noteSize",
                "uVar8": "errorMessage",
                "in_RAX": "noteType",
                "uVar9": "temp3",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "__ptr": "memPtr",
                "uVar13": "temp7",
                "unaff_RBX": "remainingDataSize",
                "unaff_RBP": "noteName",
                "puVar14": "noteInfoPtr",
                "puVar15": "tempPtr2",
                "cVar16": "version",
                "puVar17": "tempPtr3",
                "puVar18": "tempPtr4",
                "in_R11": "noteDescriptionPtr",
                "unaff_R12": "noteListPtr",
                "puVar19": "currentNotePtr",
                "unaff_R13": "temp8",
                "__nmemb": "noteCount",
                "unaff_R14": "textPtr",
                "puVar20": "tempPtr5",
                "bVar21": "tempFlag",
                "iVar22": "tempCounter",
                "unaff_retaddr": "returnAddress",
                "param_7": "outDataSize",
                "param_8": "versionNoteMissing",
                "param_9": "fileOffset",
                "in_stack_00000020": "outputSize",
                "in_stack_00000028": "noteList",
                "in_stack_00000030": "outData",
                "in_stack_00000038": "excessData",
                "in_stack_00000040": "versionMissing",
                "in_stack_00000048": "textPointer"
            },
            "code": "\nulong reverseAndImproveCode_00116490(undefined8 param1,ulong numberOfNotes,ulong noteData,long noteDataSize)\n\n{\n  undefined8 result;\n  undefined8 temp;\n  ulong temp2;\n  bool isMatch;\n  ulong *tempPtr;\n  int counter;\n  long noteSize;\n  undefined8 errorMessage;\n  ulong noteType;\n  ulong temp3;\n  ulong temp4;\n  ulong temp5;\n  ulong temp6;\n  undefined *memPtr;\n  ulong temp7;\n  ulong remainingDataSize;\n  ulong noteName;\n  ulong *noteInfoPtr;\n  undefined *tempPtr2;\n  char version;\n  undefined *tempPtr3;\n  undefined *tempPtr4;\n  ulong noteDescriptionPtr;\n  ulong *noteListPtr;\n  ulong *currentNotePtr;\n  ulong temp8;\n  size_t noteCount;\n  undefined8 *textPtr;\n  ulong *tempPtr5;\n  byte tempFlag;\n  int tempCounter;\n  ulong returnAddress;\n  ulong outDataSize;\n  uint versionNoteMissing;\n  ulong fileOffset;\n  ulong outputSize;\n  ulong *noteList;\n  undefined *outData;\n  uint excessData;\n  uint versionMissing;\n  undefined8 *textPointer;\n  \n  tempFlag = 0;\ncode_r0x00116490:\n  noteSize = noteDataSize;\n  temp4 = noteName;\n  temp7 = temp8;\n  if (noteType == 0) {\n    if (numberOfNotes == 0x100) {\n      noteListPtr[7] = returnAddress;\n      temp5 = returnAddress;\nLAB_001164af:\n      temp3 = temp8;\n      temp7 = temp8;\n      returnAddress = temp5;\n    }\n    else {\n      noteListPtr[7] = fileOffset;\nLAB_0011669e:\n      temp4 = noteName;\n      temp3 = noteName;\n    }\nLAB_001164bb:\n    noteListPtr[8] = temp3;\n    if (*(char *)((noteListPtr[3] - 1) + noteData) != '\\0') {\n      noteSize = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    currentNotePtr = noteListPtr + 9;\n    if (0xb < remainingDataSize) {\n      temp3 = (**(code **)(textPtr[1] + 0x40))(noteSize);\n      *currentNotePtr = temp3;\n      temp3 = (**(code **)(textPtr[1] + 0x40))(noteSize + 4);\n      noteListPtr[10] = temp3;\n      numberOfNotes = (**(code **)(textPtr[1] + 0x40))(noteSize + 8);\n      noteData = *currentNotePtr;\n      noteListPtr[0xb] = numberOfNotes;\n      noteType = noteListPtr[10];\n      temp3 = noteData + 3 & 0xfffffffffffffffc;\n      noteListPtr[0xf] = temp3;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        noteSize = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < numberOfNotes - 0x100) {\n        noteSize = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp5 = temp3 + noteType + 0xc;\n      if (remainingDataSize < temp5) {\n        noteSize = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteData < 2) {\n        noteSize = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      noteListPtr[0xc] = noteSize + 0xc;\n      noteDescriptionPtr = noteSize + 0xc + temp3;\n      noteListPtr[0xd] = noteDescriptionPtr;\n      remainingDataSize = remainingDataSize + (-0xc - (temp3 + noteType));\n      noteDataSize = noteSize + temp5;\n      noteName = temp4;\n      noteListPtr = currentNotePtr;\n      temp8 = temp7;\n      if (noteData != 2) {\n        if (*(char *)(noteSize + 0xc) == '$') {\n          if ((*(char *)(noteSize + 0xd) == '\\x01') && (*(char *)(noteSize + 0xe) == '1')) {\n            temp4 = reverseAndImproveCode_00116490();\n            return temp4;\n          }\n        }\n        else if ((((4 < noteData) && (*(char *)(noteSize + 0xc) == 'G')) &&\n                 (*(char *)(noteSize + 0xd) == 'A')) &&\n                ((*(char *)(noteSize + 0xe) == '$' && (*(char *)(noteSize + 0xf) == '\\x01')))) {\n          if (*(char *)(noteSize + 0x10) == '2') {\n            temp4 = reverseAndImproveCode_00116490();\n            return temp4;\n          }\n          if (*(char *)(noteSize + 0x10) == '3') {\n            temp4 = reverseAndImproveCode_00116490();\n            return temp4;\n          }\n          noteSize = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remainingDataSize != 0) {\n      noteSize = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((excessData | versionMissing | versionNoteMissing) == 0) {\n      result = *textPtr;\n      temp = *textPointer;\n      errorMessage = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(errorMessage,result,temp);\nLAB_0011671b:\n      noteCount = ((long)currentNotePtr - (long)noteList >> 3) * -0x71c71c71c71c71c7;\n      qsort(noteList,noteCount,0x48,FUN_0011a1b0);\n      for (noteInfoPtr = noteList; noteInfoPtr < currentNotePtr; noteInfoPtr = noteInfoPtr + 9) {\n        temp4 = noteInfoPtr[2];\n        if (temp4 != 0) {\n          temp7 = noteInfoPtr[7];\n          temp3 = noteInfoPtr[8];\n          tempPtr5 = noteInfoPtr;\n          tempCounter = 0;\n          if (temp7 == temp3) {\n            noteInfoPtr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                tempPtr = tempPtr5;\n                tempPtr5 = tempPtr + -9;\n                if (tempPtr5 < noteList) goto LAB_001167f5;\n                temp5 = tempPtr[-7];\n              } while (temp5 == 0);\n              if ((*tempPtr5 != *noteInfoPtr) ||\n                 (counter = memcmp((void *)tempPtr[-6],(void *)noteInfoPtr[3],*noteInfoPtr), counter != 0))\n              break;\n              temp2 = tempPtr[-2];\n              temp6 = tempPtr[-1];\n              if (temp7 == temp2) {\n                if (temp3 == temp6) {\n                  noteInfoPtr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp3 <= temp6) {\n                  noteInfoPtr[2] = 0;\n                  break;\n                }\n                if (temp6 < temp7) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp6) ||\n                     (temp7 <= (temp6 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((temp4 == 0x101) == (temp5 == 0x101)) {\n                  if (temp6 <= temp3) {\n                    temp6 = temp3;\n                  }\n                  if (temp2 < temp7) {\n                    temp7 = temp2;\n                  }\n                  tempPtr[-1] = temp6;\n                  tempPtr[-2] = temp7;\n                  noteInfoPtr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (temp2 <= temp7) goto LAB_001167a6;\n                if (temp6 < temp7) goto LAB_0010852c;\n                if (temp3 < temp7) {\n                  if ((0xfffffffffffffff0 < temp3) || (temp2 <= (temp3 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp3 != temp6) goto LAB_001167b8;\n              }\nFUN_00116852:\n              isMatch = tempCounter < 0x11;\n              tempCounter = tempCounter + 1;\n            } while (isMatch);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(noteList,noteCount,0x48,FUN_0011a250);\n      memPtr = (undefined *)xmalloc(outputSize * 2);\n      outDataSize = 0;\n      fileOffset = 0;\n      tempPtr4 = memPtr;\n      for (noteInfoPtr = noteList; noteInfoPtr < currentNotePtr; noteInfoPtr = noteInfoPtr + 9) {\n        if (noteInfoPtr[2] != 0) {\n          tempPtr3 = tempPtr4 + 4;\n          tempPtr2 = tempPtr4 + 0xc;\n          if ((noteInfoPtr[7] == fileOffset) && (noteInfoPtr[8] == outDataSize)) {\n            (**(code **)(textPtr[1] + 0x50))(*noteInfoPtr,tempPtr4);\n            (**(code **)(textPtr[1] + 0x50))(0,tempPtr3);\n            (**(code **)(textPtr[1] + 0x50))(noteInfoPtr[2],tempPtr4 + 8);\n            temp7 = noteInfoPtr[6];\n            temp4 = *noteInfoPtr;\n            tempPtr4 = (undefined *)noteInfoPtr[3];\n            tempPtr3 = tempPtr2;\n            for (temp3 = temp4; temp3 != 0; temp3 = temp3 - 1) {\n              *tempPtr3 = *tempPtr4;\n              tempPtr4 = tempPtr4 + (ulong)tempFlag * -2 + 1;\n              tempPtr3 = tempPtr3 + (ulong)tempFlag * -2 + 1;\n            }\n            if (temp4 < temp7) {\n              for (noteSize = temp7 - temp4; noteSize != 0; noteSize = noteSize + -1) {\n                *tempPtr3 = 0;\n                tempPtr3 = tempPtr3 + (ulong)tempFlag * -2 + 1;\n              }\n            }\n            tempPtr4 = tempPtr2 + temp7;\n          }\n          else {\n            (**(code **)(textPtr[1] + 0x50))();\n            if (*(int *)(textPtr[1] + 8) == 5) {\n              version = (*(char *)(textPtr[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              version = '\\b';\n            }\n            (**(code **)(textPtr[1] + 0x50))(version,tempPtr3);\n            (**(code **)(textPtr[1] + 0x50))(noteInfoPtr[2],tempPtr4 + 8);\n            temp4 = *noteInfoPtr;\n            tempPtr4 = (undefined *)noteInfoPtr[3];\n            tempPtr3 = tempPtr2;\n            for (temp7 = temp4; temp7 != 0; temp7 = temp7 - 1) {\n              *tempPtr3 = *tempPtr4;\n              tempPtr4 = tempPtr4 + (ulong)tempFlag * -2 + 1;\n              tempPtr3 = tempPtr3 + (ulong)tempFlag * -2 + 1;\n            }\n            temp7 = noteInfoPtr[6];\n            if (temp4 < temp7) {\n              for (noteSize = temp7 - temp4; noteSize != 0; noteSize = noteSize + -1) {\n                *tempPtr3 = 0;\n                tempPtr3 = tempPtr3 + (ulong)tempFlag * -2 + 1;\n              }\n            }\n            noteSize = textPtr[1];\n            tempPtr2 = tempPtr2 + temp7;\n            tempPtr4 = tempPtr2 + 8;\n            if ((*(int *)(noteSize + 8) == 5) && (*(char *)(textPtr[0x22] + 4) == '\\x02')) {\n              (**(code **)(noteSize + 0x38))(noteInfoPtr[7],tempPtr2);\n              (**(code **)(textPtr[1] + 0x38))(noteInfoPtr[8],tempPtr4);\n              tempPtr4 = tempPtr2 + 0x10;\n            }\n            else {\n              (**(code **)(noteSize + 0x50))(noteInfoPtr[7],tempPtr2);\n              (**(code **)(textPtr[1] + 0x50))(noteInfoPtr[8],tempPtr2 + 4);\n            }\n            fileOffset = noteInfoPtr[7];\n            outDataSize = noteInfoPtr[8];\n          }\n        }\n      }\n      temp7 = (long)tempPtr4 - (long)memPtr;\n      temp4 = temp7;\n      tempPtr4 = memPtr;\n      if (temp7 < outputSize) {\n        for (; outputSize = temp7, temp4 != 0; temp4 = temp4 - 1) {\n          *outData = *tempPtr4;\n          tempPtr4 = tempPtr4 + (ulong)tempFlag * -2 + 1;\n          outData = outData + (ulong)tempFlag * -2 + 1;\n        }\n      }\n      free(memPtr);\nLAB_001166f8:\n      free(noteList);\n      return outputSize;\n    }\n    if (((versionMissing | versionNoteMissing) == 0) || (excessData == 0)) {\n      if (versionMissing == 0) {\n        if (versionNoteMissing != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (versionNoteMissing == 0) goto LAB_001166f8;\n    }\n    noteSize = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      temp5 = (**(code **)(textPtr[1] + 0x28))(noteDescriptionPtr);\n      temp3 = (**(code **)(textPtr[1] + 0x28))(noteListPtr[4] + 8);\n      if (temp3 < temp5) {\n        temp5 = temp3;\n      }\nLAB_00116631:\n      if (noteListPtr[2] == 0x100) {\n        if (temp5 == 0) {\n          temp5 = returnAddress;\n        }\n        noteData = *noteListPtr;\n        noteListPtr[7] = temp5;\n        temp7 = temp3;\n        returnAddress = temp5;\n        if (temp3 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp5 == 0) {\n          temp5 = fileOffset;\n        }\n        noteData = *noteListPtr;\n        noteListPtr[7] = temp5;\n        temp4 = temp3;\n        fileOffset = temp5;\n        if (temp3 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        temp5 = (**(code **)(textPtr[1] + 0x40))(noteDescriptionPtr);\n        temp3 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        temp4 = FUN_001086af();\n        return temp4;\n      }\n    }\n    noteSize = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (noteSize != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,textPtr,textPointer,noteSize);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_code_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    currentTarget = *ptr;\n    ptr = ptr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "function_info",
                "param_2": "new_param_1",
                "param_3": "new_param_2",
                "param_4": "result",
                "lVar1": "current_block",
                "uVar2": "error_msg",
                "pcVar3": "error_description",
                "auVar4": "return_value"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_info,undefined8 new_param_1,undefined8 new_param_2,undefined8 result)\n\n{\n  long current_block;\n  undefined8 error_msg;\n  char *error_description;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_info + 8) == 0) || (current_block = *(long *)(function_info + 0x20), current_block == 0)) ||\n     (*(long *)(function_info + 0x18) == 0)) {\n    error_description = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_param_1;\n      error_msg = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_info + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_description = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  error_msg = dcgettext(0,error_description,5);\n  fprintf(_stderr,\"%s\\n\",error_msg);\n  error_msg = 0;\nLAB_0010be86:\n  return_value._8_8_ = result;\n  return_value._0_8_ = error_msg;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "dataStructure",
                "lVar2": "count",
                "puVar3": "ptr",
                "bVar4": "temp",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeDataStructure_00113da9(byte offset,undefined8 arg1,undefined8 arg2,undefined8 arg3)\n\n{\n  undefined8 *dataStructure;\n  long count;\n  undefined8 *ptr;\n  byte temp;\n  undefined result [16];\n  \n  temp = 0;\n  result._0_8_ = FUN_00112904(8 - (uint)offset);\n  if (result._0_8_ != 0) {\n    dataStructure = (undefined8 *)xmalloc(0x28);\n    ptr = dataStructure + 1;\n    for (count = 8; count != 0; count = count + -1) {\n      *(undefined4 *)ptr = 0;\n      ptr = (undefined8 *)((long)ptr + (ulong)temp * -8 + 4);\n    }\n    *dataStructure = arg2;\n    *(undefined8 **)(result._0_8_ + 0x10) = dataStructure;\n  }\n  result._8_8_ = arg3;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record_1",
                "param_2": "record_2",
                "uVar1": "record_1_value"
            },
            "code": "\nint compare_records_0011a250(ulong *record_1,ulong *record_2)\n\n{\n  ulong record_1_value;\n  \n  record_1_value = record_1[2];\n  if (record_1_value == record_2[2]) {\n    if (record_2[7] <= record_1[7]) {\n      if (record_1[7] <= record_2[7]) {\n        if (record_2[8] < record_1[8]) {\n          return -1;\n        }\n        if (record_2[8] <= record_1[8]) {\n          if ((4 < *record_1) && (4 < *record_2)) {\n            if (*(char *)(record_1[3] + 3) != *(char *)(record_2[3] + 3)) {\n              return (int)*(char *)(record_1[3] + 3) - (int)*(char *)(record_2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record_1_value == 0) || ((record_1_value != 0x100 && (record_2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "param_3": "inputSize",
                "param_4": "isZero",
                "param_5": "intValue",
                "uVar1": "result",
                "lVar2": "length",
                "sVar3": "stringSize",
                "uVar4": "allocatedMemory",
                "uVar5": "hasValue",
                "local_60": "outputString"
            },
            "code": "\nundefined4 processData_0010a69a(long inputPointer,undefined8 inputValue,int inputSize,char isZero,uint intValue)\n\n{\n  undefined4 result;\n  long length;\n  size_t stringSize;\n  undefined8 allocatedMemory;\n  undefined hasValue;\n  char outputString [48];\n  \n  if (inputSize == 0) {\n    outputString[0] = '\\0';\n    hasValue = 0;\n    length = 0;\n  }\n  else {\n    length = FUN_00109c2e();\n    if (length < 0) {\n      return 0;\n    }\n    hasValue = 1;\n    sprintf(outputString,\"%ld=\",length);\n  }\n  stringSize = strlen(outputString);\n  sprintf(outputString + stringSize,\"%c%u\",(ulong)((-(uint)(isZero == '\\0') & 2) + 0x73),(ulong)intValue);\n  result = FUN_00109b52(inputPointer,outputString,length,hasValue,intValue);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  length = *(long *)(inputPointer + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(length + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(inputPointer + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "validate_section_00115b70",
                "param_1": "sections",
                "pcVar1": "currentSection",
                "iVar2": "sectionComparisonResult",
                "iVar3": "sectionType",
                "lVar4": "sectionMatch1",
                "lVar5": "sectionMatch2",
                "uVar6": "errorMessage",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 validateSection_00115b70(char **sections)\n\n{\n  char *currentSection;\n  int sectionComparisonResult;\n  int sectionType;\n  long sectionMatch1;\n  long sectionMatch2;\n  undefined8 errorMessage;\n  long *sectionList;\n  \n  sectionMatch1 = FUN_00114190(*sections,0,4);\n  if (sectionMatch1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      sectionMatch1 = FUN_00114190(*sections,0,1);\n      sectionMatch2 = FUN_00114190(*sections,0,2);\n      if (sectionMatch1 != 0) {\n        if (sectionMatch2 != 0) {\n          currentSection = *sections;\n          errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(errorMessage,currentSection);\n        }\n        if (sectionMatch1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *sections;\n          sectionList = DAT_001279d8;\n          do {\n            sectionType = strcmp(currentSection,(char *)sectionList[1]);\n            if (sectionType == 0) {\n              errorMessage = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(errorMessage,currentSection);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (sectionMatch2 == 0)) {\n        return 1;\n      }\n    }\n    sectionType = DAT_00127a48;\n    if ((*(byte *)((long)sections + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        currentSection = *sections;\n        sectionComparisonResult = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((sectionComparisonResult != 0) && (sectionComparisonResult = strcmp(currentSection,\".gnu_debuglink\"), sectionComparisonResult != 0)) {\n          sectionType = strcmp(currentSection,\".reloc\");\n          if (sectionType != 0) {\n            return 1;\n          }\n          errorMessage = FUN_0010829e();\n          return errorMessage;\n        }\n      }\n      if (sectionType == 5) {\n        errorMessage = FUN_00113ede(sections);\n        return errorMessage;\n      }\n      if (sectionType == 4) {\n        return 0;\n      }\n    }\n    if (sectionType == 6) {\n      errorMessage = FUN_001082b3();\n      return errorMessage;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_0010827b",
                "FUN_0010829e",
                "strcmp",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "validate_section_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_bfd_data_00116030",
                "param_1": "arguments",
                "param_2": "data_address",
                "plVar1": "reloc_ptr",
                "lVar2": "reloc_value",
                "lVar3": "lvar3_value",
                "lVar4": "lvar4_value",
                "iVar5": "bfd_error",
                "in_RAX": "return_value",
                "lVar6": "fwrite_address",
                "lVar7": "reloc_canon_result",
                "__ptr": "reloc_buffer",
                "lVar8": "reloc_loop_counter",
                "uStack_28": "stack_variable_28"
            },
            "code": "\n\n\nundefined8 process_bfd_data_00116030(undefined8 *arguments,long data_address)\n\n{\n  long *reloc_ptr;\n  long reloc_value;\n  long lvar3_value;\n  long lvar4_value;\n  int bfd_error;\n  undefined8 return_value;\n  long fwrite_address;\n  void *reloc_buffer;\n  long reloc_canon_result;\n  undefined8 extraout_RAX;\n  long reloc_loop_counter;\n  undefined8 stack_variable_28;\n  \n  if (*(long *)(data_address + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_address = bfd_get_reloc_upper_bound();\n  if (fwrite_address < 0) {\n    if ((fwrite_address != -1) || (bfd_error = bfd_get_error(), bfd_error != 5)) {\n      FUN_0011a110(*arguments);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_address != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_canon_result = bfd_canonicalize_reloc(arguments,data_address,reloc_buffer);\n    lvar4_value = _DAT_00128680;\n    lvar3_value = _DAT_00128568;\n    fwrite_address = _fwrite;\n    if (reloc_canon_result < 0) {\n      FUN_0011a110(*arguments);\n                    \n      xexit(1);\n    }\n    if (reloc_canon_result != 0) {\n      reloc_loop_counter = 0;\n      do {\n        reloc_ptr = **(long ***)((long)reloc_buffer + reloc_loop_counter * 8);\n        if ((((reloc_ptr != (long *)0x0) && (reloc_value = *reloc_ptr, reloc_value != 0)) && (reloc_value != fwrite_address)) &&\n           ((reloc_value != lvar4_value && (reloc_value != lvar3_value)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_loop_counter = reloc_loop_counter + 1;\n      } while (reloc_canon_result != reloc_loop_counter);\n    }\n    free(reloc_buffer);\n    return extraout_RAX;\n  }\n  return stack_variable_28;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a110",
                "FUN_001083b7",
                "free",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_bfd_data_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_and_reverse_string_00113ede",
                "param_1": "string_ptr",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "reversed_string"
            },
            "code": "\nundefined8 check_and_reverse_string_00113ede(char **string_ptr)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 reversed_string;\n  \n  if (string_ptr == (char **)0x0) {\n    return 0;\n  }\n  string = *string_ptr;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      reversed_string = FUN_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return reversed_string;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_and_reverse_string_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1_value",
                "lVar2": "record2_value",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long record1_value;\n  long record2_value;\n  int result;\n  uint flag;\n  \n  record1_value = *record1;\n  record2_value = *record2;\n  flag = *(uint *)(record2_value + 0x24) & 0x102;\n  if ((*(uint *)(record1_value + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1_value + 0x38) <= *(ulong *)(record2_value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2_value + 0x38) <= *(ulong *)(record1_value + 0x38)) {\n      if (*(ulong *)(record2_value + 0x40) < *(ulong *)(record1_value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2_value + 0x40) <= *(ulong *)(record1_value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1_value + 0x18) <= *(uint *)(record2_value + 0x18)) {\n            return -(uint)(*(uint *)(record1_value + 0x18) < *(uint *)(record2_value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "make_undefined_type_0010c892",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "isFlagSet",
                "lVar2": "result",
                "lVar3": "type",
                "uVar4": "returnValue",
                "puVar5": "currentNode",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 makeUndefinedType_0010c892(undefined8 param1,long param2)\n\n{\n  char isFlagSet;\n  long result;\n  long type;\n  undefined8 returnValue;\n  undefined8 *currentNode;\n  int kind;\n  \n  if (*(char *)(param2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (currentNode = *(undefined8 **)(param2 + 0x1a0); currentNode != (undefined8 *)0x0;\n        currentNode = (undefined8 *)*currentNode) {\n      kind = *(int *)(currentNode + 2);\n      type = currentNode[1];\n      if (kind != 0) {\n        if (type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        currentNode[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      result = FUN_00112904(kind,0);\n      if (result == 0) goto LAB_0010c910;\n      type = FUN_0010c6be(param1,type,result);\n      currentNode[3] = type;\n      if (type == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    isFlagSet = FUN_0010c1c6();\n    if (isFlagSet != '\\0') {\n      isFlagSet = FUN_0010be1a(param1,*(undefined8 *)(param2 + 0x68));\n      if (isFlagSet != '\\0') {\n        *(undefined *)(param2 + 0x60) = 0;\n        *(undefined8 *)(param2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112904",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "make_undefined_type_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "dynamicArray"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *dynamicArray;\n  \n  dynamicArray = (undefined4 *)xmalloc(0x18);\n  *dynamicArray = input1;\n  dynamicArray[1] = input2;\n  *(undefined (*) [16])(dynamicArray + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_00113bfa",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_0010c2d2",
                "FUN_00113b4a",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_00113b98",
                "FUN_00113cb9",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_00113d3a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparison_result",
                "in_RAX": "input_value",
                "auVar2": "comparison_result_array"
            },
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 input_value;\n  undefined comparison_result_array [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  comparison_result_array._1_7_ = 0;\n  comparison_result_array[0] = comparison_result == 0;\n  comparison_result_array._8_8_ = input_value;\n  return comparison_result_array;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00109a32",
                "FUN_0010882c",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010c7a0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_00115b70",
                "FUN_00108898",
                "FUN_0010914e",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_and_decrement_0011a390",
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "num",
                "plVar4": "function_list",
                "uVar5": "uVar"
            },
            "code": "\nvoid execute_and_decrement_0011a390(void)\n\n{\n  long index;\n  long prev_index;\n  long num;\n  long *function_list;\n  uint uVar;\n  \n  function_list = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      uVar = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)uVar) {\n        index = (long)(int)uVar;\n        uVar = uVar & 7;\n        (*(code *)function_list[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          num = prev_index;\n          if (uVar != 0) {\n            if (uVar != 1) {\n              if (uVar != 2) {\n                if (uVar != 3) {\n                  if (uVar != 4) {\n                    if (uVar != 5) {\n                      if (uVar != 6) {\n                        (*(code *)function_list[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(code *)function_list[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(code *)function_list[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(code *)function_list[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(code *)function_list[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(code *)function_list[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(code *)function_list[prev_index + 2])();\n            num = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)function_list[num + 2])();\n            index = num + -1;\n            (*(code *)function_list[num + 1])();\n            (*(code *)function_list[num])();\n            (*(code *)function_list[index])();\n            (*(code *)function_list[num + -2])();\n            (*(code *)function_list[num + -3])();\n            (*(code *)function_list[num + -4])();\n            (*(code *)function_list[num + -5])();\n            num = num + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_and_decrement_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_send_data_0010e842",
                "param_1": "input",
                "param_2": "string",
                "param_3": "number",
                "param_4": "data",
                "sVar1": "stringLength",
                "__s": "formattedString",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e842(undefined8 input,char *string,undefined8 number,undefined8 data)\n\n{\n  size_t stringLength;\n  char *formattedString;\n  undefined result [16];\n  \n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",string,number);\n  result._0_4_ = FUN_0010e2f0(input,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_data_00113cb9",
                "param_1": "inputValue",
                "lVar1": "dataPointer"
            },
            "code": "\nlong initializeData_00113cb9(long inputValue)\n\n{\n  long dataPointer;\n  \n  if (inputValue != 0) {\n    dataPointer = FUN_00112904(0xe,0);\n    if (dataPointer == 0) {\n      dataPointer = 0;\n    }\n    else {\n      *(long *)(dataPointer + 0x10) = inputValue;\n    }\n    return dataPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_data_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "send_message_0010eafe",
                "param_1": "message",
                "param_2": "recipient",
                "param_3": "flag",
                "__s": "prefix",
                "sVar2": "recipientLength",
                "sVar3": "prefixLength",
                "__s_00": "combinedMessage",
                "uVar1": "result"
            },
            "code": "\nundefined4 sendMessage_0010eafe(long message,char *recipient,char flag)\n\n{\n  undefined4 result;\n  char *prefix;\n  size_t recipientLength;\n  size_t prefixLength;\n  char *combinedMessage;\n  \n  if ((*(int *)(message + 0x1f8) == 0) && (*(long *)(message + 0x1e8) == -1)) {\n    prefix = (char *)FUN_00109b2f();\n    recipientLength = strlen(recipient);\n    prefixLength = strlen(prefix);\n    combinedMessage = (char *)xmalloc(recipientLength + 3 + prefixLength);\n    sprintf(combinedMessage,\"%s:%c%s\",recipient,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),prefix);\n    *(undefined8 *)(message + 0x1e8) = *(undefined8 *)(message + 0x10);\n    result = FUN_0010e2f0(message,0x24,0,0,combinedMessage);\n    if ((char)result != '\\0') {\n      free(combinedMessage);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_message_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_00113df2",
                "param_1": "data"
            },
            "code": "\nvoid initialize_00113df2(undefined4 data)\n\n{\n  FUN_00112904(4,data);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "param_1": "input",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "concatenatedString",
                "uVar2": "result",
                "uVar5": "flagValue"
            },
            "code": "\nundefined4 processData_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenatedString;\n  undefined flagValue;\n  \n  flagValue = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    flagValue = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)FUN_00109b2f(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  concatenatedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(concatenatedString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = FUN_00109b52(input,concatenatedString,0,flagValue,0);\n  if ((char)result != '\\0') {\n    free(concatenatedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_input_0010d882",
                "param_1": "inputPointer",
                "param_2": "inputArray",
                "param_3": "outputPointer",
                "param_4": "boolFlag",
                "iVar1": "iterator",
                "pcVar2": "currentChar",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentChar",
                "uVar6": "localInt",
                "bVar7": "boolVar",
                "local_50": "counter",
                "local_4c": "constant",
                "local_48": "localInt",
                "local_44": "localInt",
                "local_40": "bufferArray"
            },
            "code": "\nundefined8 processInput_0010d882(long inputPointer,char **inputArray,long *outputPointer,undefined *boolFlag)\n\n{\n  int iterator;\n  char *currentChar;\n  char currentChar;\n  long allocatedMemory;\n  char *currentChar;\n  ulong localInt;\n  bool boolVar;\n  uint counter;\n  undefined4 constant;\n  uint localInt;\n  int localInt;\n  undefined8 bufferArray [2];\n  \n  currentChar = *inputArray;\n  constant = 10;\n  if (outputPointer != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *outputPointer = allocatedMemory;\n    *boolFlag = 0;\n  }\n  counter = 0;\n  while( true ) {\n    currentChar = *inputArray;\n    currentChar = *currentChar;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *inputArray = currentChar + 1;\n      if (currentChar == 'T') {\n        localInt = 1;\n      }\n      else {\n        currentChar = FUN_00108ea1(inputArray,&localInt);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = FUN_00108ea1(inputArray,&localInt);\n      if ((currentChar == '\\0') || (*(uint *)(inputPointer + 0x28) <= localInt)) {\nLAB_0010d958:\n        FUN_0010911f(currentChar);\n        return 0;\n      }\n      localInt = (ulong)localInt;\n      while (iterator = localInt + -1, boolVar = localInt != 0, localInt = iterator, boolVar) {\n        bufferArray[0] = *(undefined8 *)(*(long *)(inputPointer + 0x20) + localInt * 0x10);\n        currentChar = FUN_0010d7d4(inputPointer,bufferArray,outputPointer,&counter,&constant);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = FUN_0010d7d4(inputPointer,inputArray,outputPointer,&counter,&constant);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputPointer == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputPointer + (ulong)counter * 8) = 0;\n    if (*currentChar != 'e') goto LAB_0010d9fa;\n    *boolFlag = 1;\n  }\n  currentChar = currentChar + 1;\n  *inputArray = currentChar;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentChar >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_00108ea1",
                "FUN_0010d7d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "process_input_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "inputArray",
                "param_2": "paramValue1",
                "param_3": "paramValue2",
                "param_4": "paramValue3",
                "puVar1": "memoryBlock",
                "pauVar2": "existingArray",
                "lVar3": "iterationCount",
                "puVar4": "currentBlock",
                "bVar5": "counter"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**inputArray) [16],undefined8 paramValue1,undefined4 paramValue2,undefined4 paramValue3)\n\n{\n  undefined4 *memoryBlock;\n  undefined (*existingArray) [16];\n  long iterationCount;\n  undefined4 *currentBlock;\n  byte counter;\n  \n  counter = 0;\n  memoryBlock = (undefined4 *)xmalloc(0x28);\n  currentBlock = memoryBlock;\n  for (iterationCount = 10; iterationCount != 0; iterationCount = iterationCount + -1) {\n    *currentBlock = 0;\n    currentBlock = currentBlock + (ulong)counter * -2 + 1;\n  }\n  existingArray = *inputArray;\n  *(undefined8 *)(memoryBlock + 2) = paramValue1;\n  memoryBlock[5] = paramValue2;\n  memoryBlock[6] = paramValue3;\n  if (existingArray == (undefined (*) [16])0x0) {\n    existingArray = (undefined (*) [16])xmalloc(0x10);\n    *existingArray = ZEXT816(0);\n    *inputArray = existingArray;\n    *(undefined (**) [16])(*existingArray + 8) = existingArray;\n  }\n  **(undefined8 **)(*existingArray + 8) = memoryBlock;\n  *(undefined4 **)(*existingArray + 8) = memoryBlock;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "recordManager",
                "param_2": "recordLine",
                "param_3": "currentUnit",
                "uVar1": "errorString",
                "puVar2": "currentRecordPtr",
                "uVar3": "index",
                "puVar4": "newRecordPtr",
                "lVar5": "loopCounter",
                "puVar6": "loopPtr",
                "bVar7": "loopFlag"
            },
            "code": "\n\n\nundefined8 updateDebugRecordLine_0010bf86(long recordManager,undefined8 recordLine,undefined8 currentUnit)\n\n{\n  undefined8 errorString;\n  undefined8 *currentRecordPtr;\n  ulong index;\n  undefined4 *newRecordPtr;\n  long loopCounter;\n  undefined4 *loopPtr;\n  byte loopFlag;\n  \n  loopFlag = 0;\n  if (*(long *)(recordManager + 8) == 0) {\n    errorString = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorString);\n    errorString = 0;\n  }\n  else {\n    loopCounter = *(long *)(recordManager + 0x28);\n    if ((loopCounter != 0) && (*(long *)(loopCounter + 8) == *(long *)(recordManager + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loopCounter + 0x10 + index * 8) == -1) {\n          currentRecordPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loopCounter + 0x10 + (long)currentRecordPtr * 8) = recordLine;\n          *(undefined8 *)(loopCounter + 0x60 + (long)currentRecordPtr * 8) = currentUnit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    loopPtr = newRecordPtr;\n    for (loopCounter = 0x2c; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *loopPtr = 0;\n      loopPtr = loopPtr + (ulong)loopFlag * -2 + 1;\n    }\n    errorString = *(undefined8 *)(recordManager + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = recordLine;\n    *(undefined8 *)(newRecordPtr + 2) = errorString;\n    *(undefined8 *)(newRecordPtr + 0x18) = currentUnit;\n    loopPtr = newRecordPtr + 6;\n    for (loopCounter = 0x48; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined *)loopPtr = 0xff;\n      loopPtr = (undefined4 *)((long)loopPtr + (ulong)loopFlag * -2 + 1);\n    }\n    currentRecordPtr = *(undefined8 **)(recordManager + 0x28);\n    if (currentRecordPtr == (undefined8 *)0x0) {\n      currentRecordPtr = *(undefined8 **)(recordManager + 8);\n      currentRecordPtr[2] = newRecordPtr;\n    }\n    else {\n      *currentRecordPtr = newRecordPtr;\n    }\n    *(undefined4 **)(recordManager + 0x28) = newRecordPtr;\nLAB_0010c056:\n    errorString = CONCAT71((int7)((ulong)currentRecordPtr >> 8),1);\n  }\n  return errorString;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "text",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **text)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*text,0);\n    if (result == 0) {\n      *(undefined *)(text + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*text,0);\n    if (result == 0) {\n      *(undefined *)(text + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionPtr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "currentPtr",
                "puVar3": "newVar1",
                "puVar4": "newVar2",
                "puVar6": "ptrToPtr",
                "puVar7": "newVar3",
                "bVar8": "byteVar",
                "lVar5": "count"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionPtr,long param1,long param2,undefined4 param3,undefined8 param4)\n\n{\n  undefined8 *currentPtr;\n  undefined8 uVar2;\n  undefined4 *newVar1;\n  undefined8 *newVar2;\n  long count;\n  undefined8 *ptrToPtr;\n  undefined4 *newVar3;\n  byte byteVar;\n  \n  byteVar = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(long *)(functionPtr + 8) != 0) && (*(long *)(functionPtr + 0x18) != 0)) {\n      newVar1 = (undefined4 *)xmalloc(0x28);\n      newVar3 = newVar1;\n      for (count = 10; count != 0; count = count + -1) {\n        *newVar3 = 0;\n        newVar3 = newVar3 + (ulong)byteVar * -2 + 1;\n      }\n      count = *(long *)(functionPtr + 0x18);\n      *(long *)(newVar1 + 2) = param1;\n      *(long *)(newVar1 + 4) = param2;\n      newVar1[6] = param3;\n      currentPtr = *(undefined8 **)(count + 8);\n      *(undefined8 *)(newVar1 + 8) = param4;\n      ptrToPtr = (undefined8 *)(count + 8);\n      while (newVar2 = currentPtr, newVar2 != (undefined8 *)0x0) {\n        ptrToPtr = newVar2;\n        currentPtr = (undefined8 *)*newVar2;\n      }\n      *ptrToPtr = newVar1;\n      return 1;\n    }\n    uVar2 = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",uVar2);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "unaff_R12": "archivePath",
                "param_7": "sourceFilePath",
                "param_10": "destinationFilePath",
                "param_9": "tempdirPath",
                "unaff_R13": "tempFile",
                "ppcVar6": "archive",
                "unaff_R15": "formatOptions",
                "unaff_retaddr": "returnAddress",
                "param_8": "archiveSizePtr",
                "lVar12": "archiveStatResult",
                "param_18": "archivePermissions",
                "param_19": "tempdirSize",
                "bVar17": "byteValue",
                "lVar14": "bufferSize",
                "lVar5": "bytesRead",
                "param_11": "cw",
                "cVar1": "charValue",
                "iVar2": "intValue",
                "pcVar7": "strPtr",
                "pvVar4": "ptrVoid",
                "ppcVar3": "ptrToPtrChar",
                "psVar16": "ptrStat",
                "pcVar10": "message",
                "uVar11": "localizedMessage",
                "unaff_EBX": "ebxValue",
                "unaff_RBP": "statBuf",
                "pcVar15": "filePathPtr",
                "puVar8": "ptrUndef8",
                "piVar9": "ptrErrno"
            },
            "code": "\nvoid extractAndCopyArchive_00104ea2(void)\n\n{\n  char charValue;\n  int intValue;\n  char **ptrToPtrChar;\n  void *ptrVoid;\n  long bytesRead;\n  char **archive;\n  char *strPtr;\n  undefined8 *ptrUndef8;\n  int *ptrErrno;\n  char *message;\n  undefined8 localizedMessage;\n  long archiveStatResult;\n  code *pcharValue3;\n  long bufferSize;\n  int ebxValue;\n  stat *statBuf;\n  char *filePathPtr;\n  stat *ptrStat;\n  char *archivePath;\n  undefined8 *tempFile;\n  char **formatOptions;\n  byte byteValue;\n  undefined8 returnAddress;\n  undefined8 *sourceFilePath;\n  long *archiveSizePtr;\n  char *tempdirPath;\n  undefined8 *destinationFilePath;\n  undefined8 cw;\n  undefined8 in_stack_00000030;\n  uint archivePermissions;\n  long tempdirSize;\n  \n  byteValue = 0;\ncode_r0x00104ea2:\n  archive = (char **)bfd_openw(archivePath,cw);\n  if (archive == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    charValue = FUNC_00114e50(formatOptions,archive,returnAddress);\n    if (charValue == '\\0') {\n      intValue = bfd_get_arch(formatOptions);\n      if (intValue == 0) goto LAB_00104d75;\n      charValue = bfd_close_all_done(archive);\n      if (charValue != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    charValue = bfd_close(archive);\n    archive = formatOptions;\n    if (charValue == '\\0') {\n      FUN_001126c0(archivePath,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (ebxValue == 0)) {\n      FUN_0011a350(archivePath,statBuf);\n    }\n    archiveStatResult = bfd_openr(archivePath,cw);\n    tempFile[2] = archiveStatResult;\n    *archiveSizePtr = archiveStatResult;\n    archiveSizePtr = (long *)(archiveStatResult + 0xf0);\n    formatOptions = (char **)bfd_openr_next_archived_file(destinationFilePath,archive);\n    bfd_close(archive);\n    while ((DAT_00127a40 == 0 && (formatOptions != (char **)0x0))) {\n      message = *formatOptions;\n      strPtr = message;\n      if (*message == '/') {\nLAB_0010527d:\n        localizedMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(localizedMessage,message);\n        goto LAB_00104e93;\n      }\n      while (*strPtr != '\\0') {\n        filePathPtr = strPtr;\n        if ((*strPtr == '.') && (filePathPtr = strPtr + 1, strPtr[1] == '.')) {\n          filePathPtr = strPtr + 2;\n          if ((strPtr[2] == '\\0') || (strPtr[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*filePathPtr != '\\0' && (*filePathPtr != '/')); filePathPtr = filePathPtr + 1) {\n        }\n        strPtr = filePathPtr;\n        if (*filePathPtr == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      statBuf = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempdirPath,&DAT_0011b47d);\n      intValue = stat(archivePath,statBuf);\n      ptrUndef8 = tempFile;\n      if (-1 < intValue) {\n        archiveStatResult = FUN_0011a0e0(archivePath);\n        free(archivePath);\n        if (archiveStatResult == 0) {\n          ptrErrno = __errno_location();\n          message = strerror(*ptrErrno);\n          localizedMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(localizedMessage,message);\n          goto LAB_00104e93;\n        }\n        ptrUndef8 = (undefined8 *)xmalloc(0x18);\n        message = *formatOptions;\n        *ptrUndef8 = tempFile;\n        ptrUndef8[2] = 0;\n        ptrUndef8[1] = archiveStatResult;\n        archivePath = (char *)concat(archiveStatResult,&DAT_0011b47d,message);\n      }\n      ebxValue = 0;\n      if (DAT_001279eb != '\\0') {\n        ptrStat = statBuf;\n        for (archiveStatResult = 0x24; archiveStatResult != 0; archiveStatResult = archiveStatResult + -1) {\n          *(undefined4 *)&ptrStat->st_dev = 0;\n          ptrStat = (stat *)((long)ptrStat + (ulong)byteValue * -8 + 4);\n        }\n        archive = (char **)formatOptions[0x1d];\n        if ((char **)formatOptions[0x1d] == (char **)0x0) {\n          archive = formatOptions;\n        }\n        ebxValue = (**(code **)(archive[1] + 0x1e8))(formatOptions,statBuf);\n        if (ebxValue != 0) {\n          message = *formatOptions;\n          localizedMessage = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(localizedMessage,message);\n        }\n      }\n      tempFile = (undefined8 *)xmalloc(0x18);\n      tempFile[1] = archivePath;\n      *tempFile = ptrUndef8;\n      tempFile[2] = 0;\n      charValue = bfd_check_format(formatOptions,1);\n      if (charValue != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        archive = (char **)bfd_openw(archivePath,*(undefined8 *)formatOptions[1]);\n        if (archive == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      localizedMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,formatOptions,0,localizedMessage);\n      archive = (char **)bfd_openw(archivePath,cw);\n      if (archive == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ptrToPtrChar = (char **)formatOptions[0x1d];\n      if ((char **)formatOptions[0x1d] == (char **)0x0) {\n        ptrToPtrChar = formatOptions;\n      }\n      intValue = (**(code **)(ptrToPtrChar[1] + 0x1e8))(formatOptions);\n      archiveStatResult = tempdirSize;\n      if (intValue == 0) {\n        if (tempdirSize < 0) {\n          FUN_001125fa(formatOptions);\n          localizedMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(localizedMessage);\n        }\n        else {\n          intValue = bfd_seek(formatOptions,0,0);\n          if (intValue == 0) {\n            if (DAT_001279e9 != '\\0') {\n              message = *archive;\n              localizedMessage = FUN_001125fa(formatOptions);\n              strPtr = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(strPtr,localizedMessage,message);\n            }\n            ptrVoid = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (archiveStatResult == 0) {\n                chmod(*archive,archivePermissions | 0x100);\n                free(ptrVoid);\n                charValue = bfd_close_all_done(archive);\n                archive = formatOptions;\n                if (charValue == '\\0') {\n                  FUN_001126c0(archivePath,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bufferSize = 0x2000;\n              if (archiveStatResult < 0x2001) {\n                bufferSize = archiveStatResult;\n              }\n              bytesRead = bfd_bread(ptrVoid,bufferSize,formatOptions);\n              ptrToPtrChar = formatOptions;\n              if ((bufferSize != bytesRead) ||\n                 (bytesRead = bfd_bwrite(ptrVoid,bufferSize,archive), ptrToPtrChar = archive, bufferSize != bytesRead))\n              break;\n              archiveStatResult = archiveStatResult - bufferSize;\n            }\n            FUN_001126c0(0,ptrToPtrChar,0,0);\n            free(ptrVoid);\n          }\n          else {\n            localizedMessage = FUN_001125fa(formatOptions);\n            FUN_0011a110(localizedMessage);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,formatOptions,0,0);\n      }\n      charValue = bfd_close_all_done(archive);\n      if (charValue == '\\0') {\n        FUN_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a40 = 1;\n    }\n    *archiveSizePtr = 0;\n    ptrVoid = (void *)xstrdup(*sourceFilePath);\n    if (DAT_00127a40 == 0) {\n      pcharValue3 = bfd_close;\n    }\n    else {\n      pcharValue3 = bfd_close_all_done;\n    }\n    charValue = (*pcharValue3)(sourceFilePath);\n    if (charValue == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(ptrVoid,0,0,0);\n    }\n    free(ptrVoid);\n    ptrVoid = (void *)xstrdup(*destinationFilePath);\n    charValue = bfd_close(destinationFilePath);\n    if (charValue == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(ptrVoid,0,0,0);\n    }\n    free(ptrVoid);\n  }\n  while (tempFile != (undefined8 *)0x0) {\n    if (tempFile[2] == 0) {\n      rmdir((char *)tempFile[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempFile[1]);\n    }\n    free((void *)tempFile[1]);\n    ptrUndef8 = (undefined8 *)*tempFile;\n    free(tempFile);\n    tempFile = ptrUndef8;\n  }\n  rmdir(tempdirPath);\n  free(tempdirPath);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_bwrite",
                "FUN_00114b84",
                "FUN_001052a2",
                "xstrdup",
                "strerror",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_0011a350",
                "bfd_bread",
                "bfd_openr",
                "bfd_seek",
                "bfd_close",
                "bfd_get_arch",
                "stat",
                "xmalloc",
                "FUN_0011a110",
                "FUN_00119ed0",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_openw",
                "FUN_0011a0e0",
                "free",
                "__errno_location",
                "unlink",
                "bfd_close_all_done",
                "printf",
                "bfd_close",
                "concat",
                "rmdir",
                "chmod",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001126c0",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_00107880",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_memory_and_store_params_00113ce0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_memory_and_store_params_00113ce0(long input_param_1,long input_param_2,undefined input_param_3,undefined8 input_param_4,undefined8 input_param_5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_param_1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param_2;\n      *(undefined *)(allocated_memory + 2) = input_param_3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_store_params_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_expand_file_00114dc7",
                "iVar1": "errorFlag",
                "uVar2": "errorString",
                "uVar3": "translatedErrorString",
                "sVar4": "bytesRead",
                "unaff_RBX": "file",
                "unaff_RBP": "basePointer",
                "unaff_R12": "startPosition",
                "unaff_R14": "endPosition"
            },
            "code": "\nvoid readAndExpandFile_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorString;\n  undefined8 translatedErrorString;\n  size_t bytesRead;\n  FILE *file;\n  long basePointer;\n  long startPosition;\n  long endPosition;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(basePointer + 0x20) + startPosition),1,endPosition - startPosition,\n                  file);\n    errorFlag = ferror(file);\n    if (errorFlag != 0) {\n      translatedErrorString = *(undefined8 *)(basePointer + 0x10);\n      errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorString,translatedErrorString);\n    }\n    startPosition = startPosition + bytesRead;\n    errorFlag = feof(file);\n    if (errorFlag != 0) break;\n    if (startPosition == endPosition) {\n      endPosition = startPosition * 2;\n      translatedErrorString = xrealloc(*(undefined8 *)(basePointer + 0x20),endPosition);\n      *(undefined8 *)(basePointer + 0x20) = translatedErrorString;\n    }\n  }\n  *(long *)(basePointer + 0x18) = startPosition;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xrealloc",
                "FUN_00114dc7",
                "fclose",
                "FUN_00119dd0",
                "feof",
                "ferror",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_expand_file_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "param_1": "headerData",
                "param_2": "binaryInfo",
                "uVar1": "returnValue",
                "cVar2": "result",
                "iVar3": "index",
                "uVar4": "formattedHeader",
                "uVar5": "formattedData",
                "__format": "formatString",
                "lVar6": "bufferSize",
                "uVar7": "header",
                "lVar8": "reallocResult"
            },
            "code": "\nundefined4 processBinaryData_00119f70(undefined8 *headerData,undefined8 *binaryInfo)\n\n{\n  undefined4 returnValue;\n  char result;\n  int index;\n  undefined8 formattedHeader;\n  undefined8 formattedData;\n  char *formatString;\n  long bufferSize;\n  undefined8 header;\n  long reallocResult;\n  \n  index = *(int *)((long)binaryInfo + 0xc) + 1;\n  *(int *)((long)binaryInfo + 0xc) = index;\n  if ((ulong)binaryInfo[2] < (ulong)((long)index * 0x60)) {\n    bufferSize = 0x3000;\n    if (0x3f < index) {\n      bufferSize = (long)index * 0xc0;\n    }\n    reallocResult = xrealloc(binaryInfo[3]);\n    binaryInfo[3] = reallocResult;\n    memset((void *)(reallocResult + binaryInfo[2]),0,bufferSize - binaryInfo[2]);\n    binaryInfo[2] = bufferSize;\n  }\n  returnValue = *(undefined4 *)((long)headerData + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binaryInfo + 0xc) * 0x60 + binaryInfo[3] + -0x60) = *headerData;\n  formattedHeader = FUN_00114e00(returnValue);\n  formattedData = FUN_00114e00(*(undefined4 *)(headerData + 2));\n  header = *headerData;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,header,formattedData,formattedHeader);\n  bufferSize = bfd_openw(*binaryInfo,*headerData);\n  if (bufferSize == 0) {\n    FUN_0011a110(*binaryInfo);\n    *(undefined4 *)(binaryInfo + 1) = 1;\n  }\n  else {\n    index = 2;\n    result = bfd_set_format(bufferSize,1);\n    if (result == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        FUN_0011a110(*headerData);\n        *(undefined4 *)(binaryInfo + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(bufferSize + 8) + 0x2a0))(bufferSize,index,0);\n        if (result != '\\0') {\n          header = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header);\n          *(undefined *)\n           ((long)*(int *)((long)binaryInfo + 0xc) * 0x60 + binaryInfo[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(bufferSize);\n  }\n  return *(undefined4 *)(binaryInfo + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "bfd_get_error",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "printf",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "improved_func_00115a90",
                "param_1": "fd_src",
                "param_2": "src_file",
                "param_3": "dest_perm",
                "iVar1": "error_code",
                "__fd": "fd_dest",
                "_Var3": "seek_result",
                "uVar4": "read_result",
                "sVar5": "write_result",
                "piVar6": "errno_ptr",
                "local_2038": "buffer"
            },
            "code": "\nulong improved_func_00115a90(int fd_src,char *src_file,long dest_perm)\n\n{\n  int error_code;\n  int fd_dest;\n  int iVar2;\n  __off_t seek_result;\n  ulong read_result;\n  size_t write_result;\n  int *errno_ptr;\n  undefined buffer [8200];\n  \n  if ((-1 < fd_src) && (seek_result = lseek(fd_src,0,0), seek_result == 0)) {\n    fd_dest = open(src_file,0x201);\n    if (fd_dest < 0) {\n      read_result = FUN_00108237();\n      return read_result;\n    }\n    do {\n      read_result = read(fd_src,buffer,0x2000);\n      iVar2 = (int)read_result;\n      if (iVar2 < 1) {\n        errno_ptr = __errno_location();\n        error_code = *errno_ptr;\n        fchmod(fd_dest,*(__mode_t *)(dest_perm + 0x18));\n        close(fd_src);\n        close(fd_dest);\n        if (iVar2 != 0) {\n          *errno_ptr = error_code;\n          return 0xffffffff;\n        }\n        return read_result & 0xffffffff;\n      }\n      write_result = write(fd_dest,buffer,(long)iVar2);\n    } while (write_result == (long)iVar2);\n    errno_ptr = __errno_location();\n    iVar2 = *errno_ptr;\n    close(fd_src);\n    close(fd_dest);\n    *errno_ptr = iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "__errno_location",
                "write",
                "open",
                "close",
                "FUN_00108237",
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "improved_func_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_log_error_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "copyFlag",
                "unaff_R13": "errorCode",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileAndLogError_00108200(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  char *filePath;\n  char copyFlag;\n  ulong errorCode;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorPtr = __errno_location();\n  strerror(*errorPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(errorMessage);\n  unlink(filePath);\n  if (copyFlag != '\\0') {\n    FUN_0011a350();\n  }\n  returnValue._0_8_ = errorCode & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a350",
                "__errno_location",
                "FUN_00119ed0",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_log_error_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 311338,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}