{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "set_debug_type_00113dfe",
                "param_1": "type",
                "param_2": "value",
                "lVar1": "typePointer"
            },
            "code": "\nvoid setDebugType_00113dfe(undefined4 type,undefined value)\n\n{\n  long typePointer;\n  \n  typePointer = debug_make_type_constprop_0(3,type);\n  if (typePointer != 0) {\n    *(undefined *)(typePointer + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "set_debug_type_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "stab_demangle_v3_arg",
                "bfd_nonfatal.cold",
                "debug_record_line",
                "list_matching_formats",
                "list_supported_targets",
                "FUN_0010554f",
                "debug_record_variable",
                "finish_stab",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "copy_usage",
                "stab_demangle_v3_arglist",
                "main",
                "stab_bad_demangle",
                "debug_name_type",
                "debug_write_type.constprop.0",
                "bfd_nonfatal_message",
                "display_info.isra.0",
                "debug_end_block",
                "stab_find_slot",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "stab_find_type",
                "report",
                "debug_end_function",
                "debug_start_block",
                "parse_stab",
                "stab_context",
                "parse_stab_type",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_with_prefix_0010ab4d",
                "param_1": "dataPtr",
                "param_2": "inputString",
                "uVar1": "objectPtr",
                "lVar2": "objectPtrCopy",
                "auVar3": "result",
                "sVar4": "inputLength",
                "pcVar5": "existingString",
                "sVar6": "existingStringLength",
                "auVar7": "newResult"
            },
            "code": "\nundefined  [16] updateStringWithPrefix_0010ab4d(long dataPtr,char *inputString,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong objectPtr;\n  long objectPtrCopy;\n  undefined result [16];\n  size_t inputLength;\n  char *existingString;\n  size_t existingStringLength;\n  undefined newResult [16];\n  \n  objectPtr = *(ulong *)(dataPtr + 0x60);\n  if ((objectPtr != 0) && (*(long *)(objectPtr + 0x20) != 0)) {\n    existingString = *(char **)(objectPtr + 0x30);\n    inputLength = strlen(inputString);\n    if (existingString == (char *)0x0) {\n      existingString = (char *)xmalloc(inputLength + 3);\n      *existingString = '\\0';\n    }\n    else {\n      existingStringLength = strlen(existingString);\n      existingString = (char *)xrealloc(existingString,inputLength + 4 + existingStringLength);\n    }\n    inputLength = strlen(existingString);\n    sprintf(existingString + inputLength,\"%s::\",inputString);\n    objectPtrCopy = *(long *)(dataPtr + 0x60);\n    *(char **)(objectPtrCopy + 0x30) = existingString;\n    newResult._1_7_ = (undefined7)((ulong)objectPtrCopy >> 8);\n    newResult[0] = 1;\n    newResult._8_8_ = param_4;\n    return newResult;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = objectPtr;\n  return result << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xrealloc",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_string_with_prefix_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_type_to_namespace_0010c218",
                "param_1": "filePtr",
                "param_2": "nameType",
                "param_3": "value",
                "uVar1": "errorMessage",
                "lVar2": "typeResult",
                "pauVar3": "dynamicArray",
                "lVar4": "namespaceResult"
            },
            "code": "\n\n\nlong addTypeToNamespace_0010c218(long filePtr,long nameType,long value)\n\n{\n  undefined8 errorMessage;\n  long typeResult;\n  undefined (*dynamicArray) [16];\n  long namespaceResult;\n  \n  if ((nameType != 0) && (value != 0)) {\n    if ((*(long *)(filePtr + 8) == 0) || (*(long *)(filePtr + 0x10) == 0)) {\n      errorMessage = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      typeResult = debug_make_type_constprop_0(0x16,0);\n      if (typeResult != 0) {\n        dynamicArray = (undefined (*) [16])xmalloc(0x10);\n        namespaceResult = *(long *)(filePtr + 0x10);\n        *dynamicArray = ZEXT816(0);\n        *(long *)(*dynamicArray + 8) = value;\n        *(undefined (**) [16])(typeResult + 0x10) = dynamicArray;\n        namespaceResult = debug_add_to_namespace_constprop_0(namespaceResult + 0x10,nameType,0,3);\n        if (namespaceResult != 0) {\n          *(long *)(namespaceResult + 0x20) = typeResult;\n          *(long *)*dynamicArray = namespaceResult;\n          return typeResult;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "add_redefine_and_check",
                "strchr",
                "bfd_set_error_program_name",
                "memmove",
                "find_section_list",
                "filename_cmp",
                "xstrndup",
                "strtoul",
                "fatal",
                "copy_usage",
                "dup",
                "strlen",
                "strncpy",
                "bfd_init",
                "dcgettext",
                "htab_create_alloc",
                "xrealloc",
                "ftell",
                "bfd_nonfatal_message",
                "convert_efi_target",
                "display_info.isra.0",
                "strtol",
                "add_specific_symbols",
                "strcmp",
                "mkstemp",
                "non_fatal",
                "template_in_dir",
                "free",
                "getc",
                "bindtextdomain",
                "bfd_set_default_target",
                "eq_string_redefnode",
                "fprintf",
                "strcpy",
                "handle_remove_section_option",
                "delete_symbol_htabs",
                "print_version",
                "fseek",
                "getopt_long",
                "copy_file",
                "setlocale",
                "fopen",
                "__errno_location",
                "htab_hash_redefnode",
                "stat",
                "free",
                "strerror",
                "section_add_load_file",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "parse_flags",
                "close",
                "startswith.lto_priv.0.lto_priv.0",
                "strip_usage",
                "init_section_add",
                "xcalloc",
                "htab_elements",
                "strncasecmp",
                "malloc",
                "get_file_size",
                "bfd_scan_arch",
                "unlink_if_ordinary",
                "memcpy",
                "strcasecmp",
                "xexit",
                "htab_find_slot",
                "ferror",
                "fread",
                "create_symbol_htab",
                "xatexit_cleanup.lto_priv.0",
                "bfd_get_error",
                "xstrdup",
                "fclose",
                "parse_vma",
                "smart_rename",
                "xmalloc",
                "textdomain"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockPointer",
                "param_2": "startBlockPointer",
                "param_3": "unused1",
                "param_4": "unused2",
                "puVar1": "currentPointer",
                "uVar2": "returnValue",
                "puVar3": "newBlockPointer",
                "puVar4": "tempPointer",
                "lVar5": "tempValue",
                "puVar6": "lastPointer",
                "puVar7": "blockArray",
                "bVar8": "counter",
                "auVar9": "returnValueArray"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockPointer,undefined8 startBlockPointer,undefined8 unused1,undefined8 unused2)\n\n{\n  undefined8 *currentPointer;\n  undefined8 returnValue;\n  undefined4 *newBlockPointer;\n  undefined8 *tempPointer;\n  long tempValue;\n  undefined8 *lastPointer;\n  undefined4 *blockArray;\n  byte counter;\n  undefined returnValueArray [16];\n  \n  counter = 0;\n  if ((*(long *)(blockPointer + 8) == 0) || (*(long *)(blockPointer + 0x20) == 0)) {\n    returnValue = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    newBlockPointer = (undefined4 *)xmalloc(0x30);\n    blockArray = newBlockPointer;\n    for (tempValue = 0xc; tempValue != 0; tempValue = tempValue + -1) {\n      *blockArray = 0;\n      blockArray = blockArray + (ulong)counter * -2 + 1;\n    }\n    tempValue = *(long *)(blockPointer + 0x20);\n    *(undefined8 *)(newBlockPointer + 6) = startBlockPointer;\n    *(undefined8 *)(newBlockPointer + 8) = 0xffffffffffffffff;\n    *(long *)(newBlockPointer + 2) = tempValue;\n    currentPointer = *(undefined8 **)(tempValue + 0x10);\n    lastPointer = (undefined8 *)(tempValue + 0x10);\n    while (tempPointer = currentPointer, tempPointer != (undefined8 *)0x0) {\n      lastPointer = tempPointer;\n      currentPointer = (undefined8 *)*tempPointer;\n    }\n    *lastPointer = newBlockPointer;\n    returnValue = 1;\n    *(undefined4 **)(blockPointer + 0x20) = newBlockPointer;\n  }\n  returnValueArray._8_8_ = unused2;\n  returnValueArray._0_8_ = returnValue;\n  return returnValueArray;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "format_and_store_field_info_0010ba08",
                "param_1": "fieldInfo",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "cVar1": "flag",
                "iVar2": "size",
                "lVar3": "fieldInfoPtr",
                "__s": "type",
                "sVar4": "fieldInfoLen",
                "sVar5": "fieldNameLen",
                "sVar6": "typeLen",
                "__s_00": "formattedFieldInfo",
                "uVar7": "warningMsg",
                "uVar8": "result",
                "pcVar9": "flagStr"
            },
            "code": "\nundefined8\nformatAndStoreFieldInfo_0010ba08(undefined8 *fieldInfo,char *fieldName,undefined8 param3,ulong param4,int param5)\n\n{\n  char flag;\n  int size;\n  long fieldInfoPtr;\n  char *type;\n  size_t fieldInfoLen;\n  size_t fieldNameLen;\n  size_t typeLen;\n  char *formattedFieldInfo;\n  undefined8 warningMsg;\n  undefined8 result;\n  char *flagStr;\n  \n  flag = *(char *)(fieldInfo[0xc] + 0x1c);\n  size = *(int *)(fieldInfo[0xc] + 0x18);\n  type = (char *)stab_pop_type();\n  if (*(char **)(fieldInfo[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    fieldInfoLen = strlen(*(char **)(fieldInfo[0xc] + 0x20));\n    fieldNameLen = strlen(fieldName);\n    typeLen = strlen(type);\n    formattedFieldInfo = (char *)xmalloc(fieldInfoLen + 0x32 + fieldNameLen + typeLen);\n    if (param5 == 1) {\n      flagStr = \"/1\";\n    }\n    else {\n      flagStr = \"/0\";\n      if ((param5 != 2) && (flagStr = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((param4 == 0) && (param4 = (ulong)(uint)(size * 8), param4 == 0)) {\n      result = *(undefined8 *)*fieldInfo;\n      warningMsg = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(warningMsg,result,fieldName);\n    }\n    sprintf(formattedFieldInfo,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(fieldInfo[0xc] + 0x20),fieldName,flagStr,type,\n            param3,param4);\n    free(*(void **)(fieldInfo[0xc] + 0x20));\n    fieldInfoPtr = fieldInfo[0xc];\n    *(char **)(fieldInfoPtr + 0x20) = formattedFieldInfo;\n    if (flag != '\\0') {\n      *(undefined *)(fieldInfoPtr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)fieldInfoPtr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_store_field_info_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "add_formatted_string_to_list_0010aa53",
                "param_1": "baseAddr",
                "param_2": "value",
                "param_3": "digit",
                "param_4": "flag",
                "cVar1": "flagValue",
                "__s": "poppedString",
                "sVar5": "poppedStringLength",
                "pcVar6": "newString",
                "lVar2": "dataStructAddr",
                "uVar8": "success",
                "uVar9": "index",
                "uVar10": "lastStringIndex",
                "cVar3": "flagChar",
                "lVar7": "newDataStructAddr",
                "uVar4": "loopIndex"
            },
            "code": "\nundefined8 addFormattedStringToList_0010aa53(long baseAddr,undefined8 value,char digit,int flag)\n\n{\n  char flagValue;\n  long dataStructAddr;\n  char flagChar;\n  uint loopIndex;\n  char *poppedString;\n  size_t poppedStringLength;\n  char *newString;\n  long newDataStructAddr;\n  undefined8 success;\n  ulong index;\n  ulong lastStringIndex;\n  \n  flagValue = *(char *)(*(long *)(baseAddr + 0x60) + 0x1c);\n  poppedString = (char *)stab_pop_type();\n  poppedStringLength = strlen(poppedString);\n  newString = (char *)xmalloc(poppedStringLength + 0x19);\n  *newString = digit + '0';\n  if (flag == 1) {\n    flagChar = '1';\n  }\n  else {\n    flagChar = '0';\n    if ((flag != 2) && (flagChar = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = flagChar;\n  sprintf(newString + 2,\"%ld,%s;\",value);\n  free(poppedString);\n  dataStructAddr = *(long *)(baseAddr + 0x60);\n  success = 0;\n  if ((dataStructAddr != 0) && (*(long *)(dataStructAddr + 0x20) != 0)) {\n    dataStructAddr = *(long *)(dataStructAddr + 0x28);\n    lastStringIndex = 0;\n    if (dataStructAddr != 0) {\n      loopIndex = 0;\n      do {\n        index = (ulong)loopIndex;\n        lastStringIndex = (ulong)loopIndex;\n        loopIndex = loopIndex + 1;\n      } while (*(long *)(dataStructAddr + index * 8) != 0);\n    }\n    newDataStructAddr = xrealloc(dataStructAddr,(ulong)((int)lastStringIndex + 2) << 3);\n    *(char **)(newDataStructAddr + lastStringIndex * 8) = newString;\n    *(undefined8 *)(newDataStructAddr + (ulong)((int)lastStringIndex + 1) * 8) = 0;\n    dataStructAddr = *(long *)(baseAddr + 0x60);\n    *(long *)(dataStructAddr + 0x28) = newDataStructAddr;\n    if (flagValue != '\\0') {\n      *(undefined *)(dataStructAddr + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "add_formatted_string_to_list_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_stab_entry_0011173a",
                "param_1": "param_type",
                "param_2": "stab_entry",
                "param_3": "entry_type",
                "param_4": "entry_num",
                "param_5": "entry_value",
                "param_6": "entry_name",
                "cVar1": "char_var1",
                "bVar2": "byte_var2",
                "__ptr": "ptr_var",
                "cVar3": "char_var2",
                "uVar4": "undefined_var",
                "iVar5": "int_var",
                "puVar6": "ptr_var2",
                "plVar7": "long_var",
                "pcVar8": "char_ptr",
                "uVar9": "undefined_var2",
                "lVar10": "long_var2",
                "lVar11": "long_var3",
                "lVar12": "long_var4",
                "pplVar13": "ptr_ptr_var",
                "uVar14": "ulong_var",
                "uVar15": "ulong_var2",
                "pcVar16": "char_ptr2",
                "uVar17": "uint_var",
                "dVar19": "double_var",
                "local_48": "local_char_ptr",
                "local_40": "local_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_entry_0011173a(undefined8 param_type,long *stab_entry,int entry_type,int entry_num,ulong entry_value,\n                      char *entry_name)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr_var;\n  char char_var2;\n  undefined undefined_var;\n  int int_var;\n  undefined8 *ptr_var2;\n  long *long_var;\n  char *char_ptr;\n  undefined8 undefined_var2;\n  long long_var2;\n  long long_var3;\n  long long_var4;\n  long **ptr_ptr_var;\n  ulong ulong_var;\n  ulong ulong_var2;\n  char *char_ptr2;\n  uint uint_var;\n  long **pplVar18;\n  double double_var;\n  char *local_char_ptr;\n  long **local_array [2];\n  \n  if (stab_entry[4] != 0) {\n    if (((entry_type == 100) && (*entry_name != '\\0')) && (stab_entry[5] == entry_value)) goto LAB_00111a06;\n    char_var2 = debug_set_filename(param_type);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)stab_entry + 0x44) = 0;\n    *(undefined4 *)(stab_entry + 8) = 0;\n    stab_entry[9] = stab_entry[4];\n    if (*(char *)(stab_entry + 1) == '\\0') {\n      stab_entry[6] = stab_entry[5];\n    }\n    *(undefined4 *)(stab_entry + 0x10) = 1;\n    ptr_var2 = (undefined8 *)xmalloc(8);\n    stab_entry[0x11] = (long)ptr_var2;\n    *ptr_var2 = 0;\n    stab_entry[4] = 0;\n  }\n  strlen(entry_name);\n  if (entry_type == 0x84) {\nLAB_00111ab7:\n    undefined_var = debug_start_source(param_type,entry_name);\n    return undefined_var;\n  }\n  if (entry_type < 0x85) {\n    if (entry_type == 0x3c) {\n      int_var = strcmp(entry_name,\"gcc2_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(stab_entry + 8) = 2;\n        return 1;\n      }\n      int_var = strcmp(entry_name,\"gcc_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(stab_entry + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)stab_entry + 0x44) = 1;\n      return 1;\n    }\n    if (entry_type < 0x3d) {\n      if (entry_type == 0x24) {\n        if (*entry_name == '\\0') {\n          if (*(char *)(stab_entry + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(stab_entry + 1) != '\\0') {\n            entry_value = entry_value + stab_entry[7];\n          }\n          char_var2 = stab_emit_pending_vars(param_type,stab_entry);\n          if (char_var2 != '\\0') {\n            char_var2 = debug_end_function(param_type,entry_value);\n            if (char_var2 != '\\0') {\n              *(undefined *)(stab_entry + 0xc) = 0;\n              stab_entry[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(stab_entry + 0xc) != '\\0') &&\n           ((entry_value < (ulong)stab_entry[0xd] || (stab_entry[0xd] == 0xffffffffffffffff)))) {\n          stab_entry[0xd] = entry_value;\n        }\n      }\n      else if (entry_type < 0x25) {\n        if (entry_type == 0xc) {\n          return 1;\n        }\n        if (entry_type - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (entry_type == 0x2a) {\n          return 1;\n        }\n        if (entry_type == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (entry_type == 100) {\nLAB_00111a06:\n        if (*(char *)(stab_entry + 0xc) != '\\0') {\n          ulong_var = entry_value;\n          if (((*entry_name != '\\0') && (ulong_var2 = stab_entry[0xd], ulong_var2 != 0xffffffffffffffff)) &&\n             (ulong_var = ulong_var2, entry_value < ulong_var2)) {\n            ulong_var = entry_value;\n          }\n          char_var2 = stab_emit_pending_vars(param_type,stab_entry);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          char_var2 = debug_end_function(param_type,ulong_var);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(stab_entry + 0xc) = 0;\n          stab_entry[0xd] = -1;\n        }\n        if (*entry_name == '\\0') {\n          return 1;\n        }\n        ptr_var = (void *)stab_entry[4];\n        if (ptr_var == (void *)0x0) {\n          long_var4 = xstrdup(entry_name);\n          stab_entry[4] = long_var4;\n        }\n        else {\n          if (*entry_name == '/') {\n            long_var4 = xstrdup(entry_name);\n          }\n          else {\n            long_var4 = concat(ptr_var,entry_name,0);\n          }\n          stab_entry[4] = long_var4;\n          free(ptr_var);\n        }\n        stab_entry[5] = entry_value;\n        return 1;\n      }\n      if (entry_type < 0x65) {\n        if (entry_type == 0x44) {\n          long_var4 = 0;\n          if (*(char *)(stab_entry + 0xc) != '\\0') {\n            long_var4 = stab_entry[7];\n          }\n          undefined_var = debug_record_line(param_type,(long)entry_num,long_var4 + entry_value);\n          return undefined_var;\n        }\n        if (entry_type == 0x62) {\n          return 1;\n        }\n      }\n      else if (entry_type == 0x82) {\n        long_var = (long *)xmalloc();\n        int_var = *(int *)(stab_entry + 0x10);\n        long_var2 = stab_entry[10];\n        long_var3 = stab_entry[0xb];\n        long_var[5] = 0;\n        long_var4 = stab_entry[0x11];\n        *(int *)(long_var + 4) = int_var;\n        uint_var = int_var + 1;\n        *(uint *)(stab_entry + 0x10) = uint_var;\n        *long_var = long_var3;\n        long_var[1] = long_var2;\n        long_var[2] = (long)entry_name;\n        long_var[3] = entry_value;\n        stab_entry[10] = (long)long_var;\n        stab_entry[0xb] = (long)long_var;\n        long_var4 = xrealloc(long_var4,(ulong)uint_var << 3);\n        uint_var = *(uint *)(long_var + 4);\n        stab_entry[0x11] = long_var4;\n        *(undefined8 *)(long_var4 + (ulong)uint_var * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr = strchr(entry_name,0x3a);\n    if ((char_ptr != (char *)0x0) && ((char_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(stab_entry + 0xc) != '\\0') {\n        ulong_var = stab_entry[0xd];\n        ulong_var2 = entry_value;\n        if ((ulong_var != 0xffffffffffffffff) && (ulong_var2 = ulong_var, entry_value < ulong_var)) {\n          ulong_var2 = entry_value;\n        }\n        char_var2 = stab_emit_pending_vars(param_type,stab_entry);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        char_var2 = debug_end_function(param_type,ulong_var2);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        stab_entry[0xd] = -1;\n      }\n      if (*(char *)(stab_entry + 1) != '\\0') {\n        stab_entry[7] = entry_value;\n      }\n      *(undefined *)(stab_entry + 0xc) = 1;\n    }\n    local_char_ptr = strchr(entry_name,0x3a);\n    if (local_char_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*entry_name == '$') {\n      char_var2 = entry_name[1];\n      char_ptr2 = \"eh_throw\";\n      if (char_var2 != 'e') {\n        if (char_var2 < 'f') {\n          if ((char_var2 != 'X') && (char_var2 != '_')) {\nLAB_00111d1a:\n            undefined_var2 = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(entry_name,undefined_var2);\n          }\n        }\n        else {\n          char_ptr2 = \"this\";\n          if (char_var2 == 't') goto LAB_00111d62;\n          if (char_var2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr2 = (char *)0x0;\n      if ((entry_name != local_char_ptr) && ((*entry_name != ' ' || (local_char_ptr != entry_name + 1)))) {\n        char_ptr2 = (char *)savestring(entry_name,(int)local_char_ptr - (int)entry_name);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_char_ptr[1];\n    char_ptr = local_char_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr = local_char_ptr + 2;\n    char_var2 = local_char_ptr[1];\n    switch(char_var2) {\n    case 'C':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      char_ptr = \"debug_record_label: not implemented\";\n      if (long_var4 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      char_var2 = debug_record_function(param_type,char_ptr2,long_var4,char_var2 == 'F',entry_value);\n      if (char_var2 != '\\0') {\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n        } while (long_var4 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) goto LAB_0011208f;\n      long_var2 = stab_entry[3];\n      long_var = (long *)stab_entry[2];\n      char_var2 = *(char *)(*(long *)(*stab_entry + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (entry_type == 0x24) {\n        local_char_ptr = char_ptr;\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n        } while (long_var4 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 2;\n      break;\n    case 'S':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var2 = local_char_ptr[2];\n      if (char_var2 == 't') {\n        char_ptr = local_char_ptr + 3;\n      }\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,char_ptr2,&local_char_ptr,local_array);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(stab_entry + 0x35);\n      long_var = (long *)debug_tag_type(param_type,char_ptr2,long_var4);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_array[0] != (long **)0x0) {\n        *local_array[0] = long_var;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      ptr_ptr_var = (long **)(stab_entry + 0x34);\n      pplVar18 = (long **)stab_entry[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr = local_char_ptr + 3;\n      if (((local_char_ptr[2] != '\\0') && (char_ptr = local_char_ptr + 4, local_char_ptr[3] == 'n')) &&\n         (char_ptr = local_char_ptr + 5, char_ptr2 = local_char_ptr + 4, local_char_ptr = char_ptr, *char_ptr2 == '0')) {\n        for (; char_ptr = local_char_ptr, *local_char_ptr != '\\0'; local_char_ptr = local_char_ptr + 1) {\n          if (*local_char_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 4;\n      break;\n    case 'c':\n      if (local_char_ptr[2] == '=') {\n        char_ptr = local_char_ptr + 4;\n        char_var2 = local_char_ptr[3];\n        local_char_ptr = char_ptr;\n        if (char_var2 == 'i') {\n          long_var4 = strtol(char_ptr,(char **)0x0,10);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var2 = debug_add_to_current_namespace_constprop_0(param_type,char_ptr2,4);\n          if (long_var2 != 0) {\n            *(long *)(long_var2 + 0x20) = (long)(int)long_var4;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'r') {\n          double_var = strtod(char_ptr,(char **)0x0);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var4 = debug_add_to_current_namespace_constprop_0(param_type,char_ptr2,5);\n          if (long_var4 != 0) {\n            *(double *)(long_var4 + 0x20) = double_var;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'e') {\n          long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n          if (long_var4 == 0) {\n            return 0;\n          }\n          char_ptr = local_char_ptr;\n          if (*local_char_ptr == ',') {\n            long_var2 = strtol(local_char_ptr,(char **)0x0,10);\n            if (char_ptr2 == (char *)0x0) {\n              return 0;\n            }\n            long_var3 = debug_add_to_current_namespace_constprop_0(param_type,char_ptr2,6);\n            if (long_var3 != 0) {\n              long_var = (long *)xmalloc(0x10);\n              *long_var = long_var4;\n              long_var[1] = (long)(int)long_var2;\n              *(long **)(long_var3 + 0x20) = long_var;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_ptr[2] == 'F') {\n        local_char_ptr = local_char_ptr + 3;\n        long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n        if (long_var4 == 0) {\n          return 0;\n        }\n        undefined_var2 = debug_make_function_type_isra_0(long_var4,0,0);\n        long_var4 = debug_make_pointer_type_isra_0(undefined_var2);\n      }\n      else {\n        local_char_ptr = char_ptr;\n        long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      }\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 1;\n      break;\n    case 'r':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 5;\nLAB_001123e8:\n      char_var2 = stab_record_variable(param_type,stab_entry,char_ptr2,long_var4,undefined_var2,entry_value);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,char_ptr2,&local_char_ptr,local_array);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      long_var = (long *)debug_name_type(param_type,char_ptr2,long_var4);\n      if (long_var == (long *)0x0) {\n        return 0;\n      }\n      if (local_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_array[0] = long_var;\n      return 1;\n    case 'v':\n      local_char_ptr = char_ptr;\n      long_var4 = parse_stab_type(param_type,stab_entry,0,&local_char_ptr,0);\n      if (long_var4 == 0) {\n        return 0;\n      }\n      undefined_var2 = 3;\n    }\n    char_var2 = debug_record_parameter(param_type,char_ptr2,long_var4,undefined_var2,entry_value);\n    goto joined_r0x001123f8;\n  }\n  if (entry_type == 0xe0) {\n    if ((*(char *)((long)stab_entry + 0x44) != '\\0') && (entry_num == 1)) {\n      return 1;\n    }\n    char_var2 = stab_emit_pending_vars(param_type,stab_entry);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    char_var2 = debug_end_block(param_type,stab_entry[7] + stab_entry[6] + entry_value);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    stab_entry = stab_entry + 0xe;\n    *(int *)stab_entry = *(int *)stab_entry + -1;\n    char_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)stab_entry) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < entry_type) {\n      if (entry_type == 0xe2) {\n        char_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr = \"debug_end_common_block: not implemented\";\n        if (entry_type != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var2 = dcgettext(0,char_ptr,5);\n      fprintf(_stderr,\"%s\\n\",undefined_var2);\n      return 0;\n    }\n    if (entry_type != 0xc0) {\n      if (entry_type == 0xc2) {\n        int_var = *(int *)(stab_entry + 0x10);\n        *(uint *)(stab_entry + 0x10) = int_var + 1U;\n        long_var4 = xrealloc(stab_entry[0x11],(ulong)(int_var + 1U) << 3);\n        ptr_var2 = (undefined8 *)stab_entry[0xb];\n        stab_entry[0x11] = long_var4;\n        while( true ) {\n          if (ptr_var2 == (undefined8 *)0x0) {\n            undefined_var2 = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(entry_name,undefined_var2);\n            *(undefined8 *)(stab_entry[0x11] + (ulong)(*(int *)(stab_entry + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((entry_value == ptr_var2[3]) && (int_var = strcmp((char *)ptr_var2[2],entry_name), int_var == 0))\n          break;\n          ptr_var2 = (undefined8 *)*ptr_var2;\n        }\n        *(undefined8 *)(long_var4 + (ulong)(*(int *)(stab_entry + 0x10) - 1) * 8) = ptr_var2[5];\n        return 1;\n      }\n      if (entry_type == 0xa2) {\n        long_var4 = stab_entry[10];\n        if (long_var4 != 0) {\n          long_var2 = *(long *)(long_var4 + 8);\n          uint_var = *(uint *)(long_var4 + 0x20);\n          stab_entry[10] = long_var2;\n          if ((uint_var < *(uint *)(stab_entry + 0x10)) &&\n             (*(undefined8 *)(long_var4 + 0x28) = *(undefined8 *)(stab_entry[0x11] + (ulong)uint_var * 8),\n             long_var2 != 0)) {\n            entry_name = *(char **)(long_var2 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        entry_name = (char *)stab_entry[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)stab_entry + 0x44) != '\\0') && (entry_num == 1)) {\n      return 1;\n    }\n    if (*(char *)(stab_entry + 0xc) != '\\0') {\n      char_var2 = debug_start_block(param_type,stab_entry[7] + stab_entry[6] + entry_value);\n      if (char_var2 == '\\0') {\n        return 0;\n      }\n      char_var2 = stab_emit_pending_vars(param_type,stab_entry);\n      if (char_var2 != '\\0') {\n        *(int *)(stab_entry + 0xe) = *(int *)(stab_entry + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr = (char *)dcgettext(0,char_ptr,5);\n  fprintf(_stderr,char_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_char_ptr = local_char_ptr + 2;\n  local_char_ptr = strchr(local_char_ptr,0x3a);\n  if (local_char_ptr == (char *)0x0) {\n    char_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_ptr = char_ptr;\n    bad_stab(entry_name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (char_var2 != 't') {\n      return 1;\n    }\n    long_var = (long *)debug_name_type(param_type,char_ptr2,long_var);\n    if (long_var != (long *)0x0) {\n      if (local_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_array[0] = long_var;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *char_ptr2) &&\n     (int_var = strcmp((char *)pplVar18[1],char_ptr2), int_var == 0)) {\n    pplVar18[3] = long_var;\n    *ptr_ptr_var = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptr_ptr_var = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var2 < 1) {\nLAB_0011208f:\n    undefined_var2 = 1;\nLAB_001121c4:\n    char_var2 = debug_record_variable(param_type,char_ptr2,long_var4,undefined_var2,entry_value);\njoined_r0x001123f8:\n    if (char_var2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr = *(char **)(*long_var + 8);\n  if ((char_var2 != '\\0') && (char_var2 == *char_ptr)) {\n    char_ptr = char_ptr + 1;\n  }\n  if ((*char_ptr == *char_ptr2) && (int_var = strcmp(char_ptr,char_ptr2), int_var == 0)) {\n    entry_value = *(long *)(*long_var + 0x10) + *(long *)(*(long *)(*long_var + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var2 = long_var2 + -1;\n  long_var = long_var + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strchr",
                "debug_record_line",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "savestring",
                "debug_name_type",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_emit_pending_vars",
                "debug_end_block",
                "strtol",
                "strcmp",
                "debug_record_function",
                "free",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "xstrdup",
                "stab_record_variable",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "debug_tag_type",
                "debug_start_source",
                "xmalloc",
                "warn_stab",
                "strtod",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_stab_entry_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_data_00115dc0",
                "param_1": "fileHandle",
                "param_2": "sectionHeader",
                "param_3": "binaryData",
                "cVar1": "shouldSkipSection",
                "iVar2": "errorCode",
                "uVar3": "relocationCount",
                "lVar4": "sectionList",
                "puVar5": "relocationTable",
                "uVar6": "relocationTableSize",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "filteredRelocationTable",
                "puVar8": "currentRelocation",
                "uVar9": "relCount",
                "uStack_38": "errorStack"
            },
            "code": "\nvoid processBinaryData_00115dc0(undefined8 fileHandle,undefined8 *sectionHeader,long binaryData)\n\n{\n  char shouldSkipSection;\n  int errorCode;\n  undefined8 relocationCount;\n  long sectionList;\n  undefined8 *relocationTable;\n  ulong relocationTableSize;\n  code *jumpTable;\n  undefined8 *filteredRelocationTable;\n  undefined8 *currentRelocation;\n  ulong relCount;\n  undefined8 errorStack;\n  \n  shouldSkipSection = skip_section(fileHandle,sectionHeader,0);\n  if (shouldSkipSection != '\\0') {\n    return;\n  }\n  relocationCount = sectionHeader[0xc];\n  if ((((*(byte *)(binaryData + 0x48) & 7) != 3) && (strip_symbols != 6)) &&\n     (sectionList = find_section_list(*sectionHeader,0,0x100), sectionList == 0)) {\n    sectionList = bfd_get_reloc_upper_bound(fileHandle,sectionHeader);\n    if (sectionList < 0) {\n      if ((sectionList != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        status = 1;\n        relocationCount = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,fileHandle,sectionHeader,relocationCount,errorStack);\n        return;\n      }\n    }\n    else if (sectionList != 0) {\n      relocationTable = (undefined8 *)sectionHeader[0xe];\n      if (relocationTable == (undefined8 *)0x0) {\n        relocationTable = (undefined8 *)bfd_alloc(binaryData);\n        if (relocationTable == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocationTableSize = bfd_canonicalize_reloc(fileHandle,sectionHeader,relocationTable,isympp);\n        if ((long)relocationTableSize < 0) {\n          status = 1;\n          relocationCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocationTableSize = (ulong)*(uint *)(sectionHeader + 0xf);\n      }\n      if (strip_symbols == 7) {\n        filteredRelocationTable = relocationTable;\n        for (relCount = 0; relCount != relocationTableSize; relCount = relCount + 1) {\n          currentRelocation = filteredRelocationTable;\n          if (((*(long **)relocationTable[relCount] != (long *)0x0) &&\n              (sectionList = **(long **)relocationTable[relCount], sectionList != 0)) &&\n             (shouldSkipSection = is_specified_symbol(*(undefined8 *)(sectionList + 8),keep_specific_htab),\n             shouldSkipSection != '\\0')) {\n            currentRelocation = filteredRelocationTable + 1;\n            *filteredRelocationTable = relocationTable[relCount];\n          }\n          filteredRelocationTable = currentRelocation;\n        }\n        *filteredRelocationTable = 0;\n        relocationTableSize = (long)filteredRelocationTable - (long)relocationTable >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(binaryData + 8) + 0x288);\n      if (relocationTableSize == 0) {\n        relocationTableSize = 0;\n        relocationTable = (undefined8 *)0x0;\n      }\n      else {\n        relocationTableSize = relocationTableSize & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocationTableSize = 0;\n  relocationTable = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(binaryData + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(binaryData,relocationCount,relocationTable,relocationTableSize);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "bfd_canonicalize_reloc",
                "xexit",
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_reloc_upper_bound",
                "copy_relocations_in_section.cold",
                "skip_section",
                "bfd_nonfatal",
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_data_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_find_tagged_type_0010d559",
                "param_1": "sourceFile",
                "param_2": "inputString",
                "param_3": "count",
                "bVar1": "byteValue",
                "pbVar2": "currentByte",
                "cVar3": "result",
                "uVar4": "demangleCount",
                "iVar5": "comparisonResult",
                "ppcVar6": "taggedTypeArray",
                "sVar7": "inputStringLength",
                "lVar8": "taggedType",
                "plVar9": "fieldList",
                "pcVar10": "template",
                "__s1": "typeName",
                "__ptr": "tempString",
                "pbVar11": "nextByte",
                "uVar12": "typeFlag",
                "local_64": "remainingTags",
                "local_40": "mallocedStrings"
            },
            "code": "\nundefined8 parseAndFindTaggedType_0010d559(undefined8 *sourceFile,byte **inputString,long *count)\n\n{\n  byte byteValue;\n  byte *currentByte;\n  char result;\n  uint demangleCount;\n  int comparisonResult;\n  char **taggedTypeArray;\n  size_t inputStringLength;\n  long taggedType;\n  long *fieldList;\n  char *template;\n  char *typeName;\n  void *tempString;\n  byte *nextByte;\n  undefined8 typeFlag;\n  byte *__nptr;\n  int remainingTags;\n  char *mallocedStrings [2];\n  \n  currentByte = *inputString;\n  byteValue = currentByte[1];\n  if ((char)byteValue < ':') {\n    if ((char)byteValue < '1') goto LAB_0010d5d8;\n    remainingTags = (char)byteValue + -0x30;\n    if (currentByte[2] == 0x5f) {\n      *inputString = currentByte + 1;\n    }\n    nextByte = *inputString + 2;\n  }\n  else {\n    if (((byteValue != 0x5f) || (((&_sch_istable)[(ulong)currentByte[2] * 2] & 4) == 0)) ||\n       (currentByte[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = currentByte + 2;\n    taggedType = strtol((char *)__nptr,(char **)0x0,10);\n    remainingTags = (int)taggedType;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    nextByte = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *inputString = nextByte;\n  taggedTypeArray = (char **)0x0;\n  if (count != (long *)0x0) {\n    taggedTypeArray = mallocedStrings;\n  }\n  taggedType = 0;\n  while( true ) {\n    while( true ) {\n      remainingTags = remainingTags + -1;\n      if (remainingTags == -1) {\n        if (count != (long *)0x0) {\n          *count = taggedType;\n        }\n        return 1;\n      }\n      if (**inputString == 0x5f) {\n        *inputString = *inputString + 1;\n      }\n      if (**inputString != 0x74) break;\n      result = stab_demangle_template(sourceFile,inputString,taggedTypeArray);\n      template = mallocedStrings[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (count != (long *)0x0) {\n        inputStringLength = strlen(mallocedStrings[0]);\n        taggedType = stab_find_tagged_type(*sourceFile,sourceFile[1],template,inputStringLength & 0xffffffff,9);\n        free(template);\n        if (taggedType == 0) {\n          return 0;\n        }\n      }\n    }\n    demangleCount = stab_demangle_count(inputString);\n    inputStringLength = strlen((char *)*inputString);\n    if (inputStringLength < demangleCount) break;\n    if (count != (long *)0x0) {\n      if ((taggedType != 0) && (fieldList = (long *)debug_get_fields_isra_0(taggedType), fieldList != (long *)0x0))\n      {\n        template = (char *)savestring(*inputString,demangleCount);\n        for (; taggedType = *fieldList, taggedType != 0; fieldList = fieldList + 1) {\n          taggedType = *(long *)(taggedType + 8);\n          if (taggedType == 0) {\n            free(template);\n            return 0;\n          }\n          typeName = (char *)debug_get_type_name_constprop_0(taggedType);\n          if ((typeName != (char *)0x0) && (comparisonResult = strcmp(typeName,template), comparisonResult == 0)) break;\n        }\n        free(template);\n        if (taggedType != 0) goto LAB_0010d7ad;\n      }\n      typeFlag = 9;\n      if (remainingTags == 0) {\n        tempString = (void *)savestring(*inputString,demangleCount);\n        taggedType = debug_find_named_type(*sourceFile,tempString);\n        free(tempString);\n        if (taggedType != 0) goto LAB_0010d7ad;\n        typeFlag = 0;\n      }\n      taggedType = stab_find_tagged_type(*sourceFile,sourceFile[1],*inputString,demangleCount,typeFlag);\n      if (taggedType == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *inputString = *inputString + demangleCount;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(currentByte);\n  return 0;\n}\n\n",
            "called": [
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "debug_get_fields.isra.0",
                "debug_find_named_type",
                "free",
                "stab_demangle_template",
                "savestring",
                "debug_get_type_name.constprop.0",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_and_find_tagged_type_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "formatArguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list formatArguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,message,formatArguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "vfprintf",
                "putc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "free_memory_00108466",
                "param_7": "memoryBlock"
            },
            "code": "\nvoid freeMemory_00108466(void)\n\n{\n  void *memoryBlock;\n  \n  status = 1;\n  bfd_nonfatal_message(0);\n  free(memoryBlock);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_integer_from_byte_pointer_00108e76",
                "param_1": "bytePointer",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint extractIntegerFromBytePointer_00108e76(byte **bytePointer)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **bytePointer;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *bytePointer = *bytePointer + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "extract_integer_from_byte_pointer_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 param_2,undefined8 param_3)\n\n{\n  long hash_ptr;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2,0x30), input_value != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_value,param_2,param_3), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "path",
                "param_2": "default_path",
                "iVar1": "access_result",
                "sStack_a8": "file_stats"
            },
            "code": "\nchar * check_directory_access_0011283f(char *path,char *default_path)\n\n{\n  int access_result;\n  stat file_stats;\n  \n  if ((default_path == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stats);\n      if ((access_result == 0) && ((file_stats.st_mode & 0xf000) == 0x4000)) {\n        default_path = path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_descriptor_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer",
                "iVar1": "previousErrnoValue"
            },
            "code": "\nundefined8 closeFileDescriptor_00108237(void)\n\n{\n  int previousErrnoValue;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  previousErrnoValue = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = previousErrnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_descriptor_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "function_context",
                "param_2": "filename",
                "param_3": "record_size",
                "param_4": "record_type",
                "uVar1": "error_message",
                "plVar2": "record_data",
                "puVar3": "record_buffer",
                "lVar4": "temp",
                "puVar5": "temp_buffer",
                "pcVar6": "default_filename",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long function_context,char *filename,long record_size,uint record_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *record_data;\n  undefined4 *record_buffer;\n  long temp;\n  undefined4 *temp_buffer;\n  char *default_filename;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (record_size != 0) {\n    if (*(long *)(function_context + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      record_data = (long *)xmalloc(0x18);\n      *record_data = record_size;\n      *(undefined (*) [16])(record_data + 1) = ZEXT816(0);\n      record_buffer = (undefined4 *)xmalloc(0x30);\n      *(long **)(function_context + 0x18) = record_data;\n      record_data[2] = (long)record_buffer;\n      temp_buffer = record_buffer;\n      for (temp = 0xc; temp != 0; temp = temp + -1) {\n        *temp_buffer = 0;\n        temp_buffer = temp_buffer + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(function_context + 0x20) = record_buffer;\n      temp = *(long *)(function_context + 0x10);\n      *(undefined8 *)(record_buffer + 6) = param_5;\n      *(undefined8 *)(record_buffer + 8) = 0xffffffffffffffff;\n      temp = debug_add_to_namespace_constprop_0(temp + 0x10,default_filename,3,(record_type & 0xff) + 1);\n      if (temp != 0) {\n        *(long **)(temp + 0x20) = record_data;\n        error_message = CONCAT71((int7)((ulong)temp >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = detect_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal",
                "FUN_00107880",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "FUN_00104ea2",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "main",
                "simple_copy.cold",
                "copy_file",
                "display_info.isra.0",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_and_initialize_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlash",
                "lVar2": "index",
                "lVar3": "pathLength",
                "lVar4": "lastSlashIndex",
                "pcVar5": "newPath",
                "bVar6": "flag",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid allocateAndInitializePath_00114cf0(char *path)\n\n{\n  char *lastSlash;\n  long index;\n  long pathLength;\n  long lastSlashIndex;\n  char *newPath;\n  byte flag;\n  \n  flag = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)allocateMemory(9);\n    pathLength = 0;\n  }\n  else {\n    lastSlashIndex = (long)lastSlash - (long)path;\n    lastSlash = (char *)allocateMemory(lastSlashIndex + 0xb);\n    pathLength = lastSlashIndex + 1;\n    newPath = lastSlash;\n    for (index = lastSlashIndex; index != 0; index = index + -1) {\n      *newPath = *path;\n      path = path + (ulong)flag * -2 + 1;\n      newPath = newPath + (ulong)flag * -2 + 1;\n    }\n    lastSlash[lastSlashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlash + pathLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + pathLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_stab_string_0010a181",
                "param_1": "ptr",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "cVar1": "charValue",
                "iVar2": "intValue",
                "iVar3": "result",
                "uVar4": "returnValue",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "resultString",
                "lVar7": "counter",
                "local_41": "localFlag"
            },
            "code": "\nundefined4 generateStabString_0010a181(long ptr,long start,long end,byte flag)\n\n{\n  char charValue;\n  int intValue;\n  int result;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long counter;\n  byte localFlag;\n  \n  charValue = *(char *)(*(long *)(ptr + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  localFlag = 1;\n  if (charValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(ptr + 0x60) + 0x1c);\n  }\n  intValue = *(int *)(*(long *)(ptr + 0x60) + 0x18);\n  string2 = (char *)stab_pop_type(ptr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(ptr + 0x68);\n    *(long *)(ptr + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  length1 = strlen(resultString);\n  sprintf(resultString + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = intValue * (((int)end - (int)start) + 1);\n  }\n  returnValue = stab_push_string(ptr,resultString,counter,localFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_string_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_target_info_001199d0",
                "pcVar4": "columns",
                "sVar5": "archSize",
                "pcVar6": "errorString",
                "uVar7": "tempDir",
                "piVar8": "errNum",
                "lVar10": "tempDirSize",
                "lVar11": "tempDirIndex",
                "ppcVar12": "targetList",
                "uVar13": "maxSize",
                "uVar14": "archSize",
                "local_70": "archIndex",
                "memoized_tmpdir": "cachedTmpDir",
                "vartmp": "tmpVar",
                "&tmp": "&varTmp",
                "iVar2": "currentArch",
                "_stderr": "stderr",
                "unlink(pcVar6)": "unlink(tempDirArray)",
                "_stdout": "stdout"
            },
            "code": "\n\n\nvoid printTargetInfo_001199d0(void)\n\n{\n  int iVar1;\n  int currentArch;\n  int iVar3;\n  char *columns;\n  size_t archSize;\n  char *errorString;\n  undefined8 tempDir;\n  int *errNum;\n  int iVar9;\n  long tempDirSize;\n  long tempDirIndex;\n  char **targetList;\n  uint maxSize;\n  ulong archSize;\n  int archIndex;\n  \n  columns = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(columns,\"(GNU Binutils for Debian) 2.40\");\n  if (cachedTmpDir == (char *)0x0) {\n    columns = getenv(\"TMPDIR\");\n    tempDir = try_dir_lto_priv_0(columns,0);\n    columns = getenv(\"TMP\");\n    tempDir = try_dir_lto_priv_0(columns,tempDir);\n    columns = getenv(\"TEMP\");\n    tempDir = try_dir_lto_priv_0(columns,tempDir);\n    tempDir = try_dir_lto_priv_0(&DAT_0011b39a,tempDir);\n    tempDir = try_dir_lto_priv_0(tmpVar,tempDir);\n    columns = (char *)try_dir_lto_priv_0(&varTmp,tempDir);\n    if (columns == (char *)0x0) {\n      columns = \".\";\n    }\n    archSize = strlen(columns);\n    errorString = (char *)xmalloc((int)archSize + 2);\n    cachedTmpDir = strcpy(errorString,columns);\n    cachedTmpDir[archSize & 0xffffffff] = '/';\n    cachedTmpDir[(int)archSize + 1] = '\\0';\n  }\n  columns = cachedTmpDir;\n  archSize = strlen(cachedTmpDir);\n  tempDirSize = (long)(int)archSize;\n  errorString = (char *)xmalloc(tempDirSize + 9);\n  strcpy(errorString,columns);\n  *(undefined2 *)(errorString + tempDirSize) = 0x6363;\n  *(undefined4 *)(errorString + tempDirSize + 2) = 0x58585858;\n  *(undefined4 *)((long)(errorString + tempDirSize + 2) + 3) = 0x585858;\n  errorString[tempDirSize + 8] = '\\0';\n  currentArch = mkstemps(errorString,0);\n  if (currentArch == -1) {\n    errNum = __errno_location();\n    errorString = strerror(*errNum);\n    fprintf(stderr,\"Cannot create temporary file in %s: %s\\n\",columns,errorString);\n                    \n    abort();\n  }\n  currentArch = close(currentArch);\n  if (currentArch != 0) {\n                    \n    abort();\n  }\n  maxSize = 0;\n  currentArch = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempDirArray);\n  free(errorString);\n  archIndex = 0;\n  do {\n    columns = (char *)bfd_printable_arch_mach(currentArch);\n    archSize = strlen(columns);\n    if ((int)maxSize < (int)(uint)archSize) {\n      maxSize = (uint)archSize;\n    }\n    currentArch = currentArch + 1;\n  } while (currentArch != 0x57);\n  columns = getenv(\"COLUMNS\");\n  currentArch = archIndex;\n  if (columns != (char *)0x0) {\n    tempDirSize = strtol(columns,(char **)0x0,10);\n    iVar1 = (int)tempDirSize;\n    if (iVar1 != 0) goto LAB_00119b11;\n  }\n  iVar1 = 0x50;\nLAB_00119b11:\n  do {\n    archIndex = currentArch;\n    if (-1 < archIndex) {\n      return;\n    }\n    tempDirIndex = (long)archIndex;\n    iVar9 = (iVar1 - maxSize) + -1;\n    tempDirSize = tempDirIndex;\n    do {\n      currentArch = (int)tempDirSize;\n      if (-1 < currentArch) break;\n      archSize = strlen(*(char **)(tempDirSize * 0x60));\n      tempDirSize = tempDirSize + 1;\n      iVar9 = (iVar9 - (int)archSize) + -1;\n    } while (-1 < iVar9);\n    printf(\"\\n%*s\",(ulong)(maxSize + 1),&DAT_0011b4a1);\n    for (targetList = (char **)(tempDirIndex * 0x60);\n        ((ulong)(uint)(currentArch - archIndex) + tempDirIndex) * 0x60 - (long)targetList != 0;\n        targetList = targetList + 0xc) {\n      printf(\"%s \",*targetList);\n    }\n    iVar9 = 2;\n    putc(10,stdout);\n    do {\n      columns = (char *)bfd_printable_arch_mach(iVar9,0);\n      iVar3 = strcmp(columns,\"UNKNOWN!\");\n      if (iVar3 != 0) {\n        tempDir = bfd_printable_arch_mach(iVar9,0);\n        printf(\"%*s \",(ulong)maxSize,tempDir);\n        targetList = (char **)(tempDirIndex * 0x60);\n        iVar3 = archIndex;\n        while (currentArch != iVar3) {\n          if (*(char *)((long)targetList + (ulong)(iVar9 - 2) + 8) == '\\0') {\n            archSize = strlen(*targetList);\n            for (archSize = archSize & 0xffffffff; (int)archSize != 0; archSize = (ulong)((int)archSize - 1)) {\n              putc(0x2d,stdout);\n            }\n          }\n          else {\n            fputs(*targetList,stdout);\n          }\n          iVar3 = iVar3 + 1;\n          if (currentArch != iVar3) {\n            putc(0x20,stdout);\n          }\n          targetList = targetList + 0xc;\n        }\n        putc(10,stdout);\n      }\n      iVar9 = iVar9 + 1;\n    } while (iVar9 != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "display_info.isra.0.cold",
                "strerror",
                "bfd_printable_arch_mach",
                "close",
                "abort",
                "mkstemps",
                "free",
                "bfd_iterate_over_targets",
                "getenv",
                "fprintf",
                "strcpy",
                "strlen",
                "dcgettext",
                "printf",
                "try_dir.lto_priv.0",
                "xmalloc",
                "do_display_target",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_target_info_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "decode_and_build_attribute_note_0010847a",
                "decode_build_attr_note_00116490": "decode_and_build_attribute_note_helper"
            },
            "code": "\nvoid decode_and_build_attribute_note_0010847a(void)\n\n{\n  decode_and_build_attribute_note_0010847a_helper();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "decode_and_build_attribute_note_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "decode_stab_string_0010d21c",
                "bVar1": "byte1",
                "pbVar2": "ptr1",
                "bVar3": "byte2",
                "cVar4": "char1",
                "bVar5": "byte3",
                "uVar6": "result",
                "iVar7": "intVar1",
                "uVar8": "uintVar1",
                "sVar9": "sizeVar1",
                "pbVar10": "ptr2",
                "__ptr": "ptr3",
                "__ptr_00": "ptr4",
                "__haystack": "haystack",
                "pcVar11": "ptr5",
                "uVar12": "result2",
                "pcVar13": "ptr6",
                "bVar14": "byte4",
                "pcVar15": "ptr7",
                "bVar16": "byte5",
                "bVar17": "byte6",
                "bVar18": "byte7",
                "bVar19": "byte8",
                "uVar20": "uintVar2",
                "uVar21": "ulongVar1",
                "local_3c": "arrayVar1"
            },
            "code": "\nundefined4 decode_stab_string_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte byte1;\n  byte *ptr1;\n  byte byte2;\n  char char1;\n  byte byte3;\n  undefined4 result;\n  int intVar1;\n  uint uintVar1;\n  size_t sizeVar1;\n  byte *ptr2;\n  void *ptr3;\n  void *ptr4;\n  char *haystack;\n  char *ptr5;\n  undefined8 result2;\n  char *ptr6;\n  byte byte4;\n  char *ptr7;\n  byte byte5;\n  byte byte6;\n  byte byte7;\n  byte byte8;\n  uint uintVar2;\n  ulong ulongVar1;\n  uint arrayVar1 [3];\n  \n  ptr1 = *param_2;\n  *param_2 = ptr1 + 1;\n  arrayVar1[0] = stab_demangle_count(param_2);\n  ulongVar1 = (ulong)arrayVar1[0];\n  if (arrayVar1[0] != 0) {\n    ptr2 = *param_2;\n    sizeVar1 = strlen((char *)ptr2);\n    if (ulongVar1 <= sizeVar1) {\n      *param_2 = ptr2 + ulongVar1;\n      uintVar2 = 0;\n      result = stab_demangle_get_count(param_2,arrayVar1);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (arrayVar1[0] <= uintVar2) {\n          if (param_3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr3 = (void *)savestring(ptr1,(int)*param_2 - (int)ptr1);\n          ptr4 = (void *)concat(\"NoSuchStrinG__\",ptr3,0);\n          free(ptr3);\n          haystack = (char *)cplus_demangle(ptr4,2);\n          free(ptr4);\n          if ((haystack != (char *)0x0) &&\n             (ptr5 = strstr(haystack,\"::NoSuchStrinG\"), ptr6 = haystack,\n             ptr7 = haystack, ptr5 != (char *)0x0)) {\n            for (; ptr6 != ptr5; ptr6 = ptr6 + 1) {\n              if ((*ptr6 != ' ') ||\n                 (((ptr6[1] == '>' && (haystack < ptr6)) && (ptr6[-1] == '>')))) {\n                *ptr7 = *ptr6;\n                ptr7 = ptr7 + 1;\n              }\n            }\n            result2 = savestring(haystack,(int)ptr7 - (int)haystack);\n            *param_3 = result2;\n            free(haystack);\n            return result;\n          }\n          stab_bad_demangle(ptr1);\n          free(haystack);\n          return 0;\n        }\n        ptr2 = *param_2;\n        if (*ptr2 != 0x5a) {\n          byte3 = stab_demangle_type_lto_priv_0(param_1,param_2,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          byte2 = 0;\n          byte4 = 0;\n          byte7 = 0;\n          byte6 = 0;\n          byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte5 = byte2;\n              byte1 = *ptr2;\n              if ((byte4 | byte1 == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte2 = byte3;\n              byte4 = byte3;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongVar1 = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongVar1 & 0x11409) == 0) {\n                  if ((ulongVar1 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              ptr2 = ptr2 + 1;\n              byte2 = byte5;\n              byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte2 = byte5;\n              byte7 = byte3;\n              break;\n            case 99:\n              byte2 = byte5;\n              byte8 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte2 = byte5;\n              byte6 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = ptr2 + 1;\n        char1 = stab_demangle_type_lto_priv_0(param_1,param_2,0);\n        if (char1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(ptr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte5 == 0) {\n    if (byte8 == 0) {\n      if (byte7 == 0) {\n        if (byte6 == 0) {\n          if (byte3 != 0) {\n            uintVar1 = stab_demangle_count(param_2);\n            if (uintVar1 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uintVar1;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            ptr2 = *param_2;\n            if (((&_sch_istable)[(ulong)*ptr2 * 2] & 4) == 0) break;\n            *param_2 = ptr2 + 1;\n          }\n          if (*ptr2 == 0x2e) {\n            do {\n              ptr2 = ptr2 + 1;\n              *param_2 = ptr2;\n            } while (((&_sch_istable)[(ulong)*ptr2 * 2] & 4) != 0);\n          }\n          ptr2 = *param_2;\n          if (*ptr2 == 0x65) {\n            do {\n              ptr2 = ptr2 + 1;\n              *param_2 = ptr2;\n            } while (((&_sch_istable)[(ulong)*ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar1 = stab_demangle_count(param_2);\n        if (1 < uintVar1) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      intVar1 = stab_demangle_count(param_2);\n      if (intVar1 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uintVar2 = uintVar2 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "cplus_demangle",
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_get_count",
                "concat",
                "stab_demangle_count",
                "abort",
                "strstr",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "decode_stab_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "delete_unused_htabs_001054af",
                "param_1": "unused_param_1",
                "param_2": "unused_param_2",
                "in_RAX": "unused_variable_1",
                "strip_specific_htab": "specific_htab_1",
                "strip_unneeded_htab": "specific_htab_2",
                "keep_specific_htab": "specific_htab_3",
                "localize_specific_htab": "specific_htab_4",
                "globalize_specific_htab": "specific_htab_5",
                "keepglobal_specific_htab": "specific_htab_6",
                "weaken_specific_htab": "specific_htab_7",
                "redefine_specific_htab": "specific_htab_8",
                "redefine_specific_reverse_htab": "specific_htab_9"
            },
            "code": "\nvoid delete_unused_htabs_001054af(undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 unused_variable_1;\n  \n  htab_delete(specific_htab_1);\n  htab_delete(specific_htab_2);\n  htab_delete(specific_htab_3);\n  htab_delete(specific_htab_4);\n  htab_delete(specific_htab_5);\n  htab_delete(specific_htab_6);\n  htab_delete(specific_htab_7);\n  htab_delete(specific_htab_8);\n  htab_delete(specific_htab_9,unused_param_2,unused_variable_1);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "delete_unused_htabs_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "record_and_allocate_memory_0010c139",
                "param_1": "functionName",
                "param_2": "structureAddress",
                "param_3": "dataPointer",
                "param_4": "parameter1",
                "param_5": "parameter2",
                "param_6": "parameter3",
                "uVar1": "oldMemoryAddress",
                "cVar2": "character",
                "uVar3": "result",
                "puVar4": "newMemoryAddress",
                "in_R10": "register1",
                "unaff_R15": "register2"
            },
            "code": "\nulong recordAndAllocateMemory_0010c139(undefined8 functionName,long structureAddress,undefined8 dataPointer,undefined8 parameter1,\n                  undefined4 parameter2,undefined8 parameter3)\n\n{\n  undefined8 oldMemoryAddress;\n  char character;\n  ulong result;\n  undefined8 *newMemoryAddress;\n  undefined8 register1;\n  undefined8 register2;\n  \n  character = *(char *)(structureAddress + 0x60);\n  if ((character != '\\0') && ((*(int *)(structureAddress + 0x40) != 0 || (*(char *)(structureAddress + 0x44) == '\\0')))) {\n    newMemoryAddress = (undefined8 *)xmalloc(0x28);\n    oldMemoryAddress = *(undefined8 *)(structureAddress + 0x78);\n    *(undefined8 *)((long)newMemoryAddress + 0x1c) = 0;\n    newMemoryAddress[2] = parameter1;\n    *(undefined4 *)(newMemoryAddress + 3) = parameter2;\n    newMemoryAddress[4] = parameter3;\n    *(undefined8 **)(structureAddress + 0x78) = newMemoryAddress;\n    *newMemoryAddress = oldMemoryAddress;\n    newMemoryAddress[1] = dataPointer;\n    return CONCAT71((int7)((ulong)register2 >> 8),character) & 0xffffffff;\n  }\n  result = debug_record_variable(functionName,dataPointer,parameter1,parameter2,parameter3,register1);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "record_and_allocate_memory_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "update_symbol_with_address_0010e439",
                "param_1": "baseAddress",
                "param_2": "newSymbolAddress"
            },
            "code": "\nvoid updateSymbolWithAddress_0010e439(long baseAddress,undefined8 newSymbolAddress)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = newSymbolAddress;\n  stab_write_symbol_lto_priv_0(baseAddress,0x84,0,0,newSymbolAddress);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "stab_start_compilation_unit.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_with_address_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main",
                "parse_stab",
                "stab_push_string",
                "save_stab",
                "FUN_0010554f",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "parse_coff_struct_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_arg",
                "stab_class_method_var",
                "main",
                "parse_stab",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_remember_type",
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "FUN_00114dc7",
                "stab_get_struct_index",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "main",
                "get_file_size",
                "try_dir.lto_priv.0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "inputParam",
                "param_2": "size",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 inputParam,int size)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(size - 1U) * 8);\n  }\n  stab_push_defined_type(inputParam,defaultValue,size);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_data_00112502",
                "param_1": "data",
                "param_2": "param",
                "param_3": "value",
                "uVar1": "count",
                "puVar2": "ptrArray",
                "uVar3": "temp",
                "cVar4": "result"
            },
            "code": "\nundefined processData_00112502(long data,undefined8 param,ulong value)\n\n{\n  uint count;\n  undefined8 *ptrArray;\n  undefined8 temp;\n  char result;\n  \n  do {\n    ptrArray = *(undefined8 **)(data + 0x40);\n    if (ptrArray == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((count = *(uint *)(data + 0x48), count < 10 && (ptrArray[(ulong)count + 2] != -1))) {\n      if (value <= (ulong)ptrArray[(ulong)count + 0xc]) {\n        return 1;\n      }\n      result = stab_lineno_lto_priv_0(param,*(undefined8 *)(ptrArray[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    temp = *ptrArray;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_name.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_lines_00104cc1",
                "unaff_RBX": "prev_line",
                "pbVar5": "curr_line",
                "unaff_EBP": "line_count",
                "in_R10": "line",
                "unaff_R13": "filename",
                "unaff_R14": "ptr",
                "unaff_R15": "start",
                "param_7": "error_handle",
                "param_8": "end",
                "param_9": "buffer",
                "uVar1": "err_msg",
                "ppbVar2": "slot"
            },
            "code": "\nvoid parse_lines_00104cc1(void)\n\n{\n  undefined8 err_msg;\n  byte **slot;\n  byte *pbVar3;\n  byte bVar4;\n  byte *prev_line;\n  byte *curr_line;\n  int line_count;\n  byte *line;\n  undefined8 filename;\n  byte *ptr;\n  byte *start;\n  undefined8 error_handle;\n  undefined8 *end;\n  byte *buffer;\n  \ncode_r0x00104cc1:\n  buffer = line;\n  err_msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(err_msg,error_handle,line_count);\n  curr_line = prev_line;\n  line = buffer;\nLAB_00114599:\n  do {\n    *line = 0;\n    if (start < line) {\n      slot = (byte **)htab_find_slot();\n      *slot = start;\n    }\n    line_count = line_count + 1;\n    pbVar3 = curr_line;\n    if (ptr[1] == 0) {\n      *end = filename;\n      return;\n    }\n    for (; bVar4 = *pbVar3, ptr = pbVar3, bVar4 != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          prev_line = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *pbVar3 = 0;\n          prev_line = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            prev_line = pbVar3 + 2;\n            ptr = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          parse_and_store_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      ptr = pbVar3 + 1;\n      prev_line = pbVar3 + 2;\n    }\n    else {\n      prev_line = pbVar3 + 1;\n    }\nLAB_00114553:\n    bVar4 = *curr_line;\n    start = curr_line;\n    while ((bVar4 == 0x20 || (line = start, bVar4 == 9))) {\n      curr_line = start + 1;\n      start = start + 1;\n      bVar4 = *curr_line;\n    }\n    do {\n      curr_line = prev_line;\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = line[1];\n      line = line + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    bVar4 = line[1];\n    if ((((((bVar4 == 9) || (bVar4 == 0x20)) && ((bVar4 = line[2], bVar4 == 9 || (bVar4 == 0x20)))\n          ) && ((bVar4 = line[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n        ((bVar4 = line[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n       ((bVar4 = line[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n      bVar4 = line[6];\n      pbVar3 = line + 6;\n      if ((bVar4 == 9) || (bVar4 == 0x20)) {\n        do {\n          do {\n            bVar4 = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (bVar4 == 0x20);\n        } while (bVar4 == 9);\n      }\n    }\n    if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "dcgettext",
                "non_fatal",
                "htab_find_slot",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_type_with_params_00113bfa",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "type",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong createTypeWithParams_00113bfa(long value1,long value2)\n\n{\n  long type;\n  long *allocatedMemory;\n  \n  if (((value1 != 0) && (value2 != 0)) &&\n     (type = debug_make_type_constprop_0(0x12,0), type != 0)) {\n    allocatedMemory = (long *)xmalloc(0x10);\n    *allocatedMemory = value1;\n    allocatedMemory[1] = value2;\n    *(long **)(type + 0x10) = allocatedMemory;\n    return type;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_type_with_params_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_not_coff_00108375",
                "param_1": "paramPtr",
                "param_2": "paramArray",
                "param_3": "paramVal",
                "uVar1": "var1",
                "uVar2": "var2",
                "unaff_EBX": "ebx",
                "dcgettext": "translateText",
                "non_fatal": "showErrorMessage"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00108375(undefined8 paramPtr,undefined8 *paramArray,undefined8 paramVal)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  uint ebx;\n  \n  if (*(int *)(paramArray[1] + 8) != 2) {\n    var1 = *paramArray;\n    ebx = ebx & 0xf7ffffff;\n    var2 = translateText(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    showErrorMessage(var2,var1,paramVal);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_push_string_00109e76",
                "param_1": "baseAddress",
                "param_2": "value",
                "lVar1": "currentValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateAndPushString_00109e76(long baseAddress,uint value)\n\n{\n  long currentValue;\n  char formattedString [58];\n  \n  currentValue = *(long *)(baseAddress + 0x68);\n  *(long *)(baseAddress + 0x68) = currentValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)value);\n  stab_push_string(baseAddress,formattedString,currentValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_and_push_string_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_saved_stabs_001088ae",
                "param_1": "new_param_1",
                "param_2": "new_param_2",
                "param_3": "new_param_3",
                "param_4": "new_param_4",
                "iVar1": "new_index",
                "lVar2": "new_offset",
                "uVar3": "new_dup_string"
            },
            "code": "\nulong update_saved_stabs_001088ae(undefined4 new_param_1,undefined4 new_param_2,undefined8 new_param_3,undefined8 new_param_4)\n\n{\n  int new_index;\n  long new_offset;\n  undefined8 new_dup_string;\n  \n  new_offset = (long)saved_stabs_index * 0x18;\n  free(*(void **)(saved_stabs + new_offset + 0x10));\n  *(undefined4 *)(saved_stabs + new_offset) = new_param_1;\n  *(undefined4 *)(saved_stabs + new_offset + 4) = new_param_2;\n  *(undefined8 *)(saved_stabs + new_offset + 8) = new_param_3;\n  new_dup_string = xstrdup(new_param_4);\n  *(undefined8 *)(saved_stabs + new_offset + 0x10) = new_dup_string;\n  new_index = saved_stabs_index + 1;\n  saved_stabs_index = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_saved_stabs_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "debug_start_source",
                "stab_lineno.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_data_structure_0010afd5",
                "param_1": "list",
                "param_2": "context",
                "param_3": "string",
                "param_4": "string_length",
                "param_5": "type",
                "param_6": "additional_data",
                "__s2": "search_string",
                "puVar2": "current_node",
                "uVar3": "type_data",
                "lVar4": "result",
                "puVar5": "current_entry",
                "puVar6": "type_entry",
                "bVar7": "temp",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16]\nfindStringInDataStructure_0010afd5(undefined8 *list,long context,undefined8 string,undefined4 string_length,\n            undefined4 type,undefined8 additional_data)\n\n{\n  int iVar1;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 type_data;\n  long result;\n  undefined8 *current_entry;\n  undefined4 *type_entry;\n  byte temp;\n  undefined return_value [16];\n  \n  temp = 0;\n  search_string = (char *)savestring(string,string_length);\n  for (list = (undefined8 *)*list; list != (undefined8 *)0x0;\n      list = (undefined8 *)*list) {\n    for (current_node = (undefined8 *)list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)current_node[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if ((*(int *)((long)current_entry + 0x14) == 1) && (*(char *)current_entry[1] == *search_string)) {\n            iVar1 = strcmp((char *)current_entry[1],search_string);\n            if (iVar1 == 0) {\n              result = current_entry[4];\n              if (result == 0) goto LAB_0010b05b;\n              free(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      type_data = *(undefined8 *)(context + 0x1a0);\n      type_entry = (undefined4 *)((long)current_node + 0x14);\n      for (result = 5; result != 0; result = result + -1) {\n        *type_entry = 0;\n        type_entry = type_entry + (ulong)temp * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = type;\n      *current_node = type_data;\n      current_node[1] = search_string;\n      type_data = debug_make_indirect_type_isra_0(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_node[4] = type_data;\nLAB_0010b0e7:\n      result = current_node[4];\nLAB_0010b0eb:\n      return_value._8_8_ = additional_data;\n      return_value._0_8_ = result;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      iVar1 = strcmp((char *)current_node[1],search_string);\n      if (iVar1 == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = type;\n        }\n        free(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "debug_make_indirect_type.isra.0",
                "savestring",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_string_in_data_structure_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "strchr",
                "bad_stab",
                "savestring",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_array_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_demangle_args",
                "strtol",
                "debug_make_enum_type.isra.0",
                "strcmp",
                "debug_get_real_type.isra.0",
                "stab_demangle_count",
                "free",
                "fprintf",
                "strcpy",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "parse_number",
                "strstr",
                "cplus_demangle_init_info",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "cplus_demangle_mangled_name",
                "sprintf",
                "startswith.lto_priv.0.lto_priv.0",
                "strncmp",
                "debug_get_type_name.constprop.0",
                "stab_demangle_v3_arglist",
                "debug_make_void_type.isra.0",
                "strcat",
                "stab_bad_demangle",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_method_type.isra.0",
                "malloc",
                "stab_demangle_remember_type",
                "debug_make_struct_type.isra.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "parse_stab_type_number",
                "stab_find_slot",
                "debug_make_const_type.isra.0",
                "stab_demangle_function_name.constprop.0",
                "stab_find_type",
                "stab_find_tagged_type",
                "strspn",
                "debug_make_type.constprop.0",
                "debug_make_int_type.isra.0",
                "debug_find_named_type",
                "warn_stab",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_stabs_entries_00108b3e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__format": "format_string",
                "lVar1": "stab_name",
                "lVar2": "stab_offset",
                "piVar3": "stab_entry",
                "iVar4": "index"
            },
            "code": "\n\n\nundefined8 print_stabs_entries_00108b3e(undefined8 param1,undefined8 param2,undefined8 param3)\n\n{\n  char *format_string;\n  long stab_name;\n  long stab_offset;\n  int *stab_entry;\n  int index;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  index = saved_stabs_index;\n  do {\n    stab_offset = (long)index * 0x18;\n    stab_entry = (int *)(saved_stabs + stab_offset);\n    if (*(long *)(saved_stabs + stab_offset + 0x10) != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(saved_stabs + stab_offset + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(saved_stabs + stab_offset + 8));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(saved_stabs + stab_offset + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    index = (index + 1) % 0x10;\n  } while (saved_stabs_index != index);\n  return param3;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "input",
                "stab_modify_type": "modifyStabTypeHelper"
            },
            "code": "\nvoid modifyStabType_0010a083(long input)\n\n{\n  modifyStabType_0010a083Helper(input,0x2a,4,input + 0x178,input + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_copy_00109c2e",
                "param_1": "sourceArray",
                "param_2": "newValue",
                "param_3": "arraySize",
                "param_4": "flag",
                "param_5": "outputArray",
                "param_6": "extraData",
                "lVar1": "newPointer",
                "plVar2": "targetArray",
                "lVar3": "loopCounter",
                "puVar4": "arrayEnd",
                "uVar5": "arrayLength",
                "bVar6": "flag2",
                "auVar7": "result"
            },
            "code": "\nundefined  [16]\nexpandAndCopy_00109c2e(long sourceArray,long newValue,ulong arraySize,int flag,undefined4 *outputArray,\n            undefined8 extraData)\n\n{\n  long newPointer;\n  long *targetArray;\n  long loopCounter;\n  undefined *arrayEnd;\n  ulong arrayLength;\n  byte flag2;\n  undefined result [16];\n  \n  flag2 = 0;\n  arraySize = arraySize & 0xffffffff;\n  arrayLength = *(ulong *)(sourceArray + 0x1b0);\n  if (arrayLength <= arraySize) {\n    if (arrayLength == 0) {\n      arrayLength = 10;\n    }\n    for (; arrayLength <= arraySize; arrayLength = arrayLength * 2) {\n    }\n    newPointer = xrealloc(*(undefined8 *)(sourceArray + 0x1a8),arrayLength * 0x18);\n    *(long *)(sourceArray + 0x1a8) = newPointer;\n    arrayEnd = (undefined *)(*(long *)(sourceArray + 0x1b0) * 0x18 + newPointer);\n    for (loopCounter = (arrayLength - *(long *)(sourceArray + 0x1b0)) * 0x18; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *arrayEnd = 0;\n      arrayEnd = arrayEnd + (ulong)flag2 * -2 + 1;\n    }\n    *(ulong *)(sourceArray + 0x1b0) = arrayLength;\n  }\n  targetArray = (long *)(arraySize * 0x18 + *(long *)(sourceArray + 0x1a8));\n  if (*targetArray == 0) {\n    newPointer = *(long *)(sourceArray + 0x68);\n    *targetArray = newPointer;\n    *(long *)(sourceArray + 0x68) = newPointer + 1;\n    targetArray[1] = newValue;\n    *(int *)(targetArray + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(targetArray + 2) = 0;\n    *(undefined4 *)((long)targetArray + 0x14) = *outputArray;\n  }\n  else {\n    *outputArray = *(undefined4 *)((long)targetArray + 0x14);\n  }\n  result._8_8_ = extraData;\n  result._0_8_ = *targetArray;\n  return result;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_tag_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "expand_and_copy_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "handle_bad_format_001053b5",
                "uVar1": "errorMsg",
                "dcgettext": "getLocalizedMessage"
            },
            "code": "\nvoid handleBadFormat_001053b5(void)\n\n{\n  undefined8 errorMsg;\n  \n  errorMsg = getLocalizedMessage(0,\"bad format for %s\",5);\n                    \n  fatal(errorMsg);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "handle_bad_format_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "file_address",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long file_address,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(file_address + 8) != 0) && (*(long *)(file_address + 0x10) != 0)) {\n    offset = *(long *)(file_address + 0x10) + 0x10;\n    if (*(long *)(file_address + 0x20) != 0) {\n      offset = *(long *)(file_address + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "data",
                "param_2": "name",
                "param_3": "type",
                "uVar1": "result",
                "uVar2": "count",
                "lVar3": "ptr1",
                "piVar4": "ptr2",
                "__s1": "str1",
                "cVar5": "isSameType",
                "iVar6": "index",
                "puVar7": "ptr3",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setClassID_0010c7a0(long data,char *name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint count;\n  long ptr1;\n  int *ptr2;\n  char *str1;\n  char isSameType;\n  int index;\n  undefined8 *ptr3;\n  undefined returnValue [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  ptr1 = *(long *)(type + 4);\n  ptr3 = (undefined8 *)(ulong)*(uint *)(ptr1 + 0xc);\n  if (*(uint *)(ptr1 + 0xc) <= *(uint *)(data + 0x38)) {\n    for (ptr3 = *(undefined8 **)(data + 0x50); ptr3 != (undefined8 *)0x0;\n        ptr3 = (undefined8 *)*ptr3) {\n      ptr2 = (int *)ptr3[1];\n      if (*ptr2 == *type) {\n        str1 = (char *)ptr3[2];\n        if (name == (char *)0x0) {\n          if (str1 == (char *)0x0) {\nLAB_0010c82c:\n            isSameType = debug_type_samep(data,ptr2,type);\n            if (isSameType != '\\0') {\n              count = *(uint *)(*(long *)(ptr3[1] + 0x10) + 0xc);\n              ptr3 = (undefined8 *)(ulong)count;\n              *(uint *)(ptr1 + 0xc) = count;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((str1 != (char *)0x0) && (*str1 == *name)) &&\n                (index = strcmp(str1,name), index == 0)) goto LAB_0010c82c;\n      }\n    }\n    index = *(int *)(data + 0x34) + 1;\n    *(int *)(data + 0x34) = index;\n    *(int *)(ptr1 + 0xc) = index;\n    ptr3 = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(data + 0x50);\n    ptr3[2] = name;\n    *(undefined8 **)(data + 0x50) = ptr3;\n    *ptr3 = result;\n    ptr3[1] = type;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)ptr3 >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param_4;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_type_samep",
                "__assert_fail",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_data_0010922b",
                "param_1": "returnValue",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "dataType1",
                "uVar2": "dataType2",
                "pplVar3": "ptrPtr1",
                "ppcVar4": "ptrPtr2",
                "ppcVar5": "tempPtr",
                "lVar6": "dataOffset1",
                "lVar7": "dataOffset2",
                "lVar8": "tempOffset",
                "pcVar9": "tempCharPtr1",
                "pcVar10": "tempCharPtr2",
                "cVar11": "comparisonResult",
                "bVar12": "isMatch",
                "iVar13": "comparison",
                "uVar14": "type1",
                "uVar15": "type2",
                "puVar16": "ptrType1",
                "puVar17": "ptrType2",
                "plVar18": "ptr1",
                "lVar19": "offset",
                "plVar20": "ptr2",
                "plVar21": "tempPtr1",
                "lVar22": "tempData"
            },
            "code": "\nbyte compareData_0010922b(long returnValue,long *data1,long *data2)\n\n{\n  uint dataType1;\n  uint dataType2;\n  long **ptrPtr1;\n  char **ptrPtr2;\n  char **tempPtr;\n  long dataOffset1;\n  long dataOffset2;\n  long tempOffset;\n  char *tempCharPtr1;\n  char *tempCharPtr2;\n  char comparisonResult;\n  byte isMatch;\n  int comparison;\n  undefined8 type1;\n  undefined8 type2;\n  undefined8 *ptrType1;\n  undefined8 *ptrType2;\n  long *ptr1;\n  long offset;\n  long *ptr2;\n  long *tempPtr1;\n  long tempData;\n  long *local_70;\n  undefined8 *local_58;\n  long *plStack_50;\n  long *local_48;\n  \n  ptr1 = data2;\n  if (data1 == (long *)0x0) {\nLAB_00109241:\n    return data2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    dataType1 = *(uint *)data1;\n    if (dataType1 == 1) goto code_r0x00109263;\n    while (dataType2 = *(uint *)data2, dataType2 == 1) {\n      data2 = **(long ***)data2[2];\n      if (data2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (data1 == data2) {\n      return true;\n    }\n    if (dataType1 != 0x16) break;\n    if (dataType2 != 0x17) goto LAB_001092cb;\n    data1 = *(long **)(data1[2] + 8);\n    if (data1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((dataType1 == 0x17) && (dataType2 == 0x16)) {\n    data2 = *(long **)(data2[2] + 8);\n    ptr1 = data2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*data1 != *data2) {\n    return false;\n  }\n  if (dataType1 == 3) {\n    return *(char *)(data1 + 2) == *(char *)(data2 + 2);\n  }\n  if (dataType1 < 4) {\n    if (dataType1 == 2) {\n      return true;\n    }\n  }\n  else if (dataType1 - 4 < 3) {\n    return true;\n  }\n  local_58 = *(undefined8 **)(returnValue + 0x58);\n  for (ptrType2 = local_58; ptrType2 != (undefined8 *)0x0; ptrType2 = (undefined8 *)*ptrType2) {\n    if (((long *)ptrType2[1] == data1) && ((long *)ptrType2[2] == data2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(returnValue + 0x58) = &local_58;\n  plStack_50 = data1;\n  local_48 = data2;\n  switch(dataType1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr1 = (long *)data1[2];\n    ptrPtr1 = (long **)data2[2];\n    if (ptr1 == (long *)0x0) {\n      isMatch = ptrPtr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrPtr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(returnValue + 0x38) < *(uint *)((long)ptr1 + 0xc)) &&\n       (*(uint *)((long)ptr1 + 0xc) == *(uint *)((long)ptrPtr1 + 0xc))) goto LAB_001097af;\n    ptrType2 = (undefined8 *)*ptr1;\n    local_70 = *ptrPtr1;\n    if (((ptrType2 == (undefined8 *)0x0) == (local_70 == (long *)0x0)) &&\n       ((((ptr1[2] == 0) == (ptrPtr1[2] == (long *)0x0) &&\n         ((ptr1[3] == 0) == (ptrPtr1[3] == (long *)0x0))) &&\n        ((ptr1[4] == 0) == (ptrPtr1[4] == (long *)0x0))))) {\n      if (ptrType2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr1[4] != 0) &&\n           (comparisonResult = compareData_0010922b(returnValue,ptr1[4],ptrPtr1[4]), comparisonResult == '\\0'))\n        goto LAB_00109382;\n        tempPtr1 = (long *)ptr1[2];\n        if (tempPtr1 == (long *)0x0) {\nLAB_00109540:\n          ptrType2 = (undefined8 *)ptr1[3];\n          if (ptrType2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr1 = ptrPtr1[3];\n          while( true ) {\n            tempPtr = (char **)*ptrType2;\n            if (tempPtr == (char **)0x0) {\n              isMatch = *ptr1 == 0;\n              goto LAB_001099c4;\n            }\n            ptrPtr2 = (char **)*ptr1;\n            if (ptrPtr2 == (char **)0x0) break;\n            if ((**tempPtr != **ptrPtr2) || (comparison = strcmp(*tempPtr,*ptrPtr2), comparison != 0))\n            break;\n            tempCharPtr1 = tempPtr[1];\n            tempCharPtr2 = ptrPtr2[1];\n            if ((tempCharPtr1 == (char *)0x0) != (tempCharPtr2 == (char *)0x0)) break;\n            if (tempCharPtr1 != (char *)0x0) {\n              tempData = 0;\n              while( true ) {\n                tempPtr = *(char ***)(tempCharPtr1 + tempData);\n                ptrPtr2 = *(char ***)(tempCharPtr2 + tempData);\n                if (tempPtr == (char **)0x0) break;\n                if (ptrPtr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**tempPtr != **ptrPtr2) ||\n                     ((((ulong)tempPtr[2] ^ (ulong)ptrPtr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((tempPtr[3] != ptrPtr2[3] ||\n                     ((((tempPtr[4] == (char *)0x0) != (ptrPtr2[4] == (char *)0x0) ||\n                       (comparison = strcmp(*tempPtr,*ptrPtr2), comparison != 0)) ||\n                      (comparisonResult = compareData_0010922b(returnValue,tempPtr[1],ptrPtr2[1]), comparisonResult == '\\0')))))) ||\n                   ((tempPtr[4] != (char *)0x0 &&\n                    (comparisonResult = compareData_0010922b(returnValue,tempPtr[4],ptrPtr2[4]), comparisonResult == '\\0'))))\n                goto LAB_00109382;\n                tempData = tempData + 8;\n              }\n              if (ptrPtr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptrType2 = ptrType2 + 1;\n            ptr1 = ptr1 + 1;\n          }\n        }\n        else {\n          ptr2 = ptrPtr1[2];\n          for (; ptrType2 = (undefined8 *)*tempPtr1, ptrType2 != (undefined8 *)0x0;\n              tempPtr1 = tempPtr1 + 1) {\n            ptrType1 = (undefined8 *)*ptr2;\n            if ((((ptrType1 == (undefined8 *)0x0) ||\n                 (((ptrType2[1] ^ ptrType1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptrType2 + 2) != *(int *)(ptrType1 + 2))) ||\n               (comparisonResult = compareData_0010922b(returnValue,*ptrType2,*ptrType1), comparisonResult == '\\0'))\n            goto LAB_00109382;\n            ptr2 = ptr2 + 1;\n          }\n          if (*ptr2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; tempPtr = (char **)*ptrType2, tempPtr != (char **)0x0; ptrType2 = ptrType2 + 1) {\n          ptrPtr2 = (char **)*local_70;\n          if (ptrPtr2 == (char **)0x0) goto LAB_00109382;\n          tempCharPtr1 = *ptrPtr2;\n          tempCharPtr2 = *tempPtr;\n          if ((*tempCharPtr2 != *tempCharPtr1) ||\n             ((((ulong)tempPtr[2] ^ (ulong)ptrPtr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)tempPtr + 0x14) == '\\0') {\n            if (tempPtr[3] == ptrPtr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison = strcmp(tempPtr[3],ptrPtr2[3]);\n          if (comparison != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison = strcmp(tempCharPtr2,tempCharPtr1);\n          if (((comparison != 0) || (tempPtr[1] == (char *)0x0)) || (ptrPtr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          type1 = debug_get_real_type_isra_0(ptrPtr2[1],0);\n          type2 = debug_get_real_type_isra_0(tempPtr[1],0);\n          comparisonResult = compareData_0010922b(returnValue,type2,type1);\n          if (comparisonResult == '\\0') goto LAB_00109382;\n          local_70 = local_70 + 1;\n        }\n        if (*local_70 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr1 = (long *)data1[2];\n    tempPtr1 = (long *)data2[2];\n    if (ptr1 == (long *)0x0) {\n      isMatch = tempPtr1 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (tempPtr1 == (long *)0x0) goto LAB_00109382;\n    tempData = *ptr1;\n    dataOffset1 = *tempPtr1;\n    offset = 0;\n    dataOffset2 = ptr1[1];\n    tempOffset = tempPtr1[1];\n    do {\n      tempCharPtr1 = *(char **)(tempData + offset);\n      if (tempCharPtr1 == (char *)0x0) {\n        isMatch = *(long *)(dataOffset1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      tempCharPtr2 = *(char **)(dataOffset1 + offset);\n      if (((tempCharPtr2 == (char *)0x0) || (*tempCharPtr1 != *tempCharPtr2)) ||\n         (*(long *)(dataOffset2 + offset) != *(long *)(tempOffset + offset))) break;\n      comparison = strcmp(tempCharPtr1,tempCharPtr2);\n      offset = offset + 8;\n    } while (comparison == 0);\nLAB_00109964:\n    isMatch = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isMatch = compareData_0010922b(returnValue,data1[2],data2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)data1[2] + 2) == *(char *)((undefined8 *)data2[2] + 2)) &&\n       (comparisonResult = compareData_0010922b(returnValue,*(undefined8 *)data1[2],*(undefined8 *)data2[2]),\n       comparisonResult != '\\0')) {\n      ptr1 = *(long **)(data1[2] + 8);\n      tempPtr1 = *(long **)(data2[2] + 8);\n      if ((ptr1 == (long *)0x0) == (tempPtr1 == (long *)0x0)) {\n        if (ptr1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr1 != 0 && (*tempPtr1 != 0)) &&\n               (comparisonResult = compareData_0010922b(returnValue), comparisonResult != '\\0'))) {\n          ptr1 = ptr1 + 1;\n          tempPtr1 = tempPtr1 + 1;\n        }\nLAB_0010995d:\n        if (*ptr1 != 0) goto LAB_00109964;\n        isMatch = *tempPtr1 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptrType2 = (undefined8 *)data2[2];\n    ptrType1 = (undefined8 *)data1[2];\n    isMatch = 0;\n    if ((ptrType1[1] == ptrType2[1]) && (ptrType1[2] == ptrType2[2])) {\nLAB_00109862:\n      isMatch = compareData_0010922b(returnValue,*ptrType1,*ptrType2);\n    }\n    break;\n  case 0x10:\n    ptrType2 = (undefined8 *)data2[2];\n    ptrType1 = (undefined8 *)data1[2];\n    isMatch = 0;\n    if (((ptrType1[2] == ptrType2[2]) && (ptrType1[3] == ptrType2[3])) &&\n       (*(char *)(ptrType1 + 4) == *(char *)(ptrType2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptrType2 = (undefined8 *)data2[2];\n    ptrType1 = (undefined8 *)data1[2];\n    isMatch = 0;\n    if (*(char *)(ptrType1 + 1) == *(char *)(ptrType2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    comparisonResult = compareData_0010922b(returnValue,*(undefined8 *)data1[2],*(undefined8 *)data2[2]);\n    isMatch = 0;\n    if (comparisonResult != '\\0') {\n      isMatch = compareData_0010922b(returnValue,*(undefined8 *)(data1[2] + 8),*(undefined8 *)(data2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)data1[2] + 3) == *(char *)((undefined8 *)data2[2] + 3)) &&\n        (comparisonResult = compareData_0010922b(returnValue,*(undefined8 *)data1[2],*(undefined8 *)data2[2]),\n        comparisonResult != '\\0')) &&\n       (comparisonResult = compareData_0010922b(returnValue,*(undefined8 *)(data1[2] + 8),\n                              *(undefined8 *)(data2[2] + 8)), comparisonResult != '\\0')) {\n      ptr1 = *(long **)(data1[2] + 0x10);\n      tempPtr1 = *(long **)(data2[2] + 0x10);\n      if ((ptr1 == (long *)0x0) == (tempPtr1 == (long *)0x0)) {\n        if (ptr1 != (long *)0x0) {\n          while (((*ptr1 != 0 && (*tempPtr1 != 0)) &&\n                 (comparisonResult = compareData_0010922b(returnValue), comparisonResult != '\\0'))) {\n            ptr1 = ptr1 + 1;\n            tempPtr1 = tempPtr1 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isMatch = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isMatch = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr1 = (long *)data2[2];\n    tempPtr1 = (long *)data1[2];\n    comparison = strcmp(*(char **)(*tempPtr1 + 8),*(char **)(*ptr1 + 8));\n    isMatch = 0;\n    if (comparison == 0) {\n      isMatch = compareData_0010922b(returnValue,tempPtr1[1],ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isMatch = isMatch & 1;\nLAB_001099c4:\n  *(undefined8 **)(returnValue + 0x58) = local_58;\n  return isMatch;\ncode_r0x00109263:\n  data1 = **(long ***)data1[2];\n  ptr1 = data1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "abort",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_type_samep",
                "debug_set_class_id.lto_priv.0"
            ],
            "imported": false,
            "current_name": "compare_data_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "copy_file",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "formatCheck",
                "iVar2": "archType",
                "iVar3": "statResult",
                "ppcVar4": "fileInfoPtr",
                "lVar5": "breadResult",
                "uVar6": "errMsg",
                "__format": "msgFormat",
                "puVar7": "tempDirPtr",
                "piVar8": "errnoPtr",
                "uVar9": "errMsg",
                "in_RAX": "archiveSize",
                "pcVar10": "currChar",
                "ppcVar11": "archInfoPtr",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunc",
                "lVar15": "blockSize",
                "pcVar16": "currChar2",
                "psVar17": "statStruct",
                "unaff_R14": "tempInfoPtr",
                "unaff_R15": "archPathPtr",
                "bVar18": "flag",
                "unaff_retaddr": "retAddr",
                "in_stack_00000008": "archNamePtr",
                "in_stack_00000010": "tempFilePtr",
                "in_stack_00000018": "tempDirName",
                "in_stack_00000020": "nextArchPathPtr",
                "in_stack_00000028": "openMode",
                "in_stack_00000030": "flag2",
                "in_stack_000000f8": "permissionFlags",
                "in_stack_00000110": "totalSize"
            },
            "code": "\nvoid copyArchive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char formatCheck;\n  int archType;\n  int statResult;\n  char **fileInfoPtr;\n  long breadResult;\n  undefined8 errMsg;\n  char *msgFormat;\n  undefined8 *tempDirPtr;\n  int *errnoPtr;\n  undefined8 errMsg;\n  long archiveSize;\n  char *currChar;\n  char **archInfoPtr;\n  long fileSize;\n  void *buffer;\n  code *closeFunc;\n  long blockSize;\n  char *currChar2;\n  stat *statStruct;\n  undefined8 *tempInfoPtr;\n  char **archPathPtr;\n  byte flag;\n  undefined8 retAddr;\n  undefined8 *archNamePtr;\n  long *tempFilePtr;\n  char *tempDirName;\n  undefined8 *nextArchPathPtr;\n  undefined8 openMode;\n  undefined8 flag2;\n  uint permissionFlags;\n  long totalSize;\n  \n  flag = 0;\n  currChar = (char *)(archiveSize + 1);\n  do {\n    if (*currChar == '/') {\n      copyArchive_001052a2();\n      return;\n    }\n    while (*currChar == '\\0') {\n      currChar = (char *)concat(tempDirName,&DAT_0011b47d);\n      statResult = stat(currChar,(stat *)&stack0x00000050);\n      tempDirPtr = tempInfoPtr;\n      if (-1 < statResult) {\n        fileSize = make_tempdir(currChar);\n        free(currChar);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currChar = strerror(*errnoPtr);\n          errMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errMsg,currChar);\n          goto LAB_00104e93;\n        }\n        tempDirPtr = (undefined8 *)xmalloc(0x18);\n        currChar = *archPathPtr;\n        *tempDirPtr = tempInfoPtr;\n        tempDirPtr[2] = 0;\n        tempDirPtr[1] = fileSize;\n        currChar = (char *)concat(fileSize,&DAT_0011b47d,currChar);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        statStruct = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statStruct->st_dev = 0;\n          statStruct = (stat *)((long)statStruct + (ulong)flag * -8 + 4);\n        }\n        archInfoPtr = (char **)archPathPtr[0x1d];\n        if ((char **)archPathPtr[0x1d] == (char **)0x0) {\n          archInfoPtr = archPathPtr;\n        }\n        statResult = (**(code **)(archInfoPtr[1] + 0x1e8))(archPathPtr,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          currChar2 = *archPathPtr;\n          errMsg = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errMsg,currChar2);\n        }\n      }\n      tempInfoPtr = (undefined8 *)xmalloc(0x18);\n      tempInfoPtr[1] = currChar;\n      *tempInfoPtr = tempDirPtr;\n      tempInfoPtr[2] = 0;\n      formatCheck = bfd_check_format(archPathPtr,1);\n      if (formatCheck == '\\0') {\n        errMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archPathPtr,0,errMsg);\n        archInfoPtr = (char **)bfd_openw(currChar,openMode);\n        if (archInfoPtr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        fileInfoPtr = (char **)archPathPtr[0x1d];\n        if ((char **)archPathPtr[0x1d] == (char **)0x0) {\n          fileInfoPtr = archPathPtr;\n        }\n        archType = (**(code **)(fileInfoPtr[1] + 0x1e8))(archPathPtr,&stack0x000000e0);\n        fileSize = totalSize;\n        if (archType == 0) {\n          if (totalSize < 0) {\n            errMsg = bfd_get_archive_filename(archPathPtr);\n            errMsg = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(errMsg,errMsg);\n          }\n          else {\n            archType = bfd_seek(archPathPtr,0,0);\n            if (archType == 0) {\n              if (verbose != '\\0') {\n                currChar2 = *archInfoPtr;\n                errMsg = bfd_get_archive_filename(archPathPtr);\n                msgFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(msgFormat,errMsg,currChar2);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - blockSize) {\n                blockSize = 0x2000;\n                if (fileSize < 0x2001) {\n                  blockSize = fileSize;\n                }\n                breadResult = bfd_bread(buffer,blockSize,archPathPtr);\n                fileInfoPtr = archPathPtr;\n                if ((blockSize != breadResult) ||\n                   (breadResult = bfd_bwrite(buffer,blockSize,archInfoPtr), fileInfoPtr = archInfoPtr, blockSize != breadResult\n                   )) {\n                  bfd_nonfatal_message(0,fileInfoPtr,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archInfoPtr,permissionFlags | 0x100);\n              free(buffer);\n              formatCheck = bfd_close_all_done(archInfoPtr);\n              if (formatCheck == '\\0') {\n                bfd_nonfatal_message(currChar,0,0,0);\n                status = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errMsg = bfd_get_archive_filename(archPathPtr);\n            bfd_nonfatal(errMsg);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archPathPtr,0,0);\n        }\nLAB_00104f00:\n        formatCheck = bfd_close_all_done(archInfoPtr);\n        if (formatCheck == '\\0') {\n          bfd_nonfatal_message(currChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currChar);\n        status = 1;\n      }\n      else {\n        if (flag2._7_1_ == '\\0') {\n          archInfoPtr = (char **)bfd_openw(currChar,*(undefined8 *)archPathPtr[1]);\n        }\n        else {\n          archInfoPtr = (char **)bfd_openw(currChar,openMode);\n        }\n        if (archInfoPtr == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatCheck = copy_object(archPathPtr,archInfoPtr,retAddr);\n        if (formatCheck == '\\0') {\n          archType = bfd_get_arch(archPathPtr);\n          if (archType == 0) goto LAB_00104d75;\n          formatCheck = bfd_close_all_done(archInfoPtr);\n          if (formatCheck == '\\0') {\n            bfd_nonfatal_message(currChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatCheck = bfd_close(archInfoPtr);\n        if (formatCheck == '\\0') {\n          bfd_nonfatal_message(currChar,0,0,0);\n          status = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(currChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currChar,openMode);\n        tempInfoPtr[2] = fileSize;\n        *tempFilePtr = fileSize;\n        tempFilePtr = (long *)(fileSize + 0xf0);\n        archInfoPtr = (char **)bfd_openr_next_archived_file(nextArchPathPtr,archPathPtr);\n        bfd_close(archPathPtr);\n        archPathPtr = archInfoPtr;\n      }\n      if ((status != 0) || (archPathPtr == (char **)0x0)) {\n        *tempFilePtr = 0;\n        buffer = (void *)xstrdup(*archNamePtr);\n        if (status == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        formatCheck = (*closeFunc)(archNamePtr);\n        if (formatCheck == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*nextArchPathPtr);\n        formatCheck = bfd_close(nextArchPathPtr);\n        if (formatCheck == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currChar = *archPathPtr;\n      param3 = currChar;\n      if (*currChar == '/') goto LAB_0010527d;\n    }\n    currChar2 = currChar;\n    if ((*currChar == '.') && (currChar2 = currChar + 1, currChar[1] == '.')) {\n      currChar2 = currChar + 2;\n      if ((currChar[2] == '\\0') || (currChar[2] == '/')) {\nLAB_0010527d:\n        errMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errMsg,param3);\nLAB_00104e93:\n        status = 1;\nLAB_00114b4b:\n        while (tempInfoPtr != (undefined8 *)0x0) {\n          if (tempInfoPtr[2] == 0) {\n            rmdir((char *)tempInfoPtr[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempInfoPtr[1]);\n          }\n          free((void *)tempInfoPtr[1]);\n          tempDirPtr = (undefined8 *)*tempInfoPtr;\n          free(tempInfoPtr);\n          tempInfoPtr = tempDirPtr;\n        }\n        rmdir(tempDirName);\n        free(tempDirName);\n        return;\n      }\n    }\n    for (; (currChar = currChar2, *currChar2 != '\\0' && (*currChar2 != '/')); currChar2 = currChar2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "stab_context",
                "list_matching_formats",
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "add_symbol_to_stab_0010e453",
                "param_1": "symbolTable",
                "param_2": "symbol",
                "param_3": "types",
                "lVar1": "type",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formattedString",
                "uVar4": "success",
                "lVar5": "typeCounter",
                "ppcVar6": "typePtr",
                "lVar7": "typeIndex"
            },
            "code": "\nundefined8 addSymbolToStab_0010e453(long symbolTable,char *symbol,char **types)\n\n{\n  long type;\n  char result;\n  size_t length;\n  undefined2 *formattedString;\n  undefined8 success;\n  long typeCounter;\n  char **typePtr;\n  long typeIndex;\n  \n  if (types == (char **)0x0) {\n    if (symbol != (char *)0x0) {\n      length = strlen(symbol);\n      formattedString = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedString,\"xe%s:\",symbol);\nLAB_0010e578:\n      result = stab_push_string(symbolTable,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    success = 0;\n  }\n  else {\n    typeCounter = 10;\n    typePtr = types;\n    if (symbol != (char *)0x0) {\n      length = strlen(symbol);\n      typeCounter = length + 10;\n    }\n    for (; *typePtr != (char *)0x0; typePtr = typePtr + 1) {\n      length = strlen(*typePtr);\n      typeCounter = typeCounter + 0x14 + length;\n    }\n    formattedString = (undefined2 *)xmalloc(typeCounter);\n    if (symbol == (char *)0x0) {\n      *formattedString = 0x65;\n      typeCounter = 0;\n    }\n    else {\n      typeCounter = *(long *)(symbolTable + 0x68);\n      *(long *)(symbolTable + 0x68) = typeCounter + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",symbol,typeCounter);\n    }\n    typeIndex = 0;\n    while( true ) {\n      type = *(long *)((long)types + typeIndex);\n      length = strlen((char *)formattedString);\n      if (type == 0) break;\n      typeIndex = typeIndex + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + length) = 0x3b;\n    if (symbol == (char *)0x0) goto LAB_0010e578;\n    result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = stab_push_defined_type(symbolTable,typeCounter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "add_symbol_to_stab_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "inputValue",
                "lVar1": "structIndex",
                "uVar2": "returnValue"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 inputValue)\n\n{\n  long structIndex;\n  undefined8 returnValue;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    returnValue = stab_push_defined_type(inputValue,structIndex,0);\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_symbol_size_0010ed2c",
                "param_1": "symbol_info",
                "param_2": "new_size",
                "param_3": "param3",
                "extraout_RDX": "extra_out_RDX",
                "uVar3": "symbol_size",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] update_symbol_size_0010ed2c(long symbol_info,ulong new_size,undefined8 param3)\n\n{\n  char cVar1;\n  int iVar2;\n  undefined8 extra_out_RDX;\n  ulong symbol_size;\n  undefined8 in_R10;\n  undefined result [16];\n  \n  if (*(ulong *)(symbol_info + 0x1f0) < new_size) {\n    *(ulong *)(symbol_info + 0x1f0) = new_size;\n  }\n  if (*(long *)(symbol_info + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(symbol_info + 0x1f8) != 0) {\n      iVar2 = *(int *)(symbol_info + 0x1f8) + -1;\n      symbol_size = CONCAT71((int7)((ulong)param3 >> 8),1);\n      *(int *)(symbol_info + 0x1f8) = iVar2;\n      if (iVar2 != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (symbol_info,0xe0,0,new_size - *(long *)(symbol_info + 0x200),0,in_R10);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    cVar1 = stab_write_symbol_lto_priv_0(symbol_info,0xc0,0,*(long *)(symbol_info + 0x208),0);\n    if (cVar1 != '\\0') {\n      *(undefined8 *)(symbol_info + 0x208) = 0xffffffffffffffff;\n      param3 = extra_out_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  symbol_size = 0;\nLAB_0010edae:\n  result._0_8_ = symbol_size & 0xffffffff;\n  result._8_8_ = in_R10;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_size_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_regions_0011a1b0",
                "param_1": "source_address",
                "param_2": "destination_address",
                "uVar1": "source_size",
                "uVar2": "destination_size",
                "iVar3": "memory_comparison",
                "extraout_var": "extraout_variable",
                "uVar4": "comparison_result",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compare_memory_regions_0011a1b0(ulong *source_address,ulong *destination_address,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong source_size;\n  ulong destination_size;\n  int memory_comparison;\n  undefined4 extraout_variable;\n  ulong comparison_result;\n  undefined result [16];\n  \n  comparison_result = *source_address;\n  if (*destination_address <= *source_address) {\n    comparison_result = *destination_address;\n  }\n  memory_comparison = memcmp((void *)(source_address[3] + 3),(void *)(destination_address[3] + 3),comparison_result - 3);\n  comparison_result = CONCAT44(extraout_variable,memory_comparison);\n  if (memory_comparison == 0) {\n    source_size = source_address[8];\n    if (source_size < destination_address[7]) {\n      comparison_result = 0xffffffff;\n    }\n    else {\n      destination_size = destination_address[8];\n      if (destination_size < source_address[7]) {\n        comparison_result = 1;\n      }\n      else {\n        comparison_result = 0xffffffff;\n        if (destination_address[7] <= source_address[7]) {\n          if (destination_size < source_size) {\n            comparison_result = 1;\n          }\n          else {\n            comparison_result = 0xffffffff;\n            if (destination_size <= source_size) {\n              if (source_address[2] == 0x100) {\n                comparison_result = (ulong)-(uint)(destination_address[2] != 0x100);\n              }\n              else {\n                comparison_result = (ulong)(destination_address[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = comparison_result;\n  return result;\n}\n\n",
            "called": [
                "memcmp",
                "compare_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_regions_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "decode_attribute_notes_001163d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "bVar4": "isConditionTrue",
                "puVar5": "ptrVar1",
                "iVar6": "var3",
                "uVar7": "var4",
                "lVar8": "length",
                "__ptr": "ptr",
                "uVar9": "var5",
                "uVar10": "var6",
                "uVar11": "var7",
                "uVar12": "var8",
                "uVar13": "var9",
                "uVar14": "var10",
                "uVar15": "var11",
                "uVar16": "var12",
                "puVar17": "ptrVar2",
                "puVar18": "ptrVar3",
                "cVar19": "character",
                "puVar20": "ptrVar4",
                "iVar21": "var13",
                "puVar22": "ptrVar5",
                "puVar23": "ptrVar6",
                "uVar24": "var14",
                "__nmemb": "numElements",
                "puVar25": "ptrVar7",
                "bVar26": "boolean",
                "local_88": "localVar1",
                "uStack_80": "localVar2",
                "local_70": "localVar3",
                "local_68": "localVar4",
                "local_60": "localVar5"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong decode_attribute_notes_001163d0(undefined8 *param1,undefined8 *param2,ulong param3,undefined *param4)\n\n{\n  ulong result;\n  undefined8 var1;\n  undefined8 var2;\n  bool isConditionTrue;\n  ulong *ptrVar1;\n  int var3;\n  undefined8 var4;\n  long length;\n  void *ptr;\n  ulong var5;\n  ulong var6;\n  ulong var7;\n  ulong var8;\n  undefined *ptr_00;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  ulong *ptrVar2;\n  undefined *ptrVar3;\n  char character;\n  undefined *ptrVar4;\n  int var13;\n  undefined *ptrVar5;\n  ulong *ptrVar6;\n  ulong var14;\n  size_t numElements;\n  ulong *ptrVar7;\n  byte boolean;\n  ulong localVar1;\n  ulong localVar2;\n  ulong localVar3;\n  ulong localVar4;\n  ulong *localVar5;\n  \n  boolean = 0;\n  length = bfd_get_reloc_upper_bound();\n  localVar4 = param3;\n  if (0 < length) {\n    ptr = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param1,param2,ptr,isympp);\n    free(ptr);\n    if (length != 0) {\n      if (is_strip == 0) {\n        var1 = *param1;\n        var2 = *param2;\n        var4 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(var4,var1,var2);\n      }\n      localVar5 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  localVar5 = (ulong *)xcalloc(param3 / 0xc,0x48,param3 % 0xc);\n  localVar1 = 0;\n  localVar3 = 0;\n  var12 = param3;\n  var11 = 0;\n  ptrVar6 = localVar5;\n  var10 = 0;\n  ptrVar5 = param4;\n  while (0xb < var12) {\n    var6 = (**(code **)(param1[1] + 0x40))(ptrVar5);\n    *ptrVar6 = var6;\n    var6 = (**(code **)(param1[1] + 0x40))(ptrVar5 + 4);\n    ptrVar6[1] = var6;\n    var7 = (**(code **)(param1[1] + 0x40))(ptrVar5 + 8);\n    var6 = *ptrVar6;\n    ptrVar6[2] = var7;\n    var8 = ptrVar6[1];\n    var9 = var6 + 3 & 0xfffffffffffffffc;\n    ptrVar6[6] = var9;\n    if (var8 != (var8 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var7 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var9 + var8 + 0xc;\n    if (var12 < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var6 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar6[3] = (ulong)(ptrVar5 + 0xc);\n    ptrVar6[4] = (ulong)(ptrVar5 + var9 + 0xc);\n    var12 = var12 + (-0xc - (var9 + var8));\n    if (var6 != 2) {\n      if (ptrVar5[0xc] == '$') {\n        if ((ptrVar5[0xd] == '\\x01') && (ptrVar5[0xe] == '1')) {\n          var12 = decode_build_attr_note_00116490();\n          return var12;\n        }\n      }\n      else if ((((4 < var6) && (ptrVar5[0xc] == 'G')) && (ptrVar5[0xd] == 'A')) &&\n              ((ptrVar5[0xe] == '$' && (ptrVar5[0xf] == '\\x01')))) {\n        if (ptrVar5[0x10] == '2') {\n          var12 = decode_build_attr_note_00116490();\n          return var12;\n        }\n        if (ptrVar5[0x10] == '3') {\n          var12 = decode_build_attr_note_00116490();\n          return var12;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var5 = var11;\n    var14 = var10;\n    if (var8 == 0) {\n      if (var7 == 0x100) {\n        ptrVar6[7] = localVar1;\nLAB_001164af:\n        var8 = var10;\n        var14 = var10;\n      }\n      else {\n        ptrVar6[7] = localVar3;\nLAB_0011669e:\n        var5 = var11;\n        var8 = var11;\n      }\n    }\n    else {\n      if (var8 != 0x10) {\n        if (var8 < 0x11) {\n          if (var8 == 4) {\n            var7 = (**(code **)(param1[1] + 0x40))();\n            var8 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var8 == 8) {\n            var12 = FUNC_001086af();\n            return var12;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var7 = (**(code **)(param1[1] + 0x28))(ptrVar5 + var9 + 0xc);\n      var8 = (**(code **)(param1[1] + 0x28))();\n      if (var8 < var7) {\n        var7 = var8;\n      }\nLAB_00116631:\n      if (ptrVar6[2] == 0x100) {\n        if (var7 == 0) {\n          var7 = localVar1;\n        }\n        var6 = *ptrVar6;\n        ptrVar6[7] = var7;\n        var14 = var8;\n        localVar1 = var7;\n        if (var8 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var7 == 0) {\n          var7 = localVar3;\n        }\n        var6 = *ptrVar6;\n        ptrVar6[7] = var7;\n        var5 = var8;\n        localVar3 = var7;\n        if (var8 == 0) goto LAB_0011669e;\n      }\n    }\n    ptrVar6[8] = var8;\n    if (*(char *)((ptrVar6[3] - 1) + var6) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar6 = ptrVar6 + 9;\n    var11 = var5;\n    var10 = var14;\n    ptrVar5 = ptrVar5 + result;\n  }\n  if (var12 == 0) {\n    var1 = *param1;\n    var2 = *param2;\n    var4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(var4,var1,var2);\n    numElements = ((long)ptrVar6 - (long)localVar5 >> 3) * -0x71c71c71c71c71c7;\n    qsort(localVar5,numElements,0x48,compare_gnu_build_notes);\n    for (ptrVar2 = localVar5; ptrVar2 < ptrVar6; ptrVar2 = ptrVar2 + 9) {\n      var12 = ptrVar2[2];\n      if (var12 != 0) {\n        var11 = ptrVar2[7];\n        var10 = ptrVar2[8];\n        ptrVar7 = ptrVar2;\n        var13 = 0;\n        if (var11 == var10) {\n          ptrVar2[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptrVar1 = ptrVar7;\n              ptrVar7 = ptrVar1 + -9;\n              if (ptrVar7 < localVar5) goto LAB_001167f5;\n              var6 = ptrVar1[-7];\n            } while (var6 == 0);\n            if ((*ptrVar7 != *ptrVar2) ||\n               (var3 = memcmp((void *)ptrVar1[-6],(void *)ptrVar2[3],*ptrVar2), var3 != 0)) break;\n            var8 = ptrVar1[-2];\n            var7 = ptrVar1[-1];\n            if (var11 == var8) {\n              if (var10 == var7) {\n                ptrVar2[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var10 <= var7) {\n                ptrVar2[2] = 0;\n                break;\n              }\n              if (var7 < var11) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var7) || (var11 <= (var7 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_data_00116852;\n              }\nLAB_001167b8:\n              if ((var12 == 0x101) == (var6 == 0x101)) {\n                if (var7 <= var10) {\n                  var7 = var10;\n                }\n                if (var8 < var11) {\n                  var11 = var8;\n                }\n                ptrVar1[-1] = var7;\n                ptrVar1[-2] = var11;\n                ptrVar2[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var8 <= var11) goto LAB_001167a6;\n              if (var7 < var11) goto LAB_0010852c;\n              if (var10 < var11) {\n                if ((0xfffffffffffffff0 < var10) || (var8 <= (var10 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_data_00116852;\n                goto LAB_001167b8;\n              }\n              if (var10 != var7) goto LAB_001167b8;\n            }\nprocess_data_00116852:\n            isConditionTrue = var13 < 0x11;\n            var13 = var13 + 1;\n          } while (isConditionTrue);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(localVar5,numElements,0x48,sort_gnu_build_notes);\n    ptr_00 = (undefined *)xmalloc(param3 * 2);\n    localVar2 = 0;\n    localVar3 = 0;\n    ptrVar5 = ptr_00;\n    for (ptrVar2 = localVar5; ptrVar2 < ptrVar6; ptrVar2 = ptrVar2 + 9) {\n      if (ptrVar2[2] != 0) {\n        ptrVar3 = ptrVar5 + 0xc;\n        if ((ptrVar2[7] == localVar3) && (ptrVar2[8] == localVar2)) {\n          (**(code **)(param1[1] + 0x50))(*ptrVar2,ptrVar5);\n          (**(code **)(param1[1] + 0x50))(0,ptrVar5 + 4);\n          (**(code **)(param1[1] + 0x50))(ptrVar2[2],ptrVar5 + 8);\n          var11 = ptrVar2[6];\n          var12 = *ptrVar2;\n          ptrVar5 = (undefined *)ptrVar2[3];\n          ptrVar4 = ptrVar3;\n          for (var10 = var12; var10 != 0; var10 = var10 - 1) {\n            *ptrVar4 = *ptrVar5;\n            ptrVar5 = ptrVar5 + (ulong)boolean * -2 + 1;\n            ptrVar4 = ptrVar4 + (ulong)boolean * -2 + 1;\n          }\n          if (var12 < var11) {\n            for (length = var11 - var12; length != 0; length = length + -1) {\n              *ptrVar4 = 0;\n              ptrVar4 = ptrVar4 + (ulong)boolean * -2 + 1;\n            }\n          }\n          ptrVar5 = ptrVar3 + var11;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            character = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            character = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(character,ptrVar5 + 4);\n          (**(code **)(param1[1] + 0x50))(ptrVar2[2],ptrVar5 + 8);\n          var12 = *ptrVar2;\n          ptrVar5 = (undefined *)ptrVar2[3];\n          ptrVar4 = ptrVar3;\n          for (var11 = var12; var11 != 0; var11 = var11 - 1) {\n            *ptrVar4 = *ptrVar5;\n            ptrVar5 = ptrVar5 + (ulong)boolean * -2 + 1;\n            ptrVar4 = ptrVar4 + (ulong)boolean * -2 + 1;\n          }\n          var11 = ptrVar2[6];\n          if (var12 < var11) {\n            for (length = var11 - var12; length != 0; length = length + -1) {\n              *ptrVar4 = 0;\n              ptrVar4 = ptrVar4 + (ulong)boolean * -2 + 1;\n            }\n          }\n          length = param1[1];\n          ptrVar3 = ptrVar3 + var11;\n          ptrVar5 = ptrVar3 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(ptrVar2[7],ptrVar3);\n            (**(code **)(param1[1] + 0x38))(ptrVar2[8],ptrVar5);\n            ptrVar5 = ptrVar3 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(ptrVar2[7],ptrVar3);\n            (**(code **)(param1[1] + 0x50))(ptrVar2[8],ptrVar3 + 4);\n          }\n          localVar3 = ptrVar2[7];\n          localVar2 = ptrVar2[8];\n        }\n      }\n    }\n    var11 = (long)ptrVar5 - (long)ptr_00;\n    var12 = var11;\n    ptrVar5 = ptr_00;\n    localVar4 = param3;\n    if (var11 < param3) {\n      for (; localVar4 = var11, var12 != 0; var12 = var12 - 1) {\n        *param4 = *ptrVar5;\n        ptrVar5 = ptrVar5 + (ulong)boolean * -2 + 1;\n        param4 = param4 + (ulong)boolean * -2 + 1;\n      }\n    }\n    free(ptr_00);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,param1,param2,length);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(localVar5);\n  return localVar4;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decode_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "param_1": "output_file",
                "param_2": "exit_code",
                "uVar1": "program_name",
                "pcVar2": "localized_text"
            },
            "code": "\nvoid print_usage_and_exit_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 program_name;\n  char *localized_text;\n  \n  program_name = program_name;\n  localized_text = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,localized_text,program_name);\n  localized_text = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,localized_text);\n  localized_text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,localized_text);\n  localized_text = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,localized_text);\n  localized_text = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,localized_text);\n  localized_text = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,localized_text);\n  list_supported_targets(program_name,output_file);\n  if (exit_code == 0) {\n    localized_text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,localized_text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_component_name_00108c86",
                "param_1": "component_address",
                "cVar1": "startsWithLTO",
                "iVar2": "comparison_result",
                "sVar3": "length",
                "puVar4": "component_name_ptr",
                "lVar5": "address_offset",
                "__s": "string_ptr",
                "__s1": "sub_string_ptr",
                "puVar6": "current_char_ptr",
                "uVar7": "return_value",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_component_name_00108c86(long *component_address)\n\n{\n  char startsWithLTO;\n  int comparison_result;\n  size_t length;\n  undefined2 *component_name_ptr;\n  long address_offset;\n  char *string_ptr;\n  char *sub_string_ptr;\n  undefined2 *current_char_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  address_offset = *component_address;\n  string_ptr = (char *)(address_offset + 4);\n  startsWithLTO = startswith_lto_priv_0_lto_priv_0(string_ptr,&DAT_0011b73b);\n  if (startsWithLTO == '\\0') {\n    startsWithLTO = startswith_lto_priv_0_lto_priv_0(string_ptr,\"bsdrv-\");\n    if (startsWithLTO == '\\0') {\n      startsWithLTO = startswith_lto_priv_0_lto_priv_0(string_ptr,\"rtdrv-\");\n      if (startsWithLTO == '\\0') {\n        return 0xffffffff;\n      }\n      string_ptr = (char *)(address_offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      string_ptr = (char *)(address_offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  length = strlen(string_ptr);\n  component_name_ptr = (undefined2 *)xmalloc(length + 8);\n  sub_string_ptr = string_ptr + 4;\n  current_char_ptr = component_name_ptr;\n  for (address_offset = length + 1; address_offset != 0; address_offset = address_offset + -1) {\n    *(char *)current_char_ptr = *string_ptr;\n    string_ptr = string_ptr + (ulong)flag * -2 + 1;\n    current_char_ptr = (undefined2 *)((long)current_char_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(component_name_ptr + 1) = 0x69;\n  *component_name_ptr = 0x6570;\n  comparison_result = strcmp(sub_string_ptr,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)component_name_ptr + 7) = 0x36;\n    *(undefined2 *)((long)component_name_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(sub_string_ptr,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)component_name_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(sub_string_ptr,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)component_name_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *component_address = (long)component_name_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_component_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_args",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_and_return_status_001053d5",
                "unaff_R12": "ptrAddress",
                "unaff_R14": "ptrBfd",
                "bfd_nonfatal": "handleNonfatal",
                "bfd_close_all_done": "closeAllBfdDone"
            },
            "code": "\nundefined4 closeBfdAndReturnStatus_001053d5(void)\n\n{\n  long ptrAddress;\n  undefined8 *ptrBfd;\n  \n  handleNonfatal(*ptrBfd);\n  *(undefined4 *)(ptrAddress + 8) = 1;\n  closeAllBfdDone();\n  return *(undefined4 *)(ptrAddress + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_bfd_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_update_memory_permissions_00104bba",
                "in_EAX": "eaxValue",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid checkAndUpdateMemoryPermissions_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "check_and_update_memory_permissions_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "stab_class_method_var",
                "stab_variable.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "stab_struct_field.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_string_with_null_terminator_00109a0b",
                "param_1": "sourceString",
                "param_2": "length",
                "puVar1": "newString",
                "lVar2": "remainingLength",
                "puVar3": "destinationString",
                "bVar4": "toggle"
            },
            "code": "\nvoid copyStringWithNullTerminator_00109a0b(undefined *sourceString,int length)\n\n{\n  undefined *newString;\n  long remainingLength;\n  undefined *destinationString;\n  byte toggle;\n  \n  toggle = 0;\n  newString = (undefined *)xmalloc((long)(length + 1));\n  destinationString = newString;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destinationString = *sourceString;\n    sourceString = sourceString + (ulong)toggle * -2 + 1;\n    destinationString = destinationString + (ulong)toggle * -2 + 1;\n  }\n  newString[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "copy_string_with_null_terminator_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_fill_memory_0010da0b",
                "param_1": "memory_chunk",
                "param_2": "slot_index",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "error_message",
                "plVar2": "allocated_memory",
                "lVar3": "offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "is_zero",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_fill_memory_0010da0b(long **memory_chunk,ulong slot_index,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 error_message;\n  long *allocated_memory;\n  long offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*memory_chunk == (long *)0x0) {\n        allocated_memory = (long *)xmalloc(0x88);\n        *memory_chunk = allocated_memory;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)allocated_memory = 0;\n          allocated_memory = (long *)((long)allocated_memory + (ulong)is_zero * -8 + 4);\n        }\n      }\n      memory_chunk = (long **)*memory_chunk;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*memory_chunk == (long *)0x0) {\n      allocated_memory = (long *)xmalloc(0x88);\n      *memory_chunk = allocated_memory;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)allocated_memory = 0;\n        allocated_memory = (long *)((long)allocated_memory + (ulong)is_zero * -8 + 4);\n      }\n    }\n    return_value._8_8_ = unused_param_2;\n    return_value._0_8_ = *memory_chunk + slot_index + offset + 1;\n    return return_value;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_message,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_fill_memory_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "initialValue",
                "param_2": "flag",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "puVar2": "currentPointer",
                "lVar3": "loopCounter",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 initialValue,undefined flag,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *currentPointer;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  currentPointer = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)currentPointer = 0;\n    currentPointer = (undefined8 *)((long)currentPointer + (ulong)byteValue * -8 + 4);\n  }\n  *memoryBlock = initialValue;\n  *(undefined *)(memoryBlock + 1) = flag;\n  memoryBlock[2] = param3;\n  memoryBlock[3] = param4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  currentPointer = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = currentPointer;\n  *currentPointer = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_item_from_list_00109b2f",
                "param_1": "list_ptr",
                "__ptr": "current_ptr",
                "puVar1": "next_ptr"
            },
            "code": "\nundefined8 * extract_item_from_list_00109b2f(long list_ptr)\n\n{\n  undefined8 *current_ptr;\n  undefined8 *next_ptr;\n  \n  current_ptr = *(undefined8 **)(list_ptr + 0x60);\n  if (current_ptr != (undefined8 *)0x0) {\n    next_ptr = (undefined8 *)current_ptr[1];\n    *(undefined8 *)(list_ptr + 0x60) = *current_ptr;\n    free(current_ptr);\n    return next_ptr;\n  }\n  return current_ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "stab_class_baseclass.lto_priv.0",
                "stab_modify_type",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_item_from_list_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinition_00108d9a",
                "param_1": "context",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "return_value",
                "ppcVar1": "symbol_pair",
                "pcVar2": "dup_symbol",
                "lVar3": "symbol_found",
                "uVar4": "translation",
                "plVar5": "slot"
            },
            "code": "\nundefined8 check_redefinition_00108d9a(undefined8 context,char *symbol_name,char *target_symbol,undefined8 return_value)\n\n{\n  char **symbol_pair;\n  char *dup_symbol;\n  long symbol_found;\n  undefined8 translation;\n  long *slot;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  dup_symbol = strdup(symbol_name);\n  *symbol_pair = dup_symbol;\n  dup_symbol = strdup(target_symbol);\n  translation = redefine_specific_htab;\n  symbol_pair[1] = dup_symbol;\n  symbol_found = htab_find(translation,symbol_pair);\n  if (symbol_found != 0) {\n    translation = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(translation,context,symbol_name);\n  }\n  symbol_found = htab_find(redefine_specific_reverse_htab,target_symbol);\n  if (symbol_found != 0) {\n    translation = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(translation,context,target_symbol);\n  }\n  slot = (long *)htab_find_slot(redefine_specific_htab,symbol_pair,1);\n  translation = redefine_specific_reverse_htab;\n  *slot = (long)symbol_pair;\n  dup_symbol = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(translation,dup_symbol,1);\n  *symbol_pair = dup_symbol;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "htab_find_slot",
                "htab_find",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "symbol_lto_writer_0010e9a0",
                "param_1": "inputParam",
                "param_2": "inputString",
                "param_3": "symbolType",
                "param_4": "symbolData",
                "lVar1": "count",
                "uVar2": "result",
                "__s": "poppedString",
                "__s_00": "modifiedString",
                "sVar3": "inputStringLength",
                "sVar4": "modifiedStringLength",
                "__s_01": "finalString",
                "pcVar5": "symbol",
                "uVar6": "symbolFlag"
            },
            "code": "\nundefined4 symbolLtoWriter_0010e9a0(long inputParam,char *inputString,undefined4 symbolType,undefined8 symbolData)\n\n{\n  long count;\n  undefined4 result;\n  byte *poppedString;\n  byte *modifiedString;\n  size_t inputStringLength;\n  size_t modifiedStringLength;\n  char *finalString;\n  char *symbol;\n  undefined8 symbolFlag;\n  \n  poppedString = (byte *)stab_pop_type();\n  switch(symbolType) {\n  case 1:\n    symbol = \"G\";\n    symbolFlag = 0x20;\n    break;\n  case 2:\n    symbol = \"S\";\n    symbolFlag = 0x26;\n    break;\n  case 3:\n    symbol = \"V\";\n    symbolFlag = 0x26;\n    break;\n  case 4:\n    symbol = \"\";\n    symbolFlag = 0x80;\n    if (((&_sch_istable)[(ulong)*poppedString * 2] & 4) == 0) {\n      count = *(long *)(inputParam + 0x68);\n      *(long *)(inputParam + 0x68) = count + 1;\n      inputStringLength = strlen((char *)poppedString);\n      modifiedString = (byte *)xmalloc(inputStringLength + 0x14);\n      sprintf((char *)modifiedString,\"%ld=%s\",count,poppedString);\n      free(poppedString);\n      poppedString = modifiedString;\n    }\n    break;\n  case 5:\n    symbol = \"r\";\n    symbolFlag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputStringLength = strlen(inputString);\n  modifiedStringLength = strlen((char *)poppedString);\n  finalString = (char *)xmalloc(inputStringLength + 3 + modifiedStringLength);\n  sprintf(finalString,\"%s:%s%s\",inputString,symbol,poppedString);\n  free(poppedString);\n  result = stab_write_symbol_lto_priv_0(inputParam,symbolFlag,0,symbolData,finalString);\n  if ((char)result != '\\0') {\n    free(finalString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "symbol_lto_writer_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_error_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  sectionValue = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_section_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "report_bad_number_00104920",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid reportBadNumber_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "report_bad_number_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "stab_context",
                "bfd_nonfatal_message",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "create_hash_table_00113f20",
                "htab_create_alloc": "allocateHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid createHashTable_00113f20(void)\n\n{\n  allocateHashTable(0x10,hashString,compareString,0,allocateMemory,releaseMemory);\n  return;\n}\n\n",
            "called": [
                "free",
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "create_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "set_times.cold",
                "simple_copy.cold",
                "smart_rename.cold",
                "main",
                "parse_number",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "simple_copy",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_main_process_00116aa0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "auxiliaryStack"
            },
            "code": "\nvoid processEntry startMainProcess_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined auxiliaryStack [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,auxiliaryStack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_process_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "rbx",
                "unaff_RBP": "rbp",
                "unaff_R12": "r12",
                "unaff_R14B": "r14b",
                "unaff_R15": "r15",
                "lVar1": "return_value",
                "lVar2": "group_signature",
                "cVar3": "result",
                "lVar4": "error_message",
                "lVar5": "lvar5"
            },
            "code": "\nvoid set_alignment_00108179(void)\n\n{\n  long return_value;\n  long group_signature;\n  char result;\n  long error_message;\n  long lvar5;\n  long rbx;\n  long rbp;\n  long r12;\n  char r14b;\n  long r15;\n  \n  error_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    return_value = *(long *)(rbx + 0xd0);\n    lvar5 = group_signature_isra_0(return_value,*(undefined8 *)(rbx + 0xe0));\n    if ((lvar5 != 0) &&\n       (group_signature = *(long *)(r12 + 8), *(uint *)(lvar5 + 0x18) = *(uint *)(lvar5 + 0x18) | 0x20,\n       *(int *)(group_signature + 8) == 5)) {\n      *(long *)(return_value + 0xb0) = lvar5;\n      result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (r14b != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "dcgettext",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "extract_file_info_00109022",
                "param_1": "fileManager",
                "param_2": "fileNumbers",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "currentIndex",
                "pcVar2": "errorMsg",
                "plVar3": "fileInfo",
                "lVar4": "loopCounter",
                "uVar5": "indexToProcess",
                "pplVar6": "fileList",
                "bVar7": "byteVar",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16] extractFileInfo_00109022(long fileManager,uint *fileNumbers,undefined8 param3,undefined8 param4)\n\n{\n  uint currentIndex;\n  char *errorMsg;\n  long *fileInfo;\n  long loopCounter;\n  uint indexToProcess;\n  long **fileList;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  indexToProcess = *fileNumbers;\n  currentIndex = fileNumbers[1];\n  if (((int)indexToProcess < 0) || (*(uint *)(fileManager + 0x80) <= indexToProcess)) {\n    errorMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)indexToProcess);\n  }\n  else {\n    if (-1 < (int)currentIndex) {\n      fileList = (long **)(*(long *)(fileManager + 0x88) + (long)(int)indexToProcess * 8);\n      for (indexToProcess = currentIndex; 0xf < (int)indexToProcess; indexToProcess = indexToProcess - 0x10) {\n        if (*fileList == (long *)0x0) {\n          fileInfo = (long *)xmalloc(0x88);\n          *fileList = fileInfo;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileInfo = 0;\n            fileInfo = (long *)((long)fileInfo + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileList = (long **)*fileList;\n      }\n      if (*fileList == (long *)0x0) {\n        fileInfo = (long *)xmalloc(0x88);\n        *fileList = fileInfo;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileInfo = 0;\n          fileInfo = (long *)((long)fileInfo + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileInfo = *fileList + (long)(int)((currentIndex >> 4) * -0x10 + currentIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)currentIndex);\n  }\n  fileInfo = (long *)0x0;\nLAB_00109117:\n  result._8_8_ = param4;\n  result._0_8_ = fileInfo;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "parse_stab_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "extract_file_info_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "dataPtr",
                "param_2": "variableId",
                "param_3": "fileId",
                "param_4": "opcFlag",
                "auVar1": "result",
                "auVar9": "returnValue",
                "uVar2": "status",
                "piVar3": "allocation",
                "cVar4": "opcFlagMinusOne",
                "lVar5": "loopCounter",
                "lVar6": "fileOffset",
                "piVar7": "pointer",
                "bVar8": "byteVar"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariable_0010c05d(long dataPtr,long variableId,ulong fileId,int opcFlag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 status;\n  int *allocation;\n  char opcFlagMinusOne;\n  long loopCounter;\n  long fileOffset;\n  int *pointer;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  if (variableId == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = fileId;\n    return result << 0x40;\n  }\n  if (fileId != 0) {\n    if ((*(long *)(dataPtr + 8) == 0) || (fileOffset = *(long *)(dataPtr + 0x10), fileOffset == 0)) {\n      status = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",status);\n    }\n    else {\n      if (opcFlag - 1U < 2) {\n        fileOffset = fileOffset + 0x10;\n        opcFlagMinusOne = (opcFlag == 1) + '\\x01';\n      }\n      else if (*(long *)(dataPtr + 0x20) == 0) {\n        fileOffset = fileOffset + 0x10;\n        opcFlagMinusOne = '\\0';\n      }\n      else {\n        fileOffset = *(long *)(dataPtr + 0x20) + 0x28;\n        opcFlagMinusOne = '\\0';\n      }\n      fileOffset = debug_add_to_namespace_constprop_0(fileOffset,variableId,2,opcFlagMinusOne);\n      if (fileOffset != 0) {\n        allocation = (int *)xmalloc(0x18);\n        pointer = allocation + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *pointer = 0;\n          pointer = pointer + (ulong)byteVar * -2 + 1;\n        }\n        *allocation = opcFlag;\n        status = 1;\n        *(ulong *)(allocation + 2) = fileId;\n        *(undefined8 *)(allocation + 4) = param_5;\n        *(int **)(fileOffset + 0x20) = allocation;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  returnValue._8_8_ = param_6;\n  returnValue._0_8_ = status;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "stab_emit_pending_vars"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "process_variable_00109d97",
                "param_1": "input",
                "local_40": "outputString",
                "lVar1": "counter"
            },
            "code": "\nvoid processVariable_00109d97(long input)\n\n{\n  long counter;\n  char outputString [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  counter = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = counter + 1;\n  sprintf(outputString,\"%ld=%ld\",counter,counter);\n  stab_push_string(input,outputString,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_variable_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "main",
                "create_symbol_htab",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = decode_build_attr_note_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = decode_build_attr_note_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = decode_build_attr_note_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto process_data_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto process_data_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nprocess_data_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_set_error",
                "dcgettext",
                "non_fatal",
                "qsort",
                "compare_gnu_build_notes",
                "bfd_nonfatal_message",
                "merge_gnu_build_notes.cold",
                "FUN_00116490"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_class_methods_and_variables_0010add5"
            },
            "code": "\nvoid initializeClassMethodsAndVariables_0010add5(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_methods_and_variables_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_debug_type_00113e17"
            },
            "code": "\nvoid initializeDebugType_00113e17(void)\n\n{\n  debug_make_type_constprop_0(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructurePointer",
                "param_2": "sourceString",
                "param_3": "thirdParameter",
                "param_4": "fourthParameter",
                "param_5": "fifthParameter",
                "uVar1": "previousPointer",
                "puVar2": "newDataStructurePointer",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructurePointer,undefined8 sourceString,undefined8 thirdParameter,undefined fourthParameter,\n                      undefined4 fifthParameter)\n\n{\n  undefined8 previousPointer;\n  undefined8 *newDataStructurePointer;\n  undefined8 duplicatedString;\n  \n  newDataStructurePointer = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  newDataStructurePointer[2] = thirdParameter;\n  *(undefined (*) [16])(newDataStructurePointer + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newDataStructurePointer + 6) = ZEXT816(0);\n  previousPointer = *(undefined8 *)(dataStructurePointer + 0x60);\n  *(undefined *)((long)newDataStructurePointer + 0x1c) = fourthParameter;\n  *(undefined4 *)(newDataStructurePointer + 3) = fifthParameter;\n  *(undefined8 **)(dataStructurePointer + 0x60) = newDataStructurePointer;\n  *newDataStructurePointer = previousPointer;\n  newDataStructurePointer[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "string_ptr",
                "param_2": "parse_result_ptr",
                "param_3": "end_ptr",
                "__nptr": "input_string",
                "piVar1": "errno_ptr",
                "uVar2": "result",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **string_ptr,undefined *parse_result_ptr,char *end_ptr,undefined8 param_4,undefined8 param_5)\n\n{\n  char *input_string;\n  int *errno_ptr;\n  ulong result;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (parse_result_ptr != (undefined *)0x0) {\n    *parse_result_ptr = 0;\n  }\n  input_string = *string_ptr;\n  if ((input_string < end_ptr) && (*input_string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    result = strtoul(input_string,string_ptr,0);\n    if ((result != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (parse_result_ptr == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(input_string,error_message);\n    }\n    else {\n      *parse_result_ptr = 1;\n    }\n  }\n  result = 0;\nLAB_00109aa9:\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "strtoul",
                "warn_stab",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "find_debug_tag_type_0010c6be",
                "param_1": "fileHandler",
                "param_2": "tagName",
                "param_3": "tagType",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "piVar3": "newTagType",
                "pauVar4": "tagData",
                "lVar5": "fileSize",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * findDebugTagType_0010c6be(long fileHandler,char *tagName,int *tagType)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  int *newTagType;\n  undefined (*tagData) [16];\n  long fileSize;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagType != (int *)0x0)) {\n    if (*(long *)(fileHandler + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagType != 0x17) {\n        newTagType = (int *)debug_make_type_constprop_0(0x17,0);\n        if (newTagType == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tagData = (undefined (*) [16])xmalloc(0x10);\n        fileSize = *(long *)(fileHandler + 0x10);\n        *tagData = ZEXT816(0);\n        *(int **)(*tagData + 8) = tagType;\n        *(undefined (**) [16])(newTagType + 4) = tagData;\n        fileSize = debug_add_to_namespace_constprop_0(fileSize + 0x10,tagName,1,3);\n        if (fileSize == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(fileSize + 0x20) = newTagType;\n        *(long *)*tagData = fileSize;\n        return newTagType;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagType + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagType;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "find_debug_tag_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "is_error",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "demangled_value",
                "uVar2": "count",
                "uVar3": "allocated_size",
                "uVar4": "new_count",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *is_error)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long demangled_value;\n  ulong count;\n  ulong allocated_size;\n  uint new_count;\n  char temp_buffer [9];\n  \n  allocated_size = 10;\n  count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *is_error = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_value = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,temp_buffer);\n    if (demangled_value == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *is_error = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)allocated_size <= new_count) {\n        allocated_size = (ulong)((uint)allocated_size + 10);\n        result_ptr = (void *)xrealloc(result_ptr,allocated_size << 3);\n      }\n      *(long *)((long)result_ptr + count * 8) = demangled_value;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "param_1": "binary_info",
                "param_2": "section_info",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "lVar3": "extracted_info",
                "lVar4": "section_pointer"
            },
            "code": "\nlong extract_section_info_0011a2e0(long binary_info,long section_info)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long extracted_info;\n  long section_pointer;\n  \n  extracted_info = (**(code **)(*(long *)(section_info + 8) + 0x208))(section_info);\n  section_pointer = *(long *)(binary_info + 0x20);\n  *(undefined8 *)(extracted_info + 8) = *(undefined8 *)(binary_info + 8);\n  *(undefined8 *)(extracted_info + 0x10) = *(undefined8 *)(binary_info + 0x10);\n  *(undefined4 *)(extracted_info + 0x18) = *(undefined4 *)(binary_info + 0x18);\n  if (section_pointer == 0) {\n    section_pointer = 0x128598;\n  }\n  else {\n    section_pointer = bfd_get_section_by_name(section_info);\n    if (section_pointer == 0) {\n      section_address = *(undefined8 *)(binary_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(error_message,section_address);\n    }\n  }\n  *(long *)(extracted_info + 0x20) = section_pointer;\n  return extracted_info;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_symbol_to_stab_0010e8a9",
                "param_1": "symbolName",
                "param_2": "stabPtr",
                "param_3": "inputString",
                "uVar1": "returnValue",
                "sVar2": "inputLength",
                "__s": "formattedString"
            },
            "code": "\nundefined4 writeSymbolToStab_0010e8a9(undefined8 symbolName,undefined8 stabPtr,char *inputString)\n\n{\n  undefined4 returnValue;\n  size_t inputLength;\n  char *formattedString;\n  \n  inputLength = strlen(inputString);\n  formattedString = (char *)xmalloc(inputLength + 0x14);\n  sprintf(formattedString,\"%s:c=f%g\",symbolName,inputString);\n  returnValue = stab_write_symbol_lto_priv_0(stabPtr,0x80,0,0,formattedString);\n  if ((char)returnValue != '\\0') {\n    free(formattedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_stab_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "section_flag_to_value_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionName",
                "sVar4": "sectionNameLength",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "iVar5": "sectionNameDifference",
                "unaff_R14D": "result",
                "unaff_R15": "supportedFlags",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] sectionFlagToValue_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentFlag;\n  char *sectionName;\n  size_t sectionNameLength;\n  int sectionNameDifference;\n  uint result;\n  char *supportedFlags;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    result = result | 0x2000;\n    sectionName = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionName == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = result;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(sectionName,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionNameLength = strlen(sectionName);\n                sectionNameDifference = (int)sectionNameLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                sectionNameDifference = (int)commaPosition - (int)sectionName;\n              }\n              sectionNameLength = (size_t)sectionNameDifference;\n              comparisonResult = strncasecmp(supportedFlags,sectionName,sectionNameLength);\n              if (comparisonResult != 0) break;\n              result = result | 1;\n              sectionName = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionName,sectionNameLength);\n            if (comparisonResult != 0) break;\n            result = result | 2;\n            sectionName = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionName,sectionNameLength);\n          if (comparisonResult != 0) break;\n          result = result | 0x200;\n          sectionName = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionName,sectionNameLength);\n        if (comparisonResult != 0) break;\n        result = result | 8;\n        sectionName = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionName,sectionNameLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionName,sectionNameLength);\n      if (comparisonResult == 0) {\n        result = result | 0x10;\n        sectionName = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionName,sectionNameLength);\n        if (comparisonResult == 0) {\n          result = result | 0x20;\n          sectionName = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionName,sectionNameLength);\n          if (comparisonResult == 0) {\n            result = result | 0x40;\n            sectionName = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionName,sectionNameLength);\n            if (comparisonResult == 0) {\n              result = result | 0x8000;\n              sectionName = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionName,sectionNameLength);\n              if (comparisonResult == 0) {\n                result = result | 0x8000000;\n                sectionName = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionName,sectionNameLength);\n                if (comparisonResult == 0) {\n                  result = result | 0x100;\n                  sectionName = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionName,sectionNameLength);\n                  if (comparisonResult == 0) {\n                    result = result | 0x800000;\n                    sectionName = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionName,sectionNameLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(sectionNameDifference + 1));\n                      strncpy(commaPosition,sectionName,sectionNameLength);\n                      commaPosition[sectionNameLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(uVar2,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    result = result | 0x1000000;\n                    sectionName = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "parse_flags.cold",
                "strlen",
                "strchr",
                "strncpy",
                "dcgettext",
                "non_fatal",
                "strncasecmp",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "section_flag_to_value_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_is_equal_to_one_hundred_001087da",
                "in_RAX": "valueOfRAX",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXIsEqualToOneHundred_001087da(void)\n\n{\n  long valueOfRAX;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = valueOfRAX == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_if_rax_is_equal_to_one_hundred_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "arg3",
                "param_4": "arg4",
                "lVar1": "current_compilation_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_node",
                "lVar5": "list",
                "puVar6": "current_list_node",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 arg3,undefined8 arg4)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_node;\n  long list;\n  undefined8 *current_list_node;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (list = *(long *)(compilation_unit + 0x20); list != 0; list = *(long *)(list + 8)) {\n      if (*(undefined8 **)(list + 0x28) != (undefined8 *)0x0) {\n        for (current_node = (undefined8 *)**(undefined8 **)(list + 0x28); current_node != (undefined8 *)0x0;\n            current_node = (undefined8 *)*current_node) {\n          if (*(int *)((long)current_node + 0x14) == 0) {\n            if (*(char *)current_node[1] == *type_name) {\n              comparison_result = strcmp((char *)current_node[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_list_node = *(undefined8 **)(current_compilation_unit + 8); current_list_node != (undefined8 *)0x0;\n        current_list_node = (undefined8 *)*current_list_node) {\n      if ((undefined8 *)current_list_node[2] != (undefined8 *)0x0) {\n        for (current_node = *(undefined8 **)(undefined8 *)current_list_node[2]; current_node != (undefined8 *)0x0;\n            current_node = (undefined8 *)*current_node) {\n          if (*(int *)((long)current_node + 0x14) == 0) {\n            if (*(char *)current_node[1] == *type_name) {\n              comparison_result = strcmp((char *)current_node[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = arg4;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_node[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_function_0010829e",
                "unaff_EBP": "parameter",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkFunction_0010829e(void)\n\n{\n  undefined8 result;\n  int parameter;\n  \n  if (parameter == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((parameter != 4) && (parameter == 6)) {\n    result = toggle_dwo_section_constprop_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_function_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_mach_info_00104943",
                "in_RAX": "inputString",
                "iVar1": "defaultValue",
                "iVar2": "strComparison",
                "lVar3": "convertedValue",
                "sVar4": "strLen",
                "pcVar5": "archMach",
                "uVar6": "printableArchMach",
                "iVar7": "archIndex",
                "lVar8": "paramIndex",
                "iVar9": "maxIndex",
                "unaff_R15D": "stackIndex",
                "uVar10": "loopCounter",
                "uVar11": "archIndexOffset",
                "param_7": "maxPrintCount",
                "uStack000000000000000c": "printWidth",
                "param_11": "archInfoArray",
                "param_13": "archMachArray"
            },
            "code": "\n\n\nvoid printReverseArchMachInfo_00104943(void)\n\n{\n  int defaultValue;\n  int strComparison;\n  char *inputString;\n  long convertedValue;\n  size_t strLen;\n  char *archMach;\n  undefined8 printableArchMach;\n  int archIndex;\n  long paramIndex;\n  int maxIndex;\n  uint stackIndex;\n  ulong loopCounter;\n  uint archIndexOffset;\n  int maxPrintCount;\n  uint printWidth;\n  undefined8 archInfoArray;\n  long archMachArray;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)convertedValue;\n  maxIndex = maxPrintCount;\n  printWidth = stackIndex;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    maxPrintCount = maxIndex;\n    if (archInfoArray._4_4_ <= maxPrintCount) {\n      return;\n    }\n    paramIndex = (long)maxPrintCount;\n    archIndex = (defaultValue - printWidth) + -1;\n    convertedValue = paramIndex;\n    do {\n      maxIndex = (int)convertedValue;\n      if (archInfoArray._4_4_ <= maxIndex) break;\n      strLen = strlen(*(char **)(archMachArray + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      archIndex = (archIndex - (int)strLen) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(printWidth + 1),&DAT_0011b4a1);\n    for (convertedValue = paramIndex * 0x60; ((ulong)(uint)(maxIndex - maxPrintCount) + paramIndex) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(archMachArray + convertedValue));\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      archMach = (char *)bfd_printable_arch_mach(archIndex,0);\n      strComparison = strcmp(archMach,\"UNKNOWN!\");\n      if (strComparison != 0) {\n        printableArchMach = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)printWidth,printableArchMach);\n        archIndexOffset = archIndex - 2;\n        convertedValue = paramIndex * 0x60;\n        strComparison = maxPrintCount;\n        while (maxIndex != strComparison) {\n          archMach = *(char **)(archMachArray + convertedValue);\n          if (*(char *)((long)(char **)(archMachArray + convertedValue) + (ulong)archIndexOffset + 8) == '\\0') {\n            strLen = strlen(archMach);\n            for (loopCounter = strLen & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMach,_stdout);\n          }\n          strComparison = strComparison + 1;\n          if (maxIndex != strComparison) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "fputs",
                "printf",
                "putc",
                "bfd_printable_arch_mach",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_mach_info_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "allocate_and_store_00113e23",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "result",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong allocate_and_store_00113e23(undefined8 input_1,undefined8 input_2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = debug_make_type_constprop_0(1,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_find_tagged_type"
            ],
            "imported": false,
            "current_name": "allocate_and_store_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_message_00108fb9",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabMessage_00108fb9(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "print_bad_stab_message_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_00108ea1",
                "param_1": "input_bytes",
                "param_2": "parsed_integer",
                "iVar1": "accumulator",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong parse_integer_00108ea1(byte **input_bytes,int *parsed_integer)\n\n{\n  int accumulator;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_bytes;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    accumulator = (char)*current_byte + -0x30;\n    *parsed_integer = accumulator;\n    *input_bytes = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        accumulator = accumulator * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_bytes = next_byte;\n        *parsed_integer = accumulator;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_integer_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_properties_00108072",
                "uVar2": "sectionAddress",
                "cVar3": "result",
                "uVar4": "alignment",
                "lVar5": "errorText",
                "lVar6": "sectionList1",
                "lVar7": "addressOffset",
                "lVar8": "sectionList2",
                "unaff_RBX": "functionParams",
                "unaff_RBP": "unaff_var1",
                "unaff_R12": "unaff_var2",
                "unaff_R14B": "unaff_var3",
                "unaff_R15": "sectionProperties",
                "change_section_address": "sectionAddressChange",
                "dcgettext": "getErrorMessage",
                "find_section_list": "findSectionList",
                "copy_private_data_0010808f": "copyPrivateData",
                "group_signature_isra_0": "calculateGroupSignature",
                "set_alignment_00108179": "setAlignment",
                "bfd_nonfatal_message": "nonFatalMessage"
            },
            "code": "\nvoid setSectionProperties_00108072(void)\n\n{\n  byte bVar1;\n  undefined8 sectionAddress;\n  char result;\n  uint alignment;\n  long errorText;\n  long sectionList1;\n  long addressOffset;\n  undefined8 *functionParams;\n  long unaff_var1;\n  long unaff_var2;\n  long sectionList2;\n  char unaff_var3;\n  long sectionProperties;\n  \n  errorText = getErrorMessage(0,\"failed to set size\",5);\n  sectionList2 = functionParams[6];\n  sectionList1 = findSectionList(*functionParams,0,0x18);\n  if (sectionList1 == 0) {\n    *(byte *)(sectionProperties + 0x28) = *(byte *)(sectionProperties + 0x28) | 1;\n    sectionAddress = *functionParams;\n    sectionList2 = sectionList2 + sectionAddressChange;\n    *(long *)(sectionProperties + 0x30) = sectionList2;\n    *(long *)(sectionProperties + 0x38) = sectionList2;\n    sectionList2 = functionParams[7];\n    sectionList1 = findSectionList(sectionAddress,0,0x60);\n    if (sectionList1 == 0) goto LAB_00115695;\nLAB_00115860:\n    addressOffset = *(long *)(sectionList1 + 0x20);\n    if ((*(byte *)(sectionList1 + 0x14) & 0x40) != 0) {\n      addressOffset = addressOffset + sectionList2;\n    }\n    *(long *)(sectionProperties + 0x38) = addressOffset;\n    sectionList2 = findSectionList(*functionParams,0,0x200);\n    if (sectionList2 != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment = *(uint *)((long)functionParams + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    errorText = getErrorMessage(0,\"failed to set alignment\",5);\n    *(undefined4 *)(sectionProperties + 0xb4) = *(undefined4 *)((long)functionParams + 0xb4);\n    *(byte *)(sectionProperties + 0x28) =\n         *(byte *)(sectionProperties + 0x28) & 0xcf | *(byte *)(functionParams + 5) & 0x30;\n    functionParams[0xc] = sectionProperties;\n    functionParams[0xb] = 0;\n    bVar1 = *(byte *)((long)functionParams + 0x27);\n  }\n  else {\n    addressOffset = *(long *)(sectionList1 + 0x18);\n    if ((*(byte *)(sectionList1 + 0x14) & 8) == 0) {\n      addressOffset = addressOffset + sectionList2;\n    }\n    *(byte *)(sectionProperties + 0x28) = *(byte *)(sectionProperties + 0x28) | 1;\n    sectionAddress = *functionParams;\n    *(long *)(sectionProperties + 0x30) = addressOffset;\n    *(long *)(sectionProperties + 0x38) = addressOffset;\n    sectionList2 = functionParams[7];\n    sectionList1 = findSectionList(sectionAddress,0,0x60);\n    if (sectionList1 != 0) goto LAB_00115860;\nLAB_00115695:\n    sectionAddress = *functionParams;\n    *(long *)(sectionProperties + 0x38) = sectionList2 + sectionAddressChange;\n    sectionList2 = findSectionList(sectionAddress,0,0x200);\n    if (sectionList2 == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment = *(uint *)(sectionList2 + 0x2c);\n    if (0x3e < alignment) {\n      setAlignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(sectionProperties + 0x7c) = alignment;\n    *(undefined4 *)(sectionProperties + 0xb4) = *(undefined4 *)((long)functionParams + 0xb4);\n    *(byte *)(sectionProperties + 0x28) =\n         *(byte *)(sectionProperties + 0x28) & 0xcf | *(byte *)(functionParams + 5) & 0x30;\n    functionParams[0xc] = sectionProperties;\n    functionParams[0xb] = 0;\n    bVar1 = *(byte *)((long)functionParams + 0x27);\n  }\n  if ((bVar1 & 2) != 0) {\n    sectionList2 = functionParams[0x1a];\n    sectionList1 = calculateGroupSignature(sectionList2,functionParams[0x1c]);\n    if ((sectionList1 != 0) &&\n       (addressOffset = *(long *)(unaff_var2 + 8), *(uint *)(sectionList1 + 0x18) = *(uint *)(sectionList1 + 0x18) | 0x20,\n       *(int *)(addressOffset + 8) == 5)) {\n      *(long *)(sectionList2 + 0xb0) = sectionList1;\n      result = (**(code **)(*(long *)(unaff_var1 + 8) + 0x158))();\n      if (result == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(unaff_var1 + 8) + 0x158))();\n  if (result == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (unaff_var3 != '\\0') {\n    *(undefined4 *)(*(long *)(sectionProperties + 0xd0) + 4) = 8;\n  }\n  if (errorText != 0) {\n    status = 1;\n    nonFatalMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "find_section_list",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_properties_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_string_0010a2b9",
                "param_1": "inputPointer",
                "param_2": "flag",
                "param_3": "tempParam1",
                "param_4": "tempParam2",
                "cVar1": "char1",
                "__s": "str1",
                "sVar2": "stringLength",
                "__s_00": "modifiedStr",
                "lVar3": "tempVar",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processString_0010a2b9(long inputPointer,char flag,undefined8 tempParam1,undefined8 tempParam2)\n\n{\n  char char1;\n  char *str1;\n  size_t stringLength;\n  char *modifiedStr;\n  long tempVar;\n  undefined returnValue [16];\n  \n  char1 = *(char *)(*(long *)(inputPointer + 0x60) + 0x1c);\n  str1 = (char *)stab_pop_type();\n  stringLength = strlen(str1);\n  modifiedStr = (char *)xmalloc(stringLength + 0x1e);\n  if (flag == '\\0') {\n    *modifiedStr = '\\0';\n    tempVar = 0;\n    flag = char1;\n  }\n  else {\n    tempVar = *(long *)(inputPointer + 0x68);\n    *(long *)(inputPointer + 0x68) = tempVar + 1;\n    sprintf(modifiedStr,\"%ld=@S;\",tempVar);\n  }\n  stringLength = strlen(modifiedStr);\n  sprintf(modifiedStr + stringLength,\"S%s\",str1);\n  free(str1);\n  returnValue._0_4_ = stab_push_string(inputPointer,modifiedStr,tempVar,flag,0);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(modifiedStr);\n  }\n  returnValue._8_8_ = tempParam2;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_string_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined processData_0010ec73(long *data,long value,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int count;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  count = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = count + 1;\n  if (count == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = stab_write_symbol_lto_priv_0(data,0xc0,0,data[0x41],0,param6,param4),\n       result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness",
                "dcgettext": "translateMessage"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    translateMessage(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    translateMessage(0,\"little endian\",5);\n    return;\n  }\n  translateMessage(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_times_00115970",
                "param_1": "sourcePath",
                "param_2": "destinationPath",
                "param_3": "filePermissions",
                "param_4": "fileTimestamp",
                "param_5": "shouldSetTimes",
                "param_6": "returnCode",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndSetTimes_00115970(char *sourcePath,char *destinationPath,undefined4 filePermissions,undefined8 fileTimestamp,char shouldSetTimes,\n            undefined8 returnCode)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong unlinkResult;\n  undefined returnValue [16];\n  \n  if (destinationPath == sourcePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = simple_copy(filePermissions,destinationPath,fileTimestamp);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMessage,destinationPath,errorString);\n    }\n    unlink(sourcePath);\n  }\n  if (shouldSetTimes != '\\0') {\n    set_times(destinationPath,fileTimestamp);\n  }\n  returnValue._8_8_ = returnCode;\n  returnValue._0_8_ = unlinkResult;\n  return returnValue;\n}\n\n",
            "called": [
                "simple_copy",
                "smart_rename.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_set_times_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_stab_class_method_var_0010adf2"
            },
            "code": "\nvoid initialize_stab_class_method_var_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_stab_class_method_var_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "parse_and_remember_type_0010d7d4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "currentPointer",
                "cVar2": "typeStatus",
                "uVar3": "returnStatus",
                "lVar4": "dataArray",
                "plVar5": "localArray",
                "uVar6": "count",
                "local_40": "parsedTypes"
            },
            "code": "\nundefined4\nparseAndRememberType_0010d7d4(undefined8 param1,undefined8 *param2,long *param3,uint *param4,uint *param5)\n\n{\n  undefined8 currentPointer;\n  char typeStatus;\n  undefined4 returnStatus;\n  long dataArray;\n  long *localArray;\n  uint count;\n  long parsedTypes [2];\n  \n  currentPointer = *param2;\n  localArray = parsedTypes;\n  if (param3 == (long *)0x0) {\n    localArray = (long *)0x0;\n  }\n  typeStatus = stab_demangle_type_lto_priv_0(param1,param2,localArray);\n  if ((typeStatus != '\\0') &&\n     (returnStatus = stab_demangle_remember_type(param1,currentPointer,(int)*param2 - (int)currentPointer),\n     (char)returnStatus != '\\0')) {\n    if (param3 == (long *)0x0) {\n      return returnStatus;\n    }\n    if (parsedTypes[0] != 0) {\n      if (*param5 <= *param4 + 1) {\n        count = *param5 + 10;\n        dataArray = *param3;\n        *param5 = count;\n        dataArray = xrealloc(dataArray,(ulong)count << 3);\n        *param3 = dataArray;\n      }\n      count = *param4;\n      *(long *)(*param3 + (ulong)count * 8) = parsedTypes[0];\n      *param4 = count + 1;\n      return returnStatus;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "xrealloc",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "parse_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "validate_file_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error_ptr",
                "uVar3": "error_msg",
                "pcVar4": "error_reason",
                "sStack_a8": "file_info"
            },
            "code": "\nlong validate_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *error_ptr;\n  undefined8 error_msg;\n  char *error_reason;\n  stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_info);\n    if (status < 0) {\n      error_ptr = __errno_location();\n      if (*error_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_msg,file_path);\n      }\n      else {\n        error_reason = strerror(*error_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_msg,file_path,error_reason);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_msg,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_info.st_size) {\n        return file_info.st_size;\n      }\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_msg,file_path);\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_msg,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "non_fatal",
                "get_file_size.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "main",
                "copy_file",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "validate_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_return_value_001087fd"
            },
            "code": "\nundefined8 getReturnValue_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "get_return_value_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatKeywords",
                "uVar1": "programName",
                "__format": "errorFormat",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatKeywords)\n\n{\n  undefined8 programName;\n  char *errorFormat;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  errorFormat = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,errorFormat,programName);\n  for (currentFormat = formatKeywords; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatKeywords);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "compile_debug_info_0011378f",
                "param_1": "output_file",
                "param_2": "file_hdr",
                "param_3": "debug_info_offset",
                "param_4": "section_info_offset",
                "param_5": "string_table_offset",
                "param_6": "symbol_table_offset",
                "auVar1": "temp_array",
                "cVar2": "error_flag",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "puVar5": "temp_ptr",
                "sVar6": "str_len",
                "lVar7": "loop_counter",
                "puVar8": "symbol_ptr",
                "puVar9": "symbol_table",
                "__dest": "dest_ptr",
                "puVar10": "data_ptr",
                "plVar11": "source_file_ptr",
                "bVar12": "init_flag",
                "local_258": "output_file_ptr",
                "local_250": "debug_info_size",
                "local_248": "section_size",
                "uStack_244": "source_line_count",
                "uStack_240": "max_source_line_count",
                "uStack_23c": "source_file_count",
                "local_238": "filename_table",
                "local_228": "compilation_unit_index",
                "local_220": "filename_hash_table",
                "local_1f8": "symbol_idx",
                "local_1f0": "compilation_unit_count",
                "local_1e8": "compilation_unit_array",
                "local_a0": "symbol_name_table",
                "local_78": "symbol_header",
                "uStack_70": "temp_var",
                "local_68": "compilation_unit_id",
                "local_60": "source_file_id",
                "local_58": "name_idx",
                "uStack_54": "line_num",
                "uStack_50": "line_idx",
                "uStack_4c": "line_sequence_idx",
                "unique0x100000e9": "temp_var_1",
                "unique0x100000ed": "temp_var_2",
                "non_fatal": "error_handler",
                "bfd_get_error": "get_error_code",
                "bfd_errmsg": "get_error_msg",
                "bfd_hash_table_init": "init_hash_table",
                "string_hash_newfunc_lto_priv_0": "hash_func",
                "stab_write_symbol_lto_priv_0": "write_symbol",
                "debug_write_name_constprop_0": "write_name",
                "stab_start_source_lto_priv_0": "start_source",
                "debug_write_linenos_constprop_0": "write_line_numbers",
                "CONCAT44": "concat_4bytes",
                "xmalloc": "allocate_memory",
                "strcpy": "copy_string",
                "strlen": "string_length"
            },
            "code": "\nundefined4\ncompile_debug_info_0011378f(undefined8 *output_file,undefined8 *file_hdr,long *debug_info_offset,undefined8 *section_info_offset,\n            undefined8 *string_table_offset,undefined8 *symbol_table_offset)\n\n{\n  undefined temp_array [16];\n  char error_flag;\n  undefined4 error_code;\n  undefined8 error_msg;\n  undefined *temp_ptr;\n  size_t str_len;\n  long loop_counter;\n  undefined8 *symbol_ptr;\n  undefined4 *symbol_table;\n  char *dest_ptr;\n  undefined8 *data_ptr;\n  long *source_file_ptr;\n  byte init_flag;\n  undefined8 *output_file_ptr;\n  long debug_info_size;\n  undefined4 section_size;\n  undefined4 source_line_count;\n  undefined4 max_source_line_count;\n  undefined4 source_file_count;\n  undefined filename_table [16];\n  undefined8 compilation_unit_index;\n  undefined filename_hash_table [40];\n  undefined8 symbol_idx;\n  undefined8 compilation_unit_count;\n  undefined4 compilation_unit_array [82];\n  undefined symbol_name_table [40];\n  undefined symbol_header [8];\n  undefined8 temp_var;\n  undefined8 compilation_unit_id;\n  undefined4 source_file_id;\n  undefined4 name_idx;\n  undefined4 line_num;\n  undefined4 line_idx;\n  undefined4 line_sequence_idx;\n  \n  init_flag = 0;\n  section_size = 0;\n  source_line_count = 0;\n  max_source_line_count = 500;\n  source_file_count = 0;\n  output_file_ptr = output_file;\n  debug_info_size = allocate_memory(500);\n  compilation_unit_index = 1;\n  filename_table = ZEXT816(0);\n  error_flag = init_hash_table(filename_hash_table,hash_func,0x30);\n  if ((error_flag == '\\0') ||\n     (error_flag = init_hash_table(symbol_name_table,hash_func,0x30), error_flag == '\\0')) {\n    error_code = get_error_code();\n    error_msg = get_error_msg(error_code);\n    error_handler(\"init_hash_table_failed: %s\",error_msg);\n  }\n  else {\n    symbol_idx = 0;\n    temp_var_1 = 0xffffffff;\n    symbol_header = (undefined  [8])0xffffffffffffffff;\n    temp_var_2 = 0xffffffff;\n    symbol_table = compilation_unit_array;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *symbol_table = 0;\n      symbol_table = symbol_table + (ulong)init_flag * -2 + 1;\n    }\n    compilation_unit_id = 0;\n    source_file_id = 0;\n    compilation_unit_count = 1;\n    name_idx = 0;\n    line_num = 0;\n    line_idx = 0xffffffff;\n    line_sequence_idx = 0xffffffff;\n    error_flag = write_symbol(&output_file_ptr,0,0,0,0);\n    temp_array = _symbol_header;\n    if (error_flag != '\\0') {\n      symbol_header._4_4_ = source_line_count;\n      symbol_header._0_4_ = section_size;\n      temp_var = temp_array._8_8_;\n      error_flag = write_symbol(&output_file_ptr,100,0,0,*output_file);\n      if (error_flag != '\\0') {\n        *(int *)(file_hdr + 6) = *(int *)(file_hdr + 6) + 1;\n        file_hdr[10] = 0;\n        data_ptr = (undefined8 *)*file_hdr;\n        *(undefined4 *)(file_hdr + 7) = *(undefined4 *)((long)file_hdr + 0x34);\n        for (; data_ptr != (undefined8 *)0x0; data_ptr = (undefined8 *)*data_ptr) {\n          file_hdr[8] = data_ptr[2];\n          *(undefined4 *)(file_hdr + 9) = 0;\n          error_flag = stab_start_compilation_unit_lto_priv_0(&output_file_ptr,*(undefined8 *)(data_ptr[1] + 8))\n          ;\n          if (error_flag == '\\0') {\n            return 0;\n          }\n          source_file_ptr = (long *)data_ptr[1];\n          if (source_file_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)source_file_ptr[2] != (undefined8 *)0x0) {\n                for (symbol_ptr = *(undefined8 **)(undefined8 *)source_file_ptr[2]; symbol_ptr != (undefined8 *)0x0;\n                    symbol_ptr = (undefined8 *)*symbol_ptr) {\n                  error_flag = write_name(file_hdr,&output_file_ptr);\n                  if (error_flag == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              source_file_ptr = (long *)*source_file_ptr;\n              if (source_file_ptr == (long *)0x0) break;\n              error_flag = start_source(&output_file_ptr,source_file_ptr[1]);\n              if (error_flag == '\\0') {\n                return 0;\n              }\n            }\n          }\n          error_flag = write_line_numbers(file_hdr,&output_file_ptr,0xffffffffffffffff);\n          if (error_flag == '\\0') {\n            return 0;\n          }\n        }\n        if ((concat_4bytes(line_sequence_idx,line_idx) == -1) &&\n           (error_code = write_symbol(&output_file_ptr,100,0,compilation_unit_id,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(output_file[1] + 0x50))(compilation_unit_index,debug_info_size + 8);\n          *debug_info_offset = debug_info_size;\n          *section_info_offset = concat_4bytes(source_line_count,section_size);\n          *symbol_table_offset = compilation_unit_index;\n          temp_ptr = (undefined *)allocate_memory();\n          *temp_ptr = 0;\n          dest_ptr = temp_ptr + 1;\n          *string_table_offset = temp_ptr;\n          for (loop_counter = filename_table._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            copy_string(dest_ptr,*(char **)(loop_counter + 8));\n            str_len = string_length(dest_ptr);\n            dest_ptr = dest_ptr + str_len + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_linenos.constprop.0",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0",
                "debug_write_name.constprop.0",
                "bfd_get_error",
                "strcpy",
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "string_hash_newfunc.lto_priv.0",
                "bfd_hash_table_init",
                "stab_start_source.lto_priv.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compile_debug_info_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "getLocalizedText",
                "non_fatal": "handleNonFatalError"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  \n  errorPointer = getErrnoLocation();\n  if (*errorPointer == 2) {\n    errorMessage = getLocalizedText(0,\"\\'%s\\': No such file\",5);\n    handleNonFatalError(errorMessage);\n  }\n  else {\n    strerror(*errorPointer);\n    errorMessage = getLocalizedText(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    handleNonFatalError(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_stab_entry_0010a0a0",
                "param_1": "entry_address",
                "stab_modify_type": "update_entry_type"
            },
            "code": "\nvoid modify_stab_entry_0010a0a0(long entry_address)\n\n{\n  update_entry_type(entry_address,0x26,4,entry_address + 0x198,entry_address + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_entry_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_params_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "output1",
                "param_10": "output2",
                "param_11": "output3",
                "param_12": "output4",
                "param_13": "output5",
                "param_14": "output6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "buffer1",
                "local_c8": "buffer2",
                "local_b8": "buffer3",
                "local_b0": "buffer4",
                "local_a8": "buffer5",
                "local_a0": "buffer6",
                "local_98": "buffer7",
                "local_90": "buffer8",
                "local_88": "param1",
                "local_78": "param2",
                "local_68": "param3",
                "local_58": "param4",
                "local_48": "param5",
                "local_38": "param6",
                "local_28": "param7",
                "local_18": "param8"
            },
            "code": "\nvoid reportParams_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 output1,undefined8 output2,undefined8 output3,undefined8 output4,\n                 undefined8 output5,undefined8 output6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 offset;\n  undefined *buffer1;\n  undefined *buffer2;\n  undefined buffer3 [8];\n  undefined8 buffer4;\n  undefined8 buffer5;\n  undefined8 buffer6;\n  undefined8 buffer7;\n  undefined8 buffer8;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  \n  if (flag != '\\0') {\n    param1 = input1;\n    param2 = input2;\n    param3 = input3;\n    param4 = input4;\n    param5 = input5;\n    param6 = input6;\n    param7 = input7;\n    param8 = input8;\n  }\n  buffer1 = &stack0x00000008;\n  size = 8;\n  buffer2 = buffer3;\n  offset = 0x30;\n  buffer4 = output2;\n  buffer5 = output3;\n  buffer6 = output4;\n  buffer7 = output5;\n  buffer8 = output6;\n  report(output1,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00105828",
                "merge_gnu_build_notes",
                "set_times.cold",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "FUN_001152b6",
                "stab_struct_field.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00104cc1",
                "copy_object",
                "main",
                "parse_flags.cold",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_001086af",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "get_file_size",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "report_params_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "generate_improved_type_00112c1f",
                "param_1": "info",
                "param_2": "param",
                "param_3": "type",
                "param_4": "base",
                "plVar1": "ptr1",
                "lVar2": "data",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "cVar5": "flag",
                "piVar6": "ptr6",
                "uVar7": "result",
                "uVar8": "var8",
                "iVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "bVar14": "flag14",
                "local_3c": "localVariable"
            },
            "code": "\n\n\nundefined8 generateImprovedType_00112c1f(ulong info,undefined8 param,int *type,long base)\n\n{\n  long *ptr1;\n  long data;\n  undefined8 *ptr3;\n  undefined8 *ptr4;\n  char flag;\n  int *ptr6;\n  undefined8 result;\n  undefined8 var8;\n  int var9;\n  undefined4 var10;\n  undefined8 var11;\n  ulong var12;\n  uint var13;\n  bool flag14;\n  uint localVariable;\n  \n  var12 = info;\nLAB_00112c39:\n  if (type != (int *)0x0) {\n    var9 = *type;\n    if (var9 - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(type + 4);\n        var13 = *(uint *)(info + 0x30);\n        var12 = (ulong)var13;\n        data = *ptr1;\n        if (*(uint *)(data + 0x10) == var13) {\n          if (var9 == 0x16) {\n            result = stab_typedef_type_lto_priv_0(param,*(undefined8 *)(data + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr6 = (int *)debug_get_real_type_isra_0(type,0);\n          if (ptr6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr6 - 7U < 4) && (*(long *)(ptr6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr6 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = debug_set_class_id_lto_priv_0\n                                  (info,*(undefined8 *)(**(long **)(type + 4) + 8),ptr6),\n               flag == '\\0')) {\n              return 0;\n            }\n            var13 = *(uint *)(*(long *)(ptr6 + 4) + 0xc);\n          }\n          else {\n            var13 = 0;\n          }\n          var9 = *ptr6;\n          result = *(undefined8 *)(**(long **)(type + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var9 == 0x17) {\n          if (data != base) goto LAB_00112c94;\n          *(uint *)(base + 0x10) = var13;\n          base = *ptr1;\n          type = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (base != 0) {\n          *(uint *)(base + 0x10) = var13;\n        }\n        type = (int *)ptr1[1];\n        if (type == (int *)0x0) goto LAB_00112dd6;\n        var9 = *type;\n        base = 0;\n      } while (var9 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (base == 0) goto LAB_00112d74;\n      *(undefined4 *)(base + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(base + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(base + 8);\n    }\n    switch(var9) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(param);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(param,type[1],*(undefined *)(type + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(param,type[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(param,type[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(param,type[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(type + 4) != 0) {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = debug_set_class_id_lto_priv_0(info,result,type), flag == '\\0')) {\n          return 0;\n        }\n        data = *(long *)(type + 4);\n        if (*(int *)(info + 0x30) == *(int *)(data + 8)) {\n          var13 = *(uint *)(data + 0xc);\n          if (var13 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var9 = *type;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(param,result,var13,var9);\n          return result;\n        }\n        *(int *)(data + 8) = *(int *)(info + 0x30);\n      }\n      var10 = 0;\n      if (*(long *)(type + 4) != 0) {\n        var10 = *(undefined4 *)(*(long *)(type + 4) + 0xc);\n      }\n      flag = stab_start_struct_type_lto_priv_0(param,result,var10,*type == 7,type[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type + 4) != (long *)0x0) && (var12 = 0, **(long **)(type + 4) != 0)) {\n        while( true ) {\n          ptr4 = *(undefined8 **)(**(long **)(type + 4) + var12 * 8);\n          if (ptr4 == (undefined8 *)0x0) break;\n          flag = generateImprovedType_00112c1f(info,param,ptr4[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = stab_struct_field_lto_priv_0\n                            (param,*ptr4,*(undefined4 *)(ptr4 + 3),\n                             *(undefined4 *)((long)ptr4 + 0x1c),*(undefined4 *)(ptr4 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          var12 = (ulong)((int)var12 + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(param);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(type + 4) == 0) {\n        var13 = 0;\n        ptr6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (var12 = info, flag = debug_set_class_id_lto_priv_0(info,result,type),\n           flag == '\\0')) {\n          return 0;\n        }\n        data = *(long *)(type + 4);\n        var13 = *(uint *)(data + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(data + 8)) {\n          if (var13 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var9 = *type;\n          goto LAB_00112ed2;\n        }\n        ptr6 = *(int **)(data + 0x20);\n        *(int *)(data + 8) = *(int *)(info + 0x30);\n        if (((ptr6 != (int *)0x0) && (type != ptr6)) &&\n           (var12 = info, flag = generateImprovedType_00112c1f(info,param,ptr6,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = stab_start_class_type_lto_priv_0\n                        (param,result,var13,*type == 9,type[1],ptr6 != (int *)0x0,\n                         type == ptr6,var12);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type + 4) != (long *)0x0) {\n        var13 = 0;\n        if (**(long **)(type + 4) != 0) {\n          while (ptr4 = *(undefined8 **)(**(long **)(type + 4) + (ulong)var13 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = generateImprovedType_00112c1f(info,param,ptr4[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr4 + 0x14) == '\\0') {\n              flag = stab_struct_field_lto_priv_0(param,*ptr4,*(undefined4 *)(ptr4 + 3));\n            }\n            else {\n              flag = stab_class_static_member_lto_priv_0(param,*ptr4,ptr4[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            var13 = var13 + 1;\n          }\n        }\n        var13 = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x10) != 0) {\n          while (ptr4 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x10) + (ulong)var13 * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = generateImprovedType_00112c1f(info,param,*ptr4,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = stab_class_baseclass_lto_priv_0\n                              (param,*(undefined4 *)(ptr4 + 1),\n                               *(undefined *)((long)ptr4 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            var13 = var13 + 1;\n          }\n        }\n        localVariable = 0;\n        if (*(long *)(*(long *)(type + 4) + 0x18) != 0) {\n          while (ptr4 = *(undefined8 **)\n                           (*(long *)(*(long *)(type + 4) + 0x18) + (ulong)localVariable * 8),\n                ptr4 != (undefined8 *)0x0) {\n            flag = stab_class_start_method_lto_priv_0(param,*ptr4);\n            if (flag == '\\0') {\n              return 0;\n            }\n            var13 = 0;\n            while (ptr3 = *(undefined8 **)(ptr4[1] + (ulong)var13 * 8),\n                  ptr3 != (undefined8 *)0x0) {\n              if ((ptr3[4] != 0) &&\n                 (flag = generateImprovedType_00112c1f(info,param,ptr3[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = generateImprovedType_00112c1f(info,param,ptr3[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr3[3] == -1) {\n                flag = stab_class_static_method_variant_lto_priv_0\n                                  (param,*ptr3,*(undefined4 *)(ptr3 + 2),\n                                   *(undefined *)((long)ptr3 + 0x14),\n                                   *(undefined *)((long)ptr3 + 0x15));\n              }\n              else {\n                flag = stab_class_method_variant_lto_priv_0(param);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              var13 = var13 + 1;\n            }\n            flag = stab_class_end_method_lto_priv_0(param);\n            if (flag == '\\0') {\n              return 0;\n            }\n            localVariable = localVariable + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(param);\n      return result;\n    case 0xb:\n      ptr4 = *(undefined8 **)(type + 4);\n      if (ptr4 == (undefined8 *)0x0) {\n        var8 = 0;\n        var11 = 0;\n      }\n      else {\n        var8 = ptr4[1];\n        var11 = *ptr4;\n      }\n      result = stab_enum_type_lto_priv_0(param,result,var11,var8);\n      return result;\n    case 0xc:\n      flag = generateImprovedType_00112c1f(info,param,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(param);\n      return result;\n    case 0xd:\n      flag = generateImprovedType_00112c1f(info,param,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var12 = 0;\n      if (*(long *)(*(long *)(type + 4) + 8) == 0) {\n        var12 = 0xffffffff;\n      }\n      else {\n        while (data = *(long *)(*(long *)(*(long *)(type + 4) + 8) + var12 * 8), data != 0) {\n          var12 = var12 + 1;\n          flag = generateImprovedType_00112c1f(info,param,data,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        var12 = var12 & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (param,var12,*(undefined *)(*(long *)(type + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = generateImprovedType_00112c1f(info,param,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(param);\n      return result;\n    case 0xf:\n      flag = generateImprovedType_00112c1f(info,param,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (param,*(undefined8 *)(*(long *)(type + 4) + 8),\n                         *(undefined8 *)(*(long *)(type + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = generateImprovedType_00112c1f(info,param,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = generateImprovedType_00112c1f(info,param,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      data = *(long *)(type + 4);\n      result = stab_array_type_lto_priv_0\n                        (param,*(undefined8 *)(data + 0x10),*(undefined8 *)(data + 0x18),\n                         *(undefined *)(data + 0x20));\n      return result;\n    case 0x11:\n      flag = generateImprovedType_00112c1f(info,param,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(param,*(undefined *)(*(long *)(type + 4) + 8));\n      return result;\n    case 0x12:\n      flag = generateImprovedType_00112c1f(info,param,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = generateImprovedType_00112c1f(info,param,*(undefined8 *)(*(long *)(type + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(param);\n      return result;\n    case 0x13:\n      flag = generateImprovedType_00112c1f(info,param,**(undefined8 **)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var12 = 0;\n      if (*(long *)(*(long *)(type + 4) + 0x10) == 0) {\n        var12 = 0xffffffff;\n      }\n      else {\n        while (data = *(long *)(*(long *)(*(long *)(type + 4) + 0x10) + var12 * 8), data != 0)\n        {\n          var12 = var12 + 1;\n          flag = generateImprovedType_00112c1f(info,param,data,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type + 4) + 8) != 0) &&\n         (flag = generateImprovedType_00112c1f(info,param,*(long *)(*(long *)(type + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (param,*(long *)(*(long *)(type + 4) + 8) != 0,var12 & 0xffffffff,\n                         *(undefined *)(*(long *)(type + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = generateImprovedType_00112c1f(info,param,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(param);\n      return result;\n    case 0x15:\n      flag = generateImprovedType_00112c1f(info,param,*(undefined8 *)(type + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(param);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag14 = *(int **)**(undefined8 **)(type + 4) == type;\n  type = *(int **)**(undefined8 **)(type + 4);\n  if (flag14) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(param);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_typedef_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_class_baseclass.lto_priv.0",
                "dcgettext",
                "stab_bool_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "__assert_fail",
                "stab_class_method_variant.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "abort",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "fprintf",
                "stab_class_static_method_variant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_improved_type_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "condition",
                "unaff_R15": "dataAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char condition;\n  long dataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (condition != '\\0') {\n    *(undefined4 *)(*(long *)(dataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "errorMessage",
                "param_2": "fileName",
                "in_RAX": "returnValue",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 errorMessage,undefined8 fileName)\n\n{\n  undefined8 returnValue;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,fileName,errorMessage,returnValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_number"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "detect_architecture_00105828",
                "iVar1": "archCode",
                "uVar2": "archType",
                "uVar3": "errorMessage",
                "uVar4": "formatMessage"
            },
            "code": "\nundefined8 detectArchitecture_00105828(void)\n\n{\n  int archCode;\n  undefined4 archType;\n  undefined8 errorMessage;\n  undefined8 formatMessage;\n  \n  archCode = bfd_get_arch();\n  if (archCode == 0) {\n    errorMessage = bfd_get_archive_filename();\n    formatMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(formatMessage,errorMessage);\n  }\n  else {\n    errorMessage = bfd_get_mach();\n    archType = bfd_get_arch();\n    errorMessage = bfd_printable_arch_mach(archType,errorMessage);\n    formatMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(formatMessage,errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "detect_architecture_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "result"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)template_in_dir();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "called": [
                "template_in_dir",
                "mkdtemp",
                "make_tempdir.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "param_1": "hash_table",
                "param_2": "key",
                "lVar1": "entry_address",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long hash_table,undefined8 key)\n\n{\n  long entry_address;\n  undefined8 result;\n  \n  entry_address = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((entry_address != 0) && (0 < *(long *)(entry_address + 0x20))) {\n    result = stab_push_defined_type(hash_table,*(long *)(entry_address + 0x20),*(undefined4 *)(entry_address + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "write_symbol_to_hash_table_0010e6a8",
                "param_1": "hash_table",
                "param_2": "symbol",
                "__s": "type",
                "sVar3": "symbol_len",
                "sVar4": "type_len",
                "__s_00": "new_symbol",
                "lVar5": "hash_lookup_result",
                "lVar8": "symbol_count",
                "uVar1": "write_result",
                "uVar2": "symbol_type",
                "uVar6": "error_msg",
                "uVar7": "error_str",
                "uVar9": "return_value",
                "auVar10": "result"
            },
            "code": "\nundefined  [16] write_symbol_to_hash_table_0010e6a8(long hash_table,char *symbol,undefined8 param_3,undefined8 param_4)\n\n{\n  uint write_result;\n  undefined4 symbol_type;\n  char *type;\n  size_t symbol_len;\n  size_t type_len;\n  char *new_symbol;\n  long hash_lookup_result;\n  undefined8 error_msg;\n  undefined8 error_str;\n  long symbol_count;\n  ulong return_value;\n  undefined result [16];\n  \n  symbol_count = *(long *)(*(long *)(hash_table + 0x60) + 0x10);\n  symbol_type = *(undefined4 *)(*(long *)(hash_table + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  symbol_len = strlen(symbol);\n  type_len = strlen(type);\n  new_symbol = (char *)xmalloc(symbol_len + 0x14 + type_len);\n  if (symbol_count < 1) {\n    symbol_count = *(long *)(hash_table + 0x68);\n    *(long *)(hash_table + 0x68) = symbol_count + 1;\n    sprintf(new_symbol,\"%s:t%ld=%s\",symbol,symbol_count,type);\n  }\n  else {\n    sprintf(new_symbol,\"%s:t%s\",symbol,type);\n  }\n  free(type);\n  write_result = stab_write_symbol_lto_priv_0(hash_table,0x80,0,0,new_symbol);\n  return_value = (ulong)write_result;\n  if ((char)write_result != '\\0') {\n    free(new_symbol);\n    hash_lookup_result = bfd_hash_lookup(hash_table + 0x1b8,symbol,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = symbol_count;\n      *(undefined4 *)(hash_lookup_result + 0x28) = symbol_type;\n      goto LAB_0010e7b3;\n    }\n    symbol_type = bfd_get_error();\n    error_msg = bfd_errmsg(symbol_type);\n    error_str = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(error_str,error_msg);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  result._8_8_ = param_4;\n  result._0_8_ = return_value;\n  return result;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "stab_write_symbol.lto_priv.0",
                "non_fatal",
                "dcgettext",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_hash_table_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "symbol_to_string_0010e7c2",
                "param_1": "symbol",
                "param_2": "type",
                "param_4": "result",
                "__s": "symbol_string",
                "sVar1": "type_length",
                "sVar2": "symbol_length",
                "__s_00": "new_symbol_string",
                "auVar3": "result_object"
            },
            "code": "\nundefined  [16] symbol_to_string_0010e7c2(undefined8 symbol,char *type,undefined8 param_3,undefined8 result)\n\n{\n  char *symbol_string;\n  size_t type_length;\n  size_t symbol_length;\n  char *new_symbol_string;\n  undefined result_object [16];\n  \n  symbol_string = (char *)stab_pop_type();\n  type_length = strlen(type);\n  symbol_length = strlen(symbol_string);\n  new_symbol_string = (char *)xmalloc(type_length + 3 + symbol_length);\n  sprintf(new_symbol_string,\"%s:T%s\",type,symbol_string);\n  free(symbol_string);\n  result_object._0_4_ = stab_write_symbol_lto_priv_0(symbol,0x80,0,0,new_symbol_string);\n  result_object._4_4_ = 0;\n  if ((char)result_object._0_4_ != '\\0') {\n    free(new_symbol_string);\n  }\n  result_object._8_8_ = result;\n  return result_object;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "symbol_to_string_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "process_data_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data",
                "param_10": "value1",
                "param_11": "value2",
                "param_12": "value3",
                "param_13": "value4",
                "param_14": "value5",
                "in_AL": "isTrue",
                "local_d8": "length",
                "local_d4": "size",
                "local_d0": "pointer",
                "local_c8": "buffer",
                "local_b8": "tempBuffer",
                "local_b0": "inputValue1",
                "local_a8": "inputValue2",
                "local_a0": "inputValue3",
                "local_98": "inputValue4",
                "local_90": "inputValue5",
                "local_88": "data1",
                "local_78": "data2",
                "local_68": "data3",
                "local_58": "data4",
                "local_48": "data5",
                "local_38": "data6",
                "local_28": "data7",
                "local_18": "data8"
            },
            "code": "\nvoid processData_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 value1,undefined8 value2,undefined8 value3,\n                 undefined8 value4,undefined8 value5)\n\n{\n  char isTrue;\n  undefined4 length;\n  undefined4 size;\n  undefined *pointer;\n  undefined *buffer;\n  undefined tempBuffer [8];\n  undefined8 inputValue1;\n  undefined8 inputValue2;\n  undefined8 inputValue3;\n  undefined8 inputValue4;\n  undefined8 inputValue5;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  undefined4 data5;\n  undefined4 data6;\n  undefined4 data7;\n  undefined4 data8;\n  \n  if (isTrue != '\\0') {\n    data1 = input1;\n    data2 = input2;\n    data3 = input3;\n    data4 = input4;\n    data5 = input5;\n    data6 = input6;\n    data7 = input7;\n    data8 = input8;\n  }\n  pointer = &stack0x00000008;\n  length = 8;\n  buffer = tempBuffer;\n  size = 0x30;\n  inputValue1 = value1;\n  inputValue2 = value2;\n  inputValue3 = value3;\n  inputValue4 = value4;\n  inputValue5 = value5;\n  report(data,&length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "init_section_add.cold",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "copy_section.cold",
                "main",
                "parse_vma.cold",
                "parse_flags.cold",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "create_new_symbol.cold",
                "copy_file",
                "FUN_00114dc7",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "process_data_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_object",
                "copy_file",
                "FUN_00107880",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "error_code",
                "unaff_RBP": "bfd_ptrs",
                "unaff_retaddr": "return_address",
                "iVar1": "bfd_error_code"
            },
            "code": "\nundefined8 handle_bfd_error_001083b7(long error_code)\n\n{\n  int bfd_error_code;\n  undefined8 *bfd_ptrs;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error_code = bfd_get_error();\n    if (bfd_error_code == 5) {\n      return return_address;\n    }\n  }\n  bfd_nonfatal(*bfd_ptrs);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_RCX": "data",
                "in_R10": "index",
                "in_R11": "specialFlag",
                "param_7": "paramFlag",
                "param_9": "paramValue",
                "param_10": "result",
                "param_11": "dataArray",
                "param_12": "output",
                "param_13": "contextData",
                "param_14": "arraySize",
                "sVar1": "referenceSize",
                "pcVar2": "functionPtr",
                "iVar3": "cmpResult",
                "uVar4": "counter",
                "uVar5": "minSize",
                "uVar6": "minRefSize",
                "lVar7": "length"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t referenceSize;\n  code *functionPtr;\n  int cmpResult;\n  uint counter;\n  undefined *__ptr;\n  size_t *data;\n  ulong minSize;\n  ulong minRefSize;\n  long length;\n  ulong uVar8;\n  size_t unaff_RBX;\n  size_t *unaff_RBP;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong index;\n  undefined *puVar12;\n  size_t specialFlag;\n  size_t *unaff_R13;\n  size_t *unaff_R14;\n  size_t unaff_R15;\n  size_t *preferenceSize3;\n  byte bVar14;\n  size_t paramFlag;\n  size_t paramValue;\n  ulong result;\n  size_t *dataArray;\n  undefined *output;\n  long contextData;\n  size_t arraySize;\n  \n  bVar14 = 0;\ncode_r0x00116852:\n  counter = (int)index + 1;\n  if (0x10 < (int)index) goto LAB_001167f5;\nLAB_00116863:\n  unaff_R14 = unaff_R14 + -9;\n  do {\n    if (unaff_R13 <= unaff_R14) {\n      referenceSize = unaff_R14[2];\n      if (referenceSize == 0) goto LAB_00116863;\n      uVar8 = (ulong)counter;\n      if ((*unaff_R14 == *unaff_RBP) &&\n         (cmpResult = memcmp((void *)unaff_R14[3],(void *)unaff_RBP[3],*unaff_RBP), cmpResult == 0)) {\n        minRefSize = unaff_R14[7];\n        minSize = unaff_R14[8];\n        index = uVar8 & 0xffffffff;\n        if (unaff_R15 == minRefSize) {\n          if (unaff_RBX != minSize) goto LAB_001167a6;\n          unaff_RBP[2] = 0;\n        }\n        else {\n          if (unaff_R15 < minRefSize) {\n            if (minSize < unaff_R15) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < minSize) || (unaff_R15 <= (minSize + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_RBX < unaff_R15) {\n              if ((0xfffffffffffffff0 < unaff_RBX) ||\n                 (minRefSize <= (unaff_RBX + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_RBX == minSize) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_RBX <= minSize) {\n              unaff_RBP[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (minSize < unaff_R15) goto LAB_0010852c;\n          }\n          if ((specialFlag == 0x101) != (referenceSize == 0x101)) goto code_r0x00116852;\n          if (minSize <= unaff_RBX) {\n            minSize = unaff_RBX;\n          }\n          if (minRefSize < unaff_R15) {\n            unaff_R15 = minRefSize;\n          }\n          unaff_R14[8] = minSize;\n          unaff_R14[7] = unaff_R15;\n          unaff_RBP[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        unaff_R14 = unaff_RBP;\n        unaff_RBP = unaff_R14 + 9;\n        if (data <= unaff_RBP) {\n          qsort(dataArray,arraySize,0x48,sort_gnu_build_notes);\n          __ptr = (undefined *)xmalloc(result * 2);\n          paramFlag = 0;\n          puVar12 = __ptr;\n          for (preferenceSize3 = dataArray; preferenceSize3 < data; preferenceSize3 = preferenceSize3 + 9) {\n            if (preferenceSize3[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              functionPtr = *(code **)(*(long *)(contextData + 8) + 0x50);\n              if ((preferenceSize3[7] == paramValue) && (preferenceSize3[8] == paramFlag)) {\n                (*functionPtr)(*preferenceSize3,puVar12);\n                (**(code **)(*(long *)(contextData + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(contextData + 8) + 0x50))(preferenceSize3[2],puVar12 + 8);\n                minRefSize = preferenceSize3[6];\n                uVar8 = *preferenceSize3;\n                puVar12 = (undefined *)preferenceSize3[3];\n                puVar11 = puVar9;\n                for (minSize = uVar8; minSize != 0; minSize = minSize - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n                  puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                }\n                if (uVar8 < minRefSize) {\n                  for (length = minRefSize - uVar8; length != 0; length = length + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + minRefSize;\n              }\n              else {\n                (*functionPtr)();\n                if (*(int *)(*(long *)(contextData + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(contextData + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(contextData + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(contextData + 8) + 0x50))(preferenceSize3[2],puVar12 + 8);\n                uVar8 = *preferenceSize3;\n                puVar12 = (undefined *)preferenceSize3[3];\n                puVar11 = puVar9;\n                for (minRefSize = uVar8; minRefSize != 0; minRefSize = minRefSize - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n                  puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                }\n                minRefSize = preferenceSize3[6];\n                if (uVar8 < minRefSize) {\n                  for (length = minRefSize - uVar8; length != 0; length = length + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                  }\n                }\n                length = *(long *)(contextData + 8);\n                puVar9 = puVar9 + minRefSize;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(length + 8) == 5) &&\n                   (*(char *)(*(long *)(contextData + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(length + 0x38))(preferenceSize3[7],puVar9);\n                  (**(code **)(*(long *)(contextData + 8) + 0x38))(preferenceSize3[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(length + 0x50))(preferenceSize3[7],puVar9);\n                  (**(code **)(*(long *)(contextData + 8) + 0x50))(preferenceSize3[8],puVar9 + 4);\n                }\n                paramValue = preferenceSize3[7];\n                paramFlag = preferenceSize3[8];\n              }\n            }\n          }\n          minRefSize = (long)puVar12 - (long)__ptr;\n          uVar8 = minRefSize;\n          puVar12 = __ptr;\n          if (minRefSize < result) {\n            for (; result = minRefSize, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *output = *puVar12;\n              puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n              output = output + (ulong)bVar14 * -2 + 1;\n            }\n          }\n          free(__ptr);\n          free(dataArray);\n          return result;\n        }\n        specialFlag = unaff_R14[0xb];\n      } while (specialFlag == 0);\n      unaff_R15 = unaff_R14[0x10];\n      unaff_RBX = unaff_R14[0x11];\n      counter = 0;\n      if (unaff_R15 != unaff_RBX) break;\n      unaff_R14[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "memcmp",
                "FUN_00116852",
                "qsort",
                "free",
                "sort_gnu_build_notes",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_pointer_00113d3a",
                "param_1": "inputPointer",
                "lVar1": "outputPointer"
            },
            "code": "\nlong initializeOrGetPointer_00113d3a(long inputPointer)\n\n{\n  long outputPointer;\n  \n  if (inputPointer != 0) {\n    outputPointer = *(long *)(inputPointer + 8);\n    if (outputPointer == 0) {\n      outputPointer = debug_make_type_constprop_0(0xc,0);\n      if (outputPointer == 0) {\n        outputPointer = 0;\n      }\n      else {\n        *(long *)(outputPointer + 0x10) = inputPointer;\n        *(long *)(inputPointer + 8) = outputPointer;\n      }\n    }\n    return outputPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_or_get_pointer_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "display_info.isra.0.cold",
                "main",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "main",
                "section_add_load_file",
                "FUN_00107880",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_type_0010a0d3",
                "param_1": "arg",
                "stab_modify_type": "updateType"
            },
            "code": "\nvoid modifyType_0010a0d3(long arg)\n\n{\n  updateType(arg,0x42,*(undefined4 *)(*(long *)(arg + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_1": "input_param",
                "param_2": "section_ptr",
                "param_3": "output_param",
                "lVar1": "temp_var1",
                "pcVar2": "temp_var2",
                "ppcVar3": "temp_var3",
                "cVar4": "temp_char",
                "iVar5": "temp_var5",
                "uVar6": "temp_var6",
                "sVar7": "temp_var7",
                "sVar8": "temp_var8",
                "lVar9": "temp_var9",
                "pcVar10": "temp_var10",
                "pcVar11": "temp_var11",
                "pcVar12": "temp_var12",
                "uVar13": "temp_var13",
                "bVar14": "temp_var14",
                "local_40": "temp_array1",
                "local_48": "temp_array2",
                "local_50": "temp_var15"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid create_output_section_00115530(long input_param,char **section_ptr,long output_param)\n\n{\n  long temp_var1;\n  char *temp_var2;\n  char **temp_var3;\n  char temp_char;\n  int temp_var5;\n  uint temp_var6;\n  size_t temp_var7;\n  size_t temp_var8;\n  long temp_var9;\n  char *temp_var10;\n  char *temp_var11;\n  char *temp_var12;\n  uint temp_var13;\n  bool temp_var14;\n  long temp_var15;\n  char *temp_array2;\n  long temp_array1 [2];\n  \n  temp_char = is_strip_section_isra_0(section_ptr);\n  if (temp_char != '\\0') {\n    return;\n  }\n  temp_var10 = *section_ptr;\n  temp_var13 = *(uint *)((long)section_ptr + 0x24);\n  temp_array2 = temp_var10;\n  temp_var3 = section_rename_list;\n  if (*(int *)(*(long *)(input_param + 8) + 8) != *(int *)(*(long *)(output_param + 8) + 8)) {\n    temp_var13 = temp_var13 & *(uint *)(*(long *)(input_param + 8) + 0x18) &\n             *(uint *)(*(long *)(output_param + 8) + 0x18);\n  }\n  for (; temp_var3 != (char **)0x0; temp_var3 = (char **)temp_var3[3]) {\n    temp_var5 = strcmp(*temp_var3,temp_var10);\n    if (temp_var5 == 0) {\n      if (*(uint *)(temp_var3 + 2) != 0xffffffff) {\n        temp_var13 = *(uint *)(temp_var3 + 2);\n      }\n      if (temp_var10 != temp_var3[1]) {\n        temp_array2 = temp_var3[1];\n        temp_var13 = check_new_section_flags(temp_var13,output_param);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (temp_var10 = prefix_alloc_sections_string, (*(byte *)((long)section_ptr + 0x24) & 1) != 0)) ||\n     (temp_var10 = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    temp_var7 = strlen(temp_var10);\n    temp_var8 = strlen(temp_array2);\n    temp_var12 = (char *)xmalloc(temp_var7 + 1 + temp_var8);\n    temp_var10 = strcpy(temp_var12,temp_var10);\n    temp_array2 = strcat(temp_var10,temp_array2);\n  }\n  temp_var9 = find_section_list(*section_ptr,0,0x80);\n  temp_var14 = false;\n  if (temp_var9 == 0) {\n    if ((strip_symbols == 4) && ((temp_var13 & 0x2000001) != 0)) {\n      temp_var5 = *(int *)(*(long *)(input_param + 8) + 8);\n      if (temp_var5 == 5) {\n        if (*(int *)(section_ptr[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(output_param + 8) + 8) == 5) {\n            temp_var14 = (temp_var13 & 0x2000000) == 0;\n            temp_var6 = ~((-(uint)((temp_var13 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)section_ptr + 0x24) = *(uint *)((long)section_ptr + 0x24) & temp_var6;\n          }\n          else {\n            temp_var6 = 0xfdfffefd;\n          }\n          temp_var13 = temp_var13 & temp_var6;\n        }\n      }\n      else if ((temp_var5 != 2) || (temp_var5 = strcmp(*section_ptr,\".buildid\"), temp_var5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    temp_var13 = check_new_section_flags(temp_var13 & 0x104 | *(uint *)(temp_var9 + 0x28),output_param,*section_ptr);\n  }\n  temp_char = bfd_convert_section_setup(input_param,section_ptr,output_param,&temp_array2,temp_array1);\n  if (temp_char == '\\0') {\n    temp_var10 = (char *)0x0;\n    temp_var15 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  temp_var10 = (char *)bfd_make_section_anyway_with_flags(output_param,temp_array2,temp_var13);\n  if (temp_var10 == (char *)0x0) {\n    temp_var15 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      temp_array1[0] = 0;\n      goto LAB_001158e7;\n    }\n    temp_char = bfd_set_section_size(temp_var10,temp_array1[0]);\n    if (temp_char == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    temp_array1[0] = ((((long)interleave - 1U) + temp_array1[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    temp_char = bfd_set_section_size(temp_var10);\n    if (temp_char == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  temp_var15 = 0;\n  temp_var12 = section_ptr[6];\n  temp_var9 = find_section_list(*section_ptr,0,0x18);\n  if (temp_var9 == 0) {\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var11 = *section_ptr;\n    temp_var12 = temp_var12 + change_section_address;\n    *(char **)(temp_var10 + 0x30) = temp_var12;\n    *(char **)(temp_var10 + 0x38) = temp_var12;\n    temp_var12 = section_ptr[7];\n    temp_var9 = find_section_list(temp_var11,0,0x60);\n    if (temp_var9 == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_var11 = *(char **)(temp_var9 + 0x20);\n    if ((*(byte *)(temp_var9 + 0x14) & 0x40) != 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var9 = find_section_list(*section_ptr,0,0x200);\n    if (temp_var9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp_var13 = *(uint *)((long)section_ptr + 0x7c);\n    if (temp_var13 < 0x3f) goto LAB_001156c4;\n    temp_var15 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)section_ptr + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(section_ptr + 5) & 0x30;\n    section_ptr[0xc] = temp_var10;\n    section_ptr[0xb] = (char *)0x0;\n    if ((*(byte *)((long)section_ptr + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    temp_char = (**(code **)(*(long *)(output_param + 8) + 0x158))(input_param,section_ptr,output_param,temp_var10);\n    if (temp_char == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    temp_var11 = *(char **)(temp_var9 + 0x18);\n    if ((*(byte *)(temp_var9 + 0x14) & 8) == 0) {\n      temp_var11 = temp_var11 + (long)temp_var12;\n    }\n    temp_var10[0x28] = temp_var10[0x28] | 1;\n    temp_var2 = *section_ptr;\n    *(char **)(temp_var10 + 0x30) = temp_var11;\n    *(char **)(temp_var10 + 0x38) = temp_var11;\n    temp_var12 = section_ptr[7];\n    temp_var9 = find_section_list(temp_var2,0,0x60);\n    if (temp_var9 != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_var11 = *section_ptr;\n    *(char **)(temp_var10 + 0x38) = temp_var12 + change_section_address;\n    temp_var9 = find_section_list(temp_var11,0,0x200);\n    if (temp_var9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp_var13 = *(uint *)(temp_var9 + 0x2c);\n    if (0x3e < temp_var13) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(temp_var10 + 0x7c) = temp_var13;\n    *(undefined4 *)(temp_var10 + 0xb4) = *(undefined4 *)((long)section_ptr + 0xb4);\n    temp_var10[0x28] = temp_var10[0x28] & 0xcfU | *(byte *)(section_ptr + 5) & 0x30;\n    section_ptr[0xc] = temp_var10;\n    section_ptr[0xb] = (char *)0x0;\n    if ((*(byte *)((long)section_ptr + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_var12 = section_ptr[0x1a];\n    temp_var9 = group_signature_isra_0(temp_var12,section_ptr[0x1c]);\n    if ((temp_var9 == 0) ||\n       (temp_var1 = *(long *)(input_param + 8), *(uint *)(temp_var9 + 0x18) = *(uint *)(temp_var9 + 0x18) | 0x20,\n       *(int *)(temp_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_var12 + 0xb0) = temp_var9;\n    temp_char = (**(code **)(*(long *)(output_param + 8) + 0x158))(input_param,section_ptr,output_param,temp_var10);\n    if (temp_char == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (temp_var14) {\n    *(undefined4 *)(*(long *)(temp_var10 + 0xd0) + 4) = 8;\n  }\n  if (temp_var15 == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,output_param,temp_var10,temp_var15);\n  return;\n}\n\n",
            "called": [
                "check_new_section_flags",
                "is_strip_section.isra.0",
                "find_section_list",
                "setup_section.cold",
                "strcpy",
                "strcat",
                "strlen",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_convert_section_setup",
                "bfd_make_section_anyway_with_flags",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_type_0010a0bd",
                "param_1": "input",
                "stab_modify_type": "modifyStabType"
            },
            "code": "\nvoid modifyType_0010a0bd(long input)\n\n{\n  modifyStabType(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "extract_and_demangle_type_00113e5e",
                "cVar1": "result",
                "local_20[0]": "original_string"
            },
            "code": "\nundefined8 extract_and_demangle_type_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char result;\n  char *local_20 [2];\n  \n  original_string = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)original_string < 5) ||\n      (result = startswith_lto_priv_0_lto_priv_0(original_string,\"type\"), result == '\\0')) ||\n     ((original_string[4] != '$' && (original_string[4] != '.')))) {\n    if (*original_string != '_') {\n      return 1;\n    }\n    if (original_string[1] != '_') {\n      return 1;\n    }\n    if (original_string[2] != 'o') {\n      return 1;\n    }\n    if (original_string[3] != 'p') {\n      return 1;\n    }\n    original_string = original_string + 4;\n  }\n  else {\n    original_string = original_string + 5;\n  }\n  result = stab_demangle_type_lto_priv_0(param_1,local_20,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_and_demangle_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "create_new_symbol",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_input_0010abdd",
                "param_1": "inputData",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "dataPointer",
                "pcVar2": "str1",
                "bVar3": "tempFlag",
                "pcVar4": "str2",
                "__s": "str3",
                "sVar5": "str1Length",
                "sVar6": "str2Length",
                "sVar7": "string1Length",
                "sVar8": "str3Length",
                "uVar9": "result",
                "cVar10": "character1",
                "cVar11": "character2",
                "local_52": "localFlag"
            },
            "code": "\nundefined8\nprocessInput_0010abdd(long inputData,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long dataPointer;\n  char *str1;\n  byte tempFlag;\n  char *str2;\n  char *str3;\n  size_t str1Length;\n  size_t str2Length;\n  size_t string1Length;\n  size_t str3Length;\n  undefined8 result;\n  char character1;\n  char character2;\n  byte localFlag;\n  \n  str3 = (char *)0x0;\n  localFlag = *(byte *)(*(long *)(inputData + 0x60) + 0x1c);\n  str2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    tempFlag = 1;\n    if (localFlag == 0) {\n      tempFlag = *(byte *)(*(long *)(inputData + 0x60) + 0x1c);\n    }\n    localFlag = tempFlag & 1;\n    str3 = (char *)stab_pop_type(inputData);\n  }\n  dataPointer = *(long *)(inputData + 0x60);\n  if ((dataPointer == 0) || (str1 = *(char **)(dataPointer + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      character2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      character2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    character1 = '?';\n    if (flag1 == '\\0') {\n      character1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    str1Length = strlen(str1);\n    str2Length = strlen(str2);\n    string1Length = strlen(string1);\n    str3Length = 0;\n    if (flag4 != '\\0') {\n      str3Length = strlen(str3);\n    }\n    result = xrealloc(str1,string1Length + str1Length + 0x28 + str2Length + str3Length);\n    *(undefined8 *)(dataPointer + 0x30) = result;\n    str1 = *(char **)(*(long *)(inputData + 0x60) + 0x30);\n    str1Length = strlen(str1);\n    sprintf(str1 + str1Length,\"%s:%s;%c%c%c\",str2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)character2,(ulong)(uint)(int)character1,str1Length);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(inputData + 0x60) + 0x30);\n      str1Length = strlen(str2);\n      sprintf(str2 + str1Length,\"%ld;%s;\",value,str3);\n      free(str3);\n    }\n    if (localFlag != 0) {\n      *(undefined *)(*(long *)(inputData + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_input_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_flag_if_not_coff_00115f30",
                "param_1": "flag",
                "param_2": "params",
                "param_3": "outputFormat",
                "uVar1": "var1",
                "uVar2": "var2"
            },
            "code": "\nuint dropFlagIfNotCOFF_00115f30(uint flag,undefined8 *params,undefined8 outputFormat)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  \n  if (((flag & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    var1 = *params;\n    flag = flag & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(var2,var1,outputFormat);\n  }\n  return flag;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "setup_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "arrayPointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *arrayPointer;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    arrayPointer = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*arrayPointer;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*arrayPointer)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "debug_get_real_type.isra.0",
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "toggle_dwo_section_constprop_001082b3",
                "uVar1": "is_constprop_section",
                "is_dwo_section_constprop_0": "check_constprop_section"
            },
            "code": "\nuint toggle_dwo_section_constprop_001082b3(void)\n\n{\n  uint is_constprop_section;\n  \n  is_constprop_section = check_constprop_section();\n  return is_constprop_section ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "toggle_dwo_section_constprop_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_archive_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "statStruct",
                "param_5": "bfdType",
                "param_6": "bfdFlags",
                "param_7": "copyFlags",
                "bVar1": "byteVar1",
                "cVar2": "charVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "iVar5": "intVar5",
                "ppcVar6": "pointerToCharPointer6",
                "pvVar7": "pointerToVoid7",
                "lVar8": "longVar8",
                "puVar9": "pointerToUndefined9",
                "piVar10": "pointerToInt10",
                "uVar11": "undefinedVar11",
                "uVar12": "undefinedVar12",
                "lVar13": "fileSize",
                "puVar14": "pointerToUndefined14",
                "ppcVar16": "pointerToCharPointer16",
                "pcVar17": "pointerToChar17",
                "pcVar18": "pointerToChar18",
                "__ptr": "pointerToUndefinedPtr",
                "ppcVar19": "pointerToCharPointer19",
                "pcVar20": "functionPtr20",
                "lVar21": "longVar21",
                "uVar22": "uintVar22",
                "pcVar23": "pointerToChar23",
                "psVar24": "pointerToStat24",
                "bVar25": "boolVar25",
                "bVar26": "byteVar26",
                "local_1a0": "localVar1a0",
                "local_198": "localVar198",
                "local_158": "localStatStruct158",
                "local_c8": "localVoidPtrArrayC8",
                "uStack_b0": "uStackB0",
                "lStack_98": "lStack98",
                "deterministic": "deterministicFlag",
                "do_debug_sections": "debugSectionsFlag",
                "do_elf_stt_common": "elfSttCommonFlag",
                "gnu_debuglink_filename": "gnuDebuglinkFilename",
                "strip_symbols": "stripSymbols",
                "preserve_dates": "preserveDates"
            },
            "code": "\nvoid copyArchive_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 statStruct,\n                 undefined8 bfdType,long bfdFlags,undefined8 copyFlags)\n\n{\n  byte byteVar1;\n  char charVar2;\n  char charVar3;\n  int intVar4;\n  int intVar5;\n  char **pointerToCharPointer6;\n  void *pointerToVoid7;\n  long longVar8;\n  undefined8 *pointerToUndefined9;\n  int *pointerToInt10;\n  undefined8 undefinedVar11;\n  undefined8 undefinedVar12;\n  long fileSize;\n  undefined8 *pointerToUndefined14;\n  char *pcVar15;\n  char **pointerToCharPointer16;\n  char *pointerToChar17;\n  char *pointerToChar18;\n  undefined8 *pointerToUndefinedPtr;\n  char **pointerToCharPointer19;\n  code *functionPtr20;\n  long longVar21;\n  uint uintVar22;\n  char *pointerToChar23;\n  stat *pointerToStat24;\n  bool boolVar25;\n  byte byteVar26;\n  undefined8 *localVar1a0;\n  long *localVar198;\n  stat localStatStruct158;\n  void *localVoidPtrArrayC8 [3];\n  uint uStackB0;\n  long lStack98;\n  \n  byteVar26 = 0;\n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    if (fileSize == 0) {\n      undefinedVar12 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(undefinedVar12,inputFile);\n    }\n    status = 1;\n    return;\n  }\n  pointerToUndefined14 = (undefined8 *)bfd_openr(inputFile,bfdType);\n  if ((pointerToUndefined14 == (undefined8 *)0x0) || (intVar5 = bfd_stat(pointerToUndefined14,statStruct), intVar5 != 0)) {\n    bfd_nonfatal_message(inputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  switch(debugSectionsFlag) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerToUndefined14 + 0x44) = *(uint *)((long)pointerToUndefined14 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerToUndefined14 + 0x44) = *(uint *)((long)pointerToUndefined14 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerToUndefined14 + 0x44) = *(uint *)((long)pointerToUndefined14 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerToUndefined14 + 0x44) = *(uint *)((long)pointerToUndefined14 + 0x44) | 0x8000;\n  }\n  if (elfSttCommonFlag == 1) {\n    *(uint *)((long)pointerToUndefined14 + 0x44) = *(uint *)((long)pointerToUndefined14 + 0x44) | 0xc0000;\n  }\n  else if (elfSttCommonFlag == 2) {\n    *(uint *)((long)pointerToUndefined14 + 0x44) = *(uint *)((long)pointerToUndefined14 + 0x44) | 0x40000;\n  }\n  charVar2 = bfd_check_format(pointerToUndefined14,2);\n  if (charVar2 != '\\0') {\n    if (bfdFlags == 0) {\n      charVar2 = '\\0';\n      bfdFlags = *(long *)pointerToUndefined14[1];\n    }\n    if (fileDescriptor < 0) {\n      localVar1a0 = (undefined8 *)bfd_openw(outputFile,bfdFlags);\n    }\n    else {\n      localVar1a0 = (undefined8 *)bfd_fdopenw(outputFile,bfdFlags,fileDescriptor);\n    }\n    if (localVar1a0 != (undefined8 *)0x0) {\n      if (gnuDebuglinkFilename != 0) {\n        undefinedVar12 = *pointerToUndefined14;\n        undefinedVar11 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(undefinedVar11,undefinedVar12);\n        gnuDebuglinkFilename = 0;\n      }\n      set_long_section_mode(localVar1a0,pointerToUndefined14,long_section_names);\n      localVar198 = localVar1a0 + 0x1f;\n      if ((*(byte *)((long)pointerToUndefined14 + 0x49) & 0x10) != 0) {\n        status = 1;\n        bfd_set_error(5);\n        undefinedVar12 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,pointerToUndefined14,0,undefinedVar12);\n        return;\n      }\n      pcVar15 = (char *)make_tempdir(*localVar1a0);\n      if (pcVar15 == (char *)0x0) {\n        pointerToInt10 = __errno_location();\n        pcVar15 = strerror(*pointerToInt10);\n        undefinedVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(undefinedVar12,pcVar15);\n      }\n      if (stripSymbols == 7) {\n        byteVar1 = *(byte *)((long)pointerToUndefined14 + 0x49);\n        uintVar22 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerToUndefined14 + 0x49);\n        uintVar22 = byteVar1 >> 3 & 1;\n      }\n      boolVar25 = deterministicFlag != 0;\n      *(byte *)((long)localVar1a0 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar22 << 3) | *(byte *)((long)localVar1a0 + 0x49) & 0xe7;\n      if (boolVar25) {\n        *(uint *)((long)localVar1a0 + 0x44) = *(uint *)((long)localVar1a0 + 0x44) | 0x2000;\n      }\n      pointerToUndefinedPtr = (undefined8 *)0x0;\n      pointerToCharPointer16 = (char **)bfd_openr_next_archived_file(pointerToUndefined14,0);\n      charVar3 = bfd_set_format(localVar1a0,*(byte *)(pointerToUndefined14 + 9) & 7);\n      if (charVar3 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(0,localVar1a0,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((status == 0 && (pointerToCharPointer16 != (char **)0x0))) {\n        pointerToChar18 = *pointerToCharPointer16;\n        pointerToChar17 = pointerToChar18;\n        if (*pointerToChar18 == '/') {\nLAB_0010527d:\n          undefinedVar12 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(undefinedVar12,pointerToChar18);\nLAB_00104e93:\n          status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointerToChar17 != '\\0') {\n          pointerToChar23 = pointerToChar17;\n          if ((*pointerToChar17 == '.') && (pointerToChar23 = pointerToChar17 + 1, pointerToChar17[1] == '.')) {\n            pointerToChar23 = pointerToChar17 + 2;\n            if ((pointerToChar17[2] == '\\0') || (pointerToChar17[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerToChar23 != '\\0' && (*pointerToChar23 != '/')); pointerToChar23 = pointerToChar23 + 1) {\n          }\n          pointerToChar17 = pointerToChar23;\n          if (*pointerToChar23 == '/') {\n            copy_archive_001052a2();\n            return;\n          }\n        }\n        pointerToChar18 = (char *)concat(pcVar15,&DAT_0011b47d);\n        intVar5 = stat(pointerToChar18,&localStatStruct158);\n        pointerToUndefined9 = pointerToUndefinedPtr;\n        if (-1 < intVar5) {\n          fileSize = make_tempdir(pointerToChar18);\n          free(pointerToChar18);\n          if (fileSize == 0) {\n            pointerToInt10 = __errno_location();\n            pointerToChar18 = strerror(*pointerToInt10);\n            undefinedVar12 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(undefinedVar12,pointerToChar18);\n            goto LAB_00104e93;\n          }\n          pointerToUndefined9 = (undefined8 *)xmalloc(0x18);\n          pointerToChar18 = *pointerToCharPointer16;\n          *pointerToUndefined9 = pointerToUndefinedPtr;\n          pointerToUndefined9[2] = 0;\n          pointerToUndefined9[1] = fileSize;\n          pointerToChar18 = (char *)concat(fileSize,&DAT_0011b47d,pointerToChar18);\n        }\n        intVar5 = 0;\n        if (preserveDates != '\\0') {\n          pointerToStat24 = &localStatStruct158;\n          for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n            *(undefined4 *)&pointerToStat24->st_dev = 0;\n            pointerToStat24 = (stat *)((long)pointerToStat24 + (ulong)byteVar26 * -8 + 4);\n          }\n          pointerToCharPointer19 = (char **)pointerToCharPointer16[0x1d];\n          if ((char **)pointerToCharPointer16[0x1d] == (char **)0x0) {\n            pointerToCharPointer19 = pointerToCharPointer16;\n          }\n          intVar5 = (**(code **)(pointerToCharPointer19[1] + 0x1e8))(pointerToCharPointer16,&localStatStruct158);\n          if (intVar5 != 0) {\n            pointerToChar17 = *pointerToCharPointer16;\n            undefinedVar12 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(undefinedVar12,pointerToChar17);\n          }\n        }\n        pointerToUndefinedPtr = (undefined8 *)xmalloc(0x18);\n        pointerToUndefinedPtr[1] = pointerToChar18;\n        *pointerToUndefinedPtr = pointerToUndefined9;\n        pointerToUndefinedPtr[2] = 0;\n        charVar3 = bfd_check_format(pointerToCharPointer16,1);\n        if (charVar3 == '\\0') {\n          undefinedVar12 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,pointerToCharPointer16,0,undefinedVar12);\n          pointerToCharPointer19 = (char **)bfd_openw(pointerToChar18,bfdFlags);\n          if (pointerToCharPointer19 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(pointerToChar18,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToCharPointer6 = (char **)pointerToCharPointer16[0x1d];\n          if ((char **)pointerToCharPointer16[0x1d] == (char **)0x0) {\n            pointerToCharPointer6 = pointerToCharPointer16;\n          }\n          intVar4 = (**(code **)(pointerToCharPointer6[1] + 0x1e8))(pointerToCharPointer16);\n          fileSize = lStack98;\n          if (intVar4 == 0) {\n            if (lStack98 < 0) {\n              bfd_get_archive_filename(pointerToCharPointer16);\n              undefinedVar12 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(undefinedVar12);\n            }\n            else {\n              intVar4 = bfd_seek(pointerToCharPointer16,0,0);\n              if (intVar4 == 0) {\n                if (verbose != '\\0') {\n                  pointerToChar17 = *pointerToCharPointer19;\n                  undefinedVar12 = bfd_get_archive_filename(pointerToCharPointer16);\n                  pointerToChar23 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerToChar23,undefinedVar12,pointerToChar17);\n                }\n                pointerToVoid7 = (void *)xmalloc(0x2000);\n                for (; fileSize != 0; fileSize = fileSize - longVar21) {\n                  longVar21 = 0x2000;\n                  if (fileSize < 0x2001) {\n                    longVar21 = fileSize;\n                  }\n                  longVar8 = bfd_bread(pointerToVoid7,longVar21,pointerToCharPointer16);\n                  pointerToCharPointer6 = pointerToCharPointer16;\n                  if ((longVar21 != longVar8) ||\n                     (longVar8 = bfd_bwrite(pointerToVoid7,longVar21,pointerToCharPointer19), pointerToCharPointer6 = pointerToCharPointer19,\n                     longVar21 != longVar8)) {\n                    bfd_nonfatal_message(0,pointerToCharPointer6,0,0);\n                    free(pointerToVoid7);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointerToCharPointer19,uStackB0 | 0x100);\n                free(pointerToVoid7);\n                charVar3 = bfd_close_all_done(pointerToCharPointer19);\n                if (charVar3 == '\\0') {\n                  bfd_nonfatal_message(pointerToChar18,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefinedVar12 = bfd_get_archive_filename(pointerToCharPointer16);\n              bfd_nonfatal(undefinedVar12);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,pointerToCharPointer16,0,0);\n          }\nLAB_00104f00:\n          charVar3 = bfd_close_all_done(pointerToCharPointer19);\n          if (charVar3 == '\\0') {\n            bfd_nonfatal_message(pointerToChar18,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointerToChar18);\n          status = 1;\n        }\n        else {\n          if (charVar2 == '\\0') {\n            pointerToCharPointer19 = (char **)bfd_openw(pointerToChar18,*(undefined8 *)pointerToCharPointer16[1]);\n          }\n          else {\n            pointerToCharPointer19 = (char **)bfd_openw(pointerToChar18,bfdFlags);\n          }\n          if (pointerToCharPointer19 == (char **)0x0) goto LAB_00104e80;\n          charVar3 = copy_object(pointerToCharPointer16,pointerToCharPointer19,copyFlags);\n          if (charVar3 == '\\0') {\n            intVar4 = bfd_get_arch(pointerToCharPointer16);\n            if (intVar4 == 0) goto LAB_00104d75;\n            charVar3 = bfd_close_all_done(pointerToCharPointer19);\n            if (charVar3 == '\\0') {\n              bfd_nonfatal_message(pointerToChar18,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar3 = bfd_close(pointerToCharPointer19);\n          if (charVar3 == '\\0') {\n            bfd_nonfatal_message(pointerToChar18,0,0,0);\n            status = 1;\n          }\nLAB_00114a86:\n          if ((preserveDates != '\\0') && (intVar5 == 0)) {\n            set_times(pointerToChar18,&localStatStruct158);\n          }\n          fileSize = bfd_openr(pointerToChar18,bfdFlags);\n          pointerToUndefinedPtr[2] = fileSize;\n          *localVar198 = fileSize;\n          localVar198 = (long *)(fileSize + 0xf0);\n          pointerToCharPointer19 = (char **)bfd_openr_next_archived_file(pointerToUndefined14);\n          bfd_close(pointerToCharPointer16);\n          pointerToCharPointer16 = pointerToCharPointer19;\n        }\n      }\n      *localVar198 = 0;\n      pointerToVoid7 = (void *)xstrdup(*localVar1a0);\n      if (status == 0) {\n        functionPtr20 = bfd_close;\n      }\n      else {\n        functionPtr20 = bfd_close_all_done;\n      }\n      charVar2 = (*functionPtr20)(localVar1a0);\n      if (charVar2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerToVoid7,0,0,0);\n      }\n      free(pointerToVoid7);\n      pointerToVoid7 = (void *)xstrdup(*pointerToUndefined14);\n      charVar2 = bfd_close(pointerToUndefined14);\n      if (charVar2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerToVoid7,0,0,0);\n      }\n      free(pointerToVoid7);\nLAB_00114b4b:\n      while (pointerToUndefinedPtr != (undefined8 *)0x0) {\n        if (pointerToUndefinedPtr[2] == 0) {\n          rmdir((char *)pointerToUndefinedPtr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)pointerToUndefinedPtr[1]);\n        }\n        free((void *)pointerToUndefinedPtr[1]);\n        pointerToUndefined14 = (undefined8 *)*pointerToUndefinedPtr;\n        free(pointerToUndefinedPtr);\n        pointerToUndefinedPtr = pointerToUndefined14;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfd_nonfatal_message(outputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  charVar2 = bfd_check_format_matches(pointerToUndefined14,1,localVoidPtrArrayC8);\n  if (charVar2 == '\\0') {\n    intVar5 = bfd_get_error();\n    charVar2 = bfd_check_format_matches(pointerToUndefined14,3,&localStatStruct158);\n    if (charVar2 == '\\0') {\n      intVar4 = bfd_get_error();\n      if (intVar5 != intVar4) {\n        bfd_set_error(intVar5);\n      }\n      bfd_nonfatal_message(inputFile,0,0,0);\n      if (intVar5 == 0xd) {\n        list_matching_formats(localVoidPtrArrayC8[0]);\n      }\n      if (intVar4 != 0xd) {\n        status = 1;\n        return;\n      }\n      list_matching_formats(localStatStruct158.st_dev);\n      status = 1;\n      return;\n    }\n    if (intVar5 == 0xd) {\n      free(localVoidPtrArrayC8[0]);\n    }\n  }\n  if (bfdFlags == 0) {\n    bfdFlags = *(long *)pointerToUndefined14[1];\n  }\n  if (fileDescriptor < 0) {\n    fileSize = bfd_openw(outputFile,bfdFlags);\n  }\n  else {\n    fileSize = bfd_fdopenw(outputFile,bfdFlags,fileDescriptor);\n  }\n  if (fileSize == 0) goto LAB_00105231;\n  set_long_section_mode(fileSize,pointerToUndefined14,long_section_names);\n  charVar2 = copy_object(pointerToUndefined14,fileSize,copyFlags);\n  if (charVar2 == '\\0') {\n    status = 1;\n  }\n  else if (status == 0) {\n    charVar2 = bfd_close(fileSize);\n    goto LAB_001147d5;\n  }\n  charVar2 = bfd_close_all_done(fileSize);\nLAB_001147d5:\n  if (charVar2 != '\\x01') {\n    status = 1;\n    bfd_nonfatal_message(outputFile,0,0,0);\n    return;\n  }\n  charVar2 = bfd_close(pointerToUndefined14);\n  if (charVar2 == '\\0') {\n    status = 1;\n    bfd_nonfatal_message(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_set_error",
                "bfd_check_format_matches",
                "strerror",
                "list_matching_formats",
                "bfd_openr",
                "close",
                "bfd_stat",
                "fatal",
                "dcgettext",
                "get_file_size",
                "bfd_nonfatal_message",
                "bfd_close_all_done",
                "copy_file.cold",
                "non_fatal",
                "bfd_set_format",
                "free",
                "bfd_get_error",
                "copy_object",
                "bfd_fdopenw",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "__errno_location",
                "set_long_section_mode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_stab_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "isFlagSet",
                "plVar1": "ptrToValue",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "tempVar1",
                "lVar5": "tempVar2",
                "local_8c": "localStringBuffer",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processStabIntType_0010b800(long baseAddress,int size,char isFlagSet)\n\n{\n  long *ptrToValue;\n  undefined8 result;\n  size_t stringLength;\n  long tempVar1;\n  long tempVar2;\n  undefined2 localStringBuffer;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    tempVar1 = baseAddress + 0xb8;\n    if (isFlagSet != '\\0') {\n      tempVar1 = baseAddress + 0x78;\n    }\n    ptrToValue = (long *)(tempVar1 + (ulong)(size - 1U) * 8);\n    tempVar1 = *ptrToValue;\n    if (tempVar1 != 0) {\n      result = stab_push_defined_type(baseAddress,tempVar1,size);\n      return result;\n    }\n    tempVar1 = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = tempVar1 + 1;\n    *ptrToValue = tempVar1;\n    sprintf((char *)&localStringBuffer,\"%ld=r%ld;\",tempVar1,tempVar1);\n    if (isFlagSet == '\\0') {\n      tempVar2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&localStringBuffer);\n      sprintf((char *)((long)&localStringBuffer + stringLength),\"%ld;%ld;\",-tempVar2,tempVar2 + -1);\n    }\n    else {\n      stringLength = strlen((char *)&localStringBuffer);\n      *(undefined2 *)((long)&localStringBuffer + stringLength) = 0x3b30;\n      *(undefined *)((long)&localStringBuffer + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&localStringBuffer + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&localStringBuffer + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(baseAddress,&localStringBuffer,tempVar1,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_float_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "size",
                "param_4": "dataList",
                "param_5": "sizeList",
                "uVar1": "maxSize",
                "uVar2": "tempSize",
                "cVar3": "check",
                "pcVar4": "str",
                "sVar5": "strLen",
                "__s": "newStr",
                "lVar6": "counter",
                "__ptr": "popTypeResult",
                "uVar7": "result",
                "uVar8": "flag",
                "lVar9": "loopCounter",
                "uVar10": "currentSize",
                "puVar11": "bytePtr",
                "bVar12": "byteVal"
            },
            "code": "\nundefined8 processData_00109ed3(long input,uint flag,undefined4 size,long *dataList,ulong *sizeList)\n\n{\n  ulong maxSize;\n  ulong tempSize;\n  char check;\n  char *str;\n  size_t strLen;\n  char *newStr;\n  long counter;\n  void *popTypeResult;\n  undefined8 result;\n  undefined flag;\n  long loopCounter;\n  ulong currentSize;\n  undefined *bytePtr;\n  byte byteVal;\n  \n  byteVal = 0;\n  counter = *(long *)(input + 0x60);\n  if (counter != 0) {\n    maxSize = *(ulong *)(counter + 0x10);\n    if (((long)maxSize < 1) || (dataList == (long *)0x0)) {\n      flag = *(undefined *)(counter + 0x1c);\n      str = (char *)stab_pop_type(input);\n      strLen = strlen(str);\n      newStr = (char *)xmalloc(strLen + 2);\n      sprintf(newStr,\"%c%s\",(ulong)flag,str);\n      free(str);\n      counter = 0;\n    }\n    else {\n      currentSize = *sizeList;\n      if (currentSize <= maxSize) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= maxSize; currentSize = currentSize * 2) {\n        }\n        counter = xrealloc(*dataList,currentSize * 8);\n        tempSize = *sizeList;\n        *dataList = counter;\n        bytePtr = (undefined *)(counter + tempSize * 8);\n        for (loopCounter = (currentSize - tempSize) * 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *bytePtr = 0;\n          bytePtr = bytePtr + (ulong)byteVal * -2 + 1;\n        }\n        *sizeList = currentSize;\n      }\n      counter = *(long *)(*dataList + maxSize * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        popTypeResult = (void *)stab_pop_type(input);\n        free(popTypeResult);\n        result = stab_push_defined_type(input,counter,size);\n        return result;\n      }\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      str = (char *)stab_pop_type(input);\n      strLen = strlen(str);\n      newStr = (char *)xmalloc(strLen + 0x14);\n      sprintf(newStr,\"%ld=%c%s\",counter,(ulong)flag,str);\n      free(str);\n      flag = 1;\n      *(long *)(*dataList + maxSize * 8) = counter;\n    }\n    check = stab_push_string(input,newStr,counter,flag,size);\n    if (check != '\\0') {\n      free(newStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "xrealloc",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "arg3",
                "param_4": "arg4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "count",
                "puVar5": "ptr4",
                "pcVar6": "filenamePtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 arg3,undefined8 arg4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long count;\n  undefined4 *ptr4;\n  char *filenamePtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filenamePtr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byteVar * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = arg4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = detect_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUNC_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "FUN_00107976",
                "bfd_set_format",
                "bfd_nonfatal_message",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_symmetric_value_00115d00",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "value",
                "lVar2": "result"
            },
            "code": "\nlong findSymmetricValue_00115d00(long num1,long num2)\n\n{\n  uint value;\n  long result;\n  \n  result = isympp;\n  if (isympp != 0) {\n    if (*(int *)(*(long *)(num2 + 8) + 8) == 5) {\n      if (*(int *)(num1 + 0x28) == *(int *)(*(long *)(num2 + 0x110) + 0xd40)) {\n        value = *(uint *)(num1 + 0x2c);\n        if (value == 0) {\n          result = 0;\n        }\n        else if ((ulong)value <\n                 *(ulong *)(*(long *)(num2 + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(num2 + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(isympp + (ulong)(value - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_symmetric_value_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "typeSize",
                "plVar2": "dataStructure",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ninitializeDataStructure_00113c43(long input1,long input2,long param3,long param4,undefined param5,\n            undefined8 param6)\n\n{\n  long typeSize;\n  long *dataStructure;\n  undefined returnValue [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    typeSize = debug_make_type_constprop_0(0x10,0);\n    if (typeSize != 0) {\n      dataStructure = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)dataStructure + 0x21) = 0;\n      *dataStructure = input1;\n      *(undefined4 *)((long)dataStructure + 0x24) = 0;\n      dataStructure[1] = input2;\n      dataStructure[2] = param3;\n      dataStructure[3] = param4;\n      *(undefined *)(dataStructure + 4) = param5;\n      *(long **)(typeSize + 0x10) = dataStructure;\n      goto LAB_00113caa;\n    }\n  }\n  typeSize = 0;\nLAB_00113caa:\n  returnValue._8_8_ = param6;\n  returnValue._0_8_ = typeSize;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "main",
                "set_times.cold",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "section_add_load_file.cold",
                "smart_rename.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "debugCode",
                "param_5": "arg4",
                "param_6": "arg5",
                "param_7": "arg6",
                "uVar1": "returnValue",
                "lVar2": "typeResult",
                "plVar3": "coffSlot",
                "switchD_00112a73_caseD_2": "caseD_2"
            },
            "code": "\nbool recordDebugInfo_00112a33(undefined8 arg1,long arg2,undefined8 arg3,byte debugCode,undefined8 arg4\n                 ,undefined8 arg5,uint arg6)\n\n{\n  undefined returnValue;\n  long typeResult;\n  long *coffSlot;\n  \n  if (debugCode < 0x12) {\n    if (debugCode != 0) {\n      switch(debugCode) {\n      case 1:\n        returnValue = debug_record_variable\n                          (arg4,*(undefined8 *)(arg2 + 8),arg5,4,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 2:\n        goto caseD_2;\n      case 3:\n        returnValue = debug_record_variable\n                          (arg4,*(undefined8 *)(arg2 + 8),arg5,(arg6 & 0xff) + 2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 4:\n        returnValue = debug_record_variable\n                          (arg4,*(undefined8 *)(arg2 + 8),arg5,5,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 9:\n        returnValue = debug_record_parameter\n                          (arg4,*(undefined8 *)(arg2 + 8),arg5,1,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        typeResult = debug_tag_type(arg4,*(undefined8 *)(arg2 + 8));\n        if (typeResult == 0) {\n          return false;\n        }\n        coffSlot = (long *)coff_get_slot_lto_priv_0(arg1,arg3);\n        *coffSlot = typeResult;\n        break;\n      case 0xd:\n        typeResult = debug_name_type(arg4,*(undefined8 *)(arg2 + 8));\n        return typeResult != 0;\n      case 0x11:\n        returnValue = debug_record_parameter\n                          (arg4,*(undefined8 *)(arg2 + 8),arg5,2,\n                           *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (debugCode == 0x7f) {\ncaseD_2:\n    returnValue = debug_record_variable\n                      (arg4,*(undefined8 *)(arg2 + 8),arg5,1,\n                       *(long *)(arg2 + 0x10) + *(long *)(*(long *)(arg2 + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_name_type",
                "debug_tag_type",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "resolve_type_0010c2d2",
                "uVar1": "typeCode",
                "pcVar2": "typeName",
                "uVar3": "debugType",
                "lVar4": "typeAddress",
                "plVar5": "stabSlot",
                "uVar6": "negTypeCode"
            },
            "code": "\n\n\nlong resolveType_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint typeCode;\n  char *typeName;\n  undefined8 debugType;\n  long typeAddress;\n  long *stabSlot;\n  uint negTypeCode;\n  \n  if ((*param_3 == 0) && (typeCode = param_3[1], (int)typeCode < 0)) {\n    negTypeCode = ~typeCode;\n    if (negTypeCode < 0x22) {\n      typeAddress = *(long *)(param_2 + 0x90 + (ulong)negTypeCode * 8);\n      if (typeAddress == 0) {\n        switch(negTypeCode) {\n        case 1:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          debugType = debug_make_int_type_isra_0(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          debugType = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          debugType = debug_make_void_type_isra_0();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          debugType = debug_make_float_type_isra_0(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          debugType = debug_make_float_type_isra_0(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          debugType = debug_make_float_type_isra_0(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          debugType = debug_make_float_type_isra_0(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          debugType = debug_make_float_type_isra_0(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          debugType = 0;\n          break;\n        case 0x13:\n          debugType = debug_make_int_type_isra_0(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          debugType = debug_make_type_constprop_0(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          debugType = debug_make_type_constprop_0(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          debugType = debug_make_type_constprop_0(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          debugType = debug_make_type_constprop_0(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          debugType = debug_make_type_constprop_0(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          debugType = debug_make_int_type_isra_0(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          debugType = debug_make_int_type_isra_0(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          debugType = debug_make_int_type_isra_0(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          debugType = debug_make_type_constprop_0(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          debugType = debug_make_int_type_isra_0(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          debugType = debug_make_int_type_isra_0(4,0);\n          typeName = \"int\";\n        }\n        typeAddress = debug_name_type(param_1,typeName,debugType);\n        *(long *)(param_2 + 0x90 + (ulong)negTypeCode * 8) = typeAddress;\n        return typeAddress;\n      }\n      return typeAddress;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeName,(ulong)typeCode);\n  }\n  else {\n    stabSlot = (long *)stab_find_slot(param_2);\n    if (stabSlot != (long *)0x0) {\n      if (*stabSlot == 0) {\n        typeAddress = debug_make_indirect_type_isra_0(stabSlot,0);\n        return typeAddress;\n      }\n      return *stabSlot;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "dcgettext",
                "debug_make_indirect_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_type.constprop.0",
                "stab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "resolve_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_type_0010e07c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "symbolTableEnd",
                "lVar2": "symbol",
                "lVar3": "symbolCount",
                "cVar4": "coffResult",
                "uVar5": "error",
                "__ptr": "parsedSymbols",
                "uVar6": "typePrivate",
                "uVar7": "type",
                "puVar8": "symbolInfo",
                "pcVar9": "errorMessage",
                "puVar10": "auxInfo",
                "uVar11": "auxCount",
                "lVar12": "parsedSymbolCount",
                "iVar13": "result",
                "iVar14": "arraySize",
                "local_a8": "var0",
                "uStack_a4": "var1",
                "uStack_a0": "var2",
                "uStack_9c": "var3",
                "local_88": "symbolName",
                "local_6a": "sectionFlag",
                "local_68": "auxType",
                "local_67": "auxNameLen",
                "local_60": "auxName",
                "local_56": "typeIndex"
            },
            "code": "\nundefined8\nparseCOFFType_0010e07c(undefined8 param1,long *param2,undefined8 param3,int param4,long param5,\n            undefined8 param6)\n\n{\n  long symbolTableEnd;\n  long symbol;\n  long symbolCount;\n  char coffResult;\n  undefined4 error;\n  void *parsedSymbols;\n  undefined8 typePrivate;\n  undefined8 type;\n  undefined4 *symbolInfo;\n  char *errorMessage;\n  undefined *auxInfo;\n  uint auxCount;\n  long parsedSymbolCount;\n  int result;\n  int arraySize;\n  undefined4 var0;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined symbolName [30];\n  undefined2 sectionFlag;\n  byte auxType;\n  byte auxNameLen;\n  undefined auxName [10];\n  ushort typeIndex;\n  \n  arraySize = 10;\n  parsedSymbolCount = 0;\n  symbolTableEnd = *(long *)(param5 + 0x18);\n  parsedSymbols = (void *)xmalloc(0x50);\n  while ((param2[3] < symbolTableEnd && (param2[2] < param2[1]))) {\n    symbol = *(long *)(*param2 + param2[2] * 8);\n    coffResult = bfd_coff_get_syment(param1,symbol,symbolName);\n    if (coffResult == '\\0') {\n      error = bfd_get_error();\n      typePrivate = bfd_errmsg(error);\n      errorMessage = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      type = dcgettext(0,errorMessage,5);\n      non_fatal(type,typePrivate);\n      free(parsedSymbols);\n      return 0;\n    }\n    symbolCount = param2[3];\n    auxInfo = (undefined *)0x0;\n    param2[2] = param2[2] + 1;\n    param2[3] = symbolCount + 1 + (ulong)auxNameLen;\n    if (auxNameLen != 0) {\n      auxInfo = auxName;\n      coffResult = bfd_coff_get_auxent(param1,symbol,0,auxInfo);\n      if (coffResult == '\\0') {\n        error = bfd_get_error();\n        typePrivate = bfd_errmsg(error);\n        errorMessage = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (auxType == 0x12) {\n      auxCount = (uint)typeIndex;\n      result = (int)*(undefined8 *)(symbol + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol + 0x20) + 0x30);\n    }\n    else {\n      if (auxType < 0x13) {\n        if ((auxType == 8) || (auxType == 0xb)) {\n          auxCount = 0;\n          result = ((int)*(undefined8 *)(symbol + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (auxType == 0x66) break;\n      auxCount = 0;\n      result = 0;\n    }\nLAB_0010e214:\n    type = parse_coff_type_lto_priv_0(param1,param2,param3,symbolCount,sectionFlag,auxInfo,1);\n    typePrivate = *(undefined8 *)(symbol + 8);\n    symbolInfo = (undefined4 *)xmalloc(0x20);\n    var0 = (undefined4)typePrivate;\n    var1 = (undefined4)((ulong)typePrivate >> 0x20);\n    var2 = (undefined4)type;\n    var3 = (undefined4)((ulong)type >> 0x20);\n    *(undefined8 *)(symbolInfo + 5) = 0;\n    symbolInfo[6] = result;\n    symbolInfo[7] = auxCount;\n    symbolInfo[4] = 0;\n    *symbolInfo = var0;\n    symbolInfo[1] = var1;\n    symbolInfo[2] = var2;\n    symbolInfo[3] = var3;\n    if (arraySize <= (int)parsedSymbolCount + 1) {\n      arraySize = arraySize + 10;\n      parsedSymbols = (void *)xrealloc(parsedSymbols,(long)arraySize << 3,symbolInfo,0,param6);\n    }\n    *(undefined4 **)((long)parsedSymbols + parsedSymbolCount * 8) = symbolInfo;\n    parsedSymbolCount = parsedSymbolCount + 1;\n  }\n  *(undefined8 *)((long)parsedSymbols + (long)(int)parsedSymbolCount * 8) = 0;\n  typePrivate = debug_make_struct_type_isra_0(param4 == 8,*(undefined2 *)(param5 + 10),parsedSymbols);\n  return typePrivate;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "parse_coff_type.lto_priv.0",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc",
                "free",
                "debug_make_struct_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_return_value_001082c3"
            },
            "code": "\nundefined8 getDefaultReturnValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "get_default_return_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_parse_file_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "fileData",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "file",
                "sVar5": "bytesRead",
                "ppbVar6": "slotPtr",
                "iVar1": "lineCount",
                "piVar2": "errorCode",
                "pcVar3": "errorMsg",
                "uVar4": "localizedMsg",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextChar",
                "pbVar10": "ptr1",
                "pbVar11": "ptr2",
                "pbVar12": "ptr3"
            },
            "code": "\nvoid readAndParseFile_00114460(char *filename,undefined8 hashTable,byte **fileData)\n\n{\n  int lineCount;\n  int *errorCode;\n  char *errorMsg;\n  undefined8 localizedMsg;\n  size_t fileSize;\n  byte *buffer;\n  FILE *file;\n  size_t bytesRead;\n  byte **slotPtr;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    file = fopen(filename,\"r\");\n    if (file == (FILE *)0x0) {\n      errorCode = __errno_location();\n      errorMsg = strerror(*errorCode);\n      localizedMsg = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(localizedMsg,filename,errorMsg);\n    }\n    bytesRead = fread(buffer,1,fileSize,file);\n    if ((bytesRead == 0) || (lineCount = ferror(file), lineCount != 0)) {\n      localizedMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(localizedMsg,filename);\n    }\n    lineCount = 1;\n    fclose(file);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentByte = *buffer;\n    ptr3 = buffer;\n    while (ptr1 = ptr3, currentByte != 0) {\n      for (; currentByte = *ptr1, ptr2 = ptr1, currentByte != 10; ptr1 = ptr1 + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextChar = ptr1 + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *ptr1 = 0;\n            nextChar = ptr1 + 1;\n            if (ptr1[1] == 10) {\n              nextChar = ptr1 + 2;\n              ptr2 = ptr1 + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            parse_and_store_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *ptr1 = 0;\n      if (ptr1[1] == 0xd) {\n        ptr2 = ptr1 + 1;\n        nextChar = ptr1 + 2;\n      }\n      else {\n        nextChar = ptr1 + 1;\n      }\nLAB_00114553:\n      currentByte = *ptr3;\n      while ((currentByte == 0x20 || (ptr1 = ptr3, currentByte == 9))) {\n        ptr1 = ptr3 + 1;\n        ptr3 = ptr3 + 1;\n        currentByte = *ptr1;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = ptr1[1];\n        ptr1 = ptr1 + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = ptr1[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = ptr1[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = ptr1[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = ptr1[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = ptr1[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = ptr1[6];\n          currentChar = ptr1 + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          localizedMsg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(localizedMsg,filename,lineCount);\n        }\n      }\nLAB_00114599:\n      *ptr1 = 0;\n      if (ptr3 < ptr1) {\n        slotPtr = (byte **)htab_find_slot(hashTable,ptr3,1);\n        *slotPtr = ptr3;\n      }\n      lineCount = lineCount + 1;\n      ptr3 = nextChar;\n      currentByte = ptr2[1];\n    }\n    *fileData = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "strerror",
                "fclose",
                "dcgettext",
                "ferror",
                "get_file_size",
                "fread",
                "xmalloc",
                "fopen",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_parse_file_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "param_1": "paramPointer",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "cVar1": "charVal",
                "lVar2": "longVar",
                "__s": "typeStr",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "flagStr"
            },
            "code": "\nundefined8 generateFormattedString_0010a94e(long paramPointer,char *string1,char *string2,int flag)\n\n{\n  char charVal;\n  long longVar;\n  char *typeStr;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *flagStr;\n  \n  charVal = *(char *)(*(long *)(paramPointer + 0x60) + 0x1c);\n  typeStr = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(paramPointer + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    len1 = strlen(formattedString);\n    len2 = strlen(string1);\n    len3 = strlen(typeStr);\n    len4 = strlen(string2);\n    formattedString = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      flagStr = \"/1\";\n    }\n    else {\n      flagStr = \"/0\";\n      if ((flag != 2) && (flagStr = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(paramPointer + 0x60) + 0x20),string1,flagStr,\n            typeStr,string2,*(long *)(paramPointer + 0x60));\n    free(*(void **)(*(long *)(paramPointer + 0x60) + 0x20));\n    longVar = *(long *)(paramPointer + 0x60);\n    *(char **)(longVar + 0x20) = formattedString;\n    if (charVal != '\\0') {\n      *(undefined *)(longVar + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)longVar >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "parse_real_type_00113b1e",
                "param_1": "input_value",
                "param_2": "unknown_param",
                "param_3": "output_value",
                "param_4": "unknown_param_2",
                "auVar1": "result1",
                "piVar2": "ptr_real_type",
                "uVar3": "real_type_value",
                "auVar4": "result2"
            },
            "code": "\nundefined  [16] parse_real_type_00113b1e(long input_value,undefined8 unknown_param,ulong output_value,undefined8 unknown_param_2)\n\n{\n  undefined result1 [16];\n  int *ptr_real_type;\n  undefined8 real_type_value;\n  undefined result2 [16];\n  \n  if (input_value != 0) {\n    ptr_real_type = (int *)debug_get_real_type_isra_0(input_value,0);\n    if ((ptr_real_type == (int *)0x0) || (3 < *ptr_real_type - 7U)) {\n      real_type_value = 0;\n    }\n    else {\n      real_type_value = **(undefined8 **)(ptr_real_type + 4);\n    }\n    result2._8_8_ = unknown_param_2;\n    result2._0_8_ = real_type_value;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = output_value;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "parse_real_type_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "bfd_get_archive_filename"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "store_data_in_buffer_0010a0e9",
                "param_1": "bufferPointer",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "data",
                "uVar2": "result",
                "__s": "type",
                "sVar3": "stringLength",
                "__s_00": "newString"
            },
            "code": "\nundefined4 storeDataInBuffer_0010a0e9(long bufferPointer,undefined8 value1,undefined8 value2)\n\n{\n  undefined data;\n  undefined4 result;\n  char *type;\n  size_t stringLength;\n  char *newString;\n  \n  data = *(undefined *)(*(long *)(bufferPointer + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(bufferPointer + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  stringLength = strlen(type);\n  newString = (char *)xmalloc(stringLength + 100);\n  sprintf(newString,\"r%s;%ld;%ld;\",type,value1,value2);\n  free(type);\n  result = stab_push_string(bufferPointer,newString,0,data,result);\n  if ((char)result != '\\0') {\n    free(newString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "store_data_in_buffer_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_unused_sections_00114c20",
                "param_1": "binaryPointer",
                "cVar1": "startsWithDAT",
                "pcVar2": "sectionPointer"
            },
            "code": "\nvoid removeUnusedSections_00114c20(long binaryPointer)\n\n{\n  char startsWithDAT;\n  char *sectionPointer;\n  \n  find_section_list(binaryPointer,1,1);\n  startsWithDAT = startswith_lto_priv_0_lto_priv_0(binaryPointer,&DAT_0011b499);\n  if (startsWithDAT != '\\0') {\n    sectionPointer = (char *)(binaryPointer + 5);\n    if (*(char *)(binaryPointer + 4) != 'a') {\n      sectionPointer = (char *)(binaryPointer + 4);\n    }\n    if (*sectionPointer != '\\0') {\n      find_section_list(sectionPointer,1,0x100);\n    }\n  }\n  sections_removed = 1;\n  return;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "find_section_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_unused_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_section_update_00115f50",
                "param_1": "filePointer",
                "param_2": "sectionNames",
                "param_3": "flag",
                "__s1": "sectionName",
                "uVar1": "comparisonResult",
                "uVar2": "result",
                "extraout_EDX": "extraOutputEDX",
                "plVar3": "updatePtr",
                "auVar4": "stripSectionResult"
            },
            "code": "\nuint checkSectionUpdate_00115f50(long filePointer,char **sectionNames,char flag)\n\n{\n  char *sectionName;\n  uint comparisonResult;\n  undefined4 result;\n  undefined4 extraOutputEDX;\n  long *updatePtr;\n  undefined stripSectionResult [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  stripSectionResult = is_strip_section_isra_0(sectionNames);\n  if (stripSectionResult[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      sectionName = *sectionNames;\n      updatePtr = update_sections;\n      do {\n        comparisonResult = strcmp(sectionName,(char *)updatePtr[1]);\n        stripSectionResult._4_4_ = 0;\n        stripSectionResult._0_4_ = comparisonResult;\n        stripSectionResult._8_4_ = extraOutputEDX;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        updatePtr = (long *)*updatePtr;\n      } while (updatePtr != (long *)0x0);\n    }\n    result = stripSectionResult._8_4_;\n    if (((((flag == '\\0') || (merge_notes == '\\0')) ||\n         (stripSectionResult._8_4_ = result, stripSectionResult._0_8_ = *(long *)(filePointer + 8),\n         *(int *)(*(long *)(filePointer + 8) + 8) != 5)) ||\n        ((stripSectionResult._0_8_ = (ulong)sectionNames[0x1a], *(int *)(sectionNames[0x1a] + 4) != 7 ||\n         (stripSectionResult = startswith_lto_priv_0_lto_priv_0(*sectionNames,\".gnu.build.attributes\"),\n         stripSectionResult[0] == '\\0')))) && ((*(byte *)((long)sectionNames + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(stripSectionResult._1_7_,sectionNames[8] == (char *)0x0) |\n             CONCAT31(stripSectionResult._9_3_,sectionNames[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section.isra.0",
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_relocations_in_section",
                "copy_section"
            ],
            "imported": false,
            "current_name": "check_section_update_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "check_section_length_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid checkSectionLength_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "check_section_length_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "inputPointer",
                "param_2": "inputSize",
                "lVar1": "currentValue",
                "cVar2": "isIntTypeValid",
                "__ptr": "popValue",
                "uVar3": "sizeValue",
                "uVar4": "modifiedSize",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processData_0010b948(long inputPointer,uint inputSize)\n\n{\n  long currentValue;\n  char isIntTypeValid;\n  void *popValue;\n  ulong sizeValue;\n  uint modifiedSize;\n  char formattedString [50];\n  \n  modifiedSize = inputSize - 1;\n  sizeValue = (ulong)inputSize;\n  if ((modifiedSize < 0x10) && (currentValue = *(long *)(inputPointer + 0xf8 + (ulong)modifiedSize * 8), currentValue != 0)) {\n    stab_push_defined_type(inputPointer,currentValue,sizeValue);\n    return;\n  }\n  isIntTypeValid = stab_int_type_lto_priv_0(inputPointer,4,0);\n  if (isIntTypeValid != '\\0') {\n    popValue = (void *)stab_pop_type(inputPointer);\n    currentValue = *(long *)(inputPointer + 0x68);\n    *(long *)(inputPointer + 0x68) = currentValue + 1;\n    if (modifiedSize < 0x10) {\n      *(long *)(inputPointer + 0xf8 + (ulong)modifiedSize * 8) = currentValue;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",currentValue,popValue,sizeValue);\n    free(popValue);\n    stab_push_string(inputPointer,formattedString,currentValue,1,sizeValue);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_debug_type_00112b6e",
                "param_1": "type_identifier",
                "param_2": "debug_info",
                "iVar1": "type_value",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "nested_debug_info",
                "local_10": "nested_type_identifier"
            },
            "code": "\n\n\nint * find_debug_type_00112b6e(int *type_identifier,long *debug_info)\n\n{\n  int type_value;\n  undefined8 uVar2;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *nested_debug_info;\n  int *nested_type_identifier;\n  \n  type_value = *type_identifier;\n  if ((type_value != 1) && (1 < type_value - 0x16U)) {\n    return type_identifier;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((type_identifier == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      uVar2 = debug_get_type_name_constprop_0\n                        (type_identifier,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  nested_debug_info = debug_info;\n  nested_type_identifier = type_identifier;\n  if (type_value - 0x16U < 2) {\n    result = (int *)find_debug_type_00112b6e((*(undefined8 **)(type_identifier + 4))[1],&nested_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(type_identifier + 4);\n  if (type_identifier == result) {\n    return type_identifier;\n  }\n  if (result == (int *)0x0) {\n    return type_identifier;\n  }\n  result = (int *)find_debug_type_00112b6e(result,&nested_debug_info);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "debug_get_real_type.isra.0",
                "dcgettext",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_real_type.isra.0",
                "debug_type_samep",
                "debug_write_type.constprop.0",
                "parse_stab_type",
                "debug_get_fields.isra.0"
            ],
            "imported": false,
            "current_name": "find_debug_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_stab_struct_type_0010a83e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "isParam6",
                "param_7": "isParam7",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "stringLength",
                "cVar3": "charValue"
            },
            "code": "\nundefined4\nprocessStabStructType_0010a83e(long arg1,undefined8 arg2,ulong arg3,undefined arg4,ulong arg5,\n            byte isParam6,byte isParam7)\n\n{\n  undefined4 uVar1;\n  char *string1;\n  char *string2;\n  size_t stringLength;\n  char charValue;\n  \n  if (((isParam7 ^ 1) & isParam6) == 0) {\n    string1 = (char *)0x0;\n    charValue = '\\0';\n  }\n  else {\n    charValue = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n    string1 = (char *)stab_pop_type();\n    arg5 = arg5 & 0xffffffff;\n    arg3 = arg3 & 0xffffffff;\n  }\n  uVar1 = stab_start_struct_type_lto_priv_0(arg1,arg2,arg3,arg4,arg5);\n  if ((char)uVar1 != '\\0') {\n    if (isParam6 == 0) {\n      return uVar1;\n    }\n    if (isParam7 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      stringLength = strlen(string1);\n      string2 = (char *)xmalloc(stringLength + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (charValue != '\\0') {\n        *(undefined *)(*(long *)(arg1 + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(arg1 + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(arg1 + 0x60) + 0x38) = string2;\n    return uVar1;\n  }\n  return uVar1;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "xmalloc",
                "stab_start_struct_type.lto_priv.0",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_struct_type_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_type_const_property_00113d6e",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "result",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong create_type_const_property_00113d6e(undefined8 input_value_1,undefined8 input_value_2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = debug_make_type_constprop_0(0xb,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_value_1;\n    allocated_memory[1] = input_value_2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_const_property_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "display_info.isra.0.cold",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_with_condition_00114d50",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "condition"
            },
            "code": "\nvoid executeFunctionWithCondition_00114d50(long input1,long input2,uint condition)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,condition != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_function_with_condition_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_and_exit_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageAndExit_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,message);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "archiveFilename",
                "param_10": "archive",
                "param_11": "paramArray",
                "param_12": "formatString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "pointer1",
                "local_f0": "pointer2",
                "local_e8": "localBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "errorCode1Copy",
                "local_a8": "errorCode2Copy",
                "local_98": "errorCode3Copy",
                "local_88": "errorCode4Copy",
                "local_78": "errorCode5Copy",
                "local_68": "errorCode6Copy",
                "local_58": "errorCode7Copy",
                "local_48": "errorCode8Copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long archiveFilename,long archive,long *paramArray,char *formatString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char condition;\n  int bfdError;\n  undefined8 errorMessage;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined localBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (condition != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(program_name,_stderr);\n  if (archive != 0) {\n    if (archiveFilename == 0) {\n      archiveFilename = bfd_get_archive_filename(archive);\n    }\n    if ((paramArray != (long *)0x0) && (*paramArray != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archiveFilename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archiveFilename);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    pointer1 = &stack0x00000008;\n    pointer2 = localBuffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "bfd_get_error",
                "vfprintf",
                "bfd_errmsg",
                "fputs",
                "dcgettext",
                "fwrite",
                "fflush",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "copy_object.cold",
                "FUN_0010808f",
                "copy_file.cold",
                "FUN_0010554f",
                "copy_object",
                "main",
                "FUN_001086af",
                "FUN_00108466",
                "copy_relocations_in_section",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "copy_section"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_debug_type_00113b4a",
                "param_1": "inputValue",
                "lVar1": "debugType"
            },
            "code": "\nlong initializeDebugType_00113b4a(long inputValue)\n\n{\n  long debugType;\n  \n  if (inputValue != 0) {\n    debugType = debug_make_type_constprop_0(0x15,0);\n    if (debugType == 0) {\n      debugType = 0;\n    }\n    else {\n      *(long *)(debugType + 0x10) = inputValue;\n    }\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "write_symbol_lto_priv_0010edb4",
                "param_1": "file_info_ptr",
                "param_2": "filename_ptr",
                "param_3": "symbol_type",
                "param_4": "symbol_size",
                "cVar1": "success_flag",
                "iVar2": "comparison_result",
                "uVar3": "result",
                "in_R10": "special_register"
            },
            "code": "\nundefined8 write_symbol_lto_priv_0010edb4(long file_info_ptr,undefined8 filename_ptr,undefined4 symbol_type,ulong symbol_size)\n\n{\n  char success_flag;\n  int comparison_result;\n  undefined8 result;\n  undefined8 special_register;\n  \n  if (*(long *)(file_info_ptr + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_info_ptr + 0x1f0) < symbol_size) {\n    *(ulong *)(file_info_ptr + 0x1f0) = symbol_size;\n  }\n  comparison_result = filename_cmp(filename_ptr);\n  if (comparison_result != 0) {\n    success_flag = stab_write_symbol_lto_priv_0010edb4_0(file_info_ptr,0x84,0,symbol_size,filename_ptr);\n    if (success_flag == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_info_ptr + 0x210) = filename_ptr;\n  }\n  result = stab_write_symbol_lto_priv_0010edb4_0\n                    (file_info_ptr,0x44,symbol_type,symbol_size - *(long *)(file_info_ptr + 0x200),0,special_register);\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_lto_priv_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_symbol_0010e5db",
                "param_1": "symbolAddress",
                "param_2": "limit",
                "__ptr": "symbolPointer",
                "__s": "symbolString",
                "sVar2": "stringLength",
                "__s_00": "modifiedSymbolString",
                "in_R10": "registerValue",
                "iVar3": "iterationCount",
                "cVar1": "charFlag",
                "auVar4": "modifiedOutput"
            },
            "code": "\nundefined  [16] reverseAndModifySymbol_0010e5db(long symbolAddress,int limit)\n\n{\n  char charFlag;\n  void *symbolPointer;\n  char *symbolString;\n  size_t stringLength;\n  char *modifiedSymbolString;\n  ulong registerValue;\n  int iterationCount;\n  undefined modifiedOutput [16];\n  \n  iterationCount = 0;\n  do {\n    if (limit <= iterationCount) {\n      modifiedOutput = stab_modify_type(symbolAddress,0x66,0,symbolAddress + 0x188,symbolAddress + 400,registerValue);\n      return modifiedOutput;\n    }\n    if (*(char *)(*(long *)(symbolAddress + 0x60) + 0x1c) == '\\0') {\n      symbolPointer = (void *)stab_pop_type(symbolAddress);\n      free(symbolPointer);\n    }\n    else {\n      symbolString = (char *)stab_pop_type(symbolAddress);\n      stringLength = strlen(symbolString);\n      modifiedSymbolString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedSymbolString,\":t%s\",symbolString);\n      free(symbolString);\n      charFlag = stab_write_symbol_lto_priv_0(symbolAddress,0x80,0,0,modifiedSymbolString);\n      if (charFlag == '\\0') {\n        modifiedOutput._8_8_ = 0;\n        modifiedOutput._0_8_ = registerValue;\n        return modifiedOutput << 0x40;\n      }\n      free(modifiedSymbolString);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_modify_type",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_symbol_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_files_00104d25",
                "param_7": "error_message",
                "status": "current_status"
            },
            "code": "\nvoid cleanupFiles_00104d25(void)\n\n{\n  undefined8 error_message;\n  \n  current_status = 1;\n  bfd_nonfatal_message(0,error_message,0,0);\n  remove_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_files_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debugging_information_0010551d",
                "puVar1": "ptr",
                "bVar2": "byteVar",
                "puVar3": "pointerVar",
                "pcVar4": "functionPtr",
                "puVar5": "pointerVar2",
                "uVar6": "unsignedVar1",
                "uVar7": "unsignedVar2",
                "__s": "str",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "unsignedVar3",
                "iVar11": "intVar1",
                "uVar12": "unsignedVar4",
                "uVar13": "unsignedVar5",
                "iVar14": "intVar2",
                "plVar15": "ptrVar1",
                "uVar16": "unsignedVar6",
                "uVar17": "unsignedVar7",
                "iVar31": "intVar3",
                "plVar32": "ptrVar2",
                "lVar21": "longVar",
                "unaff_R13": "longPtr1",
                "puVar29": "pointerVar3",
                "bVar38": "boolVar",
                "bVar39": "byteVar2",
                "in_stack_00000018": "var",
                "in_stack_00000010": "size",
                "sVar18": "sizeVar",
                "pcVar19": "strVar",
                "pcVar28": "strVar6",
                "sVar26": "sizeVar2",
                "__ptr": "ptrVar3",
                "__ptr_00": "ptrVar4",
                "__s_00": "strVar3",
                "in_stack_00000118": "ushortVar",
                "pcVar33": "strVar4",
                "in_stack_00000140": "strVar5"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong mergeDebuggingInformation_0010551d(void)\n\n{\n  uint *ptr;\n  byte byteVar;\n  undefined *pointerVar;\n  code *functionPtr;\n  undefined8 *pointerVar2;\n  ulong unsignedVar1;\n  ulong unsignedVar2;\n  char *str;\n  char charVar;\n  char charVar2;\n  uint unsignedVar3;\n  int intVar1;\n  uint unsignedVar4;\n  undefined4 unsignedVar5;\n  int intVar2;\n  long *ptrVar1;\n  undefined8 unsignedVar6;\n  undefined8 unsignedVar7;\n  size_t sizeVar;\n  char *strVar;\n  void *ptrVar3;\n  void *ptrVar4;\n  ulong uVar20;\n  long longVar;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *strVar3;\n  size_t sizeVar2;\n  long lVar27;\n  long *unaff_RBX;\n  char *strVar6;\n  undefined8 *pointerVar3;\n  ulong uVar30;\n  int intVar3;\n  long unaff_RBP;\n  long *ptrVar2;\n  char *strVar4;\n  undefined4 *pointerVar4;\n  char **ppcVar35;\n  long *longPtr1;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppointerVar7;\n  bool boolVar;\n  byte byteVar2;\n  long in_stack_00000008;\n  ulong size;\n  char var;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort ushortVar;\n  char *strVar5;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteVar2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  pointerVar3 = dump_sections;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar2 = startswith_lto_priv_0_lto_priv_0(), charVar2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        unaff_RBX[3] = (long)longPtr1;\n        *unaff_RBX = unaff_RBP;\n        longPtr1 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointerVar3 != (undefined8 *)0x0; pointerVar3 = (undefined8 *)*pointerVar3) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sizeVar = *(size_t *)(lVar25 + 0x40);\n      strVar3 = fopen((char *)pointerVar3[2],\"w\");\n      if (strVar3 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointerVar3[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sizeVar != 0) &&\n                (sizeVar2 = fwrite(strVar5,1,sizeVar,strVar3), sizeVar2 != sizeVar)) {\n          piVar23 = __errno_location();\n          strVar4 = strerror(*piVar23);\n          unsignedVar7 = pointerVar3[2];\n          unsignedVar6 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(unsignedVar6,unsignedVar7,strVar4);\n          free(strVar5);\n          fclose(strVar3);\n          return 0;\n        }\n        fclose(strVar3);\n        free(strVar5);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      unsignedVar7 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(unsignedVar7);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      unsignedVar7 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,unsignedVar7,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        unsignedVar1 = uVar24;\n        unsignedVar2 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = unsignedVar1, unsignedVar2 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            unsignedVar1 = uVar20;\n            unsignedVar2 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  ptrVar2 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUNC_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppointerVar7 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointerVar4 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *pointerVar4 = 0;\n      pointerVar4 = pointerVar4 + (ulong)byteVar2 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerVar = *ppointerVar7;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        ptrVar3 = (void *)xmalloc(lVar25);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          unsignedVar5 = bfd_get_error();\n          bfd_errmsg(unsignedVar5);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(ptrVar3);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          ptrVar4 = (void *)xmalloc(uVar24 + 1);\n          var = bfd_get_section_contents();\n          if (var == '\\0') {\n            unsignedVar5 = bfd_get_error();\n            bfd_errmsg(unsignedVar5);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)ptrVar4 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = ptrVar3; pvVar36 <= (void *)((long)ptrVar3 + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                unsignedVar5 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    strVar4 = (char *)((long)ptrVar4 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar = strlen(strVar4);\n                      if (((sizeVar == 0) || (strVar6 = strVar4 + (sizeVar - 1), *strVar6 != '\\')) ||\n                         ((ulong)((long)ptrVar3 + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *strVar6 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar1 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(intVar1 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      strVar4 = (char *)concat(strVar4,(long)ptrVar4 + uVar20,0);\n                      *strVar6 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = strVar4;\n                    }\n                    unsignedVar7 = *unaff_R14;\n                    strVar6 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,strVar6,unsignedVar7,pointerVar,((long)pvVar36 - (long)ptrVar3) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteVar,unsignedVar5,lVar27,strVar4);\n                    charVar2 = parse_stab(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(ptrVar3);\n                      free(ptrVar4);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    unsignedVar7 = *unaff_R14;\n                    strVar4 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,strVar4,unsignedVar7,pointerVar,((long)pvVar36 - (long)ptrVar3) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)ptrVar3) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(ptrVar3);\n              goto LAB_001058eb;\n            }\n          }\n          free(ptrVar4);\n          free(ptrVar3);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppointerVar7 = ppointerVar7 + 2;\n    } while (ppointerVar7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = finish_stab(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (ptrVar1 = ptrVar2; ptrVar1 < ptrVar2 + size; ptrVar1 = ptrVar1 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            strVar4 = (char *)0x0;\n            strVar6 = in_stack_00000150;\n            while (((*strVar6 != '\\0' && (sizeVar = strlen(strVar6), strVar6[sizeVar - 1] == '\\')) &&\n                   (ptrVar1 + 1 < ptrVar2 + size))) {\n              strVar = (char *)xstrdup(strVar6);\n              sizeVar = strlen(strVar);\n              strVar[sizeVar - 1] = '\\0';\n              strVar6 = (char *)concat(strVar,*(undefined8 *)(ptrVar1[1] + 8),0);\n              free(strVar);\n              free(strVar4);\n              ptrVar1 = ptrVar1 + 1;\n              strVar4 = strVar6;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,strVar5,strVar6);\n            var = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (var != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (charVar2 = finish_stab(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (var == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (size == 0)) {\n        strVar4 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      strVar5 = (char *)0x0;\n      in_stack_000000c0 = ptrVar2;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = size;\n      in_stack_000000d8 = 0;\n      pointerVar3 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)pointerVar3 = 0;\n        pointerVar3 = (undefined8 *)((long)pointerVar3 + (ulong)byteVar2 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)size <= in_stack_000000d0) break;\n        lVar25 = ptrVar2[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          unsignedVar5 = bfd_get_error();\n          bfd_errmsg(unsignedVar5);\n          strVar4 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          unsignedVar7 = dcgettext(0,strVar4,5);\n          non_fatal(unsignedVar7);\n          goto LAB_00105981;\n        }\n        strVar4 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          unsignedVar5 = bfd_get_error();\n          bfd_errmsg(unsignedVar5);\n          strVar4 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = debug_set_filename(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = strVar4;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar1 = strcmp(strVar4,\".bb\");\n              if (intVar1 == 0) {\n                charVar = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar1 = strcmp(strVar4,\".eb\");\n              if (intVar1 == 0) {\n                charVar = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar1 = strcmp(strVar4,\".bf\");\n              if (intVar1 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (charVar2 = debug_record_function(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar1 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar1 = ushortVar - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar3 = _uStack0000000000000048[4];\n                      if (intVar3 == 0) break;\n                      charVar = debug_record_line(puStack0000000000000020,intVar1 + intVar3,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                strVar4 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar1 = strcmp(strVar4,\".ef\");\n                if (intVar1 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = debug_end_function(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                strVar4 = \"%ld: unexpected .ef\\n\";\n              }\n              unsignedVar7 = dcgettext(0,strVar4,5);\n              non_fatal(unsignedVar7);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar = parse_coff_type_lto_priv_0();\n          if (longVar == 0) goto LAB_00105981;\n          charVar = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (size != 0) {\n        ptrVar2 = isympp + size;\n        ptrVar1 = isympp;\n        do {\n          unsignedVar3 = *(uint *)(*ptrVar1 + 0x18);\n          if ((unsignedVar3 & 0x1000000) != 0) {\n            *(uint *)(*ptrVar1 + 0x18) = unsignedVar3 & 0xfeffffff;\n          }\n          ptrVar1 = ptrVar1 + 1;\n        } while (ptrVar2 != ptrVar1);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          ptr = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *ptr = *ptr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar1 = bfd_get_error();\n      if (intVar1 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    ptrVar2 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (size == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _var = 0;\n      do {\n        intVar1 = add_symbols;\n        ptrVar1 = (long *)ptrVar2[_var];\n        functionPtr = (code *)ptrVar1[4];\n        unsignedVar3 = *(uint *)(ptrVar1 + 3);\n        strVar4 = (char *)ptrVar1[1];\n        strVar6 = strVar4;\n        if (add_sym_list != (undefined8 *)0x0) {\n          intVar3 = 0;\n          pointerVar3 = add_sym_list;\n          while( true ) {\n            if ((intVar1 <= intVar3) || (strVar = (char *)pointerVar3[5], strVar == (char *)0x0))\n            goto LAB_00105ad5;\n            if (strVar != \"\") break;\nLAB_0010750b:\n            intVar3 = intVar3 + 1;\n          }\n          intVar2 = strcmp(strVar,strVar4);\n          if (intVar2 != 0) {\n            pointerVar3 = (undefined8 *)*pointerVar3;\n            goto LAB_0010750b;\n          }\n          free(strVar);\n          uVar20 = uVar24 + 1;\n          pointerVar3[5] = \"\";\n          unsignedVar6 = create_new_symbol(pointerVar3);\n          unsignedVar7 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = unsignedVar6;\n          lVar27 = htab_elements(unsignedVar7);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *strVar4;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          strVar4 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            lVar27 = unaff_R14[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (strVar4 != (char *)0x0) {\nLAB_001064eb:\n          if (((*strVar4 == '_') && (strVar4[1] == '_')) &&\n             (intVar1 = strcmp(strVar4 + (strVar4[2] == '_'),\"__gnu_lto_slim\"), intVar1 == 0)) {\n            unsignedVar7 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(unsignedVar7);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        strVar5 = strVar4;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (strVar6 = *(char **)(lVar27 + 8), strVar4 == strVar6)) &&\n           (strVar6 = strVar4, ppcVar35 = section_rename_list, (unsignedVar3 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar1 = strcmp(*ppcVar35,strVar4);\n            if (intVar1 == 0) {\n              strVar6 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        ptrVar1[1] = (long)strVar6;\n        charVar2 = *strVar6;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        strVar4 = prefix_symbols_string;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar2) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((unsignedVar3 & 0x82) == 0 && (functionPtr != bfd_map_over_sections)) &&\n                ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            strVar6 = strVar6 + 1;\n            ptrVar1[1] = (long)strVar6;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            strVar6 = strVar6 + 1;\n            ptrVar1[1] = (long)strVar6;\n            sizeVar = strlen(strVar6);\n            lVar27 = sizeVar + 2;\n            goto LAB_001066bc;\n          }\n          *strVar6 = charVar2;\n          ptrVar1[1] = (long)strVar6;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (strVar4 == (char *)0x0) goto LAB_00105b32;\n            sizeVar = strlen(strVar6);\n            sizeVar2 = strlen(strVar4);\n            strVar4 = (char *)xmalloc(sizeVar2 + sizeVar + 1);\n            strVar = strVar4;\n          }\n          else {\nLAB_0010668d:\n            strVar4 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar = strlen(strVar6);\n            lVar27 = sizeVar + 2;\n            if (strVar4 == (char *)0x0) {\n              strVar = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar = strlen(strVar4);\n              strVar = (char *)xmalloc(sizeVar + lVar27);\n            }\n            strVar4 = strVar + 1;\n            *strVar = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          str = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(strVar4,prefix_symbols_string);\n            sizeVar = strlen(str);\n            strVar4 = strVar4 + sizeVar;\n          }\n          strcpy(strVar4,strVar6);\n          ptrVar1[1] = (long)strVar;\n          strVar6 = strVar;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((unsignedVar3 & 0x20) == 0) &&\n           (((unsignedVar3 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(ptrVar1[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((unsignedVar3 & 0x82) != 0 || ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar1 = bfd_decode_symclass(ptrVar1), intVar1 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              strVar5 = strVar6;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((unsignedVar3 & 0x82) == 0) && (functionPtr != bfd_map_over_sections)) &&\n                  ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) == 0)) {\n            if ((unsignedVar3 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(ptrVar1[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  charVar2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            unsignedVar7 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(unsignedVar7);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          strVar5 = strVar6;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((unsignedVar3 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            strVar5 = strVar6;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((unsignedVar3 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            strVar5 = strVar6;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = is_strip_section_isra_0(ptrVar1[4]);\n          if (charVar2 == '\\0') {\n            if (((unsignedVar3 & 0x800002) == 0) && (functionPtr != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((unsignedVar3 & 0x82) != 0) {\n                charVar2 = is_specified_symbol(strVar6);\n                if ((charVar2 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (charVar2 = is_specified_symbol(strVar6), charVar2 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (unsignedVar4 = *(uint *)(ptrVar1 + 3), (unsignedVar4 & 0x200000) != 0)) ||\n                       (lVar27 = *ptrVar1, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)ptrVar1 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  unsignedVar4 = *(uint *)(ptrVar1 + 3);\n                }\n                *(uint *)(ptrVar1 + 3) = unsignedVar4 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((unsignedVar3 & 1) != 0) && (charVar2 = is_specified_symbol(strVar6), charVar2 != '\\0')) {\n                *(uint *)(ptrVar1 + 3) = *(uint *)(ptrVar1 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (charVar2 = is_specified_symbol(strVar6), charVar2 != '\\0')) {\n                *(uint *)(ptrVar1 + 3) = *(uint *)(ptrVar1 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPtr != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = ptrVar1;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _var = _var + 1;\n      } while (size != _var);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      pointerVar3 = add_sym_list;\n      intVar1 = add_symbols;\n      for (lVar27 = 0; lVar27 < intVar1; lVar27 = lVar27 + 1) {\n        strVar4 = (char *)pointerVar3[5];\n        if (strVar4 == (char *)0x0) {\n          longVar = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          unsignedVar7 = create_new_symbol(pointerVar3,in_stack_00000008);\n          *(undefined8 *)(lVar25 + longVar) = unsignedVar7;\n          intVar1 = add_symbols;\n        }\n        else if (strVar4 != \"\") {\n          unsignedVar7 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(unsignedVar7,strVar4);\n        }\n        pointerVar3 = (undefined8 *)*pointerVar3;\n      }\n    }\n    boolVar = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((boolVar) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar1 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar1 != 5) && (intVar1 != 2)) {\n        unsignedVar7 = **(undefined8 **)(in_stack_00000008 + 8);\n        unsignedVar6 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,unsignedVar6,unsignedVar7);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar2 = bfd_set_section_size(lVar25,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(lVar27,strVar5), charVar2 == '\\0')) {\n        strVar4 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        unsignedVar7 = dcgettext(0,strVar4,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,unsignedVar7);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,strVar5),\n         charVar2 == '\\0')) {\n        strVar4 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    size = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,size & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,copy_section,in_stack_00000008);\n  for (pointerVar3 = add_sections; pointerVar2 = update_sections, pointerVar3 != (undefined8 *)0x0;\n      pointerVar3 = (undefined8 *)*pointerVar3) {\n    charVar2 = bfd_set_section_contents(in_stack_00000008,pointerVar3[5],pointerVar3[4],0,pointerVar3[3]);\n    if (charVar2 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,pointerVar3[5],0);\n      return 0;\n    }\n  }\n  for (; pointerVar2 != (undefined8 *)0x0; pointerVar2 = (undefined8 *)*pointerVar2) {\n    unsignedVar7 = *(undefined8 *)(pointerVar2[5] + 0x60);\n    charVar2 = bfd_set_section_contents(in_stack_00000008,unsignedVar7,pointerVar2[4],0,pointerVar2[3]);\n    if (charVar2 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,unsignedVar7,0);\n      return 0;\n    }\n  }\n  if (longPtr1 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      unsignedVar7 = *unaff_R14;\n      unsignedVar6 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(unsignedVar6,unsignedVar7);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, charVar2 != '\\0')) {\n      unsignedVar3 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)unsignedVar3;\n      if ((char)unsignedVar3 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        charVar2 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (charVar2 != '\\0') {\n          return uVar24;\n        }\n        unsignedVar7 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(unsignedVar7,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          unsignedVar7 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(unsignedVar7);\n          return uVar24;\n        }\n        unsignedVar7 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(unsignedVar7);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      unsignedVar7 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,unsignedVar7);\n    }\n    else {\n      unsignedVar7 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,unsignedVar7,lVar25);\n    }\n    return 0;\n  }\n  ptrVar2 = (long *)0x0;\n  pointerVar3 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointerVar3 == (undefined8 *)0x0) {\n      do {\n        ptrVar2 = (long *)longPtr1[3];\n        free((void *)longPtr1[1]);\n        free(longPtr1);\n        longPtr1 = ptrVar2;\n      } while (ptrVar2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointerVar3[0x1a] + 4) == 7)) &&\n       (charVar2 = startswith_lto_priv_0_lto_priv_0(*pointerVar3,\".gnu.build.attributes\"), charVar2 != '\\0'))\n    {\n      if (ptrVar2 == (long *)0x0) {\n        ptrVar2 = longPtr1;\n      }\n      ptrVar1 = longPtr1;\n      if (*(undefined8 **)(*ptrVar2 + 0x60) == pointerVar3) {\nLAB_0010625f:\n        strVar4 = \"error: failed to merge notes\";\n        if (ptrVar2[1] != 0) {\n          charVar2 = bfd_set_section_contents(in_stack_00000008,pointerVar3,ptrVar2[1],0,ptrVar2[2]);\n          if (charVar2 == '\\0') {\n            unsignedVar7 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,pointerVar3,unsignedVar7);\n            return 0;\n          }\n          ptrVar2 = (long *)ptrVar2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          ptrVar2 = ptrVar1;\n          if (*(undefined8 **)(*ptrVar1 + 0x60) == pointerVar3) goto LAB_0010625f;\n          ptrVar2 = (long *)ptrVar1[3];\n          ptrVar1 = ptrVar2;\n        } while (ptrVar2 != (long *)0x0);\n        strVar4 = \"error: failed to locate merged notes\";\n      }\n      unsignedVar7 = dcgettext(0,strVar4,5);\n      bfd_nonfatal_message(0,in_stack_00000008,pointerVar3,unsignedVar7);\n    }\nLAB_001061be:\n    pointerVar3 = (undefined8 *)pointerVar3[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debugging_information_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input"
            },
            "code": "\nvoid hashString_00108800(undefined8 *input)\n\n{\n  htab_hash_string(*input);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_demangle_template",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "unwind_linked_list_0010c1c6",
                "param_2": "head_ptr",
                "cVar2": "result",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined unwind_linked_list_0010c1c6(undefined8 param_1,long head_ptr,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *puVar1;\n  char result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(head_ptr + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(head_ptr + 0x78) = 0;\n      return 1;\n    }\n    result = debug_record_variable\n                      (param_1,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_6,param_5\n                      );\n    if (result == '\\0') break;\n    puVar1 = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = puVar1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "unwind_linked_list_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_typedef_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "uVar1": "numSymbols",
                "lVar2": "symbol",
                "cVar3": "isSymbolSpecified",
                "unaff_RBX": "baseAddress",
                "puVar4": "resultArray",
                "puVar5": "resultArrayPtr",
                "unaff_RBP": "frameBase",
                "uVar6": "index",
                "unaff_R13": "symbolArray",
                "strip_symbols": "stripSymbols"
            },
            "code": "\nvoid processSymbols_001082df(void)\n\n{\n  uint numSymbols;\n  long symbol;\n  char isSymbolSpecified;\n  long baseAddress;\n  undefined8 *resultArray;\n  undefined8 *resultArrayPtr;\n  long frameBase;\n  ulong index;\n  undefined8 *symbolArray;\n  \n  numSymbols = *(uint *)(baseAddress + 0x78);\n  if (stripSymbols == 7) {\n    resultArray = symbolArray;\n    for (index = 0; index != numSymbols; index = index + 1) {\n      resultArrayPtr = resultArray;\n      if (((*(long **)symbolArray[index] != (long *)0x0) &&\n          (symbol = **(long **)symbolArray[index], symbol != 0)) &&\n         (isSymbolSpecified = is_specified_symbol(*(undefined8 *)(symbol + 8),keep_specific_htab), isSymbolSpecified != '\\0')\n         ) {\n        resultArrayPtr = resultArray + 1;\n        *resultArray = symbolArray[index];\n      }\n      resultArray = resultArrayPtr;\n    }\n    *resultArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(frameBase + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbols_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_contents_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofIndicator",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMsg",
                "__stream": "fileStream",
                "uVar5": "allocatedMemory",
                "sVar6": "bytesRead",
                "lVar7": "currentPosition",
                "lVar8": "currentBufferSize"
            },
            "code": "\nvoid readFileAndStoreContents_00114d60(long fileInfo)\n\n{\n  int eofIndicator;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMsg;\n  FILE *fileStream;\n  undefined8 allocatedMemory;\n  size_t bytesRead;\n  long currentPosition;\n  long currentBufferSize;\n  \n  fileStream = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorString = strerror(*errnoLocation);\n    allocatedMemory = *(undefined8 *)(fileInfo + 0x10);\n    errorMsg = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorMsg,allocatedMemory,errorString);\n  }\n  currentBufferSize = 0x1000;\n  currentPosition = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocatedMemory;\n  while( true ) {\n    eofIndicator = feof(fileStream);\n    if (eofIndicator != 0) {\n      *(long *)(fileInfo + 0x18) = currentPosition;\n      fclose(fileStream);\n      return;\n    }\n    if (currentPosition == currentBufferSize) {\n      currentBufferSize = currentPosition * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(fileInfo + 0x20),currentBufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = allocatedMemory;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + currentPosition),1,currentBufferSize - currentPosition,fileStream);\n    eofIndicator = ferror(fileStream);\n    if (eofIndicator != 0) break;\n    currentPosition = currentPosition + bytesRead;\n  }\n  allocatedMemory = *(undefined8 *)(fileInfo + 0x10);\n  errorMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorMsg,allocatedMemory);\n}\n\n",
            "called": [
                "section_add_load_file.cold",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_and_store_contents_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_section_not_found_error_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionNotFoundError_00108808(void)\n\n{\n  undefined8 sectionPtr;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionPtr = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(errorMessage,sectionPtr);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_section_not_found_error_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_and_store_lines_00104d1c",
                "ppbVar2": "slot_pointer",
                "pbVar3": "next_character",
                "bVar4": "current_character",
                "pbVar5": "next_line",
                "pbVar6": "current_line",
                "pbVar7": "next_character_temp",
                "unaff_EBP": "counter",
                "unaff_R13": "error_message",
                "unaff_R14": "current_new_line",
                "unaff_R15": "current_line_temp",
                "in_stack_00000008": "context",
                "in_stack_00000010": "result"
            },
            "code": "\nvoid parse_and_store_lines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **slot_pointer;\n  byte *next_character;\n  byte current_character;\n  byte *next_line;\n  int counter;\n  byte *current_line;\n  undefined8 error_message;\n  byte *next_character_temp;\n  byte *current_new_line;\n  byte *current_line_temp;\n  undefined8 context;\n  undefined8 *result;\n  \n  *current_new_line = 0;\nLAB_00114520:\n  current_new_line = current_new_line + 1;\n  do {\n    current_character = *current_new_line;\n    next_character_temp = current_new_line;\n    if (current_character == 10) {\n      *current_new_line = 0;\n      if (current_new_line[1] == 0xd) {\n        next_character_temp = current_new_line + 1;\n        next_line = current_new_line + 2;\n      }\n      else {\n        next_line = current_new_line + 1;\n      }\n    }\n    else if ((char)current_character < '\\v') {\n      if (current_character != 0) goto LAB_00114520;\n      next_line = current_new_line + 1;\n    }\n    else {\n      if (current_character != 0xd) break;\n      *current_new_line = 0;\n      next_line = current_new_line + 1;\n      if (current_new_line[1] == 10) {\n        next_line = current_new_line + 2;\n        next_character_temp = current_new_line + 1;\n      }\n    }\n    current_character = *current_line_temp;\n    while ((current_character == 0x20 || (current_line = current_line_temp, current_character == 9))) {\n      current_line = current_line_temp + 1;\n      current_line_temp = current_line_temp + 1;\n      current_character = *current_line;\n    }\n    do {\n      if ((current_character == 10) || (current_character == 0xd)) goto LAB_00114676;\n      if (current_character == 0) goto LAB_00114599;\n      current_character = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_character != 0x20) && (current_character != 9));\n    if ((char)current_character < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_character & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_character = current_line[1];\n      if ((((((current_character == 9) || (current_character == 0x20)) &&\n            ((current_character = current_line[2], current_character == 9 || (current_character == 0x20)))) &&\n           ((current_character = current_line[3], current_character == 9 || (current_character == 0x20)))) &&\n          ((current_character = current_line[4], current_character == 9 || (current_character == 0x20)))) &&\n         ((current_character = current_line[5], current_character == 9 || (current_character == 0x20)))) {\n        current_character = current_line[6];\n        next_character = current_line + 6;\n        if ((current_character == 9) || (current_character == 0x20)) {\n          do {\n            do {\n              current_character = next_character[1];\n              next_character = next_character + 1;\n            } while (current_character == 0x20);\n          } while (current_character == 9);\n        }\n      }\n      if ((0xd < current_character) || ((-0x2402L >> (current_character & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(uVar1,context,counter);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (current_line_temp < current_line) {\n      slot_pointer = (byte **)htab_find_slot();\n      *slot_pointer = current_line_temp;\n    }\n    counter = counter + 1;\n    current_new_line = next_line;\n    current_line_temp = next_line;\n    if (next_character_temp[1] == 0) {\n      *result = error_message;\n      return;\n    }\n  } while( true );\n  if (current_character == 0x23) {\n    parse_and_store_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_store_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_report_bad_number_00119940",
                "param_1": "input_number",
                "param_2": "error_message",
                "uVar1": "translated_error_message",
                "local_20": "vma_scan_result"
            },
            "code": "\nvoid validate_and_report_bad_number_00119940(undefined8 input_number,undefined8 error_message)\n\n{\n  undefined8 translated_error_message;\n  char *vma_scan_result [2];\n  \n  bfd_scan_vma(input_number,vma_scan_result,0);\n  if (*vma_scan_result[0] == '\\0') {\n    return;\n  }\n  translated_error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(translated_error_message,error_message,input_number);\n}\n\n",
            "called": [
                "parse_vma.cold",
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "validate_and_report_bad_number_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "data",
                "param_2": "address",
                "param_3": "flag",
                "in_RAX": "result"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 data,long address,uint flag)\n\n{\n  long result;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(address + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(address + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(result + 0x380) + 0x78))(data,flag != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "main",
                "FUN_00107880",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00104ea2",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "input3",
                "param_5": "input4",
                "cVar1": "result",
                "uVar2": "output",
                "puVar3": "ptr",
                "auVar4": "buffer"
            },
            "code": "\nundefined8\nprocessFunction_00113a4d(undefined8 input1,undefined8 input2,long data,undefined8 input3,\n            undefined8 input4)\n\n{\n  char result;\n  undefined8 output;\n  undefined8 *ptr;\n  undefined buffer [16];\n  \n  result = debug_write_linenos_constprop_0(input1,input2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = stab_start_block_lto_priv_0(input2,*(undefined8 *)(data + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = debug_write_name_constprop_0(input1,input2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = processFunction_00113a4d(input1,input2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    buffer = debug_write_linenos_constprop_0(input1,input2,*(undefined8 *)(data + 0x20));\n    if (buffer[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return buffer._0_8_;\n      }\n      output = stab_end_block_lto_priv_0\n                        (input2,*(undefined8 *)(data + 0x20),buffer._8_8_,input4);\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_block.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "debug_write_name.constprop.0",
                "stab_end_block.lto_priv.0",
                "debug_write_block.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_name.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryAddress",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryAddress;\n  undefined8 returnValue;\n  \n  returnValue = returnValue;\n  free(memoryAddress);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "main",
                "setup_section",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "find_section_list",
                "is_specified_symbol_predicate"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_with_type_00113b71",
                "param_1": "inputValue",
                "lVar1": "typePointer"
            },
            "code": "\nlong initializeWithType_00113b71(long inputValue)\n\n{\n  long typePointer;\n  \n  if (inputValue != 0) {\n    typePointer = debug_make_type_constprop_0(0x14,0);\n    if (typePointer == 0) {\n      typePointer = 0;\n    }\n    else {\n      *(long *)(typePointer + 0x10) = inputValue;\n    }\n    return typePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_with_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "push_type_or_string_00109dfe",
                "param_1": "functionParam",
                "lVar1": "counter",
                "local_40": "formattedString"
            },
            "code": "\nvoid pushTypeOrString_00109dfe(long functionParam)\n\n{\n  long counter;\n  char formattedString [40];\n  \n  if (*(long *)(functionParam + 0x70) != 0) {\n    stab_push_defined_type(functionParam,*(long *)(functionParam + 0x70),0);\n    return;\n  }\n  counter = *(long *)(functionParam + 0x68);\n  *(long *)(functionParam + 0x68) = counter + 1;\n  *(long *)(functionParam + 0x70) = counter;\n  sprintf(formattedString,\"%ld=%ld\",counter,counter);\n  stab_push_string(functionParam,formattedString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_type_or_string_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_string_00109bbb",
                "param_1": "strPointer",
                "__s": "stringPtr",
                "sVar1": "stringLen"
            },
            "code": "\nbool appendSemicolonToString_00109bbb(long strPointer)\n\n{\n  char *stringPtr;\n  size_t stringLen;\n  \n  if (*(long *)(strPointer + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(strPointer + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLen = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLen) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_semicolon_to_string_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "build_string_from_pointers_0010ae0e",
                "param_1": "inputPtr",
                "lVar1": "ptr1",
                "lVar2": "ptr2",
                "__ptr": "tempPtr",
                "pcVar3": "strPtr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "newStrPtr",
                "uVar7": "result",
                "lVar8": "totalLen",
                "uVar9": "counter",
                "uVar10": "numPtrs"
            },
            "code": "\nundefined8 buildStringFromPointers_0010ae0e(long inputPtr)\n\n{\n  long ptr1;\n  long ptr2;\n  void *tempPtr;\n  char *strPtr;\n  size_t len1;\n  size_t len2;\n  char *newStrPtr;\n  undefined8 result;\n  long totalLen;\n  uint counter;\n  ulong numPtrs;\n  \n  result = 0;\n  ptr1 = *(long *)(inputPtr + 0x60);\n  if (((ptr1 != 0) && (*(char **)(ptr1 + 8) != (char *)0x0)) &&\n     (newStrPtr = *(char **)(ptr1 + 0x20), newStrPtr != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptr1 + 8));\n    len2 = strlen(newStrPtr);\n    ptr2 = *(long *)(ptr1 + 0x28);\n    if (ptr2 == 0) {\n      totalLen = len1 + len2 + 10;\n      numPtrs = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      numPtrs = 0;\n      while( true ) {\n        newStrPtr = *(char **)(ptr2 + numPtrs * 8);\n        if (newStrPtr == (char *)0x0) break;\n        len1 = strlen(newStrPtr);\n        numPtrs = (ulong)((int)numPtrs + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(ptr1 + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x38));\n      totalLen = totalLen + len1;\n    }\n    newStrPtr = (char *)xmalloc(totalLen);\n    ptr1 = *(long *)(inputPtr + 0x60);\n    strcpy(newStrPtr,*(char **)(ptr1 + 8));\n    if (*(long *)(ptr1 + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(newStrPtr);\n      sprintf(newStrPtr + len1,\"!%u,\",numPtrs);\n      while( true ) {\n        ptr1 = *(long *)(inputPtr + 0x60);\n        numPtrs = (ulong)counter;\n        tempPtr = *(void **)(ptr1 + 0x28);\n        strPtr = *(char **)((long)tempPtr + numPtrs * 8);\n        if (strPtr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(newStrPtr,strPtr);\n        free(*(void **)(*(long *)(ptr1 + 0x28) + numPtrs * 8));\n      }\n      free(tempPtr);\n      *(undefined8 *)(*(long *)(inputPtr + 0x60) + 0x28) = 0;\n    }\n    ptr1 = *(long *)(inputPtr + 0x60);\n    strcat(newStrPtr,*(char **)(ptr1 + 0x20));\n    free(*(void **)(ptr1 + 0x20));\n    ptr1 = *(long *)(inputPtr + 0x60);\n    *(undefined8 *)(ptr1 + 0x20) = 0;\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      strcat(newStrPtr,*(char **)(ptr1 + 0x30));\n      free(*(void **)(ptr1 + 0x30));\n      *(undefined8 *)(*(long *)(inputPtr + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(newStrPtr);\n    ptr1 = *(long *)(inputPtr + 0x60);\n    *(undefined2 *)(newStrPtr + len1) = 0x3b;\n    strPtr = *(char **)(ptr1 + 0x38);\n    if (strPtr != (char *)0x0) {\n      strcpy(newStrPtr + len1 + 1,strPtr);\n      free(*(void **)(ptr1 + 0x38));\n      *(undefined8 *)(*(long *)(inputPtr + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(inputPtr + 0x60) + 8));\n    ptr1 = *(long *)(inputPtr + 0x60);\n    *(char **)(ptr1 + 8) = newStrPtr;\n    result = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strcat",
                "strcpy",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "build_string_from_pointers_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "write_debug_information_001135a5",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "param_3": "data",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "currentData",
                "puVar5": "additionalData"
            },
            "code": "\nundefined8 writeDebugInformation_001135a5(undefined8 outputFile,undefined8 inputFile,long data)\n\n{\n  int index;\n  char result;\n  undefined8 returnValue;\n  undefined8 *currentData;\n  undefined8 *additionalData;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = debug_write_type_constprop_0(outputFile,inputFile,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      returnValue = stab_typdef_lto_priv_0(inputFile,*(undefined8 *)(data + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = debug_write_type_constprop_0(outputFile,inputFile,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      returnValue = stab_tag_lto_priv_0(inputFile,*(undefined8 *)(data + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = debug_write_type_constprop_0\n                      (outputFile,inputFile,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = stab_variable_lto_priv_0\n                        (inputFile,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    additionalData = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    returnValue = *(undefined8 *)(data + 8);\n    result = debug_write_linenos_constprop_0(outputFile,inputFile,*(undefined8 *)(additionalData[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = debug_write_type_constprop_0(outputFile,inputFile,*additionalData,0), result != '\\0')) &&\n       (result = stab_start_function_lto_priv_0(inputFile,returnValue,index == 2), result != '\\0')) {\n      for (currentData = (undefined8 *)additionalData[1]; currentData != (undefined8 *)0x0;\n          currentData = (undefined8 *)*currentData) {\n        result = debug_write_type_constprop_0(outputFile,inputFile,currentData[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = stab_function_parameter_lto_priv_0(inputFile,currentData[1],*(undefined4 *)(currentData + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      additionalData = (undefined8 *)additionalData[2];\n      while( true ) {\n        if (additionalData == (undefined8 *)0x0) {\n          returnValue = stab_end_function_lto_priv_0(inputFile);\n          return returnValue;\n        }\n        result = debug_write_block_constprop_0(outputFile,inputFile,additionalData);\n        if (result == '\\0') break;\n        additionalData = (undefined8 *)*additionalData;\n      }\n    }\n    break;\n  case 4:\n    returnValue = stab_int_constant_lto_priv_0\n                      (inputFile,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(data + 0x20),inputFile,*(undefined8 *)(data + 8));\n    return returnValue;\n  case 6:\n    result = debug_write_type_constprop_0(outputFile,inputFile,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      returnValue = stab_typed_constant_lto_priv_0\n                        (inputFile,*(undefined8 *)(data + 8),\n                         *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_end_function.lto_priv.0",
                "stab_variable.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "abort",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "debug_write_block.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_float_constant.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "write_debug_information_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = detect_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUNC_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_file_flags",
                "dcgettext",
                "printf",
                "FUN_001152b6",
                "bfd_set_start_address",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "reverse_eng_function_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "var1",
                "iVar2": "var2",
                "pcVar3": "result",
                "plVar4": "ptrList",
                "pcVar5": "errorMessage",
                "sVar6": "length",
                "__ptr": "ptr",
                "lVar7": "returnValue",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * reverseEngFunction_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint var1;\n  int var2;\n  char *result;\n  long *ptrList;\n  char *errorMessage;\n  size_t length;\n  void *ptr;\n  long returnValue;\n  undefined localArray [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    var1 = *param3;\n    if (0x29 < var1) break;\n    if (0x17 < var1) {\n      switch(var1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)reverseEngFunction_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)debug_make_volatile_type_isra_0(result);\n            return result;\n          case 0x1b:\n            result = (char *)debug_make_const_type_isra_0(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)debug_make_pointer_type_isra_0(result);\n            return result;\n          case 0x23:\n            result = (char *)debug_make_reference_type_isra_0(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        if (result == (char *)0x0) {\n          errorMessage = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        var2 = strcmp(result,\"signed char\");\n        if (var2 == 0) {\nLAB_0010b406:\n          errorMessage = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"bool\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"char\");\n        if (var2 == 0) goto LAB_0010b406;\n        var2 = strcmp(result,\"double\");\n        if ((var2 == 0) || (var2 = strcmp(result,\"long double\"), var2 == 0)) {\n          errorMessage = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"float\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"__float128\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned char\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"int\");\n        if (var2 == 0) {\nLAB_0010b504:\n          errorMessage = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned int\");\n        if (var2 == 0) {\nLAB_0010b528:\n          errorMessage = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"long\");\n        if (var2 == 0) goto LAB_0010b504;\n        var2 = strcmp(result,\"unsigned long\");\n        if (var2 == 0) goto LAB_0010b528;\n        var2 = strcmp(result,\"__int128\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned __int128\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"short\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned short\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"void\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"wchar_t\");\n        if (var2 == 0) goto LAB_0010b528;\n        var2 = strcmp(result,\"long long\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"unsigned long long\");\n        if (var2 == 0) {\n          errorMessage = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        var2 = strcmp(result,\"...\");\n        if (var2 == 0) {\n          errorMessage = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          errorMessage = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          errorMessage = (char *)dcgettext(0,errorMessage,5);\n          fprintf(_stderr,errorMessage);\n        }\n        errorMessage = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return errorMessage;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          ptr = (void *)reverseEngFunction_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          returnValue = stab_demangle_v3_arglist(param1,param2,*(undefined8 *)(param3 + 6),localArray);\n          if (returnValue != 0) {\n            result = (char *)debug_make_function_type_isra_0(ptr,returnValue,localArray[0]);\n            return result;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (var1 != 1) {\n      if (var1 == 4) {\n        result = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        errorMessage = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          length = strlen(result);\n          errorMessage = (char *)stab_find_tagged_type(param1,param2,result,length & 0xffffffff,9);\n          free(result);\n          return errorMessage;\n        }\nLAB_0010b3d3:\n        errorMessage = (char *)dcgettext(0,errorMessage,5);\n        fprintf(_stderr,errorMessage);\n        return result;\n      }\n      if (var1 == 0) {\n        if ((param4 == 0) ||\n           (ptrList = (long *)debug_get_fields_isra_0(param4), ptrList == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = reverseEngFunction_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)var1);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*ptrList == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)stab_find_tagged_type\n                               (param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result;\n  }\n  result = *(char **)(*ptrList + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  errorMessage = (char *)debug_get_type_name_constprop_0(result);\n  if (errorMessage != (char *)0x0) {\n    length = strlen(errorMessage);\n    if ((param3[6] == (uint)length) &&\n       (var2 = strncmp(errorMessage,*(char **)(param3 + 4),(long)(int)param3[6]), var2 == 0)) {\n      return result;\n    }\n  }\n  ptrList = ptrList + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "stab_find_tagged_type",
                "strncmp",
                "abort",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_type.constprop.0",
                "stab_demangle_v3_arglist",
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "cplus_demangle_print",
                "debug_get_fields.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "strcmp",
                "debug_make_reference_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_v3_arglist"
            ],
            "imported": false,
            "current_name": "reverse_eng_function_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "sanitize_input_00104c36",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineNumber",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "errorMsgFormat",
                "in_stack_00000010": "errorHandler",
                "in_CL": "currentCharValue",
                "pbVar5": "linePtr",
                "ppbVar2": "slotPtr",
                "pbVar3": "tempPtr",
                "bVar4": "tempChar",
                "unaff_R14": "previousChar",
                "uVar1": "errMsg",
                "unaff_R13": "returnValue"
            },
            "code": "\nvoid sanitizeInput_00104c36(void)\n\n{\n  undefined8 errMsg;\n  byte **slotPtr;\n  byte *tempPtr;\n  byte currentCharValue;\n  byte tempChar;\n  byte *currentLine;\n  int lineNumber;\n  byte *linePtr;\n  undefined8 returnValue;\n  byte *previousChar;\n  byte *currentChar;\n  undefined8 errorMsgFormat;\n  undefined8 *errorHandler;\n  \n  do {\n    linePtr = currentChar;\n    if (currentCharValue == 9) goto LAB_00104c3f;\n    do {\n      if ((currentCharValue == 10) || (currentCharValue == 0xd)) goto LAB_00114676;\n      if (currentCharValue == 0) goto LAB_00114599;\n      currentCharValue = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((currentCharValue != 0x20) && (currentCharValue != 9));\n    if ((char)currentCharValue < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      tempChar = linePtr[1];\n      if ((((((tempChar == 9) || (tempChar == 0x20)) &&\n            ((tempChar = linePtr[2], tempChar == 9 || (tempChar == 0x20)))) &&\n           ((tempChar = linePtr[3], tempChar == 9 || (tempChar == 0x20)))) &&\n          ((tempChar = linePtr[4], tempChar == 9 || (tempChar == 0x20)))) &&\n         ((tempChar = linePtr[5], tempChar == 9 || (tempChar == 0x20)))) {\n        tempChar = linePtr[6];\n        tempPtr = linePtr + 6;\n        if ((tempChar == 9) || (tempChar == 0x20)) {\n          do {\n            do {\n              tempChar = tempPtr[1];\n              tempPtr = tempPtr + 1;\n            } while (tempChar == 0x20);\n          } while (tempChar == 9);\n        }\n      }\n      if ((0xd < tempChar) || ((-0x2402L >> (tempChar & 0x3f) & 1U) != 0)) {\n        errMsg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(errMsg,errorMsgFormat,lineNumber);\n      }\n    }\nLAB_00114599:\n    *linePtr = 0;\n    if (currentChar < linePtr) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = currentChar;\n    }\n    lineNumber = lineNumber + 1;\n    linePtr = currentLine;\n    if (previousChar[1] == 0) {\n      *errorHandler = returnValue;\n      return;\n    }\n    for (; tempChar = *linePtr, previousChar = linePtr, tempChar != 10; linePtr = linePtr + 1) {\n      if ((char)tempChar < '\\v') {\n        if (tempChar == 0) {\n          tempPtr = linePtr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (tempChar == 0xd) {\n          *linePtr = 0;\n          tempPtr = linePtr + 1;\n          if (linePtr[1] == 10) {\n            tempPtr = linePtr + 2;\n            previousChar = linePtr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (tempChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *linePtr = 0;\n    if (linePtr[1] == 0xd) {\n      previousChar = linePtr + 1;\n      tempPtr = linePtr + 2;\n    }\n    else {\n      tempPtr = linePtr + 1;\n    }\nLAB_00114553:\n    currentCharValue = *currentLine;\n    currentChar = currentLine;\n    while (currentLine = tempPtr, currentCharValue == 0x20) {\nLAB_00104c3f:\n      linePtr = currentChar + 1;\n      currentChar = currentChar + 1;\n      tempPtr = currentLine;\n      currentCharValue = *linePtr;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "sanitize_input_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "FUNC_0010554f"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 FUNC_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,get_sections,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = gap_fill_set != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_7,*plVar28);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (pad_to_set != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = pad_to * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaff_R14,1,plVar28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = parse_stab(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = finish_stab(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = start_stab_constprop_0(unaff_R14,0,plVar28), lVar14 == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_stab(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar14 != 0) && (cVar7 = finish_stab(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = debug_set_filename(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = debug_set_filename(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,puVar26,0,__ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(__ptr_02,iVar10 + iVar27,\n                                                *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = isympp;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = add_symbols;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = add_sym_list;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = create_new_symbol(puVar26);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(redefine_specific_htab);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(redefine_specific_htab);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = section_rename_list, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = prefix_symbols_string;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = prefix_symbols_string;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = is_strip_section_isra_0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = is_specified_symbol(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(keepglobal_specific_htab), lVar37 == 0 ||\n                      (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar26 = add_sym_list;\n        iVar10 = add_symbols;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = add_symbols;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,isympp);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(strip_specific_htab);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(keep_specific_htab), lVar14 != 0 ||\n           (lVar14 = htab_elements(localize_specific_htab), lVar14 != 0)) ||\n          (lVar14 = htab_elements(globalize_specific_htab), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(keepglobal_specific_htab), lVar14 != 0 ||\n          (lVar14 = htab_elements(weaken_specific_htab), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(redefine_specific_htab), lVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar26 = add_sections; puVar4 = update_sections, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = startswith_lto_priv_0_lto_priv_0(*puVar26,\".gnu.build.attributes\"),\n            cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = gnu_debuglink_filename\n       , cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = gap_fill;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar29 = use_alt_mach_code;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "is_strip_section.isra.0",
                "is_specified_symbol",
                "finish_stab",
                "bfd_is_local_label",
                "fatal",
                "bfd_map_over_sections",
                "strlen",
                "concat",
                "dcgettext",
                "bfd_set_section_size",
                "create_new_symbol",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "bfd_set_symtab",
                "htab_find",
                "debug_end_block",
                "copy_section",
                "bfd_coff_get_syment",
                "strcmp",
                "debug_record_function",
                "non_fatal",
                "htab_traverse",
                "free",
                "bfd_map_over_sections",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "free_saved_stabs",
                "strcpy",
                "parse_stab",
                "bfd_alt_mach_code",
                "bfd_decode_symclass",
                "debug_set_filename",
                "bfd_make_section_with_flags",
                "bfd_set_error",
                "bfd_errmsg",
                "debug_record_line",
                "save_stab",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_elements",
                "bfd_fill_in_gnu_debuglink_section",
                "qsort",
                "mark_symbols_used_in_relocations",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_coff_get_auxent",
                "start_stab.constprop.0",
                "bfd_octets_per_byte",
                "get_sections",
                "bfd_set_section_contents",
                "bfd_get_error",
                "xstrdup",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "compare_section_lma",
                "bfd_get_section_contents",
                "parse_coff_symbol.constprop.0.isra.0",
                "is_specified_symbol_predicate",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "FUN_0010554f",
                "stab_find_tagged_type",
                "find_section_list",
                "debug_set_class_id.lto_priv.0",
                "eq_string_redefnode",
                "main",
                "parse_stab",
                "setup_section",
                "is_strip_section_1.isra.0",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_tag_type",
                "convert_efi_target",
                "debug_find_named_type",
                "skip_section"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_push_to_stab_00109cf4",
                "param_1": "stabPtr",
                "param_2": "inputValue",
                "param_3": "flag",
                "local_3c": "convertedValue"
            },
            "code": "\nvoid convertAndPushToStab_00109cf4(undefined8 stabPtr,undefined8 inputValue,undefined4 flag)\n\n{\n  char convertedValue [28];\n  \n  sprintf(convertedValue,\"%ld\",inputValue);\n  stab_push_string(stabPtr,convertedValue,inputValue,0,flag);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "convert_and_push_to_stab_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_function_00109ab1",
                "param_1": "string_ptr",
                "param_2": "output_args",
                "param_3": "input_arg_1",
                "param_4": "input_arg_2",
                "param_5": "input_arg_3",
                "uVar1": "result_1",
                "pcVar2": "current_char",
                "uVar3": "result_2",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_function_00109ab1(char **string_ptr,undefined4 *output_args,undefined8 input_arg_1,undefined8 input_arg_2,\n            undefined8 input_arg_3)\n\n{\n  undefined4 result_1;\n  char *current_char;\n  undefined8 result_2;\n  undefined return_value [16];\n  \n  current_char = *string_ptr;\n  if (*current_char == '(') {\n    *string_ptr = current_char + 1;\n    result_1 = parse_number(string_ptr,0);\n    *output_args = result_1;\n    if (**string_ptr == ',') {\n      *string_ptr = *string_ptr + 1;\n      result_1 = parse_number(string_ptr,0,input_arg_1);\n      output_args[1] = result_1;\n      if (**string_ptr == ')') {\n        current_char = *string_ptr + 1;\n        *string_ptr = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char);\n    result_2 = 0;\n  }\n  else {\n    *output_args = 0;\n    current_char = (char *)parse_number(string_ptr,0);\n    output_args[1] = (int)current_char;\nLAB_00109b25:\n    result_2 = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = input_arg_3;\n  return_value._0_8_ = result_2;\n  return return_value;\n}\n\n",
            "called": [
                "parse_number",
                "bad_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_function_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "input_param",
                "uVar1": "result",
                "cVar2": "spec_symbol_check",
                "uVar3": "strip_section_result",
                "lVar4": "group_signature",
                "lVar5": "temp_group_signature"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long input_param)\n\n{\n  undefined8 result;\n  char spec_symbol_check;\n  undefined4 strip_section_result;\n  long group_signature;\n  long temp_group_signature;\n  \n  strip_section_result = is_strip_section_1_isra_0();\n  if ((char)strip_section_result == '\\0') {\n    if ((*(byte *)(input_param + 0x27) & 2) == 0) {\n      return strip_section_result;\n    }\n    group_signature = group_signature_isra_0(*(undefined8 *)(input_param + 0xd0),*(undefined8 *)(input_param + 0xe0));\n    if ((group_signature != 0) &&\n       (((result = *(undefined8 *)(group_signature + 8), strip_symbols != 7 ||\n         (spec_symbol_check = is_specified_symbol(result,keep_specific_htab), spec_symbol_check != '\\0')) &&\n        (spec_symbol_check = is_specified_symbol(result,strip_specific_htab), spec_symbol_check == '\\0')))) {\n      group_signature = *(long *)(*(long *)(input_param + 0xd0) + 0xc0);\n      temp_group_signature = group_signature;\n      do {\n        if (temp_group_signature == 0) {\n          return 1;\n        }\n        spec_symbol_check = is_strip_section_1_isra_0(temp_group_signature);\n        if (spec_symbol_check == '\\0') {\n          return strip_section_result;\n        }\n        temp_group_signature = *(long *)(*(long *)(temp_group_signature + 0xd0) + 0xc0);\n      } while (group_signature != temp_group_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0",
                "is_specified_symbol",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "skip_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "concatenate_strings_0010a77a",
                "param_1": "input",
                "uVar1": "flag",
                "lVar2": "dataStruct",
                "__s": "string1",
                "uVar4": "returnValue",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "concatenatedString",
                "uVar3": "value"
            },
            "code": "\nundefined4 concatenateStrings_0010a77a(long input)\n\n{\n  undefined flag;\n  long dataStruct;\n  char *string1;\n  undefined8 value;\n  undefined4 returnValue;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenatedString;\n  \n  dataStruct = *(long *)(input + 0x60);\n  if ((dataStruct != 0) && (string1 = *(char **)(dataStruct + 0x20), string1 != (char *)0x0)) {\n    returnValue = *(undefined4 *)(dataStruct + 0x18);\n    flag = *(undefined *)(dataStruct + 0x1c);\n    value = *(undefined8 *)(dataStruct + 0x10);\n    string2 = (char *)stab_pop_type();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    concatenatedString = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(concatenatedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    returnValue = stab_push_string(input,concatenatedString,value,flag,returnValue);\n    if ((char)returnValue != '\\0') {\n      free(concatenatedString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_and_report_error_0010543c",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar1": "fileDescriptor",
                "uVar4": "errorString",
                "unaff_RBP": "stackBasePointer"
            },
            "code": "\nvoid openAndReportError_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorString;\n  long stackBasePointer;\n  \n  errorLocation = __errno_location();\n  errorMessage = strerror(*errorLocation);\n  fileDescriptor = *(undefined8 *)(stackBasePointer + 0x10);\n  errorString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(errorString,fileDescriptor,errorMessage);\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "open_and_report_error_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "extract_formatted_string_0010a424",
                "param_1": "binaryAddress",
                "param_2": "condition",
                "param_3": "count",
                "param_4": "flag",
                "cVar1": "emptyTypeFlag",
                "bVar2": "typeFlag",
                "iVar3": "index",
                "uVar4": "result",
                "pcVar5": "str1",
                "__ptr": "arrayPtr",
                "uVar6": "typeValue",
                "__s": "str2",
                "sVar7": "len1",
                "sVar8": "len2",
                "__s_00": "formattedStr",
                "lVar9": "loopVar1",
                "bVar10": "typeFlag2",
                "lVar11": "loopVar2",
                "uVar12": "unknownValue"
            },
            "code": "\nundefined4 extractFormattedString_0010a424(long binaryAddress,char condition,int count,char flag)\n\n{\n  char emptyTypeFlag;\n  byte typeFlag;\n  int index;\n  undefined4 result;\n  char *str1;\n  undefined8 *arrayPtr;\n  undefined8 typeValue;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *formattedStr;\n  long loopVar1;\n  byte typeFlag2;\n  long loopVar2;\n  undefined unknownValue;\n  \n  if ((condition == '\\0') && (emptyTypeFlag = stab_empty_type_lto_priv_0(), emptyTypeFlag == '\\0')) {\n    return 0;\n  }\n  typeFlag2 = *(byte *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  str1 = (char *)stab_pop_type(binaryAddress);\n  if (count < 0) {\n    arrayPtr = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    unknownValue = 1;\n    if (typeFlag2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      arrayPtr = (undefined8 *)xmalloc((long)index * 8);\n      loopVar1 = (long)(count + -1);\n      do {\n        typeFlag = 1;\n        if (typeFlag2 == 0) {\n          typeFlag = *(byte *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n        }\n        typeValue = stab_pop_type(binaryAddress);\n        typeFlag2 = typeFlag & 1;\n        arrayPtr[loopVar1] = typeValue;\n        loopVar1 = loopVar1 + -1;\n      } while ((int)loopVar1 != -1);\n      if (flag == '\\0') {\n        emptyTypeFlag = stab_empty_type_lto_priv_0(binaryAddress);\n        if (emptyTypeFlag == '\\0') {\n          return 0;\n        }\n        typeFlag = 1;\n        if (typeFlag2 == 0) {\n          typeFlag = *(byte *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n        }\n        typeFlag2 = typeFlag & 1;\n        typeValue = stab_pop_type(binaryAddress);\n        arrayPtr[(long)index + -1] = typeValue;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    arrayPtr = (undefined8 *)0x0;\n    if (flag != '\\0') goto LAB_0010a582;\n    arrayPtr = (undefined8 *)xmalloc(8);\n    emptyTypeFlag = stab_empty_type_lto_priv_0(binaryAddress);\n    if (emptyTypeFlag == '\\0') {\n      return 0;\n    }\n    if ((typeFlag2 != 0) || (*(char *)(*(long *)(binaryAddress + 0x60) + 0x1c) != '\\0')) {\n      typeValue = stab_pop_type(binaryAddress);\n      count = 1;\n      unknownValue = 1;\n      *arrayPtr = typeValue;\n      goto LAB_0010a596;\n    }\n    typeValue = stab_pop_type(binaryAddress);\n    count = 1;\n    *arrayPtr = typeValue;\n  }\n  unknownValue = *(undefined *)(*(long *)(binaryAddress + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)stab_pop_type(binaryAddress);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  loopVar1 = len1 + 10 + len2;\n  for (loopVar2 = 0; (int)loopVar2 < count; loopVar2 = loopVar2 + 1) {\n    len1 = strlen((char *)arrayPtr[loopVar2]);\n    loopVar1 = loopVar1 + len1;\n  }\n  formattedStr = (char *)xmalloc(loopVar1);\n  sprintf(formattedStr,\"#%s,%s\",str1,str2);\n  loopVar1 = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    len1 = strlen(formattedStr);\n    if (count <= (int)loopVar1) break;\n    *(undefined2 *)(formattedStr + len1) = 0x2c;\n    str1 = (char *)arrayPtr[loopVar1];\n    loopVar1 = loopVar1 + 1;\n    strcpy(formattedStr + len1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(formattedStr + len1) = 0x3b;\n  free(arrayPtr);\n  result = stab_push_string(binaryAddress,formattedStr,0,unknownValue,0);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  free(formattedStr);\n  return result;\n}\n\n",
            "called": [
                "strcpy",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_empty_type.lto_priv.0",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_formatted_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "versionString",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 versionString)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "display_info.isra.0.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_00114c80",
                "param_1": "input_string",
                "param_2": "param_value",
                "param_3": "error_message",
                "param_4": "param_value2",
                "pcVar1": "equal_sign_position",
                "uVar2": "key_string",
                "auVar3": "extracted_values",
                "dcgettext": "getErrorMessage",
                "xmalloc": "allocateMemory",
                "xstrndup": "duplicateString",
                "fatal": "exitProgram"
            },
            "code": "\nundefined  [16] extractKeyValue_00114c80(char *input_string,undefined8 param_value,undefined8 error_message,undefined8 param_value2)\n\n{\n  char *equal_sign_position;\n  undefined8 key_string;\n  undefined extracted_values [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    extracted_values._0_8_ = (undefined8 *)allocateMemory(0x30);\n    key_string = duplicateString(input_string,(long)equal_sign_position - (long)input_string);\n    extracted_values._0_8_[2] = equal_sign_position + 1;\n    extracted_values._0_8_[1] = key_string;\n    extracted_values._0_8_[4] = 0;\n    extracted_values._0_8_[3] = 0;\n    *extracted_values._0_8_ = param_value;\n    extracted_values._8_8_ = param_value2;\n    return extracted_values;\n  }\n  key_string = getErrorMessage(0,\"bad format for %s\",5);\n                    \n  exitProgram(key_string,error_message);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_key_value_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_parameter_and_increment_memory_0010870e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptr"
            },
            "code": "\nvoid storeParameterAndIncrementMemory_0010870e(undefined8 param1,undefined8 param2,long *param3)\n\n{\n  undefined8 *ptr;\n  \n  ptr = (undefined8 *)*param3;\n  *ptr = param2;\n  *param3 = (long)(ptr + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_parameter_and_increment_memory_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_file",
                "param_2": "coff_symtab",
                "param_3": "debug_type_context",
                "param_5": "type_code",
                "param_6": "type_record",
                "param_7": "is_lto_object",
                "param_8": "debug_name",
                "lVar1": "symtab_entry",
                "cVar2": "error_flag",
                "uVar3": "bfd_error_code",
                "uVar4": "debug_make_type",
                "lVar5": "result",
                "uVar6": "error_message",
                "plVar7": "lto_type_slot",
                "__ptr": "enum_names",
                "__ptr_00": "enum_values",
                "bVar8": "type_shift",
                "iVar9": "loop_index",
                "pcVar10": "type_string",
                "uVar11": "type_mask",
                "lVar12": "enum_index",
                "uVar13": "type_flag",
                "uVar14": "array_size",
                "uVar15": "indirect_type"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_file,long *coff_symtab,long debug_type_context,undefined8 param_4,uint type_code,\n                 long *type_record,char is_lto_object,undefined8 debug_name)\n\n{\n  long symtab_entry;\n  char error_flag;\n  undefined4 bfd_error_code;\n  undefined8 debug_make_type;\n  long result;\n  undefined8 error_message;\n  long *lto_type_slot;\n  void *enum_names;\n  void *enum_values;\n  byte type_shift;\n  int loop_index;\n  char *type_string;\n  ulong type_mask;\n  long enum_index;\n  uint type_flag;\n  uint array_size;\n  undefined8 indirect_type;\n  undefined local_68 [32];\n  char local_48;\n  byte local_47;\n  \n  result = *(long *)(coff_file + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    type_flag = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    type_mask = (ulong)(type_code & *(uint *)(result + 0x40));\n    type_shift = (byte)*(undefined4 *)(result + 0x3c);\n    type_flag = (type_flag ^ type_code) & *(uint *)(result + 0x38) ^ type_flag;\n    if (type_mask == 1L << (type_shift & 0x3f)) {\n      debug_make_type = parse_coff_type_0010dac0(coff_file,coff_symtab,debug_type_context,param_4,type_flag,type_record,is_lto_object,debug_name);\n      result = debug_make_pointer_type_isra_0(debug_make_type);\n      return result;\n    }\n    if (type_mask != 2L << (type_shift & 0x3f)) {\n      if (type_mask != 3L << (type_shift & 0x3f)) {\n        debug_make_type = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          type_flag);\n        non_fatal(debug_make_type,type_code);\n        return 0;\n      }\n      array_size = 0;\n      if (type_record != (long *)0x0) {\n        array_size = (uint)*(ushort *)(type_record + 2);\n        lto_type_slot = type_record + 2;\n        for (loop_index = 0; (*(short *)lto_type_slot != 0 && (loop_index != 3)); loop_index = loop_index + 1) {\n          *(short *)lto_type_slot = *(short *)((long)lto_type_slot + 2);\n          lto_type_slot = (long *)((long)lto_type_slot + 2);\n        }\n        *(short *)lto_type_slot = 0;\n      }\n      indirect_type = 0;\n      debug_make_type = debug_name;\n      error_message = parse_coff_type_0010dac0(coff_file,coff_symtab,debug_type_context,param_4,type_flag,type_record,0);\n      result = *(long *)(debug_type_context + 0x28);\n      if (result == 0) {\n        debug_make_type = debug_make_int_type_isra_0(4,0,indirect_type,debug_make_type);\n        result = debug_name_type(debug_name,\"int\",debug_make_type);\n        *(long *)(debug_type_context + 0x28) = result;\n      }\n      result = debug_make_array_type_isra_0(error_message,result,0,(long)(int)(array_size - 1),0);\n      return result;\n    }\n    debug_make_type = parse_coff_type_0010dac0(coff_file,coff_symtab,debug_type_context,param_4,type_flag,type_record,is_lto_object,debug_name);\n    result = debug_make_function_type_isra_0(debug_make_type,0,0);\n    return result;\n  }\n  if ((type_record != (long *)0x0) && (0 < *type_record)) {\n    lto_type_slot = (long *)coff_get_slot_lto_priv_0(debug_type_context);\n    if (*lto_type_slot != 0) {\n      return *lto_type_slot;\n    }\n    result = debug_make_indirect_type_isra_0(lto_type_slot,0);\n    return result;\n  }\n  if (is_lto_object == '\\0') {\n    type_record = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = debug_make_void_type_isra_0();\n    return result;\n  }\n  result = *(long *)(debug_type_context + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    debug_make_type = debug_make_void_type_isra_0();\n    type_string = \"void\";\n    break;\n  case 2:\n    debug_make_type = debug_make_int_type_isra_0(1,0);\n    type_string = \"char\";\n    break;\n  case 3:\n    debug_make_type = debug_make_int_type_isra_0(2,0);\n    type_string = \"short\";\n    break;\n  case 4:\n    debug_make_type = debug_make_int_type_isra_0(4,0);\n    type_string = \"int\";\n    break;\n  case 5:\n    debug_make_type = debug_make_int_type_isra_0(4,0);\n    type_string = \"long\";\n    break;\n  case 6:\n    debug_make_type = debug_make_float_type_isra_0(4);\n    type_string = \"float\";\n    break;\n  case 7:\n    debug_make_type = debug_make_float_type_isra_0(8);\n    type_string = \"double\";\n    break;\n  case 8:\n    if (type_record == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    debug_make_type = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_record == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    debug_make_type = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(coff_file,coff_symtab,debug_type_context,debug_make_type,type_record,debug_name);\nLAB_0010e046:\n    lto_type_slot = (long *)coff_get_slot_lto_priv_0(debug_type_context,param_4);\n    *lto_type_slot = result;\n    return result;\n  case 10:\n    if (type_record == (long *)0x0) {\n      result = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      result = type_record[3];\n      enum_names = (void *)xmalloc(0x50);\n      enum_values = (void *)xmalloc(0x50);\n      enum_index = 0;\n      do {\n        while( true ) {\n          if ((result <= coff_symtab[3]) || (coff_symtab[1] <= coff_symtab[2])) goto LAB_0010e032;\n          loop_index = (int)enum_index;\n          symtab_entry = *(long *)(*coff_symtab + coff_symtab[2] * 8);\n          error_flag = bfd_coff_get_syment(coff_file,symtab_entry,local_68);\n          enum_index = (long)loop_index;\n          if (error_flag == '\\0') {\n            bfd_error_code = bfd_get_error();\n            debug_make_type = bfd_errmsg(bfd_error_code);\n            error_message = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(error_message,debug_make_type);\n            free(enum_names);\n            free(enum_values);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          coff_symtab[2] = coff_symtab[2] + 1;\n          coff_symtab[3] = (ulong)local_47 + 1 + coff_symtab[3];\n          if (local_48 != '\\x10') break;\n          if ((int)type_code <= loop_index + 1) {\n            type_code = type_code + 10;\n            enum_names = (void *)xrealloc(enum_names);\n            enum_values = (void *)xrealloc(enum_values,(long)(int)type_code << 3);\n          }\n          enum_index = *(long *)(symtab_entry + 0x20);\n          *(undefined8 *)((long)enum_names + (long)loop_index * 8) = *(undefined8 *)(symtab_entry + 8);\n          *(long *)((long)enum_values + (long)loop_index * 8) =\n               *(long *)(symtab_entry + 0x10) + *(long *)(enum_index + 0x30);\n          enum_index = (long)(loop_index + 1);\n        }\n      } while (local_48 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)enum_names + enum_index * 8) = 0;\n      result = debug_make_enum_type_isra_0(enum_names,enum_values);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    debug_make_type = debug_make_int_type_isra_0(1,1);\n    type_string = \"unsigned char\";\n    break;\n  case 0xd:\n    debug_make_type = debug_make_int_type_isra_0(2,1);\n    type_string = \"unsigned short\";\n    break;\n  case 0xe:\n    debug_make_type = debug_make_int_type_isra_0(4,1);\n    type_string = \"unsigned int\";\n    break;\n  case 0xf:\n    debug_make_type = debug_make_int_type_isra_0(4,1);\n    type_string = \"unsigned long\";\n    break;\n  case 0x10:\n    debug_make_type = debug_make_float_type_isra_0(0xc);\n    type_string = \"long double\";\n  }\n  result = debug_name_type(debug_name,type_string,debug_make_type);\nLAB_0010e065:\n  *(long *)(debug_type_context + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "coff_get_slot.lto_priv.0",
                "free",
                "debug_make_indirect_type.isra.0",
                "bfd_get_error",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_array_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment",
                "debug_make_enum_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "extraout_var": "additionalVar",
                "iVar1": "comparisonResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 additionalVar;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(additionalVar,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "main",
                "stab_demangle_function_name.constprop.0",
                "handle_remove_section_option",
                "parse_stab_type",
                "FUN_0010554f",
                "convert_efi_target",
                "FUN_00107880",
                "skip_section",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_and_exit_0010882c",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorAndExit_0010882c(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(errorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_to_debug_0010ebb0",
                "param_1": "debugContext",
                "param_2": "sourceFile",
                "param_3": "switchValue",
                "param_4": "symbol",
                "__s": "symbolName",
                "cVar1": "switchChar",
                "uVar2": "switchIndex",
                "uVar3": "result",
                "sVar4": "sourceLength",
                "sVar5": "symbolLength",
                "__s_00": "combinedString"
            },
            "code": "\nundefined4 writeSymbolToDebug_0010ebb0(undefined8 debugContext,char *sourceFile,int switchValue,undefined8 symbol)\n\n{\n  char switchChar;\n  uint switchIndex;\n  undefined4 result;\n  char *symbolName;\n  size_t sourceLength;\n  size_t symbolLength;\n  char *combinedString;\n  \n  symbolName = (char *)stab_pop_type();\n  switchIndex = switchValue - 1;\n  if (switchIndex < 4) {\n    result = *(undefined4 *)(CSWTCH_42 + (ulong)switchIndex * 4);\n    switchChar = *(char *)((long)&CSWTCH_43 + (ulong)switchIndex);\n    sourceLength = strlen(sourceFile);\n    symbolLength = strlen(symbolName);\n    combinedString = (char *)xmalloc(sourceLength + 3 + symbolLength);\n    sprintf(combinedString,\"%s:%c%s\",sourceFile,(ulong)(uint)(int)switchChar,symbolName);\n    free(symbolName);\n    result = stab_write_symbol_lto_priv_0(debugContext,result,0,symbol,combinedString);\n    if ((char)result != '\\0') {\n      free(combinedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_debug_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_type_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "typePointer",
                "plVar2": "newTypePointer"
            },
            "code": "\nlong createType_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long typePointer;\n  long *newTypePointer;\n  \n  if ((input1 != 0) && (typePointer = debug_make_type_constprop_0(0x13,0), typePointer != 0)) {\n    newTypePointer = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)newTypePointer + 0x19) = 0;\n    *newTypePointer = input1;\n    *(undefined4 *)((long)newTypePointer + 0x1c) = 0;\n    newTypePointer[1] = input2;\n    newTypePointer[2] = input3;\n    *(undefined *)(newTypePointer + 3) = input4;\n    *(long **)(typePointer + 0x10) = newTypePointer;\n    return typePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_type_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_if_symbol_exists_00115d70",
                "param_1": "symbol",
                "param_2": "table",
                "lVar1": "foundSymbol",
                "local_18": "symbolToFind",
                "local_10": "symbolExists"
            },
            "code": "\nundefined checkIfSymbolExists_00115d70(undefined8 symbol,undefined8 table)\n\n{\n  long foundSymbol;\n  undefined8 symbolToFind;\n  undefined symbolExists;\n  \n  if (wildcard == '\\0') {\n    foundSymbol = htab_find(table,symbol);\n    symbolExists = foundSymbol != 0;\n  }\n  else {\n    symbolExists = 0;\n    symbolToFind = symbol;\n    htab_traverse(table,is_specified_symbol_predicate,&symbolToFind);\n  }\n  return symbolExists;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_traverse",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_0010554f",
                "copy_relocations_in_section.cold"
            ],
            "imported": false,
            "current_name": "check_if_symbol_exists_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "initialize_monitoring_00104000",
                "ctx": "context",
                "iVar1": "monitoringStatus"
            },
            "code": "\nint initializeMonitoring_00104000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringStatus;\n  \n  monitoringStatus = __gmon_start__();\n  return monitoringStatus;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_monitoring_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "merge_gnu_build_notes",
                "add_redefine_and_check",
                "list_matching_formats",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "finish_stab",
                "stab_struct_field.lto_priv.0",
                "bad_stab",
                "copy_usage",
                "main",
                "debug_name_type",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "stab_write_symbol.lto_priv.0",
                "debug_write_type.constprop.0",
                "get_file_size.cold",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "display_info.isra.0",
                "debug_end_block",
                "add_specific_symbols",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "parse_coff_struct_type",
                "endian_string",
                "debug_end_function",
                "copy_section.cold",
                "debug_start_block",
                "copy_object",
                "parse_vma.cold",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "parse_number",
                "print_version",
                "create_new_symbol.cold",
                "FUN_00107880",
                "copy_file",
                "do_display_target",
                "stab_demangle_v3_arg",
                "debug_record_line",
                "list_supported_targets",
                "FUN_0010554f",
                "init_section_add.cold",
                "debug_record_variable",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "FUN_00116490",
                "setup_section.cold",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00108179",
                "stab_demangle_v3_arglist",
                "FUN_00104cc1",
                "stab_bad_demangle",
                "setup_section",
                "get_file_size",
                "section_add_load_file.cold",
                "stab_find_slot",
                "FUN_00105828",
                "copy_object.cold",
                "set_times.cold",
                "FUN_0010808f",
                "stab_find_type",
                "FUN_001152b6",
                "stab_int_type.lto_priv.0",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "FUN_001086af",
                "FUN_00107976",
                "check_new_section_flags.cold",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "FUN_00114dc7",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "append_data_to_array_00109be3",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "uVar1": "new_array_ptr",
                "puVar2": "new_value_ptr",
                "uVar3": "array_length"
            },
            "code": "\nundefined8 append_data_to_array_00109be3(long array,undefined8 value,undefined4 length)\n\n{\n  undefined8 new_array_ptr;\n  undefined8 *new_value_ptr;\n  uint array_length;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    array_length = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = array_length;\n    new_array_ptr = xrealloc(*(undefined8 *)(array + 0x20),(ulong)array_length << 4);\n    *(undefined8 *)(array + 0x20) = new_array_ptr;\n  }\n  array_length = *(uint *)(array + 0x28);\n  new_value_ptr = (undefined8 *)((ulong)array_length * 0x10 + *(long *)(array + 0x20));\n  *new_value_ptr = value;\n  *(undefined4 *)(new_value_ptr + 1) = length;\n  *(uint *)(array + 0x28) = array_length + 1;\n  return CONCAT71((int7)((ulong)new_value_ptr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "append_data_to_array_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "initialize_dynamic_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "dynamicString"
            },
            "code": "\nvoid initializeDynamicString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *dynamicString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  dynamicString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)dynamicString + stringLength) = 0;\n  memcpy(dynamicString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "main",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "initialize_dynamic_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_modified_symbol_0010e918",
                "param_1": "symbolTable",
                "param_2": "originalString",
                "param_3": "value",
                "__s": "poppedString",
                "sVar2": "originalStringLength",
                "sVar3": "poppedStringLength",
                "__s_00": "modifiedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeModifiedSymbol_0010e918(undefined8 symbolTable,char *originalString,undefined8 value)\n\n{\n  undefined4 result;\n  char *poppedString;\n  size_t originalStringLength;\n  size_t poppedStringLength;\n  char *modifiedString;\n  \n  poppedString = (char *)stab_pop_type();\n  originalStringLength = strlen(originalString);\n  poppedStringLength = strlen(poppedString);\n  modifiedString = (char *)xmalloc(originalStringLength + 0x14 + poppedStringLength);\n  sprintf(modifiedString,\"%s:c=e%s,%ld\",originalString,poppedString,value);\n  free(poppedString);\n  result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,modifiedString);\n  if ((char)result != '\\0') {\n    free(modifiedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_modified_symbol_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_and_copy_section_00116110",
                "param_1": "inputFile",
                "param_2": "sectionData",
                "param_3": "outputSection",
                "uVar1": "tempByte",
                "uVar2": "section",
                "lVar3": "sectionOffset",
                "iVar4": "copyWidth",
                "iVar5": "copyByte",
                "cVar6": "result",
                "uVar7": "errorMsg",
                "__ptr": "temporaryBuffer",
                "lVar8": "counter",
                "uVar9": "iteration",
                "iVar10": "reverseBytes",
                "uVar11": "sectionPos",
                "puVar12": "ptr",
                "lVar13": "sectionLength",
                "puVar14": "tempPtr1",
                "puVar15": "tempPtr2",
                "pvVar16": "tempPtr3",
                "uVar17": "tempValue1",
                "uVar18": "tempValue2",
                "uVar19": "tempValue3",
                "bVar20": "tempFlag",
                "local_38": "sectionSize",
                "local_30": "sectionContent"
            },
            "code": "\nvoid reverseAndCopySection_00116110(undefined8 inputFile,undefined8 *sectionData,undefined8 outputSection)\n\n{\n  undefined tempByte;\n  undefined8 section;\n  long sectionOffset;\n  int copyWidth;\n  int copyByte;\n  char result;\n  undefined8 errorMsg;\n  undefined8 *temporaryBuffer;\n  long counter;\n  ulong iteration;\n  int reverseBytes;\n  ulong sectionPos;\n  undefined *ptr;\n  long sectionLength;\n  undefined8 *tempPtr1;\n  undefined8 *tempPtr2;\n  void *tempPtr3;\n  ulong tempValue1;\n  ulong tempValue2;\n  ulong tempValue3;\n  byte tempFlag;\n  ulong sectionSize;\n  void *sectionContent;\n  \n  tempFlag = 0;\n  result = skip_section(inputFile,sectionData,1);\n  if (result != '\\0') {\n    return;\n  }\n  sectionSize = sectionData[8];\n  sectionOffset = sectionData[0xc];\n  if (((*(byte *)((long)sectionData + 0x25) & 1) == 0) || ((*(byte *)(sectionOffset + 0x25) & 1) == 0)) {\n    sectionLength = find_section_list(*sectionData,0,0x80);\n    if (sectionLength == 0) {\n      return;\n    }\n    if ((*(byte *)(sectionLength + 0x29) & 1) == 0) {\n      return;\n    }\n    temporaryBuffer = (undefined8 *)xmalloc(sectionSize);\n    tempPtr2 = temporaryBuffer;\n    if (7 < sectionSize) {\n      for (tempValue2 = sectionSize >> 3; tempValue2 != 0; tempValue2 = tempValue2 - 1) {\n        *tempPtr2 = 0;\n        tempPtr2 = tempPtr2 + (ulong)tempFlag * -2 + 1;\n      }\n    }\n    tempPtr1 = tempPtr2;\n    if ((sectionSize & 4) != 0) {\n      tempPtr1 = (undefined8 *)((long)tempPtr2 + (ulong)tempFlag * -8 + 4);\n      *(undefined4 *)tempPtr2 = 0;\n    }\n    tempPtr2 = tempPtr1;\n    if ((sectionSize & 2) != 0) {\n      tempPtr2 = (undefined8 *)((long)tempPtr1 + (ulong)tempFlag * -4 + 2);\n      *(undefined2 *)tempPtr1 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)tempPtr2 = 0;\n    }\n    result = bfd_set_section_contents(outputSection,sectionOffset,temporaryBuffer,0);\n    if (result != '\\0') {\n      free(temporaryBuffer);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputSection,sectionOffset,0);\n    free(temporaryBuffer);\n    return;\n  }\n  sectionContent = (void *)0x0;\n  result = bfd_get_full_section_contents(inputFile,sectionData,&sectionContent);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(inputFile,sectionData,outputSection,&sectionContent,&sectionSize),\n     reverseBytes = reverse_bytes, result == '\\0')) {\n    bfd_set_section_size(sectionOffset,0);\n    status = 1;\n    bfd_nonfatal_message(0,inputFile,sectionData,0);\n    free(sectionContent);\n    return;\n  }\n  copyWidth = copy_width;\n  copyByte = copy_byte;\n  if (reverse_bytes != 0) {\n    tempValue2 = (ulong)reverse_bytes;\n    if (sectionSize % tempValue2 != 0) {\n      section = *sectionData;\n      errorMsg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(errorMsg,section,reverseBytes);\n    }\n    reverseBytes = reverse_bytes / 2;\n    sectionPos = 0;\n    while (tempValue3 = sectionPos, copyWidth = copy_width, copyByte = copy_byte, tempValue3 < sectionSize) {\n      sectionPos = tempValue2 + tempValue3;\n      tempValue1 = sectionPos;\n      for (iteration = 0; iteration < (ulong)(long)reverseBytes; iteration = iteration + 1) {\n        tempValue1 = tempValue1 - 1;\n        ptr = (undefined *)(tempValue3 + iteration + (long)sectionContent);\n        tempByte = *ptr;\n        *ptr = *(undefined *)((long)sectionContent + tempValue1);\n        *(undefined *)((long)sectionContent + tempValue1) = tempByte;\n      }\n    }\n  }\n  copy_width = copyWidth;\n  copy_byte = copyByte;\n  if (-1 < copyByte) {\n    tempValue2 = (ulong)interleave;\n    reverseBytes = (int)((ulong)sectionData[7] % tempValue2);\n    sectionPos = ((long)copyByte - (long)reverseBytes) + (long)sectionContent;\n    if (copyByte < reverseBytes) {\n      sectionPos = sectionPos + tempValue2;\n    }\n    sectionLength = (sectionSize + (long)sectionContent) - sectionPos;\n    tempPtr3 = sectionContent;\n    for (; sectionPos < sectionSize + (long)sectionContent; sectionPos = sectionPos + tempValue2) {\n      for (counter = 0; ((int)counter < copyWidth && (counter != sectionLength)); counter = counter + 1) {\n        *(undefined *)((long)tempPtr3 + counter) = *(undefined *)(sectionPos + counter);\n      }\n      tempPtr3 = (void *)((long)tempPtr3 + counter);\n      sectionLength = sectionLength - tempValue2;\n    }\n    sectionSize = ((((tempValue2 - 1) + sectionSize) - (long)copyByte) / tempValue2) * (long)copyWidth;\n    tempValue2 = *(ulong *)(sectionOffset + 0x38) / tempValue2;\n    *(ulong *)(sectionOffset + 0x38) = tempValue2;\n    if (copyByte < reverseBytes) {\n      *(ulong *)(sectionOffset + 0x38) = tempValue2 + 1;\n      result = bfd_set_section_contents(outputSection,sectionOffset,sectionContent,0,sectionSize);\n      if (result == '\\0') {\n        free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(outputSection,sectionOffset,sectionContent,0,sectionSize);\n  if (result == '\\0') {\n    free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContent);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_nonfatal_message",
                "find_section_list",
                "free",
                "bfd_get_full_section_contents",
                "skip_section",
                "xmalloc",
                "bfd_set_section_contents",
                "copy_section.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type",
                "mark_symbols_used_in_relocations.cold",
                "stab_typdef.lto_priv.0",
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "copy_file",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] debugEndBlock_0010bf20(long param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if ((*(long *)(param1 + 8) == 0) || (currentBlock = *(long *)(param1 + 0x20), currentBlock == 0)) {\n    errorString = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = param2;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(param1 + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorString = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "FUNC_0010c95e"
            },
            "code": "\nundefined8 FUNC_0010c95e(undefined8 *param_1,byte **param_2,long *param_3)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  char cVar7;\n  uint uVar8;\n  byte *pbVar9;\n  long lVar10;\n  undefined8 uVar11;\n  char *pcVar12;\n  size_t sVar13;\n  ulong uVar14;\n  void *__ptr;\n  long lVar15;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pcVar19;\n  byte *pbVar20;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    pbVar20 = *param_2;\n    bVar1 = *pbVar20;\n    if ('T' < (char)bVar1) break;\n    if ((char)bVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(bVar1) {\n    case 0x41:\n      lVar15 = 0;\n      pbVar3 = pbVar20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x46:\n      *param_2 = pbVar20 + 1;\n      if (param_3 == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      cVar7 = stab_demangle_args(param_1,param_2,ppcVar18,puVar16);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        lVar15 = debug_make_function_type_isra_0(*param_3,local_40[0],local_48 & 0xff);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *param_2 = pbVar20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *param_2 = pbVar20 + 1;\n      if (((&_sch_istable)[(ulong)pbVar20[1] * 2] & 4) == 0) {\n        if (pbVar20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_qualified(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uVar8 = stab_demangle_count(param_2);\n        pbVar3 = *param_2;\n        sVar13 = strlen((char *)pbVar3);\n        if (sVar13 < uVar8) goto switchD_0010cdf9_caseD_60;\n        *param_2 = pbVar3 + uVar8;\n        if ((param_3 != (long *)0x0) &&\n           (local_40[0] = (char *)stab_find_tagged_type(*param_1,param_1[1],pbVar3,uVar8,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      bVar2 = **param_2;\n      if (bVar1 == 0x4d) {\n        if ((bVar2 == 0x43) || (bVar2 == 0x56)) {\n          *param_2 = *param_2 + 1;\n        }\n        if (**param_2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *param_2 = *param_2 + 1;\n        if (param_3 == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        cVar7 = stab_demangle_args(param_1,param_2,puVar16,puVar17);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        if (bVar1 != 0x4d) {\n          lVar15 = debug_make_offset_type_isra_0(local_40[0],*param_3);\n          *param_3 = lVar15;\n          return 1;\n        }\n        lVar15 = debug_make_method_type_isra_0(*param_3,local_40[0],local_48,local_49);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uVar11 = stab_demangle_qualified(param_1,param_2,param_3);\n      return uVar11;\n    case 0x52:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_reference_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x54:\n      *param_2 = pbVar20 + 1;\n      cVar7 = stab_demangle_get_count(param_2,&local_48);\n      if (cVar7 != '\\0') {\n        if ((uint)local_48 < *(uint *)(param_1 + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + param_1[4]);\n          cVar7 = FUNC_0010c95e(param_1,local_40,param_3);\n          if (cVar7 == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (bVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *param_2 = pbVar20 + 1;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar15 = debug_make_pointer_type_isra_0(*param_3);\n    *param_3 = lVar15;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bVar6 = false;\n  bVar4 = false;\n  cVar7 = '\\0';\n  bVar5 = false;\n  do {\n    pbVar3 = *param_2;\n    bVar1 = *pbVar3;\n    if (bVar1 == 0x55) {\n      cVar7 = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)bVar1) {\n      if (bVar1 == 0x56) {\n        bVar6 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)bVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)bVar1 < '_') goto LAB_0010cdfb;\n      switch(bVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (param_3 == (long *)0x0) {\nLAB_0010d0aa:\n          *param_2 = pbVar3 + 1;\n          return 1;\n        }\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120436);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_type_constprop_0(6,4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned char\";\n        if ((cVar7 == '\\0') && (pcVar19 = \"char\", bVar4)) {\n          pcVar19 = \"signed char\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(1,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"float\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned int\";\n        pcVar12 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long unsigned int\";\n        pcVar12 = \"long int\";\nLAB_0010ced2:\n        if (cVar7 == '\\0') {\n          pcVar19 = pcVar12;\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(4,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pcVar19 = \"long double\";\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(8);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"short unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"short int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_template(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        sVar13 = strlen(local_40[0]);\n        lVar15 = stab_find_tagged_type(*param_1,param_1[1],local_40[0],sVar13 & 0xffffffff,9);\n        *param_3 = lVar15;\n        free(local_40[0]);\n        lVar15 = *param_3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120495);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_void_type_isra_0();\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"__wchar_t\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,1);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long long unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"long long int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(8,cVar7);\n          *param_3 = lVar15;\n        }\n      }\n      *param_2 = *param_2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (bVar1 == 0x43) {\n      bVar5 = true;\n      goto LAB_0010cd84;\n    }\n    if (bVar1 != 0x53) goto LAB_0010cdc5;\n    bVar4 = true;\nLAB_0010cd84:\n    *param_2 = pbVar3 + 1;\n  } while( true );\nLAB_0010ca26:\n  pbVar9 = pbVar3 + 1;\n  *param_2 = pbVar9;\n  bVar1 = *pbVar9;\n  if (bVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (bVar1 == 0x5f) {\n    *param_2 = pbVar3 + 2;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar10 = debug_find_named_type(*param_1,\"int\");\n    if (lVar10 == 0) {\n      lVar10 = debug_make_int_type_isra_0(4,0);\n    }\n    lVar15 = debug_make_array_type_isra_0(*param_3,lVar10,0,lVar15,0);\n    *param_3 = lVar15;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)bVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  lVar15 = lVar15 * 10 + (long)((char)bVar1 + -0x30);\n  pbVar3 = pbVar9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)bVar1 < ':') {\n    if ((char)bVar1 < '0') {\n      if (bVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(pbVar20);\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((bVar1 != 0x47) || (*param_2 = pbVar3 + 1, ((&_sch_istable)[(ulong)pbVar3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbVar20 = *param_2;\n  uVar8 = stab_demangle_count(param_2);\n  pbVar3 = *param_2;\n  sVar13 = strlen((char *)pbVar3);\n  uVar14 = (ulong)uVar8;\n  if (uVar14 <= sVar13) {\n    *param_2 = pbVar3 + uVar14;\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    __ptr = (void *)savestring(pbVar3,uVar14);\n    lVar15 = debug_find_named_type(*param_1,__ptr);\n    *param_3 = lVar15;\n    free(__ptr);\n    if (*param_3 == 0) {\n      lVar15 = stab_find_tagged_type(*param_1,param_1[1],pbVar3,(int)*param_2 - (int)pbVar3,0);\n      *param_3 = lVar15;\njoined_r0x0010d1d8:\n      if (lVar15 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bVar5) {\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    if (bVar6) {\n      lVar15 = debug_make_volatile_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(pbVar20);\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring",
                "debug_make_type.constprop.0",
                "stab_bad_demangle",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_pointer_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_find_named_type",
                "stab_demangle_args",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_const_type.isra.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_arg",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUNC_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = detect_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "strerror",
                "merge_gnu_build_notes",
                "check_new_section_flags",
                "startswith.lto_priv.0.lto_priv.0",
                "FUN_0010554f",
                "find_section_list",
                "bfd_get_arch",
                "setup_section",
                "bfd_create_gnu_debuglink_section",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_nonfatal_message",
                "bfd_get_full_section_contents",
                "FUN_00105828",
                "copy_object.cold",
                "bfd_malloc_and_get_section",
                "non_fatal",
                "fwrite",
                "bfd_set_format",
                "free",
                "bfd_map_over_sections",
                "fclose",
                "bfd_make_section_with_flags",
                "xmalloc",
                "fopen",
                "__errno_location"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnumPtr",
                "pcVar3": "errorMessage",
                "uVar4": "messageTranslation",
                "local_38": "timespecParam1",
                "uStack_34": "timespecParam2",
                "uStack_30": "timespecParam3",
                "uStack_2c": "timespecParam4",
                "local_28": "timeModifier1",
                "uStack_24": "timeModifier2",
                "uStack_20": "timeModifier3",
                "uStack_1c": "timeModifier4"
            },
            "code": "\nvoid setFileModificationTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnumPtr;\n  char *errorMessage;\n  undefined8 messageTranslation;\n  undefined4 timespecParam1;\n  undefined4 timespecParam2;\n  undefined4 timespecParam3;\n  undefined4 timespecParam4;\n  undefined4 timeModifier1;\n  undefined4 timeModifier2;\n  undefined4 timeModifier3;\n  undefined4 timeModifier4;\n  \n  timeModifier1 = *(undefined4 *)(fileInfo + 0x58);\n  timeModifier2 = *(undefined4 *)(fileInfo + 0x5c);\n  timeModifier3 = *(undefined4 *)(fileInfo + 0x60);\n  timeModifier4 = *(undefined4 *)(fileInfo + 100);\n  timespecParam1 = *(undefined4 *)(fileInfo + 0x48);\n  timespecParam2 = *(undefined4 *)(fileInfo + 0x4c);\n  timespecParam3 = *(undefined4 *)(fileInfo + 0x50);\n  timespecParam4 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timespecParam1,0);\n  if (result != 0) {\n    errnumPtr = __errno_location();\n    errorMessage = strerror(*errnumPtr);\n    messageTranslation = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(messageTranslation,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "set_times.cold",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "errorStatus",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "appName"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int errorStatus;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorStatus);\n  }\n  fflush(standardOutput);\n  if (errorDescription != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",appName,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",appName,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_nonfatal.cold",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "do_display_target.cold",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "input_array",
                "param_2": "input_flag",
                "param_3": "input_size",
                "param_4": "input_value",
                "param_5": "input_string",
                "lVar1": "lookup_result",
                "lVar3": "hash_result",
                "lVar7": "output_value",
                "local_44": "local_var_1",
                "uStack_40": "local_var_2",
                "uStack_3f": "local_var_3",
                "uStack_3e": "local_var_4",
                "local_3c": "local_array",
                "bfd_hash_lookup": "perform_hash_lookup",
                "bfd_get_error": "get_error_type",
                "bfd_errmsg": "get_error_message",
                "dcgettext": "translate_message",
                "non_fatal": "handle_error",
                "strlen": "calculate_string_length",
                "xrealloc": "resize_memory"
            },
            "code": "\nundefined8\nprocess_string_0010e2f0(long *input_array,undefined input_flag,int input_size,undefined8 input_value,char *input_string)\n\n{\n  long lookup_result;\n  undefined4 uVar2;\n  long hash_result;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  size_t sVar6;\n  long output_value;\n  undefined4 local_var_1;\n  undefined local_var_2;\n  undefined local_var_3;\n  undefined2 local_var_4;\n  undefined4 local_array [3];\n  \n  if (input_string == (char *)0x0) {\n    output_value = 0;\n  }\n  else {\n    hash_result = perform_hash_lookup(input_array + 7,input_string,1,1);\n    if (hash_result == 0) {\n      uVar2 = get_error_type();\n      uVar4 = get_error_message(uVar2);\n      uVar5 = translate_message(0,\"string_hash_lookup failed: %s\",5);\n      handle_error(uVar5,uVar4);\n      return 0;\n    }\n    output_value = *(long *)(hash_result + 0x20);\n    if (output_value == -1) {\n      output_value = input_array[6];\n      lookup_result = input_array[5];\n      *(long *)(hash_result + 0x20) = output_value;\n      if (lookup_result == 0) {\n        input_array[4] = hash_result;\n      }\n      else {\n        *(long *)(lookup_result + 0x18) = hash_result;\n      }\n      input_array[5] = hash_result;\n      sVar6 = calculate_string_length(input_string);\n      input_array[6] = output_value + 1 + sVar6;\n    }\n  }\n  (**(code **)(*(long *)(*input_array + 8) + 0x50))(output_value,&local_var_1);\n  local_var_3 = 0;\n  local_var_2 = input_flag;\n  (**(code **)(*(long *)(*input_array + 8) + 0x68))((long)input_size,&local_var_4);\n  (**(code **)(*(long *)(*input_array + 8) + 0x50))(input_value,local_array);\n  if ((ulong)input_array[3] < input_array[2] + 0xcU) {\n    input_array[3] = input_array[3] * 2;\n    output_value = resize_memory(input_array[1]);\n    input_array[1] = output_value;\n  }\n  output_value = input_array[2];\n  hash_result = input_array[1];\n  *(ulong *)(hash_result + output_value) = CONCAT26(local_var_4,CONCAT15(local_var_3,CONCAT14(local_var_2,local_var_1)));\n  *(undefined4 *)(hash_result + 8 + output_value) = local_array[0];\n  input_array[2] = input_array[2] + 0xc;\n  return CONCAT71((int7)((ulong)output_value >> 8),1);\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_end_block.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "error",
                "pcVar3": "commaPosition",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "length",
                "uVar7": "parsedFlags",
                "auVar8": "resultStruct"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 error;\n  char *commaPosition;\n  char *nextFlag;\n  size_t flagLength;\n  int length;\n  uint parsedFlags;\n  undefined resultStruct [16];\n  \n  parsedFlags = 0;\n  do {\n    commaPosition = strchr(sectionFlags,0x2c);\n    if (commaPosition == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      length = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = commaPosition + 1;\n      length = (int)commaPosition - (int)sectionFlags;\n    }\n    flagLength = (size_t)length;\n    result = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (result == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (result == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (result == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (result == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (result == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (result == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (result == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (result == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (result == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (result == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (result == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (result == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (result != 0) {\n                              commaPosition = (char *)xmalloc((long)(length + 1));\n                              strncpy(commaPosition,sectionFlags,flagLength);\n                              commaPosition[flagLength] = '\\0';\n                              error = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(error,commaPosition);\n                              error = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(error,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  resultStruct._4_4_ = 0;\n  resultStruct._0_4_ = parsedFlags;\n  resultStruct._8_8_ = param4;\n  return resultStruct;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_archive_filename_001125fa",
                "param_1": "arguments",
                "uVar1": "totalLength",
                "ppcVar2": "pointer",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s": "string1",
                "curr_1": "currentLength",
                "buf_0": "buffer"
            },
            "code": "\nchar * getArchiveFilename_001125fa(char **arguments)\n\n{\n  ulong totalLength;\n  char **pointer;\n  size_t length1;\n  size_t length2;\n  char *string1;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  pointer = (char **)arguments[0x1d];\n  string1 = *arguments;\n  if ((pointer != (char **)0x0) && ((*(byte *)((long)pointer + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*pointer);\n    length2 = strlen(string1);\n    totalLength = length1 + 3 + length2;\n    if (currentLength < totalLength) {\n      if (currentLength != 0) {\n        free(buffer);\n      }\n      currentLength = (totalLength >> 1) + totalLength;\n      buffer = (char *)xmalloc();\n    }\n    sprintf(buffer,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    string1 = buffer;\n  }\n  return string1;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "copy_object",
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "get_archive_filename_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "parse_stab_type",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "bfd_nonfatal_message",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_constant_one_00108f05"
            },
            "code": "\nundefined getConstantOne_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_constant_one_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_stabs_00108863",
                "puVar1": "stabsPtr",
                "puVar2": "nextStabsPtr"
            },
            "code": "\nvoid cleanupStabs_00108863(void)\n\n{\n  undefined4 *stabsPtr;\n  undefined4 *nextStabsPtr;\n  \n  stabsPtr = (undefined4 *)saved_stabs;\n  do {\n    nextStabsPtr = stabsPtr + 6;\n    free(*(void **)(stabsPtr + 4));\n    *(undefined8 *)(stabsPtr + 4) = 0;\n    stabsPtr = nextStabsPtr;\n  } while (nextStabsPtr != &saved_stabs_index);\n  saved_stabs_index = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_stabs_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "undefined": "pointerArgument"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(pointerArgument *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "find_debug_file_00108f08",
                "param_1": "debug_info",
                "param_2": "filename",
                "iVar1": "cmp_result",
                "uVar2": "result",
                "puVar3": "debug_entries",
                "puVar4": "current_entry",
                "lVar5": "iteration",
                "puVar6": "last_entry",
                "pcVar7": "default_filename",
                "puVar8": "new_entry",
                "bVar9": "zero_byte"
            },
            "code": "\n\n\nundefined8 find_debug_file_00108f08(long debug_info,char *filename)\n\n{\n  int cmp_result;\n  undefined8 result;\n  undefined8 *debug_entries;\n  undefined8 *current_entry;\n  long iteration;\n  undefined8 *last_entry;\n  char *default_filename;\n  undefined8 *new_entry;\n  byte zero_byte;\n  \n  zero_byte = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (*(long *)(debug_info + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (debug_entries = *(undefined8 **)(*(long *)(debug_info + 8) + 8); debug_entries != (undefined8 *)0x0;\n        debug_entries = (undefined8 *)*debug_entries) {\n      cmp_result = filename_cmp(debug_entries[1],default_filename);\n      if (cmp_result == 0) goto LAB_00108fad;\n    }\n    debug_entries = (undefined8 *)xmalloc(0x18);\n    last_entry = *(undefined8 **)(debug_info + 0x10);\n    new_entry = debug_entries;\n    for (iteration = 6; iteration != 0; iteration = iteration + -1) {\n      *(undefined4 *)new_entry = 0;\n      new_entry = (undefined8 *)((long)new_entry + (ulong)zero_byte * -8 + 4);\n    }\n    debug_entries[1] = default_filename;\n    new_entry = (undefined8 *)*last_entry;\n    while (current_entry = new_entry, current_entry != (undefined8 *)0x0) {\n      last_entry = current_entry;\n      new_entry = (undefined8 *)*current_entry;\n    }\n    *last_entry = debug_entries;\nLAB_00108fad:\n    *(undefined8 **)(debug_info + 0x10) = debug_entries;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "find_debug_file_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_00116852",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "copy_file.cold",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "section_filter_00114190",
                "param_1": "sectionName",
                "param_2": "isExactMatch",
                "param_3": "permissions",
                "uVar1": "sectionPermissions",
                "plVar2": "currentSection",
                "pplVar3": "nextSection",
                "iVar4": "comparisonResult",
                "uVar5": "errorMessage",
                "pplVar6": "filteredSections",
                "pplVar7": "previousSection",
                "pplVar8": "nextFilteredSection"
            },
            "code": "\nlong ** sectionFilter_00114190(long *sectionName,char isExactMatch,uint permissions)\n\n{\n  uint sectionPermissions;\n  long *currentSection;\n  long **nextSection;\n  int comparisonResult;\n  undefined8 errorMessage;\n  long **filteredSections;\n  long **previousSection;\n  long **nextFilteredSection;\n  \n  previousSection = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (isExactMatch == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (isExactMatch == '\\0') {\n    if ((permissions & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      filteredSections = (long **)*previousSection;\n      if (filteredSections == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previousSection = (long **)0x0;\n    }\n    else {\n      currentSection = change_sections[1];\n      if (*(char *)currentSection == '!') {\n        comparisonResult = fnmatch((char *)((long)currentSection + 1),(char *)sectionName,0);\n        filteredSections = previousSection;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)currentSection,(char *)sectionName,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      filteredSections = (long **)*previousSection;\n      if (filteredSections == (long **)0x0) goto LAB_00114245;\n    }\n    if ((permissions & *(uint *)((long)filteredSections + 0x14)) != 0) {\n      currentSection = filteredSections[1];\n      if (*(char *)currentSection == '!') {\n        comparisonResult = fnmatch((char *)((long)currentSection + 1),(char *)sectionName,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(filteredSections + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)currentSection,(char *)sectionName,0);\n        if ((previousSection == (long **)0x0) && (comparisonResult == 0)) {\n          nextFilteredSection = (long **)*filteredSections;\n          previousSection = filteredSections;\n          if (nextFilteredSection == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextFilteredSection = (long **)*filteredSections;\n    filteredSections = previousSection;\n    if (nextFilteredSection != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)change_sections[1],(char *)sectionName);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      sectionPermissions = *(uint *)((long)previousSection + 0x14);\n      if ((((sectionPermissions & 1) != 0) && ((permissions & 2) != 0)) ||\n         (((permissions & 1) != 0 && ((sectionPermissions & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(errorMessage,sectionName);\n      }\n      if ((((sectionPermissions & 8) != 0) && ((permissions & 0x10) != 0)) || ((permissions & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(errorMessage,sectionName);\n      }\n      if ((((sectionPermissions & 0x20) == 0) || ((permissions & 0x40) == 0)) && ((permissions & 0x60) != 0x60)) {\n        *(uint *)((long)previousSection + 0x14) = sectionPermissions | permissions;\n        return previousSection;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(errorMessage,sectionName);\n    }\n    previousSection = (long **)*previousSection;\n    if (previousSection == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)previousSection[1],(char *)sectionName);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextFilteredSection = (long **)*previousSection;\n    filteredSections = (long **)0x0;\n    if (nextFilteredSection == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previousSection = filteredSections;\n      if (isExactMatch == '\\0') {\n        while (filteredSections = nextFilteredSection, nextSection = previousSection, nextFilteredSection = filteredSections,\n              (permissions & *(uint *)((long)filteredSections + 0x14)) != 0) {\n          currentSection = filteredSections[1];\n          if (*(char *)currentSection == '!') {\n            comparisonResult = fnmatch((char *)((long)currentSection + 1),(char *)sectionName,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextFilteredSection = (long **)*filteredSections;\n            if ((long **)*filteredSections == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)currentSection,(char *)sectionName,0);\n            if ((previousSection == (long **)0x0) && (comparisonResult == 0)) {\n              previousSection = filteredSections;\n              nextFilteredSection = (long **)*filteredSections;\n              if ((long **)*filteredSections == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextFilteredSection = (long **)*filteredSections;\n              if ((long **)*filteredSections == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextFilteredSection[1],(char *)sectionName);\n        nextSection = filteredSections;\n        previousSection = nextFilteredSection;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      filteredSections = nextSection;\n      nextFilteredSection = (long **)*nextFilteredSection;\n      previousSection = filteredSections;\n    } while (nextFilteredSection != (long **)0x0);\nLAB_001142a1:\n    if (isExactMatch != '\\0') {\nLAB_001142a9:\n      filteredSections = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(filteredSections + 3) = (undefined  [16])0x0;\n      *(undefined *)(filteredSections + 2) = 0;\n      *(uint *)((long)filteredSections + 0x14) = permissions;\n      filteredSections[5] = (long *)0x0;\n      previousSection = filteredSections;\n      *filteredSections = (long *)change_sections;\n      change_sections = previousSection;\n      filteredSections[1] = sectionName;\n      return filteredSections;\n    }\n  }\nLAB_00114212:\n  if (previousSection == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previousSection + 2) = 1;\n  return previousSection;\n}\n\n",
            "called": [
                "dcgettext",
                "fnmatch",
                "find_section_list.cold",
                "xmalloc",
                "fatal",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "main",
                "setup_section",
                "is_strip_section_1.isra.0",
                "handle_remove_section_option",
                "copy_relocations_in_section",
                "FUN_00107880",
                "setup_section.cold",
                "copy_section"
            ],
            "imported": false,
            "current_name": "section_filter_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "decode_build_attr_note_00116490",
                "param_1": "param1",
                "param_2": "noteSize",
                "param_3": "noteData",
                "param_4": "noteOffset",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "flag",
                "puVar5": "ptr5",
                "iVar6": "var6",
                "lVar7": "var7",
                "uVar8": "var8",
                "in_RAX": "noteType",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "ptr",
                "uVar13": "var13",
                "unaff_RBX": "tempReg1",
                "unaff_RBP": "val3",
                "puVar14": "ptr14",
                "puVar15": "ptr15",
                "cVar16": "flag2",
                "puVar17": "ptr17",
                "puVar18": "ptr18",
                "in_R11": "val1",
                "unaff_R12": "ptrVal5",
                "unaff_R13": "val4",
                "__nmemb": "size",
                "unaff_R14": "ptrVal3",
                "puVar19": "ptrVal4",
                "param_7": "val5",
                "param_8": "val6",
                "param_9": "val7",
                "in_stack_00000020": "size1",
                "in_stack_00000028": "ptrVal6",
                "in_stack_00000030": "ptrVal7",
                "in_stack_00000038": "val8",
                "in_stack_00000040": "val9",
                "in_stack_00000048": "ptrVal8",
                "bVar21": "bitVar",
                "iVar22": "var12",
                "unaff_retaddr": "returnAddr"
            },
            "code": "\nulong decodeBuildAttrNote_00116490(undefined8 param1,ulong noteSize,ulong noteData,long noteOffset)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *ptr5;\n  int var6;\n  long var7;\n  undefined8 var8;\n  ulong noteType;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr;\n  ulong var13;\n  ulong tempReg1;\n  ulong val3;\n  ulong *ptr14;\n  undefined *ptr15;\n  char flag2;\n  undefined *ptr17;\n  undefined *ptr18;\n  ulong val1;\n  ulong *ptrVal5;\n  ulong *ptrVal4;\n  ulong val4;\n  size_t size;\n  undefined8 *ptrVal3;\n  ulong *pvar20;\n  byte bitVar;\n  int var12;\n  ulong returnAddr;\n  ulong val5;\n  uint val6;\n  ulong val7;\n  ulong size1;\n  ulong *ptrVal6;\n  undefined *ptrVal7;\n  uint val8;\n  uint val9;\n  undefined8 *ptrVal8;\n  \n  bitVar = 0;\ncode_r0x00116490:\n  var7 = noteOffset;\n  var10 = val3;\n  var13 = val4;\n  if (noteType == 0) {\n    if (noteSize == 0x100) {\n      ptrVal5[7] = returnAddr;\n      var11 = returnAddr;\nLAB_001164af:\n      var9 = val4;\n      var13 = val4;\n      returnAddr = var11;\n    }\n    else {\n      ptrVal5[7] = val7;\nLAB_0011669e:\n      var10 = val3;\n      var9 = val3;\n    }\nLAB_001164bb:\n    ptrVal5[8] = var9;\n    if (*(char *)((ptrVal5[3] - 1) + noteData) != '\\0') {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptrVal4 = ptrVal5 + 9;\n    if (0xb < tempReg1) {\n      var9 = (**(code **)(ptrVal3[1] + 0x40))(var7);\n      *ptrVal4 = var9;\n      var9 = (**(code **)(ptrVal3[1] + 0x40))(var7 + 4);\n      ptrVal5[10] = var9;\n      noteSize = (**(code **)(ptrVal3[1] + 0x40))(var7 + 8);\n      noteData = *ptrVal4;\n      ptrVal5[0xb] = noteSize;\n      noteType = ptrVal5[10];\n      var9 = noteData + 3 & 0xfffffffffffffffc;\n      ptrVal5[0xf] = var9;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteSize - 0x100) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + noteType + 0xc;\n      if (tempReg1 < var11) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteData < 2) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      ptrVal5[0xc] = var7 + 0xc;\n      val1 = var7 + 0xc + var9;\n      ptrVal5[0xd] = val1;\n      tempReg1 = tempReg1 + (-0xc - (var9 + noteType));\n      noteOffset = var7 + var11;\n      val3 = var10;\n      ptrVal5 = ptrVal4;\n      val4 = var13;\n      if (noteData != 2) {\n        if (*(char *)(var7 + 0xc) == '$') {\n          if ((*(char *)(var7 + 0xd) == '\\x01') && (*(char *)(var7 + 0xe) == '1')) {\n            var10 = decodeBuildAttrNote_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < noteData) && (*(char *)(var7 + 0xc) == 'G')) &&\n                 (*(char *)(var7 + 0xd) == 'A')) &&\n                ((*(char *)(var7 + 0xe) == '$' && (*(char *)(var7 + 0xf) == '\\x01')))) {\n          if (*(char *)(var7 + 0x10) == '2') {\n            var10 = decodeBuildAttrNote_00116490();\n            return var10;\n          }\n          if (*(char *)(var7 + 0x10) == '3') {\n            var10 = decodeBuildAttrNote_00116490();\n            return var10;\n          }\n          var7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (tempReg1 != 0) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((val8 | val9 | val6) == 0) {\n      var1 = *ptrVal3;\n      var2 = *ptrVal8;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(var8,var1,var2);\nLAB_0011671b:\n      size = ((long)ptrVal4 - (long)ptrVal6 >> 3) * -0x71c71c71c71c71c7;\n      qsort(ptrVal6,size,0x48,compare_gnu_build_notes);\n      for (ptr14 = ptrVal6; ptr14 < ptrVal4; ptr14 = ptr14 + 9) {\n        var10 = ptr14[2];\n        if (var10 != 0) {\n          var13 = ptr14[7];\n          var9 = ptr14[8];\n          pvar20 = ptr14;\n          var12 = 0;\n          if (var13 == var9) {\n            ptr14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr5 = pvar20;\n                pvar20 = ptr5 + -9;\n                if (pvar20 < ptrVal6) goto LAB_001167f5;\n                var11 = ptr5[-7];\n              } while (var11 == 0);\n              if ((*pvar20 != *ptr14) ||\n                 (var6 = memcmp((void *)ptr5[-6],(void *)ptr14[3],*ptr14), var6 != 0))\n              break;\n              var3 = ptr5[-2];\n              var12 = ptr5[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr14[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto process_data_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr5[-1] = var12;\n                  ptr5[-2] = var13;\n                  ptr14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nprocess_data_00116852:\n              flag = var12 < 0x11;\n              var12 = var12 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(ptrVal6,size,0x48,sort_gnu_build_notes);\n      ptr = (undefined *)xmalloc(size1 * 2);\n      val5 = 0;\n      val7 = 0;\n      ptr18 = ptr;\n      for (ptr14 = ptrVal6; ptr14 < ptrVal4; ptr14 = ptr14 + 9) {\n        if (ptr14[2] != 0) {\n          ptr17 = ptr18 + 4;\n          ptr15 = ptr18 + 0xc;\n          if ((ptr14[7] == val7) && (ptr14[8] == val5)) {\n            (**(code **)(ptrVal3[1] + 0x50))(*ptr14,ptr18);\n            (**(code **)(ptrVal3[1] + 0x50))(0,ptr17);\n            (**(code **)(ptrVal3[1] + 0x50))(ptr14[2],ptr18 + 8);\n            var13 = ptr14[6];\n            var10 = *ptr14;\n            ptr18 = (undefined *)ptr14[3];\n            ptr17 = ptr15;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr17 = *ptr18;\n              ptr18 = ptr18 + (ulong)bitVar * -2 + 1;\n              ptr17 = ptr17 + (ulong)bitVar * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (var7 = var13 - var10; var7 != 0; var7 = var7 + -1) {\n                *ptr17 = 0;\n                ptr17 = ptr17 + (ulong)bitVar * -2 + 1;\n              }\n            }\n            ptr18 = ptr15 + var13;\n          }\n          else {\n            (**(code **)(ptrVal3[1] + 0x50))();\n            if (*(int *)(ptrVal3[1] + 8) == 5) {\n              flag2 = (*(char *)(ptrVal3[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              flag2 = '\\b';\n            }\n            (**(code **)(ptrVal3[1] + 0x50))(flag2,ptr17);\n            (**(code **)(ptrVal3[1] + 0x50))(ptr14[2],ptr18 + 8);\n            var10 = *ptr14;\n            ptr18 = (undefined *)ptr14[3];\n            ptr17 = ptr15;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr17 = *ptr18;\n              ptr18 = ptr18 + (ulong)bitVar * -2 + 1;\n              ptr17 = ptr17 + (ulong)bitVar * -2 + 1;\n            }\n            var13 = ptr14[6];\n            if (var10 < var13) {\n              for (var7 = var13 - var10; var7 != 0; var7 = var7 + -1) {\n                *ptr17 = 0;\n                ptr17 = ptr17 + (ulong)bitVar * -2 + 1;\n              }\n            }\n            var7 = ptrVal3[1];\n            ptr15 = ptr15 + var13;\n            ptr18 = ptr15 + 8;\n            if ((*(int *)(var7 + 8) == 5) && (*(char *)(ptrVal3[0x22] + 4) == '\\x02')) {\n              (**(code **)(var7 + 0x38))(ptr14[7],ptr15);\n              (**(code **)(ptrVal3[1] + 0x38))(ptr14[8],ptr18);\n              ptr18 = ptr15 + 0x10;\n            }\n            else {\n              (**(code **)(var7 + 0x50))(ptr14[7],ptr15);\n              (**(code **)(ptrVal3[1] + 0x50))(ptr14[8],ptr15 + 4);\n            }\n            val7 = ptr14[7];\n            val5 = ptr14[8];\n          }\n        }\n      }\n      var13 = (long)ptr18 - (long)ptr;\n      var10 = var13;\n      ptr18 = ptr;\n      if (var13 < size1) {\n        for (; size1 = var13, var10 != 0; var10 = var10 - 1) {\n          *ptrVal7 = *ptr18;\n          ptr18 = ptr18 + (ulong)bitVar * -2 + 1;\n          ptrVal7 = ptrVal7 + (ulong)bitVar * -2 + 1;\n        }\n      }\n      free(ptr);\nLAB_001166f8:\n      free(ptrVal6);\n      return size1;\n    }\n    if (((val9 | val6) == 0) || (val8 == 0)) {\n      if (val9 == 0) {\n        if (val6 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (val6 == 0) goto LAB_001166f8;\n    }\n    var7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      var11 = (**(code **)(ptrVal3[1] + 0x28))(val1);\n      var9 = (**(code **)(ptrVal3[1] + 0x28))(ptrVal5[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (ptrVal5[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = returnAddr;\n        }\n        noteData = *ptrVal5;\n        ptrVal5[7] = var11;\n        var13 = var9;\n        returnAddr = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = val7;\n        }\n        noteData = *ptrVal5;\n        ptrVal5[7] = var11;\n        var10 = var9;\n        val7 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        var11 = (**(code **)(ptrVal3[1] + 0x40))(val1);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        var10 = FUNC_001086af();\n        return var10;\n      }\n    }\n    var7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (var7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,ptrVal3,ptrVal8,var7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "decode_build_attr_note_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_data_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_data_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_data_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "currentTarget",
                "pcVar2": "targetFormatString",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *file)\n\n{\n  long currentTarget;\n  char *targetFormatString;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    targetFormatString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,targetFormatString);\n  }\n  else {\n    targetFormatString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,targetFormatString,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    currentTarget = *ptr;\n    ptr = ptr + 1;\n    if (currentTarget == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_target_list",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_with_debug_0010be1a",
                "param_1": "functionPtr",
                "param_2": "newParam",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "blockPtr",
                "uVar2": "message",
                "pcVar3": "errorMessage",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] endFunctionWithDebug_0010be1a(long functionPtr,undefined8 newParam,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long blockPtr;\n  undefined8 message;\n  char *errorMessage;\n  undefined result [16];\n  \n  if (((*(long *)(functionPtr + 8) == 0) || (blockPtr = *(long *)(functionPtr + 0x20), blockPtr == 0)) ||\n     (*(long *)(functionPtr + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockPtr + 8) == 0) {\n      *(undefined8 *)(blockPtr + 0x20) = newParam;\n      message = CONCAT71((int7)((ulong)blockPtr >> 8),1);\n      *(undefined (*) [16])(functionPtr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  message = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",message);\n  message = 0;\nLAB_0010be86:\n  result._8_8_ = returnValue;\n  result._0_8_ = message;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "end_function_with_debug_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "stab_class_start_method.lto_priv.0",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "add_redefine_and_check",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "stab_struct_field.lto_priv.0",
                "savestring",
                "debug_set_class_id.lto_priv.0",
                "xstrndup",
                "stab_start_struct_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "debug_name_type",
                "debug_make_array_type.isra.0",
                "convert_efi_target",
                "stab_demangle_args",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "copy_section",
                "add_specific_symbols",
                "bfd_get_archive_filename",
                "debug_make_enum_type.isra.0",
                "stab_function_type.lto_priv.0",
                "debug_record_function",
                "debug_add_to_namespace.constprop.0",
                "stab_range_type.lto_priv.0",
                "template_in_dir",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "debug_start_block",
                "parse_flags.cold",
                "parse_stab",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "stab_modify_type",
                "FUN_00107880",
                "section_add_load_file",
                "debug_record_line",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "debug_record_variable",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "stab_set_type.lto_priv.0",
                "init_section_add",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_make_method_type.isra.0",
                "stab_class_start_method.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "debug_make_offset_type.isra.0",
                "stab_class_static_member.lto_priv.0",
                "debug_make_struct_type.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_find_slot",
                "stab_function_parameter.lto_priv.0",
                "stab_push_string",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "start_stab.constprop.0",
                "stab_find_tagged_type",
                "debug_make_type.constprop.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_record_variable",
                "parse_coff_type.lto_priv.0",
                "debug_tag_type",
                "debug_start_source",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_debug_type_00113da9",
                "param_1": "byteCount",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocatedMemory",
                "lVar2": "loopCounter",
                "puVar3": "currentPointer",
                "bVar4": "var4",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] initializeDebugType_00113da9(byte byteCount,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *allocatedMemory;\n  long loopCounter;\n  undefined8 *currentPointer;\n  byte var4;\n  undefined output [16];\n  \n  var4 = 0;\n  output._0_8_ = debug_make_type_constprop_0(8 - (uint)byteCount);\n  if (output._0_8_ != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    currentPointer = allocatedMemory + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)var4 * -8 + 4);\n    }\n    *allocatedMemory = param3;\n    *(undefined8 **)(output._0_8_ + 0x10) = allocatedMemory;\n  }\n  output._8_8_ = param4;\n  return output;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_field2",
                "param_2[7]": "record2_field8",
                "param_1[7]": "record1_field8",
                "param_2[8]": "record2_field9",
                "param_1[8]": "record1_field9"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1[2];\n  if (record1_field2 == record2[2]) {\n    if (record2_field8 <= record1_field8) {\n      if (record1_field8 <= record2_field8) {\n        if (record2_field9 < record1_field9) {\n          return -1;\n        }\n        if (record2_field9 <= record1_field9) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "format_and_push_string_0010a69a",
                "param_1": "ptr_data",
                "param_3": "flag",
                "param_4": "char_flag",
                "param_5": "uint_param",
                "uVar1": "result",
                "lVar2": "index",
                "sVar3": "length",
                "uVar5": "addIndex",
                "local_60": "buffer"
            },
            "code": "\nundefined4 formatAndPushString_0010a69a(long ptr_data,undefined8 param_2,int flag,char char_flag,uint uint_param)\n\n{\n  undefined4 result;\n  long index;\n  size_t length;\n  undefined8 uVar4;\n  undefined addIndex;\n  char buffer [48];\n  \n  if (flag == 0) {\n    buffer[0] = '\\0';\n    addIndex = 0;\n    index = 0;\n  }\n  else {\n    index = stab_get_struct_index();\n    if (index < 0) {\n      return 0;\n    }\n    addIndex = 1;\n    sprintf(buffer,\"%ld=\",index);\n  }\n  length = strlen(buffer);\n  sprintf(buffer + length,\"%c%u\",(ulong)((-(uint)(char_flag == '\\0') & 2) + 0x73),(ulong)uint_param);\n  result = stab_push_string(ptr_data,buffer,index,addIndex,uint_param);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  index = *(long *)(ptr_data + 0x60);\n  uVar4 = xmalloc(1);\n  *(undefined8 *)(index + 0x20) = uVar4;\n  **(undefined **)(*(long *)(ptr_data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "setup_section",
                "parse_stab_type",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_and_handle_sections_00115b70",
                "pcVar1": "current_section",
                "iVar2": "section_comparison_result",
                "iVar3": "strip_symbols_state",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "uVar6": "error_message",
                "plVar7": "update_sections_list"
            },
            "code": "\nundefined8 check_and_handle_sections_00115b70(char **param_1)\n\n{\n  char *current_section;\n  int section_comparison_result;\n  int strip_symbols_state;\n  long section_list_1;\n  long section_list_2;\n  undefined8 error_message;\n  long *update_sections_list;\n  \n  section_list_1 = find_section_list(*param_1,0,4);\n  if (section_list_1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_1 = find_section_list(*param_1,0,1);\n      section_list_2 = find_section_list(*param_1,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          current_section = *param_1;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(error_message,current_section);\n        }\n        if (section_list_1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_section = *param_1;\n          update_sections_list = update_sections;\n          do {\n            strip_symbols_state = strcmp(current_section,(char *)update_sections_list[1]);\n            if (strip_symbols_state == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(error_message,current_section);\n            }\n            update_sections_list = (long *)*update_sections_list;\n          } while (update_sections_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    strip_symbols_state = strip_symbols;\n    if ((*(byte *)((long)param_1 + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_section = *param_1;\n        section_comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((section_comparison_result != 0) && (section_comparison_result = strcmp(current_section,\".gnu_debuglink\"), section_comparison_result != 0)) {\n          strip_symbols_state = strcmp(current_section,\".reloc\");\n          if (strip_symbols_state != 0) {\n            return 1;\n          }\n          error_message = check_function_0010829e();\n          return error_message;\n        }\n      }\n      if (strip_symbols_state == 5) {\n        error_message = is_dwo_section_constprop_0(param_1);\n        return error_message;\n      }\n      if (strip_symbols_state == 4) {\n        return 0;\n      }\n    }\n    if (strip_symbols_state == 6) {\n      error_message = toggle_dwo_section_constprop_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0.cold",
                "dcgettext",
                "find_section_list",
                "FUN_0010829e",
                "strcmp",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_and_handle_sections_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_program_00116b40",
                "completed_0": "programInitialized"
            },
            "code": "\nvoid initializeProgram_00116b40(void)\n\n{\n  if (programInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  programInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "param_1": "input_file",
                "param_2": "relocation_header",
                "plVar1": "pointer",
                "lVar2": "value",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "fwrite_address",
                "lVar7": "reloc_count",
                "__ptr": "reloc_table",
                "lVar8": "index",
                "uStack_28": "default_return"
            },
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *input_file,long relocation_header)\n\n{\n  long *pointer;\n  long value;\n  long lVar3;\n  long lVar4;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_address;\n  void *reloc_table;\n  long reloc_count;\n  undefined8 extraout_RAX;\n  long index;\n  undefined8 default_return;\n  \n  if (*(long *)(relocation_header + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_address = bfd_get_reloc_upper_bound();\n  if (fwrite_address < 0) {\n    if ((fwrite_address != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      bfd_nonfatal(*input_file);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_address != 0) {\n    reloc_table = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(input_file,relocation_header,reloc_table);\n    lVar4 = _DAT_00128680;\n    lVar3 = _DAT_00128568;\n    fwrite_address = _fwrite;\n    if (reloc_count < 0) {\n      bfd_nonfatal(*input_file);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        pointer = **(long ***)((long)reloc_table + index * 8);\n        if ((((pointer != (long *)0x0) && (value = *pointer, value != 0)) && (value != fwrite_address)) &&\n           ((value != lVar4 && (value != lVar3)))) {\n          *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    free(reloc_table);\n    return extraout_RAX;\n  }\n  return default_return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xexit",
                "mark_symbols_used_in_relocations.cold",
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocation_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_00113ede",
                "param_1": "strings",
                "__s": "input_string",
                "sVar1": "string_length",
                "uVar2": "is_lto_priv_present"
            },
            "code": "\nundefined8 check_string_00113ede(char **strings)\n\n{\n  char *input_string;\n  size_t string_length;\n  undefined8 is_lto_priv_present;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  input_string = *strings;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    if (4 < (int)string_length) {\n      is_lto_priv_present = startswith_lto_priv_0_lto_priv_0(input_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return is_lto_priv_present;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "data1",
                "lVar2": "data2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long data1;\n  long data2;\n  int result;\n  uint flag;\n  \n  data1 = *record1;\n  data2 = *record2;\n  flag = *(uint *)(data2 + 0x24) & 0x102;\n  if ((*(uint *)(data1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(data1 + 0x38) <= *(ulong *)(data2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(data2 + 0x38) <= *(ulong *)(data1 + 0x38)) {\n      if (*(ulong *)(data2 + 0x40) < *(ulong *)(data1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(data2 + 0x40) <= *(ulong *)(data1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(data1 + 0x18) <= *(uint *)(data2 + 0x18)) {\n            return -(uint)(*(uint *)(data1 + 0x18) < *(uint *)(data2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "list_matching_formats",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_pop_type",
                "stab_int_constant.lto_priv.0",
                "main",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "stab_emit_pending_vars",
                "copy_section",
                "bfd_get_archive_filename",
                "stab_function_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "free_saved_stabs",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "FUN_00107880",
                "copy_file",
                "stab_demangle_v3_arg",
                "stab_end_struct_type.lto_priv.0",
                "save_stab",
                "FUN_0010554f",
                "list_supported_targets",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "FUN_00114b84",
                "make_tempdir.cold",
                "mark_symbols_used_in_relocations",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "stab_function_parameter.lto_priv.0",
                "copy_object.cold",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "stab_find_tagged_type",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_class_method_var",
                "parse_coff_type.lto_priv.0",
                "FUN_00108466",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "main",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_types_0010c892",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "isPendingVarsEmitted",
                "lVar2": "typeConst",
                "lVar3": "taggedType",
                "uVar4": "result",
                "puVar5": "ptrIterator",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugTypes_0010c892(undefined8 param1,long param2)\n\n{\n  char isPendingVarsEmitted;\n  long typeConst;\n  long taggedType;\n  undefined8 result;\n  undefined8 *ptrIterator;\n  int kind;\n  \n  if (*(char *)(param2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptrIterator = *(undefined8 **)(param2 + 0x1a0); ptrIterator != (undefined8 *)0x0;\n        ptrIterator = (undefined8 *)*ptrIterator) {\n      kind = *(int *)(ptrIterator + 2);\n      taggedType = ptrIterator[1];\n      if (kind != 0) {\n        if (taggedType != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptrIterator[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (taggedType == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      typeConst = debug_make_type_constprop_0(kind,0);\n      if (typeConst == 0) goto LAB_0010c910;\n      taggedType = debug_tag_type(param1,taggedType,typeConst);\n      ptrIterator[3] = taggedType;\n      if (taggedType == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    isPendingVarsEmitted = stab_emit_pending_vars();\n    if (isPendingVarsEmitted != '\\0') {\n      isPendingVarsEmitted = debug_end_function(param1,*(undefined8 *)(param2 + 0x68));\n      if (isPendingVarsEmitted != '\\0') {\n        *(undefined *)(param2 + 0x60) = 0;\n        *(undefined8 *)(param2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_tag_type",
                "stab_emit_pending_vars",
                "debug_make_type.constprop.0",
                "debug_end_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_types_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 firstParam,undefined4 secondParam)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = firstParam;\n  allocatedMemory[1] = secondParam;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_find_type",
                "finish_stab",
                "stab_demangle_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "parse_stab_type",
                "debug_make_pointer_type.isra.0",
                "debug_tag_type",
                "debug_make_method_type.isra.0",
                "debug_make_offset_type.isra.0",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_enum_type.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_exit_functions_0011a390",
                "lVar1": "currentIndex",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "headPointer",
                "uVar5": "count"
            },
            "code": "\nvoid executeExitFunctions_0011a390(void)\n\n{\n  long currentIndex;\n  long prevIndex;\n  long tempIndex;\n  long *headPointer;\n  uint count;\n  \n  headPointer = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(headPointer + 1) - 1;\n      if (-1 < (int)count) {\n        currentIndex = (long)(int)count;\n        count = count & 7;\n        (*(code *)headPointer[currentIndex + 2])();\n        prevIndex = currentIndex + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)headPointer[currentIndex + 1])();\n                        prevIndex = currentIndex + -2;\n                      }\n                      (*(code *)headPointer[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)headPointer[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)headPointer[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)headPointer[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)headPointer[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)headPointer[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)headPointer[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)headPointer[tempIndex + 1])();\n            (*(code *)headPointer[tempIndex])();\n            (*(code *)headPointer[currentIndex])();\n            (*(code *)headPointer[tempIndex + -2])();\n            (*(code *)headPointer[tempIndex + -3])();\n            (*(code *)headPointer[tempIndex + -4])();\n            (*(code *)headPointer[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_0011a466:\n      headPointer = (long *)*headPointer;\n    } while (headPointer != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "display_info.isra.0.cold",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_stab_type",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_symbol_to_debug_database_0010e842",
                "param_1": "databaseHandle",
                "param_2": "symbolName",
                "param_3": "symbolValue",
                "param_4": "extraData",
                "__s": "formattedSymbol",
                "auVar2": "result",
                "sVar1": "symbolNameLength"
            },
            "code": "\nundefined  [16] writeSymbolToDebugDatabase_0010e842(undefined8 databaseHandle,char *symbolName,undefined8 symbolValue,undefined8 extraData)\n\n{\n  size_t symbolNameLength;\n  char *formattedSymbol;\n  undefined result [16];\n  \n  symbolNameLength = strlen(symbolName);\n  formattedSymbol = (char *)xmalloc(symbolNameLength + 0x14);\n  sprintf(formattedSymbol,\"%s:c=i%ld\",symbolName,symbolValue);\n  result._0_4_ = stab_write_symbol_lto_priv_0(databaseHandle,0x80,0,0,formattedSymbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedSymbol);\n  }\n  result._8_8_ = extraData;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_debug_database_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_type_00113cb9",
                "param_1": "inputValue",
                "lVar1": "initializedType"
            },
            "code": "\nlong initializeType_00113cb9(long inputValue)\n\n{\n  long initializedType;\n  \n  if (inputValue != 0) {\n    initializedType = debug_make_type_constprop_0(0xe,0);\n    if (initializedType == 0) {\n      initializedType = 0;\n    }\n    else {\n      *(long *)(initializedType + 0x10) = inputValue;\n    }\n    return initializedType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_type_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_stab_symbol_0010eafe",
                "param_1": "fileDescriptor",
                "param_2": "source",
                "param_3": "flag",
                "__s": "symbol",
                "sVar2": "sourceLength",
                "sVar3": "symbolLength",
                "__s_00": "formattedSymbol",
                "stab_pop_type": "popSymbol",
                "xmalloc": "allocateMemory",
                "stab_write_symbol_lto_priv_0": "writeLtoSymbol",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 writeStabSymbol_0010eafe(long fileDescriptor,char *source,char flag)\n\n{\n  undefined4 returnValue;\n  char *symbol;\n  size_t sourceLength;\n  size_t symbolLength;\n  char *formattedSymbol;\n  \n  if ((*(int *)(fileDescriptor + 0x1f8) == 0) && (*(long *)(fileDescriptor + 0x1e8) == -1)) {\n    symbol = (char *)popSymbol();\n    sourceLength = strlen(source);\n    symbolLength = strlen(symbol);\n    formattedSymbol = (char *)allocateMemory(sourceLength + 3 + symbolLength);\n    sprintf(formattedSymbol,\"%s:%c%s\",source,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),symbol);\n    *(undefined8 *)(fileDescriptor + 0x1e8) = *(undefined8 *)(fileDescriptor + 0x10);\n    returnValue = writeLtoSymbol(fileDescriptor,0x24,0,0,formattedSymbol);\n    if ((char)returnValue != '\\0') {\n      free(formattedSymbol);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "set_param_type_constant_00113df2",
                "param_1": "value",
                "debug_make_type_constprop_0": "updateTypeConstant"
            },
            "code": "\nvoid setParamTypeConstant_00113df2(undefined4 value)\n\n{\n  updateTypeConstant(4,value);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "set_param_type_constant_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "print_version",
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "create_improved_string_0010a377",
                "param_1": "inputAddress",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "resultString",
                "uVar2": "returnValue",
                "cVar1": "flag",
                "uVar5": "flagValue"
            },
            "code": "\nundefined4 createImprovedString_0010a377(long inputAddress)\n\n{\n  char flag;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  undefined flagValue;\n  \n  flagValue = 1;\n  flag = *(char *)(*(long *)(inputAddress + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    flagValue = *(undefined *)(*(long *)(inputAddress + 0x60) + 0x1c);\n  }\n  string2 = (char *)stab_pop_type(inputAddress);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(resultString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  returnValue = stab_push_string(inputAddress,resultString,0,flagValue,0);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_improved_string_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_stab_0010d882",
                "param_1": "input",
                "param_2": "strings",
                "param_3": "output",
                "param_4": "error_flag",
                "iVar1": "count",
                "pcVar2": "current_string",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_position",
                "uVar6": "local_48",
                "bVar7": "loop_condition",
                "local_50": "string_index",
                "local_4c": "max_count",
                "local_48": "count",
                "local_44": "loop_counter",
                "local_40": "arguments"
            },
            "code": "\nundefined8 parse_stab_0010d882(long input,char **strings,long *output,undefined *error_flag)\n\n{\n  int count;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_position;\n  ulong local_48;\n  bool loop_condition;\n  uint string_index;\n  undefined4 max_count;\n  uint count;\n  int loop_counter;\n  undefined8 arguments [2];\n  \n  current_string = *strings;\n  max_count = 10;\n  if (output != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output = allocated_memory;\n    *error_flag = 0;\n  }\n  string_index = 0;\n  while( true ) {\n    current_position = *strings;\n    current_char = *current_position;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *strings = current_position + 1;\n      if (current_char == 'T') {\n        loop_counter = 1;\n      }\n      else {\n        current_char = stab_demangle_get_count(strings,&loop_counter);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = stab_demangle_get_count(strings,&count);\n      if ((current_char == '\\0') || (*(uint *)(input + 0x28) <= count)) {\nLAB_0010d958:\n        stab_bad_demangle(current_string);\n        return 0;\n      }\n      local_48 = (ulong)count;\n      while (count = loop_counter + -1, loop_condition = loop_counter != 0, loop_counter = count, loop_condition) {\n        arguments[0] = *(undefined8 *)(*(long *)(input + 0x20) + local_48 * 0x10);\n        current_char = stab_demangle_arg(input,arguments,output,&string_index,&max_count);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = stab_demangle_arg(input,strings,output,&string_index,&max_count);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output + (ulong)string_index * 8) = 0;\n    if (*current_position != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_position = current_position + 1;\n  *strings = current_position;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_position >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_arg",
                "stab_bad_demangle",
                "stab_demangle_get_count",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_stab_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "arrayPtr",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "puVar1": "allocatedMemory",
                "pauVar2": "existingArray",
                "lVar3": "count",
                "puVar4": "currentPtr",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**arrayPtr) [16],undefined8 param2Value,undefined4 param3Value,undefined4 param4Value)\n\n{\n  undefined4 *allocatedMemory;\n  undefined (*existingArray) [16];\n  long count;\n  undefined4 *currentPtr;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedMemory = (undefined4 *)xmalloc(0x28);\n  currentPtr = allocatedMemory;\n  for (count = 10; count != 0; count = count + -1) {\n    *currentPtr = 0;\n    currentPtr = currentPtr + (ulong)byteValue * -2 + 1;\n  }\n  existingArray = *arrayPtr;\n  *(undefined8 *)(allocatedMemory + 2) = param2Value;\n  allocatedMemory[5] = param3Value;\n  allocatedMemory[6] = param4Value;\n  if (existingArray == (undefined (*) [16])0x0) {\n    existingArray = (undefined (*) [16])xmalloc(0x10);\n    *existingArray = ZEXT816(0);\n    *arrayPtr = existingArray;\n    *(undefined (**) [16])(*existingArray + 8) = existingArray;\n  }\n  **(undefined8 **)(*existingArray + 8) = allocatedMemory;\n  *(undefined4 **)(*existingArray + 8) = allocatedMemory;\n  return allocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_name_type",
                "debug_record_function",
                "debug_tag_type",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "debugDataPtr",
                "param_2": "lineNumber",
                "param_3": "lineData",
                "uVar1": "errorMessage",
                "puVar2": "unitPtr",
                "uVar3": "index",
                "puVar4": "newRecordPtr",
                "lVar5": "counter",
                "puVar6": "recordPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long debugDataPtr,undefined8 lineNumber,undefined8 lineData)\n\n{\n  undefined8 errorMessage;\n  undefined8 *unitPtr;\n  ulong index;\n  undefined4 *newRecordPtr;\n  long counter;\n  undefined4 *recordPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(debugDataPtr + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    counter = *(long *)(debugDataPtr + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(debugDataPtr + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          unitPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)unitPtr * 8) = lineNumber;\n          *(undefined8 *)(counter + 0x60 + (long)unitPtr * 8) = lineData;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    recordPtr = newRecordPtr;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *recordPtr = 0;\n      recordPtr = recordPtr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(debugDataPtr + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = lineNumber;\n    *(undefined8 *)(newRecordPtr + 2) = errorMessage;\n    *(undefined8 *)(newRecordPtr + 0x18) = lineData;\n    recordPtr = newRecordPtr + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)recordPtr = 0xff;\n      recordPtr = (undefined4 *)((long)recordPtr + (ulong)flag * -2 + 1);\n    }\n    unitPtr = *(undefined8 **)(debugDataPtr + 0x28);\n    if (unitPtr == (undefined8 *)0x0) {\n      unitPtr = *(undefined8 **)(debugDataPtr + 8);\n      unitPtr[2] = newRecordPtr;\n    }\n    else {\n      *unitPtr = newRecordPtr;\n    }\n    *(undefined4 **)(debugDataPtr + 0x28) = newRecordPtr;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)unitPtr >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_matching_0011a170",
                "param_1": "patternList",
                "param_2": "inputList",
                "__pattern": "pattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatching_0011a170(char **patternList,char **inputList)\n\n{\n  char *pattern;\n  int matchResult;\n  \n  pattern = *patternList;\n  if (*pattern == '!') {\n    matchResult = fnmatch(pattern + 1,*inputList,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputList + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(pattern,*inputList,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputList + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "pattern_matching_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "functionContext",
                "param_2": "paramSize",
                "param_3": "paramValue",
                "param_4": "paramType",
                "param_5": "paramPointer",
                "puVar1": "currentNode",
                "uVar2": "errorMessage",
                "puVar3": "newNode",
                "puVar7": "tempNode",
                "bVar8": "zeroFlag",
                "lVar5": "tempValue",
                "puVar6": "lastNode",
                "puVar4": "nextNode"
            },
            "code": "\n\n\nundefined8\nrecordParameter_0010bd62(long functionContext,long paramSize,long paramValue,undefined4 paramType,undefined8 paramPointer)\n\n{\n  undefined8 *currentNode;\n  undefined8 errorMessage;\n  undefined4 *newNode;\n  undefined8 *nextNode;\n  long tempValue;\n  undefined8 *lastNode;\n  undefined4 *tempNode;\n  byte zeroFlag;\n  \n  zeroFlag = 0;\n  if (paramSize == 0) {\n    return 0;\n  }\n  if (paramValue != 0) {\n    if ((*(long *)(functionContext + 8) != 0) && (*(long *)(functionContext + 0x18) != 0)) {\n      newNode = (undefined4 *)xmalloc(0x28);\n      tempNode = newNode;\n      for (tempValue = 10; tempValue != 0; tempValue = tempValue + -1) {\n        *tempNode = 0;\n        tempNode = tempNode + (ulong)zeroFlag * -2 + 1;\n      }\n      tempValue = *(long *)(functionContext + 0x18);\n      *(long *)(newNode + 2) = paramSize;\n      *(long *)(newNode + 4) = paramValue;\n      newNode[6] = paramType;\n      currentNode = *(undefined8 **)(tempValue + 8);\n      *(undefined8 *)(newNode + 8) = paramPointer;\n      lastNode = (undefined8 *)(tempValue + 8);\n      while (nextNode = currentNode, nextNode != (undefined8 *)0x0) {\n        lastNode = nextNode;\n        currentNode = (undefined8 *)*nextNode;\n      }\n      *lastNode = newNode;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_files_00104ea2",
                "cVar1": "result",
                "iVar2": "arch",
                "ppcVar3": "archivedFiles",
                "pvVar4": "buffer",
                "lVar5": "bytesRead",
                "ppcVar6": "file",
                "pcVar7": "currentChar",
                "puVar8": "temp",
                "piVar9": "errnoLoc",
                "pcVar10": "filename",
                "uVar11": "errorMessage",
                "lVar12": "remainingSize",
                "pcVar13": "closeFunc",
                "lVar14": "bytesWritten",
                "unaff_EBX": "statResult",
                "unaff_RBP": "statBuffer",
                "pcVar15": "tempChar",
                "psVar16": "archiveStatBuffer",
                "unaff_R12": "archivePath",
                "unaff_R13": "tempDirInfo",
                "unaff_R15": "archiveFile",
                "bVar17": "byteVar",
                "unaff_retaddr": "returnAddress",
                "param_7": "param_archivePath",
                "param_8": "param_fileInfo",
                "param_9": "param_tempDirPath",
                "param_10": "param_archiveFile",
                "param_11": "param_format",
                "param_18": "param_permissions",
                "param_19": "param_totalSize"
            },
            "code": "\nvoid copyArchiveFiles_00104ea2(void)\n\n{\n  char result;\n  int arch;\n  char **archivedFiles;\n  void *buffer;\n  long bytesRead;\n  char **file;\n  char *currentChar;\n  undefined8 *temp;\n  int *errnoLoc;\n  char *filename;\n  undefined8 errorMessage;\n  long remainingSize;\n  code *closeFunc;\n  long bytesWritten;\n  int statResult;\n  stat *statBuffer;\n  char *tempChar;\n  stat *archiveStatBuffer;\n  char *archivePath;\n  undefined8 *tempDirInfo;\n  char **archiveFile;\n  byte byteVar;\n  undefined8 returnAddress;\n  undefined8 *param_archivePath;\n  long *param_fileInfo;\n  char *param_tempDirPath;\n  undefined8 *param_archiveFile;\n  undefined8 param_format;\n  undefined8 in_stack_00000030;\n  uint param_permissions;\n  long param_totalSize;\n  \n  byteVar = 0;\ncode_r0x00104ea2:\n  file = (char **)bfd_openw(archivePath,param_format);\n  if (file == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archivePath,0,0,0);\nLAB_00104e93:\n    status = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = copy_object(archiveFile,file,returnAddress);\n    if (result == '\\0') {\n      arch = bfd_get_arch(archiveFile);\n      if (arch == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(file);\n      if (result != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(file);\n    file = archiveFile;\n    if (result == '\\0') {\n      bfd_nonfatal_message(archivePath,0,0,0);\n      status = 1;\n    }\nLAB_00114a86:\n    if ((preserve_dates != '\\0') && (statResult == 0)) {\n      set_times(archivePath,statBuffer);\n    }\n    remainingSize = bfd_openr(archivePath,param_format);\n    tempDirInfo[2] = remainingSize;\n    *param_fileInfo = remainingSize;\n    param_fileInfo = (long *)(remainingSize + 0xf0);\n    archiveFile = (char **)bfd_openr_next_archived_file(param_archiveFile,file);\n    bfd_close(file);\n    while ((status == 0 && (archiveFile != (char **)0x0))) {\n      filename = *archiveFile;\n      currentChar = filename;\n      if (*filename == '/') {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorMessage,filename);\n        goto LAB_00104e93;\n      }\n      while (*currentChar != '\\0') {\n        tempChar = currentChar;\n        if ((*currentChar == '.') && (tempChar = currentChar + 1, currentChar[1] == '.')) {\n          tempChar = currentChar + 2;\n          if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*tempChar != '\\0' && (*tempChar != '/')); tempChar = tempChar + 1) {\n        }\n        currentChar = tempChar;\n        if (*tempChar == '/') {\n          copy_archive_001052a2();\n          return;\n        }\n      }\n      statBuffer = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(param_tempDirPath,&DAT_0011b47d);\n      arch = stat(archivePath,statBuffer);\n      temp = tempDirInfo;\n      if (-1 < arch) {\n        remainingSize = make_tempdir(archivePath);\n        free(archivePath);\n        if (remainingSize == 0) {\n          errnoLoc = __errno_location();\n          filename = strerror(*errnoLoc);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorMessage,filename);\n          goto LAB_00104e93;\n        }\n        temp = (undefined8 *)xmalloc(0x18);\n        filename = *archiveFile;\n        *temp = tempDirInfo;\n        temp[2] = 0;\n        temp[1] = remainingSize;\n        archivePath = (char *)concat(remainingSize,&DAT_0011b47d,filename);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        archiveStatBuffer = statBuffer;\n        for (remainingSize = 0x24; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *(undefined4 *)&archiveStatBuffer->st_dev = 0;\n          archiveStatBuffer = (stat *)((long)archiveStatBuffer + (ulong)byteVar * -8 + 4);\n        }\n        file = (char **)archiveFile[0x1d];\n        if ((char **)archiveFile[0x1d] == (char **)0x0) {\n          file = archiveFile;\n        }\n        statResult = (**(code **)(file[1] + 0x1e8))(archiveFile,statBuffer);\n        if (statResult != 0) {\n          filename = *archiveFile;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorMessage,filename);\n        }\n      }\n      tempDirInfo = (undefined8 *)xmalloc(0x18);\n      tempDirInfo[1] = archivePath;\n      *tempDirInfo = temp;\n      tempDirInfo[2] = 0;\n      result = bfd_check_format(archiveFile,1);\n      if (result != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        file = (char **)bfd_openw(archivePath,*(undefined8 *)archiveFile[1]);\n        if (file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,archiveFile,0,errorMessage);\n      file = (char **)bfd_openw(archivePath,param_format);\n      if (file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archivedFiles = (char **)archiveFile[0x1d];\n      if ((char **)archiveFile[0x1d] == (char **)0x0) {\n        archivedFiles = archiveFile;\n      }\n      arch = (**(code **)(archivedFiles[1] + 0x1e8))(archiveFile);\n      remainingSize = param_totalSize;\n      if (arch == 0) {\n        if (param_totalSize < 0) {\n          bfd_get_archive_filename(archiveFile);\n          errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(errorMessage);\n        }\n        else {\n          arch = bfd_seek(archiveFile,0,0);\n          if (arch == 0) {\n            if (verbose != '\\0') {\n              filename = *file;\n              errorMessage = bfd_get_archive_filename(archiveFile);\n              currentChar = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentChar,errorMessage,filename);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remainingSize == 0) {\n                chmod(*file,param_permissions | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(file);\n                file = archiveFile;\n                if (result == '\\0') {\n                  bfd_nonfatal_message(archivePath,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytesWritten = 0x2000;\n              if (remainingSize < 0x2001) {\n                bytesWritten = remainingSize;\n              }\n              bytesRead = bfd_bread(buffer,bytesWritten,archiveFile);\n              archivedFiles = archiveFile;\n              if ((bytesWritten != bytesRead) ||\n                 (bytesRead = bfd_bwrite(buffer,bytesWritten,file), archivedFiles = file, bytesWritten != bytesRead))\n              break;\n              remainingSize = remainingSize - bytesWritten;\n            }\n            bfd_nonfatal_message(0,archivedFiles,0,0);\n            free(buffer);\n          }\n          else {\n            errorMessage = bfd_get_archive_filename(archiveFile);\n            bfd_nonfatal(errorMessage);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,archiveFile,0,0);\n      }\n      result = bfd_close_all_done(file);\n      if (result == '\\0') {\n        bfd_nonfatal_message(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      status = 1;\n    }\n    *param_fileInfo = 0;\n    buffer = (void *)xstrdup(*param_archivePath);\n    if (status == 0) {\n      closeFunc = bfd_close;\n    }\n    else {\n      closeFunc = bfd_close_all_done;\n    }\n    result = (*closeFunc)(param_archivePath);\n    if (result == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*param_archiveFile);\n    result = bfd_close(param_archiveFile);\n    if (result == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (tempDirInfo != (undefined8 *)0x0) {\n    if (tempDirInfo[2] == 0) {\n      rmdir((char *)tempDirInfo[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirInfo[1]);\n    }\n    free((void *)tempDirInfo[1]);\n    temp = (undefined8 *)*tempDirInfo;\n    free(tempDirInfo);\n    tempDirInfo = temp;\n  }\n  rmdir(param_tempDirPath);\n  free(param_tempDirPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "stat",
                "strerror",
                "bfd_openr",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_close_all_done",
                "concat",
                "dcgettext",
                "printf",
                "bfd_bread",
                "FUN_00114b84",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_get_archive_filename",
                "non_fatal",
                "chmod",
                "free",
                "bfd_seek",
                "copy_object",
                "xstrdup",
                "bfd_bwrite",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "xmalloc",
                "bfd_nonfatal",
                "set_times",
                "bfd_close",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_files_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "process_parameters_00113ce0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "lVar1": "typeConstant",
                "plVar2": "allocatedMemory",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\nprocessParameters_00113ce0(long input_1,long input_2,undefined input_3,undefined8 input_4,undefined8 input_5)\n\n{\n  long typeConstant;\n  long *allocatedMemory;\n  undefined result [16];\n  \n  if (input_1 != 0) {\n    typeConstant = debug_make_type_constprop_0(0xd,0);\n    if (typeConstant != 0) {\n      allocatedMemory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocatedMemory + 0x11) = 0;\n      *allocatedMemory = input_1;\n      *(undefined4 *)((long)allocatedMemory + 0x14) = 0;\n      allocatedMemory[1] = input_2;\n      *(undefined *)(allocatedMemory + 2) = input_3;\n      *(long **)(typeConstant + 0x10) = allocatedMemory;\n      goto LAB_00113d2f;\n    }\n  }\n  typeConstant = 0;\nLAB_00113d2f:\n  result._8_8_ = input_5;\n  result._0_8_ = typeConstant;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_parameters_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_expand_data_00114dc7",
                "unaff_RBX": "filePointer",
                "unaff_RBP": "bufferPointer",
                "unaff_R12": "startPosition",
                "unaff_R14": "endPosition",
                "sVar4": "readSize",
                "iVar1": "errorCheck",
                "uVar2": "errorString",
                "uVar3": "errorContext"
            },
            "code": "\nvoid readAndExpandData_00114dc7(void)\n\n{\n  int errorCheck;\n  undefined8 errorString;\n  undefined8 errorContext;\n  size_t readSize;\n  FILE *filePointer;\n  long bufferPointer;\n  long startPosition;\n  long endPosition;\n  \n  while( true ) {\n    readSize = fread((void *)(*(long *)(bufferPointer + 0x20) + startPosition),1,endPosition - startPosition,\n                  filePointer);\n    errorCheck = ferror(filePointer);\n    if (errorCheck != 0) {\n      errorContext = *(undefined8 *)(bufferPointer + 0x10);\n      errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorString,errorContext);\n    }\n    startPosition = startPosition + readSize;\n    errorCheck = feof(filePointer);\n    if (errorCheck != 0) break;\n    if (startPosition == endPosition) {\n      endPosition = startPosition * 2;\n      errorContext = xrealloc(*(undefined8 *)(bufferPointer + 0x20),endPosition);\n      *(undefined8 *)(bufferPointer + 0x20) = errorContext;\n    }\n  }\n  *(long *)(bufferPointer + 0x18) = startPosition;\n  fclose(filePointer);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "dcgettext",
                "ferror",
                "xrealloc",
                "feof",
                "fread",
                "FUN_00114dc7",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_expand_data_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "reformat_and_print_header_data_00119f70",
                "param_1": "header_pointer",
                "param_2": "data_pointer",
                "uVar1": "endian_type",
                "cVar2": "character",
                "iVar3": "iteration_count",
                "uVar4": "endian_type_string",
                "uVar5": "endian_type_string2",
                "__format": "output_format",
                "lVar6": "allocated_size",
                "uVar7": "header_value",
                "lVar8": "realloc_result"
            },
            "code": "\nundefined4 reformat_and_print_header_data_00119f70(undefined8 *header_pointer,undefined8 *data_pointer)\n\n{\n  undefined4 endian_type;\n  char character;\n  int iteration_count;\n  undefined8 endian_type_string;\n  undefined8 endian_type_string2;\n  char *output_format;\n  long allocated_size;\n  undefined8 header_value;\n  long realloc_result;\n  \n  iteration_count = *(int *)((long)data_pointer + 0xc) + 1;\n  *(int *)((long)data_pointer + 0xc) = iteration_count;\n  if ((ulong)data_pointer[2] < (ulong)((long)iteration_count * 0x60)) {\n    allocated_size = 0x3000;\n    if (0x3f < iteration_count) {\n      allocated_size = (long)iteration_count * 0xc0;\n    }\n    realloc_result = xrealloc(data_pointer[3]);\n    data_pointer[3] = realloc_result;\n    memset((void *)(realloc_result + data_pointer[2]),0,allocated_size - data_pointer[2]);\n    data_pointer[2] = allocated_size;\n  }\n  endian_type = *(undefined4 *)((long)header_pointer + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data_pointer + 0xc) * 0x60 + data_pointer[3] + -0x60) = *header_pointer;\n  endian_type_string = endian_string(endian_type);\n  endian_type_string2 = endian_string(*(undefined4 *)(header_pointer + 2));\n  header_value = *header_pointer;\n  output_format = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(output_format,header_value,endian_type_string2,endian_type_string);\n  allocated_size = bfd_openw(*data_pointer,*header_pointer);\n  if (allocated_size == 0) {\n    bfd_nonfatal(*data_pointer);\n    *(undefined4 *)(data_pointer + 1) = 1;\n  }\n  else {\n    iteration_count = 2;\n    character = bfd_set_format(allocated_size,1);\n    if (character == '\\0') {\n      iteration_count = bfd_get_error();\n      if (iteration_count != 5) {\n        bfd_nonfatal(*header_pointer);\n        *(undefined4 *)(data_pointer + 1) = 1;\n      }\n    }\n    else {\n      do {\n        character = (**(code **)(*(long *)(allocated_size + 8) + 0x2a0))(allocated_size,iteration_count,0);\n        if (character != '\\0') {\n          header_value = bfd_printable_arch_mach(iteration_count,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)data_pointer + 0xc) * 0x60 + data_pointer[3] + -0x58 + (ulong)(iteration_count - 2)) =\n               1;\n        }\n        iteration_count = iteration_count + 1;\n      } while (iteration_count != 0x57);\n    }\n    bfd_close_all_done(allocated_size);\n  }\n  return *(undefined4 *)(data_pointer + 1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "printf",
                "bfd_openw",
                "bfd_printable_arch_mach",
                "endian_string",
                "do_display_target.cold",
                "bfd_set_format",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "reformat_and_print_header_data_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "fd_in",
                "param_2": "filename_out",
                "param_3": "file_permissions",
                "iVar1": "original_errno",
                "__fd": "fd_out",
                "iVar2": "bytes_read",
                "_Var3": "current_offset",
                "uVar4": "bytes_written",
                "sVar5": "bytes_written_check",
                "piVar6": "errno_pointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_00115a90(int fd_in,char *filename_out,long file_permissions)\n\n{\n  int original_errno;\n  int fd_out;\n  int bytes_read;\n  __off_t current_offset;\n  ulong bytes_written;\n  size_t bytes_written_check;\n  int *errno_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < fd_in) && (current_offset = lseek(fd_in,0,0), current_offset == 0)) {\n    fd_out = open(filename_out,0x201);\n    if (fd_out < 0) {\n      bytes_written = simple_copy_cold();\n      return bytes_written;\n    }\n    do {\n      bytes_written = read(fd_in,buffer,0x2000);\n      bytes_read = (int)bytes_written;\n      if (bytes_read < 1) {\n        errno_pointer = __errno_location();\n        original_errno = *errno_pointer;\n        fchmod(fd_out,*(__mode_t *)(file_permissions + 0x18));\n        close(fd_in);\n        close(fd_out);\n        if (bytes_read != 0) {\n          *errno_pointer = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_written & 0xffffffff;\n      }\n      bytes_written_check = write(fd_out,buffer,(long)bytes_read);\n    } while (bytes_written_check == (long)bytes_read);\n    errno_pointer = __errno_location();\n    bytes_read = *errno_pointer;\n    close(fd_in);\n    close(fd_out);\n    *errno_pointer = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "lseek",
                "fchmod",
                "write",
                "simple_copy.cold",
                "open",
                "read",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_set_times_00108200",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "flags",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorCode",
                "uVar2": "errorMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileAndSetTimes_00108200(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  char *fileToCopy;\n  char shouldSetTimes;\n  ulong flags;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorCode = __errno_location();\n  strerror(*errorCode);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(fileToCopy);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  returnValue._0_8_ = flags & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "set_times",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_and_set_times_00108200"
        }
    },
    "used_tokens": 250950,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}