{
    "functions": {
        "FUN_0010c1a0": {
            "renaming": {},
            "code": "\n\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* asprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a0",
            "calling": [
                "asprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a0"
        },
        "FUN_001055a0": {
            "renaming": {
                "FUN_001055a0": "initialize_001055a0",
                "completed_0": "isInitialized"
            },
            "code": "\nvoid initialize_001055a0(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_001055a0"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "set_print_width.cold",
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "process_binary_data_00103c00",
                "param_1": "fileData",
                "param_2": "fileSize",
                "param_3": "outputData",
                "param_4": "param4",
                "param_5": "returnValue",
                "puVar1": "outputPointer",
                "auVar2": "tempData",
                "lVar3": "tempSize",
                "uVar4": "allocationResult",
                "uVar5": "canonicalizedResult"
            },
            "code": "\nundefined8\nprocessBinaryData_00103c00(undefined8 *fileData,long fileSize,undefined (*outputData) [16],undefined8 param4,\n            undefined8 returnValue)\n\n{\n  undefined8 *outputPointer;\n  undefined tempData [16];\n  long tempSize;\n  undefined8 allocationResult;\n  undefined8 canonicalizedResult;\n  \n  **(long **)*outputData = fileSize;\n  if ((*(byte *)(fileSize + 0x24) & 4) == 0) {\n    **(undefined8 **)(*outputData + 8) = 0;\n    **(undefined8 **)outputData[1] = 0;\n  }\n  else {\n    tempSize = bfd_get_reloc_upper_bound();\n    if (-1 < tempSize) {\n      outputPointer = *(undefined8 **)(*outputData + 8);\n      allocationResult = xmalloc(tempSize);\n      canonicalizedResult = *(undefined8 *)(outputData[1] + 8);\n      *outputPointer = allocationResult;\n      outputPointer = *(undefined8 **)outputData[1];\n      canonicalizedResult = bfd_canonicalize_reloc(fileData,fileSize,**(undefined8 **)(*outputData + 8),canonicalizedResult);\n      *outputPointer = canonicalizedResult;\n      if (-1 < **(long **)outputData[1]) goto LAB_00103c7c;\n    }\n    bfd_fatal(*fileData);\n  }\nLAB_00103c7c:\n  tempSize = *(long *)(*outputData + 8) + 8;\n  *(long *)outputData[1] = *(long *)outputData[1] + 8;\n  tempData._8_4_ = (int)tempSize;\n  tempData._0_8_ = *(long *)*outputData + 8;\n  tempData._12_4_ = (int)((ulong)tempSize >> 0x20);\n  *outputData = tempData;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "bfd_get_reloc_upper_bound",
                "bfd_fatal",
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "process_binary_data_00103c00"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "print_archive_filename_bsd",
                "FUN_00103463",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "print_archive_member_bsd",
                "print_object_filename_sysv",
                "FUN_00102739",
                "main",
                "print_symbol_info_bsd.cold",
                "print_symbol",
                "print_symbol_filename_sysv",
                "print_object_filename_posix",
                "print_symbol_filename_posix.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix",
                "print_symbol_filename_bsd.cold",
                "print_object_filename_bsd",
                "print_value.constprop.0",
                "print_archive_member_posix",
                "display_file",
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "uVar9": "symbol_address",
                "cVar1": "is_undefined_symbol",
                "print_width": "width",
                "bVar8": "symbol_class",
                "uVar2": "symbol_type_modifier",
                "lVar7": "auxiliary_data",
                "bufp_6": "buffer_6",
                "bufp_7": "buffer_7",
                "print_value_constprop_0": "print_constant_value",
                "piVar5": "errno_location",
                "uVar6": "strerror_msg",
                "iVar3": "asprintf_result",
                "dcgettext": "get_text_message",
                "fatal": "report_error",
                "printf": "print_formatted_text",
                "free": "deallocate_memory",
                "__errno_location": "get_errno_location",
                "xstrerror": "get_error_string",
                "&desc_format": "&description_format"
            },
            "code": "\nvoid print_symbol_info_0010370a(void)\n\n{\n  char is_undefined_symbol;\n  ushort symbol_type_modifier;\n  int asprintf_result;\n  long *plVar4;\n  int *errno_location;\n  undefined8 strerror_msg;\n  long auxiliary_data;\n  ulong unaff_RBX;\n  byte symbol_class;\n  ulong symbol_address;\n  char *pis_undefined_symbol0;\n  \n  plVar4 = (long *)get_text_message(0,\"Print width has not been initialized (%d)\",5);\n  symbol_address = unaff_RBX & 0xffffffff;\n  report_error(plVar4,symbol_address);\n  print_symname(\"%-20s|\",plVar4,0,symbol_address);\n  is_undefined_symbol = bfd_is_undefined_symclass((int)*(char *)(*plVar4 + 8));\n  if (is_undefined_symbol == '\\0') {\n    print_constant_value(*(undefined8 *)*plVar4);\n  }\n  else if (width == 0x20) {\n    print_formatted_text(\"        \");\n  }\n  else {\n    print_formatted_text(\"                \");\n  }\n  print_formatted_text(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*plVar4 + 8));\n  if (*(char *)(*plVar4 + 8) == '-') {\n    print_formatted_text(\"%18s|  \",*(undefined8 *)(*plVar4 + 0x20));\n    print_formatted_text((char *)&description_format,(ulong)(uint)(int)*(short *)(*plVar4 + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (plVar4[2] == 0) {\n    if (plVar4[3] != 0) {\n      auxiliary_data = *(long *)(plVar4[3] + 0x30);\n      is_undefined_symbol = *(char *)(auxiliary_data + 0x28);\n      if (is_undefined_symbol == 'g') goto LAB_00103983;\n      if (is_undefined_symbol == 'h') {\n        pis_undefined_symbol0 = \"Line\";\n      }\n      else if (is_undefined_symbol == 'd') {\n        pis_undefined_symbol0 = \"Block\";\n      }\n      else if (*(ushort *)(auxiliary_data + 0x26) == 0) {\n        pis_undefined_symbol0 = \"None\";\n      }\n      else {\n        symbol_type_modifier = *(ushort *)(auxiliary_data + 0x26) >> 4 & 3;\n        if (symbol_type_modifier == 2) {\n          pis_undefined_symbol0 = \"Function\";\n        }\n        else if (symbol_type_modifier == 3) {\n          pis_undefined_symbol0 = \"Array\";\n        }\n        else {\n          if (symbol_type_modifier != 1) {\n            deallocate_memory(buffer_6);\n            symbol_type_modifier = *(ushort *)(auxiliary_data + 0x26);\n            symbol_class = *(byte *)(auxiliary_data + 0x28);\n            pis_undefined_symbol0 = (char *)get_text_message(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = asprint_formatted_text(&buffer_6,pis_undefined_symbol0,(ulong)symbol_class,(ulong)symbol_type_modifier);\n            pis_undefined_symbol0 = buffer_6;\n            goto joined_r0x00103964;\n          }\n          pis_undefined_symbol0 = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    print_formatted_text(\"                  |\");\n  }\n  else {\n    symbol_class = *(byte *)(plVar4[2] + 0x48) & 0xf;\n    switch(symbol_class) {\n    case 0:\n      pis_undefined_symbol0 = \"NOTYPE\";\n      break;\n    case 1:\n      pis_undefined_symbol0 = \"OBJECT\";\n      break;\n    case 2:\n      pis_undefined_symbol0 = \"FUNC\";\n      break;\n    case 3:\n      pis_undefined_symbol0 = \"SECTION\";\n      break;\n    case 4:\n      pis_undefined_symbol0 = \"FILE\";\n      break;\n    case 5:\n      pis_undefined_symbol0 = \"COMMON\";\n      break;\n    case 6:\n      pis_undefined_symbol0 = \"TLS\";\n      break;\n    default:\n      deallocate_memory(buffer_7);\n      pis_undefined_symbol0 = \"<processor specific>: %d\";\n      if ((2 < symbol_class - 0xd) && (pis_undefined_symbol0 = \"<OS specific>: %d\", 2 < symbol_class - 10)) {\n        pis_undefined_symbol0 = \"<unknown>: %d\";\n      }\n      pis_undefined_symbol0 = (char *)get_text_message(0,pis_undefined_symbol0,5);\n      asprintf_result = asprint_formatted_text(&buffer_7,pis_undefined_symbol0,(ulong)symbol_class);\n      pis_undefined_symbol0 = buffer_7;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = get_errno_location();\n        strerror_msg = get_error_string(*errno_location);\n        report_error(&DAT_0010712d,strerror_msg);\nLAB_00103983:\n        pis_undefined_symbol0 = \"File\";\n      }\n    }\nLAB_001039c0:\n    print_formatted_text(\"%18s|\",pis_undefined_symbol0);\n  }\n  if (plVar4[2] == 0) {\n    if (plVar4[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (width == 0x20) {\n      print_formatted_text(\"        \");\n    }\n    else {\n      print_formatted_text(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(plVar4[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_constant_value();\n  }\n  auxiliary_data = plVar4[2];\n  if ((auxiliary_data != 0) || (auxiliary_data = plVar4[3], auxiliary_data != 0)) {\n    print_formatted_text(\"|     |%s\",**(undefined8 **)(auxiliary_data + 0x20));\n    return;\n  }\nLAB_00103a54:\n  print_formatted_text(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "print_value.constprop.0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "set_print_format_00104370",
                "param_1": "inputFormat",
                "uVar1": "errorMessage",
                "ppuVar2": "outputFormat",
                "print_format": "printFormat"
            },
            "code": "\nundefined ** setPrintFormat_00104370(undefined *inputFormat,undefined8 param_2)\n\n{\n  undefined8 errorMessage;\n  undefined **outputFormat;\n  \n  switch(*inputFormat) {\n  case 0x42:\n  case 0x62:\n    printFormat = 0;\n    format = (undefined *)&formats;\n    return &formats;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    fatal(errorMessage,inputFormat);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    non_fatal(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    outputFormat = (undefined **)set_printFormat_00104397(inputFormat,param_2,3);\n    return outputFormat;\n  case 0x50:\n  case 0x70:\n    outputFormat = (undefined **)set_printFormat_00104397(inputFormat,param_2,2);\n    return outputFormat;\n  case 0x53:\n  case 0x73:\n    outputFormat = (undefined **)set_printFormat_00104397(inputFormat,param_2,1);\n    return outputFormat;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "fatal",
                "set_output_format.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "set_print_format_00104370"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010c058": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c058",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_0010c058"
        },
        "FUN_0010c178": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c178",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010c178"
        },
        "FUN_0010c210": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c210",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010c210"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00105500": {
            "renaming": {
                "FUN_00105500": "initialize_process_00105500",
                "param_1": "param1",
                "param_2": "param2",
                "auStack_8": "stackBuffer"
            },
            "code": "\nvoid processEntry initializeProcess_00105500(undefined8 param1,undefined8 param2)\n\n{\n  undefined stackBuffer [8];\n  \n  __libc_start_main(main,param2,&stack0x00000008,0,0,param1,stackBuffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "initialize_process_00105500"
        },
        "FUN_00102475": {
            "renaming": {
                "FUN_00102475": "set_print_format_00102475",
                "param_1": "param1",
                "param_2": "param2"
            },
            "code": "\nvoid setPrintFormat_00102475(undefined8 param1,undefined8 param2)\n\n{\n  set_print_format_00104397(param1,param2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "set_output_format"
            ],
            "imported": false,
            "current_name": "set_print_format_00102475"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formats",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "ptrFormats",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formats)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *ptrFormats;\n  \n  fflush(standardOutput);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,programName);\n  for (ptrFormats = formats; *ptrFormats != 0; ptrFormats = ptrFormats + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formats);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_0010c050": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c050",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010c050"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_file_info_001036a7",
                "param_1": "filename",
                "param_2": "symbol",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printFileInfo_001036a7(undefined8 *filename,undefined8 *symbol,undefined8 param3,undefined8 param4)\n\n{\n  if (filename_per_symbol != 0) {\n    if (filename != (undefined8 *)0x0) {\n      printf(\"%s:\",*filename);\n    }\n    printf(\"%s:\",*symbol,param4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_file_info_001036a7"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "fatal",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "filename",
                "pcVar1": "message",
                "undefined_only": "printUndefinedOnly",
                "print_width": "desiredPrintWidth"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 filename)\n\n{\n  char *message;\n  \n  message = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (printUndefinedOnly == 0) {\n    message = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message,filename);\n  message = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (desiredPrintWidth != 0x20) {\n    message = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "validate_compatibility_00102fc3",
                "param_1": "sort_bfd",
                "param_2": "sort_dynamic",
                "cVar1": "lastCharacter",
                "__s": "string_1",
                "__s_00": "string_2",
                "uVar2": "length_1",
                "uVar3": "length_2",
                "lVar4": "filePtr_1",
                "lVar5": "filePtr_2",
                "sVar6": "size_1",
                "sVar7": "size_2",
                "pcVar8": "strPtr_1",
                "pcVar9": "strPtr_2",
                "uVar10": "sum_1",
                "uVar11": "sum_2",
                "uVar12": "total_1",
                "uVar13": "funcPtr",
                "unaff_R13": "unaff_1",
                "bVar14": "isLess"
            },
            "code": "\nulong validateCompatibility_00102fc3(undefined8 sort_bfd,undefined8 sort_dynamic)\n\n{\n  char lastCharacter;\n  ulong length_1;\n  char *string_1;\n  char *string_2;\n  uint length_2;\n  long filePtr_1;\n  long filePtr_2;\n  size_t size_1;\n  size_t size_2;\n  char *strPtr_1;\n  char *strPtr_2;\n  ulong sum_1;\n  ulong sum_2;\n  ulong total_1;\n  undefined8 funcPtr;\n  long unaff_1;\n  bool isLess;\n  \n  funcPtr = *sort_bfd;\n  bfd_fatal();\n  filePtr_1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,funcPtr,sort_x);\n  filePtr_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_dynamic,sort_y);\n  if ((filePtr_1 == 0) || (unaff_1 = filePtr_2, filePtr_2 == 0)) {\n    filePtr_2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(filePtr_1 + 0x20) == 0x10c2a8) || (*(long *)(filePtr_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  sum_1 = *(ulong *)(*(long *)(filePtr_1 + 0x20) + 0x30);\n  length_1 = *(ulong *)(*(long *)(filePtr_2 + 0x20) + 0x30);\n  total_1 = *(long *)(filePtr_1 + 0x10) + sum_1;\n  sum_2 = *(long *)(unaff_1 + 0x10) + length_1;\n  isLess = total_1 < sum_2;\n  if ((total_1 != sum_2) || (isLess = sum_1 < length_1, sum_1 != length_1)) {\n    return (ulong)(-(uint)isLess | 1);\n  }\n  string_1 = *(char **)(filePtr_1 + 8);\n  string_2 = *(char **)(unaff_1 + 8);\n  size_1 = strlen(string_1);\n  size_2 = strlen(string_2);\n  strPtr_1 = strstr(string_1,\"gnu_compiled\");\n  if (strPtr_1 == (char *)0x0) {\n    strPtr_2 = strstr(string_1,\"gcc2_compiled\");\n    strPtr_1 = strstr(string_2,\"gnu_compiled\");\n    if ((strPtr_1 == (char *)0x0) && (strPtr_1 = strstr(string_2,\"gcc2_compiled\"), strPtr_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (strPtr_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    strPtr_1 = strstr(string_2,\"gnu_compiled\");\n    if (strPtr_1 == (char *)0x0) {\n      strPtr_2 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (strPtr_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  length_2 = *(uint *)(unaff_1 + 0x18) & 0x4000;\n  if ((*(byte *)(filePtr_1 + 0x19) & 0x40) == 0) {\n    if ((size_1 < 3) || (string_1[size_1 - 2] != '.')) {\n      if (length_2 != 0) {\n        return 1;\n      }\n      if ((size_2 < 3) || (string_2[size_2 - 2] != '.')) goto LAB_00103202;\n      isLess = false;\n      goto LAB_001031e7;\n    }\n    lastCharacter = string_1[size_1 - 1];\n    isLess = lastCharacter == 'o' || lastCharacter == 'a';\n    if (length_2 == 0) {\n      if ((size_2 < 3) || (string_2[size_2 - 2] != '.')) {\n        if (lastCharacter == 'o' || lastCharacter == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (length_2 != 0) goto LAB_00103202;\n    if (size_2 < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[size_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isLess = true;\nLAB_001031e7:\n    if ((string_2[size_2 - 1] != 'o') && (string_2[size_2 - 1] != 'a')) {\n      if (isLess) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isLess) {\n    return 1;\n  }\nLAB_00103202:\n  sum_1 = non_numeric_forward(funcPtr,sort_dynamic);\n  return sum_1;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "numeric_forward"
            ],
            "imported": false,
            "current_name": "validate_compatibility_00102fc3"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_information_00103729",
                "param_1": "symbol_table_entry",
                "param_2": "format_string",
                "cVar1": "is_undefined_symbol",
                "uVar2": "symbol_class",
                "iVar3": "error_code",
                "piVar4": "error_location",
                "uVar5": "error_message",
                "lVar6": "symbol_info",
                "bVar7": "symbol_type_index",
                "pcVar8": "symbol_type_string"
            },
            "code": "\nvoid print_symbol_information_00103729(long *symbol_table_entry,undefined8 format_string)\n\n{\n  char is_undefined_symbol;\n  ushort symbol_class;\n  int error_code;\n  int *error_location;\n  undefined8 error_message;\n  long symbol_info;\n  byte symbol_type_index;\n  char *symbol_type_string;\n  \n  print_symname(\"%-20s|\",symbol_table_entry,0,format_string);\n  is_undefined_symbol = bfd_is_undefined_symclass((int)*(char *)(*symbol_table_entry + 8));\n  if (is_undefined_symbol == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*symbol_table_entry);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_table_entry + 8));\n  if (*(char *)(*symbol_table_entry + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_table_entry + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_table_entry + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_table_entry[2] == 0) {\n    if (symbol_table_entry[3] != 0) {\n      symbol_info = *(long *)(symbol_table_entry[3] + 0x30);\n      is_undefined_symbol = *(char *)(symbol_info + 0x28);\n      if (is_undefined_symbol == 'g') goto LAB_00103983;\n      if (is_undefined_symbol == 'h') {\n        symbol_type_string = \"Line\";\n      }\n      else if (is_undefined_symbol == 'd') {\n        symbol_type_string = \"Block\";\n      }\n      else if (*(ushort *)(symbol_info + 0x26) == 0) {\n        symbol_type_string = \"None\";\n      }\n      else {\n        symbol_class = *(ushort *)(symbol_info + 0x26) >> 4 & 3;\n        if (symbol_class == 2) {\n          symbol_type_string = \"Function\";\n        }\n        else if (symbol_class == 3) {\n          symbol_type_string = \"Array\";\n        }\n        else {\n          if (symbol_class != 1) {\n            free(bufp_6);\n            symbol_class = *(ushort *)(symbol_info + 0x26);\n            symbol_type_index = *(byte *)(symbol_info + 0x28);\n            symbol_type_string = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            error_code = asprintf(&bufp_6,symbol_type_string,(ulong)symbol_type_index,(ulong)symbol_class);\n            symbol_type_string = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symbol_type_string = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbol_type_index = *(byte *)(symbol_table_entry[2] + 0x48) & 0xf;\n    switch(symbol_type_index) {\n    case 0:\n      symbol_type_string = \"NOTYPE\";\n      break;\n    case 1:\n      symbol_type_string = \"OBJECT\";\n      break;\n    case 2:\n      symbol_type_string = \"FUNC\";\n      break;\n    case 3:\n      symbol_type_string = \"SECTION\";\n      break;\n    case 4:\n      symbol_type_string = \"FILE\";\n      break;\n    case 5:\n      symbol_type_string = \"COMMON\";\n      break;\n    case 6:\n      symbol_type_string = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symbol_type_string = \"<processor specific>: %d\";\n      if ((2 < symbol_type_index - 0xd) && (symbol_type_string = \"<OS specific>: %d\", 2 < symbol_type_index - 10)) {\n        symbol_type_string = \"<unknown>: %d\";\n      }\n      symbol_type_string = (char *)dcgettext(0,symbol_type_string,5);\n      error_code = asprintf(&bufp_7,symbol_type_string,(ulong)symbol_type_index);\n      symbol_type_string = bufp_7;\njoined_r0x00103964:\n      if (error_code < 0) {\n        error_location = __errno_location();\n        error_message = xstrerror(*error_location);\n        fatal(&DAT_0010712d,error_message);\nLAB_00103983:\n        symbol_type_string = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbol_type_string);\n  }\n  if (symbol_table_entry[2] == 0) {\n    if (symbol_table_entry[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_table_entry[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  symbol_info = symbol_table_entry[2];\n  if ((symbol_info != 0) || (symbol_info = symbol_table_entry[3], symbol_info != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbol_info + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "fatal",
                "asprintf",
                "free",
                "xstrerror",
                "printf",
                "print_value.constprop.0",
                "__errno_location",
                "print_symname",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103729"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "display_file",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010c188": {
            "renaming": {},
            "code": "\n\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcoll@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c188",
            "calling": [
                "strcoll"
            ],
            "imported": false,
            "current_name": "FUN_0010c188"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_gmon_00102000",
                "ctx": "context",
                "iVar1": "start_result"
            },
            "code": "\nint initialize_gmon_00102000(EVP_PKEY_CTX *context)\n\n{\n  int start_result;\n  \n  start_result = __gmon_start__();\n  return start_result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_gmon_00102000"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "firstString",
                "param_2": "secondString",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printStrings_00103573(undefined8 *firstString,undefined8 *secondString,undefined8 param3,undefined8 param4)\n\n{\n  if (firstString != (undefined8 *)0x0) {\n    printf(\"%s:\",*firstString);\n  }\n  printf(\"%s:\",*secondString,param4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "print_symbol_filename_bsd"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_file_line_matches_00105110",
                "param_1": "filePaths",
                "param_2": "matchInfo",
                "param_3": "symbolName",
                "param_4": "linePrefix",
                "__ptr": "ptr",
                "__s1": "str",
                "pplVar1": "ptrPtr",
                "plVar2": "ptr",
                "lVar3": "length",
                "puVar4": "ptr",
                "cVar5": "ch",
                "iVar6": "index",
                "pvVar7": "ptr",
                "lVar8": "length",
                "uVar9": "value",
                "lVar10": "length",
                "local_b4": "value",
                "local_b0": "buffer",
                "local_a8": "bufferPtr",
                "local_a0": "symbolValue",
                "local_98": "matchPtr",
                "local_90": "linePtr",
                "local_88": "sectionPtr",
                "pvStack_80": "pointerStack_80",
                "pvStack_78": "pointerStack_78",
                "pvStack_70": "pointerStack_70",
                "local_68": "buffer",
                "local_60": "ch",
                "_stdout": "standardOutput",
                "line_numbers": "hasLineNumbers",
                "lineno_cache_bfd": "lineCache_bfd",
                "syms_5": "symbols",
                "lineno_cache_rel_bfd": "lineCacheRel_bfd",
                "param_1[1]": "param1_index1",
                "ifunc_type_chars": "ifuncTypeChars",
                "param_2[4]": "param2_index4",
                "param_2[1]": "param2_index1",
                "param_2[2]": "param2_index2",
                "seccount_2": "sectionCount",
                "relocs_3": "relocations",
                "relcount_0": "relCount",
                "&local_88": "addressOfLocal_88",
                "ifunc_type_chars[1]": "ifuncTypeCharsIndex1",
                "printf": "printFormatted",
                "putc": "putCharacter",
                "bfd_fatal": "fatalError",
                "search_and_print_match_00103463": "searchAndPrintMatch"
            },
            "code": "\n\n\nvoid printFileLineMatches_00105110(undefined8 *filePaths,long *matchInfo,undefined8 symbolName,undefined8 *linePrefix)\n\n{\n  void *ptr;\n  char *str;\n  long **ptrPtr;\n  long *ptr;\n  long length;\n  undefined8 *ptr;\n  char ch;\n  int index;\n  void *ptr;\n  long length;\n  uint value;\n  long length;\n  uint value;\n  undefined buffer [8];\n  undefined *bufferPtr;\n  undefined8 symbolValue;\n  long *matchPtr;\n  long *linePtr;\n  void *sectionPtr;\n  void *pointerStack_80;\n  void *pointerStack_78;\n  void *pointerStack_70;\n  undefined buffer [8];\n  char ch;\n  \n  if (*(code **)(format + 0x18) == print_symbol_filename_bsd) {\n    if (filename_per_symbol != 0) {\n      if (linePrefix != (undefined8 *)0x0) {\n        printFormatted(\"%s:\",*linePrefix);\n      }\n      printFormatted(\"%s:\",*filePaths);\n    }\n  }\n  else {\n    (**(code **)(format + 0x18))(linePrefix,filePaths);\n  }\n  bufferPtr = buffer;\n  (**(code **)(param1_index1 + 0x218))(filePaths,matchInfo,bufferPtr);\n  value = *(uint *)(matchInfo + 3);\n  ch = ch;\n  if (((((ch == 'i') && ((value & 0x400000) != 0)) && (ifuncTypeChars != (char *)0x0)) &&\n      ((*ifuncTypeChars != '\\0' && (ch = *ifuncTypeChars, (value & 2) == 0)))) &&\n     (ch = ch, ifuncTypeCharsIndex1 != '\\0')) {\n    ch = ifuncTypeCharsIndex1;\n  }\n  ch = ch;\n  symbolValue = symbolName;\n  if ((value & 0x200100) != 0) goto LAB_00103330;\n  length = *matchInfo;\n  index = *(int *)(*(long *)(length + 8) + 8);\n  if (((value & 0x200000) == 0) && (index == 5)) {\n    matchPtr = matchInfo;\n    if (*(long *)(length + 0x110) == 0) {\n      matchPtr = (long *)0x0;\n    }\n  }\n  else {\n    matchPtr = (long *)0x0;\n    if (((index - 2U & 0xfffffffd) == 0) && (linePtr = matchInfo, *(long *)(length + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  linePtr = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(format + 0x20))(&bufferPtr,filePaths);\n  do {\n    if (hasLineNumbers == 0) {\nLAB_001051e6:\n      putCharacter(10,standardOutput);\n      return;\n    }\n    if (lineCache_bfd == filePaths) {\n      ptr = lineCache_bfd;\n      if (symbols == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      lineCache_bfd = ptr;\n      ptr = relocations;\n      if (param2_index4 == 0x10c2a8) {\n        if (lineCacheRel_bfd == filePaths) {\n          if (relocations == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          value = 0;\n          if (relocations != (void *)0x0) {\n            for (; value < sectionCount; value = value + 1) {\n              ptr = *(void **)((long)ptr + (ulong)value * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(secs_1);\n            free(ptr);\n            free(relCount);\n            secs_1 = (void *)0x0;\n            relocations = (void *)0x0;\n            relCount = (void *)0x0;\n          }\nLAB_001033d1:\n          sectionCount = *(uint *)(filePaths + 0x14);\n          secs_1 = (void *)xmalloc((ulong)sectionCount * 8);\n          relocations = (void *)xmalloc((ulong)sectionCount << 3);\n          relCount = (void *)xmalloc((ulong)sectionCount << 3);\n          pointerStack_70 = symbols;\n          sectionPtr = secs_1;\n          pointerStack_80 = relocations;\n          pointerStack_78 = relCount;\n          bfd_map_over_sections(filePaths,get_relocs,addressOfLocal_88);\n          lineCacheRel_bfd = filePaths;\n        }\n        str = (char *)param2_index1;\n        for (value = 0; value < sectionCount; value = value + 1) {\n          length = (ulong)value * 8;\n          ptr = relCount;\n          for (length = 0;\n              *(long *)((long)ptr + length) != length && length <= *(long *)((long)ptr + length)\n              ; length = length + 1) {\n            ptrPtr = *(long ***)(*(long *)((long)relocations + length) + length * 8);\n            ptr = *ptrPtr;\n            if ((((ptr != (long *)0x0) &&\n                 (length = *ptr, *(long *)(length + 0x20) == param2_index4)) &&\n                (*(long *)(length + 0x10) == param2_index2)) &&\n               (((index = strcmp(str,*(char **)(length + 8)), index == 0 &&\n                 (ch = (**(code **)(param1_index1 + 0x240))\n                                    (filePaths,symbols,*(undefined8 *)((long)secs_1 + length),ptrPtr[1]\n                                     ,addressOfLocal_88,buffer,&value,0), ptr = relCount,\n                 ch != '\\0')) && (sectionPtr != (void *)0x0)))) {\n              printFormatted(\"\\t%s:%u\",sectionPtr,(ulong)value);\n              value = sectionCount;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(param2_index4 + 0xe0) == filePaths) {\n        ch = (**(code **)(param1_index1 + 0x250))(filePaths,symbols,matchInfo,addressOfLocal_88,&value);\n        if (((ch != '\\0') ||\n            (ch = (**(code **)(param1_index1 + 0x240))\n                               (filePaths,symbols,param2_index4,param2_index2,addressOfLocal_88,buffer,&value,0)\n            , ch != '\\0')) && ((sectionPtr != (void *)0x0 && (value != 0)))) {\n          printFormatted(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (symbols != (void *)0x0) {\n      free(symbols);\n      symbols = (void *)0x0;\n    }\nLAB_00105359:\n    length = (**(code **)(param1_index1 + 0x1f8))(filePaths);\n    if (length < 0) {\n      searchAndPrintMatch(length);\n      return;\n    }\n    symbols = (void *)xmalloc();\n    length = (**(code **)(param1_index1 + 0x200))(filePaths,symbols);\n    ptr = filePaths;\n    if (-1 < length) goto LAB_00105288;\n    fatalError(*filePaths);\nLAB_00103330:\n    matchPtr = (long *)0x0;\n    linePtr = (long *)0x0;\n    (**(code **)(format + 0x20))(&bufferPtr,filePaths);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103463",
                "print_symbol_info_bsd",
                "free",
                "xmalloc",
                "printf",
                "bfd_fatal",
                "print_symbol_filename_bsd",
                "print_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_file_line_matches_00105110"
        },
        "FUN_0010c060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010c060"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103463",
                "set_print_width",
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_0010c1a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a8",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a8"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_file_compatibility_00102fd2",
                "param_1": "file1",
                "param_2": "file2",
                "cVar1": "lastChar",
                "__s": "file1Name",
                "__s_00": "file2Name",
                "uVar10": "file1Size",
                "uVar2": "file2Size",
                "uVar12": "file1Offset",
                "uVar11": "file2Offset",
                "unaff_R13": "errMsg",
                "bVar13": "isCompatible",
                "lVar4": "file1Handler",
                "lVar5": "file2Handler",
                "sVar6": "file1NameLength",
                "sVar7": "file2NameLength",
                "pcVar8": "gnuCompiled",
                "pcVar9": "gcc2Compiled",
                "uVar3": "file2Flags",
                "sort_bfd": "sortBuffer",
                "sort_dynamic": "sortDynamic",
                "sort_x": "sortX",
                "sort_y": "sortY"
            },
            "code": "\nulong checkFileCompatibility_00102fd2(undefined8 file1,undefined8 file2)\n\n{\n  char lastChar;\n  ulong file2Size;\n  char *file1Name;\n  char *file2Name;\n  uint file2Flags;\n  long file1Handler;\n  long file2Handler;\n  size_t file1NameLength;\n  size_t file2NameLength;\n  char *gnuCompiled;\n  char *gcc2Compiled;\n  ulong file1Size;\n  ulong file2Offset;\n  ulong file1Offset;\n  long errMsg;\n  bool isCompatible;\n  \n  file1Handler = (**(code **)(sortBuffer[1] + 0x270))(sortBuffer,sortDynamic,file1,sortX);\n  file2Handler = (**(code **)(sortBuffer[1] + 0x270))(sortBuffer,sortDynamic,file2,sortY);\n  if ((file1Handler == 0) || (errMsg = file2Handler, file2Handler == 0)) {\n    file2Handler = bfd_fatal(*sortBuffer);\n  }\n  if ((*(long *)(file1Handler + 0x20) == 0x10c2a8) || (*(long *)(file2Handler + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  file1Size = *(ulong *)(*(long *)(file1Handler + 0x20) + 0x30);\n  file2Size = *(ulong *)(*(long *)(file2Handler + 0x20) + 0x30);\n  file1Offset = *(long *)(file1Handler + 0x10) + file1Size;\n  file2Offset = *(long *)(errMsg + 0x10) + file2Size;\n  isCompatible = file1Offset < file2Offset;\n  if ((file1Offset != file2Offset) || (isCompatible = file1Size < file2Size, file1Size != file2Size)) {\n    return (ulong)(-(uint)isCompatible | 1);\n  }\n  file1Name = *(char **)(file1Handler + 8);\n  file2Name = *(char **)(errMsg + 8);\n  file1NameLength = strlen(file1Name);\n  file2NameLength = strlen(file2Name);\n  gnuCompiled = strstr(file1Name,\"gnu_compiled\");\n  if (gnuCompiled == (char *)0x0) {\n    gcc2Compiled = strstr(file1Name,\"gcc2_compiled\");\n    gnuCompiled = strstr(file2Name,\"gnu_compiled\");\n    if ((gnuCompiled == (char *)0x0) && (gnuCompiled = strstr(file2Name,\"gcc2_compiled\"), gnuCompiled == (char *)0x0))\n    goto joined_r0x00103157;\n    if (gcc2Compiled == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    gnuCompiled = strstr(file2Name,\"gnu_compiled\");\n    if (gnuCompiled == (char *)0x0) {\n      gcc2Compiled = strstr(file2Name,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (gcc2Compiled != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  file2Flags = *(uint *)(errMsg + 0x18) & 0x4000;\n  if ((*(byte *)(file1Handler + 0x19) & 0x40) == 0) {\n    if ((file1NameLength < 3) || (file1Name[file1NameLength - 2] != '.')) {\n      if (file2Flags != 0) {\n        return 1;\n      }\n      if ((file2NameLength < 3) || (file2Name[file2NameLength - 2] != '.')) goto LAB_00103202;\n      isCompatible = false;\n      goto LAB_001031e7;\n    }\n    lastChar = file1Name[file1NameLength - 1];\n    isCompatible = lastChar == 'o' || lastChar == 'a';\n    if (file2Flags == 0) {\n      if ((file2NameLength < 3) || (file2Name[file2NameLength - 2] != '.')) {\n        if (lastChar == 'o' || lastChar == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (file2Flags != 0) goto LAB_00103202;\n    if (file2NameLength < 3) {\n      return 0xffffffff;\n    }\n    if (file2Name[file2NameLength - 2] != '.') {\n      return 0xffffffff;\n    }\n    isCompatible = true;\nLAB_001031e7:\n    if ((file2Name[file2NameLength - 1] != 'o') && (file2Name[file2NameLength - 1] != 'a')) {\n      if (isCompatible) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isCompatible) {\n    return 1;\n  }\nLAB_00103202:\n  file1Size = non_numeric_forward(file1,file2);\n  return file1Size;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "abort",
                "bfd_fatal",
                "strlen",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_file_compatibility_00102fd2"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "bfd_fatal_wrapper_00102f9f",
                "auVar1": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] bfd_fatal_wrapper_00102f9f(void)\n\n{\n  undefined result [16];\n  undefined8 return_address;\n  \n  bfd_fatal(*sort_bfd);\n  result._8_8_ = return_address;\n  result._0_8_ = 0xffffffff;\n  return result;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "bfd_fatal_wrapper_00102f9f"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_and_print_constant_value_00103a66",
                "unaff_RBX": "ptr",
                "print_constant_value_0010651a": "printConstantValue"
            },
            "code": "\nvoid checkAndPrintConstantValue_00103a66(void)\n\n{\n  long ptr;\n  \n  if (*(long *)(ptr + 8) != 0) {\n    printConstantValue();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "check_and_print_constant_value_00103a66"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "display_rel_file",
                "main",
                "bfd_nonfatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010c118": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c118",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010c118"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_information_001035a2",
                "unaff_RBX": "symbolInformation",
                "lVar1": "symbolOffset"
            },
            "code": "\nvoid printSymbolInformation_001035a2(void)\n\n{\n  long *symbolInformation;\n  long symbolOffset;\n  \n  if (symbolInformation[2] == 0) {\n    symbolOffset = symbolInformation[1];\n  }\n  else {\n    symbolOffset = *(long *)(symbolInformation[2] + 0x38);\n  }\n  if (symbolOffset != 0) {\n    putchar(0x20);\n    if (symbolInformation[2] == 0) {\n      symbolOffset = symbolInformation[1];\n    }\n    else {\n      symbolOffset = *(long *)(symbolInformation[2] + 0x38);\n    }\n    print_value_constprop_0(symbolOffset);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolInformation + 8));\n  if (*(char *)(*symbolInformation + 8) != '-') {\n    print_symname(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf((char *)&other_format,(ulong)(uint)(int)*(char *)(*symbolInformation + 0x19));\n  putchar(0x20);\n  printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbolInformation + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolInformation + 0x20));\n  print_symname(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "print_symbol_info_bsd"
            ],
            "imported": false,
            "current_name": "print_symbol_information_001035a2"
        },
        "FUN_0010c198": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c198",
            "calling": [
                "fseek",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_0010c198"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "search_and_print_match_00103463",
                "unaff_R12": "inputStr",
                "unaff_R13": "errorMessage",
                "unaff_R15": "baseAddress",
                "param_8": "counter",
                "param_10": "address",
                "in_stack_00000050": "lineNumber",
                "seccount_2": "maxCount",
                "relcount_0": "relCount",
                "relocs_3": "relocations",
                "putc": "printChar",
                "_stdout": "standardOutput",
                "bfd_fatal": "handleFatalError",
                "strcmp": "compareStrings",
                "printf": "printFormatted",
                "code": "functionPointer"
            },
            "code": "\n\n\nvoid searchAndPrintMatch_00103463(void)\n\n{\n  long *plVar1;\n  long lVar2;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  char *inputStr;\n  undefined8 *errorMessage;\n  long lVar6;\n  long baseAddress;\n  undefined8 counter;\n  ulong address;\n  long lineNumber;\n  \n  handleFatalError(*errorMessage);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (maxCount <= counter._4_4_) {\n      printChar(10,standardOutput);\n      return;\n    }\n    lVar5 = relCount;\n    for (lVar6 = 0; plVar1 = (long *)(lVar5 + (ulong)counter._4_4_ * 8),\n        *plVar1 != lVar6 && lVar6 <= *plVar1; lVar6 = lVar6 + 1) {\n      plVar1 = **(long ***)(*(long *)(relocations + (ulong)counter._4_4_ * 8) + lVar6 * 8);\n      if ((((plVar1 != (long *)0x0) &&\n           (lVar2 = *plVar1, *(long *)(lVar2 + 0x20) == *(long *)(baseAddress + 0x20))) &&\n          (*(long *)(lVar2 + 0x10) == *(long *)(baseAddress + 0x10))) &&\n         (((iVar4 = compareStrings(inputStr,*(char **)(lVar2 + 8)), iVar4 == 0 &&\n           (cVar3 = (**(functionPointer **)(errorMessage[1] + 0x240))(), lVar5 = relCount, cVar3 != '\\0')) &&\n          (lineNumber != 0)))) {\n        printFormatted(\"\\t%s:%u\",lineNumber,address >> 0x20);\n        counter._4_4_ = maxCount;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_fatal",
                "strcmp",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "search_and_print_match_00103463"
        },
        "FUN_0010c1b8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1b8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010c1b8"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "set_print_format_00104397",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "formatIndex",
                "print_format": "printFormat",
                "format": "selectedFormat"
            },
            "code": "\nvoid setPrintFormat_00104397(undefined8 input_1,undefined8 input_2,int formatIndex)\n\n{\n  printFormat = formatIndex;\n  selectedFormat = (undefined *)(&selectedFormats + (long)formatIndex * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "set_output_format",
                "set_output_format.cold"
            ],
            "imported": false,
            "current_name": "set_print_format_00104397"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "update_print_format_string_00104670",
                "param_1": "binaryData",
                "iVar1": "formatFlag",
                "pcVar2": "ptr64",
                "puVar3": "radixFormat",
                "pcVar4": "formatString",
                "print_width": "architectureSize",
                "print_format_string": "newFormatString",
                "print_format": "formatType",
                "print_radix": "radixNumber"
            },
            "code": "\nvoid updatePrintFormatString_00104670(long binaryData)\n\n{\n  int formatFlag;\n  char *ptr64;\n  undefined *radixFormat;\n  char *formatString;\n  \n  architectureSize = bfd_get_arch_size();\n  if (architectureSize == -1) {\n    formatString = **(char ***)(binaryData + 8);\n    ptr64 = strstr(formatString,\"64\");\n    formatFlag = 0x40;\n    if (ptr64 == (char *)0x0) {\n      formatFlag = strcmp(formatString,\"mmo\");\n      formatFlag = (-(uint)(formatFlag == 0) & 0x20) + 0x20;\n    }\n    architectureSize = formatFlag;\n    free(newFormatString);\n  }\n  else {\n    free(newFormatString);\n  }\n  if (formatType - 2U < 2) {\n    formatString = \"\";\n  }\n  else if (architectureSize == 0x20) {\n    formatString = \"08\";\n  }\n  else {\n    formatString = \"016\";\n  }\n  radixFormat = &DAT_001071d0;\n  if (radixNumber != 0x10) {\n    if (radixNumber < 0x11) {\n      if (radixNumber == 8) {\n        radixFormat = &DAT_001071ca;\n      }\n      else {\n        if (radixNumber != 10) {\n          newFormatString = (void *)concat(&DAT_001071d7,formatString,0,0);\n          return;\n        }\n        radixFormat = &DAT_001071cd;\n      }\n    }\n    else {\n      radixFormat = (undefined *)0x0;\n    }\n  }\n  newFormatString = (void *)concat(&DAT_001071d7,formatString,radixFormat,0);\n  return;\n}\n\n",
            "called": [
                "set_print_width.cold",
                "free",
                "bfd_get_arch_size",
                "strcmp",
                "concat",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "update_print_format_string_00104670"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_0010c070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010c070"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103463",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_0010c0b0": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b0",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b0"
        },
        "FUN_0010c1d0": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1d0",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010c1d0"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "handle_unknown_error_00103a78",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid handleUnknownError_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "handle_unknown_error_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "extract_and_sort_symbols_001048e0",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputData",
                "param_6": "extraData",
                "bVar1": "byteValue",
                "pcVar2": "functionPtr",
                "cVar3": "charValue",
                "iVar4": "intValue",
                "uVar5": "uintValue",
                "uVar6": "result",
                "lVar7": "longValue",
                "ppuVar8": "pointerPointerValue1",
                "ppuVar9": "pointerPointerValue2",
                "lVar10": "longValue2",
                "puVar11": "pointerValue",
                "bVar19": "boolValue",
                "bVar20": "byteValue2",
                "ppuStack_78": "pointerPointerValue3",
                "local_4c": "localValue",
                "local_48": "localPointer",
                "dynamic": "isDynamic",
                "quiet": "isQuiet",
                "show_synthetic": "showSynthetic",
                "undefined_only": "isUndefinedOnly",
                "print_debug_syms": "printDebugSymbols",
                "sort_by_size": "sortBySize",
                "extract_and_sort_symbols_00104d5b": "extractAndSortSymbols1",
                "extract_and_sort_symbols_001049c0": "extractAndSortSymbols2",
                "non_fatal": "nonFatal",
                "display_rel_file_cold": "displayRelFileCold",
                "unaff_RBX": "registerBX",
                "report_plugin_err": "reportPluginError",
                "unaff_RBP": "registerBP",
                "unaff_R14": "registerR14",
                "unaff_R15": "registerR15",
                "ppuVar12": "pointerPointerValue3",
                "ppuVar13": "pointerPointerValue4",
                "ppuVar14": "pointerPointerValue5",
                "ppuVar15": "pointerPointerValue6",
                "ppuVar16": "pointerPointerValue7",
                "ppuVar17": "pointerPointerValue8",
                "ppuVar18": "pointerPointerValue9"
            },
            "code": "\nvoid extractAndSortSymbols_001048e0(ulong **inputData,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **outputData,ulong **extraData)\n\n{\n  byte byteValue;\n  code *functionPtr;\n  char charValue;\n  int intValue;\n  uint uintValue;\n  undefined8 result;\n  long longValue;\n  ulong **pointerPointerValue1;\n  ulong **pointerPointerValue2;\n  long longValue2;\n  ulong *pointerValue;\n  ulong **registerBX;\n  ulong **pointerPointerValue3;\n  ulong **pointerPointerValue4;\n  ulong **registerBP;\n  ulong **pointerPointerValue5;\n  ulong **pointerPointerValue6;\n  ulong **pointerPointerValue7;\n  ulong **pointerPointerValue8;\n  ulong **pointerPointerValue9;\n  ulong **registerR14;\n  ulong **registerR15;\n  bool boolValue;\n  byte byteValue2;\n  ulong **pointerPointerValue3;\n  uint localValue;\n  ulong *localPointer;\n  ulong **local_40 [2];\n  \n  byteValue2 = 0;\n  localPointer = (ulong *)0x0;\n  if ((isDynamic != 0) || ((*(byte *)((long)inputData + 0x44) & 0x10) != 0)) {\n    pointerPointerValue2 = (ulong **)&localValue;\n    pointerPointerValue1 = (ulong **)(*(code *)inputData[1][0x4d])(inputData,isDynamic != 0,local_40);\n    if ((long)pointerPointerValue1 < 0) {\n      if ((isDynamic != 0) && (intValue = bfd_get_error(), intValue == 7)) {\n        if (isQuiet != 0) {\n          return;\n        }\n        pointerValue = *inputData;\n        result = dcgettext(0,\"%s: no symbols\",5);\n        nonFatal(result,pointerValue);\n        return;\n      }\n      bfd_fatal(*inputData);\n      goto LAB_00102e9e;\n    }\n    if (pointerPointerValue1 != (ulong **)0x0) {\n      if (showSynthetic != 0) {\n        if (localValue == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteValue = *(byte *)((long)inputData + 0x4a);\n      pointerPointerValue4 = inputData;\n      do {\n        if ((byteValue & 0x10) != 0) {\n          registerBX = (ulong **)*pointerPointerValue4;\n          reportPluginError = '\\0';\n          result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          nonFatal(result);\n        }\n        pointerPointerValue5 = local_40[0];\n        registerR14 = (ulong **)(ulong)localValue;\n        boolValue = isDynamic != 0;\n        pointerPointerValue2 = local_40[0];\n        registerR15 = (ulong **)(*(code *)pointerPointerValue4[1][0x41])(pointerPointerValue4);\n        pointerPointerValue3 = registerBX;\n        registerBP = (ulong **)(ulong)boolValue;\n        inputData = pointerPointerValue4;\n        if (registerR15 == (ulong **)0x0) goto LAB_00102ea7;\n        pointerPointerValue8 = (ulong **)((long)pointerPointerValue1 * (long)registerR14);\n        pointerPointerValue1 = (ulong **)((long)pointerPointerValue5 + (long)pointerPointerValue8);\n        inputData = pointerPointerValue5;\n        pointerPointerValue3 = pointerPointerValue5;\njoined_r0x001049a4:\n        if (inputData < pointerPointerValue1) {\n          do {\n            pointerPointerValue2 = (ulong **)(*(code *)pointerPointerValue4[1][0x4e])(pointerPointerValue4,boolValue,inputData,registerR15);\n            pointerPointerValue8 = registerR15;\n            if (pointerPointerValue2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointerValue = pointerPointerValue2[1];\n            pointerPointerValue8 = pointerPointerValue1;\n            if (((pointerValue == (ulong *)0x0) || (*(char *)pointerValue != '_')) ||\n               (*(char *)((long)pointerValue + 1) != '_')) {\nLAB_00104a03:\n              if (isUndefinedOnly == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintValue = (uint)(pointerPointerValue2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintValue == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (printDebugSymbols == 0) {\n                if ((*(byte *)(pointerPointerValue2 + 3) & 4) == 0) {\n                  if (sortBySize != 0) goto extractAndSortSymbols_001048e01;\nLAB_00104a53:\n                  extraData = (ulong **)(ulong)defined_only;\n                  if (defined_only == 0) {\n                    charValue = (*(code *)pointerPointerValue4[1][0x46])(pointerPointerValue4,pointerPointerValue2);\n                    if (charValue != '\\0') {\n                      displayRelFileCold();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (pointerPointerValue2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (sortBySize == 0) goto LAB_00104a53;\nextractAndSortSymbols_001048e01:\n                if ((pointerPointerValue2[4] == (ulong *)0x10c2a8) || (pointerPointerValue2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charValue = (*(code *)pointerPointerValue4[1][0x46])(pointerPointerValue4,pointerPointerValue2);\n                if (charValue != '\\0') {\n                  displayRelFileCold();\n                  return;\n                }\nLAB_00104a7b:\n                if (pointerPointerValue3 != inputData) {\n                  if (registerR14 == (ulong **)0x8) {\n                    *pointerPointerValue3 = *inputData;\n                    extractAndSortSymbols_001048e02();\n                    return;\n                  }\n                  for (; registerR14 != (ulong **)0x0; registerR14 = (ulong **)((long)registerR14 + -1)) {\n                    *(undefined *)pointerPointerValue3 = *(undefined *)inputData;\n                    inputData = (ulong **)((long)inputData + (ulong)byteValue2 * -2 + 1);\n                    pointerPointerValue3 = (ulong **)((long)pointerPointerValue3 + (ulong)byteValue2 * -2 + 1);\n                  }\n                  extractAndSortSymbols_001048e02();\n                  return;\n                }\n                pointerPointerValue3 = (ulong **)((long)pointerPointerValue3 + (long)registerR14);\n              }\n            }\n            else {\n              intValue = strcmp((char *)((long)pointerValue + (ulong)(*(char *)((long)pointerValue + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              pointerPointerValue3 = pointerPointerValue2;\n              if (intValue == 0) {\n                if (reportPluginError != '\\0') {\n                  pointerPointerValue3 = (ulong **)*pointerPointerValue4;\n                  reportPluginError = '\\0';\n                  result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  nonFatal(result,pointerPointerValue3);\n                }\n                goto LAB_00104a03;\n              }\n              if (isUndefinedOnly != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (external_only == 0) {\n                if (non_weak != 0) {\n                  uintValue = (*(uint *)(pointerPointerValue2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(pointerPointerValue2 + 3) & 0x800082) != 0) || (pointerPointerValue2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)pointerPointerValue2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            inputData = (ulong **)((long)inputData + (long)registerR14);\n            if (pointerPointerValue1 <= inputData) break;\n          } while( true );\n        }\n        pointerPointerValue3 = (ulong **)((long)pointerPointerValue3 - (long)pointerPointerValue5);\n        if (registerR14 == (ulong **)0x8) {\n          pointerValue = pointerPointerValue4[1];\n          pointerPointerValue5 = (ulong **)((long)pointerPointerValue3 + 7);\n          if (-1 < (long)pointerPointerValue3) {\n            pointerPointerValue5 = pointerPointerValue3;\n          }\n          outputData = (ulong **)(ulong)no_sort;\n          functionPtr = (code *)pointerValue[0x41];\n          pointerPointerValue5 = (ulong **)((long)pointerPointerValue5 >> 3);\n        }\n        else {\n          pointerPointerValue5 = (ulong **)((long)pointerPointerValue3 / (long)registerR14);\n          pointerValue = pointerPointerValue4[1];\n          functionPtr = (code *)pointerValue[0x41];\n        }\n        if (no_sort != 0) goto LAB_00104be2;\n        sort_isDynamic = isDynamic != 0;\n        sort_bfd = pointerPointerValue4;\n        sort_x = (ulong **)(*functionPtr)(pointerPointerValue4);\n        sort_y = (ulong **)(*(code *)pointerPointerValue4[1][0x41])(pointerPointerValue4);\n        pointerPointerValue3 = local_40[0];\n        if ((sort_x != (ulong **)0x0) && (sort_y != (ulong **)0x0)) {\n          pointerPointerValue1 = (ulong **)(ulong)localValue;\n          if (sortBySize != 0) {\n            boolValue = isDynamic != 0;\n            qsort(local_40[0],(size_t)pointerPointerValue5,(size_t)pointerPointerValue1,size_forward1);\n            pointerPointerValue8 = (ulong **)xmalloc((long)pointerPointerValue5 << 4);\n            pointerPointerValue9 = sort_x;\n            inputData = sort_y;\n            registerR14 = (ulong **)((long)pointerPointerValue5 * (long)pointerPointerValue1 + (long)pointerPointerValue3);\n            pointerPointerValue2 = sort_x;\n            if (registerR14 <= pointerPointerValue3) goto LAB_00102ec2;\n            extraData = sort_y;\n            pointerPointerValue5 = (ulong **)(*(code *)pointerPointerValue4[1][0x4e])(pointerPointerValue4,boolValue,pointerPointerValue3);\n            outputData = pointerPointerValue1;\n            pointerPointerValue3 = pointerPointerValue8;\n            if (pointerPointerValue5 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_40[0],(size_t)pointerPointerValue5,(size_t)pointerPointerValue1,\n                *(__compar_fn_t *)(sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8))\n          ;\n          pointerValue = pointerPointerValue4[1];\nLAB_00104be2:\n          inputData = pointerPointerValue4;\n          pointerPointerValue9 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        bfd_fatal(*pointerPointerValue4);\n        inputData = pointerPointerValue4;\n        pointerPointerValue3 = registerR15;\n        while( true ) {\n          registerBX = (ulong **)xmalloc();\n          pointerPointerValue1 = (ulong **)(*(code *)inputData[1][0x6b])(inputData,registerBX);\n          pointerPointerValue2 = pointerPointerValue8;\n          if (-1 < (long)pointerPointerValue1) break;\n          pointerPointerValue4 = (ulong **)*inputData;\n          pointerPointerValue5 = (ulong **)bfd_fatal(pointerPointerValue4,pointerPointerValue8);\nLAB_00102dbe:\n          pointerValue = pointerPointerValue5[2];\n          pointerPointerValue2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointerValue = (ulong *)((long)pointerPointerValue1[8] - (long)pointerValue);\n          pointerPointerValue9 = inputData;\n          pointerPointerValue6 = pointerPointerValue3;\nLAB_00104ea7:\n          pointerPointerValue5 = pointerPointerValue2;\n          pointerPointerValue3 = registerBX;\n          inputData = extraData;\n          if (pointerValue != (ulong *)0x0) {\n            *pointerPointerValue8 = (ulong *)pointerPointerValue6;\n            pointerPointerValue8[1] = pointerValue;\n            pointerPointerValue8 = pointerPointerValue8 + 2;\n          }\nLAB_00104e35:\n          extraData = pointerPointerValue9;\n          if (pointerPointerValue3 < registerR14) goto code_r0x00104e3e;\n          pointerPointerValue5 = (ulong **)((long)pointerPointerValue8 - (long)pointerPointerValue3 >> 4);\n          qsort(pointerPointerValue3,(size_t)pointerPointerValue5,0x10,size_forward2);\n          pointerValue = pointerPointerValue4[1];\n          inputData = pointerPointerValue4;\n          pointerPointerValue9 = pointerPointerValue3;\nLAB_00104be5:\n          registerBX = local_40[0];\n          pointerPointerValue1 = (ulong **)(ulong)sortBySize;\n          registerR14 = (ulong **)(ulong)(isDynamic != 0);\n          if (sortBySize != 0) {\n            pointerPointerValue8 = (ulong **)(*(code *)pointerValue[0x41])(inputData);\n            if (pointerPointerValue8 == (ulong **)0x0) goto LAB_00102ed2;\n            pointerPointerValue3 = pointerPointerValue9 + (long)pointerPointerValue5 * 2;\n            pointerPointerValue5 = pointerPointerValue9;\n            goto LAB_00104ee9;\n          }\n          pointerPointerValue1 = (ulong **)(ulong)localValue;\n          registerR15 = (ulong **)(*(code *)pointerValue[0x41])(inputData);\n          if (registerR15 != (ulong **)0x0) {\n            registerBP = (ulong **)((long)pointerPointerValue5 * (long)pointerPointerValue1 + (long)registerBX);\n            if (registerBX < registerBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          bfd_fatal(*inputData);\n          registerR15 = pointerPointerValue9;\nLAB_00102d06:\n          pointerPointerValue2 = pointerPointerValue1;\n          if (isDynamic != 0) {\n            registerBX = local_40[0];\n            pointerPointerValue5 = (ulong **)0x0;\n            pointerPointerValue8 = (ulong **)0x0;\n            break;\n          }\n          longValue2 = (*(code *)inputData[1][0x6a])(inputData);\n          pointerPointerValue5 = local_40[0];\n          pointerPointerValue8 = pointerPointerValue1;\n          pointerPointerValue3 = registerR15;\n          if (longValue2 < 1) {\n            pointerPointerValue1 = (ulong **)0x0;\n            registerBX = (ulong **)0x0;\n            break;\n          }\n        }\n        extraData = &localPointer;\n        outputData = registerBX;\n        longValue2 = (*(code *)inputData[1][0x6c])(inputData,pointerPointerValue8,pointerPointerValue5,pointerPointerValue1);\n        pointerPointerValue1 = pointerPointerValue2;\n        if (0 < longValue2) {\n          pointerPointerValue1 = (ulong **)((long)pointerPointerValue2 + longValue2);\n          local_40[0] = (ulong **)xrealloc(local_40[0]);\n          longValue = 0;\n          do {\n            local_40[0][(long)pointerPointerValue2 + longValue] = localPointer + longValue * 6;\n            longValue = longValue + 1;\n          } while (longValue2 != longValue);\n          local_40[0][(long)pointerPointerValue2 + longValue2] = (ulong *)0x0;\n        }\n        if ((isDynamic == 0) && (registerBX != (ulong **)0x0)) {\n          free(registerBX);\n        }\nLAB_00102cc2:\n        byteValue = *(byte *)((long)inputData + 0x4a);\n        pointerPointerValue4 = inputData;\n      } while( true );\n    }\n  }\n  if (isQuiet == 0) {\n    pointerValue = *inputData;\n    result = dcgettext(0,\"%s: no symbols\",5);\n    nonFatal(result,pointerValue);\n  }\n  return;\ncode_r0x00104b01:\n  inputData = (ulong **)((long)inputData + (long)registerR14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  registerBX = (ulong **)((long)pointerPointerValue3 + (long)outputData);\n  if (registerR14 <= registerBX) {\n    pointerPointerValue1 = (ulong **)pointerPointerValue5[4];\n    if ((*(uint *)(pointerPointerValue5 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    pointerPointerValue2 = (ulong **)0x0;\nLAB_00104e95:\n    pointerPointerValue9 = inputData;\n    pointerPointerValue6 = pointerPointerValue3;\n    if (*(int *)(pointerPointerValue4[1] + 1) == 5) {\n      pointerValue = pointerPointerValue5[7];\n      goto LAB_00104ea7;\n    }\n    pointerValue = pointerPointerValue5[2];\n    if ((*(byte *)((long)pointerPointerValue1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (registerR14 <= registerBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  pointerPointerValue1 = inputData;\n  pointerPointerValue6 = outputData;\n  pointerPointerValue7 = extraData;\n  pointerPointerValue2 = (ulong **)(*(code *)pointerPointerValue4[1][0x4e])();\n  pointerPointerValue9 = pointerPointerValue3;\n  if (pointerPointerValue2 == (ulong **)0x0) goto LAB_00102edb;\n  pointerPointerValue1 = (ulong **)pointerPointerValue5[4];\n  if ((*(uint *)(pointerPointerValue5 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (pointerPointerValue3 <= pointerPointerValue5) {\nLAB_00104c75:\n    if (localPointer == (ulong *)0x0) {\n      free(local_40[0]);\n      free(pointerPointerValue9);\n      return;\n    }\n    free(localPointer);\n    free(local_40[0]);\n    free(pointerPointerValue9);\n    return;\n  }\n  pointerPointerValue1 = pointerPointerValue8;\n  longValue2 = (*(code *)inputData[1][0x4e])(inputData,registerR14,*pointerPointerValue5);\n  if (longValue2 == 0) goto LAB_00102ec9;\n  pointerPointerValue1 = pointerPointerValue5 + 1;\n  pointerPointerValue5 = pointerPointerValue5 + 2;\n  print_symbol(inputData,longValue2,*pointerPointerValue1,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  bfd_fatal(*inputData,0);\nLAB_00102ed2:\n  pointerPointerValue4 = (ulong **)*inputData;\n  bfd_fatal();\n  registerBX = pointerPointerValue3;\n  pointerPointerValue6 = outputData;\n  pointerPointerValue7 = extraData;\nLAB_00102edb:\n  extraData = pointerPointerValue7;\n  outputData = pointerPointerValue6;\n  pointerPointerValue4 = (ulong **)*pointerPointerValue4;\n  pointerPointerValue2 = (ulong **)bfd_fatal();\n  pointerPointerValue3 = pointerPointerValue9;\nLAB_00102ee3:\n  pointerValue = pointerPointerValue5[2];\nLAB_00102ee7:\n  if (pointerPointerValue1 != (ulong **)pointerPointerValue2[4]) goto LAB_00102dc4;\n  pointerValue = (ulong *)((long)pointerPointerValue2[2] - (long)pointerValue);\n  pointerPointerValue9 = inputData;\n  pointerPointerValue6 = pointerPointerValue3;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (pointerPointerValue2 = registerR15, longValue2 = (*(code *)inputData[1][0x4e])(inputData,registerR14,registerBX),\n        longValue2 != 0) {\n    registerBX = (ulong **)((long)registerBX + (long)pointerPointerValue1);\n    print_symbol(inputData,longValue2,0,param2);\n    if (registerBP <= registerBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  bfd_fatal(*inputData);\n  pointerPointerValue3 = registerBX;\nLAB_00102ea7:\n  pointerPointerValue4 = registerBP;\n  bfd_fatal(*inputData);\n  pointerPointerValue8 = registerR15;\nLAB_00102eb0:\n  bfd_fatal(*pointerPointerValue4);\n  pointerPointerValue4 = inputData;\nLAB_00102eb9:\n  bfd_fatal(*pointerPointerValue4);\n  inputData = extraData;\nLAB_00102ec2:\n  pointerPointerValue5 = (ulong **)0x0;\n  outputData = pointerPointerValue1;\n  pointerPointerValue9 = pointerPointerValue2;\n  pointerPointerValue3 = pointerPointerValue8;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_fatal",
                "bfd_get_error",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "extract_and_sort_symbols_001048e0"
        },
        "FUN_0010c248": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c248",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_0010c248"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_001065a0": {
            "renaming": {
                "FUN_001065a0": "FUNC_001065a0"
            },
            "code": "\nvoid FUNC_001065a0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_001065a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "get_relocs",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_0010c008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010c008"
        },
        "FUN_0010c240": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c240",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010c240"
        },
        "FUN_0010c088": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c088",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c088"
        },
        "FUN_0010c0a8": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0a8",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c0a8"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "set_print_width",
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "list_matching_formats",
                "usage.cold",
                "main",
                "bfd_nonfatal",
                "usage",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_file_header_001062d0",
                "param_1": "file_name",
                "filename_per_file": "use_filename_per_file",
                "filename_per_symbol": "use_filename_per_symbol"
            },
            "code": "\nvoid print_file_header_001062d0(undefined8 file_name)\n\n{\n  if ((use_filename_per_file != 0) && (use_filename_per_symbol == 0)) {\n    printf(\"\\n%s:\\n\",file_name);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_header_001062d0"
        },
        "FUN_0010c0c0": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c0",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c0"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "print_matching_sections_00103238",
                "__ptr": "section_ptr",
                "__s1": "section_name",
                "plVar1": "section_entry",
                "lVar2": "section_entry_value",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "unaff_RBX": "sections_array",
                "pvVar5": "relocs_array",
                "uVar6": "section_index",
                "unaff_R13": "lineno_cache_rel_bfd",
                "lVar7": "counter",
                "seccount_2": "num_sections",
                "secs_1": "sections_list",
                "relocs_3": "relocs_list",
                "relcount_0": "relcount_list"
            },
            "code": "\n\n\nvoid print_matching_sections_00103238(void)\n\n{\n  long *section_entry;\n  void *section_ptr;\n  char *section_name;\n  long section_entry_value;\n  char result;\n  int comparison_result;\n  long sections_array;\n  void *relocs_array;\n  uint section_index;\n  long lineno_cache_rel_bfd;\n  long counter;\n  ulong param_10;\n  void *param_12;\n  \n  relocs_array = relocs_list;\n  if (lineno_cache_rel_bfd == lineno_cache_rel_bfd) {\n    if (relocs_list != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    section_index = 0;\n    if (relocs_list != (void *)0x0) {\n      for (; section_index < num_sections; section_index = section_index + 1) {\n        section_ptr = *(void **)((long)relocs_array + (ulong)section_index * 8);\n        if (section_ptr != (void *)0x0) {\n          free(section_ptr);\n        }\n      }\n      free(sections_list);\n      free(relocs_array);\n      free(relcount_list);\n      sections_list = (void *)0x0;\n      relocs_list = (void *)0x0;\n      relcount_list = (void *)0x0;\n    }\n  }\n  num_sections = *(uint *)(lineno_cache_rel_bfd + 0xa0);\n  sections_list = (void *)xmalloc((ulong)num_sections * 8);\n  relocs_list = (void *)xmalloc((ulong)num_sections << 3);\n  relcount_list = (void *)xmalloc((ulong)num_sections << 3);\n  param_12 = sections_list;\n  bfd_map_over_sections();\n  lineno_cache_rel_bfd = lineno_cache_rel_bfd;\nLAB_00103296:\n  section_name = *(char **)(sections_array + 8);\n  section_index = 0;\n  do {\n    if (num_sections <= section_index) {\n      putc(10,_stdout);\n      return;\n    }\n    relocs_array = relcount_list;\n    for (counter = 0; section_entry = (long *)((long)relocs_array + (ulong)section_index * 8),\n        *section_entry != counter && counter <= *section_entry; counter = counter + 1) {\n      section_entry = **(long ***)(*(long *)((long)relocs_list + (ulong)section_index * 8) + counter * 8);\n      if ((((section_entry != (long *)0x0) &&\n           (section_entry_value = *section_entry, *(long *)(section_entry_value + 0x20) == *(long *)(sections_array + 0x20))) &&\n          (*(long *)(section_entry_value + 0x10) == *(long *)(sections_array + 0x10))) &&\n         (((comparison_result = strcmp(section_name,*(char **)(section_entry_value + 8)), comparison_result == 0 &&\n           (result = (**(code **)(*(long *)(lineno_cache_rel_bfd + 8) + 0x240))(), relocs_array = relcount_list,\n           result != '\\0')) && (param_12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param_12,param_10 >> 0x20);\n        section_index = num_sections;\n        break;\n      }\n    }\n    section_index = section_index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "get_relocs",
                "xmalloc",
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_matching_sections_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "messagePrefix",
                "param_2": "defaultPrefix"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *messagePrefix,undefined8 *defaultPrefix)\n\n{\n  if (messagePrefix != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*messagePrefix);\n    return;\n  }\n  printf(\"%s: \",*defaultPrefix);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "print_symbol_filename_posix"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_and_free_memory_001047d0",
                "unaff_RBX": "memoryBlock",
                "unaff_R12": "symbolPointer",
                "unaff_R13": "reconstructedMemory",
                "unaff_R14": "formatString",
                "unaff_R15": "functionPointer"
            },
            "code": "\nvoid printAndFreeMemory_001047d0(void)\n\n{\n  char *pcVar1;\n  void *memoryBlock;\n  undefined *symbolPointer;\n  void *reconstructedMemory;\n  char *formatString;\n  long functionPointer;\n  \n  if (((with_symbol_versions != 0) &&\n      (pcVar1 = (char *)(**(code **)(*(long *)(functionPointer + 8) + 0x220))(), pcVar1 != (char *)0x0))\n     && (*pcVar1 != '\\0')) {\n    memoryBlock = (void *)reconcat();\n    reconstructedMemory = memoryBlock;\n  }\n  printf(formatString,reconstructedMemory);\n  if (symbolPointer != (undefined *)0x0) {\n    *symbolPointer = 0x40;\n  }\n  free(memoryBlock);\n  return;\n}\n\n",
            "called": [
                "free",
                "printf",
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00102739",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "print_and_free_memory_001047d0"
        },
        "FUN_0010c138": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c138",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010c138"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "display_file_warning_0010249f",
                "uVar1": "warningMessage"
            },
            "code": "\nundefined8 displayFileWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  non_fatal(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "display_file_warning_0010249f"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filename",
                "cVar1": "format_valid",
                "iVar2": "result",
                "uVar3": "return_value",
                "piVar4": "errno_ptr",
                "uVar5": "error_message",
                "puVar6": "file_descriptor",
                "puVar9": "archived_file",
                "puVar10": "previous_archived_file",
                "lVar7": "next_mapent",
                "pcVar8": "error_reason",
                "local_c8": "file_stat"
            },
            "code": "\nundefined4 check_file_001043d0(char *filename)\n\n{\n  char format_valid;\n  int result;\n  undefined4 return_value;\n  int *errno_ptr;\n  undefined8 error_message;\n  undefined8 *file_descriptor;\n  long next_mapent;\n  char *error_reason;\n  undefined8 *archived_file;\n  undefined8 *previous_archived_file;\n  stat file_stat;\n  \n  if (filename != (char *)0x0) {\n    result = stat(filename,&file_stat);\n    if (result < 0) {\nLAB_00102522:\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,filename);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,filename,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,filename);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (file_stat.st_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(error_message,filename);\n      }\n      else if (file_stat.st_size != 0) {\n        if (target == 0) {\n          file_descriptor = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          file_descriptor = (undefined8 *)bfd_openr(filename);\n        }\n        if (file_descriptor != (undefined8 *)0x0) {\n          if (line_numbers != 0) {\n            *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x8000;\n          }\n          format_valid = bfd_check_format(file_descriptor,2);\n          if (format_valid == '\\0') {\n            return_value = bfd_check_format_matches(file_descriptor,1,&file_stat);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            set_print_width(file_descriptor);\n            (**(code **)format)(filename);\n            display_rel_file(file_descriptor,0);\n          }\n          else {\n            (**(code **)(format + 8))(*file_descriptor);\n            if ((print_armap != 0) &&\n               (next_mapent = bfd_get_next_mapent(file_descriptor,0xffffffffffffffff,&file_stat), next_mapent != -1)) {\n              error_reason = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_reason);\n              do {\n                archived_file = (undefined8 *)(**(code **)(file_descriptor[1] + 0x1e0))(file_descriptor,next_mapent);\n                if (archived_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stat.st_dev != 0) {\n                  print_symname(&DAT_0010712d,0,*(long *)file_stat.st_dev,file_descriptor);\n                  printf(\" in %s\\n\",*archived_file);\n                }\n                next_mapent = bfd_get_next_mapent(file_descriptor,next_mapent,&file_stat);\n              } while (next_mapent != -1);\n            }\n            archived_file = (undefined8 *)0x0;\n            do {\n              do {\n                previous_archived_file = archived_file;\n                archived_file = (undefined8 *)bfd_openr_next_archived_file(file_descriptor,previous_archived_file);\n                if (archived_file == (undefined8 *)0x0) {\n                  result = bfd_get_error();\n                  if (result != 9) {\n                    bfd_fatal(*file_descriptor);\nLAB_00102516:\n                    bfd_fatal(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previous_archived_file != (undefined8 *)0x0) {\n                    bfd_close(previous_archived_file);\n                    lineno_cache_bfd = 0;\n                    lineno_cache_rel_bfd = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                format_valid = bfd_check_format_matches(archived_file,1,&file_stat);\n                if (format_valid == '\\0') {\n                  bfd_nonfatal(*archived_file);\n                  result = bfd_get_error();\n                  if (result == 0xd) {\n                    list_matching_formats(file_stat.st_dev);\n                  }\n                }\n                else {\n                  set_print_width(archived_file);\n                  (**(code **)(format + 0x10))(*file_descriptor,*archived_file);\n                  display_rel_file(archived_file,file_descriptor);\n                }\n              } while (previous_archived_file == (undefined8 *)0x0);\n              bfd_close(previous_archived_file);\n              lineno_cache_bfd = 0;\n              lineno_cache_rel_bfd = 0;\n            } while (previous_archived_file != archived_file);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (format_valid = bfd_close(file_descriptor), format_valid == '\\0') {\n            bfd_fatal(filename);\nLAB_001025ac:\n            bfd_nonfatal(filename);\n            result = bfd_get_error();\n            if (result == 0xd) {\n              list_matching_formats(file_stat.st_dev);\n            }\n          }\n          lineno_cache_rel_bfd = 0;\n          lineno_cache_bfd = 0;\n          return return_value;\n        }\n        bfd_nonfatal(filename);\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "print_archive_filename_bsd",
                "strerror",
                "non_fatal",
                "set_print_width",
                "print_archive_member_bsd",
                "display_file.cold",
                "list_matching_formats",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "print_symname",
                "bfd_openr",
                "print_object_filename_bsd",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "bfd_get_error",
                "bfd_fatal",
                "display_rel_file",
                "bfd_close",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "FUN_001055e0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001055e0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_0010c010": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c010",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_0010c010"
        },
        "FUN_0010c098": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c098",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010c098"
        },
        "FUN_0010c130": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c130",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010c130"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "format_and_print_001025f5",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "print_format_string": "formatted_output"
            },
            "code": "\nvoid format_and_print_001025f5(undefined8 arg_1,undefined8 arg_2)\n\n{\n  formatted_output = concat(&DAT_001071d7,arg_2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "format_and_print_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_filename_if_needed_00102670",
                "param_1": "filename",
                "filename_per_file": "shouldPrintFilename"
            },
            "code": "\nvoid printFilenameIfNeeded_00102670(undefined8 filename)\n\n{\n  if (shouldPrintFilename != 0) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_filename_if_needed_00102670"
        },
        "FUN_0010c0b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b8",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b8"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_value.constprop.0.cold",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "display_file.cold",
                "list_matching_formats",
                "usage.cold",
                "FUN_00104d5b",
                "print_object_filename_sysv",
                "main",
                "set_output_format",
                "bfd_nonfatal.cold",
                "print_symbol_info_sysv",
                "display_rel_file",
                "display_file",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "FUN_0010c0d0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0d0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010c0d0"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2_ptr",
                "__s1": "string1_ptr",
                "uVar1": "string_comparison_result",
                "lVar2": "handle1",
                "lVar3": "handle2"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint string_comparison_result;\n  long handle1;\n  long handle2;\n  \n  handle1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string1,sort_x);\n  handle2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string2,sort_y);\n  if ((handle1 == 0) || (handle2 == 0)) {\n    bfd_fatal(*sort_bfd);\n  }\n  else {\n    string2_ptr = *(char **)(handle2 + 8);\n    string1_ptr = *(char **)(handle1 + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      string_comparison_result = strcoll(string1_ptr,string2_ptr);\n      return string_comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "non_numeric_forward.cold",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "numeric_forward",
                "size_forward1",
                "non_numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010c028": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c028",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_0010c028"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_log_message_001064a0",
                "param_1": "logType",
                "param_2": "errorMessage",
                "filename_per_symbol": "isFilenameAvailable"
            },
            "code": "\nvoid printLogMessage_001064a0(undefined8 *logType,undefined8 *errorMessage)\n\n{\n  if (isFilenameAvailable == 0) {\n    return;\n  }\n  if (logType != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*logType);\n    return;\n  }\n  printf(\"%s: \",*errorMessage);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_posix.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_log_message_001064a0"
        },
        "FUN_0010c148": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c148",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c148"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "symClass",
                "iVar3": "asprintfRetVal",
                "plVar4": "symbolInfo",
                "piVar5": "errnoPtr",
                "uVar6": "errorString",
                "lVar7": "symInfoPtr",
                "uVar8": "symbolWidth",
                "uVar10": "printWidth",
                "bVar9": "symType",
                "pcVar11": "symTypeName",
                "in_R8": "arg8",
                "in_R9": "arg9"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort symClass;\n  int asprintfRetVal;\n  long *symbolInfo;\n  int *errnoPtr;\n  undefined8 errorString;\n  long symInfoPtr;\n  ulong symbolWidth;\n  byte symType;\n  ulong printWidth;\n  char *symTypeName;\n  undefined8 arg8;\n  undefined8 arg9;\n  \n  symbolWidth = (ulong)print_width;\n  if ((print_width - 0x20 & 0xffffffdf) == 0) {\n    printf(print_format_string,symbol);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  printWidth = symbolWidth;\n  fatal(symbolInfo,symbolWidth);\n  print_symname(\"%-20s|\",symbolInfo,0,printWidth,arg8,arg9,symbolWidth);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      symInfoPtr = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(symInfoPtr + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symTypeName = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symTypeName = \"Block\";\n      }\n      else if (*(ushort *)(symInfoPtr + 0x26) == 0) {\n        symTypeName = \"None\";\n      }\n      else {\n        symClass = *(ushort *)(symInfoPtr + 0x26) >> 4 & 3;\n        if (symClass == 2) {\n          symTypeName = \"Function\";\n        }\n        else if (symClass == 3) {\n          symTypeName = \"Array\";\n        }\n        else {\n          if (symClass != 1) {\n            free(bufp_6);\n            symClass = *(ushort *)(symInfoPtr + 0x26);\n            symType = *(byte *)(symInfoPtr + 0x28);\n            symTypeName = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfRetVal = asprintf(&bufp_6,symTypeName,(ulong)symType,(ulong)symClass);\n            symTypeName = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symTypeName = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symType = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(symType) {\n    case 0:\n      symTypeName = \"NOTYPE\";\n      break;\n    case 1:\n      symTypeName = \"OBJECT\";\n      break;\n    case 2:\n      symTypeName = \"FUNC\";\n      break;\n    case 3:\n      symTypeName = \"SECTION\";\n      break;\n    case 4:\n      symTypeName = \"FILE\";\n      break;\n    case 5:\n      symTypeName = \"COMMON\";\n      break;\n    case 6:\n      symTypeName = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symTypeName = \"<processor specific>: %d\";\n      if ((2 < symType - 0xd) && (symTypeName = \"<OS specific>: %d\", 2 < symType - 10)) {\n        symTypeName = \"<unknown>: %d\";\n      }\n      symTypeName = (char *)dcgettext(0,symTypeName,5);\n      asprintfRetVal = asprintf(&bufp_7,symTypeName,(ulong)symType);\n      symTypeName = bufp_7;\njoined_r0x00103964:\n      if (asprintfRetVal < 0) {\n        errnoPtr = __errno_location();\n        errorString = xstrerror(*errnoPtr);\n        fatal(&DAT_0010712d,errorString);\nLAB_00103983:\n        symTypeName = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symTypeName);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  symInfoPtr = symbolInfo[2];\n  if ((symInfoPtr != 0) || (symInfoPtr = symbolInfo[3], symInfoPtr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symInfoPtr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0.cold",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_0010651a",
                "print_symbol_info_bsd",
                "print_symbol_info_bsd.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_file_names_001053b0",
                "param_1": "fileNames",
                "param_2": "symbolNames"
            },
            "code": "\nvoid printFileNames_001053b0(undefined8 *fileNames,undefined8 *symbolNames,undefined8 param_3,undefined8 param_4)\n\n{\n  if (filename_per_symbol == 0) {\n    return;\n  }\n  if (fileNames != (undefined8 *)0x0) {\n    printf(\"%s:\",*fileNames);\n  }\n  printf(\"%s:\",*symbolNames,param_4);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_bsd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_file_names_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "parse_binary_file_001055f0",
                "param_1": "num_files",
                "param_2": "file_paths",
                "pbVar1": "byte_ptr",
                "bVar2": "byte_var",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "bVar5": "bool_var3",
                "cVar6": "char_var1",
                "bVar7": "byte_var2",
                "cVar8": "char_var2",
                "cVar9": "char_var3",
                "iVar10": "int_var1",
                "uVar11": "uint_var",
                "iVar12": "int_var3",
                "uVar13": "uint_var2",
                "uVar14": "uint_var3",
                "__stream": "file_stream",
                "__s": "file_content",
                "piVar15": "int_ptr1",
                "sVar16": "size_t_var",
                "__ptr": "byte_ptr2",
                "__src": "long_ptr1",
                "lVar17": "long_var1",
                "plVar18": "long_ptr2",
                "plVar19": "long_ptr3",
                "uVar20": "undef_var1",
                "uVar21": "undef_var2",
                "pcVar22": "str_ptr1",
                "pbVar23": "byte_ptr3",
                "unaff_RBP": "ret_ptr1",
                "lVar24": "long_var2",
                "pbVar25": "byte_ptr4",
                "pcVar26": "str_ptr2",
                "unaff_R12": "int_ptr2",
                "piVar27": "int_ptr3",
                "local_110": "local_var1",
                "local_10c": "local_var2",
                "local_108": "local_var3",
                "local_c8": "local_stat"
            },
            "code": "\n\n\nundefined1 * parse_binary_file_001055f0(int num_files,long *file_paths)\n\n{\n  byte *byte_ptr;\n  byte byte_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  char char_var1;\n  byte byte_var2;\n  char char_var2;\n  char char_var3;\n  int int_var1;\n  uint uint_var;\n  int int_var3;\n  undefined4 uint_var2;\n  undefined4 uint_var3;\n  FILE *file_stream;\n  byte *file_content;\n  int *int_ptr1;\n  size_t size_t_var;\n  byte *byte_ptr2;\n  long *long_ptr1;\n  long long_var1;\n  long *long_ptr2;\n  long *long_ptr3;\n  undefined8 undef_var1;\n  undefined8 undef_var2;\n  char *str_ptr1;\n  byte *byte_ptr3;\n  undefined1 *ret_ptr1;\n  long long_var2;\n  byte *byte_ptr4;\n  char *str_ptr2;\n  int *int_ptr2;\n  int *int_ptr3;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  stat local_stat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  str_ptr1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *file_paths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  long_ptr2 = file_paths;\n  if (1 < num_files) {\n    local_var2 = 2000;\n    int_ptr2 = (int *)0x1;\n    local_var1 = 0;\n    do {\n      int_var3 = (int)int_ptr2;\n      ret_ptr1 = (undefined1 *)(long)int_var3;\n      int_ptr3 = (int *)((long)ret_ptr1 * 8);\n      if (*(char *)long_ptr2[(long)ret_ptr1] != '@') goto LAB_00105a70;\n      local_var2 = local_var2 + -1;\n      if (local_var2 == 0) {\n        long_var2 = *long_ptr2;\n        str_ptr2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      str_ptr1 = (char *)long_ptr2[(long)ret_ptr1] + 1;\n      int_var1 = stat(str_ptr1,&local_stat);\n      if (int_var1 < 0) {\nLAB_00105a70:\n        if (num_files <= int_var3 + 1) break;\nLAB_00105a7a:\n        uint_var = int_var3 + 1;\n        local_var1 = int_var3;\n      }\n      else {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file_stream = fopen(str_ptr1,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00105a70;\n        int_var1 = fseek(file_stream,0,2);\n        if (((int_var1 == -1) ||\n            (str_ptr1 = (char *)ftell(file_stream), (int *)str_ptr1 == (int *)0xffffffffffffffff)) ||\n           (int_var1 = fseek(file_stream,0,0), int_var1 == -1)) {\nLAB_00105ad0:\n          fclose(file_stream);\n          if (int_var3 + 1 < num_files) goto LAB_00105a7a;\n          break;\n        }\n        file_content = (byte *)xmalloc((char *)((long)str_ptr1 + 1));\n        int_ptr1 = (int *)fread(file_content,1,(size_t)str_ptr1,file_stream);\n        if (((int *)str_ptr1 != int_ptr1) && (int_var1 = ferror(file_stream), int_var1 != 0)) {\n          free(file_content);\n          goto LAB_00105ad0;\n        }\n        file_content[(long)int_ptr1] = 0;\n        byte_var2 = *file_content;\n        byte_ptr3 = file_content;\n        if (byte_var2 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size_t_var = strlen((char *)file_content);\n          byte_ptr2 = (byte *)xmalloc(size_t_var + 1);\n          int_var1 = 0;\n          bool_var3 = false;\n          bool_var1 = false;\n          long_var2 = 0;\n          long_ptr1 = (long *)0x0;\n          bool_var2 = false;\n          byte_ptr3 = file_content;\n          do {\n            while (((&_sch_istable)[(ulong)*byte_ptr3 * 2] & 0x40) != 0) {\n              byte_ptr3 = byte_ptr3 + 1;\n            }\n            if ((int_var1 == 0) || (long_ptr3 = long_ptr1 + long_var2, int_var1 + -1 <= (int)long_var2)) {\n              if (long_ptr1 == (long *)0x0) {\n                int_var1 = 8;\n                long_ptr1 = (long *)xmalloc(0x40);\n                long_ptr3 = long_ptr1 + long_var2;\n                *long_ptr3 = 0;\n              }\n              else {\n                int_var1 = int_var1 * 2;\n                long_ptr1 = (long *)xrealloc(long_ptr1,(long)int_var1 << 3);\n                long_ptr3 = long_ptr1 + long_var2;\n                *long_ptr3 = 0;\n              }\n            }\n            byte_var2 = *byte_ptr3;\n            byte_ptr4 = byte_ptr2;\n            while (byte_var2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                  bool_var2 = false;\n                  bool_var3 = false;\n                  bool_var1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool_var2) break;\n                byte_ptr3 = byte_ptr3 + 1;\n                *byte_ptr4 = byte_var2;\n                byte_ptr4 = byte_ptr4 + 1;\n                bool_var2 = false;\n                byte_var2 = *byte_ptr3;\n                if (byte_var2 == 0) goto LAB_001058e0;\n              }\n              if (byte_var2 == 0x5c) {\n                bool_var2 = true;\n              }\n              else if (bool_var1) {\n                if (byte_var2 == 0x27) {\n                  bool_var1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *byte_ptr4 = byte_var2;\n                  byte_ptr4 = byte_ptr4 + 1;\n                }\n              }\n              else if (bool_var3) {\n                if (byte_var2 != 0x22) goto LAB_00105a55;\n                bool_var3 = false;\n              }\n              else if (byte_var2 == 0x27) {\n                bool_var1 = true;\n              }\n              else {\n                if (byte_var2 != 0x22) goto LAB_00105a55;\n                bool_var3 = true;\n              }\n              byte_ptr = byte_ptr3 + 1;\n              byte_ptr3 = byte_ptr3 + 1;\n              byte_var2 = *byte_ptr;\n            }\nLAB_001058e0:\n            *byte_ptr4 = 0;\n            long_var1 = xstrdup(byte_ptr2);\n            *long_ptr3 = long_var1;\n            long_ptr1[long_var2 + 1] = 0;\n            byte_var2 = *byte_ptr3;\n            byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n            while ((byte_var & 0x40) != 0) {\n              byte_var2 = byte_ptr3[1];\n              byte_ptr3 = byte_ptr3 + 1;\n              byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n            }\n            long_var2 = long_var2 + 1;\n          } while (byte_var2 != 0);\n          free(byte_ptr2);\n          long_ptr3 = long_ptr2;\n          if (file_paths == long_ptr2) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        long_ptr1 = (long *)xmalloc(8);\n        *long_ptr1 = 0;\n        if (file_paths == long_ptr2) {\nLAB_00105c79:\n          if (*long_ptr2 == 0) {\n            int_var1 = 0;\n          }\n          else {\n            long_var2 = 1;\n            do {\n              int_var1 = (int)long_var2;\n              long_ptr3 = long_ptr2 + long_var2;\n              long_var2 = long_var2 + 1;\n            } while (*long_ptr3 != 0);\n          }\n          long_var1 = 0;\n          long_ptr3 = (long *)xmalloc((long)(int_var1 + 1) << 3);\n          long_var2 = *long_ptr2;\n          while (long_var2 != 0) {\n            undef_var1 = xstrdup();\n            *(undefined8 *)((long)long_ptr3 + long_var1) = undef_var1;\n            long_var1 = long_var1 + 8;\n            long_var2 = *(long *)((long)long_ptr2 + long_var1);\n          }\n          *(undefined8 *)((long)long_ptr3 + long_var1) = 0;\nLAB_0010597d:\n          long_ptr2 = long_ptr3;\n          if (*long_ptr1 == 0) goto LAB_00105d50;\n          str_ptr1 = (char *)0x0;\n          do {\n            str_ptr1 = (char *)((long)str_ptr1 + 1);\n          } while (long_ptr1[(long)str_ptr1] != 0);\n          local_var3 = (long)str_ptr1 * 8;\n        }\n        else {\nLAB_00105d50:\n          str_ptr1 = (char *)0x0;\n          local_var3 = 0;\n        }\n        free((void *)long_ptr2[(long)ret_ptr1]);\n        long_ptr2 = (long *)xrealloc(long_ptr2,(long)((long)str_ptr1 + (long)num_files + 1) * 8);\n        int_var1 = num_files + -1 + (int)str_ptr1;\n        memmove(long_ptr2 + (long)(ret_ptr1 + (long)str_ptr1),long_ptr2 + 1 + (long)ret_ptr1,\n                (long)(num_files - int_var3) << 3);\n        memcpy(long_ptr2 + (long)ret_ptr1,long_ptr1,local_var3);\n        free(long_ptr1);\n        free(file_content);\n        fclose(file_stream);\n        uint_var = local_var1 + 1;\n        ret_ptr1 = ret_ptr1 + (long)str_ptr1;\n        int_ptr2 = int_ptr3;\n        num_files = int_var1;\n        if (int_var1 <= (int)uint_var) break;\n      }\n      int_ptr2 = (int *)(ulong)uint_var;\n    } while( true );\n  }\n  int_var3 = bfd_init();\n  str_ptr2 = \"fatal error: libbfd ABI mismatch\";\n  if (int_var3 != 0x118) goto LAB_00106085;\n  ret_ptr1 = long_options;\n  char_var2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  str_ptr1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  int_ptr2 = (int *)\"x86_64-pc-linux-gnu\";\n  char_var3 = other_format._3_1_;\n  char_var1 = desc_format._3_1_;\n  uint_var3 = print_radix;\n  if (char_var2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    print_radix = uint_var3;\n    desc_format._3_1_ = char_var1;\n    other_format._3_1_ = char_var3;\n    uint_var2 = getopt_long(num_files,long_ptr2,str_ptr1);\n    int_ptr3 = _optarg;\n    int_ptr1 = (int *)str_ptr1;\n    char_var3 = other_format._3_1_;\n    char_var1 = desc_format._3_1_;\n    uint_var3 = print_radix;\n    switch(uint_var2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      usage(_stderr,1);\n      int_ptr3 = int_ptr2;\nLAB_001061d5:\n      int_var3 = strcmp((char *)int_ptr3,\"l\");\n      if (int_var3 == 0) goto LAB_001061a3;\n      int_var3 = strcmp((char *)int_ptr3,\"escape\");\n      int_ptr2 = int_ptr3;\n      if ((int_var3 == 0) || (int_var3 = strcmp((char *)int_ptr3,\"e\"), int_var3 == 0)) {\n        unicode_display = 2;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var3 = strcmp((char *)int_ptr3,\"invalid\");\n      if ((int_var3 == 0) || (int_var3 = strcmp((char *)int_ptr3,\"i\"), int_var3 == 0)) {\n        unicode_display = 5;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var3 = strcmp((char *)int_ptr3,\"hex\");\n      if ((int_var3 == 0) || (int_var3 = strcmp((char *)int_ptr3,\"x\"), int_var3 == 0)) {\n        unicode_display = 3;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var3 = strcmp((char *)int_ptr3,\"highlight\");\n      if ((int_var3 == 0) || (int_var3 = strcmp((char *)int_ptr3,\"h\"), int_var3 == 0)) {\n        unicode_display = 4;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      str_ptr2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      filename_per_symbol = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      set_output_format(&DAT_00107033);\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      dynamic = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      int_ptr2 = (int *)&optarg;\n      do_demangle = 1;\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      if (_optarg != (int *)0x0) {\n        int_var3 = cplus_demangle_name_to_style();\n        int_ptr1 = _optarg;\n        if (int_var3 == 0) {\n          undef_var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          fatal(undef_var1,int_ptr1);\nswitchD_00105c5a_caseD_cc:\n          demangle_flags = demangle_flags | 0x40000;\n          str_ptr1 = (char *)int_ptr1;\n          char_var3 = other_format._3_1_;\n          char_var1 = desc_format._3_1_;\n          uint_var3 = print_radix;\n        }\n        else {\n          cplus_demangle_set_style();\n          char_var3 = other_format._3_1_;\n          char_var1 = desc_format._3_1_;\n          uint_var3 = print_radix;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      set_output_format(\"posix\");\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      print_size = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      defined_only = 1;\n      undefined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      non_weak = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int_var3 = strcmp((char *)_optarg,\"32_64\");\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      if (int_var3 != 0) {\n        str_ptr2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undef_var1 = dcgettext(0,str_ptr2,5);\n        fatal(undef_var1);\nswitchD_00105c5a_caseD_56:\n        show_version = 1;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      print_debug_syms = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      set_output_format(_optarg);\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      external_only = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      set_output_format(\"just-symbols\");\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      line_numbers = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      sort_numerically = 1;\n      no_sort = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      no_sort = 1;\n      sort_numerically = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      reverse_sort = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      print_armap = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char_var3 = *(char *)_optarg;\n      int_ptr2 = int_ptr3;\n      char_var1 = char_var3;\n      uint_var3 = 10;\n      if (char_var3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char_var3) {\n        if (char_var3 == 'o') {\n          uint_var3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char_var3 == 'x') {\n          uint_var3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      str_ptr2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      undefined_only = 1;\n      defined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      target = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char_var3 = other_format._3_1_;\n      char_var1 = desc_format._3_1_;\n      uint_var3 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      sort_by_size = 1;\n      no_sort = 0;\n      sort_numerically = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      ifunc_type_chars = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int_var3 = strcmp((char *)_optarg,\"default\");\n      if ((int_var3 == 0) || (int_var3 = strcmp((char *)int_ptr3,\"d\"), int_var3 == 0)) {\n        unicode_display = 0;\n        int_ptr2 = int_ptr3;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n      }\n      else {\n        int_var3 = strcmp((char *)int_ptr3,\"locale\");\n        if (int_var3 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        unicode_display = 1;\n        int_ptr2 = int_ptr3;\n        char_var3 = other_format._3_1_;\n        char_var1 = desc_format._3_1_;\n        uint_var3 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undef_var1 = dcgettext(0,str_ptr2,5);\n    fatal(undef_var1,int_ptr3);\nLAB_00105f13:\n    long_var2 = *long_ptr2;\n    str_ptr2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,str_ptr2,long_var2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uint_var3 = bfd_get_error();\n  undef_var1 = bfd_errmsg(uint_var3);\n  undef_var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  fatal(undef_var2,\"x86_64-pc-linux-gnu\",undef_var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte_var2 = byte_ptr3[1];\n  byte_ptr3 = byte_ptr3 + 1;\n  if (byte_var2 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  quiet = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  ret_ptr1 = (undefined1 *)(ulong)show_version;\n  if (show_version != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    str_ptr1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str_ptr1);\n    str_ptr1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str_ptr1);\n                    \n    exit(0);\n  }\n  if ((sort_by_size != 0) && (undefined_only != 0)) {\n    undef_var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    non_fatal(undef_var1);\n    undef_var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    non_fatal(undef_var1);\n    return ret_ptr1;\n  }\n  str_ptr1 = &optind;\n  if (_optind != num_files) {\n    if (1 < num_files - _optind) {\nLAB_00105f38:\n      filename_per_file = 1;\n    }\n    while( true ) {\n      int_var3 = *(int *)str_ptr1;\n      if (num_files <= int_var3) break;\n      long_var2 = long_ptr2[int_var3];\n      *(int *)str_ptr1 = int_var3 + 1;\n      char_var3 = display_file(long_var2);\n      if (char_var3 != '\\0') {\n        int_var3 = *(int *)str_ptr1;\n        if (num_files <= int_var3) break;\n        long_var2 = long_ptr2[int_var3];\n        *(int *)str_ptr1 = int_var3 + 1;\n        char_var3 = display_file(long_var2);\n        if (char_var3 != '\\0') {\n          int_var3 = *(int *)str_ptr1;\n          while( true ) {\n            if (num_files <= int_var3) goto LAB_00105bdd;\n            long_var2 = long_ptr2[int_var3];\n            *(int *)str_ptr1 = int_var3 + 1;\n            char_var3 = display_file(long_var2);\n            if (char_var3 == '\\0') break;\n            int_var3 = *(int *)str_ptr1;\n          }\n        }\n      }\n      ret_ptr1 = (undefined1 *)(ulong)((int)ret_ptr1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)ret_ptr1);\n  }\nLAB_0010613c:\n  uint_var = display_file(\"a.out\");\n  return (undefined1 *)(ulong)((uint_var ^ 1) & 0xff);\n}\n\n",
            "called": [
                "xexit",
                "textdomain",
                "fseek",
                "bfd_init",
                "getopt_long",
                "bfd_plugin_set_plugin",
                "xmalloc_set_program_name",
                "bfd_plugin_set_program_name",
                "set_output_format",
                "cplus_demangle_set_style",
                "ferror",
                "strlen",
                "stat",
                "fatal",
                "fclose",
                "xstrdup",
                "setlocale",
                "xrealloc",
                "exit",
                "bfd_errmsg",
                "bfd_get_error",
                "fopen",
                "ftell",
                "display_file",
                "usage",
                "dcgettext",
                "free",
                "non_fatal",
                "xmalloc",
                "printf",
                "bindtextdomain",
                "memcpy",
                "fprintf",
                "bfd_set_error_program_name",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "strcmp",
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "parse_binary_file_001055f0"
        },
        "FUN_0010c020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010c020"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_0010c260": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c260",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010c260"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "display_filename_0010351b",
                "filename_per_symbol": "symbolHasFilename",
                "printf": "printMessage"
            },
            "code": "\nvoid displayFilename_0010351b(void)\n\n{\n  if (symbolHasFilename == 0) {\n    printMessage(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "display_filename_0010351b"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_function_name_00103b2b",
                "param_1": "fileName",
                "param_2": "functionName",
                "filename_per_symbol": "symbolPerFile"
            },
            "code": "\nvoid printFunctionName_00103b2b(undefined8 fileName,undefined8 functionName)\n\n{\n  if (symbolPerFile == 0) {\n    printf(\"%s[%s]:\\n\",fileName,functionName);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_function_name_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_demangled_string_00104740",
                "param_1": "format_string",
                "param_2": "symbol_table",
                "param_3": "symbol_name",
                "param_4": "binary_info",
                "puVar1": "pointer_var1",
                "bVar2": "byte_var2",
                "bVar3": "byte_var3",
                "iVar4": "int_var4",
                "sVar5": "size_var5",
                "pcVar6": "pointer_var6",
                "puVar7": "pointer_var7",
                "pcVar8": "pointer_var8",
                "__ptr": "output_string",
                "uVar9": "ulong_var9",
                "uVar10": "ulong_var10",
                "puVar11": "pointer_var11",
                "puVar12": "pointer_var12",
                "__s": "string_var",
                "__s_00": "string_var_00",
                "lVar13": "long_var13",
                "uVar14": "uint_var14",
                "bVar15": "byte_var15",
                "acStack_39": "stack_array"
            },
            "code": "\nvoid print_demangled_string_00104740(char *format_string,long *symbol_table,undefined8 *symbol_name,long binary_info)\n\n{\n  undefined8 *pointer_var1;\n  byte byte_var2;\n  byte byte_var3;\n  int int_var4;\n  size_t size_var5;\n  char *pointer_var6;\n  undefined8 *pointer_var7;\n  char *pointer_var8;\n  undefined8 *output_string;\n  ulong ulong_var9;\n  undefined8 ulong_var10;\n  undefined *pointer_var11;\n  undefined8 *pointer_var12;\n  char *string_var;\n  undefined8 *string_var_00;\n  long long_var13;\n  uint uint_var14;\n  byte byte_var15;\n  char stack_array [9];\n  \n  byte_var15 = 0;\n  if (symbol_name == (undefined8 *)0x0) {\n    symbol_name = *(undefined8 **)(*symbol_table + 0x10);\n    if (with_symbol_versions == 0) {\n      print_demangled_string_00104740_00102739();\n      return;\n    }\nLAB_00104775:\n    pointer_var12 = symbol_name;\n    if (do_demangle == 0) {\n      pointer_var6 = (char *)0x0;\n      if (unicode_display == 0) {\nLAB_00104794:\n        pointer_var12 = symbol_name;\n        output_string = (undefined8 *)0x0;\n      }\n      else {\n        output_string = (undefined8 *)0x0;\n        if (symbol_name != (undefined8 *)0x0) goto LAB_0010269d;\n        pointer_var12 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      pointer_var6 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)pointer_var12 == '\\0') ||\n         (symbol_name = (undefined8 *)bfd_demangle(binary_info,pointer_var12,demangle_flags),\n         symbol_name == (undefined8 *)0x0)) {\n        symbol_name = pointer_var12;\n        if (unicode_display != 0) goto LAB_00102698;\n        output_string = (undefined8 *)0x0;\n      }\n      else {\n        pointer_var12 = symbol_name;\n        output_string = symbol_name;\n        if (unicode_display != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    pointer_var12 = symbol_name;\n    if (with_symbol_versions == 0) {\n      if (*(int *)(*(long *)(binary_info + 8) + 8) != 5) goto LAB_00104775;\n      pointer_var6 = strchr((char *)symbol_name,0x40);\n      if (pointer_var6 == (char *)0x0) {\n        if (do_demangle == 0) {\n          if (unicode_display == 0) {\n            if (symbol_table == (long *)0x0) {\n              output_string = (undefined8 *)0x0;\n              printf(format_string,symbol_name);\n            }\n            else {\n              if (symbol_table[2] != 0) {\n                print_and_free_memory_001047d0();\n                return;\n              }\n              output_string = (undefined8 *)0x0;\n              printf(format_string,symbol_name);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *pointer_var6 = '\\0';\n        if (do_demangle == 0) {\n          if (unicode_display == 0) goto LAB_00104794;\n          output_string = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    pointer_var6 = (char *)0x0;\n    if (do_demangle != 0) goto LAB_0010482b;\n    if (unicode_display == 0) goto LAB_00104794;\nLAB_00102698:\n    pointer_var12 = symbol_name;\n    output_string = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte_var2 = *(byte *)symbol_name;\n      symbol_name = (undefined8 *)((long)symbol_name + 1);\n      if (byte_var2 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte_var2 * 2] & 2) == 0) && (byte_var2 < 0xc0));\n    size_var5 = strlen((char *)pointer_var12);\n    string_var_00 = buffer_8;\n    if (buffer_len_9 < size_var5 * 9) {\n      free(buffer_8);\n      size_var5 = strlen((char *)pointer_var12);\n      buffer_len_9 = size_var5 * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      string_var_00 = buffer_8;\n    }\n    while( true ) {\n      pointer_var7 = buffer_8;\n      byte_var2 = *(byte *)pointer_var12;\n      pointer_var1 = (undefined8 *)((long)pointer_var12 + 1);\n      if (byte_var2 == 0) break;\n      if (((&_sch_istable)[(ulong)byte_var2 * 2] & 2) == 0) {\n        if ((byte_var2 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)string_var_00 = byte_var2;\n          string_var_00 = (undefined8 *)((long)string_var_00 + 1);\n          pointer_var12 = pointer_var1;\n        }\n        else {\n          byte_var3 = *(byte *)((long)pointer_var12 + 1);\n          if ((byte_var3 & 0xc0) == 0x80) {\n            pointer_var7 = string_var_00;\n            if ((byte_var2 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                uint_var14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var13 = 2;\n                goto LAB_00102917;\n              case 4:\n                int_var4 = isatty(1);\n                if (int_var4 == 0) {\n                  byte_var3 = *(byte *)((long)pointer_var12 + 1);\n                }\n                else {\n                  *(undefined *)(string_var_00 + 1) = 0;\n                  *string_var_00 = 0x6d37343b31335b1b;\n                  byte_var3 = *(byte *)((long)pointer_var12 + 1);\n                  pointer_var7 = string_var_00 + 1;\n                }\n              case 2:\n                uint_var14 = 2;\n                sprintf((char *)pointer_var7,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointer_var12 >> 2 & 7),\n                        (ulong)((*(byte *)pointer_var12 & 3) << 6 | byte_var3 & 0x3f));\n                pointer_var7 = (undefined8 *)((long)pointer_var7 + 6);\n                goto LAB_00102a27;\n              default:\n                uint_var14 = 2;\n              }\n            }\n            else {\n              byte_var3 = *(byte *)((long)pointer_var12 + 2);\n              if ((byte_var3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte_var2 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  uint_var14 = 3;\nLAB_00102a62:\n                  for (ulong_var9 = (ulong)uint_var14; ulong_var9 != 0; ulong_var9 = ulong_var9 - 1) {\n                    *(undefined *)pointer_var7 = *(undefined *)pointer_var12;\n                    pointer_var12 = (undefined8 *)((long)pointer_var12 + (ulong)byte_var15 * -2 + 1);\n                    pointer_var7 = (undefined8 *)((long)pointer_var7 + (ulong)byte_var15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var13 = 3;\nLAB_00102917:\n                  ulong_var10 = 0x7b;\n                  if (unicode_display == 3) {\n                    ulong_var10 = 0x3c;\n                  }\n                  sprintf((char *)string_var_00,\"%c\",ulong_var10);\n                  *(undefined *)((long)string_var_00 + 3) = 0;\n                  pointer_var7 = (undefined8 *)(long_var13 + (long)pointer_var12);\n                  *(undefined2 *)((long)string_var_00 + 1) = 0x7830;\n                  pointer_var8 = (char *)((long)string_var_00 + 3);\n                  do {\n                    string_var = pointer_var8;\n                    byte_var2 = *(byte *)pointer_var12;\n                    pointer_var12 = (undefined8 *)((long)pointer_var12 + 1);\n                    sprintf(string_var,\"%02x\",(ulong)byte_var2);\n                    pointer_var8 = string_var + 2;\n                  } while (pointer_var12 != pointer_var7);\n                  ulong_var10 = 0x7d;\n                  if (unicode_display == 3) {\n                    ulong_var10 = 0x3e;\n                  }\n                  uint_var14 = (uint)long_var13;\n                  sprintf(string_var + 2,\"%c\",ulong_var10);\n                  pointer_var7 = (undefined8 *)(string_var + 3);\n                  break;\n                case 4:\n                  int_var4 = isatty(1);\n                  if (int_var4 == 0) {\n                    byte_var3 = *(byte *)((long)pointer_var12 + 2);\n                  }\n                  else {\n                    *(undefined *)(string_var_00 + 1) = 0;\n                    *string_var_00 = 0x6d37343b31335b1b;\n                    byte_var3 = *(byte *)((long)pointer_var12 + 2);\n                    pointer_var7 = string_var_00 + 1;\n                  }\n                case 2:\n                  uint_var14 = 3;\n                  sprintf((char *)pointer_var7,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointer_var12 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointer_var12 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointer_var12 + 1) & 3) << 6 | byte_var3 & 0x3f));\n                  pointer_var7 = (undefined8 *)((long)pointer_var7 + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (int_var4 = isatty(1), int_var4 != 0)) {\n                    *(undefined4 *)pointer_var7 = 0x6d305b1b;\n                    pointer_var7 = (undefined8 *)((long)pointer_var7 + 4);\n                    *(undefined *)pointer_var7 = 0;\n                  }\n                  break;\n                default:\n                  uint_var14 = 3;\n                }\n              }\n              else {\n                byte_var3 = *(byte *)((long)pointer_var12 + 3);\n                if ((byte_var3 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  uint_var14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var13 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int_var4 = isatty(1);\n                  if (int_var4 == 0) {\n                    byte_var3 = *(byte *)((long)pointer_var12 + 3);\n                  }\n                  else {\n                    *(undefined *)(string_var_00 + 1) = 0;\n                    *string_var_00 = 0x6d37343b31335b1b;\n                    byte_var3 = *(byte *)((long)pointer_var12 + 3);\n                    pointer_var7 = string_var_00 + 1;\n                  }\n                case 2:\n                  uint_var14 = 4;\n                  int_var4 = sprintf((char *)pointer_var7,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointer_var12 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer_var12 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer_var12 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer_var12 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer_var12 + 2) & 3) << 6 | byte_var3 & 0x3f));\n                  pointer_var7 = (undefined8 *)((long)pointer_var7 + (long)int_var4);\n                  goto LAB_00102a27;\n                default:\n                  uint_var14 = 4;\n                }\n              }\n            }\n            ulong_var9 = (ulong)(uint)((int)pointer_var7 - (int)string_var_00);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)string_var_00 = byte_var2;\n            uint_var14 = 1;\n            ulong_var9 = 1;\n          }\n          string_var_00 = (undefined8 *)((long)string_var_00 + ulong_var9);\n          pointer_var12 = (undefined8 *)((long)pointer_var1 + (ulong)(uint_var14 - 1));\n        }\n      }\n      else {\n        *(undefined *)string_var_00 = 0x5e;\n        *(byte *)((long)string_var_00 + 1) = byte_var2 + 0x40;\n        string_var_00 = (undefined8 *)((long)string_var_00 + 2);\n        pointer_var12 = pointer_var1;\n      }\n    }\n    *(undefined *)string_var_00 = 0;\n    pointer_var12 = pointer_var7;\n  }\njoined_r0x00104864:\n  if ((((symbol_table != (long *)0x0) && (symbol_table[2] != 0)) && (with_symbol_versions != 0)) &&\n     ((pointer_var8 = (char *)(**(code **)(*(long *)(binary_info + 8) + 0x220))\n                                  (binary_info,symbol_table[2],0,stack_array), pointer_var8 != (char *)0x0 &&\n      (*pointer_var8 != '\\0')))) {\n    pointer_var11 = &DAT_001071e0;\n    if ((stack_array[0] == '\\0') && (*(long *)(symbol_table[2] + 0x20) != 0x10c2a8)) {\n      pointer_var11 = &DAT_001071df;\n    }\n    output_string = (undefined8 *)reconcat(output_string,pointer_var12,pointer_var11,pointer_var8,0);\n    pointer_var12 = output_string;\n  }\n  printf(format_string,pointer_var12);\n  if (pointer_var6 != (char *)0x0) {\n    *pointer_var6 = '@';\n  }\nLAB_001047ba:\n  free(output_string);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "just_print_symbol_name",
                "print_symbol_info_bsd.cold",
                "display_file",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_demangled_string_00104740"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_0010c0c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c8",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c8"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "report_data_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "dataPointer",
                "param_10": "parameter10",
                "param_11": "parameter11",
                "param_12": "parameter12",
                "param_13": "parameter13",
                "param_14": "parameter14",
                "in_AL": "flag",
                "local_d8": "length",
                "local_d4": "size",
                "local_d0": "stackPointer",
                "local_c8": "buffer",
                "local_b8": "data",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "localVar1",
                "local_78": "localVar2",
                "local_68": "localVar3",
                "local_58": "localVar4",
                "local_48": "localVar5",
                "local_38": "localVar6",
                "local_28": "localVar7",
                "local_18": "localVar8"
            },
            "code": "\nvoid reportData_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 dataPointer,undefined8 parameter10,undefined8 parameter11,undefined8 parameter12,\n                 undefined8 parameter13,undefined8 parameter14)\n\n{\n  char flag;\n  undefined4 length;\n  undefined4 size;\n  undefined *stackPointer;\n  undefined *buffer;\n  undefined data [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  \n  if (flag != '\\0') {\n    localVar1 = input1;\n    localVar2 = input2;\n    localVar3 = input3;\n    localVar4 = input4;\n    localVar5 = input5;\n    localVar6 = input6;\n    localVar7 = input7;\n    localVar8 = input8;\n  }\n  stackPointer = &stack0x00000008;\n  length = 8;\n  buffer = data;\n  size = 0x30;\n  param10 = parameter10;\n  param11 = parameter11;\n  param12 = parameter12;\n  param13 = parameter13;\n  param14 = parameter14;\n  report(dataPointer,&length);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "display_file.cold",
                "display_rel_file",
                "FUN_00104d5b",
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "report_data_00106400"
        },
        "FUN_0010c1e8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1e8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1e8"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_print_width",
                "list_matching_formats",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "usage",
                "FUN_001047d0",
                "print_symname.cold",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "size_forward1",
                "main",
                "usage",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "print_symbol_info_bsd",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_sort_00103533",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "result"
            },
            "code": "\nulong compare_and_sort_00103533(undefined8 *array1,undefined8 *array2)\n\n{\n  ulong result;\n  \n  if ((ulong)array1[1] < (ulong)array2[1]) {\n    return (ulong)(-(uint)(reverse_sort == 0) | 1);\n  }\n  if ((ulong)array2[1] < (ulong)array1[1]) {\n    return (ulong)((-(uint)(reverse_sort == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (**(code **)(sorters + (long)reverse_sort * 8))(*array1,*array2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_sort_00103533"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "list_matching_formats",
                "bfd_nonfatal",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_constant_value_0010651a",
                "print_value_constprop_0": "print_constant_value"
            },
            "code": "\nvoid print_constant_value_0010651a(void)\n\n{\n  print_constant_value_0010651a();\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "print_symbol_info_posix.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_constant_value_0010651a"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_details_001053c0",
                "param_1": "symbolDetails",
                "param_2": "formatString",
                "iVar1": "printWidth",
                "cVar2": "isUndefined",
                "uVar3": "symbolValue",
                "lVar4": "printValue",
                "print_width": "defaultPrintWidth",
                "sort_by_size": "sortBySize",
                "print_size": "printSize",
                "print_value_constprop_0": "printConstantValue",
                "print_format_string": "formatString",
                "print_symbol_info_bsd_cold": "printSymbolInfo",
                "other_format": "otherFormat",
                "desc_format": "descFormat"
            },
            "code": "\nvoid printSymbolDetails_001053c0(long *symbolDetails,undefined8 formatString)\n\n{\n  int printWidth;\n  char isUndefined;\n  undefined8 symbolValue;\n  long printValue;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolDetails + 8));\n  printWidth = defaultPrintWidth;\n  if (isUndefined == '\\0') {\n    if (sortBySize == 0) {\n      if ((defaultPrintWidth - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbolValue = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        fatal(symbolValue,printWidth);\n        goto LAB_00103623;\n      }\n      symbolValue = *(undefined8 *)*symbolDetails;\n    }\n    else {\n      if (printSize == 0) {\n        if (symbolDetails[2] == 0) {\n          printValue = symbolDetails[1];\n        }\n        else {\n          printValue = *(long *)(symbolDetails[2] + 0x38);\n        }\n        printConstantValue(printValue);\n        if (printSize != 0) {\n          printSymbolInfo();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbolValue = *(undefined8 *)*symbolDetails;\n      if ((defaultPrintWidth - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(formatString,symbolValue);\n    if (printSize != 0) {\n      printSymbolInfo();\n      return;\n    }\n  }\n  else if (defaultPrintWidth == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolDetails + 8));\n  if (*(char *)(*symbolDetails + 8) != '-') {\n    print_symname(&DAT_0010712c,symbolDetails,0,formatString);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf((char *)&otherFormat,(ulong)(uint)(int)*(char *)(*symbolDetails + 0x19));\n  putchar(0x20);\n  printf((char *)&descFormat,(ulong)(uint)(int)*(short *)(*symbolDetails + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolDetails + 0x20));\n  print_symname(&DAT_0010712c,symbolDetails,0,formatString);\n  return;\n}\n\n",
            "called": [
                "fatal",
                "bfd_is_undefined_symclass",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_bsd.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_symbol_details_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_function_details_001064b0",
                "param_1": "symbol_address",
                "param_2": "param_value",
                "cVar1": "is_undefined",
                "printf": "print_str",
                "bfd_is_undefined_symclass": "is_symbol_undefined",
                "putchar": "print_char"
            },
            "code": "\nvoid print_function_details_001064b0(long *symbol_address,undefined8 param_value)\n\n{\n  char is_undefined;\n  \n  print_symname(&DAT_00107363,symbol_address,0,param_value);\n  print_str(\"%c \",(ulong)(uint)(int)*(char *)(*symbol_address + 8));\n  is_undefined = is_symbol_undefined((int)*(char *)(*symbol_address + 8));\n  if (is_undefined != '\\0') {\n    print_str(\"        \");\n    return;\n  }\n  print_value_constprop_0(*(undefined8 *)*symbol_address);\n  print_char(0x20);\n  if (symbol_address[2] == 0) {\n    if (symbol_address[1] != 0) {\n      print_constant_value_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(symbol_address[2] + 0x38) != 0) {\n    print_value_constprop_0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "FUN_0010651a",
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_posix.cold",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_function_details_001064b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_0010c030": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c030",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010c030"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010c150": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c150",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010c150"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_symbol_name_00103b49",
                "param_1": "symbol",
                "param_2": "additional_info"
            },
            "code": "\nvoid print_symbol_name_00103b49(undefined8 symbol,undefined8 additional_info)\n\n{\n  print_symname(&DAT_0010712d,symbol,0,additional_info);\n  return;\n}\n\n",
            "called": [
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_name_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_undefined_symbols_00103abf",
                "param_1": "fileName",
                "param_2": "symbolName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printUndefinedSymbols_00103abf(undefined8 fileName,undefined8 symbolName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (undefined_only == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,fileName,symbolName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (print_width != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_undefined_symbols_00103abf"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_value_00103bf6",
                "in_RAX": "result",
                "auVar2": "final_value",
                "iVar1": "negative_result"
            },
            "code": "\nundefined  [16] calculate_value_00103bf6(void)\n\n{\n  int negative_result;\n  undefined8 result;\n  undefined final_value [16];\n  \n  negative_result = non_numeric_forward();\n  final_value._0_4_ = -negative_result;\n  final_value._4_4_ = 0;\n  final_value._8_8_ = result;\n  return final_value;\n}\n\n",
            "called": [
                "non_numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_value_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "targetList",
                "unaff_RBX": "file",
                "plVar3": "target",
                "in_stack_00000008": "exitCode",
                "lVar1": "currentTarget",
                "pcVar2": "message"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  FILE *file;\n  long *target;\n  int exitCode;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(file,message);\n  targetList = (long *)bfd_target_list();\n  target = targetList;\n  while( true ) {\n    currentTarget = *target;\n    target = target + 1;\n    if (currentTarget == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_matching_formats",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "print_symbol_info_bsd.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "analyze_symbols_00102c19",
                "pcVar1": "symbolName",
                "pcVar2": "symbolFunction",
                "cVar3": "result",
                "iVar4": "comparisonResult",
                "uVar5": "isSpecialSymbol",
                "uVar6": "undefinedValue",
                "lVar7": "size",
                "puVar8": "symbol",
                "lVar9": "length",
                "puVar10": "symbolX",
                "puVar11": "currentSymbol",
                "puVar12": "symbolArray",
                "puVar13": "symbolY",
                "unaff_R12": "numSymbolsX",
                "unaff_R13": "currentSymbolX",
                "unaff_R14": "symbolYStep",
                "unaff_R15": "numSymbolsY",
                "bVar16": "dynamicEnabled",
                "bVar17": "allowSpecialSymbols",
                "unaff_retaddr": "returnAddress",
                "uVar18": "sortFlag",
                "in_stack_00000008": "printOptions",
                "in_stack_00000010": "symbolArrayStart",
                "in_stack_00000018": "symbolArrayEnd",
                "in_stack_00000038": "numSymbolsYFlag",
                "in_stack_00000040": "temporaryMemory",
                "in_stack_00000048": "symbolArrayStep"
            },
            "code": "\nvoid analyzeSymbols_00102c19(void)\n\n{\n  char *symbolName;\n  code *symbolFunction;\n  char result;\n  int comparisonResult;\n  uint isSpecialSymbol;\n  undefined8 undefinedValue;\n  long size;\n  undefined8 *symbol;\n  long length;\n  undefined8 *symbolX;\n  undefined8 *unaff_RBX;\n  undefined8 *__ptr;\n  undefined8 *unaff_RBP;\n  undefined8 *currentSymbol;\n  undefined8 *symbolArray;\n  undefined8 *in_R8;\n  undefined8 *symbolY;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *numSymbolsX;\n  undefined8 *puVar15;\n  undefined8 *currentSymbolX;\n  undefined8 *symbolYStep;\n  undefined8 *numSymbolsY;\n  bool dynamicEnabled;\n  byte allowSpecialSymbols;\n  ulong returnAddress;\n  ulong sortFlag;\n  undefined8 printOptions;\n  undefined8 *symbolArrayStart;\n  undefined8 *symbolArrayEnd;\n  undefined8 numSymbolsYFlag;\n  void *temporaryMemory;\n  undefined8 *symbolArrayStep;\n  \n  allowSpecialSymbols = 0;\n  if (allow_special_symbols == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (unaff_RBX != currentSymbolX) {\n      if (symbolYStep == (undefined8 *)0x8) {\n        *unaff_RBX = *currentSymbolX;\n        FUN_001049c0();\n        return;\n      }\n      for (; symbolYStep != (undefined8 *)0x0; symbolYStep = (undefined8 *)((long)symbolYStep + -1)) {\n        *(undefined *)unaff_RBX = *(undefined *)currentSymbolX;\n        currentSymbolX = (undefined8 *)((long)currentSymbolX + (ulong)allowSpecialSymbols * -2 + 1);\n        unaff_RBX = (undefined8 *)((long)unaff_RBX + (ulong)allowSpecialSymbols * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)symbolYStep);\nLAB_001049c3:\n    do {\n      do {\n        currentSymbolX = (undefined8 *)((long)currentSymbolX + (long)symbolYStep);\n        puVar15 = numSymbolsX;\n        symbolArray = unaff_RBP;\n        if (numSymbolsX <= currentSymbolX) goto LAB_00104b15;\nLAB_001049cf:\n        symbol = (undefined8 *)\n                 (**(code **)(unaff_RBP[1] + 0x270))\n                           (unaff_RBP,returnAddress & 0xffffffff,currentSymbolX,numSymbolsY);\n        currentSymbol = unaff_RBP;\n        symbolArray = currentSymbolX;\n        puVar15 = numSymbolsY;\n        if (symbol == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)symbol[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isSpecialSymbol = (uint)(symbol[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isSpecialSymbol != 0) goto LAB_00104a2d;\n          currentSymbolX = (undefined8 *)((long)currentSymbolX + (long)symbolYStep);\n          puVar15 = numSymbolsX;\n          symbolArray = unaff_RBP;\n          if (numSymbolsX <= currentSymbolX) {\nLAB_00104b15:\n            unaff_RBX = (undefined8 *)((long)unaff_RBX - (long)symbolArrayEnd);\n            if (symbolYStep == (undefined8 *)0x8) {\n              length = symbolArray[1];\n              currentSymbol = (undefined8 *)((long)unaff_RBX + 7);\n              if (-1 < (long)unaff_RBX) {\n                currentSymbol = unaff_RBX;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              symbolFunction = *(code **)(length + 0x208);\n              currentSymbol = (undefined8 *)((long)currentSymbol >> 3);\n            }\n            else {\n              currentSymbol = (undefined8 *)((long)unaff_RBX / (long)symbolYStep);\n              length = symbolArray[1];\n              symbolFunction = *(code **)(length + 0x208);\n            }\n            unaff_RBP = symbolArray;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = symbolArray;\n              sort_x = (undefined8 *)(*symbolFunction)(symbolArray);\n              sort_y = (undefined8 *)(**(code **)(symbolArray[1] + 0x208))(symbolArray);\n              unaff_RBX = symbolArrayStep;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*symbolArray);\n                __ptr = numSymbolsY;\n                goto LAB_00102d8e;\n              }\n              numSymbolsX = (undefined8 *)(ulong)numSymbolsYFlag._4_4_;\n              if (sort_by_size != 0) {\n                sortFlag = (ulong)(dynamic != 0);\n                qsort(symbolArrayStep,(size_t)currentSymbol,(size_t)numSymbolsX,size_forward1);\n                puVar15 = (undefined8 *)xmalloc((long)currentSymbol << 4);\n                symbolY = sort_x;\n                unaff_RBP = sort_y;\n                symbolYStep = (undefined8 *)((long)currentSymbol * (long)numSymbolsX + (long)unaff_RBX);\n                symbol = sort_x;\n                in_R9 = sort_y;\n                if (symbolYStep <= unaff_RBX) goto LAB_00102ec2;\n                currentSymbol = (undefined8 *)\n                          (**(code **)(symbolArray[1] + 0x270))(symbolArray,sortFlag & 0xffffffff,unaff_RBX);\n                __ptr = unaff_RBX;\n                in_R8 = numSymbolsX;\n                symbolArrayStart = puVar15;\n                if (currentSymbol == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(symbolArrayStep,(size_t)currentSymbol,(size_t)numSymbolsX,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              length = symbolArray[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              symbolArray = symbolArrayStep;\n              symbol = (undefined8 *)(ulong)sort_by_size;\n              symbolYStep = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                puVar15 = (undefined8 *)(**(code **)(length + 0x208))(unaff_RBP);\n                if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n                unaff_RBX = __ptr + (long)currentSymbol * 2;\n                currentSymbol = __ptr;\n                do {\n                  if (unaff_RBX <= currentSymbol) {\nLAB_00104c75:\n                    if (temporaryMemory == (void *)0x0) {\n                      free(symbolArrayStep);\n                      free(__ptr);\n                      return;\n                    }\n                    free(temporaryMemory);\n                    free(symbolArrayStep);\n                    free(__ptr);\n                    return;\n                  }\n                  symbol = puVar15;\n                  length = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,symbolYStep,*currentSymbol);\n                  if (length == 0) {\n                    bfd_fatal(*unaff_RBP,0);\nLAB_00102ed2:\n                    symbolArray = (undefined8 *)*unaff_RBP;\n                    bfd_fatal();\n                    symbolY = in_R8;\n                    puVar14 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  symbolArray = currentSymbol + 1;\n                  currentSymbol = currentSymbol + 2;\n                  print_symbol(unaff_RBP,length,*symbolArray,printOptions);\n                } while( true );\n              }\n              numSymbolsX = (undefined8 *)(ulong)numSymbolsYFlag._4_4_;\n              numSymbolsY = (undefined8 *)(**(code **)(length + 0x208))(unaff_RBP);\n              if (numSymbolsY == (undefined8 *)0x0) {\n                bfd_fatal(*unaff_RBP);\n                symbolArray = numSymbolsX;\n                if (dynamic == 0) {\n                  length = (**(code **)(unaff_RBP[1] + 0x350))(unaff_RBP);\n                  currentSymbol = symbolArrayStep;\n                  puVar15 = numSymbolsX;\n                  if (length < 1) {\n                    symbol = (undefined8 *)0x0;\n                    unaff_RBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    unaff_RBX = (undefined8 *)xmalloc();\n                    symbol = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x358))(unaff_RBP,unaff_RBX);\n                    symbolArray = puVar15;\n                    if ((long)symbol < 0) {\n                      symbolArray = (undefined8 *)*unaff_RBP;\n                      currentSymbol = (undefined8 *)bfd_fatal(symbolArray,puVar15);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol = numSymbolsX;\n                  unaff_RBX = symbolArrayStep;\n                  currentSymbol = (undefined8 *)0x0;\n                  puVar15 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = unaff_RBX;\n                length = (**(code **)(unaff_RBP[1] + 0x360))(unaff_RBP,puVar15,currentSymbol,symbol);\n                numSymbolsX = symbolArray;\n                if (0 < length) {\n                  numSymbolsX = (undefined8 *)((long)symbolArray + length);\n                  symbolArrayStep = (undefined8 *)xrealloc(symbolArrayStep);\n                  size = 0;\n                  do {\n                    symbolArrayStep[(long)((long)symbolArray + size)] =\n                         (void *)(size * 0x30 + (long)temporaryMemory);\n                    size = size + 1;\n                  } while (length != size);\n                  symbolArrayStep[(long)((long)symbolArray + length)] = 0;\n                }\n                if ((dynamic == 0) && (unaff_RBX != (undefined8 *)0x0)) {\n                  free(unaff_RBX);\n                }\n                if ((*(byte *)((long)unaff_RBP + 0x4a) & 0x10) != 0) {\n                  unaff_RBX = (undefined8 *)*unaff_RBP;\n                  report_plugin_err = '\\0';\n                  undefinedValue = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(undefinedValue);\n                }\n                symbolYStep = (undefined8 *)(ulong)numSymbolsYFlag._4_4_;\n                dynamicEnabled = dynamic != 0;\n                currentSymbol = (undefined8 *)(ulong)dynamicEnabled;\n                symbol = symbolArrayStep;\n                symbolArrayEnd = symbolArrayStep;\n                numSymbolsY = (undefined8 *)(**(code **)(unaff_RBP[1] + 0x208))(unaff_RBP);\n                if (numSymbolsY != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                currentSymbol = (undefined8 *)((long)currentSymbol * (long)numSymbolsX + (long)symbolArray);\n                unaff_RBX = symbolArray;\n                while( true ) {\n                  if (currentSymbol <= unaff_RBX) goto LAB_00104c75;\n                  symbol = numSymbolsY;\n                  length = (**(code **)(unaff_RBP[1] + 0x270))(unaff_RBP,symbolYStep,unaff_RBX);\n                  if (length == 0) break;\n                  unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)numSymbolsX);\n                  print_symbol(unaff_RBP,length,0,printOptions);\n                }\n                bfd_fatal(*unaff_RBP,0);\n              }\n              bfd_fatal(*unaff_RBP);\n              symbolArray = unaff_RBP;\n              puVar15 = numSymbolsY;\nLAB_00102eb0:\n              bfd_fatal(*currentSymbol);\nLAB_00102eb9:\n              bfd_fatal(*symbolArray);\nLAB_00102ec2:\n              currentSymbol = (undefined8 *)0x0;\n              __ptr = unaff_RBX;\n              in_R8 = numSymbolsX;\n              symbolY = symbol;\n              unaff_RBP = in_R9;\n              symbolArrayStart = puVar15;\nLAB_00104e35:\n              while (in_R9 = symbolY, __ptr < symbolYStep) {\n                unaff_RBX = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (unaff_RBX < symbolYStep) {\n                  symbol = unaff_RBP;\n                  symbolY = in_R8;\n                  puVar14 = in_R9;\n                  symbolX = (undefined8 *)(**(code **)(symbolArray[1] + 0x270))();\n                  if (symbolX == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = puVar14;\n                    in_R8 = symbolY;\n                    symbolArray = (undefined8 *)*symbolArray;\n                    symbolX = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol = (undefined8 *)currentSymbol[4];\n                    if ((*(uint *)(currentSymbol + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  length = currentSymbol[2];\nLAB_00102ee7:\n                  if (symbol == (undefined8 *)symbolX[4]) {\n                    length = symbolX[2] - length;\n                    symbolY = unaff_RBP;\n                    puVar14 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  length = symbol[8] - length;\n                  symbolY = unaff_RBP;\n                  puVar14 = __ptr;\n                }\n                else {\n                  symbol = (undefined8 *)currentSymbol[4];\n                  if ((*(uint *)(currentSymbol + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    length = currentSymbol[2];\n                    symbolX = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  symbolX = (undefined8 *)0x0;\nLAB_00104e95:\n                  symbolY = unaff_RBP;\n                  puVar14 = __ptr;\n                  if (*(int *)(symbolArray[1] + 8) == 5) {\n                    length = currentSymbol[7];\n                  }\n                  else {\n                    length = currentSymbol[2];\n                    if ((*(byte *)((long)symbol + 0x25) & 0x10) == 0) {\n                      if (unaff_RBX < symbolYStep) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                currentSymbol = symbolX;\n                __ptr = unaff_RBX;\n                unaff_RBP = in_R9;\n                if (length != 0) {\n                  *puVar15 = puVar14;\n                  puVar15[1] = length;\n                  puVar15 = puVar15 + 2;\n                }\n              }\n              currentSymbol = (undefined8 *)((long)puVar15 - (long)symbolArrayStart >> 4);\n              qsort(symbolArrayStart,(size_t)currentSymbol,0x10,size_forward2);\n              length = symbolArray[1];\n              unaff_RBX = __ptr;\n              unaff_RBP = symbolArray;\n              __ptr = symbolArrayStart;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        symbolArrayStart = symbol;\n        if (comparisonResult == 0) {\n          if (report_plugin_err != '\\0') {\n            symbolArrayStart = (undefined8 *)*unaff_RBP;\n            report_plugin_err = '\\0';\n            undefinedValue = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(undefinedValue,symbolArrayStart);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          isSpecialSymbol = (*(uint *)(symbol + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol + 3) & 0x800082) == 0) && (symbol[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nextract_and_sort_symbols_00104d5b:\n          if ((symbol[4] != 0x10c2a8) && (symbol[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol + 3) & 4) != 0);\n      if (sort_by_size != 0) goto extract_and_sort_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        result = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n        if (result != '\\0') {\n          analyzeSymbols_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol[4] == 0x10c2a8);\nLAB_00104cba:\n    result = (**(code **)(unaff_RBP[1] + 0x230))(unaff_RBP);\n    if (result != '\\0') {\n      analyzeSymbols_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)numSymbolsX * (long)symbolYStep);\n  numSymbolsX = (undefined8 *)((long)symbolArrayEnd + (long)puVar15);\n  unaff_RBX = symbolArrayEnd;\n  symbolArray = unaff_RBP;\n  if (symbolArrayEnd < numSymbolsX) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)dynamicEnabled;\n  currentSymbolX = symbolArrayEnd;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "analyze_symbols_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "handle_error_00106530",
                "in_R10": "cause",
                "lVar3": "errorCode",
                "uVar2": "errorMessage",
                "iVar1": "errorType"
            },
            "code": "\n\n\nvoid handleError_00106530(void)\n\n{\n  int errorType;\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 cause;\n  \n  bfd_nonfatal();\n  errorCode = 1;\n  xexit();\n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorType);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorCode,errorMessage,cause);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,cause);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "non_numeric_forward.cold",
                "get_relocs",
                "size_forward1",
                "display_rel_file",
                "FUN_00104d5b",
                "print_symbol",
                "display_file",
                "numeric_forward.cold"
            ],
            "imported": false,
            "current_name": "handle_error_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "display_unicode_characters_0010268b",
                "unicode_display": "displayOption",
                "_sch_istable": "characterTable",
                "buffer_8": "outputBuffer",
                "buffer_len_9": "bufferLength",
                "bVar2": "currentByte",
                "bVar3": "nextByte",
                "lVar13": "counter",
                "uVar14": "optionValue",
                "unaff_R14": "formatString",
                "puVar12": "outputPointer",
                "puVar11": "inputPointer",
                "puVar1": "nextInputPointer",
                "uVar9": "bracketValue",
                "unaff_R13": "inputString",
                "unaff_R15": "currentStackFrame",
                "uVar8": "bytesWritten",
                "in_stack_00000038": "additionalOption",
                "puVar10": "concatenationPointer",
                "puVar6": "outputPointer2",
                "iVar4": "isTerminal",
                "pcVar7": "concatenatedString",
                "__s": "stringPtr"
            },
            "code": "\nvoid displayUnicodeCharacters_0010268b(void)\n\n{\n  undefined8 *nextInputPointer;\n  byte currentByte;\n  byte nextByte;\n  int isTerminal;\n  size_t sVar5;\n  undefined8 *outputPointer2;\n  char *concatenatedString;\n  ulong bytesWritten;\n  undefined8 bracketValue;\n  undefined *concatenationPointer;\n  undefined8 *inputPointer;\n  long unaff_RBP;\n  undefined8 *outputPointer;\n  undefined *unaff_R12;\n  undefined8 *inputString;\n  long counter;\n  uint optionValue;\n  char *formatString;\n  long currentStackFrame;\n  byte bVar15;\n  char *stringPtr;\n  undefined8 additionalOption;\n  \n  bVar15 = 0;\n  outputPointer = inputString;\n  if (displayOption != 0) {\n    do {\n      currentByte = *(byte *)outputPointer;\n      if (currentByte == 0) goto LAB_0010485e;\n    } while ((((&characterTable)[(ulong)currentByte * 2] & 2) == 0) &&\n            (outputPointer = (undefined8 *)((long)outputPointer + 1), currentByte < 0xc0));\n    sVar5 = strlen((char *)inputString);\n    outputPointer = outputBuffer;\n    inputPointer = inputString;\n    if (bufferLength < sVar5 * 9) {\n      free(outputBuffer);\n      sVar5 = strlen((char *)inputString);\n      bufferLength = sVar5 * 9;\n      outputBuffer = (undefined8 *)xmalloc(bufferLength + 1);\n      outputPointer = outputBuffer;\n    }\n    while( true ) {\n      inputString = outputBuffer;\n      currentByte = *(byte *)inputPointer;\n      nextInputPointer = (undefined8 *)((long)inputPointer + 1);\n      if (currentByte == 0) break;\n      if (((&characterTable)[(ulong)currentByte * 2] & 2) == 0) {\n        if ((currentByte < 0xc0) || (displayOption == 0)) {\n          *(byte *)outputPointer = currentByte;\n          outputPointer = (undefined8 *)((long)outputPointer + 1);\n          inputPointer = nextInputPointer;\n        }\n        else {\n          nextByte = *(byte *)((long)inputPointer + 1);\n          if ((nextByte & 0xc0) == 0x80) {\n            outputPointer2 = outputPointer;\n            if ((currentByte & 0x20) == 0) {\n              switch(displayOption) {\n              case 1:\n                optionValue = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                counter = 2;\n                goto LAB_00102917;\n              case 4:\n                isTerminal = isatty(1);\n                if (isTerminal == 0) {\n                  nextByte = *(byte *)((long)inputPointer + 1);\n                }\n                else {\n                  *(undefined *)(outputPointer + 1) = 0;\n                  *outputPointer = 0x6d37343b31335b1b;\n                  nextByte = *(byte *)((long)inputPointer + 1);\n                  outputPointer2 = outputPointer + 1;\n                }\n              case 2:\n                optionValue = 2;\n                sprintf((char *)outputPointer2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)inputPointer >> 2 & 7),\n                        (ulong)((*(byte *)inputPointer & 3) << 6 | nextByte & 0x3f));\n                outputPointer2 = (undefined8 *)((long)outputPointer2 + 6);\n                goto LAB_00102a27;\n              default:\n                optionValue = 2;\n              }\n            }\n            else {\n              nextByte = *(byte *)((long)inputPointer + 2);\n              if ((nextByte & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((currentByte & 0x10) == 0) {\n                switch(displayOption) {\n                case 1:\n                  optionValue = 3;\nLAB_00102a62:\n                  for (bytesWritten = (ulong)optionValue; bytesWritten != 0; bytesWritten = bytesWritten - 1) {\n                    *(undefined *)outputPointer2 = *(undefined *)inputPointer;\n                    inputPointer = (undefined8 *)((long)inputPointer + (ulong)bVar15 * -2 + 1);\n                    outputPointer2 = (undefined8 *)((long)outputPointer2 + (ulong)bVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  counter = 3;\nLAB_00102917:\n                  bracketValue = 0x7b;\n                  if (displayOption == 3) {\n                    bracketValue = 0x3c;\n                  }\n                  sprintf((char *)outputPointer,\"%c\",bracketValue);\n                  *(undefined *)((long)outputPointer + 3) = 0;\n                  outputPointer2 = (undefined8 *)(counter + (long)inputPointer);\n                  *(undefined2 *)((long)outputPointer + 1) = 0x7830;\n                  concatenatedString = (char *)((long)outputPointer + 3);\n                  do {\n                    stringPtr = concatenatedString;\n                    currentByte = *(byte *)inputPointer;\n                    inputPointer = (undefined8 *)((long)inputPointer + 1);\n                    sprintf(stringPtr,\"%02x\",(ulong)currentByte);\n                    concatenatedString = stringPtr + 2;\n                  } while (inputPointer != outputPointer2);\n                  bracketValue = 0x7d;\n                  if (displayOption == 3) {\n                    bracketValue = 0x3e;\n                  }\n                  optionValue = (uint)counter;\n                  sprintf(stringPtr + 2,\"%c\",bracketValue);\n                  outputPointer2 = (undefined8 *)(stringPtr + 3);\n                  break;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal == 0) {\n                    nextByte = *(byte *)((long)inputPointer + 2);\n                  }\n                  else {\n                    *(undefined *)(outputPointer + 1) = 0;\n                    *outputPointer = 0x6d37343b31335b1b;\n                    nextByte = *(byte *)((long)inputPointer + 2);\n                    outputPointer2 = outputPointer + 1;\n                  }\n                case 2:\n                  optionValue = 3;\n                  sprintf((char *)outputPointer2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)inputPointer & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)inputPointer + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)inputPointer + 1) & 3) << 6 | nextByte & 0x3f));\n                  outputPointer2 = (undefined8 *)((long)outputPointer2 + 6);\nLAB_00102a27:\n                  if ((displayOption == 4) && (isTerminal = isatty(1), isTerminal != 0)) {\n                    *(undefined4 *)outputPointer2 = 0x6d305b1b;\n                    outputPointer2 = (undefined8 *)((long)outputPointer2 + 4);\n                    *(undefined *)outputPointer2 = 0;\n                  }\n                  break;\n                default:\n                  optionValue = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)inputPointer + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(displayOption) {\n                case 1:\n                  optionValue = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  counter = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal != 0) {\n                    *(undefined *)(outputPointer + 1) = 0;\n                    *outputPointer = 0x6d37343b31335b1b;\n                    outputPointer2 = outputPointer + 1;\n                  }\n                case 2:\n                  optionValue = 4;\n                  isTerminal = sprintf((char *)outputPointer2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)inputPointer & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPointer + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)inputPointer + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)inputPointer + 2) >> 2 & 0xfU));\n                  outputPointer2 = (undefined8 *)((long)outputPointer2 + (long)isTerminal);\n                  goto LAB_00102a27;\n                default:\n                  optionValue = 4;\n                }\n              }\n            }\n            bytesWritten = (ulong)(uint)((int)outputPointer2 - (int)outputPointer);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)outputPointer = currentByte;\n            optionValue = 1;\n            bytesWritten = 1;\n          }\n          outputPointer = (undefined8 *)((long)outputPointer + bytesWritten);\n          inputPointer = (undefined8 *)((long)nextInputPointer + (ulong)(optionValue - 1));\n        }\n      }\n      else {\n        *(undefined *)outputPointer = 0x5e;\n        *(byte *)((long)outputPointer + 1) = currentByte + 0x40;\n        outputPointer = (undefined8 *)((long)outputPointer + 2);\n        inputPointer = nextInputPointer;\n      }\n    }\n    *(undefined *)outputPointer = 0;\n  }\nLAB_0010485e:\n  outputPointer = (undefined8 *)0x0;\n  if ((((unaff_RBP != 0) && (*(long *)(unaff_RBP + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((concatenatedString = (char *)(**(code **)(*(long *)(currentStackFrame + 8) + 0x220))\n                                  (currentStackFrame,*(long *)(unaff_RBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), concatenatedString != (char *)0x0 &&\n      (*concatenatedString != '\\0')))) {\n    concatenationPointer = &DAT_001071e0;\n    if ((additionalOption._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaff_RBP + 0x10) + 0x20) != 0x10c2a8)) {\n      concatenationPointer = &DAT_001071df;\n    }\n    outputPointer = (undefined8 *)reconcat(0,inputString,concatenationPointer,concatenatedString,0);\n    inputString = outputPointer;\n  }\n  printf(formatString,inputString);\n  if (unaff_R12 != (undefined *)0x0) {\n    *unaff_R12 = 0x40;\n  }\n  free(outputPointer);\n  return;\n}\n\n",
            "called": [
                "free",
                "xmalloc",
                "isatty",
                "sprintf",
                "strlen",
                "FUN_001047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "display_unicode_characters_0010268b"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_inverse_00103bec",
                "in_RAX": "input_value",
                "iVar1": "forward_value",
                "auVar2": "inverse_result"
            },
            "code": "\nundefined  [16] calculate_inverse_00103bec(void)\n\n{\n  int forward_value;\n  undefined8 input_value;\n  undefined inverse_result [16];\n  \n  forward_value = numeric_forward();\n  inverse_result._0_4_ = -forward_value;\n  inverse_result._4_4_ = 0;\n  inverse_result._8_8_ = input_value;\n  return inverse_result;\n}\n\n",
            "called": [
                "numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_inverse_00103bec"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "formatString",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *formatString,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,formatString,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fflush",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_0010c208": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c208",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c208"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_demangled_string_00102739",
                "unaff_R13": "string_ptr",
                "unaff_R15": "elf_base",
                "do_demangle": "demangle_flag",
                "unicode_display": "unicode_flag",
                "unaff_RBP": "stack_frame",
                "unaff_R14": "format_string",
                "puVar12": "buffer_ptr",
                "uVar10": "escape_char",
                "__ptr": "result_ptr",
                "bVar15": "flag",
                "__s": "buffer_ptr",
                "bVar2": "byte_val1",
                "bVar3": "byte_val2",
                "iVar4": "returnValue",
                "lVar13": "count",
                "uVar14": "length",
                "uVar9": "size",
                "sVar5": "string_length",
                "puVar1": "ptr1",
                "puVar7": "ptr2",
                "puVar11": "version_ptr",
                "pcVar6": "at_ptr",
                "pcVar8": "result_str",
                "in_stack_00000038": "format_entry"
            },
            "code": "\nvoid print_demangled_string_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte_val1;\n  byte byte_val2;\n  int returnValue;\n  size_t string_length;\n  char *at_ptr;\n  undefined8 *ptr2;\n  char *result_str;\n  undefined8 *result_ptr;\n  ulong size;\n  undefined8 escape_char;\n  undefined *version_ptr;\n  long stack_frame;\n  undefined8 *buffer_ptr;\n  undefined8 *string_ptr;\n  long count;\n  uint length;\n  char *format_string;\n  long elf_base;\n  byte flag;\n  char *buffer_ptr;\n  undefined8 format_entry;\n  \n  flag = 0;\n  buffer_ptr = string_ptr;\n  if (*(int *)(*(long *)(elf_base + 8) + 8) != 5) {\n    if (demangle_flag != 0) {\n      at_ptr = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    at_ptr = (char *)0x0;\n    if (unicode_flag == 0) {\nLAB_00104794:\n      result_ptr = (undefined8 *)0x0;\n    }\n    else {\n      result_ptr = (undefined8 *)0x0;\n      if (string_ptr != (undefined8 *)0x0) goto LAB_0010269d;\n      result_ptr = (undefined8 *)0x0;\n      string_ptr = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  at_ptr = strchr((char *)string_ptr,0x40);\n  if (at_ptr == (char *)0x0) {\n    if (demangle_flag != 0) goto LAB_0010482b;\n    if (unicode_flag == 0) {\n      if (stack_frame == 0) {\n        result_ptr = (undefined8 *)0x0;\n        printf(format_string);\n      }\n      else {\n        if (*(long *)(stack_frame + 0x10) != 0) {\n          print_and_free_memory_001047d0();\n          return;\n        }\n        result_ptr = (undefined8 *)0x0;\n        printf(format_string);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    buffer_ptr = string_ptr;\n    result_ptr = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte_val1 = *(byte *)buffer_ptr;\n      if (byte_val1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte_val1 * 2] & 2) == 0) &&\n            (buffer_ptr = (undefined8 *)((long)buffer_ptr + 1), byte_val1 < 0xc0));\n    string_length = strlen((char *)string_ptr);\n    buffer_ptr = buffer_8;\n    if (buffer_len_9 < string_length * 9) {\n      free(buffer_8);\n      string_length = strlen((char *)string_ptr);\n      buffer_len_9 = string_length * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      buffer_ptr = buffer_8;\n    }\n    while( true ) {\n      ptr2 = buffer_8;\n      byte_val1 = *(byte *)string_ptr;\n      ptr1 = (undefined8 *)((long)string_ptr + 1);\n      if (byte_val1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte_val1 * 2] & 2) == 0) {\n        if ((byte_val1 < 0xc0) || (unicode_flag == 0)) {\n          *(byte *)buffer_ptr = byte_val1;\n          buffer_ptr = (undefined8 *)((long)buffer_ptr + 1);\n          string_ptr = ptr1;\n        }\n        else {\n          byte_val2 = *(byte *)((long)string_ptr + 1);\n          if ((byte_val2 & 0xc0) == 0x80) {\n            ptr2 = buffer_ptr;\n            if ((byte_val1 & 0x20) == 0) {\n              switch(unicode_flag) {\n              case 1:\n                length = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                count = 2;\n                goto LAB_00102917;\n              case 4:\n                returnValue = isatty(1);\n                if (returnValue == 0) {\n                  byte_val2 = *(byte *)((long)string_ptr + 1);\n                }\n                else {\n                  *(undefined *)(buffer_ptr + 1) = 0;\n                  *buffer_ptr = 0x6d37343b31335b1b;\n                  byte_val2 = *(byte *)((long)string_ptr + 1);\n                  ptr2 = buffer_ptr + 1;\n                }\n              case 2:\n                length = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)string_ptr >> 2 & 7)\n                        ,(ulong)((*(byte *)string_ptr & 3) << 6 | byte_val2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                length = 2;\n              }\n            }\n            else {\n              byte_val2 = *(byte *)((long)string_ptr + 2);\n              if ((byte_val2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte_val1 & 0x10) == 0) {\n                switch(unicode_flag) {\n                case 1:\n                  length = 3;\nLAB_00102a62:\n                  for (size = (ulong)length; size != 0; size = size - 1) {\n                    *(undefined *)ptr2 = *(undefined *)string_ptr;\n                    string_ptr = (undefined8 *)((long)string_ptr + (ulong)flag * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)flag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  count = 3;\nLAB_00102917:\n                  escape_char = 0x7b;\n                  if (unicode_flag == 3) {\n                    escape_char = 0x3c;\n                  }\n                  sprintf((char *)buffer_ptr,\"%c\",escape_char);\n                  *(undefined *)((long)buffer_ptr + 3) = 0;\n                  ptr2 = (undefined8 *)(count + (long)string_ptr);\n                  *(undefined2 *)((long)buffer_ptr + 1) = 0x7830;\n                  result_str = (char *)((long)buffer_ptr + 3);\n                  do {\n                    buffer_ptr = result_str;\n                    byte_val1 = *(byte *)string_ptr;\n                    string_ptr = (undefined8 *)((long)string_ptr + 1);\n                    sprintf(buffer_ptr,\"%02x\",(ulong)byte_val1);\n                    result_str = buffer_ptr + 2;\n                  } while (string_ptr != ptr2);\n                  escape_char = 0x7d;\n                  if (unicode_flag == 3) {\n                    escape_char = 0x3e;\n                  }\n                  length = (uint)count;\n                  sprintf(buffer_ptr + 2,\"%c\",escape_char);\n                  ptr2 = (undefined8 *)(buffer_ptr + 3);\n                  break;\n                case 4:\n                  returnValue = isatty(1);\n                  if (returnValue == 0) {\n                    byte_val2 = *(byte *)((long)string_ptr + 2);\n                  }\n                  else {\n                    *(undefined *)(buffer_ptr + 1) = 0;\n                    *buffer_ptr = 0x6d37343b31335b1b;\n                    byte_val2 = *(byte *)((long)string_ptr + 2);\n                    ptr2 = buffer_ptr + 1;\n                  }\n                case 2:\n                  length = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)string_ptr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)string_ptr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)string_ptr + 1) & 3) << 6 | byte_val2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((unicode_flag == 4) && (returnValue = isatty(1), returnValue != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  length = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)string_ptr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_flag) {\n                case 1:\n                  length = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  count = 4;\n                  goto LAB_00102917;\n                case 4:\n                  returnValue = isatty(1);\n                  if (returnValue != 0) {\n                    *(undefined *)(buffer_ptr + 1) = 0;\n                    *buffer_ptr = 0x6d37343b31335b1b;\n                    ptr2 = buffer_ptr + 1;\n                  }\n                case 2:\n                  length = 4;\n                  returnValue = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)string_ptr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)string_ptr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)string_ptr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)string_ptr + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)returnValue);\n                  goto LAB_00102a27;\n                default:\n                  length = 4;\n                }\n              }\n            }\n            size = (ulong)(uint)((int)ptr2 - (int)buffer_ptr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)buffer_ptr = byte_val1;\n            length = 1;\n            size = 1;\n          }\n          buffer_ptr = (undefined8 *)((long)buffer_ptr + size);\n          string_ptr = (undefined8 *)((long)ptr1 + (ulong)(length - 1));\n        }\n      }\n      else {\n        *(undefined *)buffer_ptr = 0x5e;\n        *(byte *)((long)buffer_ptr + 1) = byte_val1 + 0x40;\n        buffer_ptr = (undefined8 *)((long)buffer_ptr + 2);\n        string_ptr = ptr1;\n      }\n    }\n    *(undefined *)buffer_ptr = 0;\n    string_ptr = ptr2;\n  }\n  else {\n    *at_ptr = '\\0';\n    if (demangle_flag == 0) {\n      if (unicode_flag == 0) goto LAB_00104794;\n      result_ptr = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)string_ptr == '\\0') ||\n       (buffer_ptr = (undefined8 *)bfd_demangle(), buffer_ptr == (undefined8 *)0x0)) {\n      if (unicode_flag != 0) goto LAB_00102698;\n      result_ptr = (undefined8 *)0x0;\n    }\n    else {\n      string_ptr = buffer_ptr;\n      result_ptr = buffer_ptr;\n      if (unicode_flag != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((stack_frame != 0) && (*(long *)(stack_frame + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((result_str = (char *)(**(code **)(*(long *)(elf_base + 8) + 0x220))\n                                  (elf_base,*(long *)(stack_frame + 0x10),0,\n                                   (long)&stack0x00000038 + 7), result_str != (char *)0x0 &&\n      (*result_str != '\\0')))) {\n    version_ptr = &DAT_001071e0;\n    if ((format_entry._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(stack_frame + 0x10) + 0x20) != 0x10c2a8)) {\n      version_ptr = &DAT_001071df;\n    }\n    result_ptr = (undefined8 *)reconcat(result_ptr,string_ptr,version_ptr,result_str,0);\n    string_ptr = result_ptr;\n  }\n  printf(format_string,string_ptr);\n  if (at_ptr != (char *)0x0) {\n    *at_ptr = '@';\n  }\nLAB_001047ba:\n  free(result_ptr);\n  return;\n}\n\n",
            "called": [
                "bfd_demangle",
                "strchr",
                "printf",
                "FUN_001047d0",
                "print_symname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "print_symname"
            ],
            "imported": false,
            "current_name": "print_demangled_string_00102739"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "check_dynamic_compatibility_00105050",
                "param_1": "inputFile1",
                "param_2": "inputFile2",
                "__s": "file1Content",
                "__s_00": "file2Content",
                "lVar3": "file1Header",
                "uVar2": "file2Header",
                "lVar9": "file1Status",
                "lVar10": "file2Status",
                "uVar11": "comparisonResult",
                "uVar12": "offset2",
                "uVar13": "offset1",
                "uVar14": "endOfFile1",
                "uVar15": "sortOption",
                "uVar4": "isFunkyFormat",
                "pcVar7": "searchResult1",
                "pcVar8": "searchResult2",
                "sVar5": "file1Length",
                "sVar6": "file2Length",
                "bVar16": "isFile1Newer",
                "unaff_R13": "localVariable1"
            },
            "code": "\nulong checkDynamicCompatibility_00105050(undefined8 inputFile1,undefined8 inputFile2)\n\n{\n  char cVar1;\n  ulong file2Header;\n  char *file1Content;\n  char *file2Content;\n  long file1Header;\n  uint isFunkyFormat;\n  size_t file1Length;\n  size_t file2Length;\n  char *searchResult1;\n  char *searchResult2;\n  long file1Status;\n  long file2Status;\n  ulong comparisonResult;\n  ulong offset2;\n  ulong offset1;\n  ulong endOfFile1;\n  undefined8 sortOption;\n  long localVariable1;\n  bool isFile1Newer;\n  \n  file1Status = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,inputFile1,sort_x);\n  comparisonResult = (ulong)sort_dynamic;\n  file2Status = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,comparisonResult,inputFile2,sort_y);\n  if ((file1Status != 0) && (file2Status != 0)) {\n    file1Header = *(long *)(file2Status + 0x20);\n    if (*(long *)(file1Status + 0x20) == 0x10c2a8) {\n      comparisonResult = 0xffffffff;\n      if (file1Header == 0x10c2a8) {\nLAB_001050fa:\n        comparisonResult = non_numeric_forward(inputFile1,inputFile2);\n        return comparisonResult;\n      }\n    }\n    else if (file1Header == 0x10c2a8) {\n      comparisonResult = 1;\n    }\n    else {\n      offset1 = *(long *)(file1Status + 0x10) + *(long *)(*(long *)(file1Status + 0x20) + 0x30);\n      comparisonResult = *(long *)(file2Status + 0x10) + *(long *)(file1Header + 0x30);\n      if (offset1 == comparisonResult) goto LAB_001050fa;\n      comparisonResult = (ulong)(-(uint)(offset1 < comparisonResult) | 1);\n    }\n    return comparisonResult;\n  }\n  sortOption = *sort_bfd;\n  bfd_fatal();\n  file1Status = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sortOption,sort_x);\n  file2Status = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,comparisonResult,sort_y);\n  if ((file1Status == 0) || (localVariable1 = file2Status, file2Status == 0)) {\n    file2Status = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(file1Status + 0x20) == 0x10c2a8) || (*(long *)(file2Status + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  offset1 = *(ulong *)(*(long *)(file1Status + 0x20) + 0x30);\n  file2Header = *(ulong *)(*(long *)(file2Status + 0x20) + 0x30);\n  endOfFile1 = *(long *)(file1Status + 0x10) + offset1;\n  offset2 = *(long *)(localVariable1 + 0x10) + file2Header;\n  isFile1Newer = endOfFile1 < offset2;\n  if ((endOfFile1 != offset2) || (isFile1Newer = offset1 < file2Header, offset1 != file2Header)) {\n    return (ulong)(-(uint)isFile1Newer | 1);\n  }\n  file1Content = *(char **)(file1Status + 8);\n  file2Content = *(char **)(localVariable1 + 8);\n  file1Length = strlen(file1Content);\n  file2Length = strlen(file2Content);\n  searchResult1 = strstr(file1Content,\"gnu_compiled\");\n  if (searchResult1 == (char *)0x0) {\n    searchResult2 = strstr(file1Content,\"gcc2_compiled\");\n    searchResult1 = strstr(file2Content,\"gnu_compiled\");\n    if ((searchResult1 == (char *)0x0) && (searchResult1 = strstr(file2Content,\"gcc2_compiled\"), searchResult1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (searchResult2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    searchResult1 = strstr(file2Content,\"gnu_compiled\");\n    if (searchResult1 == (char *)0x0) {\n      searchResult2 = strstr(file2Content,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (searchResult2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  isFunkyFormat = *(uint *)(localVariable1 + 0x18) & 0x4000;\n  if ((*(byte *)(file1Status + 0x19) & 0x40) == 0) {\n    if ((file1Length < 3) || (file1Content[file1Length - 2] != '.')) {\n      if (isFunkyFormat != 0) {\n        return 1;\n      }\n      if ((file2Length < 3) || (file2Content[file2Length - 2] != '.')) goto LAB_00103202;\n      isFile1Newer = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = file1Content[file1Length - 1];\n    isFile1Newer = cVar1 == 'o' || cVar1 == 'a';\n    if (isFunkyFormat == 0) {\n      if ((file2Length < 3) || (file2Content[file2Length - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (isFunkyFormat != 0) goto LAB_00103202;\n    if (file2Length < 3) {\n      return 0xffffffff;\n    }\n    if (file2Content[file2Length - 2] != '.') {\n      return 0xffffffff;\n    }\n    isFile1Newer = true;\nLAB_001031e7:\n    if ((file2Content[file2Length - 1] != 'o') && (file2Content[file2Length - 1] != 'a')) {\n      if (isFile1Newer) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isFile1Newer) {\n    return 1;\n  }\nLAB_00103202:\n  comparisonResult = non_numeric_forward(sortOption,comparisonResult);\n  return comparisonResult;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "numeric_forward.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "numeric_reverse"
            ],
            "imported": false,
            "current_name": "check_dynamic_compatibility_00105050"
        },
        "FUN_0010c168": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c168",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010c168"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "extract_and_sort_symbols_001049c0",
                "pcVar1": "symbol",
                "pcVar2": "sortFunction",
                "cVar3": "flag",
                "iVar4": "comparisonResult",
                "uVar5": "isMatch",
                "uVar6": "errorMessage",
                "lVar7": "length",
                "puVar8": "pointer",
                "lVar9": "size",
                "unaff_RBX": "symbols",
                "unaff_RBP": "parameters",
                "puVar10": "result",
                "unaff_R12": "numberOfBuckets",
                "unaff_R13": "currentSymbol",
                "unaff_R14": "bucketSize",
                "unaff_R15": "sortedSymbols",
                "bVar16": "dynamicSort",
                "bVar17": "bucketIndex",
                "unaff_retaddr": "returnAddress",
                "uVar18": "isDynamic",
                "in_stack_00000008": "objectType",
                "in_stack_00000010": "sortedSymbols",
                "in_stack_00000018": "numberOfSymbols",
                "in_stack_00000038": "numberOfBuckets",
                "in_stack_00000040": "allocatedMemory",
                "in_stack_00000048": "unsortedSymbols",
                "sort_dynamic": "isDynamicSortEnabled",
                "sort_bfd": "bfdHandle",
                "sort_x": "tempSymbol",
                "sort_y": "sortedSymbol",
                "sort_by_size": "sortBySize",
                "sorters": "comparisonFunctions",
                "reverse_sort": "reverseSort",
                "sort_numerically": "numericalSort",
                "defined_only": "filterDefinedOnly",
                "external_only": "filterExternalOnly",
                "non_weak": "filterNonWeak",
                "undefined_only": "filterUndefinedOnly",
                "print_debug_syms": "printDebugSymbols",
                "no_sort": "noSort"
            },
            "code": "\nvoid extractAndSortSymbols_001049c0(void)\n\n{\n  char *symbol;\n  code *sortFunction;\n  char flag;\n  int comparisonResult;\n  uint isMatch;\n  undefined8 errorMessage;\n  long length;\n  undefined8 *pointer;\n  long size;\n  undefined8 *result;\n  undefined8 *symbols;\n  undefined8 *__ptr;\n  undefined8 *parameters;\n  undefined8 *puVar11;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *numberOfBuckets;\n  undefined8 *currentSymbol;\n  undefined8 *bucketSize;\n  undefined8 *sortedSymbols;\n  bool dynamicSort;\n  byte bucketIndex;\n  ulong returnAddress;\n  ulong isDynamic;\n  undefined8 objectType;\n  undefined8 *sortedSymbols;\n  undefined8 *numberOfSymbols;\n  undefined8 numberOfBuckets;\n  void *allocatedMemory;\n  undefined8 *unsortedSymbols;\n  \n  bucketIndex = 0;\n  do {\n    symbols = (undefined8 *)((long)symbols + (long)bucketSize);\nLAB_001049c3:\n    do {\n      do {\n        currentSymbol = (undefined8 *)((long)currentSymbol + (long)bucketSize);\n        puVar15 = numberOfBuckets;\n        puVar12 = parameters;\n        if (numberOfBuckets <= currentSymbol) goto LAB_00104b15;\nLAB_001049cf:\n        pointer = (undefined8 *)\n                 (**(code **)(parameters[1] + 0x270))\n                           (parameters,returnAddress & 0xffffffff,currentSymbol,sortedSymbols);\n        puVar11 = parameters;\n        puVar12 = currentSymbol;\n        puVar15 = sortedSymbols;\n        if (pointer == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbol = (char *)pointer[1];\n        if (((symbol == (char *)0x0) || (*symbol != '_')) || (symbol[1] != '_')) {\nLAB_00104a03:\n          if (filterUndefinedOnly == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isMatch = (uint)(pointer[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isMatch != 0) goto LAB_00104a2d;\n          currentSymbol = (undefined8 *)((long)currentSymbol + (long)bucketSize);\n          puVar15 = numberOfBuckets;\n          puVar12 = parameters;\n          if (numberOfBuckets <= currentSymbol) {\nLAB_00104b15:\n            symbols = (undefined8 *)((long)symbols - (long)numberOfSymbols);\n            if (bucketSize == (undefined8 *)0x8) {\n              size = puVar12[1];\n              puVar11 = (undefined8 *)((long)symbols + 7);\n              if (-1 < (long)symbols) {\n                puVar11 = symbols;\n              }\n              in_R8 = (undefined8 *)(ulong)noSort;\n              sortFunction = *(code **)(size + 0x208);\n              puVar11 = (undefined8 *)((long)puVar11 >> 3);\n            }\n            else {\n              puVar11 = (undefined8 *)((long)symbols / (long)bucketSize);\n              size = puVar12[1];\n              sortFunction = *(code **)(size + 0x208);\n            }\n            parameters = puVar12;\n            if (noSort == 0) {\n              isDynamicSortEnabled = dynamic != 0;\n              bfdHandle = puVar12;\n              tempSymbol = (undefined8 *)(*sortFunction)(puVar12);\n              sortedSymbol = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n              symbols = unsortedSymbols;\n              if ((tempSymbol == (undefined8 *)0x0) || (sortedSymbol == (undefined8 *)0x0)) {\n                bfd_fatal(*puVar12);\n                __ptr = sortedSymbols;\n                goto LAB_00102d8e;\n              }\n              numberOfBuckets = (undefined8 *)(ulong)numberOfBuckets._4_4_;\n              if (sortBySize != 0) {\n                isDynamic = (ulong)(dynamic != 0);\n                qsort(unsortedSymbols,(size_t)puVar11,(size_t)numberOfBuckets,size_forward1);\n                puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n                puVar13 = tempSymbol;\n                parameters = sortedSymbol;\n                bucketSize = (undefined8 *)((long)puVar11 * (long)numberOfBuckets + (long)symbols);\n                pointer = tempSymbol;\n                in_R9 = sortedSymbol;\n                if (bucketSize <= symbols) goto LAB_00102ec2;\n                puVar11 = (undefined8 *)\n                          (**(code **)(puVar12[1] + 0x270))(puVar12,isDynamic & 0xffffffff,symbols);\n                __ptr = symbols;\n                in_R8 = numberOfBuckets;\n                sortedSymbols = puVar15;\n                if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(unsortedSymbols,(size_t)puVar11,(size_t)numberOfBuckets,\n                    *(__compar_fn_t *)\n                     (comparisonFunctions + ((long)reverseSort + (long)numericalSort * 2) * 8));\n              size = puVar12[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              puVar12 = unsortedSymbols;\n              pointer = (undefined8 *)(ulong)sortBySize;\n              bucketSize = (undefined8 *)(ulong)(dynamic != 0);\n              if (sortBySize != 0) {\n                puVar15 = (undefined8 *)(**(code **)(size + 0x208))(parameters);\n                if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n                symbols = __ptr + (long)puVar11 * 2;\n                puVar11 = __ptr;\n                do {\n                  if (symbols <= puVar11) {\nLAB_00104c75:\n                    if (allocatedMemory == (void *)0x0) {\n                      free(unsortedSymbols);\n                      free(__ptr);\n                      return;\n                    }\n                    free(allocatedMemory);\n                    free(unsortedSymbols);\n                    free(__ptr);\n                    return;\n                  }\n                  pointer = puVar15;\n                  size = (**(code **)(parameters[1] + 0x270))(parameters,bucketSize,*puVar11);\n                  if (size == 0) {\n                    bfd_fatal(*parameters,0);\nLAB_00102ed2:\n                    puVar12 = (undefined8 *)*parameters;\n                    bfd_fatal();\n                    puVar13 = in_R8;\n                    puVar14 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  puVar12 = puVar11 + 1;\n                  puVar11 = puVar11 + 2;\n                  print_symbol(parameters,size,*puVar12,objectType);\n                } while( true );\n              }\n              numberOfBuckets = (undefined8 *)(ulong)numberOfBuckets._4_4_;\n              sortedSymbols = (undefined8 *)(**(code **)(size + 0x208))(parameters);\n              if (sortedSymbols == (undefined8 *)0x0) {\n                bfd_fatal(*parameters);\n                puVar12 = numberOfBuckets;\n                if (dynamic == 0) {\n                  size = (**(code **)(parameters[1] + 0x350))(parameters);\n                  puVar11 = unsortedSymbols;\n                  puVar15 = numberOfBuckets;\n                  if (size < 1) {\n                    pointer = (undefined8 *)0x0;\n                    symbols = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    symbols = (undefined8 *)xmalloc();\n                    pointer = (undefined8 *)(**(code **)(parameters[1] + 0x358))(parameters,symbols);\n                    puVar12 = puVar15;\n                    if ((long)pointer < 0) {\n                      puVar12 = (undefined8 *)*parameters;\n                      puVar11 = (undefined8 *)bfd_fatal(puVar12,puVar15);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer = numberOfBuckets;\n                  symbols = unsortedSymbols;\n                  puVar11 = (undefined8 *)0x0;\n                  puVar15 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = symbols;\n                size = (**(code **)(parameters[1] + 0x360))(parameters,puVar15,puVar11,pointer);\n                numberOfBuckets = puVar12;\n                if (0 < size) {\n                  numberOfBuckets = (undefined8 *)((long)puVar12 + size);\n                  unsortedSymbols = (undefined8 *)xrealloc(unsortedSymbols);\n                  length = 0;\n                  do {\n                    unsortedSymbols[(long)((long)puVar12 + length)] =\n                         (void *)(length * 0x30 + (long)allocatedMemory);\n                    length = length + 1;\n                  } while (size != length);\n                  unsortedSymbols[(long)((long)puVar12 + size)] = 0;\n                }\n                if ((dynamic == 0) && (symbols != (undefined8 *)0x0)) {\n                  free(symbols);\n                }\n                if ((*(byte *)((long)parameters + 0x4a) & 0x10) != 0) {\n                  symbols = (undefined8 *)*parameters;\n                  report_plugin_err = '\\0';\n                  errorMessage = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(errorMessage);\n                }\n                bucketSize = (undefined8 *)(ulong)numberOfBuckets._4_4_;\n                dynamicSort = dynamic != 0;\n                puVar11 = (undefined8 *)(ulong)dynamicSort;\n                pointer = unsortedSymbols;\n                numberOfSymbols = unsortedSymbols;\n                sortedSymbols = (undefined8 *)(**(code **)(parameters[1] + 0x208))(parameters);\n                if (sortedSymbols != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                puVar11 = (undefined8 *)((long)puVar11 * (long)numberOfBuckets + (long)puVar12);\n                symbols = puVar12;\n                while( true ) {\n                  if (puVar11 <= symbols) goto LAB_00104c75;\n                  pointer = sortedSymbols;\n                  size = (**(code **)(parameters[1] + 0x270))(parameters,bucketSize,symbols);\n                  if (size == 0) break;\n                  symbols = (undefined8 *)((long)symbols + (long)numberOfBuckets);\n                  print_symbol(parameters,size,0,objectType);\n                }\n                bfd_fatal(*parameters,0);\n              }\n              bfd_fatal(*parameters);\n              puVar12 = parameters;\n              puVar15 = sortedSymbols;\nLAB_00102eb0:\n              bfd_fatal(*puVar11);\nLAB_00102eb9:\n              bfd_fatal(*puVar12);\nLAB_00102ec2:\n              puVar11 = (undefined8 *)0x0;\n              __ptr = symbols;\n              in_R8 = numberOfBuckets;\n              puVar13 = pointer;\n              parameters = in_R9;\n              sortedSymbols = puVar15;\nLAB_00104e35:\n              while (in_R9 = puVar13, __ptr < bucketSize) {\n                symbols = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (symbols < bucketSize) {\n                  pointer = parameters;\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  result = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                  if (result == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = puVar14;\n                    in_R8 = puVar13;\n                    puVar12 = (undefined8 *)*puVar12;\n                    result = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    pointer = (undefined8 *)puVar11[4];\n                    if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  size = puVar11[2];\nLAB_00102ee7:\n                  if (pointer == (undefined8 *)result[4]) {\n                    size = result[2] - size;\n                    puVar13 = parameters;\n                    puVar14 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  size = pointer[8] - size;\n                  puVar13 = parameters;\n                  puVar14 = __ptr;\n                }\n                else {\n                  pointer = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    size = puVar11[2];\n                    result = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  result = (undefined8 *)0x0;\nLAB_00104e95:\n                  puVar13 = parameters;\n                  puVar14 = __ptr;\n                  if (*(int *)(puVar12[1] + 8) == 5) {\n                    size = puVar11[7];\n                  }\n                  else {\n                    size = puVar11[2];\n                    if ((*(byte *)((long)pointer + 0x25) & 0x10) == 0) {\n                      if (symbols < bucketSize) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                puVar11 = result;\n                __ptr = symbols;\n                parameters = in_R9;\n                if (size != 0) {\n                  *puVar15 = puVar14;\n                  puVar15[1] = size;\n                  puVar15 = puVar15 + 2;\n                }\n              }\n              puVar11 = (undefined8 *)((long)puVar15 - (long)sortedSymbols >> 4);\n              qsort(sortedSymbols,(size_t)puVar11,0x10,size_forward2);\n              size = puVar12[1];\n              symbols = __ptr;\n              parameters = puVar12;\n              __ptr = sortedSymbols;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(symbol + (symbol[2] == '_'),\"__gnu_lto_slim\");\n        sortedSymbols = pointer;\n        if (comparisonResult == 0) {\n          if (report_plugin_err != '\\0') {\n            sortedSymbols = (undefined8 *)*parameters;\n            report_plugin_err = '\\0';\n            errorMessage = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(errorMessage,sortedSymbols);\n          }\n          goto LAB_00104a03;\n        }\n        if (filterUndefinedOnly != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (filterExternalOnly == 0) {\n          if (filterNonWeak == 0) goto LAB_00104a2d;\n          isMatch = (*(uint *)(pointer + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer + 3) & 0x800082) == 0) && (pointer[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (printDebugSymbols != 0) {\n          if (sortBySize == 0) goto LAB_00104a53;\nextract_and_sort_symbols_00104d5b:\n          if ((pointer[4] != 0x10c2a8) && (pointer[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer + 3) & 4) != 0);\n      if (sortBySize != 0) goto extract_and_sort_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)filterDefinedOnly;\n      if (filterDefinedOnly == 0) {\n        flag = (**(code **)(parameters[1] + 0x230))(parameters);\n        if (flag != '\\0') {\n          display_rel_file_cold();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer[4] == 0x10c2a8);\nLAB_00104cba:\n    flag = (**(code **)(parameters[1] + 0x230))(parameters);\n    if (flag != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\nLAB_00104a7b:\n    if (symbols != currentSymbol) {\n      if (bucketSize == (undefined8 *)0x8) {\n        *symbols = *currentSymbol;\n        extractAndSortSymbols_001049c0();\n        return;\n      }\n      for (; bucketSize != (undefined8 *)0x0; bucketSize = (undefined8 *)((long)bucketSize + -1)) {\n        *(undefined *)symbols = *(undefined *)currentSymbol;\n        currentSymbol = (undefined8 *)((long)currentSymbol + (ulong)bucketIndex * -2 + 1);\n        symbols = (undefined8 *)((long)symbols + (ulong)bucketIndex * -2 + 1);\n      }\n      extractAndSortSymbols_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)numberOfBuckets * (long)bucketSize);\n  numberOfBuckets = (undefined8 *)((long)numberOfSymbols + (long)puVar15);\n  symbols = numberOfSymbols;\n  puVar12 = parameters;\n  if (numberOfSymbols < numberOfBuckets) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)dynamicSort;\n  currentSymbol = numberOfSymbols;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "extract_and_sort_symbols_001049c0"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_information_00103ca0",
                "param_1": "file",
                "param_2": "exitCode",
                "lVar1": "programName",
                "iVar2": "totalLength",
                "iVar3": "length",
                "pcVar4": "message",
                "lVar5": "index",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "ptr",
                "ppcVar8": "demangler",
                "pcVar9": "delimiter",
                "local_3c": "localVariable"
            },
            "code": "\nvoid printSymbolInformation_00103ca0(FILE *file,int exitCode)\n\n{\n  long programName;\n  int totalLength;\n  int length;\n  char *message;\n  long index;\n  size_t stringLength;\n  long *targetList;\n  long *ptr;\n  char **demangler;\n  char *delimiter;\n  uint localVariable;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(file,message,programName);\n  message = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*message == ' ') {\n    programName = 1;\n    do {\n      index = programName;\n      programName = index + 1;\n    } while (message[index] == ' ');\n    localVariable = (uint)index;\n  }\n  else {\n    localVariable = 0;\n  }\n  totalLength = fprintf(file,\"%s\",message);\n  delimiter = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    stringLength = strlen(*demangler);\n    if (0x4a < (long)totalLength + stringLength) {\n      fprintf(file,\"%.1s\\n\",delimiter);\n      delimiter = \"\";\n      totalLength = fprintf(file,\"%.*s\",(ulong)localVariable,message);\n    }\n    length = fprintf(file,\"%s\\\"%s\\\"\",delimiter,*demangler);\n    totalLength = totalLength + length;\n    delimiter = \", \";\n  }\n  fputc(10,file);\n  message = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(file,message);\n  programName = program_name;\n  if (program_name == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    programName = *ptr;\n    ptr = ptr + 1;\n    if (programName == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "free",
                "fputc",
                "exit",
                "bfd_target_list",
                "fseek",
                "usage.cold",
                "fprintf",
                "strlen",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_symbol_information_00103ca0"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "extract_and_sort_symbols_00104d5b",
                "pcVar1": "symbolName",
                "pcVar2": "symbolHandler",
                "cVar3": "checkResult",
                "iVar4": "comparisonResult",
                "uVar5": "isPlugin",
                "uVar6": "errorString",
                "puVar7": "sizeResult",
                "lVar8": "symbolAddress",
                "lVar9": "symbolSize",
                "in_RCX": "symbolArray",
                "unaff_RBX": "targetAddress",
                "unaff_RBP": "symbolArrayEnd",
                "__ptr": "temporaryPointer",
                "puVar10": "sortX",
                "unaff_R13": "currentSymbol",
                "unaff_R12": "symbolNum",
                "unaff_R15": "symbolArrayElement",
                "puVar11": "sortY",
                "puVar12": "targetArray",
                "puVar13": "index1",
                "in_R8": "index2",
                "in_R9": "index3",
                "puVar14": "symbolFilter",
                "puVar15": "tempArray",
                "unaff_R14": "symbolStep",
                "bVar16": "isDynamic",
                "bVar17": "byteResult",
                "unaff_retaddr": "returnAddress",
                "uVar18": "boolResult",
                "param_7": "additionalParam",
                "param_8": "tempArray2",
                "param_9": "arraySize",
                "param_13": "relFile",
                "param_14": "relSymbols"
            },
            "code": "\nvoid extractAndSortSymbols_00104d5b(void)\n\n{\n  char *symbolName;\n  code *symbolHandler;\n  char checkResult;\n  int comparisonResult;\n  uint isPlugin;\n  undefined8 errorString;\n  undefined8 *sizeResult;\n  long symbolAddress;\n  long symbolSize;\n  undefined8 *sortX;\n  undefined8 *symbolArray;\n  undefined8 *targetAddress;\n  undefined8 *temporaryPointer;\n  undefined8 *sortY;\n  undefined8 *symbolArrayEnd;\n  undefined8 *targetArray;\n  undefined8 *index2;\n  undefined8 *index1;\n  undefined8 *index3;\n  undefined8 *symbolFilter;\n  undefined8 *tempArray;\n  undefined8 *symbolNum;\n  undefined8 *currentSymbol;\n  undefined8 *symbolStep;\n  undefined8 *symbolArrayElement;\n  bool isDynamic;\n  byte byteResult;\n  ulong returnAddress;\n  ulong boolResult;\n  undefined8 additionalParam;\n  undefined8 *tempArray2;\n  undefined8 *arraySize;\n  undefined8 in_stack_00000038;\n  void *relFile;\n  undefined8 *relSymbols;\n  \n  byteResult = 0;\n  do {\n    if ((symbolArray[4] != 0x10c2a8) && (symbolArray[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      currentSymbol = (undefined8 *)((long)currentSymbol + (long)symbolStep);\n      tempArray = symbolNum;\n      targetArray = symbolArrayEnd;\n      if (symbolNum <= currentSymbol) goto LAB_00104b15;\nLAB_001049cf:\n      symbolArray = (undefined8 *)\n               (**(code **)(symbolArrayEnd[1] + 0x270))\n                         (symbolArrayEnd,returnAddress & 0xffffffff,currentSymbol,symbolArrayElement);\n      sortY = symbolArrayEnd;\n      targetArray = currentSymbol;\n      tempArray = symbolArrayElement;\n      if (symbolArray == (undefined8 *)0x0) goto LAB_00102eb0;\n      symbolName = (char *)symbolArray[1];\n      if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n        if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        isPlugin = (uint)(symbolArray[4] == 0x10c2a8);\nLAB_00104af9:\n        if (isPlugin != 0) goto LAB_00104a2d;\n        currentSymbol = (undefined8 *)((long)currentSymbol + (long)symbolStep);\n        tempArray = symbolNum;\n        targetArray = symbolArrayEnd;\n        if (symbolNum <= currentSymbol) {\nLAB_00104b15:\n          targetAddress = (undefined8 *)((long)targetAddress - (long)arraySize);\n          if (symbolStep == (undefined8 *)0x8) {\n            symbolSize = targetArray[1];\n            sortY = (undefined8 *)((long)targetAddress + 7);\n            if (-1 < (long)targetAddress) {\n              sortY = targetAddress;\n            }\n            index2 = (undefined8 *)(ulong)no_sort;\n            symbolHandler = *(code **)(symbolSize + 0x208);\n            sortY = (undefined8 *)((long)sortY >> 3);\n          }\n          else {\n            sortY = (undefined8 *)((long)targetAddress / (long)symbolStep);\n            symbolSize = targetArray[1];\n            symbolHandler = *(code **)(symbolSize + 0x208);\n          }\n          symbolArrayEnd = targetArray;\n          if (no_sort == 0) {\n            sort_dynamic = dynamic != 0;\n            sort_bfd = targetArray;\n            sort_x = (undefined8 *)(*symbolHandler)(targetArray);\n            sort_y = (undefined8 *)(**(code **)(targetArray[1] + 0x208))(targetArray);\n            targetAddress = relSymbols;\n            if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n              bfd_fatal(*targetArray);\n              temporaryPointer = symbolArrayElement;\n              goto LAB_00102d8e;\n            }\n            symbolNum = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (sort_by_size != 0) {\n              boolResult = (ulong)(dynamic != 0);\n              qsort(relSymbols,(size_t)sortY,(size_t)symbolNum,size_forward1);\n              tempArray = (undefined8 *)xmalloc((long)sortY << 4);\n              index1 = sort_x;\n              symbolArrayEnd = sort_y;\n              symbolStep = (undefined8 *)((long)sortY * (long)symbolNum + (long)targetAddress);\n              symbolArray = sort_x;\n              index3 = sort_y;\n              if (symbolStep <= targetAddress) goto LAB_00102ec2;\n              sortY = (undefined8 *)\n                        (**(code **)(targetArray[1] + 0x270))(targetArray,boolResult & 0xffffffff,targetAddress);\n              temporaryPointer = targetAddress;\n              index2 = symbolNum;\n              tempArray2 = tempArray;\n              if (sortY == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(relSymbols,(size_t)sortY,(size_t)symbolNum,\n                  *(__compar_fn_t *)\n                   (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n            symbolSize = targetArray[1];\n          }\n          temporaryPointer = (undefined8 *)0x0;\n          do {\n            targetArray = relSymbols;\n            sizeResult = (undefined8 *)(ulong)sort_by_size;\n            symbolStep = (undefined8 *)(ulong)(dynamic != 0);\n            if (sort_by_size != 0) {\n              tempArray = (undefined8 *)(**(code **)(symbolSize + 0x208))(symbolArrayEnd);\n              if (tempArray == (undefined8 *)0x0) goto LAB_00102ed2;\n              targetAddress = temporaryPointer + (long)sortY * 2;\n              sortY = temporaryPointer;\n              do {\n                if (targetAddress <= sortY) {\nLAB_00104c75:\n                  if (relFile != (void *)0x0) {\n                    free(relFile);\n                    free(relSymbols);\n                    free(temporaryPointer);\n                    return;\n                  }\n                  free(relSymbols);\n                  free(temporaryPointer);\n                  return;\n                }\n                sizeResult = tempArray;\n                symbolSize = (**(code **)(symbolArrayEnd[1] + 0x270))(symbolArrayEnd,symbolStep,*sortY);\n                if (symbolSize == 0) {\n                  bfd_fatal(*symbolArrayEnd,0);\nLAB_00102ed2:\n                  targetArray = (undefined8 *)*symbolArrayEnd;\n                  bfd_fatal();\n                  index1 = index2;\n                  symbolFilter = index3;\n                  goto LAB_00102edb;\n                }\n                targetArray = sortY + 1;\n                sortY = sortY + 2;\n                print_symbol(symbolArrayEnd,symbolSize,*targetArray,additionalParam);\n              } while( true );\n            }\n            symbolNum = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            symbolArrayElement = (undefined8 *)(**(code **)(symbolSize + 0x208))(symbolArrayEnd);\n            if (symbolArrayElement == (undefined8 *)0x0) {\n              bfd_fatal(*symbolArrayEnd);\n              targetArray = symbolNum;\n              if (dynamic == 0) {\n                symbolSize = (**(code **)(symbolArrayEnd[1] + 0x350))(symbolArrayEnd);\n                sortY = relSymbols;\n                tempArray = symbolNum;\n                if (symbolSize < 1) {\n                  sizeResult = (undefined8 *)0x0;\n                  targetAddress = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  targetAddress = (undefined8 *)xmalloc();\n                  sizeResult = (undefined8 *)(**(code **)(symbolArrayEnd[1] + 0x358))(symbolArrayEnd,targetAddress);\n                  targetArray = tempArray;\n                  if ((long)sizeResult < 0) {\n                    targetArray = (undefined8 *)*symbolArrayEnd;\n                    sortY = (undefined8 *)bfd_fatal(targetArray,tempArray);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                sizeResult = symbolNum;\n                targetAddress = relSymbols;\n                sortY = (undefined8 *)0x0;\n                tempArray = (undefined8 *)0x0;\n              }\n              index3 = &stack0x00000040;\n              index2 = targetAddress;\n              symbolSize = (**(code **)(symbolArrayEnd[1] + 0x360))(symbolArrayEnd,tempArray,sortY,sizeResult);\n              symbolNum = targetArray;\n              if (0 < symbolSize) {\n                symbolNum = (undefined8 *)((long)targetArray + symbolSize);\n                relSymbols = (undefined8 *)xrealloc(relSymbols);\n                symbolAddress = 0;\n                do {\n                  relSymbols[(long)targetArray + symbolAddress] = (void *)(symbolAddress * 0x30 + (long)relFile);\n                  symbolAddress = symbolAddress + 1;\n                } while (symbolSize != symbolAddress);\n                relSymbols[(long)targetArray + symbolSize] = 0;\n              }\n              if ((dynamic == 0) && (targetAddress != (undefined8 *)0x0)) {\n                free(targetAddress);\n              }\n              if ((*(byte *)((long)symbolArrayEnd + 0x4a) & 0x10) != 0) {\n                targetAddress = (undefined8 *)*symbolArrayEnd;\n                report_plugin_err = '\\0';\n                errorString = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                non_fatal(errorString);\n              }\n              symbolStep = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              isDynamic = dynamic != 0;\n              sortY = (undefined8 *)(ulong)isDynamic;\n              symbolArray = relSymbols;\n              arraySize = relSymbols;\n              symbolArrayElement = (undefined8 *)(**(code **)(symbolArrayEnd[1] + 0x208))(symbolArrayEnd);\n              if (symbolArrayElement != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              sortY = (undefined8 *)((long)sortY * (long)symbolNum + (long)targetArray);\n              targetAddress = targetArray;\n              while( true ) {\n                if (sortY <= targetAddress) goto LAB_00104c75;\n                symbolArray = symbolArrayElement;\n                symbolSize = (**(code **)(symbolArrayEnd[1] + 0x270))(symbolArrayEnd,symbolStep,targetAddress);\n                if (symbolSize == 0) break;\n                targetAddress = (undefined8 *)((long)targetAddress + (long)symbolNum);\n                print_symbol(symbolArrayEnd,symbolSize,0,additionalParam);\n              }\n              bfd_fatal(*symbolArrayEnd,0);\n            }\n            bfd_fatal(*symbolArrayEnd);\n            targetArray = symbolArrayEnd;\n            tempArray = symbolArrayElement;\nLAB_00102eb0:\n            bfd_fatal(*sortY);\nLAB_00102eb9:\n            bfd_fatal(*targetArray);\nLAB_00102ec2:\n            sortY = (undefined8 *)0x0;\n            temporaryPointer = targetAddress;\n            index2 = symbolNum;\n            index1 = symbolArray;\n            symbolArrayEnd = index3;\n            tempArray2 = tempArray;\nLAB_00104e35:\n            while (index3 = index1, temporaryPointer < symbolStep) {\n              targetAddress = (undefined8 *)((long)temporaryPointer + (long)index2);\n              if (targetAddress < symbolStep) {\n                sizeResult = symbolArrayEnd;\n                index1 = index2;\n                symbolFilter = index3;\n                sortX = (undefined8 *)(**(code **)(targetArray[1] + 0x270))();\n                if (sortX == (undefined8 *)0x0) {\nLAB_00102edb:\n                  index3 = symbolFilter;\n                  index2 = index1;\n                  targetArray = (undefined8 *)*targetArray;\n                  sortX = (undefined8 *)bfd_fatal();\n                }\n                else {\n                  sizeResult = (undefined8 *)sortY[4];\n                  if ((*(uint *)(sortY + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                symbolSize = sortY[2];\nLAB_00102ee7:\n                if (sizeResult == (undefined8 *)sortX[4]) {\n                  symbolSize = sortX[2] - symbolSize;\n                  index1 = symbolArrayEnd;\n                  symbolFilter = temporaryPointer;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                symbolSize = sizeResult[8] - symbolSize;\n                index1 = symbolArrayEnd;\n                symbolFilter = temporaryPointer;\n              }\n              else {\n                sizeResult = (undefined8 *)sortY[4];\n                if ((*(uint *)(sortY + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  symbolSize = sortY[2];\n                  sortX = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                sortX = (undefined8 *)0x0;\nLAB_00104e95:\n                index1 = symbolArrayEnd;\n                symbolFilter = temporaryPointer;\n                if (*(int *)(targetArray[1] + 8) == 5) {\n                  symbolSize = sortY[7];\n                }\n                else {\n                  symbolSize = sortY[2];\n                  if ((*(byte *)((long)sizeResult + 0x25) & 0x10) == 0) {\n                    if (targetAddress < symbolStep) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              sortY = sortX;\n              temporaryPointer = targetAddress;\n              symbolArrayEnd = index3;\n              if (symbolSize != 0) {\n                *tempArray = symbolFilter;\n                tempArray[1] = symbolSize;\n                tempArray = tempArray + 2;\n              }\n            }\n            sortY = (undefined8 *)((long)tempArray - (long)tempArray2 >> 4);\n            qsort(tempArray2,(size_t)sortY,0x10,size_forward2);\n            symbolSize = targetArray[1];\n            targetAddress = temporaryPointer;\n            symbolArrayEnd = targetArray;\n            temporaryPointer = tempArray2;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      comparisonResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n      tempArray2 = symbolArray;\n      if (comparisonResult == 0) {\n        if (report_plugin_err != '\\0') {\n          tempArray2 = (undefined8 *)*symbolArrayEnd;\n          report_plugin_err = '\\0';\n          errorString = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(errorString,tempArray2);\n        }\n        goto LAB_00104a03;\n      }\n      if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (external_only == 0) {\n        if (non_weak == 0) goto LAB_00104a2d;\n        isPlugin = (*(uint *)(symbolArray + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(symbolArray + 3) & 0x800082) == 0) && (symbolArray[4] != 0x10c2a8)) &&\n         ((*(byte *)(symbolArray[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((print_debug_syms == 0) && ((*(byte *)(symbolArray + 3) & 4) != 0));\n  } while (sort_by_size != 0);\n  index3 = (undefined8 *)(ulong)defined_only;\n  if (defined_only == 0) {\n    checkResult = (**(code **)(symbolArrayEnd[1] + 0x230))(symbolArrayEnd);\n    if (checkResult != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  else {\n    if (symbolArray[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    checkResult = (**(code **)(symbolArrayEnd[1] + 0x230))(symbolArrayEnd);\n    if (checkResult != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  if (targetAddress != currentSymbol) {\n    if (symbolStep != (undefined8 *)0x8) {\n      for (; symbolStep != (undefined8 *)0x0; symbolStep = (undefined8 *)((long)symbolStep + -1)) {\n        *(undefined *)targetAddress = *(undefined *)currentSymbol;\n        currentSymbol = (undefined8 *)((long)currentSymbol + (ulong)byteResult * -2 + 1);\n        targetAddress = (undefined8 *)((long)targetAddress + (ulong)byteResult * -2 + 1);\n      }\n      extract_and_sort_symbols_001049c0();\n      return;\n    }\n    *targetAddress = *currentSymbol;\n    extract_and_sort_symbols_001049c0();\n    return;\n  }\n  targetAddress = (undefined8 *)((long)targetAddress + (long)symbolStep);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  tempArray = (undefined8 *)((long)symbolNum * (long)symbolStep);\n  symbolNum = (undefined8 *)((long)arraySize + (long)tempArray);\n  targetAddress = arraySize;\n  targetArray = symbolArrayEnd;\n  if (arraySize < symbolNum) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)isDynamic;\n  currentSymbol = arraySize;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "free",
                "non_fatal",
                "xmalloc",
                "FUN_00104d5b",
                "print_symbol",
                "size_forward2",
                "xrealloc",
                "bfd_fatal",
                "size_forward1",
                "FUN_001049c0",
                "display_rel_file.cold",
                "strcmp",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "extract_and_sort_symbols_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "report_error_message_00106300",
                "param_1": "errorCode",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "__arg": "localArg",
                "__format": "formatString",
                "local_d8": "localVar1",
                "local_d4": "localVar2",
                "local_d0": "ptrLocalVar",
                "local_c8": "ptrLocalArray",
                "local_b8": "localArray",
                "local_b0": "localVar3",
                "local_a8": "localVar4",
                "local_a0": "localVar5",
                "local_98": "localVar6",
                "local_90": "localVar7",
                "local_88": "localVar8",
                "local_78": "localVar9",
                "local_68": "localVar10",
                "local_58": "localVar11",
                "local_48": "localVar12",
                "local_38": "localVar13",
                "local_28": "localVar14",
                "local_18": "localVar15",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid reportErrorMessage_00106300(undefined4 errorCode,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 *localArg;\n  char *formatString;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *ptrLocalVar;\n  undefined *ptrLocalArray;\n  undefined localArray [8];\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined8 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  undefined4 localVar15;\n  \n  localArg = &localVar1;\n  if (flag != '\\0') {\n    localVar8 = errorCode;\n    localVar9 = arg2;\n    localVar10 = arg3;\n    localVar11 = arg4;\n    localVar12 = arg5;\n    localVar13 = arg6;\n    localVar14 = arg7;\n    localVar15 = arg8;\n  }\n  ptrLocalVar = &stack0x00000008;\n  localVar1 = 8;\n  ptrLocalArray = localArray;\n  localVar2 = 0x30;\n  localVar3 = param10;\n  localVar4 = param11;\n  localVar5 = param12;\n  localVar6 = param13;\n  localVar7 = param14;\n  report();\n  formatString = (char *)0x1;\n  xexit();\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,formatString,localArg);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "print_value.constprop.0.cold",
                "print_symbol_info_bsd",
                "main",
                "set_output_format",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "report_error_message_00106300"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_filename_00102f7b",
                "param_1": "filename",
                "filename_per_file": "use_filename_per_file",
                "filename_per_symbol": "use_filename_per_symbol"
            },
            "code": "\nvoid print_filename_00102f7b(undefined8 filename)\n\n{\n  if ((use_filename_per_file != 0) && (use_filename_per_symbol == 0)) {\n    printf(\"%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "error_msg",
                "iVar1": "error_code",
                "uVar2": "error_description",
                "in_R10": "auxiliary_info"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long error_msg)\n\n{\n  int error_code;\n  undefined8 error_description;\n  undefined8 auxiliary_info;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0) {\n    error_description = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_description = bfd_errmsg(error_code);\n  }\n  fflush(_stdout);\n  if (error_msg != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,error_msg,error_description,auxiliary_info);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,error_description,auxiliary_info);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_nonfatal.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "bfd_fatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        },
        "FUN_0010c160": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c160",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010c160"
        }
    },
    "used_tokens": 96833,
    "layers": [
        [
            "FUN_001055a0",
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00105500",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00102000",
            "FUN_00103573",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00104370",
            "FUN_00102475",
            "FUN_00105110",
            "FUN_00103a66",
            "FUN_001064b0",
            "FUN_00102739",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0",
            "FUN_00104740"
        ],
        [
            "FUN_001054d0"
        ]
    ],
    "locked_functions": []
}