{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "process_relocation_00103c00",
                "param_1": "input",
                "param_2": "address",
                "param_3": "relocation_data",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "pointer_1",
                "auVar2": "array",
                "lVar3": "length",
                "uVar4": "result_1",
                "uVar5": "result_2"
            },
            "code": "\nundefined8\nprocess_relocation_00103c00(undefined8 *input,long address,undefined (*relocation_data) [16],undefined8 param4,\n            undefined8 param5)\n\n{\n  undefined8 *pointer_1;\n  undefined array [16];\n  long length;\n  undefined8 result_1;\n  undefined8 result_2;\n  \n  **(long **)*relocation_data = address;\n  if ((*(byte *)(address + 0x24) & 4) == 0) {\n    **(undefined8 **)(*relocation_data + 8) = 0;\n    **(undefined8 **)relocation_data[1] = 0;\n  }\n  else {\n    length = bfd_get_reloc_upper_bound();\n    if (-1 < length) {\n      pointer_1 = *(undefined8 **)(*relocation_data + 8);\n      result_1 = xmalloc(length);\n      result_2 = *(undefined8 *)(relocation_data[1] + 8);\n      *pointer_1 = result_1;\n      pointer_1 = *(undefined8 **)relocation_data[1];\n      result_2 = bfd_canonicalize_reloc(input,address,**(undefined8 **)(*relocation_data + 8),result_2);\n      *pointer_1 = result_2;\n      if (-1 < **(long **)relocation_data[1]) goto LAB_00103c7c;\n    }\n    print_error_message_00106530(*input);\n  }\nLAB_00103c7c:\n  length = *(long *)(*relocation_data + 8) + 8;\n  *(long *)relocation_data[1] = *(long *)relocation_data[1] + 8;\n  array._8_4_ = (int)length;\n  array._0_8_ = *(long *)*relocation_data + 8;\n  array._12_4_ = (int)((ulong)length >> 0x20);\n  *relocation_data = array;\n  return param5;\n}\n\n",
            "called": [
                "FUN_00106530",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "process_relocation_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "cVar1": "isUndefinedSymclass",
                "uVar2": "symbolClass",
                "iVar3": "asprintfStatus",
                "plVar4": "errorMessage",
                "piVar5": "errnoLocation",
                "uVar6": "strerror",
                "lVar7": "symbolInfo",
                "bVar8": "symbolType",
                "uVar9": "maskedRax",
                "pcVar10": "symbolTypeString"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefinedSymclass;\n  ushort symbolClass;\n  int asprintfStatus;\n  long *errorMessage;\n  int *errnoLocation;\n  undefined8 strerror;\n  long symbolInfo;\n  ulong unaff_RBX;\n  byte symbolType;\n  ulong maskedRax;\n  char *symbolTypeString;\n  \n  errorMessage = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  maskedRax = unaff_RBX & 0xffffffff;\n  print_error_message_and_exit_00106300(errorMessage,maskedRax);\n  print_decompiled_code_00104740(\"%-20s|\",errorMessage,0,maskedRax);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*errorMessage + 8));\n  if (isUndefinedSymclass == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*errorMessage);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*errorMessage + 8));\n  if (*(char *)(*errorMessage + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*errorMessage + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*errorMessage + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (errorMessage[2] == 0) {\n    if (errorMessage[3] != 0) {\n      symbolInfo = *(long *)(errorMessage[3] + 0x30);\n      isUndefinedSymclass = *(char *)(symbolInfo + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        symbolTypeString = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        symbolTypeString = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfo + 0x26) == 0) {\n        symbolTypeString = \"None\";\n      }\n      else {\n        symbolClass = *(ushort *)(symbolInfo + 0x26) >> 4 & 3;\n        if (symbolClass == 2) {\n          symbolTypeString = \"Function\";\n        }\n        else if (symbolClass == 3) {\n          symbolTypeString = \"Array\";\n        }\n        else {\n          if (symbolClass != 1) {\n            free(DAT_0010b730);\n            symbolClass = *(ushort *)(symbolInfo + 0x26);\n            symbolType = *(byte *)(symbolInfo + 0x28);\n            symbolTypeString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfStatus = asprintf(&DAT_0010b730,symbolTypeString,(ulong)symbolType,(ulong)symbolClass);\n            symbolTypeString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolTypeString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolType = *(byte *)(errorMessage[2] + 0x48) & 0xf;\n    switch(symbolType) {\n    case 0:\n      symbolTypeString = \"NOTYPE\";\n      break;\n    case 1:\n      symbolTypeString = \"OBJECT\";\n      break;\n    case 2:\n      symbolTypeString = \"FUNC\";\n      break;\n    case 3:\n      symbolTypeString = \"SECTION\";\n      break;\n    case 4:\n      symbolTypeString = \"FILE\";\n      break;\n    case 5:\n      symbolTypeString = \"COMMON\";\n      break;\n    case 6:\n      symbolTypeString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolTypeString = \"<processor specific>: %d\";\n      if ((2 < symbolType - 0xd) && (symbolTypeString = \"<OS specific>: %d\", 2 < symbolType - 10)) {\n        symbolTypeString = \"<unknown>: %d\";\n      }\n      symbolTypeString = (char *)dcgettext(0,symbolTypeString,5);\n      asprintfStatus = asprintf(&DAT_0010b728,symbolTypeString,(ulong)symbolType);\n      symbolTypeString = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfStatus < 0) {\n        errnoLocation = __errno_location();\n        strerror = xstrerror(*errnoLocation);\n        print_error_message_and_exit_00106300(&DAT_0010712d,strerror);\nLAB_00103983:\n        symbolTypeString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolTypeString);\n  }\n  if (errorMessage[2] == 0) {\n    if (errorMessage[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(errorMessage[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  symbolInfo = errorMessage[2];\n  if ((symbolInfo != 0) || (symbolInfo = errorMessage[3], symbolInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_00106300",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "initialize_output_00104370",
                "param_1": "output_format",
                "param_2": "data",
                "uVar1": "errorMessage",
                "ppuVar2": "initializedData"
            },
            "code": "\nundefined ** initialize_output_00104370(undefined *output_format,undefined8 data)\n\n{\n  undefined8 errorMessage;\n  undefined **initializedData;\n  \n  switch(*output_format) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    print_error_message_and_exit_00106300(errorMessage,output_format);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    print_formatted_error_message_00106400(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    initializedData = (undefined **)initialize_data_00104397(output_format,data,3);\n    return initializedData;\n  case 0x50:\n  case 0x70:\n    initializedData = (undefined **)initialize_data_00104397(output_format,data,2);\n    return initializedData;\n  case 0x53:\n  case 0x73:\n    initializedData = (undefined **)initialize_data_00104397(output_format,data,1);\n    return initializedData;\n  }\n}\n\n",
            "called": [
                "FUN_00106300",
                "FUN_00104397",
                "caseD_4a",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "initialize_output_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00103c00",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001064b0",
                "FUN_001035a2"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatList",
                "uVar1": "dataValue",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatList)\n\n{\n  undefined8 dataValue;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  dataValue = DAT_0010b820;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,dataValue);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "fputc",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_strings_001036a7",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printStrings_001036a7(undefined8 *string1,undefined8 *string2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (string1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*string1);\n    }\n    printf(\"%s:\",*string2,param4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_strings_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "fileName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 fileName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,fileName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compiled_status_00102fc3",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "lastChar",
                "__s": "str1",
                "__s_00": "str2",
                "uVar3": "flag",
                "lVar4": "length1",
                "lVar5": "length2",
                "sVar6": "len1",
                "sVar7": "len2",
                "pcVar8": "found1",
                "pcVar9": "found2",
                "uVar10": "result",
                "uVar11": "addr2",
                "uVar12": "addr1",
                "uVar13": "ptr1",
                "unaff_R13": "ptr2",
                "bVar14": "isTrue"
            },
            "code": "\nulong checkCompiledStatus_00102fc3(undefined8 param1,undefined8 param2)\n\n{\n  char lastChar;\n  ulong uVar2;\n  char *str1;\n  char *str2;\n  uint flag;\n  long length1;\n  long length2;\n  size_t len1;\n  size_t len2;\n  char *found1;\n  char *found2;\n  ulong result;\n  ulong addr2;\n  ulong addr1;\n  undefined8 ptr1;\n  long ptr2;\n  bool isTrue;\n  \n  ptr1 = *DAT_0010b780;\n  print_error_message_00106530();\n  length1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,ptr1,DAT_0010b770);\n  length2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param2,DAT_0010b768);\n  if ((length1 == 0) || (ptr2 = length2, length2 == 0)) {\n    length2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(length1 + 0x20) == 0x10c2a8) || (*(long *)(length2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(length1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(length2 + 0x20) + 0x30);\n  addr1 = *(long *)(length1 + 0x10) + result;\n  addr2 = *(long *)(ptr2 + 0x10) + uVar2;\n  isTrue = addr1 < addr2;\n  if ((addr1 != addr2) || (isTrue = result < uVar2, result != uVar2)) {\n    return (ulong)(-(uint)isTrue | 1);\n  }\n  str1 = *(char **)(length1 + 8);\n  str2 = *(char **)(ptr2 + 8);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  found1 = strstr(str1,\"gnu_compiled\");\n  if (found1 == (char *)0x0) {\n    found2 = strstr(str1,\"gcc2_compiled\");\n    found1 = strstr(str2,\"gnu_compiled\");\n    if ((found1 == (char *)0x0) && (found1 = strstr(str2,\"gcc2_compiled\"), found1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (found2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    found1 = strstr(str2,\"gnu_compiled\");\n    if (found1 == (char *)0x0) {\n      found2 = strstr(str2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (found2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(ptr2 + 0x18) & 0x4000;\n  if ((*(byte *)(length1 + 0x19) & 0x40) == 0) {\n    if ((len1 < 3) || (str1[len1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((len2 < 3) || (str2[len2 - 2] != '.')) goto LAB_00103202;\n      isTrue = false;\n      goto LAB_001031e7;\n    }\n    lastChar = str1[len1 - 1];\n    isTrue = lastChar == 'o' || lastChar == 'a';\n    if (flag == 0) {\n      if ((len2 < 3) || (str2[len2 - 2] != '.')) {\n        if (lastChar == 'o' || lastChar == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (len2 < 3) {\n      return 0xffffffff;\n    }\n    if (str2[len2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isTrue = true;\nLAB_001031e7:\n    if ((str2[len2 - 1] != 'o') && (str2[len2 - 1] != 'a')) {\n      if (isTrue) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isTrue) {\n    return 1;\n  }\nLAB_00103202:\n  result = compare_strings_00104fa0(ptr1,param2);\n  return result;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_compiled_status_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbolData",
                "param_2": "param2",
                "cVar1": "isUndefined",
                "uVar2": "sectionType",
                "iVar3": "asprintfRetVal",
                "piVar4": "errnoLocation",
                "uVar5": "xstrerrorRetVal",
                "lVar6": "sectionData",
                "bVar7": "sectionFlag",
                "pcVar8": "sectionName"
            },
            "code": "\nvoid printSymbolInfo_00103729(long *symbolData,undefined8 param2)\n\n{\n  char isUndefined;\n  ushort sectionType;\n  int asprintfRetVal;\n  int *errnoLocation;\n  undefined8 xstrerrorRetVal;\n  long sectionData;\n  byte sectionFlag;\n  char *sectionName;\n  \n  print_decompiled_code_00104740(\"%-20s|\",symbolData,0,param2);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolData + 8));\n  if (isUndefined == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*symbolData);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolData + 8));\n  if (*(char *)(*symbolData + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolData + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolData + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolData[2] == 0) {\n    if (symbolData[3] != 0) {\n      sectionData = *(long *)(symbolData[3] + 0x30);\n      isUndefined = *(char *)(sectionData + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        sectionName = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        sectionName = \"Block\";\n      }\n      else if (*(ushort *)(sectionData + 0x26) == 0) {\n        sectionName = \"None\";\n      }\n      else {\n        sectionType = *(ushort *)(sectionData + 0x26) >> 4 & 3;\n        if (sectionType == 2) {\n          sectionName = \"Function\";\n        }\n        else if (sectionType == 3) {\n          sectionName = \"Array\";\n        }\n        else {\n          if (sectionType != 1) {\n            free(DAT_0010b730);\n            sectionType = *(ushort *)(sectionData + 0x26);\n            sectionFlag = *(byte *)(sectionData + 0x28);\n            sectionName = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfRetVal = asprintf(&DAT_0010b730,sectionName,(ulong)sectionFlag,(ulong)sectionType);\n            sectionName = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          sectionName = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    sectionFlag = *(byte *)(symbolData[2] + 0x48) & 0xf;\n    switch(sectionFlag) {\n    case 0:\n      sectionName = \"NOTYPE\";\n      break;\n    case 1:\n      sectionName = \"OBJECT\";\n      break;\n    case 2:\n      sectionName = \"FUNC\";\n      break;\n    case 3:\n      sectionName = \"SECTION\";\n      break;\n    case 4:\n      sectionName = \"FILE\";\n      break;\n    case 5:\n      sectionName = \"COMMON\";\n      break;\n    case 6:\n      sectionName = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      sectionName = \"<processor specific>: %d\";\n      if ((2 < sectionFlag - 0xd) && (sectionName = \"<OS specific>: %d\", 2 < sectionFlag - 10)) {\n        sectionName = \"<unknown>: %d\";\n      }\n      sectionName = (char *)dcgettext(0,sectionName,5);\n      asprintfRetVal = asprintf(&DAT_0010b728,sectionName,(ulong)sectionFlag);\n      sectionName = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfRetVal < 0) {\n        errnoLocation = __errno_location();\n        xstrerrorRetVal = xstrerror(*errnoLocation);\n        print_error_message_and_exit_00106300(&DAT_0010712d,xstrerrorRetVal);\nLAB_00103983:\n        sectionName = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",sectionName);\n  }\n  if (symbolData[2] == 0) {\n    if (symbolData[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolData[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  sectionData = symbolData[2];\n  if ((sectionData != 0) || (sectionData = symbolData[3], sectionData != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(sectionData + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext",
                "free",
                "xstrerror",
                "FUN_00104740",
                "__errno_location",
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string_1",
                "param_2": "string_2"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *string_1,undefined8 *string_2,undefined8 param_3,undefined8 param_4)\n\n{\n  if (string_1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string_1);\n  }\n  printf(\"%s:\",*string_2,param_4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_relocated_sections_00105110",
                "param_1": "input_pointer",
                "param_2": "long_pointer",
                "param_3": "input_value",
                "param_4": "output_pointer",
                "__ptr": "ptr",
                "__s1": "str",
                "pplVar1": "pointer_pointer",
                "plVar2": "long_pointer",
                "lVar3": "long_value",
                "puVar4": "output_pointer",
                "cVar5": "char_value",
                "iVar6": "int_value",
                "pvVar7": "pointer_value",
                "lVar8": "long_value",
                "uVar9": "uint_value",
                "lVar10": "long_value",
                "local_b4": "uint_local",
                "local_b0": "undefined_local",
                "local_a8": "undefined_pointer",
                "local_a0": "input_value",
                "local_98": "long_pointer_local1",
                "local_90": "long_pointer_local2",
                "local_88": "pointer_local1",
                "pvStack_80": "pointer_stack1",
                "pvStack_78": "pointer_stack2",
                "pvStack_70": "pointer_stack3",
                "local_68": "undefined_local",
                "local_60": "char_local"
            },
            "code": "\n\n\nvoid print_relocated_sections_00105110(undefined8 *input_pointer,long *long_pointer,undefined8 input_value,undefined8 *output_pointer)\n\n{\n  void *ptr;\n  char *str;\n  long **pointer_pointer;\n  long *long_pointer;\n  long long_value;\n  undefined8 *output_pointer;\n  char char_value;\n  int int_value;\n  void *pointer_value;\n  long long_value;\n  uint uint_value;\n  long long_value;\n  uint uint_local;\n  undefined undefined_local [8];\n  undefined *undefined_pointer;\n  undefined8 input_value;\n  long *long_pointer_local1;\n  long *long_pointer_local2;\n  void *pointer_local1;\n  void *pointer_stack1;\n  void *pointer_stack2;\n  void *pointer_stack3;\n  undefined undefined_local [8];\n  char char_local;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == print_strings_with_colon_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (output_pointer != (undefined8 *)0x0) {\n        printf(\"%s:\",*output_pointer);\n      }\n      printf(\"%s:\",*input_pointer);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(output_pointer,input_pointer);\n  }\n  undefined_pointer = undefined_local;\n  (**(code **)(input_pointer[1] + 0x218))(input_pointer,long_pointer,undefined_pointer);\n  uint_value = *(uint *)(long_pointer + 3);\n  char_value = char_local;\n  if (((((char_local == 'i') && ((uint_value & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (char_value = *DAT_0010b7c8, (uint_value & 2) == 0)))) &&\n     (char_value = char_local, DAT_0010b7c8[1] != '\\0')) {\n    char_value = DAT_0010b7c8[1];\n  }\n  char_local = char_value;\n  input_value = input_value;\n  if ((uint_value & 0x200100) != 0) goto LAB_00103330;\n  long_value = *long_pointer;\n  int_value = *(int *)(*(long *)(long_value + 8) + 8);\n  if (((uint_value & 0x200000) == 0) && (int_value == 5)) {\n    long_pointer_local1 = long_pointer;\n    if (*(long *)(long_value + 0x110) == 0) {\n      long_pointer_local1 = (long *)0x0;\n    }\n  }\n  else {\n    long_pointer_local1 = (long *)0x0;\n    if (((int_value - 2U & 0xfffffffd) == 0) && (long_pointer_local2 = long_pointer, *(long *)(long_value + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  long_pointer_local2 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&undefined_pointer,input_pointer);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == input_pointer) {\n      output_pointer = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = output_pointer;\n      pointer_value = DAT_0010b750;\n      if (long_pointer[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == input_pointer) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_value = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uint_value < DAT_0010b748; uint_value = uint_value + 1) {\n              ptr = *(void **)((long)pointer_value + (ulong)uint_value * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(pointer_value);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(input_pointer + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          pointer_stack3 = DAT_0010b758;\n          pointer_local1 = DAT_0010b740;\n          pointer_stack1 = DAT_0010b750;\n          pointer_stack2 = DAT_0010b738;\n          bfd_map_over_sections(input_pointer,process_relocation_00103c00,&pointer_local1);\n          _DAT_0010b7b0 = input_pointer;\n        }\n        str = (char *)long_pointer[1];\n        for (uint_value = 0; uint_value < DAT_0010b748; uint_value = uint_value + 1) {\n          long_value = (ulong)uint_value * 8;\n          pointer_value = DAT_0010b738;\n          for (long_value = 0;\n              *(long *)((long)pointer_value + long_value) != long_value && long_value <= *(long *)((long)pointer_value + long_value)\n              ; long_value = long_value + 1) {\n            pointer_pointer = *(long ***)(*(long *)((long)DAT_0010b750 + long_value) + long_value * 8);\n            long_pointer = *pointer_pointer;\n            if ((((long_pointer != (long *)0x0) &&\n                 (long_value = *long_pointer, *(long *)(long_value + 0x20) == long_pointer[4])) &&\n                (*(long *)(long_value + 0x10) == long_pointer[2])) &&\n               (((int_value = strcmp(str,*(char **)(long_value + 8)), int_value == 0 &&\n                 (char_value = (**(code **)(input_pointer[1] + 0x240))\n                                    (input_pointer,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + long_value),pointer_pointer[1],\n                                     &pointer_local1,undefined_local,&uint_local,0), pointer_value = DAT_0010b738,\n                 char_value != '\\0')) && (pointer_local1 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",pointer_local1,(ulong)uint_local);\n              uint_value = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(long_pointer[4] + 0xe0) == input_pointer) {\n        char_value = (**(code **)(input_pointer[1] + 0x250))(input_pointer,DAT_0010b758,long_pointer,&pointer_local1,&uint_local);\n        if (((char_value != '\\0') ||\n            (char_value = (**(code **)(input_pointer[1] + 0x240))\n                               (input_pointer,DAT_0010b758,long_pointer[4],long_pointer[2],&pointer_local1,undefined_local,\n                                &uint_local,0), char_value != '\\0')) &&\n           ((pointer_local1 != (void *)0x0 && (uint_local != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    long_value = (**(code **)(input_pointer[1] + 0x1f8))(input_pointer);\n    if (long_value < 0) {\n      process_data_00103463(long_value);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    long_value = (**(code **)(input_pointer[1] + 0x200))(input_pointer,DAT_0010b758);\n    output_pointer = input_pointer;\n    if (-1 < long_value) goto LAB_00105288;\n    print_error_message_00106530(*input_pointer);\nLAB_00103330:\n    long_pointer_local1 = (long *)0x0;\n    long_pointer_local2 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&undefined_pointer,input_pointer);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001053c0",
                "printf",
                "FUN_001053b0",
                "FUN_00103238",
                "FUN_00106530",
                "free",
                "FUN_00103463",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_relocated_sections_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_compiled_type_00102fd2",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "cVar1": "last_char",
                "__s": "string1",
                "__s_00": "string2",
                "uVar3": "flag",
                "lVar4": "result1",
                "lVar5": "result2",
                "sVar6": "length1",
                "sVar7": "length2",
                "pcVar8": "found1",
                "pcVar9": "found2",
                "uVar10": "comparison_result",
                "uVar11": "address2",
                "uVar12": "address1",
                "unaff_R13": "address2_copy",
                "bVar13": "is_equal"
            },
            "code": "\nulong check_compiled_type_00102fd2(undefined8 pointer1,undefined8 pointer2)\n\n{\n  char last_char;\n  ulong uVar2;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result1;\n  long result2;\n  size_t length1;\n  size_t length2;\n  char *found1;\n  char *found2;\n  ulong comparison_result;\n  ulong address2;\n  ulong address1;\n  long address2_copy;\n  bool is_equal;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer1,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,pointer2,DAT_0010b768);\n  if ((result1 == 0) || (address2_copy = result2, result2 == 0)) {\n    result2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  comparison_result = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  address1 = *(long *)(result1 + 0x10) + comparison_result;\n  address2 = *(long *)(address2_copy + 0x10) + uVar2;\n  is_equal = address1 < address2;\n  if ((address1 != address2) || (is_equal = comparison_result < uVar2, comparison_result != uVar2)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(address2_copy + 8);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  found1 = strstr(string1,\"gnu_compiled\");\n  if (found1 == (char *)0x0) {\n    found2 = strstr(string1,\"gcc2_compiled\");\n    found1 = strstr(string2,\"gnu_compiled\");\n    if ((found1 == (char *)0x0) && (found1 = strstr(string2,\"gcc2_compiled\"), found1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (found2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    found1 = strstr(string2,\"gnu_compiled\");\n    if (found1 == (char *)0x0) {\n      found2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (found2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(address2_copy + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (string1[length1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    last_char = string1[length1 - 1];\n    is_equal = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((string2[length2 - 1] != 'o') && (string2[length2 - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  comparison_result = compare_strings_00104fa0(pointer1,pointer2);\n  return comparison_result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "strlen",
                "FUN_00106530",
                "strstr",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_compiled_type_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "print_and_return_error_message_00102f9f",
                "unaff_retaddr": "return_address",
                "auVar1": "result"
            },
            "code": "\nundefined  [16] print_and_return_error_message_00102f9f(void)\n\n{\n  undefined result [16];\n  undefined8 return_address;\n  \n  print_error_message_00106530(*DAT_0010b780);\n  result._8_8_ = return_address;\n  result._0_8_ = 0xffffffff;\n  return result;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "print_and_return_error_message_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103a78",
                "FUN_00103729",
                "FUN_00103abf",
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00102450",
                "FUN_001043d0",
                "FUN_001053c0",
                "FUN_00104370",
                "FUN_0010249f",
                "FUN_001048e0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_symbol_present_00103a66",
                "unaff_RBX": "symbol_address"
            },
            "code": "\nvoid check_if_symbol_present_00103a66(void)\n\n{\n  long symbol_address;\n  \n  if (*(long *)(symbol_address + 8) != 0) {\n    print_symbol_information_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_if_symbol_present_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "unaff_RBX": "symbol_info_ptr",
                "lVar1": "symbol_address",
                "putchar": "print_character",
                "print_symbol_info_001054d0": "print_symbol_info_details",
                "printf": "print_formatted",
                "print_decompiled_code_00104740": "print_decompiled_code"
            },
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *symbol_info_ptr;\n  long symbol_address;\n  \n  if (symbol_info_ptr[2] == 0) {\n    symbol_address = symbol_info_ptr[1];\n  }\n  else {\n    symbol_address = *(long *)(symbol_info_ptr[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    putchar(0x20);\n    if (symbol_info_ptr[2] == 0) {\n      symbol_address = symbol_info_ptr[1];\n    }\n    else {\n      symbol_address = *(long *)(symbol_info_ptr[2] + 0x38);\n    }\n    print_symbol_info_001035a2_details(symbol_address);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info_ptr + 8));\n  if (*(char *)(*symbol_info_ptr + 8) != '-') {\n    print_decompiled_code(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol_info_ptr + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info_ptr + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_info_ptr + 0x20));\n  print_decompiled_code(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "FUN_001054d0",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "process_data_00103463",
                "unaff_R12": "errorString",
                "unaff_R13": "functionPtr",
                "unaff_R15": "currentData",
                "param_8": "counter",
                "param_10": "value",
                "in_stack_00000050": "lineNumber",
                "print_error_message_00106530": "printErrorMessage",
                "putc": "printNewLine"
            },
            "code": "\n\n\nvoid processData_00103463(void)\n\n{\n  long *plVar1;\n  long lVar2;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  char *errorString;\n  undefined8 *functionPtr;\n  long lVar6;\n  long currentData;\n  undefined8 counter;\n  ulong value;\n  long lineNumber;\n  \n  printErrorMessage(*functionPtr);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    lVar5 = DAT_0010b738;\n    for (lVar6 = 0; plVar1 = (long *)(lVar5 + (ulong)counter._4_4_ * 8),\n        *plVar1 != lVar6 && lVar6 <= *plVar1; lVar6 = lVar6 + 1) {\n      plVar1 = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + lVar6 * 8);\n      if ((((plVar1 != (long *)0x0) &&\n           (lVar2 = *plVar1, *(long *)(lVar2 + 0x20) == *(long *)(currentData + 0x20))) &&\n          (*(long *)(lVar2 + 0x10) == *(long *)(currentData + 0x10))) &&\n         (((iVar4 = strcmp(errorString,*(char **)(lVar2 + 8)), iVar4 == 0 &&\n           (cVar3 = (**(code **)(functionPtr[1] + 0x240))(), lVar5 = DAT_0010b738, cVar3 != '\\0')) &&\n          (lineNumber != 0)))) {\n        printf(\"\\t%s:%u\",lineNumber,value >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "process_data_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_data_00104397",
                "param_1": "dataPointer1",
                "param_2": "dataPointer2",
                "param_3": "value"
            },
            "code": "\nvoid initializeData_00104397(undefined8 dataPointer1,undefined8 dataPointer2,int value)\n\n{\n  DAT_0010b7c0 = value;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)value * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "FUN_00104370",
                "caseD_4a"
            ],
            "imported": false,
            "current_name": "initialize_data_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00103729",
                "FUN_00103ca0",
                "FUN_00103238",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_001047d0",
                "FUN_0010268b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "initialize_architecture_00104670",
                "param_1": "architectureData",
                "iVar1": "size",
                "pcVar2": "substring",
                "puVar3": "concatenatedString",
                "pcVar4": "archType"
            },
            "code": "\nvoid initializeArchitecture_00104670(long architectureData)\n\n{\n  int size;\n  char *substring;\n  undefined *concatenatedString;\n  char *archType;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    archType = **(char ***)(architectureData + 8);\n    substring = strstr(archType,\"64\");\n    size = 0x40;\n    if (substring == (char *)0x0) {\n      size = strcmp(archType,\"mmo\");\n      size = (-(uint)(size == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = size;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    archType = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    archType = \"08\";\n  }\n  else {\n    archType = \"016\";\n  }\n  concatenatedString = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        concatenatedString = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,archType,0,0);\n          return;\n        }\n        concatenatedString = &DAT_001071cd;\n      }\n    }\n    else {\n      concatenatedString = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,archType,concatenatedString,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001025f5",
                "bfd_get_arch_size",
                "free",
                "strstr",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "initialize_architecture_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "FUNC_001048e0"
            },
            "code": "\n\n\nvoid FUNC_001048e0(ulong **param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 ulong **param_5,ulong **param_6)\n\n{\n  byte bVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  long lVar7;\n  ulong **ppuVar8;\n  ulong **ppuVar9;\n  long lVar10;\n  ulong *puVar11;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool bVar19;\n  byte bVar20;\n  ulong **ppuStack_78;\n  uint local_4c;\n  ulong *local_48;\n  ulong **local_40 [2];\n  \n  bVar20 = 0;\n  local_48 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)param_1 + 0x44) & 0x10) != 0)) {\n    ppuVar9 = (ulong **)&local_4c;\n    ppuVar8 = (ulong **)(*(code *)param_1[1][0x4d])(param_1,DAT_0010b80c != 0,local_40);\n    if ((long)ppuVar8 < 0) {\n      if ((DAT_0010b80c != 0) && (iVar4 = bfd_get_error(), iVar4 == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        puVar11 = *param_1;\n        uVar6 = dcgettext(0,\"%s: no symbols\",5);\n        print_formatted_error_message_00106400(uVar6,puVar11);\n        return;\n      }\n      print_error_message_00106530(*param_1);\n      goto LAB_00102e9e;\n    }\n    if (ppuVar8 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (local_4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      bVar1 = *(byte *)((long)param_1 + 0x4a);\n      ppuVar13 = param_1;\n      do {\n        if ((bVar1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          DAT_0010b230 = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_formatted_error_message_00106400(uVar6);\n        }\n        ppuVar14 = local_40[0];\n        unaff_R14 = (ulong **)(ulong)local_4c;\n        bVar19 = DAT_0010b80c != 0;\n        ppuVar9 = local_40[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)bVar19;\n        param_1 = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)ppuVar8 * (long)unaff_R14);\n        ppuVar8 = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        param_1 = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (param_1 < ppuVar8) {\n          do {\n            ppuVar9 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,bVar19,param_1,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (ppuVar9 == (ulong **)0x0) goto LAB_00102eb0;\n            puVar11 = ppuVar9[1];\n            ppuVar17 = ppuVar8;\n            if (((puVar11 == (ulong *)0x0) || (*(char *)puVar11 != '_')) ||\n               (*(char *)((long)puVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uVar5 = (uint)(ppuVar9[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uVar5 == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(ppuVar9 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n                  param_6 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    cVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,ppuVar9);\n                    if (cVar3 != '\\0') {\n                      process_lto_object_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (ppuVar9[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n                if ((ppuVar9[4] == (ulong *)0x10c2a8) || (ppuVar9[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                cVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,ppuVar9);\n                if (cVar3 != '\\0') {\n                  process_lto_object_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != param_1) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *param_1;\n                    handle_lto_object_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)param_1;\n                    param_1 = (ulong **)((long)param_1 + (ulong)bVar20 * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)bVar20 * -2 + 1);\n                  }\n                  handle_lto_object_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              iVar4 = strcmp((char *)((long)puVar11 + (ulong)(*(char *)((long)puVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              ppuStack_78 = ppuVar9;\n              if (iVar4 == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  ppuStack_78 = (ulong **)*ppuVar13;\n                  DAT_0010b230 = '\\0';\n                  uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_formatted_error_message_00106400(uVar6,ppuStack_78);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uVar5 = (*(uint *)(ppuVar9 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(ppuVar9 + 3) & 0x800082) != 0) || (ppuVar9[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)ppuVar9[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            param_1 = (ulong **)((long)param_1 + (long)unaff_R14);\n            if (ppuVar8 <= param_1) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          puVar11 = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          param_5 = (ulong **)(ulong)DAT_0010b800;\n          pcVar2 = (code *)puVar11[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          puVar11 = ppuVar13[1];\n          pcVar2 = (code *)puVar11[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = ppuVar13;\n        DAT_0010b770 = (ulong **)(*pcVar2)(ppuVar13);\n        DAT_0010b768 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = local_40[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          ppuVar8 = (ulong **)(ulong)local_4c;\n          if (DAT_0010b7f8 != 0) {\n            bVar19 = DAT_0010b80c != 0;\n            qsort(local_40[0],(size_t)ppuVar14,(size_t)ppuVar8,check_compiled_type_00102fd2);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = DAT_0010b770;\n            param_1 = DAT_0010b768;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)ppuVar8 + (long)ppuVar12);\n            ppuVar9 = DAT_0010b770;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            param_6 = DAT_0010b768;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,bVar19,ppuVar12);\n            param_5 = ppuVar8;\n            ppuStack_78 = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(local_40[0],(size_t)ppuVar14,(size_t)ppuVar8,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          puVar11 = ppuVar13[1];\nLAB_00104be2:\n          param_1 = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        print_error_message_00106530(*ppuVar13);\n        param_1 = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          ppuVar8 = (ulong **)(*(code *)param_1[1][0x6b])(param_1,unaff_RBX);\n          ppuVar9 = ppuVar17;\n          if (-1 < (long)ppuVar8) break;\n          ppuVar13 = (ulong **)*param_1;\n          ppuVar14 = (ulong **)print_error_message_00106530(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          puVar11 = ppuVar14[2];\n          ppuVar9 = (ulong **)0x0;\nLAB_00102dc4:\n          puVar11 = (ulong *)((long)ppuVar8[8] - (long)puVar11);\n          ppuVar18 = param_1;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = ppuVar9;\n          ppuVar12 = unaff_RBX;\n          param_1 = param_6;\n          if (puVar11 != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = puVar11;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          param_6 = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)ppuStack_78 >> 4);\n          qsort(ppuStack_78,(size_t)ppuVar14,0x10,compare_and_execute_00103533);\n          puVar11 = ppuVar13[1];\n          param_1 = ppuVar13;\n          ppuVar18 = ppuStack_78;\nLAB_00104be5:\n          unaff_RBX = local_40[0];\n          ppuVar8 = (ulong **)(ulong)DAT_0010b7f8;\n          unaff_R14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            ppuVar17 = (ulong **)(*(code *)puVar11[0x41])(param_1);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          ppuVar8 = (ulong **)(ulong)local_4c;\n          unaff_R15 = (ulong **)(*(code *)puVar11[0x41])(param_1);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)ppuVar8 + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          print_error_message_00106530(*param_1);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          ppuVar9 = ppuVar8;\n          if (DAT_0010b80c != 0) {\n            unaff_RBX = local_40[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          lVar10 = (*(code *)param_1[1][0x6a])(param_1);\n          ppuVar14 = local_40[0];\n          ppuVar17 = ppuVar8;\n          ppuVar12 = unaff_R15;\n          if (lVar10 < 1) {\n            ppuVar8 = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        param_6 = &local_48;\n        param_5 = unaff_RBX;\n        lVar10 = (*(code *)param_1[1][0x6c])(param_1,ppuVar17,ppuVar14,ppuVar8);\n        ppuVar8 = ppuVar9;\n        if (0 < lVar10) {\n          ppuVar8 = (ulong **)((long)ppuVar9 + lVar10);\n          local_40[0] = (ulong **)xrealloc(local_40[0]);\n          lVar7 = 0;\n          do {\n            local_40[0][(long)ppuVar9 + lVar7] = local_48 + lVar7 * 6;\n            lVar7 = lVar7 + 1;\n          } while (lVar10 != lVar7);\n          local_40[0][(long)ppuVar9 + lVar10] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        bVar1 = *(byte *)((long)param_1 + 0x4a);\n        ppuVar13 = param_1;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    puVar11 = *param_1;\n    uVar6 = dcgettext(0,\"%s: no symbols\",5);\n    print_formatted_error_message_00106400(uVar6,puVar11);\n  }\n  return;\ncode_r0x00104b01:\n  param_1 = (ulong **)((long)param_1 + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)param_5);\n  if (unaff_R14 <= unaff_RBX) {\n    ppuVar8 = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    ppuVar9 = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = param_1;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      puVar11 = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    puVar11 = ppuVar14[2];\n    if ((*(byte *)((long)ppuVar8 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  ppuVar8 = param_1;\n  ppuVar15 = param_5;\n  ppuVar16 = param_6;\n  ppuVar9 = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (ppuVar9 == (ulong **)0x0) goto LAB_00102edb;\n  ppuVar8 = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (local_48 == (ulong *)0x0) {\n      free(local_40[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(local_48);\n    free(local_40[0]);\n    free(ppuVar18);\n    return;\n  }\n  ppuVar8 = ppuVar17;\n  lVar10 = (*(code *)param_1[1][0x4e])(param_1,unaff_R14,*ppuVar14);\n  if (lVar10 == 0) goto LAB_00102ec9;\n  ppuVar8 = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  print_relocated_sections_00105110(param_1,lVar10,*ppuVar8,param_2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  print_error_message_00106530(*param_1,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*param_1;\n  print_error_message_00106530();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = param_5;\n  ppuVar16 = param_6;\nLAB_00102edb:\n  param_6 = ppuVar16;\n  param_5 = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  ppuVar9 = (ulong **)print_error_message_00106530();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  puVar11 = ppuVar14[2];\nLAB_00102ee7:\n  if (ppuVar8 != (ulong **)ppuVar9[4]) goto LAB_00102dc4;\n  puVar11 = (ulong *)((long)ppuVar9[2] - (long)puVar11);\n  ppuVar18 = param_1;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (ppuVar9 = unaff_R15, lVar10 = (*(code *)param_1[1][0x4e])(param_1,unaff_R14,unaff_RBX),\n        lVar10 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)ppuVar8);\n    print_relocated_sections_00105110(param_1,lVar10,0,param_2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  print_error_message_00106530(*param_1);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  print_error_message_00106530(*param_1);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  print_error_message_00106530(*ppuVar13);\n  ppuVar13 = param_1;\nLAB_00102eb9:\n  print_error_message_00106530(*ppuVar13);\n  param_1 = param_6;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  param_5 = ppuVar8;\n  ppuVar18 = ppuVar9;\n  ppuStack_78 = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106530",
                "FUN_00106400"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "FUNC_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001063a0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_external_function_00102020"
            },
            "code": "\nvoid executeExternalFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_external_function_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001063a0",
                "FUN_00103b5d",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_message_if_flag_set_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printMessageIfFlagSet_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_message_if_flag_set_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  initialize_data_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "process_and_print_sections_00103238",
                "__ptr": "currentSection",
                "__s1": "sectionName",
                "plVar1": "sectionEntry",
                "lVar2": "sectionEntryValue",
                "cVar3": "result",
                "iVar4": "comparisonResult",
                "param_10": "paramValue",
                "param_12": "sectionAddress",
                "unaff_RBX": "sectionArray",
                "pvVar5": "sectionNameArray",
                "uVar6": "index",
                "unaff_R13": "sectionCount",
                "lVar7": "sectionIndex",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid processAndPrintSections_00103238(void)\n\n{\n  long *sectionEntry;\n  void *currentSection;\n  char *sectionName;\n  long sectionEntryValue;\n  char result;\n  int comparisonResult;\n  long sectionArray;\n  void *sectionNameArray;\n  uint index;\n  long sectionCount;\n  long sectionIndex;\n  ulong paramValue;\n  void *sectionAddress;\n  \n  sectionNameArray = DAT_0010b750;\n  if (_DAT_0010b7b0 == sectionCount) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; index < DAT_0010b748; index = index + 1) {\n        currentSection = *(void **)((long)sectionNameArray + (ulong)index * 8);\n        if (currentSection != (void *)0x0) {\n          free(currentSection);\n        }\n      }\n      free(DAT_0010b740);\n      free(sectionNameArray);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(sectionCount + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  sectionAddress = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = sectionCount;\nLAB_00103296:\n  sectionName = *(char **)(sectionArray + 8);\n  index = 0;\n  do {\n    if (DAT_0010b748 <= index) {\n      putc(10,standardOutput);\n      return;\n    }\n    sectionNameArray = DAT_0010b738;\n    for (sectionIndex = 0; sectionEntry = (long *)((long)sectionNameArray + (ulong)index * 8),\n        *sectionEntry != sectionIndex && sectionIndex <= *sectionEntry; sectionIndex = sectionIndex + 1) {\n      sectionEntry = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)index * 8) + sectionIndex * 8);\n      if ((((sectionEntry != (long *)0x0) &&\n           (sectionEntryValue = *sectionEntry, *(long *)(sectionEntryValue + 0x20) == *(long *)(sectionArray + 0x20))) &&\n          (*(long *)(sectionEntryValue + 0x10) == *(long *)(sectionArray + 0x10))) &&\n         (((comparisonResult = strcmp(sectionName,*(char **)(sectionEntryValue + 8)), comparisonResult == 0 &&\n           (result = (**(code **)(*(long *)(sectionCount + 8) + 0x240))(), sectionNameArray = DAT_0010b738,\n           result != '\\0')) && (sectionAddress != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",sectionAddress,paramValue >> 0x20);\n        index = DAT_0010b748;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103c00",
                "bfd_map_over_sections",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "process_and_print_sections_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_formatted_string_001036e0",
                "param_1": "sourceText",
                "param_2": "defaultText"
            },
            "code": "\nvoid printFormattedString_001036e0(undefined8 *sourceText,undefined8 *defaultText)\n\n{\n  if (sourceText != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*sourceText);\n    return;\n  }\n  printf(\"%s: \",*defaultText);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_formatted_string_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_with_conditions_001047d0",
                "unaff_RBX": "concatenatedString",
                "unaff_R12": "flagPointer",
                "unaff_R13": "finalString",
                "unaff_R14": "formatString",
                "unaff_R15": "parameter"
            },
            "code": "\nvoid printWithConditions_001047d0(void)\n\n{\n  char *pcVar1;\n  void *concatenatedString;\n  undefined *flagPointer;\n  void *finalString;\n  char *formatString;\n  long parameter;\n  \n  if (((DAT_0010b234 != 0) &&\n      (pcVar1 = (char *)(**(code **)(*(long *)(parameter + 8) + 0x220))(), pcVar1 != (char *)0x0))\n     && (*pcVar1 != '\\0')) {\n    concatenatedString = (void *)reconcat();\n    finalString = concatenatedString;\n  }\n  printf(formatString,finalString);\n  if (flagPointer != (undefined *)0x0) {\n    *flagPointer = 0x40;\n  }\n  free(concatenatedString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_with_conditions_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "display_warning_message_0010249f",
                "uVar1": "warningMessage"
            },
            "code": "\nundefined8 displayWarningMessage_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  print_formatted_error_message_00106400(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "display_warning_message_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filename",
                "cVar1": "check_result",
                "iVar2": "status",
                "uVar3": "result",
                "piVar4": "errno_ptr",
                "uVar5": "error_msg",
                "puVar6": "bfd_handle",
                "puVar9": "archived_handle",
                "puVar10": "prev_archived_handle",
                "lVar7": "map_entry",
                "pcVar8": "error_reason",
                "local_c8": "file_stat"
            },
            "code": "\n\n\nundefined4 check_file_001043d0(char *filename)\n\n{\n  char check_result;\n  int status;\n  undefined4 result;\n  int *errno_ptr;\n  undefined8 error_msg;\n  undefined8 *bfd_handle;\n  long map_entry;\n  char *error_reason;\n  undefined8 *archived_handle;\n  undefined8 *prev_archived_handle;\n  stat file_stat;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&file_stat);\n    if (status < 0) {\nLAB_00102522:\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_formatted_error_message_00106400(error_msg,filename);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_formatted_error_message_00106400(error_msg,filename,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_formatted_error_message_00106400(error_msg,filename);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (file_stat.st_size < 0) {\n        error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        print_formatted_error_message_00106400(error_msg,filename);\n      }\n      else if (file_stat.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfd_handle = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          bfd_handle = (undefined8 *)bfd_openr(filename);\n        }\n        if (bfd_handle != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n          }\n          check_result = bfd_check_format(bfd_handle,2);\n          if (check_result == '\\0') {\n            result = bfd_check_format_matches(bfd_handle,1,&file_stat);\n            if ((char)result == '\\0') goto LAB_001025ac;\n            initialize_architecture_00104670(bfd_handle);\n            (**(code **)PTR_PTR_FUN_0010b260)(filename);\n            FUNC_001048e0(bfd_handle,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfd_handle);\n            if ((_DAT_0010b7f0 != 0) &&\n               (map_entry = bfd_get_next_mapent(bfd_handle,0xffffffffffffffff,&file_stat), map_entry != -1)) {\n              error_reason = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_reason);\n              do {\n                archived_handle = (undefined8 *)(**(code **)(bfd_handle[1] + 0x1e0))(bfd_handle,map_entry);\n                if (archived_handle == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stat.st_dev != 0) {\n                  print_decompiled_code_00104740(&DAT_0010712d,0,*(long *)file_stat.st_dev,bfd_handle);\n                  printf(\" in %s\\n\",*archived_handle);\n                }\n                map_entry = bfd_get_next_mapent(bfd_handle,map_entry,&file_stat);\n              } while (map_entry != -1);\n            }\n            archived_handle = (undefined8 *)0x0;\n            do {\n              do {\n                prev_archived_handle = archived_handle;\n                archived_handle = (undefined8 *)bfd_openr_next_archived_file(bfd_handle,prev_archived_handle);\n                if (archived_handle == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    print_error_message_00106530(*bfd_handle);\nLAB_00102516:\n                    print_error_message_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (prev_archived_handle != (undefined8 *)0x0) {\n                    bfd_close(prev_archived_handle);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                check_result = bfd_check_format_matches(archived_handle,1,&file_stat);\n                if (check_result == '\\0') {\n                  print_error_message_00106540(*archived_handle);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    print_matching_formats_00103b5d(file_stat.st_dev);\n                  }\n                }\n                else {\n                  initialize_architecture_00104670(archived_handle);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfd_handle,*archived_handle);\n                  FUNC_001048e0(archived_handle,bfd_handle);\n                }\n              } while (prev_archived_handle == (undefined8 *)0x0);\n              bfd_close(prev_archived_handle);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (prev_archived_handle != archived_handle);\n          }\nLAB_001044b4:\n          result = 1;\n          while (check_result = bfd_close(bfd_handle), check_result == '\\0') {\n            print_error_message_00106530(filename);\nLAB_001025ac:\n            print_error_message_00106540(filename);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              print_matching_formats_00103b5d(file_stat.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return result;\n        }\n        print_error_message_00106540(filename);\n      }\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_formatted_error_message_00106400(error_msg,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "printf",
                "FUN_00102670",
                "FUN_00103b5d",
                "FUN_00106530",
                "FUN_00106540",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "FUN_0010351b",
                "bfd_get_error",
                "strerror",
                "FUN_0010249f",
                "dcgettext",
                "FUN_001062d0",
                "FUN_001048e0",
                "__errno_location",
                "FUN_00106400",
                "FUN_00104740",
                "FUN_00104670",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102fd2",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "param1",
                "param_2": "param2"
            },
            "code": "\nvoid concatenateStrings_001025f5(undefined8 param1,undefined8 param2)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,param2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_strings_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_message_if_initialized_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printMessageIfInitialized_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_message_if_initialized_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00104670",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2",
                "__s1": "string1",
                "uVar1": "comparison_result",
                "lVar2": "pointer1",
                "lVar3": "pointer2"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2;\n  char *string1;\n  uint comparison_result;\n  long pointer1;\n  long pointer2;\n  \n  pointer1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  pointer2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((pointer1 == 0) || (pointer2 == 0)) {\n    print_error_message_00106530(*DAT_0010b780);\n  }\n  else {\n    string2 = *(char **)(pointer2 + 8);\n    string1 = *(char **)(pointer1 + 8);\n    if (string2 == (char *)0x0) {\n      return (uint)(string1 != (char *)0x0);\n    }\n    if (string1 != (char *)0x0) {\n      if (*string2 == '\\0') {\n        return (uint)(*string1 != '\\0');\n      }\n      if (*string1 == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1,string2);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_00102f9f",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_text_with_prefix_001064a0",
                "param_1": "prefix",
                "param_2": "text"
            },
            "code": "\nvoid printTextWithPrefix_001064a0(undefined8 *prefix,undefined8 *text)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (prefix != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*prefix);\n    return;\n  }\n  printf(\"%s: \",*text);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_text_with_prefix_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "tag",
                "iVar3": "result",
                "plVar4": "symbolData",
                "piVar5": "errnoLocation",
                "uVar6": "errorString",
                "lVar7": "categoryData",
                "uVar8": "printWidth",
                "bVar9": "symbolType",
                "uVar10": "initialPrintWidth",
                "pcVar11": "category",
                "in_R8": "unused1",
                "in_R9": "unused2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort tag;\n  int result;\n  long *symbolData;\n  int *errnoLocation;\n  undefined8 errorString;\n  long categoryData;\n  ulong printWidth;\n  byte symbolType;\n  ulong initialPrintWidth;\n  char *category;\n  undefined8 unused1;\n  undefined8 unused2;\n  \n  printWidth = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  symbolData = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  initialPrintWidth = printWidth;\n  print_error_message_and_exit_00106300(symbolData,printWidth);\n  print_decompiled_code_00104740(\"%-20s|\",symbolData,0,initialPrintWidth,unused1,unused2,printWidth);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolData + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolData);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolData + 8));\n  if (*(char *)(*symbolData + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolData + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolData + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolData[2] == 0) {\n    if (symbolData[3] != 0) {\n      categoryData = *(long *)(symbolData[3] + 0x30);\n      isUndefined = *(char *)(categoryData + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        category = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        category = \"Block\";\n      }\n      else if (*(ushort *)(categoryData + 0x26) == 0) {\n        category = \"None\";\n      }\n      else {\n        tag = *(ushort *)(categoryData + 0x26) >> 4 & 3;\n        if (tag == 2) {\n          category = \"Function\";\n        }\n        else if (tag == 3) {\n          category = \"Array\";\n        }\n        else {\n          if (tag != 1) {\n            free(DAT_0010b730);\n            tag = *(ushort *)(categoryData + 0x26);\n            symbolType = *(byte *)(categoryData + 0x28);\n            category = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&DAT_0010b730,category,(ulong)symbolType,(ulong)tag);\n            category = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          category = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolType = *(byte *)(symbolData[2] + 0x48) & 0xf;\n    switch(symbolType) {\n    case 0:\n      category = \"NOTYPE\";\n      break;\n    case 1:\n      category = \"OBJECT\";\n      break;\n    case 2:\n      category = \"FUNC\";\n      break;\n    case 3:\n      category = \"SECTION\";\n      break;\n    case 4:\n      category = \"FILE\";\n      break;\n    case 5:\n      category = \"COMMON\";\n      break;\n    case 6:\n      category = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      category = \"<processor specific>: %d\";\n      if ((2 < symbolType - 0xd) && (category = \"<OS specific>: %d\", 2 < symbolType - 10)) {\n        category = \"<unknown>: %d\";\n      }\n      category = (char *)dcgettext(0,category,5);\n      result = asprintf(&DAT_0010b728,category,(ulong)symbolType);\n      category = DAT_0010b728;\njoined_r0x00103964:\n      if (result < 0) {\n        errnoLocation = __errno_location();\n        errorString = xstrerror(*errnoLocation);\n        print_error_message_and_exit_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        category = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",category);\n  }\n  if (symbolData[2] == 0) {\n    if (symbolData[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolData[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  categoryData = symbolData[2];\n  if ((categoryData != 0) || (categoryData = symbolData[3], categoryData != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(categoryData + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_0010370a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_strings_with_colon_001053b0",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printStringsWithColon_001053b0(undefined8 *string1,undefined8 *string2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,param4);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_strings_with_colon_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "process_input_files_001055f0",
                "param_1": "numFiles",
                "param_2": "filePaths",
                "pbVar1": "bytePtr1",
                "bVar2": "byteVar2",
                "bVar3": "boolVar1",
                "bVar4": "boolVar2",
                "bVar5": "boolVar3",
                "cVar6": "charVar1",
                "bVar7": "byteVar3",
                "cVar8": "charVar2",
                "cVar9": "charVar3",
                "iVar10": "intVar1",
                "uVar11": "uintVar1",
                "iVar12": "intVar2",
                "uVar13": "uintVar2",
                "uVar14": "uintVar3",
                "__stream": "fileStream",
                "__s": "bytePtr2",
                "piVar15": "intPtr1",
                "sVar16": "sizeVar1",
                "__ptr": "bytePtr3",
                "__src": "longIntPtr1",
                "lVar17": "longVar1",
                "plVar18": "filePathsPtr",
                "plVar19": "filePathsPtr2",
                "uVar20": "undefined8Var1",
                "uVar21": "undefined8Var2",
                "pcVar22": "charPtr1",
                "pbVar23": "bytePtr4",
                "unaff_RBP": "undefinedPtr1",
                "lVar24": "longVar2",
                "pbVar25": "bytePtr5",
                "pcVar26": "charPtr2",
                "unaff_R12": "intPtr2",
                "piVar27": "intPtr3",
                "local_110": "localVar1",
                "local_10c": "localVar2",
                "local_108": "localVar3",
                "local_c8": "statStruct"
            },
            "code": "\n\n\nundefined ** processInputFiles_001055f0(int numFiles,long *filePaths)\n\n{\n  byte *bytePtr1;\n  byte byteVar2;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  char charVar1;\n  byte byteVar3;\n  char charVar2;\n  char charVar3;\n  int intVar1;\n  uint uintVar1;\n  int intVar2;\n  undefined4 uintVar2;\n  undefined4 uintVar3;\n  FILE *fileStream;\n  byte *bytePtr2;\n  int *intPtr1;\n  size_t sizeVar1;\n  byte *bytePtr3;\n  long *longIntPtr1;\n  long longVar1;\n  long *filePathsPtr;\n  long *filePathsPtr2;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  char *charPtr1;\n  byte *bytePtr4;\n  undefined **undefinedPtr1;\n  long longVar2;\n  byte *bytePtr5;\n  char *charPtr2;\n  int *intPtr2;\n  int *intPtr3;\n  int localVar1;\n  int localVar2;\n  size_t localVar3;\n  stat statStruct;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  charPtr1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *filePaths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  filePathsPtr = filePaths;\n  if (1 < numFiles) {\n    localVar2 = 2000;\n    intPtr2 = (int *)0x1;\n    localVar1 = 0;\n    do {\n      intVar2 = (int)intPtr2;\n      undefinedPtr1 = (undefined **)(long)intVar2;\n      intPtr3 = (int *)((long)undefinedPtr1 * 8);\n      if (*(char *)filePathsPtr[(long)undefinedPtr1] != '@') goto LAB_00105a70;\n      localVar2 = localVar2 + -1;\n      if (localVar2 == 0) {\n        longVar2 = *filePathsPtr;\n        charPtr2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      charPtr1 = (char *)filePathsPtr[(long)undefinedPtr1] + 1;\n      intVar1 = stat(charPtr1,&statStruct);\n      if (intVar1 < 0) {\nLAB_00105a70:\n        if (numFiles <= intVar2 + 1) break;\nLAB_00105a7a:\n        uintVar1 = intVar2 + 1;\n        localVar1 = intVar2;\n      }\n      else {\n        if ((statStruct.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        fileStream = fopen(charPtr1,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00105a70;\n        intVar1 = fseek(fileStream,0,2);\n        if (((intVar1 == -1) ||\n            (charPtr1 = (char *)ftell(fileStream), (int *)charPtr1 == (int *)0xffffffffffffffff)) ||\n           (intVar1 = fseek(fileStream,0,0), intVar1 == -1)) {\nLAB_00105ad0:\n          fclose(fileStream);\n          if (intVar2 + 1 < numFiles) goto LAB_00105a7a;\n          break;\n        }\n        bytePtr2 = (byte *)xmalloc((char *)((long)charPtr1 + 1));\n        intPtr1 = (int *)fread(bytePtr2,1,(size_t)charPtr1,fileStream);\n        if (((int *)charPtr1 != intPtr1) && (intVar1 = ferror(fileStream), intVar1 != 0)) {\n          free(bytePtr2);\n          goto LAB_00105ad0;\n        }\n        bytePtr2[(long)intPtr1] = 0;\n        byteVar3 = *bytePtr2;\n        bytePtr4 = bytePtr2;\n        if (byteVar3 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byteVar3 * 2] & 0x40) != 0) goto LAB_001057c0;\n          sizeVar1 = strlen((char *)bytePtr2);\n          bytePtr3 = (byte *)xmalloc(sizeVar1 + 1);\n          intVar1 = 0;\n          boolVar3 = false;\n          boolVar1 = false;\n          longVar2 = 0;\n          longIntPtr1 = (long *)0x0;\n          boolVar2 = false;\n          bytePtr4 = bytePtr2;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr4 * 2] & 0x40) != 0) {\n              bytePtr4 = bytePtr4 + 1;\n            }\n            if ((intVar1 == 0) || (filePathsPtr2 = longIntPtr1 + longVar2, intVar1 + -1 <= (int)longVar2)) {\n              if (longIntPtr1 == (long *)0x0) {\n                intVar1 = 8;\n                longIntPtr1 = (long *)xmalloc(0x40);\n                filePathsPtr2 = longIntPtr1 + longVar2;\n                *filePathsPtr2 = 0;\n              }\n              else {\n                intVar1 = intVar1 * 2;\n                longIntPtr1 = (long *)xrealloc(longIntPtr1,(long)intVar1 << 3);\n                filePathsPtr2 = longIntPtr1 + longVar2;\n                *filePathsPtr2 = 0;\n              }\n            }\n            byteVar3 = *bytePtr4;\n            bytePtr5 = bytePtr3;\n            while (byteVar3 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar3 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                  boolVar2 = false;\n                  boolVar3 = false;\n                  boolVar1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!boolVar2) break;\n                bytePtr4 = bytePtr4 + 1;\n                *bytePtr5 = byteVar3;\n                bytePtr5 = bytePtr5 + 1;\n                boolVar2 = false;\n                byteVar3 = *bytePtr4;\n                if (byteVar3 == 0) goto LAB_001058e0;\n              }\n              if (byteVar3 == 0x5c) {\n                boolVar2 = true;\n              }\n              else if (boolVar1) {\n                if (byteVar3 == 0x27) {\n                  boolVar1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *bytePtr5 = byteVar3;\n                  bytePtr5 = bytePtr5 + 1;\n                }\n              }\n              else if (boolVar3) {\n                if (byteVar3 != 0x22) goto LAB_00105a55;\n                boolVar3 = false;\n              }\n              else if (byteVar3 == 0x27) {\n                boolVar1 = true;\n              }\n              else {\n                if (byteVar3 != 0x22) goto LAB_00105a55;\n                boolVar3 = true;\n              }\n              bytePtr1 = bytePtr4 + 1;\n              bytePtr4 = bytePtr4 + 1;\n              byteVar3 = *bytePtr1;\n            }\nLAB_001058e0:\n            *bytePtr5 = 0;\n            longVar1 = xstrdup(bytePtr3);\n            *filePathsPtr2 = longVar1;\n            longIntPtr1[longVar2 + 1] = 0;\n            byteVar3 = *bytePtr4;\n            byteVar2 = (&_sch_istable)[(ulong)byteVar3 * 2];\n            while ((byteVar2 & 0x40) != 0) {\n              byteVar3 = bytePtr4[1];\n              bytePtr4 = bytePtr4 + 1;\n              byteVar2 = (&_sch_istable)[(ulong)byteVar3 * 2];\n            }\n            longVar2 = longVar2 + 1;\n          } while (byteVar3 != 0);\n          free(bytePtr3);\n          filePathsPtr2 = filePathsPtr;\n          if (filePaths == filePathsPtr) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        longIntPtr1 = (long *)xmalloc(8);\n        *longIntPtr1 = 0;\n        if (filePaths == filePathsPtr) {\nLAB_00105c79:\n          if (*filePathsPtr == 0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar2 = 1;\n            do {\n              intVar1 = (int)longVar2;\n              filePathsPtr2 = filePathsPtr + longVar2;\n              longVar2 = longVar2 + 1;\n            } while (*filePathsPtr2 != 0);\n          }\n          longVar1 = 0;\n          filePathsPtr2 = (long *)xmalloc((long)(intVar1 + 1) << 3);\n          longVar2 = *filePathsPtr;\n          while (longVar2 != 0) {\n            undefined8Var1 = xstrdup();\n            *(undefined8 *)((long)filePathsPtr2 + longVar1) = undefined8Var1;\n            longVar1 = longVar1 + 8;\n            longVar2 = *(long *)((long)filePathsPtr + longVar1);\n          }\n          *(undefined8 *)((long)filePathsPtr2 + longVar1) = 0;\nLAB_0010597d:\n          filePathsPtr = filePathsPtr2;\n          if (*longIntPtr1 == 0) goto LAB_00105d50;\n          charPtr1 = (char *)0x0;\n          do {\n            charPtr1 = (char *)((long)charPtr1 + 1);\n          } while (longIntPtr1[(long)charPtr1] != 0);\n          localVar3 = (long)charPtr1 * 8;\n        }\n        else {\nLAB_00105d50:\n          charPtr1 = (char *)0x0;\n          localVar3 = 0;\n        }\n        free((void *)filePathsPtr[(long)undefinedPtr1]);\n        filePathsPtr = (long *)xrealloc(filePathsPtr,(long)((long)charPtr1 + (long)numFiles + 1) * 8);\n        intVar1 = numFiles + -1 + (int)charPtr1;\n        memmove(filePathsPtr + (long)(undefined **)((long)undefinedPtr1 + (long)charPtr1),\n                filePathsPtr + 1 + (long)undefinedPtr1,(long)(numFiles - intVar2) << 3);\n        memcpy(filePathsPtr + (long)undefinedPtr1,longIntPtr1,localVar3);\n        free(longIntPtr1);\n        free(bytePtr2);\n        fclose(fileStream);\n        uintVar1 = localVar1 + 1;\n        undefinedPtr1 = (undefined **)((long)undefinedPtr1 + (long)charPtr1);\n        intPtr2 = intPtr3;\n        numFiles = intVar1;\n        if (intVar1 <= (int)uintVar1) break;\n      }\n      intPtr2 = (int *)(ulong)uintVar1;\n    } while( true );\n  }\n  intVar2 = bfd_init();\n  charPtr2 = \"fatal error: libbfd ABI mismatch\";\n  if (intVar2 != 0x118) goto LAB_00106085;\n  undefinedPtr1 = &PTR_s_debug_syms_0010b280;\n  charVar2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  charPtr1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  intPtr2 = (int *)\"x86_64-pc-linux-gnu\";\n  charVar3 = DAT_0010b23b;\n  charVar1 = DAT_0010b240;\n  uintVar3 = DAT_0010b244;\n  if (charVar2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uintVar3;\n    DAT_0010b240 = charVar1;\n    DAT_0010b23b = charVar3;\n    uintVar2 = getopt_long(numFiles,filePathsPtr,charPtr1);\n    intPtr3 = _optarg;\n    intPtr1 = (int *)charPtr1;\n    charVar3 = DAT_0010b23b;\n    charVar1 = DAT_0010b240;\n    uintVar3 = DAT_0010b244;\n    switch(uintVar2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      print_symbol_list_00103ca0(_stderr,1);\n      intPtr3 = intPtr2;\nLAB_001061d5:\n      intVar2 = strcmp((char *)intPtr3,\"l\");\n      if (intVar2 == 0) goto LAB_001061a3;\n      intVar2 = strcmp((char *)intPtr3,\"escape\");\n      intPtr2 = intPtr3;\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"e\"), intVar2 == 0)) {\n        DAT_0010b7e0 = 2;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar2 = strcmp((char *)intPtr3,\"invalid\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"i\"), intVar2 == 0)) {\n        DAT_0010b7e0 = 5;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar2 = strcmp((char *)intPtr3,\"hex\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"x\"), intVar2 == 0)) {\n        DAT_0010b7e0 = 3;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar2 = strcmp((char *)intPtr3,\"highlight\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"h\"), intVar2 == 0)) {\n        DAT_0010b7e0 = 4;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      charPtr2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      initialize_output_00104370(&DAT_00107033);\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      print_symbol_list_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      intPtr2 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        intVar2 = cplus_demangle_name_to_style();\n        intPtr1 = _optarg;\n        if (intVar2 == 0) {\n          undefined8Var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          print_error_message_and_exit_00106300(undefined8Var1,intPtr1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          charPtr1 = (char *)intPtr1;\n          charVar3 = DAT_0010b23b;\n          charVar1 = DAT_0010b240;\n          uintVar3 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          charVar3 = DAT_0010b23b;\n          charVar1 = DAT_0010b240;\n          uintVar3 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      initialize_output_00104370(\"posix\");\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      intVar2 = strcmp((char *)_optarg,\"32_64\");\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      if (intVar2 != 0) {\n        charPtr2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8Var1 = dcgettext(0,charPtr2,5);\n        print_error_message_and_exit_00106300(undefined8Var1);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      initialize_output_00104370(_optarg);\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      initialize_output_00104370(\"just-symbols\");\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      charVar3 = *(char *)_optarg;\n      intPtr2 = intPtr3;\n      charVar1 = charVar3;\n      uintVar3 = 10;\n      if (charVar3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < charVar3) {\n        if (charVar3 == 'o') {\n          uintVar3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (charVar3 == 'x') {\n          uintVar3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      charPtr2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      charVar3 = DAT_0010b23b;\n      charVar1 = DAT_0010b240;\n      uintVar3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      intVar2 = strcmp((char *)_optarg,\"default\");\n      if ((intVar2 == 0) || (intVar2 = strcmp((char *)intPtr3,\"d\"), intVar2 == 0)) {\n        DAT_0010b7e0 = 0;\n        intPtr2 = intPtr3;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n      }\n      else {\n        intVar2 = strcmp((char *)intPtr3,\"locale\");\n        if (intVar2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        intPtr2 = intPtr3;\n        charVar3 = DAT_0010b23b;\n        charVar1 = DAT_0010b240;\n        uintVar3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8Var1 = dcgettext(0,charPtr2,5);\n    print_error_message_and_exit_00106300(undefined8Var1,intPtr3);\nLAB_00105f13:\n    longVar2 = *filePathsPtr;\n    charPtr2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,charPtr2,longVar2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uintVar3 = bfd_get_error();\n  undefined8Var1 = bfd_errmsg(uintVar3);\n  undefined8Var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  print_error_message_and_exit_00106300(undefined8Var2,\"x86_64-pc-linux-gnu\",undefined8Var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byteVar3 = bytePtr4[1];\n  bytePtr4 = bytePtr4 + 1;\n  if (byteVar3 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  undefinedPtr1 = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    charPtr1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(charPtr1);\n    charPtr1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(charPtr1);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    undefined8Var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    print_formatted_error_message_00106400(undefined8Var1);\n    undefined8Var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    print_formatted_error_message_00106400(undefined8Var1);\n    return undefinedPtr1;\n  }\n  charPtr1 = &optind;\n  if (_optind != numFiles) {\n    if (1 < numFiles - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      intVar2 = *(int *)charPtr1;\n      if (numFiles <= intVar2) break;\n      longVar2 = filePathsPtr[intVar2];\n      *(int *)charPtr1 = intVar2 + 1;\n      charVar3 = check_file_001043d0(longVar2);\n      if (charVar3 != '\\0') {\n        intVar2 = *(int *)charPtr1;\n        if (numFiles <= intVar2) break;\n        longVar2 = filePathsPtr[intVar2];\n        *(int *)charPtr1 = intVar2 + 1;\n        charVar3 = check_file_001043d0(longVar2);\n        if (charVar3 != '\\0') {\n          intVar2 = *(int *)charPtr1;\n          while( true ) {\n            if (numFiles <= intVar2) goto LAB_00105bdd;\n            longVar2 = filePathsPtr[intVar2];\n            *(int *)charPtr1 = intVar2 + 1;\n            charVar3 = check_file_001043d0(longVar2);\n            if (charVar3 == '\\0') break;\n            intVar2 = *(int *)charPtr1;\n          }\n        }\n      }\n      undefinedPtr1 = (undefined **)(ulong)((int)undefinedPtr1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)undefinedPtr1);\n  }\nLAB_0010613c:\n  uintVar1 = check_file_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uintVar1 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "bfd_set_default_target",
                "xexit",
                "printf",
                "getopt_long",
                "exit",
                "memmove",
                "strlen",
                "cplus_demangle_set_style",
                "FUN_001043d0",
                "ferror",
                "bfd_set_error_program_name",
                "ftell",
                "FUN_00104370",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "setlocale",
                "dcgettext",
                "bindtextdomain",
                "textdomain",
                "bfd_plugin_set_plugin",
                "xrealloc",
                "FUN_00106400",
                "strcmp",
                "xmalloc_set_program_name",
                "FUN_00106300",
                "FUN_00103ca0",
                "bfd_plugin_set_program_name",
                "fseek",
                "stat",
                "memcpy",
                "xstrdup",
                "bfd_errmsg",
                "fprintf",
                "fread",
                "fclose",
                "free",
                "bfd_init",
                "fopen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_input_files_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_input_files_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00102fd2",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_status_message_0010351b"
            },
            "code": "\nvoid printStatusMessage_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_status_message_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_message_00103b2b",
                "param_1": "programName",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_00103b2b(undefined8 programName,undefined8 message)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",programName,message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_message_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_decompiled_code_00104740",
                "param_1": "formatString",
                "param_2": "pointerArray",
                "param_3": "demangledString",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "iVar4": "intVar4",
                "sVar5": "sizeVar5",
                "pcVar6": "charPtrVar",
                "puVar7": "pointerVar7",
                "pcVar8": "charPtrVar2",
                "__ptr": "reconcatenatedString",
                "uVar9": "ulongVar9",
                "uVar10": "ulongVar10",
                "puVar11": "pointerVar11",
                "puVar12": "pointerVar12",
                "__s": "charPtrVar3",
                "__s_00": "charPtrVar4",
                "lVar13": "longVar13",
                "uVar14": "uintVar14",
                "bVar15": "byteVar15",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printDecompiledCode_00104740(char *formatString,long *pointerArray,undefined8 *demangledString,long param_4)\n\n{\n  undefined8 *pointerVar1;\n  byte byteVar2;\n  byte byteVar3;\n  int intVar4;\n  size_t sizeVar5;\n  char *charPtrVar;\n  undefined8 *pointerVar7;\n  char *charPtrVar2;\n  undefined8 *reconcatenatedString;\n  ulong ulongVar9;\n  undefined8 ulongVar10;\n  undefined *pointerVar11;\n  undefined8 *pointerVar12;\n  char *charPtrVar3;\n  undefined8 *charPtrVar4;\n  long longVar13;\n  uint uintVar14;\n  byte byteVar15;\n  char stackArray [9];\n  \n  byteVar15 = 0;\n  if (demangledString == (undefined8 *)0x0) {\n    demangledString = *(undefined8 **)(*pointerArray + 0x10);\n    if (DAT_0010b234 == 0) {\n      print_decompiled_code_00102739();\n      return;\n    }\nLAB_00104775:\n    pointerVar12 = demangledString;\n    if (DAT_0010b814 == 0) {\n      charPtrVar = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        pointerVar12 = demangledString;\n        reconcatenatedString = (undefined8 *)0x0;\n      }\n      else {\n        reconcatenatedString = (undefined8 *)0x0;\n        if (demangledString != (undefined8 *)0x0) goto LAB_0010269d;\n        pointerVar12 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPtrVar = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)pointerVar12 == '\\0') ||\n         (demangledString = (undefined8 *)bfd_demangle(param_4,pointerVar12,DAT_0010b248),\n         demangledString == (undefined8 *)0x0)) {\n        demangledString = pointerVar12;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        reconcatenatedString = (undefined8 *)0x0;\n      }\n      else {\n        pointerVar12 = demangledString;\n        reconcatenatedString = demangledString;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    pointerVar12 = demangledString;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(param_4 + 8) + 8) != 5) goto LAB_00104775;\n      charPtrVar = strchr((char *)demangledString,0x40);\n      if (charPtrVar == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (pointerArray == (long *)0x0) {\n              reconcatenatedString = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            else {\n              if (pointerArray[2] != 0) {\n                print_with_conditions_001047d0();\n                return;\n              }\n              reconcatenatedString = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPtrVar = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          reconcatenatedString = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPtrVar = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    pointerVar12 = demangledString;\n    reconcatenatedString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byteVar2 = *(byte *)demangledString;\n      demangledString = (undefined8 *)((long)demangledString + 1);\n      if (byteVar2 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) && (byteVar2 < 0xc0));\n    sizeVar5 = strlen((char *)pointerVar12);\n    charPtrVar4 = DAT_0010b790;\n    if (_DAT_0010b798 < sizeVar5 * 9) {\n      free(DAT_0010b790);\n      sizeVar5 = strlen((char *)pointerVar12);\n      _DAT_0010b798 = sizeVar5 * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      charPtrVar4 = DAT_0010b790;\n    }\n    while( true ) {\n      pointerVar7 = DAT_0010b790;\n      byteVar2 = *(byte *)pointerVar12;\n      pointerVar1 = (undefined8 *)((long)pointerVar12 + 1);\n      if (byteVar2 == 0) break;\n      if (((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) {\n        if ((byteVar2 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)charPtrVar4 = byteVar2;\n          charPtrVar4 = (undefined8 *)((long)charPtrVar4 + 1);\n          pointerVar12 = pointerVar1;\n        }\n        else {\n          byteVar3 = *(byte *)((long)pointerVar12 + 1);\n          if ((byteVar3 & 0xc0) == 0x80) {\n            pointerVar7 = charPtrVar4;\n            if ((byteVar2 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar13 = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar4 = isatty(1);\n                if (intVar4 == 0) {\n                  byteVar3 = *(byte *)((long)pointerVar12 + 1);\n                }\n                else {\n                  *(undefined *)(charPtrVar4 + 1) = 0;\n                  *charPtrVar4 = 0x6d37343b31335b1b;\n                  byteVar3 = *(byte *)((long)pointerVar12 + 1);\n                  pointerVar7 = charPtrVar4 + 1;\n                }\n              case 2:\n                uintVar14 = 2;\n                sprintf((char *)pointerVar7,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointerVar12 >> 2 & 7),\n                        (ulong)((*(byte *)pointerVar12 & 3) << 6 | byteVar3 & 0x3f));\n                pointerVar7 = (undefined8 *)((long)pointerVar7 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar14 = 2;\n              }\n            }\n            else {\n              byteVar3 = *(byte *)((long)pointerVar12 + 2);\n              if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVar2 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar14 = 3;\nLAB_00102a62:\n                  for (ulongVar9 = (ulong)uintVar14; ulongVar9 != 0; ulongVar9 = ulongVar9 - 1) {\n                    *(undefined *)pointerVar7 = *(undefined *)pointerVar12;\n                    pointerVar12 = (undefined8 *)((long)pointerVar12 + (ulong)byteVar15 * -2 + 1);\n                    pointerVar7 = (undefined8 *)((long)pointerVar7 + (ulong)byteVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar13 = 3;\nLAB_00102917:\n                  ulongVar10 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar10 = 0x3c;\n                  }\n                  sprintf((char *)charPtrVar4,\"%c\",ulongVar10);\n                  *(undefined *)((long)charPtrVar4 + 3) = 0;\n                  pointerVar7 = (undefined8 *)(longVar13 + (long)pointerVar12);\n                  *(undefined2 *)((long)charPtrVar4 + 1) = 0x7830;\n                  charPtrVar2 = (char *)((long)charPtrVar4 + 3);\n                  do {\n                    charPtrVar3 = charPtrVar2;\n                    byteVar2 = *(byte *)pointerVar12;\n                    pointerVar12 = (undefined8 *)((long)pointerVar12 + 1);\n                    sprintf(charPtrVar3,\"%02x\",(ulong)byteVar2);\n                    charPtrVar2 = charPtrVar3 + 2;\n                  } while (pointerVar12 != pointerVar7);\n                  ulongVar10 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar10 = 0x3e;\n                  }\n                  uintVar14 = (uint)longVar13;\n                  sprintf(charPtrVar3 + 2,\"%c\",ulongVar10);\n                  pointerVar7 = (undefined8 *)(charPtrVar3 + 3);\n                  break;\n                case 4:\n                  intVar4 = isatty(1);\n                  if (intVar4 == 0) {\n                    byteVar3 = *(byte *)((long)pointerVar12 + 2);\n                  }\n                  else {\n                    *(undefined *)(charPtrVar4 + 1) = 0;\n                    *charPtrVar4 = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)pointerVar12 + 2);\n                    pointerVar7 = charPtrVar4 + 1;\n                  }\n                case 2:\n                  uintVar14 = 3;\n                  sprintf((char *)pointerVar7,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointerVar12 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointerVar12 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointerVar12 + 1) & 3) << 6 | byteVar3 & 0x3f));\n                  pointerVar7 = (undefined8 *)((long)pointerVar7 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar4 = isatty(1), intVar4 != 0)) {\n                    *(undefined4 *)pointerVar7 = 0x6d305b1b;\n                    pointerVar7 = (undefined8 *)((long)pointerVar7 + 4);\n                    *(undefined *)pointerVar7 = 0;\n                  }\n                  break;\n                default:\n                  uintVar14 = 3;\n                }\n              }\n              else {\n                byteVar3 = *(byte *)((long)pointerVar12 + 3);\n                if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar13 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar4 = isatty(1);\n                  if (intVar4 == 0) {\n                    byteVar3 = *(byte *)((long)pointerVar12 + 3);\n                  }\n                  else {\n                    *(undefined *)(charPtrVar4 + 1) = 0;\n                    *charPtrVar4 = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)pointerVar12 + 3);\n                    pointerVar7 = charPtrVar4 + 1;\n                  }\n                case 2:\n                  uintVar14 = 4;\n                  intVar4 = sprintf((char *)pointerVar7,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointerVar12 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointerVar12 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointerVar12 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointerVar12 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointerVar12 + 2) & 3) << 6 | byteVar3 & 0x3f));\n                  pointerVar7 = (undefined8 *)((long)pointerVar7 + (long)intVar4);\n                  goto LAB_00102a27;\n                default:\n                  uintVar14 = 4;\n                }\n              }\n            }\n            ulongVar9 = (ulong)(uint)((int)pointerVar7 - (int)charPtrVar4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)charPtrVar4 = byteVar2;\n            uintVar14 = 1;\n            ulongVar9 = 1;\n          }\n          charPtrVar4 = (undefined8 *)((long)charPtrVar4 + ulongVar9);\n          pointerVar12 = (undefined8 *)((long)pointerVar1 + (ulong)(uintVar14 - 1));\n        }\n      }\n      else {\n        *(undefined *)charPtrVar4 = 0x5e;\n        *(byte *)((long)charPtrVar4 + 1) = byteVar2 + 0x40;\n        charPtrVar4 = (undefined8 *)((long)charPtrVar4 + 2);\n        pointerVar12 = pointerVar1;\n      }\n    }\n    *(undefined *)charPtrVar4 = 0;\n    pointerVar12 = pointerVar7;\n  }\njoined_r0x00104864:\n  if ((((pointerArray != (long *)0x0) && (pointerArray[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((charPtrVar2 = (char *)(**(code **)(*(long *)(param_4 + 8) + 0x220))\n                                  (param_4,pointerArray[2],0,stackArray), charPtrVar2 != (char *)0x0 &&\n      (*charPtrVar2 != '\\0')))) {\n    pointerVar11 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(pointerArray[2] + 0x20) != 0x10c2a8)) {\n      pointerVar11 = &DAT_001071df;\n    }\n    reconcatenatedString = (undefined8 *)reconcat(reconcatenatedString,pointerVar12,pointerVar11,charPtrVar2,0);\n    pointerVar12 = reconcatenatedString;\n  }\n  printf(formatString,pointerVar12);\n  if (charPtrVar != (char *)0x0) {\n    *charPtrVar = '@';\n  }\nLAB_001047ba:\n  free(reconcatenatedString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_00103b49",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_decompiled_code_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "print_formatted_error_message_00106400",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "length",
                "local_d4": "temp",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "errorBuffer",
                "local_b0": "param11",
                "local_a8": "param12",
                "local_a0": "param13",
                "local_98": "param14",
                "local_90": "param15",
                "local_88": "errorCode",
                "local_78": "param2",
                "local_68": "param3",
                "local_58": "param4",
                "local_48": "param5",
                "local_38": "param6",
                "local_28": "param7",
                "local_18": "param8"
            },
            "code": "\nvoid printFormattedErrorMessage_00106400(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 length;\n  undefined4 temp;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined errorBuffer [8];\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined8 param15;\n  undefined4 errorCode;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  \n  if (flag != '\\0') {\n    errorCode = errorCode;\n    param2 = param2;\n    param3 = param3;\n    param4 = param4;\n    param5 = param5;\n    param6 = param6;\n    param7 = param7;\n    param8 = param8;\n  }\n  bufferPtr = &stack0x00000008;\n  length = 8;\n  localBuffer = errorBuffer;\n  temp = 0x30;\n  param11 = param10;\n  param12 = param11;\n  param13 = param12;\n  param14 = param13;\n  param15 = param14;\n  print_formatted_error_message_001063a0(errorMessage,&length);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_0010249f",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "firstValue",
                "param_2": "secondValue",
                "uVar1": "returnValue"
            },
            "code": "\nulong compareAndExecute_00103533(undefined8 *firstValue,undefined8 *secondValue)\n\n{\n  ulong returnValue;\n  \n  if ((ulong)firstValue[1] < (ulong)secondValue[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)secondValue[1] < (ulong)firstValue[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  returnValue = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*firstValue,*secondValue);\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_symbol_information_0010651a",
                "print_symbol_info_001054d0": "print_symbol_info"
            },
            "code": "\nvoid print_symbol_information_0010651a(void)\n\n{\n  print_symbol_info();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_001064b0",
                "FUN_00103a66"
            ],
            "imported": false,
            "current_name": "print_symbol_information_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbolData",
                "iVar1": "symbolClass",
                "cVar2": "isUndefined",
                "uVar3": "symbolValue",
                "lVar4": "symbolAddress"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbolData,undefined8 param_2)\n\n{\n  int symbolClass;\n  char isUndefined;\n  undefined8 symbolValue;\n  long symbolAddress;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolData + 8));\n  symbolClass = DAT_0010b7a8;\n  if (isUndefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbolValue = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        print_error_message_and_exit_00106300(symbolValue,symbolClass);\n        goto LAB_00103623;\n      }\n      symbolValue = *(undefined8 *)*symbolData;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolData[2] == 0) {\n          symbolAddress = symbolData[1];\n        }\n        else {\n          symbolAddress = *(long *)(symbolData[2] + 0x38);\n        }\n        print_symbol_info_001054d0(symbolAddress);\n        if (DAT_0010b7ec != 0) {\n          print_symbol_info_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbolValue = *(undefined8 *)*symbolData;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,symbolValue);\n    if (DAT_0010b7ec != 0) {\n      print_symbol_info_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolData + 8));\n  if (*(char *)(*symbolData + 8) != '-') {\n    print_decompiled_code_00104740(&DAT_0010712c,symbolData,0,param_2);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolData + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolData + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolData + 0x20));\n  print_decompiled_code_00104740(&DAT_0010712c,symbolData,0,param_2);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "FUN_001035a2",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_information_001064b0",
                "param_1": "symbol_ptr",
                "param_2": "param_value",
                "cVar1": "is_undefined_symclass",
                "bfd_is_undefined_symclass": "is_undefined_symbol",
                "printf": "print",
                "print_decompiled_code_00104740": "print_decompiled_code",
                "print_symbol_info_001054d0": "print_symbol_info",
                "putchar": "print_character",
                "param_1[2]": "symbol_info2",
                "print_symbol_information_0010651a": "print_symbol_info2"
            },
            "code": "\nvoid print_symbol_information_001064b0(long *symbol_ptr,undefined8 param_value)\n\n{\n  char is_undefined_symclass;\n  \n  printf_decompiled_code(&DAT_00107363,symbol_ptr,0,param_value);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbol_ptr + 8));\n  is_undefined_symclass = bfd_is_undefined_symclass((int)*(char *)(*symbol_ptr + 8));\n  if (is_undefined_symclass != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  printf_symbol_info(*(undefined8 *)*symbol_ptr);\n  putchar(0x20);\n  if (symbol_info2 == 0) {\n    if (symbol_ptr[1] != 0) {\n      printf_symbol_info2();\n      return;\n    }\n  }\n  else if (*(long *)(symbol_info2 + 0x38) != 0) {\n    printf_symbol_info();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103573",
                "FUN_00103729",
                "FUN_00102670",
                "FUN_001035a2",
                "FUN_00103abf",
                "FUN_00102f19",
                "FUN_001055f0",
                "FUN_001047d0",
                "FUN_00105110",
                "FUN_001043d0",
                "FUN_00103463",
                "FUN_00103b2b",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010351b",
                "FUN_001054d0",
                "FUN_00102f7b",
                "FUN_001062d0",
                "FUN_00102739",
                "FUN_001036e0",
                "FUN_001036a7"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_decompiled_code_00103b49"
            },
            "code": "\nvoid print_decompiled_code_00103b49(undefined8 param_1,undefined8 param_2)\n\n{\n  print_decompiled_code_00103b49_00104740(&DAT_0010712d,param_1,0,param_2);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_decompiled_code_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbol_information_00103abf",
                "param_1": "programName",
                "param_2": "programVersion",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolInformation_00103abf(undefined8 programName,undefined8 programVersion)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,programName,programVersion);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "compare_and_return_result_00103bf6",
                "iVar1": "result",
                "in_RAX": "comparison_value",
                "auVar2": "output_array"
            },
            "code": "\nundefined  [16] compare_and_return_result_00103bf6(void)\n\n{\n  int result;\n  undefined8 comparison_value;\n  undefined output_array [16];\n  \n  result = compare_strings_00104fa0();\n  output_array._0_4_ = -result;\n  output_array._4_4_ = 0;\n  output_array._8_8_ = comparison_value;\n  return output_array;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_return_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_target_list_00102450",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "target",
                "lVar1": "targetValue",
                "unaff_RBX": "outputFile",
                "in_stack_00000008": "bugFlag"
            },
            "code": "\nvoid printTargetList_00102450(void)\n\n{\n  long targetValue;\n  char *message;\n  long *targetList;\n  FILE *outputFile;\n  long *target;\n  int bugFlag;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,message);\n  targetList = (long *)bfd_target_list();\n  target = targetList;\n  while( true ) {\n    targetValue = *target;\n    target = target + 1;\n    if (targetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (bugFlag == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(bugFlag);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_target_list_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "pcVar1": "stringPtr",
                "pcVar2": "functionPtr",
                "cVar3": "byteVal",
                "iVar4": "intVal",
                "uVar5": "uintVal",
                "uVar6": "unsignedLongVal",
                "lVar7": "longVal",
                "puVar8": "pointer1",
                "lVar9": "longVal2",
                "puVar10": "pointer2",
                "puVar11": "pointer3",
                "puVar12": "pointer4",
                "puVar13": "pointer5",
                "puVar14": "pointer6",
                "puVar15": "pointer7",
                "unaff_RBX": "register1",
                "unaff_RBP": "register2",
                "unaff_R12": "register3",
                "unaff_R13": "register4",
                "unaff_R14": "register5",
                "unaff_R15": "register6",
                "bVar16": "boolVal",
                "bVar17": "byteVal2",
                "unaff_retaddr": "unsignedLongVal2",
                "uVar18": "unsignedLongVal3",
                "in_stack_00000008": "arg1",
                "in_stack_00000010": "arg2",
                "in_stack_00000018": "arg3",
                "in_stack_00000038": "arg4",
                "in_stack_00000040": "arg5",
                "in_stack_00000048": "arg6"
            },
            "code": "\n\n\nvoid processLTOObject_00102c19(void)\n\n{\n  char *stringPtr;\n  code *functionPtr;\n  char byteVal;\n  int intVal;\n  uint uintVal;\n  undefined8 unsignedLongVal;\n  long longVal;\n  undefined8 *pointer1;\n  long longVal2;\n  undefined8 *pointer2;\n  undefined8 *register1;\n  undefined8 *__ptr;\n  undefined8 *register2;\n  undefined8 *pointer3;\n  undefined8 *pointer4;\n  undefined8 *in_R8;\n  undefined8 *pointer5;\n  undefined8 *in_R9;\n  undefined8 *pointer6;\n  undefined8 *register3;\n  undefined8 *pointer7;\n  undefined8 *register4;\n  undefined8 *register5;\n  undefined8 *register6;\n  bool boolVal;\n  byte byteVal2;\n  ulong unsignedLongVal2;\n  ulong unsignedLongVal3;\n  undefined8 arg1;\n  undefined8 *arg2;\n  undefined8 *arg3;\n  undefined8 arg4;\n  void *arg5;\n  undefined8 *arg6;\n  \n  byteVal2 = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (register1 != register4) {\n      if (register5 == (undefined8 *)0x8) {\n        *register1 = *register4;\n        FUN_001049c0();\n        return;\n      }\n      for (; register5 != (undefined8 *)0x0; register5 = (undefined8 *)((long)register5 + -1)) {\n        *(undefined *)register1 = *(undefined *)register4;\n        register4 = (undefined8 *)((long)register4 + (ulong)byteVal2 * -2 + 1);\n        register1 = (undefined8 *)((long)register1 + (ulong)byteVal2 * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    register1 = (undefined8 *)((long)register1 + (long)register5);\nLAB_001049c3:\n    do {\n      do {\n        register4 = (undefined8 *)((long)register4 + (long)register5);\n        pointer7 = register3;\n        pointer4 = register2;\n        if (register3 <= register4) goto LAB_00104b15;\nLAB_001049cf:\n        pointer1 = (undefined8 *)\n                 (**(code **)(register2[1] + 0x270))\n                           (register2,unsignedLongVal2 & 0xffffffff,register4,register6);\n        pointer3 = register2;\n        pointer4 = register4;\n        pointer7 = register6;\n        if (pointer1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        stringPtr = (char *)pointer1[1];\n        if (((stringPtr == (char *)0x0) || (*stringPtr != '_')) || (stringPtr[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVal = (uint)(pointer1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVal != 0) goto LAB_00104a2d;\n          register4 = (undefined8 *)((long)register4 + (long)register5);\n          pointer7 = register3;\n          pointer4 = register2;\n          if (register3 <= register4) {\nLAB_00104b15:\n            register1 = (undefined8 *)((long)register1 - (long)arg3);\n            if (register5 == (undefined8 *)0x8) {\n              longVal2 = pointer4[1];\n              pointer3 = (undefined8 *)((long)register1 + 7);\n              if (-1 < (long)register1) {\n                pointer3 = register1;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              functionPtr = *(code **)(longVal2 + 0x208);\n              pointer3 = (undefined8 *)((long)pointer3 >> 3);\n            }\n            else {\n              pointer3 = (undefined8 *)((long)register1 / (long)register5);\n              longVal2 = pointer4[1];\n              functionPtr = *(code **)(longVal2 + 0x208);\n            }\n            register2 = pointer4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = pointer4;\n              DAT_0010b770 = (undefined8 *)(*functionPtr)(pointer4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(pointer4[1] + 0x208))(pointer4);\n              register1 = arg6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_message_00106530(*pointer4);\n                __ptr = register6;\n                goto LAB_00102d8e;\n              }\n              register3 = (undefined8 *)(ulong)arg4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                unsignedLongVal3 = (ulong)(DAT_0010b80c != 0);\n                qsort(arg6,(size_t)pointer3,(size_t)register3,check_compiled_type_00102fd2);\n                pointer7 = (undefined8 *)xmalloc((long)pointer3 << 4);\n                pointer5 = DAT_0010b770;\n                register2 = DAT_0010b768;\n                register5 = (undefined8 *)((long)pointer3 * (long)register3 + (long)register1);\n                pointer1 = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (register5 <= register1) goto LAB_00102ec2;\n                pointer3 = (undefined8 *)\n                          (**(code **)(pointer4[1] + 0x270))(pointer4,unsignedLongVal3 & 0xffffffff,register1);\n                __ptr = register1;\n                in_R8 = register3;\n                arg2 = pointer7;\n                if (pointer3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(arg6,(size_t)pointer3,(size_t)register3,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVal2 = pointer4[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              pointer4 = arg6;\n              pointer1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              register5 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                pointer7 = (undefined8 *)(**(code **)(longVal2 + 0x208))(register2);\n                if (pointer7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                register1 = __ptr + (long)pointer3 * 2;\n                pointer3 = __ptr;\n                do {\n                  if (register1 <= pointer3) {\nLAB_00104c75:\n                    if (arg5 == (void *)0x0) {\n                      free(arg6);\n                      free(__ptr);\n                      return;\n                    }\n                    free(arg5);\n                    free(arg6);\n                    free(__ptr);\n                    return;\n                  }\n                  pointer1 = pointer7;\n                  longVal2 = (**(code **)(register2[1] + 0x270))(register2,register5,*pointer3);\n                  if (longVal2 == 0) {\n                    print_error_message_00106530(*register2,0);\nLAB_00102ed2:\n                    pointer4 = (undefined8 *)*register2;\n                    print_error_message_00106530();\n                    pointer5 = in_R8;\n                    pointer6 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  pointer4 = pointer3 + 1;\n                  pointer3 = pointer3 + 2;\n                  print_relocated_sections_00105110(register2,longVal2,*pointer4,arg1);\n                } while( true );\n              }\n              register3 = (undefined8 *)(ulong)arg4._4_4_;\n              register6 = (undefined8 *)(**(code **)(longVal2 + 0x208))(register2);\n              if (register6 == (undefined8 *)0x0) {\n                print_error_message_00106530(*register2);\n                pointer4 = register3;\n                if (DAT_0010b80c == 0) {\n                  longVal2 = (**(code **)(register2[1] + 0x350))(register2);\n                  pointer3 = arg6;\n                  pointer7 = register3;\n                  if (longVal2 < 1) {\n                    pointer1 = (undefined8 *)0x0;\n                    register1 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    register1 = (undefined8 *)xmalloc();\n                    pointer1 = (undefined8 *)(**(code **)(register2[1] + 0x358))(register2,register1);\n                    pointer4 = pointer7;\n                    if ((long)pointer1 < 0) {\n                      pointer4 = (undefined8 *)*register2;\n                      pointer3 = (undefined8 *)print_error_message_00106530(pointer4,pointer7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointer1 = register3;\n                  register1 = arg6;\n                  pointer3 = (undefined8 *)0x0;\n                  pointer7 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = register1;\n                longVal2 = (**(code **)(register2[1] + 0x360))(register2,pointer7,pointer3,pointer1);\n                register3 = pointer4;\n                if (0 < longVal2) {\n                  register3 = (undefined8 *)((long)pointer4 + longVal2);\n                  arg6 = (undefined8 *)xrealloc(arg6);\n                  longVal = 0;\n                  do {\n                    arg6[(long)((long)pointer4 + longVal)] =\n                         (void *)(longVal * 0x30 + (long)arg5);\n                    longVal = longVal + 1;\n                  } while (longVal2 != longVal);\n                  arg6[(long)((long)pointer4 + longVal2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (register1 != (undefined8 *)0x0)) {\n                  free(register1);\n                }\n                if ((*(byte *)((long)register2 + 0x4a) & 0x10) != 0) {\n                  register1 = (undefined8 *)*register2;\n                  DAT_0010b230 = '\\0';\n                  unsignedLongVal = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_formatted_error_message_00106400(unsignedLongVal);\n                }\n                register5 = (undefined8 *)(ulong)arg4._4_4_;\n                boolVal = DAT_0010b80c != 0;\n                pointer3 = (undefined8 *)(ulong)boolVal;\n                pointer1 = arg6;\n                arg3 = arg6;\n                register6 = (undefined8 *)(**(code **)(register2[1] + 0x208))(register2);\n                if (register6 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointer3 = (undefined8 *)((long)pointer3 * (long)register3 + (long)pointer4);\n                register1 = pointer4;\n                while( true ) {\n                  if (pointer3 <= register1) goto LAB_00104c75;\n                  pointer1 = register6;\n                  longVal2 = (**(code **)(register2[1] + 0x270))(register2,register5,register1);\n                  if (longVal2 == 0) break;\n                  register1 = (undefined8 *)((long)register1 + (long)register3);\n                  print_relocated_sections_00105110(register2,longVal2,0,arg1);\n                }\n                print_error_message_00106530(*register2,0);\n              }\n              print_error_message_00106530(*register2);\n              pointer4 = register2;\n              pointer7 = register6;\nLAB_00102eb0:\n              print_error_message_00106530(*pointer3);\nLAB_00102eb9:\n              print_error_message_00106530(*pointer4);\nLAB_00102ec2:\n              pointer3 = (undefined8 *)0x0;\n              __ptr = register1;\n              in_R8 = register3;\n              pointer5 = pointer1;\n              register2 = in_R9;\n              arg2 = pointer7;\nLAB_00104e35:\n              while (in_R9 = pointer5, __ptr < register5) {\n                register1 = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (register1 < register5) {\n                  pointer1 = register2;\n                  pointer5 = in_R8;\n                  pointer6 = in_R9;\n                  pointer2 = (undefined8 *)(**(code **)(pointer4[1] + 0x270))();\n                  if (pointer2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = pointer6;\n                    in_R8 = pointer5;\n                    pointer4 = (undefined8 *)*pointer4;\n                    pointer2 = (undefined8 *)print_error_message_00106530();\n                  }\n                  else {\n                    pointer1 = (undefined8 *)pointer3[4];\n                    if ((*(uint *)(pointer3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVal2 = pointer3[2];\nLAB_00102ee7:\n                  if (pointer1 == (undefined8 *)pointer2[4]) {\n                    longVal2 = pointer2[2] - longVal2;\n                    pointer5 = register2;\n                    pointer6 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVal2 = pointer1[8] - longVal2;\n                  pointer5 = register2;\n                  pointer6 = __ptr;\n                }\n                else {\n                  pointer1 = (undefined8 *)pointer3[4];\n                  if ((*(uint *)(pointer3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVal2 = pointer3[2];\n                    pointer2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointer2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer5 = register2;\n                  pointer6 = __ptr;\n                  if (*(int *)(pointer4[1] + 8) == 5) {\n                    longVal2 = pointer3[7];\n                  }\n                  else {\n                    longVal2 = pointer3[2];\n                    if ((*(byte *)((long)pointer1 + 0x25) & 0x10) == 0) {\n                      if (register1 < register5) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointer3 = pointer2;\n                __ptr = register1;\n                register2 = in_R9;\n                if (longVal2 != 0) {\n                  *pointer7 = pointer6;\n                  pointer7[1] = longVal2;\n                  pointer7 = pointer7 + 2;\n                }\n              }\n              pointer3 = (undefined8 *)((long)pointer7 - (long)arg2 >> 4);\n              qsort(arg2,(size_t)pointer3,0x10,FUN_00103533);\n              longVal2 = pointer4[1];\n              register1 = __ptr;\n              register2 = pointer4;\n              __ptr = arg2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVal = strcmp(stringPtr + (stringPtr[2] == '_'),\"__gnu_lto_slim\");\n        arg2 = pointer1;\n        if (intVal == 0) {\n          if (DAT_0010b230 != '\\0') {\n            arg2 = (undefined8 *)*register2;\n            DAT_0010b230 = '\\0';\n            unsignedLongVal = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_formatted_error_message_00106400(unsignedLongVal,arg2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVal = (*(uint *)(pointer1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointer1 + 3) & 0x800082) == 0) && (pointer1[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointer1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n          if ((pointer1[4] != 0x10c2a8) && (pointer1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointer1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        byteVal = (**(code **)(register2[1] + 0x230))(register2);\n        if (byteVal != '\\0') {\n          processLTOObject_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointer1[4] == 0x10c2a8);\nLAB_00104cba:\n    byteVal = (**(code **)(register2[1] + 0x230))(register2);\n    if (byteVal != '\\0') {\n      processLTOObject_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointer7 = (undefined8 *)((long)register3 * (long)register5);\n  register3 = (undefined8 *)((long)arg3 + (long)pointer7);\n  register1 = arg3;\n  pointer4 = register2;\n  if (arg3 < register3) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unsignedLongVal2 = (ulong)boolVal;\n  register4 = arg3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "lVar3": "lineNumber",
                "in_R10": "inputData",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00106530(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  long lineNumber;\n  undefined8 inputData;\n  \n  print_error_message_00106540();\n  lineNumber = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (lineNumber != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820,lineNumber,errorMessage,inputData);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMessage,inputData);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "FUN_00106540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103c00",
                "FUN_00102f9f",
                "FUN_00102fd2",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "print_error_message_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "puVar1": "pointer_1",
                "bVar2": "byte_1",
                "bVar3": "byte_2",
                "iVar4": "int_var",
                "sVar5": "size_var",
                "puVar6": "pointer_2",
                "pcVar7": "string_var",
                "uVar8": "ulong_var",
                "uVar9": "uVar",
                "puVar10": "pointer_3",
                "puVar11": "pointer_4",
                "puVar12": "pointer_5",
                "lVar13": "long_var",
                "uVar14": "uVar2",
                "unaff_R14": "format_string",
                "bVar15": "byte_var",
                "__s": "char_ptr",
                "in_stack_00000038": "in_stack_var"
            },
            "code": "\n\n\nvoid print_encoded_string_0010268b(void)\n\n{\n  undefined8 *pointer_1;\n  byte byte_1;\n  byte byte_2;\n  int int_var;\n  size_t size_var;\n  undefined8 *pointer_2;\n  char *string_var;\n  ulong ulong_var;\n  undefined8 uVar;\n  undefined *pointer_3;\n  undefined8 *pointer_4;\n  long unaff_RBP;\n  undefined8 *pointer_5;\n  undefined *unaff_R12;\n  undefined8 *unaff_R13;\n  long long_var;\n  uint uVar2;\n  char *format_string;\n  long unaff_R15;\n  byte byte_var;\n  char *char_ptr;\n  undefined8 in_stack_var;\n  \n  byte_var = 0;\n  pointer_5 = unaff_R13;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte_1 = *(byte *)pointer_5;\n      if (byte_1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte_1 * 2] & 2) == 0) &&\n            (pointer_5 = (undefined8 *)((long)pointer_5 + 1), byte_1 < 0xc0));\n    size_var = strlen((char *)unaff_R13);\n    pointer_5 = DAT_0010b790;\n    pointer_4 = unaff_R13;\n    if (_DAT_0010b798 < size_var * 9) {\n      free(DAT_0010b790);\n      size_var = strlen((char *)unaff_R13);\n      _DAT_0010b798 = size_var * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      pointer_5 = DAT_0010b790;\n    }\n    while( true ) {\n      unaff_R13 = DAT_0010b790;\n      byte_1 = *(byte *)pointer_4;\n      pointer_1 = (undefined8 *)((long)pointer_4 + 1);\n      if (byte_1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte_1 * 2] & 2) == 0) {\n        if ((byte_1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)pointer_5 = byte_1;\n          pointer_5 = (undefined8 *)((long)pointer_5 + 1);\n          pointer_4 = pointer_1;\n        }\n        else {\n          byte_2 = *(byte *)((long)pointer_4 + 1);\n          if ((byte_2 & 0xc0) == 0x80) {\n            pointer_2 = pointer_5;\n            if ((byte_1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uVar2 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long_var = 2;\n                goto LAB_00102917;\n              case 4:\n                int_var = isatty(1);\n                if (int_var == 0) {\n                  byte_2 = *(byte *)((long)pointer_4 + 1);\n                }\n                else {\n                  *(undefined *)(pointer_5 + 1) = 0;\n                  *pointer_5 = 0x6d37343b31335b1b;\n                  byte_2 = *(byte *)((long)pointer_4 + 1);\n                  pointer_2 = pointer_5 + 1;\n                }\n              case 2:\n                uVar2 = 2;\n                sprintf((char *)pointer_2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointer_4 >> 2 & 7),\n                        (ulong)((*(byte *)pointer_4 & 3) << 6 | byte_2 & 0x3f));\n                pointer_2 = (undefined8 *)((long)pointer_2 + 6);\n                goto LAB_00102a27;\n              default:\n                uVar2 = 2;\n              }\n            }\n            else {\n              byte_2 = *(byte *)((long)pointer_4 + 2);\n              if ((byte_2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte_1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uVar2 = 3;\nLAB_00102a62:\n                  for (ulong_var = (ulong)uVar2; ulong_var != 0; ulong_var = ulong_var - 1) {\n                    *(undefined *)pointer_2 = *(undefined *)pointer_4;\n                    pointer_4 = (undefined8 *)((long)pointer_4 + (ulong)byte_var * -2 + 1);\n                    pointer_2 = (undefined8 *)((long)pointer_2 + (ulong)byte_var * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long_var = 3;\nLAB_00102917:\n                  uVar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar = 0x3c;\n                  }\n                  sprintf((char *)pointer_5,\"%c\",uVar);\n                  *(undefined *)((long)pointer_5 + 3) = 0;\n                  pointer_2 = (undefined8 *)(long_var + (long)pointer_4);\n                  *(undefined2 *)((long)pointer_5 + 1) = 0x7830;\n                  string_var = (char *)((long)pointer_5 + 3);\n                  do {\n                    char_ptr = string_var;\n                    byte_1 = *(byte *)pointer_4;\n                    pointer_4 = (undefined8 *)((long)pointer_4 + 1);\n                    sprintf(char_ptr,\"%02x\",(ulong)byte_1);\n                    string_var = char_ptr + 2;\n                  } while (pointer_4 != pointer_2);\n                  uVar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar = 0x3e;\n                  }\n                  uVar2 = (uint)long_var;\n                  sprintf(char_ptr + 2,\"%c\",uVar);\n                  pointer_2 = (undefined8 *)(char_ptr + 3);\n                  break;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var == 0) {\n                    byte_2 = *(byte *)((long)pointer_4 + 2);\n                  }\n                  else {\n                    *(undefined *)(pointer_5 + 1) = 0;\n                    *pointer_5 = 0x6d37343b31335b1b;\n                    byte_2 = *(byte *)((long)pointer_4 + 2);\n                    pointer_2 = pointer_5 + 1;\n                  }\n                case 2:\n                  uVar2 = 3;\n                  sprintf((char *)pointer_2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointer_4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointer_4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointer_4 + 1) & 3) << 6 | byte_2 & 0x3f));\n                  pointer_2 = (undefined8 *)((long)pointer_2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (int_var = isatty(1), int_var != 0)) {\n                    *(undefined4 *)pointer_2 = 0x6d305b1b;\n                    pointer_2 = (undefined8 *)((long)pointer_2 + 4);\n                    *(undefined *)pointer_2 = 0;\n                  }\n                  break;\n                default:\n                  uVar2 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)pointer_4 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uVar2 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long_var = 4;\n                  goto LAB_00102917;\n                case 4:\n                  int_var = isatty(1);\n                  if (int_var != 0) {\n                    *(undefined *)(pointer_5 + 1) = 0;\n                    *pointer_5 = 0x6d37343b31335b1b;\n                    pointer_2 = pointer_5 + 1;\n                  }\n                case 2:\n                  uVar2 = 4;\n                  int_var = sprintf((char *)pointer_2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointer_4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer_4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer_4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer_4 + 2) >> 2 & 0xfU));\n                  pointer_2 = (undefined8 *)((long)pointer_2 + (long)int_var);\n                  goto LAB_00102a27;\n                default:\n                  uVar2 = 4;\n                }\n              }\n            }\n            ulong_var = (ulong)(uint)((int)pointer_2 - (int)pointer_5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointer_5 = byte_1;\n            uVar2 = 1;\n            ulong_var = 1;\n          }\n          pointer_5 = (undefined8 *)((long)pointer_5 + ulong_var);\n          pointer_4 = (undefined8 *)((long)pointer_1 + (ulong)(uVar2 - 1));\n        }\n      }\n      else {\n        *(undefined *)pointer_5 = 0x5e;\n        *(byte *)((long)pointer_5 + 1) = byte_1 + 0x40;\n        pointer_5 = (undefined8 *)((long)pointer_5 + 2);\n        pointer_4 = pointer_1;\n      }\n    }\n    *(undefined *)pointer_5 = 0;\n  }\nLAB_0010485e:\n  pointer_5 = (undefined8 *)0x0;\n  if ((((unaff_RBP != 0) && (*(long *)(unaff_RBP + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((string_var = (char *)(**(code **)(*(long *)(unaff_R15 + 8) + 0x220))\n                                  (unaff_R15,*(long *)(unaff_RBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), string_var != (char *)0x0 &&\n      (*string_var != '\\0')))) {\n    pointer_3 = &DAT_001071e0;\n    if ((in_stack_var._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaff_RBP + 0x10) + 0x20) != 0x10c2a8)) {\n      pointer_3 = &DAT_001071df;\n    }\n    pointer_5 = (undefined8 *)reconcat(0,unaff_R13,pointer_3,string_var,0);\n    unaff_R13 = pointer_5;\n  }\n  printf(format_string,unaff_R13);\n  if (unaff_R12 != (undefined *)0x0) {\n    *unaff_R12 = 0x40;\n  }\n  free(pointer_5);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "isatty",
                "strlen",
                "free",
                "FUN_001047d0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_encoded_string_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "compare_and_return_value_00103bec",
                "in_RAX": "returnValue",
                "iVar1": "comparisonResult",
                "auVar2": "updatedReturnValue"
            },
            "code": "\nundefined  [16] compareAndReturnValue_00103bec(void)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined updatedReturnValue [16];\n  \n  comparisonResult = compare_binary_files_00105050();\n  updatedReturnValue._0_4_ = -comparisonResult;\n  updatedReturnValue._4_4_ = 0;\n  updatedReturnValue._8_8_ = returnValue;\n  return updatedReturnValue;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_return_value_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_formatted_error_message_001063a0",
                "param_1": "errorMessage",
                "param_2": "formatArgs",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream"
            },
            "code": "\n\n\nvoid printFormattedErrorMessage_001063a0(char *errorMessage,__gnuc_va_list formatArgs)\n\n{\n  fflush(stdoutStream);\n  fprintf(stderrStream,\"%s: \",DAT_0010b820);\n  vfprintf(stderrStream,errorMessage,formatArgs);\n  putc(10,stderrStream);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_decompiled_code_00102739",
                "unaff_RBP": "unaffected_RBP",
                "unaff_R13": "unaffected_R13",
                "unaff_R14": "unaffected_R14",
                "unaff_R15": "unaffected_R15",
                "puVar12": "result",
                "puVar1": "tempPtr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "status",
                "sVar5": "length",
                "pcVar6": "strchrResult",
                "puVar7": "ptr",
                "__ptr": "finalPtr",
                "uVar9": "tempVar",
                "uVar10": "tempVar2",
                "puVar11": "unaff_R11",
                "lVar13": "length2",
                "uVar14": "tempVar3",
                "bVar15": "byte3",
                "__s": "tempStr",
                "in_stack_00000038": "stackArg"
            },
            "code": "\n\n\nvoid printDecompiledCode_00102739(void)\n\n{\n  undefined8 *tempPtr;\n  byte byte1;\n  byte byte2;\n  int status;\n  size_t length;\n  char *strchrResult;\n  undefined8 *ptr;\n  char *pcVar8;\n  undefined8 *finalPtr;\n  ulong tempVar;\n  undefined8 tempVar2;\n  undefined *unaff_R11;\n  long unaffected_RBP;\n  undefined8 *result;\n  undefined8 *unaffected_R13;\n  long length2;\n  uint tempVar3;\n  char *unaffected_R14;\n  long unaffected_R15;\n  byte byte3;\n  char *tempStr;\n  undefined8 stackArg;\n  \n  byte3 = 0;\n  result = unaffected_R13;\n  if (*(int *)(*(long *)(unaffected_R15 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      strchrResult = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    strchrResult = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      finalPtr = (undefined8 *)0x0;\n    }\n    else {\n      finalPtr = (undefined8 *)0x0;\n      if (unaffected_R13 != (undefined8 *)0x0) goto LAB_0010269d;\n      finalPtr = (undefined8 *)0x0;\n      unaffected_R13 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  strchrResult = strchr((char *)unaffected_R13,0x40);\n  if (strchrResult == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (unaffected_RBP == 0) {\n        finalPtr = (undefined8 *)0x0;\n        printf(unaffected_R14);\n      }\n      else {\n        if (*(long *)(unaffected_RBP + 0x10) != 0) {\n          print_with_conditions_001047d0();\n          return;\n        }\n        finalPtr = (undefined8 *)0x0;\n        printf(unaffected_R14);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    result = unaffected_R13;\n    finalPtr = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)result;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (result = (undefined8 *)((long)result + 1), byte1 < 0xc0));\n    length = strlen((char *)unaffected_R13);\n    result = DAT_0010b790;\n    if (_DAT_0010b798 < length * 9) {\n      free(DAT_0010b790);\n      length = strlen((char *)unaffected_R13);\n      _DAT_0010b798 = length * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      result = DAT_0010b790;\n    }\n    while( true ) {\n      ptr = DAT_0010b790;\n      byte1 = *(byte *)unaffected_R13;\n      tempPtr = (undefined8 *)((long)unaffected_R13 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)result = byte1;\n          result = (undefined8 *)((long)result + 1);\n          unaffected_R13 = tempPtr;\n        }\n        else {\n          byte2 = *(byte *)((long)unaffected_R13 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr = result;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                tempVar3 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                length2 = 2;\n                goto LAB_00102917;\n              case 4:\n                status = isatty(1);\n                if (status == 0) {\n                  byte2 = *(byte *)((long)unaffected_R13 + 1);\n                }\n                else {\n                  *(undefined *)(result + 1) = 0;\n                  *result = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)unaffected_R13 + 1);\n                  ptr = result + 1;\n                }\n              case 2:\n                tempVar3 = 2;\n                sprintf((char *)ptr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)unaffected_R13 >> 2 & 7)\n                        ,(ulong)((*(byte *)unaffected_R13 & 3) << 6 | byte2 & 0x3f));\n                ptr = (undefined8 *)((long)ptr + 6);\n                goto LAB_00102a27;\n              default:\n                tempVar3 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)unaffected_R13 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVar3 = 3;\nLAB_00102a62:\n                  for (tempVar = (ulong)tempVar3; tempVar != 0; tempVar = tempVar - 1) {\n                    *(undefined *)ptr = *(undefined *)unaffected_R13;\n                    unaffected_R13 = (undefined8 *)((long)unaffected_R13 + (ulong)byte3 * -2 + 1);\n                    ptr = (undefined8 *)((long)ptr + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  length2 = 3;\nLAB_00102917:\n                  tempVar2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    tempVar2 = 0x3c;\n                  }\n                  sprintf((char *)result,\"%c\",tempVar2);\n                  *(undefined *)((long)result + 3) = 0;\n                  ptr = (undefined8 *)(length2 + (long)unaffected_R13);\n                  *(undefined2 *)((long)result + 1) = 0x7830;\n                  pcVar8 = (char *)((long)result + 3);\n                  do {\n                    tempStr = pcVar8;\n                    byte1 = *(byte *)unaffected_R13;\n                    unaffected_R13 = (undefined8 *)((long)unaffected_R13 + 1);\n                    sprintf(tempStr,\"%02x\",(ulong)byte1);\n                    pcVar8 = tempStr + 2;\n                  } while (unaffected_R13 != ptr);\n                  tempVar2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    tempVar2 = 0x3e;\n                  }\n                  tempVar3 = (uint)length2;\n                  sprintf(tempStr + 2,\"%c\",tempVar2);\n                  ptr = (undefined8 *)(tempStr + 3);\n                  break;\n                case 4:\n                  status = isatty(1);\n                  if (status == 0) {\n                    byte2 = *(byte *)((long)unaffected_R13 + 2);\n                  }\n                  else {\n                    *(undefined *)(result + 1) = 0;\n                    *result = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)unaffected_R13 + 2);\n                    ptr = result + 1;\n                  }\n                case 2:\n                  tempVar3 = 3;\n                  sprintf((char *)ptr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)unaffected_R13 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)unaffected_R13 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)unaffected_R13 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr = (undefined8 *)((long)ptr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (status = isatty(1), status != 0)) {\n                    *(undefined4 *)ptr = 0x6d305b1b;\n                    ptr = (undefined8 *)((long)ptr + 4);\n                    *(undefined *)ptr = 0;\n                  }\n                  break;\n                default:\n                  tempVar3 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)unaffected_R13 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVar3 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  length2 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  status = isatty(1);\n                  if (status != 0) {\n                    *(undefined *)(result + 1) = 0;\n                    *result = 0x6d37343b31335b1b;\n                    ptr = result + 1;\n                  }\n                case 2:\n                  tempVar3 = 4;\n                  status = sprintf((char *)ptr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)unaffected_R13 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffected_R13 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)unaffected_R13 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffected_R13 + 2) >> 2 & 0xfU));\n                  ptr = (undefined8 *)((long)ptr + (long)status);\n                  goto LAB_00102a27;\n                default:\n                  tempVar3 = 4;\n                }\n              }\n            }\n            tempVar = (ulong)(uint)((int)ptr - (int)result);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)result = byte1;\n            tempVar3 = 1;\n            tempVar = 1;\n          }\n          result = (undefined8 *)((long)result + tempVar);\n          unaffected_R13 = (undefined8 *)((long)tempPtr + (ulong)(tempVar3 - 1));\n        }\n      }\n      else {\n        *(undefined *)result = 0x5e;\n        *(byte *)((long)result + 1) = byte1 + 0x40;\n        result = (undefined8 *)((long)result + 2);\n        unaffected_R13 = tempPtr;\n      }\n    }\n    *(undefined *)result = 0;\n    unaffected_R13 = ptr;\n  }\n  else {\n    *strchrResult = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      finalPtr = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)unaffected_R13 == '\\0') ||\n       (result = (undefined8 *)bfd_demangle(), result == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      finalPtr = (undefined8 *)0x0;\n    }\n    else {\n      unaffected_R13 = result;\n      finalPtr = result;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((unaffected_RBP != 0) && (*(long *)(unaffected_RBP + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((pcVar8 = (char *)(**(code **)(*(long *)(unaffected_R15 + 8) + 0x220))\n                                  (unaffected_R15,*(long *)(unaffected_RBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pcVar8 != (char *)0x0 &&\n      (*pcVar8 != '\\0')))) {\n    unaff_R11 = &DAT_001071e0;\n    if ((stackArg._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaffected_RBP + 0x10) + 0x20) != 0x10c2a8)) {\n      unaff_R11 = &DAT_001071df;\n    }\n    finalPtr = (undefined8 *)reconcat(finalPtr,unaffected_R13,unaff_R11,pcVar8,0);\n    unaffected_R13 = finalPtr;\n  }\n  printf(unaffected_R14,unaffected_R13);\n  if (strchrResult != (char *)0x0) {\n    *strchrResult = '@';\n  }\nLAB_001047ba:\n  free(finalPtr);\n  return;\n}\n\n",
            "called": [
                "printf",
                "bfd_demangle",
                "strchr",
                "FUN_001047d0",
                "FUN_0010268b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "print_decompiled_code_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_binary_files_00105050",
                "param_1": "file_path_1",
                "param_2": "file_path_2",
                "__s": "file_content_1",
                "__s_00": "file_content_2",
                "lVar3": "file_size_1",
                "lVar9": "file_header_1",
                "lVar10": "file_header_2",
                "uVar11": "result",
                "uVar13": "section_offset_1",
                "uVar14": "section_end_1",
                "uVar2": "section_offset_2",
                "uVar12": "section_end_2",
                "sVar5": "content_length_1",
                "sVar6": "content_length_2",
                "pcVar7": "compilation_type_1",
                "pcVar8": "compilation_type_2",
                "uVar4": "is_relocatable"
            },
            "code": "\nulong compare_binary_files_00105050(undefined8 file_path_1,undefined8 file_path_2)\n\n{\n  char cVar1;\n  ulong section_offset_2;\n  char *file_content_1;\n  char *file_content_2;\n  long file_size_1;\n  uint is_relocatable;\n  size_t content_length_1;\n  size_t content_length_2;\n  char *compilation_type_1;\n  char *compilation_type_2;\n  long file_header_1;\n  long file_header_2;\n  ulong result;\n  ulong section_end_2;\n  ulong section_offset_1;\n  ulong section_end_1;\n  undefined8 uVar15;\n  long unaff_R13;\n  bool bVar16;\n  \n  file_header_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file_path_1,DAT_0010b770);\n  result = (ulong)DAT_0010b778;\n  file_header_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,result,file_path_2,DAT_0010b768);\n  if ((file_header_1 != 0) && (file_header_2 != 0)) {\n    file_size_1 = *(long *)(file_header_2 + 0x20);\n    if (*(long *)(file_header_1 + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (file_size_1 == 0x10c2a8) {\nLAB_001050fa:\n        result = compare_strings_00104fa0(file_path_1,file_path_2);\n        return result;\n      }\n    }\n    else if (file_size_1 == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      section_offset_1 = *(long *)(file_header_1 + 0x10) + *(long *)(*(long *)(file_header_1 + 0x20) + 0x30);\n      result = *(long *)(file_header_2 + 0x10) + *(long *)(file_size_1 + 0x30);\n      if (section_offset_1 == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(section_offset_1 < result) | 1);\n    }\n    return result;\n  }\n  uVar15 = *DAT_0010b780;\n  print_error_message_00106530();\n  file_header_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,uVar15,DAT_0010b770);\n  file_header_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,result,DAT_0010b768);\n  if ((file_header_1 == 0) || (unaff_R13 = file_header_2, file_header_2 == 0)) {\n    file_header_2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file_header_1 + 0x20) == 0x10c2a8) || (*(long *)(file_header_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  section_offset_1 = *(ulong *)(*(long *)(file_header_1 + 0x20) + 0x30);\n  section_offset_2 = *(ulong *)(*(long *)(file_header_2 + 0x20) + 0x30);\n  section_end_1 = *(long *)(file_header_1 + 0x10) + section_offset_1;\n  section_end_2 = *(long *)(unaff_R13 + 0x10) + section_offset_2;\n  bVar16 = section_end_1 < section_end_2;\n  if ((section_end_1 != section_end_2) || (bVar16 = section_offset_1 < section_offset_2, section_offset_1 != section_offset_2)) {\n    return (ulong)(-(uint)bVar16 | 1);\n  }\n  file_content_1 = *(char **)(file_header_1 + 8);\n  file_content_2 = *(char **)(unaff_R13 + 8);\n  content_length_1 = strlen(file_content_1);\n  content_length_2 = strlen(file_content_2);\n  compilation_type_1 = strstr(file_content_1,\"gnu_compiled\");\n  if (compilation_type_1 == (char *)0x0) {\n    compilation_type_2 = strstr(file_content_1,\"gcc2_compiled\");\n    compilation_type_1 = strstr(file_content_2,\"gnu_compiled\");\n    if ((compilation_type_1 == (char *)0x0) && (compilation_type_1 = strstr(file_content_2,\"gcc2_compiled\"), compilation_type_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (compilation_type_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    compilation_type_1 = strstr(file_content_2,\"gnu_compiled\");\n    if (compilation_type_1 == (char *)0x0) {\n      compilation_type_2 = strstr(file_content_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (compilation_type_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  is_relocatable = *(uint *)(unaff_R13 + 0x18) & 0x4000;\n  if ((*(byte *)(file_header_1 + 0x19) & 0x40) == 0) {\n    if ((content_length_1 < 3) || (file_content_1[content_length_1 - 2] != '.')) {\n      if (is_relocatable != 0) {\n        return 1;\n      }\n      if ((content_length_2 < 3) || (file_content_2[content_length_2 - 2] != '.')) goto LAB_00103202;\n      bVar16 = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = file_content_1[content_length_1 - 1];\n    bVar16 = cVar1 == 'o' || cVar1 == 'a';\n    if (is_relocatable == 0) {\n      if ((content_length_2 < 3) || (file_content_2[content_length_2 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (is_relocatable != 0) goto LAB_00103202;\n    if (content_length_2 < 3) {\n      return 0xffffffff;\n    }\n    if (file_content_2[content_length_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    bVar16 = true;\nLAB_001031e7:\n    if ((file_content_2[content_length_2 - 1] != 'o') && (file_content_2[content_length_2 - 1] != 'a')) {\n      if (bVar16) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!bVar16) {\n    return 1;\n  }\nLAB_00103202:\n  result = compare_strings_00104fa0(uVar15,result);\n  return result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "compare_binary_files_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "handle_lto_object_001049c0",
                "pcVar1": "fileName",
                "pcVar2": "compareFunction",
                "cVar3": "needsPlugin",
                "iVar4": "result",
                "uVar5": "isSlimLTO",
                "uVar6": "translation",
                "lVar7": "arrayIndex",
                "puVar8": "objectPointer",
                "puVar11": "objectPointer2",
                "puVar12": "tempPointer1",
                "puVar13": "tempPointer2",
                "puVar14": "tempPointer3",
                "puVar15": "tempPointer4",
                "unaff_RBX": "currentPointer1",
                "__ptr": "currentPointer2",
                "unaff_RBP": "basePointer",
                "unaff_R12": "loopCounter1",
                "unaff_R13": "loopCounter2",
                "unaff_R14": "loopIncrement",
                "unaff_R15": "loopCounter3",
                "bVar16": "loopFlag",
                "bVar17": "loopByte",
                "unaff_retaddr": "returnAddress",
                "uVar18": "pluginFlag",
                "in_stack_00000008": "stackVar1",
                "in_stack_00000010": "stackVar2",
                "in_stack_00000018": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\nvoid handleLTOObject_001049c0(void)\n\n{\n  char *fileName;\n  code *compareFunction;\n  char needsPlugin;\n  int result;\n  uint isSlimLTO;\n  undefined8 translation;\n  long arrayIndex;\n  undefined8 *objectPointer;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *currentPointer1;\n  undefined8 *currentPointer2;\n  undefined8 *basePointer;\n  undefined8 *objectPointer2;\n  undefined8 *tempPointer1;\n  undefined8 *in_R8;\n  undefined8 *tempPointer2;\n  undefined8 *in_R9;\n  undefined8 *tempPointer3;\n  undefined8 *tempPointer4;\n  undefined8 *loopCounter1;\n  undefined8 *loopCounter2;\n  undefined8 *loopIncrement;\n  undefined8 *loopCounter3;\n  bool loopFlag;\n  byte loopByte;\n  ulong returnAddress;\n  ulong pluginFlag;\n  undefined8 stackVar1;\n  undefined8 *stackVar2;\n  undefined8 *stackVar3;\n  undefined8 stackVar4;\n  void *stackVar5;\n  undefined8 *stackVar6;\n  \n  loopByte = 0;\n  do {\n    currentPointer1 = (undefined8 *)((long)currentPointer1 + (long)loopIncrement);\nLAB_001049c3:\n    do {\n      do {\n        loopCounter2 = (undefined8 *)((long)loopCounter2 + (long)loopIncrement);\n        tempPointer4 = loopCounter1;\n        tempPointer1 = basePointer;\n        if (loopCounter1 <= loopCounter2) goto LAB_00104b15;\nLAB_001049cf:\n        objectPointer = (undefined8 *)\n                 (**(code **)(basePointer[1] + 0x270))\n                           (basePointer,returnAddress & 0xffffffff,loopCounter2,loopCounter3);\n        objectPointer2 = basePointer;\n        tempPointer1 = loopCounter2;\n        tempPointer4 = loopCounter3;\n        if (objectPointer == (undefined8 *)0x0) goto LAB_00102eb0;\n        fileName = (char *)objectPointer[1];\n        if (((fileName == (char *)0x0) || (*fileName != '_')) || (fileName[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isSlimLTO = (uint)(objectPointer[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isSlimLTO != 0) goto LAB_00104a2d;\n          loopCounter2 = (undefined8 *)((long)loopCounter2 + (long)loopIncrement);\n          tempPointer4 = loopCounter1;\n          tempPointer1 = basePointer;\n          if (loopCounter1 <= loopCounter2) {\nLAB_00104b15:\n            currentPointer1 = (undefined8 *)((long)currentPointer1 - (long)stackVar3);\n            if (loopIncrement == (undefined8 *)0x8) {\n              lVar9 = tempPointer1[1];\n              objectPointer2 = (undefined8 *)((long)currentPointer1 + 7);\n              if (-1 < (long)currentPointer1) {\n                objectPointer2 = currentPointer1;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              compareFunction = *(code **)(lVar9 + 0x208);\n              objectPointer2 = (undefined8 *)((long)objectPointer2 >> 3);\n            }\n            else {\n              objectPointer2 = (undefined8 *)((long)currentPointer1 / (long)loopIncrement);\n              lVar9 = tempPointer1[1];\n              compareFunction = *(code **)(lVar9 + 0x208);\n            }\n            basePointer = tempPointer1;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = tempPointer1;\n              DAT_0010b770 = (undefined8 *)(*compareFunction)(tempPointer1);\n              DAT_0010b768 = (undefined8 *)(**(code **)(tempPointer1[1] + 0x208))(tempPointer1);\n              currentPointer1 = stackVar6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_message_00106530(*tempPointer1);\n                currentPointer2 = loopCounter3;\n                goto LAB_00102d8e;\n              }\n              loopCounter1 = (undefined8 *)(ulong)stackVar4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                pluginFlag = (ulong)(DAT_0010b80c != 0);\n                qsort(stackVar6,(size_t)objectPointer2,(size_t)loopCounter1,check_compiled_type_00102fd2);\n                tempPointer4 = (undefined8 *)xmalloc((long)objectPointer2 << 4);\n                tempPointer2 = DAT_0010b770;\n                basePointer = DAT_0010b768;\n                loopIncrement = (undefined8 *)((long)objectPointer2 * (long)loopCounter1 + (long)currentPointer1);\n                objectPointer = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (loopIncrement <= currentPointer1) goto LAB_00102ec2;\n                objectPointer2 = (undefined8 *)\n                          (**(code **)(tempPointer1[1] + 0x270))(tempPointer1,pluginFlag & 0xffffffff,currentPointer1);\n                currentPointer2 = currentPointer1;\n                in_R8 = loopCounter1;\n                stackVar2 = tempPointer4;\n                if (objectPointer2 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackVar6,(size_t)objectPointer2,(size_t)loopCounter1,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              lVar9 = tempPointer1[1];\n            }\n            currentPointer2 = (undefined8 *)0x0;\n            do {\n              tempPointer1 = stackVar6;\n              objectPointer = (undefined8 *)(ulong)DAT_0010b7f8;\n              loopIncrement = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                tempPointer4 = (undefined8 *)(**(code **)(lVar9 + 0x208))(basePointer);\n                if (tempPointer4 == (undefined8 *)0x0) goto LAB_00102ed2;\n                currentPointer1 = currentPointer2 + (long)objectPointer2 * 2;\n                objectPointer2 = currentPointer2;\n                do {\n                  if (currentPointer1 <= objectPointer2) {\nLAB_00104c75:\n                    if (stackVar5 == (void *)0x0) {\n                      free(stackVar6);\n                      free(currentPointer2);\n                      return;\n                    }\n                    free(stackVar5);\n                    free(stackVar6);\n                    free(currentPointer2);\n                    return;\n                  }\n                  objectPointer = tempPointer4;\n                  lVar9 = (**(code **)(basePointer[1] + 0x270))(basePointer,loopIncrement,*objectPointer2);\n                  if (lVar9 == 0) {\n                    print_error_message_00106530(*basePointer,0);\nLAB_00102ed2:\n                    tempPointer1 = (undefined8 *)*basePointer;\n                    print_error_message_00106530();\n                    tempPointer2 = in_R8;\n                    tempPointer3 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  tempPointer1 = objectPointer2 + 1;\n                  objectPointer2 = objectPointer2 + 2;\n                  print_relocated_sections_00105110(basePointer,lVar9,*tempPointer1,stackVar1);\n                } while( true );\n              }\n              loopCounter1 = (undefined8 *)(ulong)stackVar4._4_4_;\n              loopCounter3 = (undefined8 *)(**(code **)(lVar9 + 0x208))(basePointer);\n              if (loopCounter3 == (undefined8 *)0x0) {\n                print_error_message_00106530(*basePointer);\n                tempPointer1 = loopCounter1;\n                if (DAT_0010b80c == 0) {\n                  lVar9 = (**(code **)(basePointer[1] + 0x350))(basePointer);\n                  objectPointer2 = stackVar6;\n                  tempPointer4 = loopCounter1;\n                  if (lVar9 < 1) {\n                    objectPointer = (undefined8 *)0x0;\n                    currentPointer1 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    currentPointer1 = (undefined8 *)xmalloc();\n                    objectPointer = (undefined8 *)(**(code **)(basePointer[1] + 0x358))(basePointer,currentPointer1);\n                    tempPointer1 = tempPointer4;\n                    if ((long)objectPointer < 0) {\n                      tempPointer1 = (undefined8 *)*basePointer;\n                      objectPointer2 = (undefined8 *)print_error_message_00106530(tempPointer1,tempPointer4);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  objectPointer = loopCounter1;\n                  currentPointer1 = stackVar6;\n                  objectPointer2 = (undefined8 *)0x0;\n                  tempPointer4 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = currentPointer1;\n                lVar9 = (**(code **)(basePointer[1] + 0x360))(basePointer,tempPointer4,objectPointer2,objectPointer);\n                loopCounter1 = tempPointer1;\n                if (0 < lVar9) {\n                  loopCounter1 = (undefined8 *)((long)tempPointer1 + lVar9);\n                  stackVar6 = (undefined8 *)xrealloc(stackVar6);\n                  arrayIndex = 0;\n                  do {\n                    stackVar6[(long)((long)tempPointer1 + arrayIndex)] =\n                         (void *)(arrayIndex * 0x30 + (long)stackVar5);\n                    arrayIndex = arrayIndex + 1;\n                  } while (lVar9 != arrayIndex);\n                  stackVar6[(long)((long)tempPointer1 + lVar9)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (currentPointer1 != (undefined8 *)0x0)) {\n                  free(currentPointer1);\n                }\n                if ((*(byte *)((long)basePointer + 0x4a) & 0x10) != 0) {\n                  currentPointer1 = (undefined8 *)*basePointer;\n                  DAT_0010b230 = '\\0';\n                  translation = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_formatted_error_message_00106400(translation);\n                }\n                loopIncrement = (undefined8 *)(ulong)stackVar4._4_4_;\n                loopFlag = DAT_0010b80c != 0;\n                objectPointer2 = (undefined8 *)(ulong)loopFlag;\n                objectPointer = stackVar6;\n                stackVar3 = stackVar6;\n                loopCounter3 = (undefined8 *)(**(code **)(basePointer[1] + 0x208))(basePointer);\n                if (loopCounter3 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                objectPointer2 = (undefined8 *)((long)objectPointer2 * (long)loopCounter1 + (long)tempPointer1);\n                currentPointer1 = tempPointer1;\n                while( true ) {\n                  if (objectPointer2 <= currentPointer1) goto LAB_00104c75;\n                  objectPointer = loopCounter3;\n                  lVar9 = (**(code **)(basePointer[1] + 0x270))(basePointer,loopIncrement,currentPointer1);\n                  if (lVar9 == 0) break;\n                  currentPointer1 = (undefined8 *)((long)currentPointer1 + (long)loopCounter1);\n                  print_relocated_sections_00105110(basePointer,lVar9,0,stackVar1);\n                }\n                print_error_message_00106530(*basePointer,0);\n              }\n              print_error_message_00106530(*basePointer);\n              tempPointer1 = basePointer;\n              tempPointer4 = loopCounter3;\nLAB_00102eb0:\n              print_error_message_00106530(*objectPointer2);\nLAB_00102eb9:\n              print_error_message_00106530(*tempPointer1);\nLAB_00102ec2:\n              objectPointer2 = (undefined8 *)0x0;\n              currentPointer2 = currentPointer1;\n              in_R8 = loopCounter1;\n              tempPointer2 = objectPointer;\n              basePointer = in_R9;\n              stackVar2 = tempPointer4;\nLAB_00104e35:\n              while (in_R9 = tempPointer2, currentPointer2 < loopIncrement) {\n                currentPointer1 = (undefined8 *)((long)currentPointer2 + (long)in_R8);\n                if (currentPointer1 < loopIncrement) {\n                  objectPointer = basePointer;\n                  tempPointer2 = in_R8;\n                  tempPointer3 = in_R9;\n                  puVar10 = (undefined8 *)(**(code **)(tempPointer1[1] + 0x270))();\n                  if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = tempPointer3;\n                    in_R8 = tempPointer2;\n                    tempPointer1 = (undefined8 *)*tempPointer1;\n                    puVar10 = (undefined8 *)print_error_message_00106530();\n                  }\n                  else {\n                    objectPointer = (undefined8 *)objectPointer2[4];\n                    if ((*(uint *)(objectPointer2 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  lVar9 = objectPointer2[2];\nLAB_00102ee7:\n                  if (objectPointer == (undefined8 *)puVar10[4]) {\n                    lVar9 = puVar10[2] - lVar9;\n                    tempPointer2 = basePointer;\n                    tempPointer3 = currentPointer2;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  lVar9 = objectPointer[8] - lVar9;\n                  tempPointer2 = basePointer;\n                  tempPointer3 = currentPointer2;\n                }\n                else {\n                  objectPointer = (undefined8 *)objectPointer2[4];\n                  if ((*(uint *)(objectPointer2 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    lVar9 = objectPointer2[2];\n                    puVar10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  tempPointer2 = basePointer;\n                  tempPointer3 = currentPointer2;\n                  if (*(int *)(tempPointer1[1] + 8) == 5) {\n                    lVar9 = objectPointer2[7];\n                  }\n                  else {\n                    lVar9 = objectPointer2[2];\n                    if ((*(byte *)((long)objectPointer + 0x25) & 0x10) == 0) {\n                      if (currentPointer1 < loopIncrement) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                objectPointer2 = puVar10;\n                currentPointer2 = currentPointer1;\n                basePointer = in_R9;\n                if (lVar9 != 0) {\n                  *tempPointer4 = tempPointer3;\n                  tempPointer4[1] = lVar9;\n                  tempPointer4 = tempPointer4 + 2;\n                }\n              }\n              objectPointer2 = (undefined8 *)((long)tempPointer4 - (long)stackVar2 >> 4);\n              qsort(stackVar2,(size_t)objectPointer2,0x10,FUN_00103533);\n              lVar9 = tempPointer1[1];\n              currentPointer1 = currentPointer2;\n              basePointer = tempPointer1;\n              currentPointer2 = stackVar2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        result = strcmp(fileName + (fileName[2] == '_'),\"__gnu_lto_slim\");\n        stackVar2 = objectPointer;\n        if (result == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVar2 = (undefined8 *)*basePointer;\n            DAT_0010b230 = '\\0';\n            translation = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_formatted_error_message_00106400(translation,stackVar2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          isSlimLTO = (*(uint *)(objectPointer + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(objectPointer + 3) & 0x800082) == 0) && (objectPointer[4] != 0x10c2a8)) &&\n           ((*(byte *)(objectPointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_object_00104d5b:\n          if ((objectPointer[4] != 0x10c2a8) && (objectPointer[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(objectPointer + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_object_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        needsPlugin = (**(code **)(basePointer[1] + 0x230))(basePointer);\n        if (needsPlugin != '\\0') {\n          process_lto_object_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (objectPointer[4] == 0x10c2a8);\nLAB_00104cba:\n    needsPlugin = (**(code **)(basePointer[1] + 0x230))(basePointer);\n    if (needsPlugin != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (currentPointer1 != loopCounter2) {\n      if (loopIncrement == (undefined8 *)0x8) {\n        *currentPointer1 = *loopCounter2;\n        handleLTOObject_001049c0();\n        return;\n      }\n      for (; loopIncrement != (undefined8 *)0x0; loopIncrement = (undefined8 *)((long)loopIncrement + -1)) {\n        *(undefined *)currentPointer1 = *(undefined *)loopCounter2;\n        loopCounter2 = (undefined8 *)((long)loopCounter2 + (ulong)loopByte * -2 + 1);\n        currentPointer1 = (undefined8 *)((long)currentPointer1 + (ulong)loopByte * -2 + 1);\n      }\n      handleLTOObject_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  tempPointer4 = (undefined8 *)((long)loopCounter1 * (long)loopIncrement);\n  loopCounter1 = (undefined8 *)((long)stackVar3 + (long)tempPointer4);\n  currentPointer1 = stackVar3;\n  tempPointer1 = basePointer;\n  if (stackVar3 < loopCounter1) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)loopFlag;\n  loopCounter2 = stackVar3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "handle_lto_object_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_list_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "supportedTargets",
                "iVar2": "totalCharsPrinted",
                "iVar3": "charsPrinted",
                "pcVar4": "translationString",
                "pcVar9": "separator",
                "lVar5": "index",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "target",
                "ppcVar8": "demangler",
                "local_3c": "localVariable"
            },
            "code": "\nvoid printSymbolList_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long supportedTargets;\n  int totalCharsPrinted;\n  int charsPrinted;\n  char *translationString;\n  long index;\n  size_t stringLength;\n  long *targetList;\n  long *target;\n  char **demangler;\n  char *separator;\n  uint localVariable;\n  \n  supportedTargets = DAT_0010b820;\n  translationString = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,translationString,supportedTargets);\n  translationString = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*translationString == ' ') {\n    supportedTargets = 1;\n    do {\n      index = supportedTargets;\n      supportedTargets = index + 1;\n    } while (translationString[index] == ' ');\n    localVariable = (uint)index;\n  }\n  else {\n    localVariable = 0;\n  }\n  totalCharsPrinted = fprintf(outputFile,\"%s\",translationString);\n  separator = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    stringLength = strlen(*demangler);\n    if (0x4a < (long)totalCharsPrinted + stringLength) {\n      fprintf(outputFile,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalCharsPrinted = fprintf(outputFile,\"%.*s\",(ulong)localVariable,translationString);\n    }\n    charsPrinted = fprintf(outputFile,\"%s\\\"%s\\\"\",separator,*demangler);\n    totalCharsPrinted = totalCharsPrinted + charsPrinted;\n    separator = \", \";\n  }\n  fputc(10,outputFile);\n  translationString = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,translationString);\n  translationString = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,translationString);\n  supportedTargets = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    translationString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,translationString);\n  }\n  else {\n    translationString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,translationString,supportedTargets);\n  }\n  targetList = (long *)bfd_target_list();\n  target = targetList;\n  while( true ) {\n    supportedTargets = *target;\n    target = target + 1;\n    if (supportedTargets == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    translationString = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,translationString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fseek",
                "bfd_target_list",
                "exit",
                "fprintf",
                "strlen",
                "dcgettext",
                "fputc",
                "free",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "print_symbol_list_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_lto_object_00104d5b",
                "in_RCX": "arguments",
                "pcVar1": "function_name",
                "pcVar2": "function_pointer",
                "cVar3": "comparison_result",
                "iVar4": "string_comparison_result",
                "uVar5": "boolean_result",
                "uVar6": "unused_variable",
                "puVar7": "pointer_variable",
                "lVar8": "long_variable_1",
                "lVar9": "long_variable_2",
                "puVar10": "pointer_variable_2",
                "__ptr": "relocated_sections",
                "puVar11": "pointer_variable_3",
                "unaff_RBX": "remaining_pointers",
                "unaff_RBP": "base_pointer",
                "puVar12": "pointer_variable_4",
                "unaff_R12": "loop_variable_1",
                "unaff_R13": "loop_variable_2",
                "unaff_R14": "loop_variable_3",
                "unaff_R15": "loop_variable_4",
                "bVar16": "boolean_variable",
                "bVar17": "byte_variable",
                "unaff_retaddr": "return_address",
                "uVar18": "ulong_variable",
                "param_7": "additional_parameter",
                "param_8": "dynamic_array",
                "param_9": "length_of_array",
                "param_13": "additional_parameter_2",
                "param_14": "input_array",
                "in_stack_00000038": "stack_variable",
                "puVar15": "pointer_variable_5"
            },
            "code": "\nvoid process_lto_object_00104d5b(void)\n\n{\n  char *function_name;\n  code *function_pointer;\n  char comparison_result;\n  int string_comparison_result;\n  uint boolean_result;\n  undefined8 unused_variable;\n  undefined8 *pointer_variable;\n  long long_variable_1;\n  long long_variable_2;\n  undefined8 *pointer_variable_2;\n  undefined8 *arguments;\n  undefined8 *remaining_pointers;\n  undefined8 *relocated_sections;\n  undefined8 *pointer_variable_3;\n  undefined8 *base_pointer;\n  undefined8 *pointer_variable_4;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *pointer_variable_5;\n  undefined8 *loop_variable_1;\n  undefined8 *loop_variable_2;\n  undefined8 *loop_variable_3;\n  undefined8 *loop_variable_4;\n  bool boolean_variable;\n  byte byte_variable;\n  ulong return_address;\n  ulong ulong_variable;\n  undefined8 additional_parameter;\n  undefined8 *dynamic_array;\n  undefined8 *length_of_array;\n  undefined8 stack_variable;\n  void *additional_parameter_2;\n  undefined8 *input_array;\n  \n  byte_variable = 0;\n  do {\n    if ((arguments[4] != 0x10c2a8) && (arguments[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      loop_variable_2 = (undefined8 *)((long)loop_variable_2 + (long)loop_variable_3);\n      pointer_variable_5 = loop_variable_1;\n      pointer_variable_4 = base_pointer;\n      if (loop_variable_1 <= loop_variable_2) goto LAB_00104b15;\nLAB_001049cf:\n      arguments = (undefined8 *)\n               (**(code **)(base_pointer[1] + 0x270))\n                         (base_pointer,return_address & 0xffffffff,loop_variable_2,loop_variable_4);\n      pointer_variable_3 = base_pointer;\n      pointer_variable_4 = loop_variable_2;\n      pointer_variable_5 = loop_variable_4;\n      if (arguments == (undefined8 *)0x0) goto LAB_00102eb0;\n      function_name = (char *)arguments[1];\n      if (((function_name == (char *)0x0) || (*function_name != '_')) || (function_name[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        boolean_result = (uint)(arguments[4] == 0x10c2a8);\nLAB_00104af9:\n        if (boolean_result != 0) goto LAB_00104a2d;\n        loop_variable_2 = (undefined8 *)((long)loop_variable_2 + (long)loop_variable_3);\n        pointer_variable_5 = loop_variable_1;\n        pointer_variable_4 = base_pointer;\n        if (loop_variable_1 <= loop_variable_2) {\nLAB_00104b15:\n          remaining_pointers = (undefined8 *)((long)remaining_pointers - (long)length_of_array);\n          if (loop_variable_3 == (undefined8 *)0x8) {\n            long_variable_2 = pointer_variable_4[1];\n            pointer_variable_3 = (undefined8 *)((long)remaining_pointers + 7);\n            if (-1 < (long)remaining_pointers) {\n              pointer_variable_3 = remaining_pointers;\n            }\n            in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n            function_pointer = *(code **)(long_variable_2 + 0x208);\n            pointer_variable_3 = (undefined8 *)((long)pointer_variable_3 >> 3);\n          }\n          else {\n            pointer_variable_3 = (undefined8 *)((long)remaining_pointers / (long)loop_variable_3);\n            long_variable_2 = pointer_variable_4[1];\n            function_pointer = *(code **)(long_variable_2 + 0x208);\n          }\n          base_pointer = pointer_variable_4;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = pointer_variable_4;\n            DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_variable_4);\n            DAT_0010b768 = (undefined8 *)(**(code **)(pointer_variable_4[1] + 0x208))(pointer_variable_4);\n            remaining_pointers = input_array;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              print_error_message_00106530(*pointer_variable_4);\n              relocated_sections = loop_variable_4;\n              goto LAB_00102d8e;\n            }\n            loop_variable_1 = (undefined8 *)(ulong)stack_variable._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              ulong_variable = (ulong)(DAT_0010b80c != 0);\n              qsort(input_array,(size_t)pointer_variable_3,(size_t)loop_variable_1,check_compiled_type_00102fd2);\n              pointer_variable_5 = (undefined8 *)xmalloc((long)pointer_variable_3 << 4);\n              puVar13 = DAT_0010b770;\n              base_pointer = DAT_0010b768;\n              loop_variable_3 = (undefined8 *)((long)pointer_variable_3 * (long)loop_variable_1 + (long)remaining_pointers);\n              arguments = DAT_0010b770;\n              in_R9 = DAT_0010b768;\n              if (loop_variable_3 <= remaining_pointers) goto LAB_00102ec2;\n              pointer_variable_3 = (undefined8 *)\n                        (**(code **)(pointer_variable_4[1] + 0x270))(pointer_variable_4,ulong_variable & 0xffffffff,remaining_pointers);\n              relocated_sections = remaining_pointers;\n              in_R8 = loop_variable_1;\n              dynamic_array = pointer_variable_5;\n              if (pointer_variable_3 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(input_array,(size_t)pointer_variable_3,(size_t)loop_variable_1,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            long_variable_2 = pointer_variable_4[1];\n          }\n          relocated_sections = (undefined8 *)0x0;\n          do {\n            pointer_variable_4 = input_array;\n            pointer_variable = (undefined8 *)(ulong)DAT_0010b7f8;\n            loop_variable_3 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              pointer_variable_5 = (undefined8 *)(**(code **)(long_variable_2 + 0x208))(base_pointer);\n              if (pointer_variable_5 == (undefined8 *)0x0) goto LAB_00102ed2;\n              remaining_pointers = relocated_sections + (long)pointer_variable_3 * 2;\n              pointer_variable_3 = relocated_sections;\n              do {\n                if (remaining_pointers <= pointer_variable_3) {\nLAB_00104c75:\n                  if (additional_parameter_2 != (void *)0x0) {\n                    free(additional_parameter_2);\n                    free(input_array);\n                    free(relocated_sections);\n                    return;\n                  }\n                  free(input_array);\n                  free(relocated_sections);\n                  return;\n                }\n                pointer_variable = pointer_variable_5;\n                long_variable_2 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,loop_variable_3,*pointer_variable_3);\n                if (long_variable_2 == 0) {\n                  print_error_message_00106530(*base_pointer,0);\nLAB_00102ed2:\n                  pointer_variable_4 = (undefined8 *)*base_pointer;\n                  print_error_message_00106530();\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                pointer_variable_4 = pointer_variable_3 + 1;\n                pointer_variable_3 = pointer_variable_3 + 2;\n                print_relocated_sections_00105110(base_pointer,long_variable_2,*pointer_variable_4,additional_parameter);\n              } while( true );\n            }\n            loop_variable_1 = (undefined8 *)(ulong)stack_variable._4_4_;\n            loop_variable_4 = (undefined8 *)(**(code **)(long_variable_2 + 0x208))(base_pointer);\n            if (loop_variable_4 == (undefined8 *)0x0) {\n              print_error_message_00106530(*base_pointer);\n              pointer_variable_4 = loop_variable_1;\n              if (DAT_0010b80c == 0) {\n                long_variable_2 = (**(code **)(base_pointer[1] + 0x350))(base_pointer);\n                pointer_variable_3 = input_array;\n                pointer_variable_5 = loop_variable_1;\n                if (long_variable_2 < 1) {\n                  pointer_variable = (undefined8 *)0x0;\n                  remaining_pointers = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  remaining_pointers = (undefined8 *)xmalloc();\n                  pointer_variable = (undefined8 *)(**(code **)(base_pointer[1] + 0x358))(base_pointer,remaining_pointers);\n                  pointer_variable_4 = pointer_variable_5;\n                  if ((long)pointer_variable < 0) {\n                    pointer_variable_4 = (undefined8 *)*base_pointer;\n                    pointer_variable_3 = (undefined8 *)print_error_message_00106530(pointer_variable_4,pointer_variable_5);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                pointer_variable = loop_variable_1;\n                remaining_pointers = input_array;\n                pointer_variable_3 = (undefined8 *)0x0;\n                pointer_variable_5 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = remaining_pointers;\n              long_variable_2 = (**(code **)(base_pointer[1] + 0x360))(base_pointer,pointer_variable_5,pointer_variable_3,pointer_variable);\n              loop_variable_1 = pointer_variable_4;\n              if (0 < long_variable_2) {\n                loop_variable_1 = (undefined8 *)((long)pointer_variable_4 + long_variable_2);\n                input_array = (undefined8 *)xrealloc(input_array);\n                long_variable_1 = 0;\n                do {\n                  input_array[(long)pointer_variable_4 + long_variable_1] = (void *)(long_variable_1 * 0x30 + (long)additional_parameter_2);\n                  long_variable_1 = long_variable_1 + 1;\n                } while (long_variable_2 != long_variable_1);\n                input_array[(long)pointer_variable_4 + long_variable_2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (remaining_pointers != (undefined8 *)0x0)) {\n                free(remaining_pointers);\n              }\n              if ((*(byte *)((long)base_pointer + 0x4a) & 0x10) != 0) {\n                remaining_pointers = (undefined8 *)*base_pointer;\n                DAT_0010b230 = '\\0';\n                unused_variable = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                print_formatted_error_message_00106400(unused_variable);\n              }\n              loop_variable_3 = (undefined8 *)(ulong)stack_variable._4_4_;\n              boolean_variable = DAT_0010b80c != 0;\n              pointer_variable_3 = (undefined8 *)(ulong)boolean_variable;\n              arguments = input_array;\n              length_of_array = input_array;\n              loop_variable_4 = (undefined8 *)(**(code **)(base_pointer[1] + 0x208))(base_pointer);\n              if (loop_variable_4 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              pointer_variable_3 = (undefined8 *)((long)pointer_variable_3 * (long)loop_variable_1 + (long)pointer_variable_4);\n              remaining_pointers = pointer_variable_4;\n              while( true ) {\n                if (pointer_variable_3 <= remaining_pointers) goto LAB_00104c75;\n                arguments = loop_variable_4;\n                long_variable_2 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,loop_variable_3,remaining_pointers);\n                if (long_variable_2 == 0) break;\n                remaining_pointers = (undefined8 *)((long)remaining_pointers + (long)loop_variable_1);\n                print_relocated_sections_00105110(base_pointer,long_variable_2,0,additional_parameter);\n              }\n              print_error_message_00106530(*base_pointer,0);\n            }\n            print_error_message_00106530(*base_pointer);\n            pointer_variable_4 = base_pointer;\n            pointer_variable_5 = loop_variable_4;\nLAB_00102eb0:\n            print_error_message_00106530(*pointer_variable_3);\nLAB_00102eb9:\n            print_error_message_00106530(*pointer_variable_4);\nLAB_00102ec2:\n            pointer_variable_3 = (undefined8 *)0x0;\n            relocated_sections = remaining_pointers;\n            in_R8 = loop_variable_1;\n            puVar13 = arguments;\n            base_pointer = in_R9;\n            dynamic_array = pointer_variable_5;\nLAB_00104e35:\n            while (in_R9 = puVar13, relocated_sections < loop_variable_3) {\n              remaining_pointers = (undefined8 *)((long)relocated_sections + (long)in_R8);\n              if (remaining_pointers < loop_variable_3) {\n                pointer_variable = base_pointer;\n                puVar13 = in_R8;\n                puVar14 = in_R9;\n                pointer_variable_2 = (undefined8 *)(**(code **)(pointer_variable_4[1] + 0x270))();\n                if (pointer_variable_2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = puVar14;\n                  in_R8 = puVar13;\n                  pointer_variable_4 = (undefined8 *)*pointer_variable_4;\n                  pointer_variable_2 = (undefined8 *)print_error_message_00106530();\n                }\n                else {\n                  pointer_variable = (undefined8 *)pointer_variable_3[4];\n                  if ((*(uint *)(pointer_variable_3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                long_variable_2 = pointer_variable_3[2];\nLAB_00102ee7:\n                if (pointer_variable == (undefined8 *)pointer_variable_2[4]) {\n                  long_variable_2 = pointer_variable_2[2] - long_variable_2;\n                  puVar13 = base_pointer;\n                  puVar14 = relocated_sections;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                long_variable_2 = pointer_variable[8] - long_variable_2;\n                puVar13 = base_pointer;\n                puVar14 = relocated_sections;\n              }\n              else {\n                pointer_variable = (undefined8 *)pointer_variable_3[4];\n                if ((*(uint *)(pointer_variable_3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  long_variable_2 = pointer_variable_3[2];\n                  pointer_variable_2 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                pointer_variable_2 = (undefined8 *)0x0;\nLAB_00104e95:\n                puVar13 = base_pointer;\n                puVar14 = relocated_sections;\n                if (*(int *)(pointer_variable_4[1] + 8) == 5) {\n                  long_variable_2 = pointer_variable_3[7];\n                }\n                else {\n                  long_variable_2 = pointer_variable_3[2];\n                  if ((*(byte *)((long)pointer_variable + 0x25) & 0x10) == 0) {\n                    if (remaining_pointers < loop_variable_3) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              pointer_variable_3 = pointer_variable_2;\n              relocated_sections = remaining_pointers;\n              base_pointer = in_R9;\n              if (long_variable_2 != 0) {\n                *pointer_variable_5 = puVar14;\n                pointer_variable_5[1] = long_variable_2;\n                pointer_variable_5 = pointer_variable_5 + 2;\n              }\n            }\n            pointer_variable_3 = (undefined8 *)((long)pointer_variable_5 - (long)dynamic_array >> 4);\n            qsort(dynamic_array,(size_t)pointer_variable_3,0x10,compare_and_execute_00103533);\n            long_variable_2 = pointer_variable_4[1];\n            remaining_pointers = relocated_sections;\n            base_pointer = pointer_variable_4;\n            relocated_sections = dynamic_array;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      string_comparison_result = strcmp(function_name + (function_name[2] == '_'),\"__gnu_lto_slim\");\n      dynamic_array = arguments;\n      if (string_comparison_result == 0) {\n        if (DAT_0010b230 != '\\0') {\n          dynamic_array = (undefined8 *)*base_pointer;\n          DAT_0010b230 = '\\0';\n          unused_variable = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_formatted_error_message_00106400(unused_variable,dynamic_array);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        boolean_result = (*(uint *)(arguments + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(arguments + 3) & 0x800082) == 0) && (arguments[4] != 0x10c2a8)) &&\n         ((*(byte *)(arguments[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(arguments + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    comparison_result = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (comparison_result != '\\0') {\n      process_lto_object_00104d5b_00102c19();\n      return;\n    }\n  }\n  else {\n    if (arguments[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    comparison_result = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (comparison_result != '\\0') {\n      process_lto_object_00104d5b_00102c19();\n      return;\n    }\n  }\n  if (remaining_pointers != loop_variable_2) {\n    if (loop_variable_3 != (undefined8 *)0x8) {\n      for (; loop_variable_3 != (undefined8 *)0x0; loop_variable_3 = (undefined8 *)((long)loop_variable_3 + -1)) {\n        *(undefined *)remaining_pointers = *(undefined *)loop_variable_2;\n        loop_variable_2 = (undefined8 *)((long)loop_variable_2 + (ulong)byte_variable * -2 + 1);\n        remaining_pointers = (undefined8 *)((long)remaining_pointers + (ulong)byte_variable * -2 + 1);\n      }\n      handle_lto_object_001049c0();\n      return;\n    }\n    *remaining_pointers = *loop_variable_2;\n    handle_lto_object_001049c0();\n    return;\n  }\n  remaining_pointers = (undefined8 *)((long)remaining_pointers + (long)loop_variable_3);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  pointer_variable_5 = (undefined8 *)((long)loop_variable_1 * (long)loop_variable_3);\n  loop_variable_1 = (undefined8 *)((long)length_of_array + (long)pointer_variable_5);\n  remaining_pointers = length_of_array;\n  pointer_variable_4 = base_pointer;\n  if (length_of_array < loop_variable_1) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)boolean_variable;\n  loop_variable_2 = length_of_array;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00102c19",
                "qsort",
                "FUN_001049c0",
                "FUN_00106530",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00103533",
                "FUN_00102fd2",
                "dcgettext",
                "free",
                "xrealloc",
                "FUN_00106400",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_and_exit_00106300",
                "param_1": "error_code",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "arg9",
                "param_10": "format_str",
                "in_AL": "flag",
                "__arg": "arg_ptr",
                "__format": "format",
                "local_d8": "length",
                "local_d4": "value",
                "local_d0": "stack_ptr",
                "local_c8": "buffer_ptr",
                "local_b8": "buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "error_code_copy",
                "local_78": "arg2_copy",
                "local_68": "arg3_copy",
                "local_58": "arg4_copy",
                "local_48": "arg5_copy",
                "local_38": "arg6_copy",
                "local_28": "arg7_copy",
                "local_18": "arg8_copy"
            },
            "code": "\n\n\nvoid print_error_message_and_exit_00106300(undefined4 error_code,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 arg9,undefined8 format_str,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 *arg_ptr;\n  char *format;\n  undefined4 length;\n  undefined4 value;\n  undefined *stack_ptr;\n  undefined *buffer_ptr;\n  undefined buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 error_code_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  undefined4 arg4_copy;\n  undefined4 arg5_copy;\n  undefined4 arg6_copy;\n  undefined4 arg7_copy;\n  undefined4 arg8_copy;\n  \n  arg_ptr = &length;\n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    arg2_copy = arg2;\n    arg3_copy = arg3;\n    arg4_copy = arg4;\n    arg5_copy = arg5;\n    arg6_copy = arg6;\n    arg7_copy = arg7;\n    arg8_copy = arg8;\n  }\n  stack_ptr = &stack0x00000008;\n  length = 8;\n  buffer_ptr = buffer;\n  value = 0x30;\n  param_10_copy = format_str;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_formatted_error_message_001063a0();\n  format = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,format,arg_ptr);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_001053c0",
                "FUN_00103729",
                "FUN_00104370",
                "FUN_001055f0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_condition_met_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_condition_met_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_condition_met_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorString",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "unusedVariable"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorString)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 unusedVariable;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorString != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorString,errorMessage,unusedVariable);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,unusedVariable);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_00106530",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        }
    },
    "used_tokens": 82348,
    "layers": [
        [
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00103573",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00103533",
            "FUN_00103abf",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_0010268b",
            "FUN_001063a0",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00106400",
            "FUN_00106530",
            "FUN_00102739",
            "FUN_00106300"
        ],
        [
            "FUN_00103c00",
            "FUN_00104370",
            "FUN_00102f9f",
            "FUN_00103463",
            "FUN_0010249f",
            "FUN_00104fa0",
            "FUN_00104740"
        ],
        [
            "FUN_00102fc3",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00103b49",
            "FUN_00103bf6",
            "FUN_00105050"
        ],
        [
            "FUN_00103bec",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0"
        ],
        [
            "FUN_001043d0"
        ],
        [
            "FUN_001055f0"
        ],
        [
            "FUN_001054d0"
        ],
        [
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_001035a2",
            "FUN_0010651a"
        ],
        [
            "FUN_00103a66",
            "FUN_001053c0",
            "FUN_001064b0"
        ]
    ],
    "locked_functions": []
}