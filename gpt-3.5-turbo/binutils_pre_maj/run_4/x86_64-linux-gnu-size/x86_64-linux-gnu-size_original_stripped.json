{
    "functions": {
        "FUN_001030e0": {
            "renaming": {
                "FUN_001030e0": "initialize_program_001030e0",
                "completed_0": "isInitialized",
                "__cxa_finalize": "cleanup",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "deregisterTMClones"
            },
            "code": "\nvoid initializeProgram_001030e0(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  cleanup(dynamicSharedObjectHandle);\n  deregisterTMClones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030e0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_001030e0"
        },
        "FUN_00103d20": {
            "renaming": {
                "FUN_00103d20": "print_error_message_00103d20",
                "param_1": "filename",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00103d20(long filename)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (filename != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,filename,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_nonfatal.cold",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103d20",
            "calling": [
                "display_bfd.cold",
                "FUN_001023b6",
                "print_sizes"
            ],
            "imported": false,
            "current_name": "print_error_message_00103d20"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "usage",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001080f8": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001080f8",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_001080f8"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "display_bfd.cold",
                "print_sizes"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_00108050": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108050",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_00108050"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00103040": {
            "renaming": {
                "FUN_00103040": "FUNC_00103040"
            },
            "code": "\nvoid processEntry FUNC_00103040(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103040",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103040"
        },
        "FUN_00108058": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108058",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_00108058"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_001081a0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081a0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_001081a0"
        },
        "FUN_001081a8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081a8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_001081a8"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "rprint_number",
                "rprint_number.cold",
                "size_number"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010274a": {
            "renaming": {
                "FUN_0010274a": "FUNC_0010274a"
            },
            "code": "\nvoid FUNC_0010274a(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010274a",
            "calling": [
                "sysv_internal_printer"
            ],
            "imported": false,
            "current_name": "FUNC_0010274a"
        },
        "FUN_0010274b": {
            "renaming": {
                "FUN_0010274b": "print_error_0010274b",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printError_0010274b(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010274b",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_0010274b"
        },
        "FUN_00108180": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108180",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00108180"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_performance_monitoring_00102000",
                "ctx": "context",
                "iVar1": "monitoringStatus"
            },
            "code": "\nint initializePerformanceMonitoring_00102000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringStatus;\n  \n  monitoringStatus = __gmon_start__();\n  return monitoringStatus;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_performance_monitoring_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "display_bfd.cold",
                "rprint_number",
                "rprint_number.cold",
                "main",
                "print_sizes",
                "print_sizes.cold",
                "sysv_one_line"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00103cc0": {
            "renaming": {
                "FUN_00103cc0": "process_data_00103cc0",
                "param_1": "param_a",
                "param_2": "param_b",
                "param_2[8]": "VAR_TOTAL",
                "param_2[6]": "VAR_LINE"
            },
            "code": "\nvoid process_data_00103cc0(undefined8 param_a,undefined8 *param_b)\n\n{\n  if ((((*(uint *)((long)param_b + 0x24) != 0) && (param_b != (undefined8 *)0x108370)) &&\n      ((*(uint *)((long)param_b + 0x24) & 0x1000) == 0)) && (param_b != (undefined8 *)0x108258)) {\n    svi_total = svi_total + VAR_TOTAL;\n    sysv_one_line(*param_b,VAR_TOTAL,VAR_LINE);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "sysv_internal_printer.cold",
                "sysv_one_line"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103cc0",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "process_data_00103cc0"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00108068": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108068",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00108068"
        },
        "FUN_00102360": {
            "renaming": {
                "FUN_00102360": "handle_file_error_00102360",
                "piVar1": "errorCodePtr",
                "uVar2": "errorMessage",
                "__errno_location": "getErrorLocation",
                "dcgettext": "getTranslation",
                "non_fatal": "handleNonFatalError",
                "strerror": "getErrorString",
                "return_code": "errorCode"
            },
            "code": "\nvoid handleFileError_00102360(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorMessage;\n  \n  errorCodePtr = getErrorLocation();\n  if (*errorCodePtr == 2) {\n    errorMessage = getTranslation(0,\"\\'%s\\': No such file\",5);\n    handleNonFatalError(errorMessage);\n  }\n  else {\n    getErrorString(*errorCodePtr);\n    errorMessage = getTranslation(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    handleNonFatalError(errorMessage);\n  }\n  errorCode = 1;\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal",
                "__errno_location",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "handle_file_error_00102360"
        },
        "FUN_00102a90": {
            "renaming": {
                "FUN_00102a90": "print_section_sizes_00102a90",
                "param_1": "parameters",
                "extraout_RDX": "sectionAddress1",
                "extraout_RDX_00": "lvar2_1",
                "extraout_RDX_01": "sectionAddress2",
                "uVar3": "extraData",
                "__ptr": "memoryPtr",
                "iVar4": "index",
                "cVar5": "flag",
                "pvVar6": "ptrVar",
                "pcVar7": "strVar",
                "iVar8": "formatVar",
                "lVar9": "count",
                "bVar10": "boolVar1",
                "bVar11": "boolVar2",
                "puVar12": "ptr",
                "show_common": "showCommon",
                "common_size": "commonSize",
                "bfd_nonfatal": "handleFatalError",
                "xexit": "exitProgram",
                "xmalloc": "allocateMemory",
                "svi_total": "totalSvi",
                "svi_maxvma": "maxSvi",
                "svi_namelen": "nameLengthSvi",
                "sysv_internal_sizer": "sizerFunction",
                "size_number": "numberSizer",
                "sysv_internal_printer": "printerFunction",
                "selected_output_format": "outputFormat",
                "bsssize": "bssSize",
                "datasize": "dataSize1",
                "textsize": "textSize1",
                "berkeley_or_gnu_sum": "sumFunction",
                "total_textsize": "totalTextSize",
                "total_datasize": "totalDataSize",
                "total_bsssize": "totalBssSize",
                "_stdout": "standardOutput",
                "radix": "numberSystem"
            },
            "code": "\n\n\nvoid printSectionSizes_00102a90(char **parameters)\n\n{\n  long lVar1;\n  undefined8 sectionAddress1;\n  long lVar2;\n  long lvar2_1;\n  undefined8 sectionAddress2;\n  undefined8 extraData;\n  void *memoryPtr;\n  int index;\n  char flag;\n  void *ptrVar;\n  char *strVar;\n  int formatVar;\n  long count;\n  bool boolVar1;\n  bool boolVar2;\n  undefined *ptr;\n  \n  if ((showCommon == 0) || (commonSize = 0, (*(uint *)((long)parameters + 0x44) & 0x52) != 0x10))\n  goto LAB_00102aa8;\n  count = (**(code **)(parameters[1] + 0x1f8))();\n  if (count < 0) {\n    handleFatalError(*parameters);\n    exitProgram(1);\nLAB_001026b4:\n    memoryPtr = (void *)allocateMemory();\n  }\n  else {\n    memoryPtr = (void *)0x0;\n    if (count != 0) goto LAB_001026b4;\n  }\n  ptrVar = memoryPtr;\n  count = (**(code **)(parameters[1] + 0x200))(parameters);\n  flag = (char)ptrVar;\n  if (count < 0) {\n    handleFatalError(*parameters);\n    exitProgram(1);\n    lVar2 = lvar2_1;\n  }\n  else {\n    flag = '\\0';\n    lVar2 = commonSize;\n    while (boolVar1 = count != 0, count = count + -1, boolVar1) {\n      lVar1 = *(long *)((long)memoryPtr + count * 8);\n      if (((*(byte *)(*(long *)(lVar1 + 0x20) + 0x25) & 0x10) != 0) &&\n         ((*(byte *)(lVar1 + 0x19) & 1) == 0)) {\n        lVar2 = lVar2 + *(long *)(lVar1 + 0x10);\n        flag = '\\x01';\n      }\n    }\n  }\n  if (flag != '\\0') {\n    commonSize = lVar2;\n  }\n  free(memoryPtr);\nLAB_00102aa8:\n  if (outputFormat == 1) {\n    totalSvi = 0;\n    maxSvi = 0;\n    nameLengthSvi = 0;\n    bfd_map_over_sections(parameters,sizerFunction,0);\n    if (showCommon != 0) {\n      if ((int)nameLengthSvi < 5) {\n        nameLengthSvi = 5;\n      }\n      totalSvi = totalSvi + commonSize;\n    }\n    svi_vmalen = numberSizer(maxSvi);\n    if (svi_vmalen < 4) {\n      svi_vmalen = 4;\n    }\n    svi_sizelen = numberSizer();\n    if (svi_sizelen < 4) {\n      svi_sizelen = 4;\n    }\n    totalSvi = 0;\n    printf(\"%s  \",*parameters);\n    extraData = sectionAddress2;\n    if ((undefined8 *)parameters[0x1d] != (undefined8 *)0x0) {\n      printf(\" (ex %s)\",*(undefined8 *)parameters[0x1d]);\n      extraData = sectionAddress1;\n    }\n    ptr = &DAT_001040fc;\n    printf(\":\\n%-*s   %*s   %*s\\n\",(ulong)nameLengthSvi,\"section\",(ulong)svi_sizelen,&DAT_00104067,\n           (ulong)svi_vmalen,&DAT_001040fc,extraData);\n    bfd_map_over_sections(parameters,printerFunction,0);\n    if (showCommon != 0) {\n      totalSvi = totalSvi + commonSize;\n      sysv_one_line(\"*COM*\",commonSize,0,ptr);\n    }\n    printf(\"%-*s   \",(ulong)nameLengthSvi,\"Total\");\n    rprint_number(svi_sizelen,totalSvi);\n    puts(\"\\n\");\n    return;\n  }\n  formatVar = (-(uint)(outputFormat == 0) & 0xfffffffd) + 10;\n  boolVar1 = outputFormat == 0;\n  bssSize = 0;\n  dataSize1 = 0;\n  textSize1 = 0;\n  bfd_map_over_sections(parameters,sumFunction,0);\n  bssSize = bssSize + commonSize;\n  index = files_seen_0 + 1;\n  boolVar2 = files_seen_0 == 0;\n  files_seen_0 = index;\n  if (boolVar2) {\n    if (outputFormat == 0) {\n      strVar = \"   text\\t   data\\t    bss\\t    dec\\t    hex\\tfilename\";\n      if (numberSystem == 1) {\n        strVar = \"   text\\t   data\\t    bss\\t    oct\\t    hex\\tfilename\";\n      }\n      puts(strVar);\n    }\n    else {\n      puts(\"      text       data        bss      total filename\");\n    }\n  }\n  count = textSize1 + dataSize1 + bssSize;\n  if (show_totals != 0) {\n    totalTextSize = totalTextSize + textSize1;\n    totalDataSize = totalDataSize + dataSize1;\n    totalBssSize = totalBssSize + bssSize;\n  }\n  index = (int)(char)((-boolVar1 & 0xe9U) + 0x20);\n  rprint_number(formatVar);\n  putc(index,standardOutput);\n  rprint_number(formatVar,dataSize1);\n  putc(index,standardOutput);\n  rprint_number(formatVar,bssSize);\n  putc(index,standardOutput);\n  if (outputFormat == 0) {\n    strVar = \"%7lu\\t%7lx\";\n    if (numberSystem == 1) {\n      strVar = \"%7lo\\t%7lx\";\n    }\n    printf(strVar,count,count);\n  }\n  else {\n    rprint_number(formatVar,count);\n  }\n  putc(index,standardOutput);\n  fputs(*parameters,standardOutput);\n  if ((undefined8 *)parameters[0x1d] == (undefined8 *)0x0) {\n    return;\n  }\n  printf(\" (ex %s)\",*(undefined8 *)parameters[0x1d]);\n  return;\n}\n\n",
            "called": [
                "putc",
                "sysv_internal_printer",
                "puts",
                "xmalloc",
                "printf",
                "sysv_internal_sizer",
                "berkeley_or_gnu_sum",
                "rprint_number",
                "fputs",
                "free",
                "print_sizes.cold",
                "size_number",
                "xexit",
                "bfd_map_over_sections",
                "sysv_one_line",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102a90",
            "calling": [
                "display_bfd.cold",
                "display_bfd"
            ],
            "imported": false,
            "current_name": "print_section_sizes_00102a90"
        },
        "FUN_00108108": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108108",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00108108"
        },
        "FUN_0010259c": {
            "renaming": {
                "FUN_0010259c": "print_message_0010259c",
                "in_RAX": "message"
            },
            "code": "\nvoid printMessage_0010259c(void)\n\n{\n  undefined8 *message;\n  \n  printf(\" (ex %s)\",*message);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259c",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "print_message_0010259c"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_00102e90": {
            "renaming": {
                "FUN_00102e90": "print_formatted_number_00102e90",
                "param_1": "width",
                "param_2": "number",
                "__format": "format",
                "acStack_48": "buffer"
            },
            "code": "\nvoid printFormattedNumber_00102e90(ulong width,undefined8 number)\n\n{\n  char *format;\n  char buffer [56];\n  \n  if (radix == 0) {\n    sprintf(buffer,\"%lu\",number);\n    printf(\"%*s\",width & 0xffffffff,buffer);\n  }\n  else {\n    format = \"0x%lx\";\n    if (radix == 1) {\n      format = \"0%lo\";\n    }\n    sprintf(buffer,format,number);\n    printf(\"%*s\",width & 0xffffffff,buffer);\n  }\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "rprint_number.cold",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e90",
            "calling": [
                "main",
                "print_sizes",
                "sysv_one_line"
            ],
            "imported": false,
            "current_name": "print_formatted_number_00102e90"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "main",
                "print_sizes",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_00102d70": {
            "renaming": {
                "FUN_00102d70": "update_size_based_on_flag_00102d70",
                "param_1": "param",
                "param_2": "binaryAddress",
                "uVar1": "flag",
                "lVar2": "size"
            },
            "code": "\nvoid updateSizeBasedOnFlag_00102d70(undefined8 param,long binaryAddress)\n\n{\n  uint flag;\n  long size;\n  \n  flag = *(uint *)(binaryAddress + 0x24);\n  if ((flag & 1) != 0) {\n    size = *(long *)(binaryAddress + 0x40);\n    if (((flag & 0x10) != 0) || ((selected_output_format == 0 && ((flag & 8) != 0)))) {\n      textsize = textsize + size;\n      return;\n    }\n    if ((flag & 0x100) != 0) {\n      datasize = datasize + size;\n      return;\n    }\n    bsssize = bsssize + size;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d70",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "update_size_based_on_flag_00102d70"
        },
        "FUN_00108110": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108110",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00108110"
        },
        "FUN_00108198": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108198",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00108198"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_001026f6": {
            "renaming": {
                "FUN_001026f6": "print_formatted_number_001026f6",
                "in_EAX": "input_number",
                "__format": "format_string"
            },
            "code": "\nvoid print_formatted_number_001026f6(void)\n\n{\n  int input_number;\n  char *format_string;\n  \n  format_string = \"0x%lx\";\n  if (input_number == 1) {\n    format_string = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,format_string);\n  strlen(&stack0x00000000);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026f6",
            "calling": [
                "size_number"
            ],
            "imported": false,
            "current_name": "print_formatted_number_001026f6"
        },
        "FUN_001026ea": {
            "renaming": {
                "FUN_001026ea": "update_max_vma_001026ea",
                "in_RAX": "maxVMA",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 updateMaxVMA_001026ea(void)\n\n{\n  undefined8 maxVMA;\n  undefined8 returnAddress;\n  \n  svi_maxvma = maxVMA;\n  return returnAddress;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026ea",
            "calling": [
                "sysv_internal_sizer"
            ],
            "imported": false,
            "current_name": "update_max_vma_001026ea"
        },
        "FUN_00102fe0": {
            "renaming": {
                "FUN_00102fe0": "print_formatted_entries_00102fe0",
                "param_1": "entry_name",
                "param_2": "file_size",
                "param_3": "virtual_memory"
            },
            "code": "\nvoid print_formatted_entries_00102fe0(undefined8 entry_name,undefined8 file_size,undefined8 virtual_memory)\n\n{\n  printf(\"%-*s   \",(ulong)svi_namelen,entry_name);\n  rprint_number(svi_sizelen,file_size);\n  printf(\"   \");\n  rprint_number(svi_vmalen,virtual_memory);\n  putchar(10);\n  return;\n}\n\n",
            "called": [
                "rprint_number",
                "printf",
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fe0",
            "calling": [
                "sysv_internal_printer",
                "print_sizes"
            ],
            "imported": false,
            "current_name": "print_formatted_entries_00102fe0"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00108078": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108078",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00108078"
        },
        "FUN_00108080": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108080",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00108080"
        },
        "FUN_001080a8": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001080a8",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001080a8"
        },
        "FUN_00102f40": {
            "renaming": {
                "FUN_00102f40": "report_data_00102f40",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "data5",
                "param_6": "data6",
                "param_7": "data7",
                "param_8": "data8",
                "param_9": "reportFunc",
                "param_10": "param1",
                "param_11": "param2",
                "param_12": "param3",
                "param_13": "param4",
                "param_14": "param5",
                "in_AL": "inputFlag",
                "local_d8": "bufferSize",
                "local_d4": "sizeValue",
                "local_d0": "stackPtr",
                "local_c8": "localBuffer",
                "local_b8": "dataBuffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "data1",
                "local_78": "data2",
                "local_68": "data3",
                "local_58": "data4",
                "local_48": "data5",
                "local_38": "data6",
                "local_28": "data7",
                "local_18": "data8"
            },
            "code": "\nvoid reportData_00102f40(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4,\n                 undefined4 data5,undefined4 data6,undefined4 data7,undefined4 data8,\n                 undefined8 reportFunc,undefined8 param1,undefined8 param2,undefined8 param3,\n                 undefined8 param4,undefined8 param5)\n\n{\n  char inputFlag;\n  undefined4 bufferSize;\n  undefined4 sizeValue;\n  undefined *stackPtr;\n  undefined *localBuffer;\n  undefined dataBuffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  undefined4 data5;\n  undefined4 data6;\n  undefined4 data7;\n  undefined4 data8;\n  \n  if (inputFlag != '\\0') {\n    data1 = data1;\n    data2 = data2;\n    data3 = data3;\n    data4 = data4;\n    data5 = data5;\n    data6 = data6;\n    data7 = data7;\n    data8 = data8;\n  }\n  stackPtr = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = dataBuffer;\n  sizeValue = 0x30;\n  param10 = param1;\n  param11 = param2;\n  param12 = param3;\n  param13 = param4;\n  param14 = param5;\n  report(reportFunc,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f40",
            "calling": [
                "main",
                "display_file.cold",
                "display_file"
            ],
            "imported": false,
            "current_name": "report_data_00102f40"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "usage",
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "main",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00103070": {
            "renaming": {
                "FUN_00103070": "FUNC_00103070"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103083) */\n/* WARNING: Removing unreachable block (ram,0x0010308f) */\n\nvoid FUNC_00103070(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103070",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00103070"
        },
        "FUN_00108000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_00108000"
        },
        "FUN_00108088": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108088",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00108088"
        },
        "FUN_00108120": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108120",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_00108120"
        },
        "FUN_00108008": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108008",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_00108008"
        },
        "FUN_00108128": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108128",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_00108128"
        },
        "FUN_00102db0": {
            "renaming": {
                "FUN_00102db0": "print_and_exit_00102db0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "num1",
                "param_10": "num2",
                "param_11": "num3",
                "param_12": "num4",
                "param_13": "num5",
                "param_14": "num6",
                "in_AL": "flag",
                "__format": "formatStr",
                "uVar1": "result",
                "acStack_110": "outputStr",
                "local_d8": "bufferSize",
                "local_d4": "stringLength",
                "local_d0": "localPointer1",
                "local_c8": "localPointer2",
                "local_b8": "localVar",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "arg1",
                "local_78": "arg2",
                "local_68": "arg3",
                "local_58": "arg4",
                "local_48": "arg5",
                "local_38": "arg6",
                "local_28": "arg7",
                "local_18": "arg8"
            },
            "code": "\nvoid printAndExit_00102db0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 undefined8 num1,undefined8 num2,undefined8 num3,undefined8 num4,\n                 undefined8 num5,undefined8 num6)\n\n{\n  char flag;\n  char *formatStr;\n  undefined8 result;\n  char outputStr [48];\n  undefined4 bufferSize;\n  undefined4 stringLength;\n  undefined *localPointer1;\n  undefined *localPointer2;\n  undefined localVar [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 arg4;\n  undefined4 arg5;\n  undefined4 arg6;\n  undefined4 arg7;\n  undefined4 arg8;\n  \n  if (flag != '\\0') {\n    arg1 = arg1;\n    arg2 = arg2;\n    arg3 = arg3;\n    arg4 = arg4;\n    arg5 = arg5;\n    arg6 = arg6;\n    arg7 = arg7;\n    arg8 = arg8;\n  }\n  localPointer1 = &stack0x00000008;\n  bufferSize = 8;\n  localPointer2 = localVar;\n  stringLength = 0x30;\n  param_10 = num2;\n  param_11 = num3;\n  param_12 = num4;\n  param_13 = num5;\n  param_14 = num6;\n  report(num1,&bufferSize);\n  result = 1;\n  xexit(1);\n  if (radix == 0) {\n    formatStr = \"%lu\";\n  }\n  else {\n    formatStr = \"0x%lx\";\n    if (radix == 1) {\n      formatStr = \"0%lo\";\n    }\n  }\n  sprintf(outputStr,formatStr,result);\n  strlen(outputStr);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102db0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_and_exit_00102db0"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_function_pointer_00102020"
            },
            "code": "\nvoid executeFunctionPointer_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_pointer_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_001081d0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081d0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001081d0"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "display_bfd.cold",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00108090": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108090",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00108090"
        },
        "FUN_001024d2": {
            "renaming": {
                "FUN_001024d2": "check_and_print_core_file_info_001024d2",
                "unaff_RBX": "file",
                "param_7": "format_options",
                "cVar1": "format_matches",
                "iVar2": "error_code",
                "lVar3": "failing_command"
            },
            "code": "\n\n\nvoid check_and_print_core_file_info_001024d2(void)\n\n{\n  char format_matches;\n  int error_code;\n  long failing_command;\n  undefined8 *file;\n  undefined8 format_options;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0xd) {\n    bfd_nonfatal(*file);\n    list_matching_formats(format_options);\n    return_code = 3;\n  }\n  else {\n    format_matches = bfd_check_format_matches();\n    if (format_matches == '\\0') {\n      bfd_nonfatal(*file);\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        list_matching_formats(format_options);\n      }\n      return_code = 3;\n    }\n    else {\n      print_sizes();\n      fwrite(\" (core file\",1,0xb,_stdout);\n      failing_command = bfd_core_file_failing_command();\n      if (failing_command != 0) {\n        printf(\" invoked as %s\",failing_command);\n      }\n      puts(\")\\n\");\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "fwrite",
                "bfd_get_error",
                "list_matching_formats",
                "puts",
                "print_sizes",
                "printf",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "bfd_core_file_failing_command"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d2",
            "calling": [
                "display_bfd"
            ],
            "imported": false,
            "current_name": "check_and_print_core_file_info_001024d2"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_001030a0": {
            "renaming": {
                "FUN_001030a0": "FUNC_001030a0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001030c4) */\n/* WARNING: Removing unreachable block (ram,0x001030d0) */\n\nvoid FUNC_001030a0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001030a0",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_001030a0"
        },
        "FUN_001023b6": {
            "renaming": {
                "FUN_001023b6": "process_archived_files_001023b6",
                "unaff_RBX": "fileList",
                "lVar3": "currentFile",
                "lVar4": "previousFile",
                "iVar2": "error",
                "cVar1": "closeSuccessful"
            },
            "code": "\nvoid processArchivedFiles_001023b6(void)\n\n{\n  char closeSuccessful;\n  int error;\n  long currentFile;\n  undefined8 *fileList;\n  long previousFile;\n  \n  currentFile = 0;\n  do {\n    previousFile = currentFile;\n    bfd_set_error(0);\n    currentFile = bfd_openr_next_archived_file();\n    if (currentFile == 0) {\n      error = bfd_get_error();\n      if (error != 9) {\n        bfd_nonfatal(*fileList);\n        return_code = 2;\n      }\n      if (previousFile != 0) {\n        bfd_close(previousFile);\n      }\n      break;\n    }\n    display_bfd();\n  } while ((previousFile == 0) || (bfd_close(), previousFile != currentFile));\n  closeSuccessful = bfd_close();\n  if (closeSuccessful == '\\0') {\n    bfd_nonfatal();\n    return_code = 1;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_get_error",
                "bfd_set_error",
                "bfd_close",
                "display_bfd",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b6",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "process_archived_files_001023b6"
        },
        "FUN_00108010": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108010",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00108010"
        },
        "FUN_00108098": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108098",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00108098"
        },
        "FUN_00108130": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108130",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_00108130"
        },
        "FUN_0010281b": {
            "renaming": {
                "FUN_0010281b": "display_section_sizes_0010281b",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "programName",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "target"
            },
            "code": "\nvoid displaySectionSizes_0010281b(FILE *outputFile,int exitCode)\n\n{\n  long programName;\n  char *message;\n  long *targetList;\n  long *target;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Displays the sizes of sections inside binary files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" If no input file(s) are specified, a.out is assumed\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  -A|-B|-G  --format={sysv|berkeley|gnu}  Select output style (default is %s)\\n  -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\\n  -t        --totals                  Display the total sizes (Berkeley only)\\n  -f                                  Ignored.\\n            --common                  Display total size for *COM* syms\\n            --target=<bfdname>        Set the binary file format\\n            @<file>                   Read options from <file>\\n  -h|-H|-?  --help                    Display this information\\n  -v|-V     --version                 Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(outputFile,message,\"berkeley\");\n  programName = program_name;\n  if (program_name == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  target = targetList;\n  while( true ) {\n    programName = *target;\n    target = target + 1;\n    if (programName == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010281b",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_section_sizes_0010281b"
        },
        "FUN_00102ee0": {
            "renaming": {
                "FUN_00102ee0": "print_error_message_00102ee0",
                "param_1": "message",
                "param_2": "arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "name_of_program"
            },
            "code": "\n\n\nvoid print_error_message_00102ee0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",name_of_program);\n  vfprintf(standard_error,message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ee0",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102ee0"
        },
        "FUN_00108018": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108018",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00108018"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "display_file",
                "display_bfd"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00108138": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108138",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00108138"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103120": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103120",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00103120"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "usage",
                "list_matching_formats",
                "main",
                "print_sizes"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_001081e0": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e0",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001081e0"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "print_formatted_value_00102710",
                "in_EAX": "formatType",
                "unaff_EBX": "fieldWidth",
                "__format": "formatString"
            },
            "code": "\nvoid printFormattedValue_00102710(void)\n\n{\n  int formatType;\n  uint fieldWidth;\n  char *formatString;\n  \n  formatString = \"0x%lx\";\n  if (formatType == 1) {\n    formatString = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,formatString);\n  printf(\"%*s\",(ulong)fieldWidth);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "rprint_number"
            ],
            "imported": false,
            "current_name": "print_formatted_value_00102710"
        },
        "FUN_0010278c": {
            "renaming": {
                "FUN_0010278c": "print_matching_formats_0010278c",
                "param_1": "formatList",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_0010278c(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010278c",
            "calling": [
                "display_bfd.cold"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0010278c"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00103c50": {
            "renaming": {
                "FUN_00103c50": "update_stats_00103c50",
                "param_1": "input",
                "param_2": "arguments",
                "param_3": "temp1",
                "param_4": "temp2",
                "pcVar1": "pointer1",
                "sVar2": "strLength",
                "svi_namelen": "maxNameLength",
                "svi_total": "totalSize",
                "svi_maxvma": "maxVMA"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nundefined8 updateStats_00103c50(undefined8 input,char **arguments,undefined8 temp1,undefined8 temp2)\n\n{\n  char *pointer1;\n  undefined8 in_RAX;\n  size_t strLength;\n  \n  if (*(uint *)((long)arguments + 0x24) != 0) {\n    if (((arguments != (char **)0x108370) && ((*(uint *)((long)arguments + 0x24) & 0x1000) == 0)) &&\n       (arguments != (char **)0x108258)) {\n      pointer1 = arguments[8];\n      strLength = strlen(*arguments);\n      if (maxNameLength < (int)strLength) {\n        maxNameLength = (int)strLength;\n      }\n      totalSize = totalSize + (long)pointer1;\n      if (maxVMA < arguments[6]) {\n        maxVMA = arguments[6];\n      }\n    }\n    return temp2;\n  }\n  return in_RAX;\n}\n\n",
            "called": [
                "sysv_internal_sizer.cold",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c50",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "update_stats_00103c50"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_00102a40": {
            "renaming": {
                "FUN_00102a40": "check_and_print_file_info_00102a40",
                "param_1": "file_handle",
                "cVar1": "format_check_passed",
                "iVar2": "error_code",
                "lVar3": "failing_command",
                "local_20": "matching_formats"
            },
            "code": "\n\n\nvoid check_and_print_file_info_00102a40(undefined8 *file_handle)\n\n{\n  char format_check_passed;\n  int error_code;\n  long failing_command;\n  undefined8 matching_formats [2];\n  \n  format_check_passed = bfd_check_format(file_handle,2);\n  if (format_check_passed == '\\0') {\n    format_check_passed = bfd_check_format_matches(file_handle,1,matching_formats);\n    if (format_check_passed == '\\0') {\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\n        bfd_nonfatal(*file_handle);\n        list_matching_formats(matching_formats[0]);\n        return_code = 3;\n      }\n      else {\n        format_check_passed = bfd_check_format_matches(file_handle,3,matching_formats);\n        if (format_check_passed == '\\0') {\n          bfd_nonfatal(*file_handle);\n          error_code = bfd_get_error();\n          if (error_code == 0xd) {\n            list_matching_formats(matching_formats[0]);\n          }\n          return_code = 3;\n        }\n        else {\n          print_sizes(file_handle);\n          fwrite(\" (core file\",1,0xb,_stdout);\n          failing_command = bfd_core_file_failing_command(file_handle);\n          if (failing_command != 0) {\n            printf(\" invoked as %s\",failing_command);\n          }\n          puts(\")\\n\");\n        }\n      }\n    }\n    else {\n      print_sizes(file_handle);\n      putchar(10);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "display_bfd.cold",
                "bfd_check_format",
                "print_sizes",
                "bfd_check_format_matches",
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102a40",
            "calling": [
                "FUN_001023b6",
                "display_file"
            ],
            "imported": false,
            "current_name": "check_and_print_file_info_00102a40"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00108148": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108148",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00108148"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "display_bfd",
                "sysv_one_line"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "display_bfd.cold",
                "FUN_001023b6",
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_00103130": {
            "renaming": {
                "FUN_00103130": "parse_command_line_00103130",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "bVar2": "var2",
                "bVar3": "bool1",
                "bVar4": "bool2",
                "pcVar5": "str1",
                "bVar6": "byteVar",
                "cVar7": "charVar",
                "iVar8": "index",
                "uVar9": "returnValue",
                "__stream": "filePtr",
                "__s": "fileContent",
                "pcVar10": "filePath",
                "sVar11": "fileSize",
                "__ptr": "token",
                "__src": "tokenArray",
                "lVar12": "tokenSize",
                "plVar13": "params",
                "plVar14": "params_new",
                "uVar15": "ulongVar",
                "uVar16": "resultStr",
                "pcVar17": "strParam",
                "pbVar18": "bytePtr",
                "unaff_RBP": "tempVar",
                "lVar19": "tempVar1",
                "pbVar20": "tempPtr",
                "iVar21": "loopIndex1",
                "iVar22": "loopIndex2",
                "bVar23": "bool3",
                "local_110": "innerLoopIndex1",
                "local_10c": "innerLoopIndex2",
                "local_108": "fileLength",
                "local_c8": "fileStat"
            },
            "code": "\n\n\nundefined4 parseCommandLine_00103130(int argc,long *argv)\n\n{\n  byte *ptr1;\n  byte var2;\n  bool bool1;\n  bool bool2;\n  char *str1;\n  byte byteVar;\n  char charVar;\n  int index;\n  undefined4 returnValue;\n  FILE *filePtr;\n  byte *fileContent;\n  char *filePath;\n  size_t fileSize;\n  byte *token;\n  long *tokenArray;\n  long tokenSize;\n  long *params;\n  long *params_new;\n  ulong ulongVar;\n  undefined8 resultStr;\n  char *strParam;\n  byte *bytePtr;\n  undefined1 *tempVar;\n  long tempVar1;\n  byte *tempPtr;\n  int loopIndex1;\n  int loopIndex2;\n  bool bool3;\n  int innerLoopIndex1;\n  int innerLoopIndex2;\n  size_t fileLength;\n  stat fileStat;\n  \n  setlocale(5,\"\");\n  strParam = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  params = argv;\n  if (1 < argc) {\n    innerLoopIndex2 = 2000;\n    innerLoopIndex1 = 0;\n    index = 1;\n    do {\n      while( true ) {\n        loopIndex2 = index;\n        tempVar = (undefined1 *)(long)loopIndex2;\n        if (*(char *)params[(long)tempVar] == '@') break;\nLAB_001035a0:\n        if (argc <= loopIndex2 + 1) goto LAB_00103612;\nLAB_001035aa:\n        index = loopIndex2 + 1;\n        innerLoopIndex1 = loopIndex2;\n      }\n      innerLoopIndex2 = innerLoopIndex2 + -1;\n      if (innerLoopIndex2 == 0) goto LAB_001039c5;\n      strParam = (char *)params[(long)tempVar] + 1;\n      index = stat(strParam,&fileStat);\n      if (index < 0) goto LAB_001035a0;\n      if ((fileStat.st_mode & 0xf000) == 0x4000) {\n        tempVar1 = *params;\n        strParam = \"%s: error: @-file refers to a directory\\n\";\n        do {\n          fprintf(_stderr,strParam,tempVar1);\n          xexit(1);\nLAB_001039c5:\n          tempVar1 = *params;\n          strParam = \"%s: error: too many @-files encountered\\n\";\n        } while( true );\n      }\n      filePtr = fopen(strParam,\"r\");\n      if (filePtr == (FILE *)0x0) goto LAB_001035a0;\n      index = fseek(filePtr,0,2);\n      if (((index == -1) ||\n          (strParam = (char *)ftell(filePtr), strParam == (char *)0xffffffffffffffff)) ||\n         (index = fseek(filePtr,0,0), index == -1)) {\nLAB_00103600:\n        fclose(filePtr);\n        if (loopIndex2 + 1 < argc) goto LAB_001035aa;\n        break;\n      }\n      fileContent = (byte *)xmalloc(strParam + 1);\n      filePath = (char *)fread(fileContent,1,(size_t)strParam,filePtr);\n      if ((strParam != filePath) && (index = ferror(filePtr), index != 0)) {\n        free(fileContent);\n        goto LAB_00103600;\n      }\n      fileContent[(long)filePath] = 0;\n      byteVar = *fileContent;\n      bytePtr = fileContent;\n      if (byteVar != 0) {\nLAB_00103300:\n        if (((&_sch_istable)[(ulong)byteVar * 2] & 0x40) != 0) goto LAB_001032f0;\n        fileSize = strlen((char *)fileContent);\n        token = (byte *)xmalloc(fileSize + 1);\n        index = 0;\n        bool3 = false;\n        bool2 = false;\n        tempVar1 = 0;\n        tokenArray = (long *)0x0;\n        bool1 = false;\n        bytePtr = fileContent;\n        do {\n          while (((&_sch_istable)[(ulong)*bytePtr * 2] & 0x40) != 0) {\n            bytePtr = bytePtr + 1;\n          }\n          if ((index == 0) || (params_new = tokenArray + tempVar1, index + -1 <= (int)tempVar1)) {\n            if (tokenArray == (long *)0x0) {\n              index = 8;\n              tokenArray = (long *)xmalloc(0x40);\n              params_new = tokenArray + tempVar1;\n              *params_new = 0;\n            }\n            else {\n              index = index * 2;\n              tokenArray = (long *)xrealloc(tokenArray,(long)index << 3);\n              params_new = tokenArray + tempVar1;\n              *params_new = 0;\n            }\n          }\n          byteVar = *bytePtr;\n          tempPtr = token;\n          while (byteVar != 0) {\n            while( true ) {\n              if ((((&_sch_istable)[(ulong)byteVar * 2] & 0x40) != 0) &&\n                 (!(bool)(bool2 | bool1 | bool3))) {\n                bool1 = false;\n                bool3 = false;\n                bool2 = false;\n                goto LAB_00103410;\n              }\n              if (!bool1) break;\n              bytePtr = bytePtr + 1;\n              *tempPtr = byteVar;\n              tempPtr = tempPtr + 1;\n              bool1 = false;\n              byteVar = *bytePtr;\n              if (byteVar == 0) goto LAB_00103410;\n            }\n            if (byteVar == 0x5c) {\n              bool1 = true;\n            }\n            else if (bool2) {\n              if (byteVar == 0x27) {\n                bool2 = false;\n              }\n              else {\nLAB_00103585:\n                *tempPtr = byteVar;\n                tempPtr = tempPtr + 1;\n              }\n            }\n            else if (bool3) {\n              if (byteVar != 0x22) goto LAB_00103585;\n              bool3 = false;\n            }\n            else if (byteVar == 0x27) {\n              bool2 = true;\n            }\n            else {\n              if (byteVar != 0x22) goto LAB_00103585;\n              bool3 = true;\n            }\n            ptr1 = bytePtr + 1;\n            bytePtr = bytePtr + 1;\n            byteVar = *ptr1;\n          }\nLAB_00103410:\n          *tempPtr = 0;\n          tokenSize = xstrdup(token);\n          *params_new = tokenSize;\n          tokenArray[tempVar1 + 1] = 0;\n          byteVar = *bytePtr;\n          var2 = (&_sch_istable)[(ulong)byteVar * 2];\n          while ((var2 & 0x40) != 0) {\n            byteVar = bytePtr[1];\n            bytePtr = bytePtr + 1;\n            var2 = (&_sch_istable)[(ulong)byteVar * 2];\n          }\n          tempVar1 = tempVar1 + 1;\n        } while (byteVar != 0);\n        free(token);\n        params_new = params;\n        if (argv == params) goto LAB_0010372c;\n        goto LAB_001034ad;\n      }\nLAB_0010370f:\n      tokenArray = (long *)xmalloc();\n      *tokenArray = 0;\n      if (argv == params) {\nLAB_0010372c:\n        if (*params == 0) {\n          index = 0;\n        }\n        else {\n          tempVar1 = 1;\n          do {\n            index = (int)tempVar1;\n            params_new = params + tempVar1;\n            tempVar1 = tempVar1 + 1;\n          } while (*params_new != 0);\n        }\n        tokenSize = 0;\n        params_new = (long *)xmalloc((long)(index + 1) << 3);\n        tempVar1 = *params;\n        while (tempVar1 != 0) {\n          resultStr = xstrdup();\n          *(undefined8 *)((long)params_new + tokenSize) = resultStr;\n          tokenSize = tokenSize + 8;\n          tempVar1 = *(long *)((long)params + tokenSize);\n        }\n        *(undefined8 *)((long)params_new + tokenSize) = 0;\nLAB_001034ad:\n        params = params_new;\n        if (*tokenArray == 0) goto LAB_001038cc;\n        strParam = (char *)0x0;\n        do {\n          strParam = strParam + 1;\n        } while (tokenArray[(long)strParam] != 0);\n        fileLength = (long)strParam * 8;\n      }\n      else {\nLAB_001038cc:\n        strParam = (char *)0x0;\n        fileLength = 0;\n      }\n      free((void *)params[(long)tempVar]);\n      params = (long *)xrealloc(params,(long)(strParam + (long)argc + 1) * 8);\n      loopIndex1 = argc + -1 + (int)strParam;\n      memmove(params + (long)(tempVar + (long)strParam),params + (long)(tempVar + 1),\n              (long)(argc - loopIndex2) << 3);\n      memcpy(params + (long)tempVar,tokenArray,fileLength);\n      free(tokenArray);\n      free(fileContent);\n      fclose(filePtr);\n      tempVar = tempVar + (long)strParam;\n      index = innerLoopIndex1 + 1;\n      argc = loopIndex1;\n    } while (innerLoopIndex1 + 1 < loopIndex1);\n  }\nLAB_00103612:\n  index = bfd_init();\n  if (index != 0x118) goto LAB_001039f8;\n  filePath = \"x86_64-pc-linux-gnu\";\n  tempVar = long_options;\n  strParam = \"ABGHhVvdfotx\";\n  charVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n  if (charVar == '\\0') {\n    returnValue = bfd_get_error();\n    strParam = (char *)bfd_errmsg(returnValue);\n    resultStr = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    ulongVar = fatal(resultStr,\"x86_64-pc-linux-gnu\",strParam);\n    goto LAB_00103b74;\n  }\n  do {\n    while (index = getopt_long(argc,params,strParam,tempVar,0), index != -1) {\n      str1 = filePath;\n      if (index < 0x79) {\n        if (index < 0x3f) {\nswitchD_001037fd_caseD_40:\n          index = getopt_long(argc,params,strParam,tempVar,0);\n          if (index == -1) break;\n          if (0x78 < index) goto LAB_00103937;\n          if (0x3e < index) {\n            switch(index) {\n            case 0x3f:\n            case 0x48:\n            case 0x68:\n              goto switchD_001037fd_caseD_3f;\n            case 0x41:\n              goto switchD_001037fd_caseD_41;\n            case 0x42:\n              goto switchD_001037fd_caseD_42;\n            case 0x47:\n              goto switchD_001037fd_caseD_47;\n            case 0x56:\n            case 0x76:\n              goto switchD_001037fd_caseD_56;\n            case 100:\n              goto switchD_001037fd_caseD_64;\n            case 0x6f:\n              goto switchD_001037fd_caseD_6f;\n            case 0x74:\n              goto switchD_001037fd_caseD_74;\n            case 0x78:\n              goto switchD_001037fd_caseD_78;\n            }\n          }\n          do {\n            do {\n              while( true ) {\n                index = getopt_long(argc,params,strParam,tempVar,0);\n                if (index == -1) goto LAB_00103664;\n                if (0x78 < index) break;\n                if (0x3e < index) {\n                  switch(index) {\n                  case 0x3f:\n                  case 0x48:\n                  case 0x68:\n                    goto switchD_001037fd_caseD_3f;\n                  case 0x41:\n                    goto switchD_001037fd_caseD_41;\n                  case 0x42:\n                    goto switchD_001037fd_caseD_42;\n                  case 0x47:\n                    goto switchD_001037fd_caseD_47;\n                  case 0x56:\n                  case 0x76:\n                    goto switchD_001037fd_caseD_56;\n                  case 100:\n                    goto switchD_001037fd_caseD_64;\n                  case 0x6f:\n                    goto switchD_001037fd_caseD_6f;\n                  case 0x74:\n                    goto switchD_001037fd_caseD_74;\n                  case 0x78:\n                    goto switchD_001037fd_caseD_78;\n                  }\n                }\n              }\nLAB_00103937:\n              if (index == 0xca) goto LAB_001039d1;\n            } while (0xca < index);\n            if (index == 200) goto LAB_00103869;\n          } while (index != 0xc9);\n          goto LAB_00103a15;\n        }\n        switch(index) {\n        case 0x3f:\n        case 0x48:\n        case 0x68:\n          goto switchD_001037fd_caseD_3f;\n        default:\n          goto switchD_001037fd_caseD_40;\n        case 0x41:\n          goto switchD_001037fd_caseD_41;\n        case 0x42:\nswitchD_001037fd_caseD_42:\n          selected_output_format = 0;\n          break;\n        case 0x47:\nswitchD_001037fd_caseD_47:\n          selected_output_format = 2;\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_001037fd_caseD_56:\n          show_version = 1;\n          break;\n        case 100:\n          goto switchD_001037fd_caseD_64;\n        case 0x6f:\n          goto switchD_001037fd_caseD_6f;\n        case 0x74:\nswitchD_001037fd_caseD_74:\n          show_totals = 1;\n          break;\n        case 0x78:\n          goto switchD_001037fd_caseD_78;\n        }\n      }\n      else if (index == 0xca) {\nLAB_001039d1:\n        target = _optarg;\n      }\n      else {\n        if (0xca < index) goto switchD_001037fd_caseD_40;\n        if (index != 200) {\n          if (index != 0xc9) goto switchD_001037fd_caseD_40;\n          goto LAB_00103a15;\n        }\nLAB_00103869:\n        filePath = _optarg;\n        if (0x31 < (byte)(*_optarg + 0xbeU)) goto LAB_00103bc8;\n        ulongVar = 1L << (*_optarg + 0xbeU & 0x3f);\n        if ((ulongVar & 0x2000000020) != 0) goto switchD_001037fd_caseD_47;\n        if ((ulongVar & 0x2000000020000) == 0) {\nLAB_00103b74:\n          if ((ulongVar & 0x100000001) == 0) goto LAB_00103bc8;\n          goto switchD_001037fd_caseD_42;\n        }\nswitchD_001037fd_caseD_41:\n        selected_output_format = 1;\n      }\n    }\nLAB_00103664:\n    if (show_version != 0) {\n      printf(\"GNU %s %s\\n\",&DAT_00104067,\"(GNU Binutils for Debian) 2.40\");\n      strParam = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(strParam);\n      strParam = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(strParam);\n                    \n      exit(0);\n    }\n    if (show_help == 0) {\n      index = _optind - argc;\n      if (_optind == argc) {\n        display_file(\"a.out\");\n      }\n      else {\n        while (tempVar1 = (long)_optind, SBORROW4(_optind,argc) != index < 0) {\n          _optind = _optind + 1;\n          display_file(params[tempVar1]);\n          index = _optind - argc;\n        }\n      }\n      if ((show_totals != 0) && ((selected_output_format & 0xfffffffd) == 0)) {\n        tempVar1 = total_datasize + total_textsize + total_bsssize;\n        index = (-(uint)(selected_output_format == 0) & 0xfffffffd) + 10;\n        bool3 = selected_output_format == 0;\n        rprint_number(index);\n        loopIndex2 = (int)(char)((-bool3 & 0xe9U) + 0x20);\n        putc(loopIndex2,_stdout);\n        rprint_number(index,total_datasize);\n        putc(loopIndex2,_stdout);\n        rprint_number(index,total_bsssize);\n        putc(loopIndex2,_stdout);\n        if (selected_output_format == 0) {\n          strParam = \"%7lu\\t%7lx\";\n          if (radix == 1) {\n            strParam = \"%7lo\\t%7lx\";\n          }\n          printf(strParam,tempVar1,tempVar1);\n        }\n        else {\n          rprint_number(index,tempVar1);\n        }\n        putc(loopIndex2,_stdout);\n        fwrite(\"(TOTALS)\\n\",1,9,_stdout);\n      }\n      return return_code;\n    }\n    usage(_stdout,0);\nLAB_001039f8:\n    resultStr = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(resultStr);\nLAB_00103a15:\n    tempVar1 = strtol(_optarg,(char **)0x0,10);\n    filePath = _optarg;\n    index = (int)tempVar1;\n    str1 = &optarg;\n    if (index == 10) {\nswitchD_001037fd_caseD_64:\n      filePath = str1;\n      radix = 0;\n    }\n    else if (index == 0x10) {\nswitchD_001037fd_caseD_78:\n      filePath = str1;\n      radix = 2;\n    }\n    else {\n      if (index != 8) {\n        resultStr = dcgettext(0,\"Invalid radix: %s\\n\",5);\n        strParam = &optarg;\n        do {\n          non_fatal(resultStr,filePath);\n          filePath = strParam;\nswitchD_001037fd_caseD_3f:\n          usage(_stderr,1);\nLAB_00103bc8:\n          resultStr = dcgettext(0,\"invalid argument to --format: %s\",5);\n          strParam = filePath;\n        } while( true );\n      }\nswitchD_001037fd_caseD_6f:\n      filePath = str1;\n      radix = 1;\n    }\n  } while( true );\nLAB_001032f0:\n  byteVar = bytePtr[1];\n  bytePtr = bytePtr + 1;\n  if (byteVar == 0) goto LAB_0010370f;\n  goto LAB_00103300;\n}\n\n",
            "called": [
                "stat",
                "putc",
                "bfd_set_error_program_name",
                "xmalloc_set_program_name",
                "fopen",
                "ferror",
                "xmalloc",
                "display_file",
                "fseek",
                "bindtextdomain",
                "fwrite",
                "bfd_get_error",
                "dcgettext",
                "free",
                "fatal",
                "xexit",
                "bfd_set_default_target",
                "fprintf",
                "strtol",
                "bfd_init",
                "fclose",
                "memmove",
                "non_fatal",
                "xrealloc",
                "strlen",
                "textdomain",
                "printf",
                "exit",
                "usage",
                "rprint_number",
                "bfd_errmsg",
                "ftell",
                "memcpy",
                "setlocale",
                "xstrdup",
                "fread",
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103130",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "parse_command_line_00103130"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "usage",
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "main",
                "display_file.cold",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00102e50": {
            "renaming": {
                "FUN_00102e50": "format_and_print_number_00102e50",
                "param_1": "number",
                "__format": "formatString",
                "acStack_38": "buffer"
            },
            "code": "\nvoid formatAndPrintNumber_00102e50(undefined8 number)\n\n{\n  char *formatString;\n  char buffer [48];\n  \n  if (radix == 0) {\n    formatString = \"%lu\";\n  }\n  else {\n    formatString = \"0x%lx\";\n    if (radix == 1) {\n      formatString = \"0%lo\";\n    }\n  }\n  sprintf(buffer,formatString,number);\n  strlen(buffer);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "strlen",
                "size_number.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e50",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "format_and_print_number_00102e50"
        },
        "FUN_00103d80": {
            "renaming": {
                "FUN_00103d80": "FUNC_00103d80"
            },
            "code": "\nvoid FUNC_00103d80(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103d80",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103d80"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main",
                "print_sizes"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main",
                "print_sizes",
                "fatal"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_00108150": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108150",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00108150"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "print_sizes"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00108038": {
            "renaming": {},
            "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108038",
            "calling": [
                "puts"
            ],
            "imported": false,
            "current_name": "FUN_00108038"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "display_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "display_bfd.cold",
                "display_bfd"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001080e8": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001080e8",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_001080e8"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\nvoid bfd_core_file_failing_command(void)\n\n{\n  bfd_core_file_failing_command();\n  return;\n}\n\n",
            "called": [
                "bfd_core_file_failing_command"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "display_bfd.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001023b6"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_00108040": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108040",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_00108040"
        },
        "FUN_00108160": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108160",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_00108160"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "display_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main",
                "size_number",
                "sysv_internal_sizer"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102980": {
            "renaming": {
                "FUN_00102980": "check_file_00102980",
                "param_1": "filePath",
                "cVar1": "formatIsValid",
                "iVar2": "statResult",
                "piVar3": "errorNumber",
                "uVar4": "errorMessage",
                "pcVar5": "errorDescription",
                "lVar6": "fileHandle",
                "sStack_b8": "fileStatus"
            },
            "code": "\nvoid checkFile_00102980(char *filePath)\n\n{\n  char formatIsValid;\n  int statResult;\n  int *errorNumber;\n  undefined8 errorMessage;\n  char *errorDescription;\n  long fileHandle;\n  stat fileStatus;\n  \n  if (filePath != (char *)0x0) {\n    statResult = stat(filePath,&fileStatus);\n    if (statResult < 0) {\n      errorNumber = __errno_location();\n      if (*errorNumber == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMessage,filePath);\n      }\n      else {\n        errorDescription = strerror(*errorNumber);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,filePath,errorDescription);\n      }\n    }\n    else if ((fileStatus.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMessage,filePath);\n    }\n    else if ((fileStatus.st_mode & 0xf000) == 0x8000) {\n      if (fileStatus.st_size < 0) {\n        errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(errorMessage,filePath);\n      }\n      else if (fileStatus.st_size != 0) {\n        fileHandle = bfd_openr(filePath,target);\n        if (fileHandle != 0) {\n          formatIsValid = bfd_check_format(fileHandle,2);\n          if (formatIsValid != '\\0') {\n            process_archived_files_001023b6();\n            return;\n          }\n          display_bfd(fileHandle);\n          formatIsValid = bfd_close(fileHandle);\n          if (formatIsValid != '\\0') {\n            return;\n          }\n        }\n        bfd_nonfatal(filePath);\n        return_code = 1;\n        return;\n      }\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMessage,filePath);\n    }\n  }\n  return_code = 1;\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_001023b6",
                "bfd_check_format",
                "non_fatal",
                "display_file.cold",
                "display_bfd",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102980",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_00102980"
        },
        "FUN_00108168": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108168",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_00108168"
        }
    },
    "used_tokens": 19012,
    "layers": [
        [
            "FUN_001030e0",
            "FUN_00103d20",
            "FUN_00103040",
            "FUN_0010274b",
            "FUN_00102000",
            "FUN_00103cc0",
            "FUN_00102360",
            "FUN_00102a90",
            "FUN_0010259c",
            "FUN_00102e90",
            "FUN_00102d70",
            "FUN_001026f6",
            "FUN_001026ea",
            "FUN_00102fe0",
            "FUN_00102f40",
            "FUN_00102db0",
            "FUN_00102020",
            "FUN_001024d2",
            "FUN_001023b6",
            "FUN_0010281b",
            "FUN_00102ee0",
            "FUN_00102710",
            "FUN_0010278c",
            "FUN_00103c50",
            "FUN_00102a40",
            "FUN_00103130",
            "FUN_00102e50"
        ],
        [
            "FUN_00102980"
        ]
    ],
    "locked_functions": []
}