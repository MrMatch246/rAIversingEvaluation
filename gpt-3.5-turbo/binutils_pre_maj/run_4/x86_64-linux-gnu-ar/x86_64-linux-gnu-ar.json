{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_pointer_00102cd9",
                "in_EAX": "numIterations",
                "iVar1": "comparisonResult",
                "unaff_RBX": "pointerArray",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingPointer_00102cd9(void)\n\n{\n  int numIterations;\n  int comparisonResult;\n  long *pointerArray;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (numIterations == 3) {\n    for (; *pointerArray != 0; pointerArray = (long *)(*pointerArray + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*pointerArray != (undefined8 *)0x0; pointerArray = (long *)(*pointerArray + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*pointerArray,targetFilename);\n      if (comparisonResult == 0) {\n        if (numIterations != 2) {\n          return pointerArray;\n        }\n        return (long *)(*pointerArray + 0xf0);\n      }\n    }\n  }\n  return pointerArray;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_pointer_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00105830",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "isVerbose",
                "param_4": "printAddress",
                "iVar1": "returnValue",
                "ppcVar2": "filePtr",
                "pcVar3": "timeString",
                "uVar4": "filePermissions",
                "local_100": "currentTime",
                "uStack_f3": "fileType",
                "cStack_f2": "ownerRead",
                "cStack_f1": "ownerWrite",
                "cStack_f0": "ownerExecute",
                "cStack_ef": "groupRead",
                "cStack_ee": "groupWrite",
                "cStack_ed": "groupExecute",
                "cStack_ec": "othersRead",
                "cStack_eb": "othersWrite",
                "cStack_ea": "othersExecute",
                "local_e8": "formattedTime",
                "local_b8": "buffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "minorDevice",
                "uStack_98": "majorDevice",
                "uStack_88": "inode",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char isVerbose,char printAddress)\n\n{\n  int returnValue;\n  char **filePtr;\n  char *timeString;\n  uint filePermissions;\n  time_t currentTime;\n  undefined fileType;\n  char ownerRead;\n  char ownerWrite;\n  char ownerExecute;\n  char groupRead;\n  char groupWrite;\n  char groupExecute;\n  char othersRead;\n  char othersWrite;\n  char othersExecute;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined buffer [24];\n  uint fileSize;\n  uint minorDevice;\n  uint majorDevice;\n  undefined8 inode;\n  time_t fileModificationTime;\n  \n  if (isVerbose != '\\0') {\n    filePtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      filePtr = fileInfo;\n    }\n    returnValue = (**(code **)(filePtr[1] + 0x1e8))(fileInfo,buffer);\n    if (returnValue == 0) {\n      currentTime = fileModificationTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      filePermissions = fileSize & 0xf000;\n      if (filePermissions == 0x4000) {\n        fileType = 100;\n      }\n      else if (filePermissions == 0xa000) {\n        fileType = 0x6c;\n      }\n      else if (filePermissions == 0x6000) {\n        fileType = 0x62;\n      }\n      else if (filePermissions == 0x2000) {\n        fileType = 99;\n      }\n      else if (filePermissions == 0xc000) {\n        fileType = 0x73;\n      }\n      else {\n        fileType = 0x70;\n        if (filePermissions != 0x1000) {\n          fileType = 0x2d;\n        }\n      }\n      ownerRead = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      ownerWrite = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      ownerExecute = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      groupRead = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWrite = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecute = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      othersRead = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      othersWrite = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      othersExecute = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (ownerExecute == 'x') {\n          ownerExecute = 's';\n        }\n        else {\n          ownerExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (groupExecute == 'x') {\n          groupExecute = 's';\n        }\n        else {\n          groupExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (othersExecute == 'x') {\n          othersExecute = 't';\n        }\n        else {\n          othersExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&ownerRead,(ulong)minorDevice,(ulong)majorDevice,inode,\n              formattedTime,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00107890",
                "FUN_00103ddc"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "directory",
                "pFVar2": "file",
                "sVar3": "directoryLength"
            },
            "code": "\nvoid processFile_00105a68(void)\n\n{\n  char *directory;\n  FILE *file;\n  size_t directoryLength;\n  \n  directory = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directoryLength = strlen(DAT_0010d5e8);\n    if (directoryLength != 0) {\n      if (directory[directoryLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directory,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directory,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file = fopen(DAT_0010d618,\"w\");\n  if (file != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat",
                "printf",
                "xexit",
                "FUN_00102e57",
                "perror",
                "fopen",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "param_1": "archiveEntries",
                "param_2": "callbackFunction",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "entryName",
                "bVar3": "entryFound",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorMessage",
                "plVar6": "nextEntry2",
                "lVar7": "currentEntry2",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 processArchiveEntries_001032a8(long *archiveEntries,code *callbackFunction,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 entryName;\n  bool entryFound;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorMessage;\n  long *nextEntry2;\n  long currentEntry2;\n  long *previousEntry;\n  \n  currentEntry2 = archiveEntries[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntry2 != 0) {\n      nextEntry = *(long *)(currentEntry2 + 0xf0);\n      (*callbackFunction)(currentEntry2,0);\n      currentEntry2 = nextEntry;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      currentEntry = (long *)archiveEntries[0x1e];\n      previousEntry = archiveEntries;\n      while (nextEntry2 = currentEntry, nextEntry2 != (long *)0x0) {\n        if (*nextEntry2 != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callbackFunction)(nextEntry2,previousEntry);\n          }\n        }\n        previousEntry = nextEntry2;\n        currentEntry = (long *)nextEntry2[0x1e];\n      }\n      if (!entryFound) {\n        entryName = *entryNames;\n        errorMessage = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessage,entryName);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_error_0010285f",
                "__format": "formatString",
                "lVar2": "filePointer",
                "plVar3": "optionalFilePointer",
                "uVar4": "entryName",
                "plVar5": "currentEntryPointer",
                "unaff_RBP": "pointerToFunction",
                "unaff_R12": "registerR12",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "registerR14",
                "iStack000000000000000c": "entryCount"
            },
            "code": "\n\n\nvoid printArchiveEntryError_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long filePointer;\n  long *optionalFilePointer;\n  undefined8 entryName;\n  long *currentEntryPointer;\n  code *pointerToFunction;\n  long registerR12;\n  int remainingEntries;\n  undefined8 *registerR14;\n  int entryCount;\n  \ncode_r0x0010285f:\n  entryName = *registerR14;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  registerR14 = registerR14 + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  currentEntryPointer = *(long **)(registerR12 + 0xf0);\n  entryCount = 0;\n  do {\n    if (currentEntryPointer == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntryPointer + 0xac) == 0) {\n      filePointer = *currentEntryPointer;\n      if (filePointer == 0) {\n        optionalFilePointer = (long *)currentEntryPointer[0x1d];\n        if ((long *)currentEntryPointer[0x1d] == (long *)0x0) {\n          optionalFilePointer = currentEntryPointer;\n        }\n        (**(code **)(optionalFilePointer[1] + 0x1e8))(currentEntryPointer,&stack0x00000010);\n      }\n      else if (((*(byte *)(registerR12 + 0x49) & 0x10) == 0) || (filePointer = process_file_name_00105830(), filePointer != 0))\n      {\n        entryName = process_file_name_00105830(*registerR14);\n        iVar1 = filename_cmp(entryName,filePointer);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entryCount = entryCount + 1,\n            entryCount == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntryPointer = (long *)currentEntryPointer[0x1e];\n  } while( true );\n  (*pointerToFunction)();\n  *(undefined4 *)((long)currentEntryPointer + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_error_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "outputToConsole",
                "uVar1": "archiveDescription",
                "pcVar2": "localizedText",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint outputToConsole)\n\n{\n  undefined8 archiveDescription;\n  char *localizedText;\n  FILE *outputStream;\n  \n  localizedText = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputToConsole != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedText,DAT_0010d660);\n  archiveDescription = DAT_0010d660;\n  localizedText = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedText,archiveDescription);\n  localizedText = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedText);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (outputToConsole != 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToConsole ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "FUN_0010336b",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_index_0010394a",
                "param_1": "option",
                "uVar1": "defaultSymbol",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveIndex_0010394a(uint option)\n\n{\n  undefined8 defaultSymbol;\n  char *message;\n  FILE *outputStream;\n  \n  defaultSymbol = DAT_0010d660;\n  outputStream = _stderr;\n  if (option != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,defaultSymbol);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (option != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(option ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_archive_index_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_message_00107920",
                "param_1": "errorCode",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "param8",
                "param_10": "param9",
                "param_11": "param10",
                "param_12": "param11",
                "param_13": "param12",
                "param_14": "param13",
                "in_AL": "inputFlag",
                "local_d8": "localVar1",
                "local_d4": "localVar2",
                "local_d0": "ptrLocalVar",
                "local_c8": "localVarArray",
                "local_b8": "localVarArray",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "param1",
                "local_78": "param2",
                "local_68": "param3",
                "local_58": "param4",
                "local_48": "param5",
                "local_38": "param6",
                "local_28": "param7",
                "local_18": "param8"
            },
            "code": "\nvoid printErrorMessage_00107920(undefined4 errorCode,undefined4 param1,undefined4 param2,undefined4 param3,\n                 undefined4 param4,undefined4 param5,undefined4 param6,undefined4 param7,\n                 undefined8 param8,undefined8 param9,undefined8 param10,undefined8 param11,\n                 undefined8 param12,undefined8 param13)\n\n{\n  char inputFlag;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *ptrLocalVar;\n  undefined *localVarArray;\n  undefined localVarArray [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  \n  if (inputFlag != '\\0') {\n    param1 = errorCode;\n    param2 = param1;\n    param3 = param2;\n    param4 = param3;\n    param5 = param4;\n    param6 = param5;\n    param7 = param6;\n    param8 = param7;\n  }\n  ptrLocalVar = &stack0x00000008;\n  localVar1 = 8;\n  localVarArray = localVarArray;\n  localVar2 = 0x30;\n  param10 = param9;\n  param11 = param10;\n  param12 = param11;\n  param13 = param12;\n  param14 = param13;\n  print_error_message_001078c0(param8,&localVar1);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "print_error_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "return_one_00105bb0"
            },
            "code": "\nundefined8 return_one_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "return_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_application_00107640"
            },
            "code": "\nundefined8 initializeApplication_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_application_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_archive_member_00102e6f",
                "pcVar1": "input_directory",
                "in_RAX": "current_character",
                "uVar2": "base_name",
                "uVar3": "error_message",
                "pFVar4": "archive_file",
                "sVar5": "input_directory_length",
                "pcVar6": "current_directory"
            },
            "code": "\nvoid extract_archive_member_00102e6f(void)\n\n{\n  char *input_directory;\n  char *current_character;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *archive_file;\n  size_t input_directory_length;\n  char *current_directory;\n  \n  input_directory = DAT_0010d5e8;\n  do {\n    current_character = current_character + 1;\n    while (*current_character != '/') {\n      if (*current_character == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (input_directory_length = strlen(DAT_0010d5e8), input_directory_length != 0)) {\n          if (input_directory[input_directory_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(input_directory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(input_directory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        archive_file = fopen(DAT_0010d618,\"w\");\n        if (archive_file == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_directory = current_character;\n      if ((*current_character == '.') && (current_directory = current_character + 1, current_character[1] == '.')) {\n        current_directory = current_character + 2;\n        if ((current_character[2] == '/') || (current_character[2] == '\\0')) {\n          base_name = lbasename();\n          input_directory = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_message_00107920(error_message,input_directory,base_name);\n          DAT_0010d618 = (char *)base_name;\n          process_file_00105a68();\n          return;\n        }\n      }\n      for (; (current_character = current_directory, *current_directory != '\\0' && (*current_directory != '/')); current_directory = current_directory + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_info_00107890",
                "param_1": "file",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printFileInfo_00107890(undefined8 file)\n\n{\n  print_file_info_001079c0(outputStream,file,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_info_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00105af0",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "data",
                "param_2": "size",
                "param_3": "offset",
                "param_4": "result",
                "pvVar1": "buffer",
                "pvVar2": "dynamic_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 data,undefined8 size,undefined8 offset,undefined8 result)\n\n{\n  void *buffer;\n  void *dynamic_memory;\n  undefined return_value [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dynamic_memory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dynamic_memory;\n  } while (dynamic_memory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  extract_data_from_binary_001031cf(buffer,data);\n  return_value._8_8_ = result;\n  return_value._0_8_ = buffer;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_value_00103172",
                "param_1": "value_ptr",
                "param_2": "string_ptr",
                "param_3": "should_print",
                "param_4": "new_value",
                "uVar1": "old_value",
                "auVar2": "updated_value"
            },
            "code": "\nundefined  [16]\nupdate_and_print_value_00103172(undefined8 *value_ptr,undefined8 *string_ptr,char should_print,undefined8 new_value)\n\n{\n  undefined8 old_value;\n  undefined updated_value [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*string_ptr);\n  }\n  old_value = *value_ptr;\n  string_ptr[0x1e] = old_value;\n  updated_value._1_7_ = (undefined7)((ulong)old_value >> 8);\n  updated_value[0] = 1;\n  *value_ptr = string_ptr;\n  updated_value._8_8_ = new_value;\n  return updated_value;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_and_print_value_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_in_memory_00105870",
                "param_1": "fileList",
                "param_2": "searchType",
                "param_3": "searchTerm",
                "uVar2": "defaultSearchTerm",
                "iVar3": "defaultSearchType",
                "iVar1": "cmpResult"
            },
            "code": "\nlong * findFileInMemory_00105870(long *fileList,int searchType,undefined8 searchTerm)\n\n{\n  int cmpResult;\n  undefined8 defaultSearchTerm;\n  int defaultSearchType;\n  \n  defaultSearchTerm = DAT_0010d638;\n  defaultSearchType = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultSearchTerm = searchTerm;\n    defaultSearchType = searchType;\n  }\n  if (defaultSearchType == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      cmpResult = filename_cmp(*(undefined8 *)*fileList,defaultSearchTerm);\n      if (cmpResult == 0) {\n        if (defaultSearchType != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_file_in_memory_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *dataPointer;\n  \n  dataPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "errorDetail",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "bytesCopied",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 errorDetail)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong bytesCopied;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    bytesCopied = 0;\n  }\n  else {\n    copyResult = copy_file_data_00105c00(filePermissions);\n    bytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00107920(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  returnValue._8_8_ = errorDetail;\n  returnValue._0_8_ = bytesCopied;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_and_extract_info_00107650",
                "param_1": "file",
                "uVar1": "result",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkFileAndExtractInfo_00107650(undefined8 file)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size_001052a0();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileSize = extract_object_files_00105300(file,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    extract_and_print_file_info_001058b0(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00105300",
                "xexit",
                "FUN_001052a0",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_file_and_extract_info_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_handle_error_00102f1e",
                "piVar1": "error_location",
                "uVar2": "error_message",
                "unaff_RBP": "file_size",
                "unaff_R12": "file_path",
                "auVar3": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] copy_file_and_handle_error_00102f1e(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined result [16];\n  undefined8 return_address;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00107920(error_message);\n  unlink(file_path);\n  result._0_8_ = file_size & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_handle_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_error_message_cannot_set_time_00102fd7",
                "piVar1": "error_location_ptr",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_message_cannot_set_time_00102fd7(void)\n\n{\n  int *error_location_ptr;\n  undefined8 error_message;\n  \n  error_location_ptr = __errno_location();\n  strerror(*error_location_ptr);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00107920(error_message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_error_message_cannot_set_time_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "printf": "print",
                "fflush": "flush",
                "_stdout": "output_stream"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(output_stream);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00102cd9"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_001031a5",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001075e0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_0010266f",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001052a0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1",
                "FUN_001028ed",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_0010266f",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_info_00103ddc",
                "param_1": "filePtr"
            },
            "code": "\nvoid printFileInfo_00103ddc(undefined8 filePtr)\n\n{\n  print_file_info_001079c0(DAT_0010d578,filePtr,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_info_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "errorMessage",
                "param_2": "vaList",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *errorMessage,__gnuc_va_list vaList)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,errorMessage,vaList);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "vfprintf",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_00105480",
                "param_1": "archivePtr",
                "param_2": "callbackFunc",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "tempPtr",
                "uVar4": "result",
                "plVar5": "entryPtr",
                "local_cc": "counter",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid processArchive_00105480(long archivePtr,code *callbackFunc,undefined8 *entryNames,int numEntries)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *tempPtr;\n  undefined8 result;\n  long *entryPtr;\n  int counter;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(archivePtr + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callbackFunc)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryPtr = *(long **)(archivePtr + 0xf0);\n      counter = 0;\n      for (; entryPtr != (long *)0x0; entryPtr = (long *)entryPtr[0x1e]) {\n        if (*(int *)((long)entryPtr + 0xac) == 0) {\n          currentEntry = *entryPtr;\n          if (currentEntry == 0) {\n            tempPtr = (long *)entryPtr[0x1d];\n            if ((long *)entryPtr[0x1d] == (long *)0x0) {\n              tempPtr = entryPtr;\n            }\n            (**(code **)(tempPtr[1] + 0x1e8))(entryPtr,localBuffer);\n          }\n          else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) ||\n                  (currentEntry = process_file_name_00105830(currentEntry,archivePtr), currentEntry != 0)) {\n            result = process_file_name_00105830(*entryNames,archivePtr);\n            comparisonResult = filename_cmp(result,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (counter = counter + 1, counter == _DAT_0010d630)))) {\n              (*callbackFunc)();\n              *(undefined4 *)((long)entryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *entryNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,result);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_error_message_001031a5",
                "__format": "errorFormatString",
                "uVar1": "updatedVariable"
            },
            "code": "\nvoid printErrorMessage_001031a5(void)\n\n{\n  uint updatedVariable;\n  char *errorFormatString;\n  \n  updatedVariable = DAT_0010d554 + 1;\n  errorFormatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorFormatString,(ulong)updatedVariable);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_error_message_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00102ba1",
                "FUN_0010266f",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_0010342d",
                "FUN_00107690",
                "FUN_0010394a",
                "FUN_0010315d",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_001058b0",
                "FUN_00102f55"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_00105db0",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001052a0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "lVar1": "loop_index",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "bVar4": "is_first_iteration",
                "__size": "buffer_size"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_index;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte is_first_iteration;\n  \n  is_first_iteration = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_size = DAT_0010d580 + 8;\n    buffer_size = new_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_index = 0x10; loop_index != 0; loop_index = loop_index + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)is_first_iteration * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  print_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "param_1": "inputParams",
                "iVar1": "status",
                "__ptr": "buffer",
                "puVar2": "auxParam",
                "uVar3": "bytesRead",
                "uVar4": "errorMsg",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "bufferSize",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "remainingBytes"
            },
            "code": "\n\n\nvoid extractAndPrintArchiveContents_00103a78(undefined8 *inputParams)\n\n{\n  int status;\n  void *buffer;\n  undefined8 *auxParam;\n  ulong bytesRead;\n  undefined8 errorMsg;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t bufferSize;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong remainingBytes;\n  \n  buffer = (void *)xmalloc(0x2000);\n  auxParam = (undefined8 *)inputParams[0x1d];\n  if ((undefined8 *)inputParams[0x1d] == (undefined8 *)0x0) {\n    auxParam = inputParams;\n  }\n  status = (**(code **)(auxParam[1] + 0x1e8))(inputParams,stackBuffer);\n  if (status == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputParams);\n    }\n    totalBytesRead = 0;\n    bfd_seek(inputParams,0,0);\n    goto LAB_00103afd;\n  }\n  inputParams = (undefined8 *)*inputParams;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMsg = dcgettext(0,errorString,5);\n    print_error_and_exit_00107690(errorMsg,inputParams);\n    remainingBytes = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,bufferSize,_stdout);\n      if (bytesWritten != bufferSize) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        print_error_and_exit_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (remainingBytes <= totalBytesRead) goto LAB_00103b91;\n      bufferSize = remainingBytes - totalBytesRead;\n      if (0x2000 < bufferSize) {\n        bufferSize = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bufferSize,inputParams);\n    } while (bufferSize == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    inputParams = *(undefined8 **)inputParams[0x1d];\n    archiveSize = remainingBytes;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "printf",
                "xmalloc",
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "bfd_seek",
                "__errno_location",
                "strerror",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_contents_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_0010285f",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001033b0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "extract_and_print_file_info_001058b0",
                "param_1": "file_info_array",
                "cVar1": "status",
                "uVar2": "flags",
                "uVar4": "time_data",
                "__format": "time_error_format",
                "__ptr": "file_path",
                "__stream": "file_stream",
                "ppcVar5": "bfd_stream",
                "uStack0000000000000020": "file_mode",
                "in_stack_00000028": "inode",
                "in_stack_00000038": "size",
                "local_3c[0]": "temp_fd",
                "uStack_33": "file_type_char",
                "cStack_32": "is_exe_char",
                "cStack_31": "is_writable_char"
            },
            "code": "\n\n\nvoid extract_and_print_file_info_001058b0(undefined8 *file_info_array)\n\n{\n  char status;\n  uint flags;\n  int iVar3;\n  undefined8 time_data;\n  char *time_error_format;\n  void *file_path;\n  FILE *file_stream;\n  char **bfd_stream;\n  uint file_mode;\n  uint inode;\n  undefined8 size;\n  int local_3c [2];\n  undefined file_type_char;\n  char is_exe_char;\n  char is_writable_char;\n  \n  time_data = file_info_array[0x1e];\n  temp_fd = -1;\n  file_path = (void *)xstrdup(*file_info_array);\n  file_stream = (FILE *)extract_filename_001057a0(file_path,local_3c);\n  iVar3 = temp_fd;\n  if (file_stream != (FILE *)0x0) {\n    DAT_0010d618 = file_stream;\n    bfd_stream = (char **)bfd_fdopenw(file_stream,*(undefined8 *)file_info_array[1],temp_fd);\n    if (bfd_stream != (char **)0x0) {\n      DAT_0010d5e0 = bfd_stream;\n      bfd_set_format(bfd_stream,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)bfd_stream + 0x49) & 0xfffffff7;\n      *(char *)((long)bfd_stream + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)bfd_stream + 0x44) = *(uint *)((long)bfd_stream + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)bfd_stream + 0x44) = *(uint *)((long)bfd_stream + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)file_info_array + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)bfd_stream + 0x49) = (byte)flags | 0x10;\n        }\n        status = bfd_set_archive_head(bfd_stream,time_data);\n        if (status != '\\0') break;\n        flags = print_error_and_exit_00107c10(file_path);\nLAB_00102d37:\n        *(uint *)((long)bfd_stream + 0x44) = *(uint *)((long)bfd_stream + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      status = bfd_close(bfd_stream);\n      if (status == '\\0') {\n        print_error_and_exit_00107c10(file_path);\n        time_error_format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,time_error_format);\n        flags = file_mode & 0xf000;\n        if (flags == 0x4000) {\n          file_type_char = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type_char = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type_char = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type_char = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type_char = 0x73;\n        }\n        else {\n          file_type_char = 0x70;\n          if (flags != 0x1000) {\n            file_type_char = 0x2d;\n          }\n        }\n        is_exe_char = (-((_file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        is_writable_char = (-((_file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file_stream,\"%s %ld/%ld %6lu %s \",&is_exe_char,_file_mode >> 0x20,\n                (ulong)inode,size,&stack0xffffffffffffffd8,\n                _file_mode & 0xffffffff);\n        fputs(*bfd_stream,file_stream);\n        if ((char)file_info_array != '\\0') {\n          if ((*(byte *)((long)bfd_stream + 0x49) & 0x10) == 0) {\n            if (bfd_stream[0xb] != (char *)0x0) {\n              fprintf(file_stream,\" 0x%lx\");\n            }\n          }\n          else if (bfd_stream[0xc] != (char *)0x0) {\n            fprintf(file_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,file_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(file_info_array);\n      iVar3 = copy_and_delete_file_00105bc0(file_stream,file_path,iVar3);\n      if (iVar3 == 0) {\n        free(file_path);\n        free(file_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    print_error_and_exit_00107c10(file_path);\n  }\n  time_data = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  print_error_and_exit_00107c10(time_data);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "bfd_set_format",
                "FUN_001057a0",
                "FUN_00107c10",
                "xstrdup",
                "dcgettext",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_and_print_file_info_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "close_and_remove_files_00102bf5",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid closeAndRemoveFiles_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "close_and_remove_files_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_timestamps_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "oldTimestamp",
                "uStack_34": "oldTimestampHigh",
                "uStack_30": "newTimestamp",
                "uStack_2c": "newTimestampHigh",
                "local_28": "backupTimestamp",
                "uStack_24": "backupTimestampHigh",
                "uStack_20": "reserved1",
                "uStack_1c": "reserved2"
            },
            "code": "\nvoid setFileTimestamps_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorNumberPtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 oldTimestamp;\n  undefined4 oldTimestampHigh;\n  undefined4 newTimestamp;\n  undefined4 newTimestampHigh;\n  undefined4 backupTimestamp;\n  undefined4 backupTimestampHigh;\n  undefined4 reserved1;\n  undefined4 reserved2;\n  \n  backupTimestamp = *(undefined4 *)(fileInfo + 0x58);\n  backupTimestampHigh = *(undefined4 *)(fileInfo + 0x5c);\n  reserved1 = *(undefined4 *)(fileInfo + 0x60);\n  reserved2 = *(undefined4 *)(fileInfo + 100);\n  oldTimestamp = *(undefined4 *)(fileInfo + 0x48);\n  oldTimestampHigh = *(undefined4 *)(fileInfo + 0x4c);\n  newTimestamp = *(undefined4 *)(fileInfo + 0x50);\n  newTimestampHigh = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&oldTimestamp,0);\n  if (result != 0) {\n    errorNumberPtr = __errno_location();\n    errorMessage = strerror(*errorNumberPtr);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00107920(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_timestamps_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_and_process_file_00105a20",
                "param_1": "file_path",
                "pcVar1": "base_directory",
                "pcVar2": "current_char",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "pFVar5": "file_pointer",
                "sVar6": "file_length"
            },
            "code": "\nvoid extract_and_process_file_00105a20(char *file_path)\n\n{\n  char *base_directory;\n  char *current_char;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t file_length;\n  \n  base_directory = DAT_0010d5e8;\n  DAT_0010d618 = file_path;\n  if (*file_path == '/') {\nLAB_00102e9a:\n    base_name = lbasename();\n    base_directory = DAT_0010d618;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_message_00107920(error_message,base_directory,base_name);\n    DAT_0010d618 = (char *)base_name;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*file_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (file_length = strlen(DAT_0010d5e8), file_length != 0)) {\n        if (base_directory[file_length - 1] == '/') {\n          DAT_0010d618 = (char *)concat(base_directory,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(base_directory,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_pointer = fopen(DAT_0010d618,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_char = file_path;\n    if ((*file_path == '.') && (current_char = file_path + 1, file_path[1] == '.')) {\n      current_char = file_path + 2;\n      if ((file_path[2] == '/') || (file_path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n    }\n    for (; file_path = current_char, *current_char == '/'; current_char = current_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_and_process_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_with_error_handling_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorLocationPointer",
                "iVar1": "errorCode"
            },
            "code": "\nundefined8 closeFileWithErrorHandling_00102f55(void)\n\n{\n  int errorCode;\n  int *errorLocationPointer;\n  int fileDescriptor;\n  \n  errorLocationPointer = __errno_location();\n  errorCode = *errorLocationPointer;\n  close(fileDescriptor);\n  *errorLocationPointer = errorCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_with_error_handling_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_filename_001057a0",
                "param_1": "path",
                "param_2": "file_descriptor",
                "param_3": "unused_param1",
                "param_4": "unused_param2",
                "iVar1": "temp_file_descriptor",
                "pcVar2": "filename",
                "lVar3": "path_length",
                "lVar4": "loop_counter",
                "lVar5": "filename_length",
                "pcVar6": "allocated_filename",
                "bVar7": "is_slash",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] extract_filename_001057a0(char *path,int *file_descriptor,undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  int temp_file_descriptor;\n  char *filename;\n  long path_length;\n  long loop_counter;\n  long filename_length;\n  char *allocated_filename;\n  byte is_slash;\n  undefined result [16];\n  \n  is_slash = 0;\n  filename = strrchr(path,0x2f);\n  if (filename == (char *)0x0) {\n    filename = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    filename_length = (long)filename - (long)path;\n    filename = (char *)xmalloc(filename_length + 0xb);\n    path_length = filename_length + 1;\n    allocated_filename = filename;\n    for (loop_counter = filename_length; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *allocated_filename = *path;\n      path = path + (ulong)is_slash * -2 + 1;\n      allocated_filename = allocated_filename + (ulong)is_slash * -2 + 1;\n    }\n    filename[filename_length] = '/';\n  }\n  *(undefined8 *)(filename + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(filename + path_length) + 8) = 0;\n  temp_file_descriptor = mkstemp(filename);\n  if (temp_file_descriptor == -1) {\n    allocated_filename = (char *)0x0;\n    free(filename);\n  }\n  else {\n    *file_descriptor = temp_file_descriptor;\n    allocated_filename = filename;\n  }\n  result._8_8_ = unused_param2;\n  result._0_8_ = allocated_filename;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102ba1",
                "xmalloc",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_filename_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_metadata_00102d8c",
                "unaff_RBX": "fileContent",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isFlagSet",
                "uStack0000000000000015": "flagValue",
                "cStack0000000000000016": "flagChar1",
                "cStack0000000000000017": "flagChar2",
                "param_9": "flagChar3",
                "cStack0000000000000019": "flagChar4",
                "cStack000000000000001a": "flagChar5",
                "cStack000000000000001b": "flagChar6",
                "cStack000000000000001c": "flagChar7",
                "cStack000000000000001d": "flagChar8",
                "cStack000000000000001e": "flagChar9",
                "uStack000000000000001f": "flagChar10",
                "param_19": "filePermissions",
                "uStack000000000000006c": "timeValue",
                "param_20": "fileSize",
                "param_22": "timeData",
                "__format": "corruptTimeData"
            },
            "code": "\nvoid printFileMetadata_00102d8c(void)\n\n{\n  char *corruptTimeData;\n  uint uVar1;\n  char **fileContent;\n  FILE *outputFile;\n  char isFlagSet;\n  undefined flagValue;\n  char flagChar1;\n  char flagChar2;\n  char flagChar3;\n  char flagChar4;\n  char flagChar5;\n  char flagChar6;\n  char flagChar7;\n  char flagChar8;\n  char flagChar9;\n  undefined flagChar10;\n  uint filePermissions;\n  uint timeValue;\n  uint fileSize;\n  undefined8 timeData;\n  \n  corruptTimeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,corruptTimeData);\n  uVar1 = filePermissions & 0xf000;\n  if (uVar1 == 0x4000) {\n    flagValue = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    flagValue = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    flagValue = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    flagValue = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    flagValue = 0x73;\n  }\n  else {\n    flagValue = 0x70;\n    if (uVar1 != 0x1000) {\n      flagValue = 0x2d;\n    }\n  }\n  flagChar1 = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  flagChar2 = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  flagChar3 = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  flagChar4 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  flagChar5 = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  flagChar6 = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  flagChar7 = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  flagChar8 = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  flagChar9 = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (flagChar3 == 'x') {\n      flagChar3 = 's';\n    }\n    else {\n      flagChar3 = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (flagChar6 == 'x') {\n      flagChar6 = 's';\n    }\n    else {\n      flagChar6 = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (flagChar9 == 'x') {\n      flagChar9 = 't';\n    }\n    else {\n      flagChar9 = 'T';\n    }\n  }\n  flagChar10 = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)timeValue,\n          (ulong)fileSize,timeData,&stack0x00000020,(ulong)filePermissions);\n  fputs(*fileContent,outputFile);\n  if (isFlagSet != '\\0') {\n    if ((*(byte *)((long)fileContent + 0x49) & 0x10) == 0) {\n      if (fileContent[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContent[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fprintf",
                "sprintf",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105c00",
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00103e95",
                "FUN_001031cf",
                "FUN_001028ed",
                "FUN_00102f55",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_object_files_00105300",
                "param_1": "filename",
                "param_2": "objectFiles",
                "plVar1": "archivedFilePtr",
                "pcVar2": "errorString",
                "bVar3": "conversionFlag",
                "cVar4": "errorFlag",
                "iVar5": "status",
                "uVar6": "errorMessage",
                "uVar7": "errorFormat",
                "piVar8": "errnoLocation",
                "lVar9": "filePtr",
                "puVar10": "loadedObjectFiles",
                "local_b0": "matchingFormat",
                "local_a8": "fileStatus"
            },
            "code": "\n\n\nundefined8 * extractObjectFiles_00105300(char *filename,undefined8 *objectFiles)\n\n{\n  long *archivedFilePtr;\n  char *errorString;\n  byte conversionFlag;\n  char errorFlag;\n  int status;\n  undefined8 errorMessage;\n  undefined8 errorFormat;\n  int *errnoLocation;\n  long filePtr;\n  undefined8 *loadedObjectFiles;\n  undefined8 matchingFormat;\n  stat fileStatus;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  status = stat(filename,&fileStatus);\n  errorString = DAT_0010d618;\n  if (status == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      check_and_exit_if_zero_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (objectFiles != (undefined8 *)0x0)) {\n      loadedObjectFiles = (undefined8 *)load_object_files_00102710();\n      return loadedObjectFiles;\n    }\n    objectFiles = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((objectFiles != (undefined8 *)0x0) && (errorFlag = bfd_set_format(objectFiles,2), errorFlag != '\\0')) &&\n       (errorFlag = bfd_close(objectFiles), errorFlag != '\\0')) {\n      errorString = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  print_error_and_exit_00107c10(filename);\n  do {\n    conversionFlag = *(byte *)((long)objectFiles + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (conversionFlag != 0) {\n        errorFormat = *objectFiles;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errorMessage,errorFormat);\n        goto LAB_00102812;\n      }\n    }\n    else if (conversionFlag == 0) {\n      errorFormat = *objectFiles;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errorMessage,errorFormat);\nLAB_001027cb:\n      print_error_message_00107c20(filename);\n      status = bfd_get_error();\n      if (status == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matchingFormat);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePtr = objectFiles + 0x1e;\n      for (filePtr = bfd_openr_next_archived_file(objectFiles,0); filePtr != 0;\n          filePtr = bfd_openr_next_archived_file(objectFiles,filePtr)) {\n        *archivedFilePtr = filePtr;\n        archivedFilePtr = (long *)(filePtr + 0xf0);\n      }\n      *archivedFilePtr = 0;\n      status = bfd_get_error();\n      if (status == 9) {\n        return objectFiles;\n      }\n      do {\n        print_error_and_exit_00107c10(filename);\nLAB_00102826:\n        errorFormat = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(errorFormat,filename);\n        errorString = filename;\nLAB_001053be:\n        DAT_0010d618 = errorString;\n        objectFiles = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (objectFiles == (undefined8 *)0x0);\n      errorFlag = bfd_check_format_matches(objectFiles,2,&matchingFormat);\n      if (errorFlag == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (filePtr = bfd_openr_next_archived_file(objectFiles,0), filePtr == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openw",
                "bfd_set_format",
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "xexit",
                "bfd_openr_next_archived_file",
                "FUN_00107690",
                "bfd_set_error",
                "stat",
                "FUN_00102710",
                "bfd_close",
                "bfd_check_format_matches",
                "FUN_00107c20",
                "bfd_get_error",
                "fprintf",
                "perror",
                "__errno_location",
                "FUN_00103bd1",
                "FUN_0010315d",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_object_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_file_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePtr1",
                "puVar2": "uintPtr",
                "bVar3": "byteVar",
                "plVar4": "longPtr1",
                "puVar5": "undefined8Ptr",
                "uVar6": "uintVar1",
                "uVar7": "uintVar2",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "charPtrPtr1",
                "piVar11": "intPtr1",
                "puVar12": "undefinedPtr1",
                "bVar13": "byteVar2",
                "cVar14": "charVar1",
                "iVar15": "intVar1",
                "uVar16": "uintVar3",
                "uVar17": "undefinedVar2",
                "uVar27": "undefined8Var2",
                "pFVar18": "filePtr1",
                "sVar19": "size_tVar1",
                "sVar20": "size_tVar2",
                "__ptr": "bytePtr2",
                "plVar21": "longPtr2",
                "pFVar22": "filePtr2",
                "pcVar23": "charVar2",
                "lVar24": "longVar1",
                "uVar25": "ulongVar1",
                "puVar26": "undefined8Ptr2",
                "pFVar28": "filePtr3",
                "pplVar29": "longPPtr1",
                "uVar30": "undefined8Var3",
                "unaff_R12": "filePtr4",
                "pcVar39": "errMsgVar1",
                "uVar44": "uintVar4",
                "iVar45": "intVar2",
                "local_130": "filePtr5",
                "local_128": "filePtr6",
                "local_118": "bytePtr3",
                "local_110": "charPtrPtr2",
                "local_108": "size_tVar3",
                "local_100": "longVar2",
                "local_c8": "undefinedArr1",
                "puVar36": "undefinedPPtr1",
                "uVar37": "uintVar5",
                "unaff_RBP": "charPtr",
                "pbVar38": "bytePtr4",
                "pcVar43": "charPtr3",
                "lVar34": "longVar3",
                "lVar35": "longVar4"
            },
            "code": "\n\n\nvoid processFile_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePtr1;\n  uint *uintPtr;\n  byte byteVar;\n  long *longPtr1;\n  undefined8 *undefined8Ptr;\n  undefined4 uintVar1;\n  undefined4 uintVar2;\n  bool boolVar1;\n  bool boolVar2;\n  char **charPtrPtr1;\n  int *intPtr1;\n  undefined *undefinedPtr1;\n  byte byteVar2;\n  char charVar1;\n  int intVar1;\n  uint uintVar3;\n  undefined4 undefinedVar2;\n  FILE *filePtr1;\n  size_t size_tVar1;\n  size_t size_tVar2;\n  byte *bytePtr2;\n  long *longPtr2;\n  FILE *filePtr2;\n  char *charVar2;\n  long longVar1;\n  ulong ulongVar1;\n  undefined8 *undefined8Ptr2;\n  undefined8 undefined8Var2;\n  FILE *filePtr3;\n  long **longPPtr1;\n  undefined8 undefined8Var3;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long longVar3;\n  long longVar4;\n  undefined **pundefinedPPtr1;\n  uint uintVar5;\n  char *charPtr;\n  byte *bytePtr4;\n  char *errMsgVar1;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *filePtr4;\n  char *charPtr3;\n  uint uintVar4;\n  int intVar2;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 filePtr5;\n  FILE *filePtr6;\n  byte *bytePtr3;\n  char **charPtrPtr2;\n  size_t size_tVar3;\n  long longVar2;\n  undefined undefinedArr1 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  charPtr3 = (char *)argv;\n  filePtr1 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPtrPtr2 = (char **)0x7d0;\n  filePtr4 = (FILE *)0x1;\n  filePtr6 = (FILE *)0x0;\n  filePtr2 = argv;\n  do {\n    uintVar3 = (uint)filePtr4;\n    charPtr = (char *)(long)(int)uintVar3;\n    filePtr5 = (FILE *)((long)charPtr * 8);\n    charPtr3 = (char *)filePtr2;\n    if (**(char **)(&filePtr2->_flags + (long)charPtr * 2) == '@') {\n      uintVar4 = (int)charPtrPtr2 - 1;\n      charPtrPtr2 = (char **)(ulong)uintVar4;\n      if (uintVar4 == 0) {\n        longPtr2 = *(long **)filePtr2;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPtr2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      errMsgVar1 = *(char **)(&filePtr2->_flags + (long)charPtr * 2) + 1;\n      intVar1 = stat(errMsgVar1,(stat *)undefinedArr1);\n      if (-1 < intVar1) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          longPtr2 = *(long **)filePtr2;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePtr1 = fopen(errMsgVar1,\"r\");\n        if (filePtr1 != (FILE *)0x0) {\n          intVar1 = fseek(filePtr1,0,2);\n          if (((intVar1 != -1) && (size_tVar1 = ftell(filePtr1), size_tVar1 != 0xffffffffffffffff)) &&\n             (intVar1 = fseek(filePtr1,0,0), intVar1 != -1)) {\n            bytePtr3 = (byte *)xmalloc(size_tVar1 + 1);\n            size_tVar2 = fread(bytePtr3,1,size_tVar1,filePtr1);\n            if ((size_tVar1 == size_tVar2) || (intVar1 = ferror(filePtr1), intVar1 == 0)) {\n              bytePtr3[size_tVar2] = 0;\n              byteVar2 = *bytePtr3;\n              pbyteVar3 = bytePtr3;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              size_tVar1 = strlen((char *)bytePtr3);\n              bytePtr2 = (byte *)xmalloc(size_tVar1 + 1);\n              filePtr3 = (FILE *)0x0;\n              intVar1 = 0;\n              boolVar2 = false;\n              bVar47 = false;\n              boolVar1 = false;\n              longVar2 = 0;\n              pbyteVar3 = bytePtr3;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar1 == 0) || (intVar1 + -1 <= (int)longVar2)) {\n                  if (filePtr3 == (FILE *)0x0) {\n                    intVar1 = 8;\n                    filePtr3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar1 = intVar1 * 2;\n                    filePtr3 = (FILE *)xrealloc(filePtr3,(long)intVar1 << 3);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr3->_flags + longVar2 * 8);\n                }\n                byteVar2 = *pbyteVar3;\n                bytePtr4 = bytePtr2;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | bVar47))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *bytePtr4 = byteVar2;\n                    bytePtr4 = bytePtr4 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar3;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar2 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *bytePtr4 = byteVar2;\n                      bytePtr4 = bytePtr4 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  bytePtr1 = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar2 = *bytePtr1;\n                }\nLAB_0010606f:\n                *bytePtr4 = 0;\n                longPtr2 = (long *)xstrdup(bytePtr2);\n                *ppcVar31 = (char *)longPtr2;\n                *(undefined8 *)(filePtr3->_shortbuf + longVar2 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar2 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                longVar2 = longVar2 + 1;\n                if (byteVar2 == 0) {\n                  free(bytePtr2);\n                  if (filePtr2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePtr3);\n          }\n          fclose(filePtr1);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar3 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar3 = (uint)filePtr4;\n        intVar1 = bfd_init();\n        errMsgVar1 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar1 != 0x118) goto LAB_00106803;\n        errMsgVar1 = \"x86_64-pc-linux-gnu\";\n        uintVar3 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPtr1 = PTR_DAT_0010d2e0;\n        filePtr4 = (FILE *)(ulong)uintVar3;\n        if ((char)uintVar3 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_reverse_function_chain_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPtr1 = PTR_DAT_0010d2e0;\n            intVar1 = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar1 + 1;\n            *(code **)(undefinedPtr1 + (long)intVar1 * 8 + 0x10) = cleanup_function_00107730;\n          }\n          else {\n            undefined8Ptr2 = (undefined8 *)malloc(0x110);\n            if (undefined8Ptr2 != (undefined8 *)0x0) {\n              *undefined8Ptr2 = undefinedPtr1;\n              *(undefined4 *)(undefined8Ptr2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Ptr2;\n              goto LAB_0010632b;\n            }\n          }\n          longVar1 = 1;\n          do {\n            longVar4 = longVar1;\n            intVar1 = (int)pcVar46;\n            if (intVar1 <= (int)longVar4) break;\n            charVar1 = initialize_application_00107640(*(undefined8 *)((int *)charPtr3 + longVar4 * 2));\n            longVar1 = longVar4 + 1;\n          } while (charVar1 != '\\0');\n          pcVar46 = (char *)((long)charPtr3 + longVar4 * 8 + -8);\n          uintVar4 = intVar1 - ((int)longVar4 + -1);\n          filePtr1 = (FILE *)(ulong)uintVar4;\n          if (_DAT_0010d65c != 0) {\n            charPtr3 = \"DhHUvVt\";\n            uintVar5 = 0;\n            while (intVar1 = getopt_long(filePtr1,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar1 != -1)\n            {\n              if (intVar1 < 0x77) {\n                if (0x43 < intVar1) {\n                  switch(intVar1) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintVar5 = uintVar3;\n                  }\n                }\n              }\n              else if (intVar1 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar4 < 2) {\nLAB_00107125:\n              errMsgVar1 = (char *)0x0;\n              print_archive_index_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_archive_index_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_version_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              filePtr4 = (FILE *)0x0;\n              charPtr3 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar4 <= (int)charPtr3) goto LAB_00106f8b;\n                errMsgVar1 = *(char **)((int *)pcVar46 + (long)charPtr3 * 2);\n                if ((char)uintVar5 != '\\0') break;\n                uintVar3 = check_file_and_extract_info_00107650();\n                charPtr3 = (char *)((long)(int *)charPtr3 + 1);\n                filePtr4 = (FILE *)(ulong)((uint)filePtr4 | uintVar3);\n              }\n            }\n            while (longVar1 = get_file_size_001052a0(errMsgVar1), longVar1 < 1) {\n              uintVar3 = 1;\nLAB_001071c4:\n              intPtr1 = (int *)charPtr3;\n              charPtr3 = (char *)((long)intPtr1 + 1);\n              filePtr4 = (FILE *)(ulong)((uint)filePtr4 | uintVar3);\n              if ((int)uintVar4 <= (int)charPtr3) {\nLAB_00106f8b:\n                    \n                xexit(filePtr4);\n              }\n              errMsgVar1 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPtr1 * 8 + -0x7b);\n            }\n            intVar1 = open(errMsgVar1,2,0);\n            if (intVar1 < 0) {\n              bfd_set_error(1);\n              print_error_and_exit_00107c10(errMsgVar1);\nLAB_0010737f:\n              print_error_and_exit_00107c10(errMsgVar1);\nLAB_00107387:\n              print_error_message_00107c20(errMsgVar1);\n              intVar1 = bfd_get_error();\n              if (intVar1 == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(undefinedArr1[1],undefinedArr1[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            charPtr = (char *)bfd_fdopenr(errMsgVar1,0);\n            if ((FILE *)charPtr == (FILE *)0x0) goto LAB_0010737f;\n            charVar1 = bfd_check_format_matches(charPtr,2,undefinedArr1);\n            if (charVar1 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)charPtr + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPtr = (uint *)((long)((long)charPtr + 0x40) + 4);\n                *uintPtr = *uintPtr | 0x2000;\n              }\n              (**(code **)(*(char **)((long)charPtr + 8) + 0x1f0))(charPtr);\n              charVar1 = bfd_close(charPtr);\n              if (charVar1 != '\\0') {\n                uintVar3 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var2 = dcgettext(0,\"%s: no archive map to update\",5);\n            print_error_and_exit_00107690(undefined8Var2,errMsgVar1);\nLAB_001073cc:\n            errMsgVar1 = (char *)lbasename(DAT_0010d660);\n            size_tVar1 = strlen(errMsgVar1);\n            if ((size_tVar1 < 6) ||\n               (intVar1 = filename_cmp(errMsgVar1 + (size_tVar1 - 6),\"ranlib\"), intVar1 != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          pundefinedPPtr1 = &PTR_DAT_0010d300;\n          charPtr = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          charPtr3 = (char *)&DAT_001096a0;\n          filePtr2 = (FILE *)charPtr;\n          filePtr3 = filePtr1;\n          if ((int)uintVar4 < 2) goto switchD_00107462_caseD_1;\n          filePtr5 = (FILE *)CONCAT71(filePtr5._1_7_,(char)uintVar3);\nLAB_001063a3:\n          filePtr2 = (FILE *)charPtr;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            undefinedArr1[0] = 0x2d;\n            uStack_c6 = 0;\n            size_tVar1 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar1 = (int)size_tVar1 + (int)filePtr1;\n            filePtr4 = (FILE *)xmalloc((long)intVar1 * 8);\n            undefinedVar2 = *(undefined4 *)((long)pcVar46 + 4);\n            filePtr4->_flags = *(int *)pcVar46;\n            *(undefined4 *)&filePtr4->field_0x4 = undefinedVar2;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            filePtr6 = (FILE *)((long)pcVar46 + 0x10);\n            charPtrPtr2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &filePtr4->_IO_read_ptr;\n            }\n            else {\n              bytePtr3 = undefinedArr1;\n              undefinedArr1[1] = *(char *)ppcVar31;\n              errMsgVar1 = (char *)xstrdup();\n              ppcVar32 = &filePtr4->_IO_read_end;\n              filePtr4->_IO_read_ptr = errMsgVar1;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                undefinedArr1[1] = *(char *)((long)ppcVar31 + 1);\n                errMsgVar1 = (char *)xstrdup(bytePtr3);\n                ppcVar32 = &filePtr4->_IO_read_base;\n                filePtr4->_IO_read_end = errMsgVar1;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  undefinedArr1[1] = *(char *)((long)ppcVar31 + 2);\n                  errMsgVar1 = (char *)xstrdup(bytePtr3);\n                  ppcVar32 = &filePtr4->_IO_write_base;\n                  filePtr4->_IO_read_base = errMsgVar1;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &filePtr4->_IO_write_ptr;\n                    undefinedArr1[1] = *(char *)((long)ppcVar31 + 3);\n                    errMsgVar1 = (char *)xstrdup(bytePtr3);\n                    filePtr4->_IO_write_base = errMsgVar1;\n                    charVar1 = *(char *)((long)ppcVar31 + 4);\n                    charPtrPtr2 = ppcVar32;\n                    if (charVar1 != '\\0') {\n                      errMsgVar1 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        undefinedArr1[1] = charVar1;\n                        charVar2 = (char *)xstrdup(bytePtr3);\n                        errMsgVar1 = errMsgVar1 + 1;\n                        *ppcVar31 = charVar2;\n                        charVar1 = *errMsgVar1;\n                        ppcVar31 = ppcVar32;\n                        charPtrPtr2 = ppcVar32;\n                      } while (charVar1 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar1 = (long)(int)filePtr1;\n            intPtr1 = (int *)pcVar46 + longVar1 * 2;\n            if (filePtr6 < intPtr1) {\n              ulongVar1 = longVar1 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPtr1) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPtr1 &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPtr1)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPtr1)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPtr1)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPtrPtr1 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPtr1;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *charPtrPtr1 = *ppcVar31;\n                    charPtrPtr1 = charPtrPtr1 + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefinedVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uintVar1 = *(undefined4 *)((long)pcVar46 + 0x18);\n                uintVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefinedVar2;\n                *(undefined4 *)(ppcVar32 + 1) = uintVar1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uintVar2;\n                undefinedVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uintVar1 = *(undefined4 *)((long)pcVar46 + 0x28);\n                uintVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar1 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefinedVar2;\n                *(undefined4 *)(ppcVar32 + 3) = uintVar1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uintVar2;\n                if (ulongVar1 != 2) {\n                  undefinedVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uintVar1 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uintVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefinedVar2;\n                  *(undefined4 *)(ppcVar32 + 5) = uintVar1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uintVar2;\n                  if (ulongVar1 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      errMsgVar1 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefinedVar2 = *(undefined4 *)(errMsgVar1 + 4);\n                      uintVar1 = *(undefined4 *)(errMsgVar1 + 8);\n                      uintVar2 = *(undefined4 *)(errMsgVar1 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)errMsgVar1;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefinedVar2;\n                      *(undefined4 *)(ppcVar31 + 1) = uintVar1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uintVar2;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar1);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePtr6 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar1 + -2;\n            }\n            filePtr1 = (FILE *)(ulong)(intVar1 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)filePtr4;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar3 = (uint)filePtr4;\n            uintVar4 = getopt_long((ulong)filePtr1 & 0xffffffff,pcVar46,filePtr2,pundefinedPPtr1,0);\n            charPtr = (char *)filePtr2;\n            if (uintVar4 == 0xffffffff) break;\n            if (((uintVar4 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar4 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePtr3 = (FILE *)pcVar46;\n            if (uintVar4 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)charPtr3 + (long)((int *)charPtr3)[uintVar4]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_0010342d(0);\n            pcVar46 = (char *)filePtr3;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uintVar4 = DAT_0010d64c;\n          filePtr2 = (FILE *)charPtr;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePtr1 <= _optind || (_optind < 1)))) {\n              uintVar4 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar3 = (int)filePtr1 - (_optind + -1);\n            filePtr1 = (FILE *)(ulong)uintVar3;\n            _optind = 0;\n            if (1 < (int)uintVar3) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          filePtr4 = (FILE *)((ulong)filePtr5 & 0xff);\n          uintVar3 = (uint)filePtr4;\n          pundefinedPPtr1 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_version_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePtr3 = (FILE *)pcVar46;\n              if (*pundefinedPPtr1 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uintVar4 == 3) goto LAB_00106abc;\n                  if (uintVar4 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  errMsgVar1 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar4 == 3) || (uintVar4 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefinedVar2 = check_file_and_extract_info_00107650();\n                    \n                  xexit(undefinedVar2);\n                }\nLAB_00106abc:\n                if (uintVar4 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  errMsgVar1 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              charPtr = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*pundefinedPPtr1;\n                charPtr = (char *)0x1;\n                errMsgVar1 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                errMsgVar1 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar1 = (int)charPtr;\n                  if (*(char **)((long)pundefinedPPtr1 + (long)intVar1 * 2 * 4) == (char *)0x0) {\n                    undefined8Var2 = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_error_and_exit_00107690(undefined8Var2);\n                    uintVar4 = extraout_EDX;\nLAB_00107548:\n                    if (uintVar4 == 2) {\nLAB_0010704f:\n                      errMsgVar1 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  charPtr = (char *)(ulong)(intVar1 + 1);\n                  longVar1 = strtol(*(char **)((long)pundefinedPPtr1 + (long)intVar1 * 2 * 4),(char **)0x0,10)\n                  ;\n                  errMsgVar1 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar1;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar1 = (long)(int)charPtr;\n              filePtr2 = (FILE *)charPtr;\n              if (*(long *)(int *)((long)pundefinedPPtr1 + longVar1 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePtr2 = (FILE *)((long)pundefinedPPtr1 + (longVar1 + 1) * 2 * 4);\n              if (*(FILE **)filePtr2 == (FILE *)0x0) {\n                charPtr3 = (char *)0x0;\n                filePtr2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)pundefinedPPtr1 + (longVar1 + 2) * 2 * 4) == 0) {\n                charPtr3 = (char *)0x1;\n              }\n              else if (*(long *)((long)pundefinedPPtr1 + (longVar1 + 3) * 2 * 4) == 0) {\n                charPtr3 = (char *)0x2;\n              }\n              else if (*(long *)((long)pundefinedPPtr1 + (longVar1 + 4) * 2 * 4) == 0) {\n                charPtr3 = (char *)0x3;\n              }\n              else if (*(long *)((long)pundefinedPPtr1 + (longVar1 + 5) * 2 * 4) == 0) {\n                charPtr3 = (char *)0x4;\n              }\n              else {\n                filePtr1 = (FILE *)0x5;\n                do {\n                  charPtr3 = (char *)filePtr1;\n                  filePtr1 = (FILE *)((long)(int *)charPtr3 + 1);\n                } while (*(long *)((int *)((long)pundefinedPPtr1 + longVar1 * 2 * 4) + (long)filePtr1 * 2) !=\n                         0);\n              }\n              undefined8Ptr2 = (undefined8 *)extract_object_files_00105300();\n              filePtr1 = filePtr2;\n              if (DAT_0010d64c == 5) {\n                errMsgVar1 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Ptr2 + 0x49) & 0x10) == 0) {\n                  charPtr = (char *)filePtr2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archive_00105480(undefined8Ptr2,extract_and_process_file_00107740,charPtr,(ulong)charPtr3 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_tVar1 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                charPtr = (char *)(size_tVar1 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Ptr2);\n                if (DAT_0010d620 == 0) {\n                  errMsgVar1 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar1 = bfd_find_target(\"binary\",DAT_0010d620);\n                  errMsgVar1 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar1 != 0) {\n                    charVar1 = bfd_set_format(DAT_0010d620,1,5);\n                    errMsgVar1 = \"Cannot set libdeps object format.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    charVar1 = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    errMsgVar1 = \"Cannot make libdeps object writable.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    filePtr3 = (FILE *)bfd_bwrite(DAT_0010d628,charPtr,DAT_0010d620);\n                    errMsgVar1 = \"Cannot write libdeps record.\";\n                    if (filePtr3 != (FILE *)charPtr) goto LAB_00106803;\n                    charVar1 = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    errMsgVar1 = \"Cannot make libdeps object readable.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    longVar1 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    errMsgVar1 = \"Cannot reset libdeps record type.\";\n                    if (longVar1 == 0) goto LAB_00106803;\n                    intVar1 = (int)charPtr3;\n                    filePtr5 = (FILE *)((long)(intVar1 + 2) * 8);\n                    charPtr = (char *)xmalloc(filePtr5,\"Cannot reset libdeps record type.\");\n                    if (intVar1 == 0) {\n                      longVar1 = 0;\n                    }\n                    else {\n                      undefinedVar2 = *(undefined4 *)&filePtr2->field_0x4;\n                      *(int *)charPtr = filePtr2->_flags;\n                      *(undefined4 *)((long)charPtr + 4) = undefinedVar2;\n                      longVar1 = 8;\n                      ppcVar31 = (char **)((long)charPtr + 8);\n                      for (charPtr3 = filePtr5[-1]._unused2 + 4; charPtr3 != (char *)0x0;\n                          charPtr3 = charPtr3 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePtr2->_flags;\n                        filePtr2 = (FILE *)((long)filePtr2 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)charPtr + longVar1) = \"__.LIBDEP\";\n                    charPtr3 = (char *)(ulong)(intVar1 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)charPtr + -0xd8))->_unused2 + 0xc + (long)filePtr5) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePtr2 = (FILE *)charPtr;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                charPtr = (char *)filePtr2;\n                if (filePtr2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePtr1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                charPtr = (char *)filePtr2;\n                if ((filePtr2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  analyze_binary_00105570(undefined8Ptr2,charPtr,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                charPtr = (char *)filePtr2;\nswitchD_00106ed8_caseD_3:\n                process_archive_00105480(undefined8Ptr2,print_file_info_00107890,charPtr,(ulong)charPtr3 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                charPtr = (char *)filePtr2;\nswitchD_00106ed8_caseD_4:\n                process_archive_00105480(undefined8Ptr2,extract_and_print_archive_contents_00103a78,charPtr,(ulong)charPtr3 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                errMsgVar1 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePtr2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePtr1 = (FILE *)(undefined8Ptr2 + 0x1e);\n                do {\n                  filePtr4 = filePtr1;\n                  if (*(FILE **)filePtr2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_and_print_file_info_001058b0(undefined8Ptr2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPtr2 = *(long **)filePtr4;\n                    pcVar46 = *(char **)filePtr2;\n                    if (longPtr2 == (long *)0x0) {\n                      undefined8Var2 = *undefined8Ptr2;\n                      undefined8Var3 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_error_and_exit_00107690(undefined8Var3,pcVar46,undefined8Var2);\n                      charPtr3 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar1 = *longPtr2;\n                    undefined8Var2 = process_file_name_00105830(pcVar46,undefined8Ptr2);\n                    intVar1 = filename_cmp(undefined8Var2,longVar1);\n                    if (intVar1 == 0) break;\n                    filePtr4 = (FILE *)(*(long **)filePtr4 + 0x1e);\n                  }\n                  *(long **)filePtr4 = (long *)longPtr2[0x1e];\n                  longPPtr1 = (long **)find_file_in_memory_00105870(filePtr1,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  longPtr1 = *longPPtr1;\n                  *longPPtr1 = longPtr2;\n                  longPtr2[0x1e] = (long)longPtr1;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePtr2);\n                  }\n                  filePtr2 = (FILE *)&filePtr2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar1 = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar1);\n          extract_data_from_binary_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefinedVar2 = bfd_get_error();\n        filePtr2 = (FILE *)bfd_errmsg(undefinedVar2);\n        undefined8Var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar1 = print_error_and_exit_00107690(undefined8Var2,\"x86_64-pc-linux-gnu\",filePtr2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          pundefinedPPtr1 = (undefined **)errMsgVar1;\n          filePtr3 = (FILE *)pcVar46;\n          switch(intVar1) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar3 = (uint)filePtr4;\n            errMsgVar1 = \"libdeps specified more than once\";\n            charPtr = (char *)filePtr2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        errMsgVar1 = \"two different operation options specified\";\n        charPtr = (char *)filePtr2;\nLAB_00106803:\n        undefined8Var2 = dcgettext(0,errMsgVar1,5);\n        print_error_and_exit_00107690(undefined8Var2);\nLAB_00106814:\n        intVar1 = (int)pcVar46;\n        filePtr3 = (FILE *)xmalloc(8);\n        *(long **)filePtr3 = (long *)0x0;\n        if ((FILE *)charPtr3 == argv) {\nLAB_00106834:\n          if (*(long **)charPtr3 == (long *)0x0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar1 = 1;\n            do {\n              intVar1 = (int)longVar1;\n              longVar4 = longVar1 * 2;\n              longVar1 = longVar1 + 1;\n            } while (*(long *)((int *)charPtr3 + longVar4) != 0);\n          }\n          filePtr2 = (FILE *)xmalloc((long)(intVar1 + 1) << 3);\n          longPtr2 = *(long **)charPtr3;\n          longVar1 = 0;\n          while (longPtr2 != (long *)0x0) {\n            undefined8Var2 = xstrdup();\n            *(undefined8 *)((long)&filePtr2->_flags + longVar1) = undefined8Var2;\n            longPtr2 = *(long **)((char *)((long)charPtr3 + 0x83) + longVar1 + -0x7b);\n            longVar1 = longVar1 + 8;\n          }\n          *(undefined8 *)((long)&filePtr2->_flags + longVar1) = 0;\nLAB_0010610a:\n          intVar1 = (int)pcVar46;\n          charPtr3 = (char *)filePtr2;\n          if (*(long **)filePtr3 == (long *)0x0) goto LAB_00106a80;\n          longVar1 = 0;\n          do {\n            longVar3 = longVar1 + 1;\n            longVar4 = longVar1 * 8;\n            longVar1 = longVar3;\n          } while (*(long *)(filePtr3->_shortbuf + longVar4 + -0x7b) != 0);\n          size_tVar3 = longVar3 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar3 = 0;\n          size_tVar3 = 0;\n        }\n        longVar1 = (long)charPtr * 2;\n        charPtr = (char *)((long)(char **)charPtr + longVar3);\n        free(*(void **)((int *)charPtr3 + longVar1));\n        filePtr2 = (FILE *)xrealloc(charPtr3,(longVar3 + 1 + (long)intVar1) * 8);\n        uintVar4 = intVar1 + -1 + (int)longVar3;\n        pcVar46 = (char *)(ulong)uintVar4;\n        memmove(&filePtr2->_flags + (long)charPtr * 2,\n                (void *)((long)&filePtr2->_IO_read_ptr + (long)filePtr5),\n                (long)(int)(intVar1 - uintVar3) << 3);\n        memcpy((void *)((long)&filePtr5->_flags + (long)&filePtr2->_flags),filePtr3,size_tVar3);\n        free(filePtr3);\n        free(bytePtr3);\n        fclose(filePtr1);\n        uintVar3 = (int)filePtr6 + 1;\n        filePtr4 = filePtr5;\n        charPtr3 = (char *)filePtr2;\n        filePtr5 = filePtr3;\n        if ((int)uintVar3 < (int)uintVar4) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar3 = uintVar3 + 1;\n    filePtr6 = filePtr4;\nLAB_001061ce:\n    filePtr4 = (FILE *)(ulong)uintVar3;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar1 = getopt_long((ulong)filePtr1 & 0xffffffff,pcVar46,filePtr2,\"x86_64-pc-linux-gnu\");\n  charPtr = (char *)filePtr2;\n  if (intVar1 == -1) goto LAB_00106680;\n  if ((0x14 < intVar1 - 100U) || ((0x117201UL >> ((byte)(intVar1 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var2 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_message_00107920(undefined8Var2);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)charPtr == (FILE *)0x0) {\n    if ((char)filePtr1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intVar2 = 0;\n  intVar1 = strcmp((char *)*(FILE **)charPtr,\"__.SYMDEF\");\n  undefined8Ptr = undefined8Ptr2;\n  if (intVar1 == 0) {\n    *(byte *)((long)undefined8Ptr2 + 0x49) = *(byte *)((long)undefined8Ptr2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPtr2 = undefined8Ptr + 0x1e;\n      if ((undefined8 *)*longPtr2 == (undefined8 *)0x0) break;\n      undefined8Var2 = *(undefined8 *)*longPtr2;\n      undefined8Var3 = process_file_name_00105830(*(FILE **)charPtr,undefined8Ptr2);\n      intVar1 = filename_cmp(undefined8Var3,undefined8Var2);\n      if ((intVar1 == 0) &&\n         ((DAT_0010d634 == '\\0' || (intVar2 = intVar2 + 1, intVar2 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)charPtr);\n        }\n        *longPtr2 = *(long *)(*longPtr2 + 0xf0);\n        filePtr1 = filePtr4;\n        goto LAB_00106d38;\n      }\n      undefined8Ptr = (undefined8 *)*longPtr2;\n    }\n    if (DAT_0010d60c != 0) {\n      filePtr2 = *(FILE **)charPtr;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePtr2);\n    }\n  }\nLAB_00106d38:\n  charPtr = (char *)((long)charPtr + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_bwrite",
                "strtol",
                "bfd_init",
                "isatty",
                "FUN_00107640",
                "FUN_001075e0",
                "bindtextdomain",
                "FUN_00103a78",
                "bfd_find_target",
                "memcpy",
                "fread",
                "FUN_00107730",
                "FUN_00105570",
                "FUN_00107c20",
                "bfd_plugin_set_plugin",
                "FUN_001052a0",
                "bfd_plugin_set_program_name",
                "open",
                "xrealloc",
                "bfd_create",
                "FUN_00107650",
                "FUN_00107740",
                "setlocale",
                "bfd_set_format",
                "xexit",
                "bfd_make_writable",
                "strcmp",
                "stat",
                "fseek",
                "bfd_fdopenr",
                "xmalloc",
                "lbasename",
                "bfd_set_error_program_name",
                "fprintf",
                "getopt_long",
                "xmalloc_set_program_name",
                "FUN_00105870",
                "FUN_00105300",
                "printf",
                "FUN_00105830",
                "dcgettext",
                "FUN_00107cc0",
                "bfd_set_error",
                "memmove",
                "fclose",
                "strlen",
                "bfd_close",
                "free",
                "bfd_set_default_target",
                "bfd_check_format_matches",
                "filename_cmp",
                "xstrdup",
                "ftell",
                "FUN_00105480",
                "FUN_0010394a",
                "FUN_00107920",
                "bfd_errmsg",
                "FUN_00107c10",
                "fileno",
                "FUN_00103e95",
                "FUN_00107690",
                "fopen",
                "ferror",
                "FUN_001058b0",
                "FUN_00107890",
                "FUN_0010342d",
                "bfd_get_error",
                "textdomain",
                "bfd_make_readable",
                "malloc",
                "FUN_00103bd1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_file_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formats",
                "uVar1": "formatCode",
                "__format": "formatMessage",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formats)\n\n{\n  undefined8 formatCode;\n  char *formatMessage;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  formatCode = DAT_0010d660;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMessage,formatCode);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "fflush",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "print_error_and_exit_00107c10",
                "print_error_message_00107c20": "print_error_message",
                "xexit": "exit"
            },
            "code": "\nvoid print_error_and_exit_00107c10(void)\n\n{\n  print_error_message();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_001028ed",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "load_object_files_00102710",
                "unaff_RBP": "returnValue",
                "in_stack_00000008": "archivedFile",
                "lVar5": "bfdObj",
                "cVar2": "isBfdFormatValid",
                "bVar3": "isThinLibrary",
                "iVar4": "error",
                "uVar6": "errorString",
                "uVar7": "libraryName",
                "puVar8": "outputBfdObj",
                "plVar1": "archivedFilePtr"
            },
            "code": "\n\n\nundefined8 * loadObjectFiles_00102710(void)\n\n{\n  long *archivedFilePtr;\n  char isBfdFormatValid;\n  byte isThinLibrary;\n  int error;\n  long bfdObj;\n  undefined8 errorString;\n  undefined8 libraryName;\n  undefined8 *outputBfdObj;\n  undefined8 returnValue;\n  undefined8 archivedFile;\n  \n  bfdObj = bfd_openr();\n  if (bfdObj != 0) {\n    isBfdFormatValid = bfd_check_format(bfdObj,1);\n    if (isBfdFormatValid != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(bfdObj + 8);\n    }\n    bfd_close(bfdObj);\n  }\n  outputBfdObj = (undefined8 *)bfd_openw();\n  if (((outputBfdObj != (undefined8 *)0x0) && (isBfdFormatValid = bfd_set_format(outputBfdObj,2), isBfdFormatValid != '\\0')) &&\n     (isBfdFormatValid = bfd_close(outputBfdObj), isBfdFormatValid != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  print_error_and_exit_00107c10();\n  do {\n    isThinLibrary = *(byte *)((long)outputBfdObj + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *outputBfdObj;\n        errorString = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errorString,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *outputBfdObj;\n      errorString = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errorString,libraryName);\nLAB_001027cb:\n      print_error_message_00107c20();\n      error = bfd_get_error();\n      if (error == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(archivedFile);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePtr = outputBfdObj + 0x1e;\n      for (bfdObj = bfd_openr_next_archived_file(outputBfdObj,0); bfdObj != 0;\n          bfdObj = bfd_openr_next_archived_file(outputBfdObj,bfdObj)) {\n        *archivedFilePtr = bfdObj;\n        archivedFilePtr = (long *)(bfdObj + 0xf0);\n      }\n      *archivedFilePtr = 0;\n      error = bfd_get_error();\n      if (error == 9) {\n        return outputBfdObj;\n      }\n      do {\n        print_error_and_exit_00107c10();\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(libraryName);\nLAB_001053b7:\n        DAT_0010d618 = returnValue;\n        outputBfdObj = (undefined8 *)bfd_openr();\n      } while (outputBfdObj == (undefined8 *)0x0);\n      isBfdFormatValid = bfd_check_format_matches(outputBfdObj,2,&stack0x00000008);\n      if (isBfdFormatValid == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (bfdObj = bfd_openr_next_archived_file(outputBfdObj,0), bfdObj == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "load_object_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "extract_data_from_binary_00103e95",
                "pplVar1": "pointer_to_long_1",
                "cVar2": "character_var_2",
                "ppFVar3": "pointer_to_file_pointer_3",
                "pFVar4": "pointer_to_file_4",
                "plVar5": "pointer_to_long_5",
                "uVar6": "undefined_var_6",
                "pbVar7": "pointer_to_byte_7",
                "iVar8": "integer_var_8",
                "pcVar10": "pointer_to_char_10",
                "pcVar15": "pointer_to_char_15",
                "pcVar16": "pointer_to_char_16",
                "lVar17": "long_var_17",
                "lVar18": "long_var_18",
                "lVar21": "long_var_21",
                "uVar19": "ulong_var_19",
                "uVar20": "uint_var_20",
                "lVar31": "long_var_31",
                "puVar22": "pointer_to_undefined8_22",
                "puVar23": "pointer_to_undefined8_23",
                "uVar24": "uint_var_24",
                "iVar25": "integer_var_25",
                "uVar26": "ulong_var_26",
                "ppcVar27": "pointer_to_pointer_to_char_27",
                "bVar28": "bool_var_28",
                "bVar30": "byte_var_30",
                "pbVar32": "pointer_to_byte_32",
                "pbVar33": "pointer_to_byte_33",
                "piVar34": "pointer_to_integer_34",
                "pbVar35": "pointer_to_byte_35",
                "uVar36": "uint_var_36",
                "ppcVar38": "pointer_to_pointer_to_char_38",
                "bVar39": "byte_var_39",
                "local_828": "local_pointer_to_char_828",
                "local_820": "local_pointer_to_char_820",
                "local_818": "local_long_818",
                "local_810": "local_pointer_to_pointer_to_char_810",
                "local_800": "local_int_800",
                "local_7fc": "local_uint_7fc",
                "local_7f8": "local_pointer_to_byte_7f8",
                "local_7d0": "local_stat_7d0",
                "local_740": "local_char_740",
                "local_678": "local_array_of_201_pointers_to_char_678"
            },
            "code": "\n\n\nvoid extract_data_from_binary_00103e95(void)\n\n{\n  long **pointer_to_long_1;\n  char character_var_2;\n  FILE **pointer_to_file_pointer_3;\n  FILE *pointer_to_file_4;\n  long *pointer_to_long_5;\n  undefined8 undefined_var_6;\n  byte *pointer_to_byte_7;\n  int integer_var_8;\n  char *pointer_to_char_10;\n  undefined8 uVar11;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pointer_to_char_15;\n  char *pointer_to_char_16;\n  long long_var_17;\n  long long_var_18;\n  ulong ulong_var_19;\n  uint uint_var_20;\n  long long_var_21;\n  undefined8 *pointer_to_undefined8_22;\n  undefined8 *pointer_to_undefined8_23;\n  uint uint_var_24;\n  int integer_var_25;\n  ulong ulong_var_26;\n  char **pointer_to_pointer_to_char_27;\n  bool bool_var_28;\n  char **ppcharacter_var_29;\n  byte byte_var_30;\n  long long_var_31;\n  byte *pointer_to_byte_32;\n  byte *pointer_to_byte_33;\n  int *pointer_to_integer_34;\n  byte *pointer_to_byte_35;\n  uint uint_var_36;\n  int iVar37;\n  char **pointer_to_pointer_to_char_38;\n  byte byte_var_39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_pointer_to_char_828;\n  char *local_pointer_to_char_820;\n  long local_long_818;\n  char **local_pointer_to_pointer_to_char_810;\n  int local_int_800;\n  uint local_uint_7fc;\n  byte *local_pointer_to_byte_7f8;\n  stat local_stat_7d0;\n  char local_char_740 [200];\n  char *local_array_of_201_pointers_to_char_678 [201];\n  \n  byte_var_39 = 0;\n  long_var_18 = 0;\n  DAT_0010d550 = -2;\n  ppcharacter_var_29 = local_array_of_201_pointers_to_char_678;\n  local_int_800 = 0;\n  local_pointer_to_char_828 = local_char_740;\n  local_long_818 = 200;\n  local_pointer_to_char_820 = local_pointer_to_char_828;\n  local_pointer_to_pointer_to_char_810 = ppcharacter_var_29;\nLAB_00103ee9:\n  *local_pointer_to_char_828 = (char)long_var_18;\n  if (local_pointer_to_char_820 + local_long_818 + -1 <= local_pointer_to_char_828) {\n    long_var_21 = (long)local_pointer_to_char_828 - (long)local_pointer_to_char_820;\n    long_var_17 = long_var_21 + 1;\n    if (local_long_818 < 10000) {\n      long_var_31 = local_long_818 * 2;\n      local_long_818 = 10000;\n      if (long_var_31 < 0x2711) {\n        local_long_818 = long_var_31;\n      }\n      pointer_to_char_10 = (char *)malloc(local_long_818 * 9 + 7);\n      if (pointer_to_char_10 != (char *)0x0) {\n        long_var_31 = long_var_17 * 8;\n        pointer_to_char_15 = local_pointer_to_char_820;\n        pointer_to_char_16 = pointer_to_char_10;\n        for (; long_var_17 != 0; long_var_17 = long_var_17 + -1) {\n          *pointer_to_char_16 = *pointer_to_char_15;\n          pointer_to_char_15 = pointer_to_char_15 + (ulong)byte_var_39 * -2 + 1;\n          pointer_to_char_16 = pointer_to_char_16 + (ulong)byte_var_39 * -2 + 1;\n        }\n        pointer_to_pointer_to_char_38 = (char **)(pointer_to_char_10 + local_long_818);\n        ppcharacter_var_29 = pointer_to_pointer_to_char_38;\n        for (; long_var_31 != 0; long_var_31 = long_var_31 + -1) {\n          *(undefined *)ppcharacter_var_29 = *(undefined *)local_pointer_to_pointer_to_char_810;\n          local_pointer_to_pointer_to_char_810 = (char **)((long)local_pointer_to_pointer_to_char_810 + (ulong)byte_var_39 * -2 + 1);\n          ppcharacter_var_29 = (char **)((long)ppcharacter_var_29 + (ulong)byte_var_39 * -2 + 1);\n        }\n        if (local_pointer_to_char_820 != local_char_740) {\n          free(local_pointer_to_char_820);\n        }\n        local_pointer_to_char_828 = pointer_to_char_10 + long_var_21;\n        ppcharacter_var_29 = pointer_to_pointer_to_char_38 + long_var_21;\n        local_pointer_to_char_820 = pointer_to_char_10;\n        local_pointer_to_pointer_to_char_810 = pointer_to_pointer_to_char_38;\n        if (pointer_to_char_10 + local_long_818 + -1 <= local_pointer_to_char_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_error_message_001031a5();\nLAB_0010524c:\n    pointer_to_char_10 = local_pointer_to_char_820;\n    if (local_pointer_to_char_820 == local_char_740) {\n      return;\n    }\nLAB_00105265:\n    free(pointer_to_char_10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)long_var_18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  character_var_2 = (&DAT_0010a200)[iVar37];\n  if (character_var_2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          pointer_to_undefined8_22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uVar11 = create_buffer_001033d6(DAT_0010d590);\n          *pointer_to_undefined8_22 = uVar11;\n        }\n        extract_data_from_binary_00103e95_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pointer_to_byte_32 = DAT_0010d5b0;\n      pointer_to_byte_35 = DAT_0010d5b0;\n      uint_var_20 = DAT_0010d5d0;\nLAB_001040d4:\n      ulong_var_19 = (ulong)uint_var_20;\n      ulong_var_26 = (ulong)local_uint_7fc;\n      bool_var_28 = false;\n      do {\n        byte_var_30 = (&DAT_0010ab00)[*pointer_to_byte_35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong_var_19 * 2) != 0) {\n          bool_var_28 = true;\n          ulong_var_26 = ulong_var_19 & 0xffffffff;\n          local_pointer_to_byte_7f8 = pointer_to_byte_35;\n        }\n        while( true ) {\n          integer_var_8 = (int)ulong_var_19;\n          long_var_18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integer_var_8 * 2) + (uint)byte_var_30);\n          if (integer_var_8 == *(short *)(&DAT_0010a440 + long_var_18 * 2)) break;\n          ulong_var_19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer_var_8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integer_var_8 * 2)) {\n            byte_var_30 = (&DAT_0010a7c0)[(int)(uint)byte_var_30];\n          }\n        }\n        pointer_to_byte_35 = pointer_to_byte_35 + 1;\n        ulong_var_19 = (ulong)*(short *)(&DAT_0010a240 + long_var_18 * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong_var_19 * 2) != 0xc2);\n      local_uint_7fc = (uint)ulong_var_26;\n      pointer_to_byte_33 = pointer_to_byte_32;\n      if (bool_var_28) {\n        DAT_0010d5b8 = local_pointer_to_byte_7f8;\n        DAT_0010d5c0 = local_uint_7fc;\n      }\nLAB_0010419f:\n      integer_var_8 = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong_var_19 * 2);\n      if (integer_var_8 == 0) {\n        integer_var_8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pointer_to_byte_35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pointer_to_byte_35 - (int)pointer_to_byte_33;\n      DAT_0010d588 = *pointer_to_byte_35;\n      DAT_0010d5b0 = pointer_to_byte_35;\n      DAT_0010d5c8 = pointer_to_byte_33;\n      *pointer_to_byte_35 = 0;\nLAB_001041f0:\n      pointer_to_byte_32 = DAT_0010d5c8;\n      long_var_18 = DAT_0010d5a0;\n      switch(integer_var_8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long_var_18 = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint_var_20 = character_var_2 + iVar37;\n    if ((0x22 < uint_var_20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uint_var_20])) goto LAB_001049db;\n    character_var_2 = (&DAT_0010a060)[(int)uint_var_20];\n    long_var_18 = (long)character_var_2;\n    if (character_var_2 < '\\x01') {\n      iVar37 = -(int)character_var_2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_int_800 = local_int_800 + -1 + (uint)(local_int_800 == 0);\n    ppcharacter_var_29 = ppcharacter_var_29 + 1;\n    *ppcharacter_var_29 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)long_var_18];\n  if ((&DAT_0010a020)[(int)long_var_18] == '\\0') {\n    if (local_int_800 == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_error_message_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long_var_18] != -0xe) &&\n             (uint_var_20 = (int)(char)(&DAT_0010a200)[long_var_18] + 1, uint_var_20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint_var_20] == '\\x01')) &&\n           (long_var_18 = (long)(char)(&DAT_0010a060)[(int)uint_var_20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint_var_20])) goto LAB_00105227;\n        if (local_pointer_to_char_820 == local_pointer_to_char_828) goto LAB_0010524c;\n        local_pointer_to_char_828 = local_pointer_to_char_828 + -1;\n        ppcharacter_var_29 = ppcharacter_var_29 + -1;\n        long_var_18 = (long)*local_pointer_to_char_828;\n      } while( true );\n    }\n    if (local_int_800 != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = DAT_0010d660;\n  pointer_to_pointer_to_char_27 = DAT_0010d558;\n  character_var_2 = (&DAT_00109fe0)[iVar37];\n  pointer_to_pointer_to_char_38 = (char **)ppcharacter_var_29[1 - character_var_2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    check_and_print_ar_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_error_message_001031a5();\n    break;\n  case 0x17:\n    pointer_to_undefined8_22 = (undefined8 *)*ppcharacter_var_29;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_char_10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointer_to_char_10 = (char *)dcgettext(0,pointer_to_char_10,5);\n      fprintf(_stderr,pointer_to_char_10,uVar11);\n      check_and_exit_if_zero_0010315d();\n    }\n    else {\n      for (; pointer_to_undefined8_22 != (undefined8 *)0x0; pointer_to_undefined8_22 = (undefined8 *)pointer_to_undefined8_22[1]) {\n        for (pointer_to_undefined8_23 = (undefined8 *)DAT_0010d558[0x1f]; pointer_to_undefined8_23 != (undefined8 *)0x0;\n            pointer_to_undefined8_23 = (undefined8 *)pointer_to_undefined8_23[0x1e]) {\n          integer_var_8 = filename_cmp(*pointer_to_undefined8_23);\n          if (integer_var_8 == 0) {\n            extract_and_process_file_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointer_to_undefined8_22,0);\n        undefined_var_6 = DAT_0010d660;\n        uVar11 = *pointer_to_undefined8_22;\n        pointer_to_char_10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_char_10,undefined_var_6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointer_to_undefined8_22 = (undefined8 *)*ppcharacter_var_29;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pointer_to_char_10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointer_to_undefined8_22 != (undefined8 *)0x0; pointer_to_undefined8_22 = (undefined8 *)pointer_to_undefined8_22[1]) {\n      bool_var_28 = false;\n      pointer_to_pointer_to_char_27 = DAT_0010d558 + 0x1f;\n      for (pointer_to_char_10 = DAT_0010d558[0x1f]; pointer_to_char_10 != (char *)0x0;\n          pointer_to_char_10 = *(char **)(pointer_to_char_10 + 0xf0)) {\n        integer_var_8 = filename_cmp();\n        if (integer_var_8 == 0) {\n          pointer_to_char_15 = (char *)bfd_openr(*pointer_to_undefined8_22,0);\n          uVar11 = DAT_0010d660;\n          if (pointer_to_char_15 == (char *)0x0) {\n            undefined_var_6 = *pointer_to_undefined8_22;\n            pointer_to_char_15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointer_to_char_15,uVar11,undefined_var_6);\n            check_and_exit_if_zero_0010315d();\n          }\n          else {\n            *pointer_to_pointer_to_char_27 = pointer_to_char_15;\n            bool_var_28 = true;\n            *(undefined8 *)(pointer_to_char_15 + 0xf0) = *(undefined8 *)(pointer_to_char_10 + 0xf0);\n          }\n        }\n        else {\n          pointer_to_pointer_to_char_27 = (char **)(pointer_to_char_10 + 0xf0);\n        }\n      }\n      if (!bool_var_28) {\n        pointer_to_char_10 = (char *)bfd_openr(*pointer_to_undefined8_22,0);\n        undefined_var_6 = DAT_0010d660;\n        uVar11 = *pointer_to_undefined8_22;\n        pointer_to_char_15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_char_15,undefined_var_6,uVar11);\n        uVar11 = DAT_0010d660;\n        if (pointer_to_char_10 == (char *)0x0) {\n          undefined_var_6 = *pointer_to_undefined8_22;\n          pointer_to_char_10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointer_to_char_10,uVar11,undefined_var_6);\n          check_and_exit_if_zero_0010315d();\n        }\n        else {\n          *pointer_to_pointer_to_char_27 = pointer_to_char_10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointer_to_undefined8_22 = (undefined8 *)*ppcharacter_var_29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_undefined8_22 != (undefined8 *)0x0; pointer_to_undefined8_22 = (undefined8 *)pointer_to_undefined8_22[1]) {\n      bool_var_28 = false;\n      pointer_to_pointer_to_char_27 = DAT_0010d558 + 0x1f;\n      for (pointer_to_undefined8_23 = (undefined8 *)DAT_0010d558[0x1f]; uVar11 = DAT_0010d660,\n          pointer_to_undefined8_23 != (undefined8 *)0x0; pointer_to_undefined8_23 = (undefined8 *)pointer_to_undefined8_23[0x1e]) {\n        integer_var_8 = filename_cmp(*pointer_to_undefined8_23,*pointer_to_undefined8_22);\n        if (integer_var_8 == 0) {\n          bool_var_28 = true;\n          *pointer_to_pointer_to_char_27 = (char *)pointer_to_undefined8_23[0x1e];\n        }\n        else {\n          pointer_to_pointer_to_char_27 = (char **)(pointer_to_undefined8_23 + 0x1e);\n        }\n      }\n      if (!bool_var_28) {\n        undefined_var_6 = *pointer_to_undefined8_22;\n        pointer_to_char_10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_char_10,uVar11,undefined_var_6);\n        check_and_exit_if_zero_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointer_to_undefined8_22 = (undefined8 *)*ppcharacter_var_29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_undefined8_22 != (undefined8 *)0x0; pointer_to_undefined8_22 = (undefined8 *)pointer_to_undefined8_22[1]) {\n      pointer_to_char_10 = (char *)bfd_openr(*pointer_to_undefined8_22,\"plugin\");\n      uVar11 = DAT_0010d660;\n      pointer_to_pointer_to_char_27 = DAT_0010d558;\n      if (pointer_to_char_10 == (char *)0x0) {\n        undefined_var_6 = *pointer_to_undefined8_22;\n        pointer_to_char_10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointer_to_char_10,uVar11,undefined_var_6);\n        check_and_exit_if_zero_0010315d();\n      }\n      else {\n        *(char **)(pointer_to_char_10 + 0xf0) = DAT_0010d558[0x1f];\n        pointer_to_pointer_to_char_27[0x1f] = pointer_to_char_10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pointer_to_char_10 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pointer_to_char_15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointer_to_char_15,pointer_to_char_10);\n    for (pointer_to_char_10 = DAT_0010d558[0x1f]; pointer_to_char_10 != (char *)0x0; pointer_to_char_10 = *(char **)(pointer_to_char_10 + 0xf0))\n    {\n      print_file_info_00103ddc(pointer_to_char_10,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(pointer_to_pointer_to_char_27);\n    pointer_to_char_10 = DAT_0010d570;\n    integer_var_8 = stat(DAT_0010d570,&local_stat_7d0);\n    if ((integer_var_8 != 0) && (DAT_0010d558 = (char **)bfd_openw(pointer_to_char_10,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_delete_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    extract_and_check_archives_00103c60(*ppcharacter_var_29,0);\n    break;\n  case 0x1f:\n    extract_and_check_archives_00103c60(*ppcharacter_var_29,1);\n    break;\n  case 0x20:\n    pointer_to_char_10 = *ppcharacter_var_29;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_char_10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long_var_18 = extract_object_files_00105300(ppcharacter_var_29[-1],0);\n    if (long_var_18 != 0) {\n      process_archive_entries_001032a8(long_var_18,copy_data_0010312d,pointer_to_char_10);\n    }\n    break;\n  case 0x21:\n    pointer_to_char_10 = *ppcharacter_var_29;\n    pointer_to_char_15 = ppcharacter_var_29[-1];\n    uVar11 = extract_object_files_00105300(ppcharacter_var_29[-2],0);\n    if (pointer_to_char_10 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pointer_to_char_10,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        process_archive_entries_001032a8(uVar11,print_file_info_00103ddc,pointer_to_char_15);\n        bfd_close(uVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointer_to_char_16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointer_to_char_16,pointer_to_char_10);\n    }\n    process_archive_entries_001032a8(uVar11,print_file_info_00103ddc,pointer_to_char_15);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    pointer_to_pointer_to_char_38 = (char **)*ppcharacter_var_29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    pointer_to_pointer_to_char_38 = (char **)0x0;\n    break;\n  case 0x24:\n    pointer_to_pointer_to_char_38 = (char **)ppcharacter_var_29[-1];\n    break;\n  case 0x26:\n    pointer_to_pointer_to_char_38 = (char **)malloc(0x10);\n    pointer_to_char_10 = ppcharacter_var_29[-2];\n    *pointer_to_pointer_to_char_38 = *ppcharacter_var_29;\n    pointer_to_pointer_to_char_38[1] = pointer_to_char_10;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  long_var_18 = (long)character_var_2;\n  local_pointer_to_char_828 = local_pointer_to_char_828 + -long_var_18;\n  ppcharacter_var_29[1 - long_var_18] = (char *)pointer_to_pointer_to_char_38;\n  ppcharacter_var_29 = ppcharacter_var_29 + (1 - long_var_18);\n  uint_var_20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*local_pointer_to_char_828;\n  if ((uint_var_20 < 0x23) && (*local_pointer_to_char_828 == (&DAT_0010a0a0)[(int)uint_var_20])) {\n    long_var_18 = (long)(char)(&DAT_0010a060)[(int)uint_var_20];\n  }\n  else {\n    long_var_18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer_var_8 = ((int)pointer_to_byte_35 - (int)DAT_0010d5c8) + -1;\n  *pointer_to_byte_35 = DAT_0010d588;\n  pointer_to_long_1 = (long **)(DAT_0010d5a8 + long_var_18 * 8);\n  pointer_to_file_pointer_3 = (FILE **)*pointer_to_long_1;\n  if (*(int *)(pointer_to_file_pointer_3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)pointer_to_file_pointer_3 + 0x1c);\n    *(undefined4 *)(pointer_to_file_pointer_3 + 7) = 1;\n    *pointer_to_file_pointer_3 = DAT_0010d590;\n  }\n  pointer_to_byte_7 = DAT_0010d5b0;\n  pointer_to_file_4 = pointer_to_file_pointer_3[1];\n  auVar40._8_8_ = pointer_to_file_4;\n  auVar40._0_8_ = pointer_to_file_pointer_3;\n  if ((byte *)((long)&pointer_to_file_4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pointer_to_file_4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = print_and_exit_001033b0();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uint_var_20 = (int)((long)pointer_to_byte_7 - (long)pointer_to_byte_32) - 1;\n      for (long_var_18 = 0; (int)long_var_18 < (int)uint_var_20; long_var_18 = long_var_18 + 1) {\n        *(byte *)(auVar40._8_8_ + long_var_18) = pointer_to_byte_32[long_var_18];\n      }\n      plVar12 = *pointer_to_long_1;\n      if (*(int *)(plVar12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) = 0;\nLAB_0010475e:\n        pointer_to_file_4 = DAT_0010d590;\n        if (uint_var_20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            pointer_to_undefined8_22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uVar11 = create_buffer_001033d6(pointer_to_file_4);\n            *pointer_to_undefined8_22 = uVar11;\n          }\n          long_var_18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long_var_18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          iVar9 = 1;\n          extract_data_from_binary_00103e95_001031cf(long_var_18);\n          extract_data_from_binary_00103e95_001030ed();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_to_long_5 = *pointer_to_long_1;\n          uint_var_24 = ~uint_var_20 + *(int *)(plVar12 + 3);\n          if (0 < (int)uint_var_24) break;\n          uint_var_24 = (int)DAT_0010d5b0 - (int)(void *)pointer_to_long_5[1];\n          if (*(int *)(pointer_to_long_5 + 4) == 0) {\n            pointer_to_long_5[1] = 0;\nLAB_00104626:\n            print_and_exit_001033b0();\n            break;\n          }\n          iVar9 = *(int *)(pointer_to_long_5 + 3);\n          integer_var_25 = iVar9;\n          if (iVar9 < 1) {\n            integer_var_25 = iVar9 / 8;\n          }\n          *(int *)(pointer_to_long_5 + 3) = integer_var_25 + iVar9;\n          pvVar14 = realloc((void *)pointer_to_long_5[1],(long)(integer_var_25 + iVar9 + 2));\n          pointer_to_long_5[1] = (long)pvVar14;\n          if (pvVar14 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pvVar14 + (long)(int)uint_var_24);\n          plVar12 = *pointer_to_long_1;\n        }\n        if (0x2000 < (int)uint_var_24) {\n          uint_var_24 = 0x2000;\n        }\n        ulong_var_26 = (ulong)uint_var_24;\n        if (*(int *)((long)pointer_to_long_5 + 0x24) == 0) {\n          pointer_to_integer_34 = __errno_location();\n          ulong_var_26 = (ulong)(int)uint_var_24;\n          ulong_var_19 = (ulong)(int)uint_var_20;\n          *pointer_to_integer_34 = 0;\n          goto LAB_001046c7;\n        }\n        ulong_var_19 = 0;\n        pointer_to_integer_34 = (int *)(long)(int)uint_var_20;\n        do {\n          iVar9 = getc(DAT_0010d590);\n          uint_var_36 = (uint)ulong_var_19;\n          if (iVar9 == -1) {\n            iVar9 = ferror(DAT_0010d590);\n            uint_var_24 = uint_var_36;\n            if (iVar9 != 0) {\n              do {\n                pointer_to_char_10 = \"input in flex scanner failed\";\n                print_and_exit_001033b0();\n                do {\n                  *pointer_to_integer_34 = 0;\n                  clearerr((FILE *)pointer_to_char_10);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong_var_19),1,ulong_var_26,DAT_0010d590);\n                  pointer_to_char_10 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sVar13;\n                  uint_var_24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (iVar9 = ferror(DAT_0010d590), uint_var_24 = DAT_0010d598, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*pointer_to_integer_34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_var_20 +\n             (long)(int)uint_var_36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint_var_24 = uint_var_36 + 1;\n            break;\n          }\n          ulong_var_19 = (ulong)(uint_var_36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)pointer_to_integer_34) =\n               (char)iVar9;\n          pointer_to_integer_34 = (int *)((long)pointer_to_integer_34 + 1);\n        } while (uint_var_24 != uint_var_36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uint_var_24;\n        uint_var_24 = DAT_0010d598;\n        iVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint_var_24 == 0) goto LAB_0010475e;\n      }\n      plVar12 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long_var_18 = *plVar12;\n      uint_var_20 = uint_var_20 + DAT_0010d598;\n      if (*(int *)(long_var_18 + 0x18) < (int)uint_var_20) {\n        integer_var_25 = ((int)DAT_0010d598 >> 1) + uint_var_20;\n        pvVar14 = realloc(*(void **)(long_var_18 + 8),(long)integer_var_25);\n        *(void **)(long_var_18 + 8) = pvVar14;\n        auVar41._8_8_ = plVar12;\n        auVar41._0_8_ = *plVar12;\n        if (*(long *)(*plVar12 + 8) == 0) {\n          auVar41 = print_and_exit_001033b0();\n        }\n        plVar12 = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = integer_var_25 + -2;\n      }\n      DAT_0010d598 = uint_var_20;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)uint_var_20) = 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)uint_var_20) = 0;\n      pointer_to_byte_32 = *(byte **)(*plVar12 + 8);\n      DAT_0010d5c8 = pointer_to_byte_32;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pointer_to_byte_35 = pointer_to_byte_32 + integer_var_8;\n      DAT_0010d5b0 = pointer_to_byte_35;\n      uint_var_20 = find_matching_index_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pointer_to_byte_7 - (long)pointer_to_byte_32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointer_to_byte_35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pointer_to_byte_35;\n    ulong_var_19 = find_matching_index_0010300e();\n    pointer_to_byte_33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pointer_to_byte_35 = pointer_to_byte_32 + integer_var_8;\n  DAT_0010d5b0 = pointer_to_byte_35;\n  ulong_var_19 = find_matching_index_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong_var_19 * 2) != 0) {\n    DAT_0010d5b8 = pointer_to_byte_35;\n    DAT_0010d5c0 = (uint)ulong_var_19;\n  }\n  ulong_var_26 = ulong_var_19 & 0xffffffff;\n  while( true ) {\n    integer_var_8 = (int)ulong_var_26;\n    if (integer_var_8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer_var_8 * 2) + 1) * 2)) break;\n    ulong_var_26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer_var_8 * 2);\n  }\n  uint_var_20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer_var_8 * 2) + 1) * 2);\n  pointer_to_byte_33 = pointer_to_byte_32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integer_var_8 * 2) + 1) * 2) == 0)\n     || (uint_var_20 == 0xb0)) goto LAB_0010419f;\n  pointer_to_byte_35 = pointer_to_byte_35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer_var_8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointer_to_byte_35 = DAT_0010d588;\n  ulong_var_19 = (ulong)DAT_0010d5c0;\n  pointer_to_byte_35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcharacter_var_29 = ppcharacter_var_29 + 1;\n  local_int_800 = 3;\n  *ppcharacter_var_29 = DAT_0010d548;\nLAB_001049d1:\n  local_pointer_to_char_828 = local_pointer_to_char_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00105300",
                "dup",
                "realloc",
                "printf",
                "dcgettext",
                "FUN_001033d6",
                "fclose",
                "fwrite",
                "bfd_close",
                "free",
                "fread",
                "FUN_0010312d",
                "filename_cmp",
                "xstrdup",
                "FUN_001033b0",
                "FUN_00103ba8",
                "__errno_location",
                "FUN_0010315d",
                "FUN_0010300e",
                "FUN_00107740",
                "bfd_openw",
                "FUN_00103df9",
                "bfd_set_format",
                "FUN_001032a8",
                "bfd_openr",
                "FUN_00105bc0",
                "FUN_001031a5",
                "fopen",
                "ferror",
                "FUN_001031cf",
                "stat",
                "FUN_00103c60",
                "bfd_cache_close",
                "clearerr",
                "getc",
                "fprintf",
                "FUN_001030ed",
                "FUN_00103ddc",
                "malloc",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_reverse_function_chain_00107cc0",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionChain",
                "uVar5": "count"
            },
            "code": "\nvoid executeReverseFunctionChain_00107cc0(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionChain;\n  uint count;\n  \n  functionChain = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionChain[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionChain[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionChain[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionChain[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionChain[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionChain[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionChain[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionChain[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionChain[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionChain[tempIndex + 1])();\n            (*(code *)functionChain[tempIndex])();\n            (*(code *)functionChain[index])();\n            (*(code *)functionChain[tempIndex + -2])();\n            (*(code *)functionChain[tempIndex + -3])();\n            (*(code *)functionChain[tempIndex + -4])();\n            (*(code *)functionChain[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_reverse_function_chain_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_archived_files_00105ae0",
                "param_1": "archive_path",
                "param_2": "output_path",
                "param_3": "flags",
                "param_4": "options"
            },
            "code": "\nvoid process_archived_files_00105ae0(undefined8 archive_path,undefined8 output_path,undefined flags,undefined options)\n\n{\n  process_archived_files_00105ae0_00105af0(archive_path,output_path,flags,options);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_file_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_error_and_exit_00107690",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "condition",
                "local_d8": "buffer_length",
                "local_d4": "copy_length",
                "local_d0": "buffer_base",
                "local_c8": "copy_base",
                "local_b8": "local_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "local_param_1",
                "local_78": "local_param_2",
                "local_68": "local_param_3",
                "local_58": "local_param_4",
                "local_48": "local_param_5",
                "local_38": "local_param_6",
                "local_28": "local_param_7",
                "local_18": "local_param_8"
            },
            "code": "\nvoid print_error_and_exit_00107690(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char condition;\n  undefined4 buffer_length;\n  undefined4 copy_length;\n  undefined *buffer_base;\n  undefined *copy_base;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 local_param_5;\n  undefined4 local_param_6;\n  undefined4 local_param_7;\n  undefined4 local_param_8;\n  \n  if (condition != '\\0') {\n    local_param_1 = error_code;\n    local_param_2 = param_2;\n    local_param_3 = param_3;\n    local_param_4 = param_4;\n    local_param_5 = param_5;\n    local_param_6 = param_6;\n    local_param_7 = param_7;\n    local_param_8 = param_8;\n  }\n  buffer_base = &stack0x00000008;\n  buffer_length = 8;\n  copy_base = local_buffer;\n  copy_length = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_001078c0(error_message,&buffer_length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTarget = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "process_file_name_00105830",
                "param_1": "inputFileName",
                "param_2": "extraData",
                "param_3": "placeholder1",
                "param_4": "placeholder2",
                "lVar1": "extraDataPtr",
                "sVar2": "inputFileNameLength",
                "__s": "baseName",
                "uVar3": "byteValue",
                "pcVar4": "outputFileName",
                "bVar5": "loopCounter",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] processFileName_00105830(char *inputFileName,long extraData,undefined8 placeholder1,undefined8 placeholder2)\n\n{\n  long extraDataPtr;\n  size_t inputFileNameLength;\n  char *baseName;\n  ulong byteValue;\n  char *outputFileName;\n  byte loopCounter;\n  undefined result [16];\n  \n  loopCounter = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    inputFileName = baseName;\n    if ((DAT_0010d5fa != '\\0') && (extraData != 0)) {\n      inputFileNameLength = strlen(baseName);\n      byteValue = (ulong)*(byte *)(*(long *)(extraData + 8) + 0x1e);\n      if (byteValue < inputFileNameLength) {\n        inputFileName = (char *)xmalloc(byteValue + 1);\n        extraDataPtr = *(long *)(extraData + 8);\n        outputFileName = inputFileName;\n        for (byteValue = (ulong)*(byte *)(extraDataPtr + 0x1e); byteValue != 0; byteValue = byteValue - 1) {\n          *outputFileName = *baseName;\n          baseName = baseName + (ulong)loopCounter * -2 + 1;\n          outputFileName = outputFileName + (ulong)loopCounter * -2 + 1;\n        }\n        inputFileName[*(byte *)(extraDataPtr + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = placeholder2;\n  result._0_8_ = inputFileName;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105db0",
                "FUN_00105480",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_file_name_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_function_00107730"
            },
            "code": "\nvoid cleanupFunction_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_function_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorString",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorString)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorString != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorString,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00102f96",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "extract_data_from_binary_001031cf",
                "param_1": "file_ptr",
                "param_2": "input_file",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errno_value",
                "uVar2": "is_tty",
                "iVar3": "file_descriptor",
                "piVar4": "errno_location",
                "lVar5": "constant_value"
            },
            "code": "\n\n\nundefined8\nextract_data_from_binary_001031cf(FILE **file_ptr,FILE *input_file,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errno_value;\n  uint is_tty;\n  int file_descriptor;\n  int *errno_location;\n  long constant_value;\n  \n  errno_location = __errno_location();\n  constant_value = DAT_0010d5a8;\n  errno_value = *errno_location;\n  if (file_ptr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = input_file;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (file_ptr == *(FILE ***)(constant_value + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)file_ptr + 0x1c) = 0;\n    *(undefined *)&file_ptr[1]->_flags = 0;\n    *(undefined *)((long)&file_ptr[1]->_flags + 1) = 0;\n    *(undefined4 *)(file_ptr + 5) = 1;\n    file_ptr[2] = file_ptr[1];\n    *(undefined4 *)(file_ptr + 7) = 0;\n    if (constant_value != 0) {\n      if (file_ptr == *(FILE ***)(constant_value + DAT_0010d5a0 * 8)) {\n        extract_data_from_binary_001031cf_001030ed();\n      }\n      *file_ptr = input_file;\n      *(undefined4 *)((long)file_ptr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *file_ptr = input_file;\n    *(undefined4 *)((long)file_ptr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)file_ptr + 0x2c) = 1;\nLAB_0010327b:\n  is_tty = 0;\n  if (input_file != (FILE *)0x0) {\n    file_descriptor = fileno(input_file);\n    file_descriptor = isatty(file_descriptor);\n    is_tty = (uint)(0 < file_descriptor);\n  }\n  *(uint *)((long)file_ptr + 0x24) = is_tty;\n  *errno_location = errno_value;\n  return param5;\n}\n\n",
            "called": [
                "isatty",
                "fileno",
                "FUN_001030ed",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_data_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "destinationPath",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "currentPosition",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "currentErrno",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFileData_00105c00(int fileDescriptor,char *destinationPath)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t currentPosition;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *currentErrno;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (currentPosition = lseek(fileDescriptor,0,0), currentPosition == 0)) {\n    destinationFileDescriptor = open(destinationPath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = close_file_with_error_handling_00102f55();\n      return returnValue;\n    }\n    do {\n      returnValue = read(fileDescriptor,buffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        currentErrno = __errno_location();\n        originalErrno = *currentErrno;\n        close(fileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *currentErrno = originalErrno;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    currentErrno = __errno_location();\n    bytesRead = *currentErrno;\n    close(fileDescriptor);\n    close(destinationFileDescriptor);\n    *currentErrno = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "close",
                "__errno_location",
                "write",
                "FUN_00102f55",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_data_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_size_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error",
                "uVar3": "error_message",
                "pcVar4": "reason",
                "sStack_a8": "file_info"
            },
            "code": "\nlong get_file_size_001052a0(char *file_path)\n\n{\n  int status;\n  int *error;\n  undefined8 error_message;\n  char *reason;\n  stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_info);\n    if (status < 0) {\n      error = __errno_location();\n      if (*error == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00107920(error_message,file_path);\n      }\n      else {\n        reason = strerror(*error);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00107920(error_message,file_path,reason);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_info.st_size) {\n        return file_info.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "dcgettext",
                "stat",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_size_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionDescription"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionDescription;\n  \n  optionDescription = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionDescription);\n  optionDescription = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionDescription);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103172"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_and_check_archives_00103c60",
                "param_1": "input_archive",
                "param_2": "flag",
                "cVar1": "check_result",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "lVar4": "input_archive_handle",
                "lVar5": "archived_file_handle",
                "uVar6": "plugin",
                "plVar7": "archived_file_ptr"
            },
            "code": "\n\n\nvoid extract_and_check_archives_00103c60(char *input_archive,int flag)\n\n{\n  char check_result;\n  int *errno_location;\n  char *error_message;\n  long input_archive_handle;\n  long archived_file_handle;\n  undefined8 plugin;\n  long *archived_file_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_filename_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_location = __errno_location();\n    input_archive = strerror(*errno_location);\n    plugin = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive_handle = bfd_openr(input_archive,\"plugin\");\n      if (input_archive_handle == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        check_result = bfd_check_format(input_archive_handle,2);\n        if (check_result != '\\0') {\n          archived_file_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file_handle = bfd_openr_next_archived_file(input_archive_handle,0); archived_file_handle != 0;\n              archived_file_handle = bfd_openr_next_archived_file(input_archive_handle,archived_file_handle)) {\n            *archived_file_ptr = archived_file_handle;\n            archived_file_ptr = (long *)(archived_file_handle + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    plugin = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,plugin,input_archive);\n  check_and_exit_if_zero_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_set_format",
                "xstrdup",
                "FUN_001057a0",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "fprintf",
                "__errno_location",
                "FUN_0010315d",
                "strerror",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_check_archives_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "save_to_output_file_00102e57",
                "pFVar1": "outputFile"
            },
            "code": "\nvoid saveToOutputFile_00102e57(void)\n\n{\n  FILE *outputFile;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  outputFile = fopen(DAT_0010d618,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "save_to_output_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_1": "files",
                "param_2": "archive",
                "param_3": "print_flag",
                "param_4": "check_format_flag",
                "cVar1": "format_valid",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_archived_files_00105af0(long *files,long archive,char print_flag,char check_format_flag)\n\n{\n  char format_valid;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (check_format_flag == '\\0') {\n    if (print_flag != '\\0') {\n      return_value = print_and_assign_00102f08();\n      return return_value;\n    }\n  }\n  else {\n    format_valid = bfd_check_format(archive,2);\n    if (format_valid != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive,archived_file)) {\n        result = process_archived_files_00105af0(files,archived_file,print_flag,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          files = (long *)(*files + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (print_flag != '\\0') {\n      return_value = print_and_assign_00102f08();\n      return return_value;\n    }\n  }\n  *(long *)(archive + 0xf0) = *files;\n  *files = archive;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_index_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "currentIndexShifted",
                "bVar4": "byteValue",
                "pbVar5": "currentByte",
                "in_R9": "matchingByte",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingIndex_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long currentIndexShifted;\n  byte byteValue;\n  byte *currentByte;\n  byte *matchingByte;\n  int matchingIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    byteValue = 1;\n    if (*currentByte != 0) {\n      byteValue = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchingByte = currentByte;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      currentIndexShifted = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)byteValue);\n      if (*(short *)(&DAT_0010a440 + currentIndexShifted * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        byteValue = (&DAT_0010a7c0)[(int)(uint)byteValue];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + currentIndexShifted * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingByte;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_index_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_address_00102ba1",
                "unaff_RBP": "memoryPointer",
                "unaff_retaddr": "returnValue",
                "auVar1": "revisedVar1"
            },
            "code": "\nundefined  [16] freeAndReturnAddress_00102ba1(void)\n\n{\n  undefined revisedVar1 [16];\n  void *memoryPointer;\n  ulong returnValue;\n  \n  free(memoryPointer);\n  revisedVar1._8_8_ = 0;\n  revisedVar1._0_8_ = returnValue;\n  return revisedVar1 << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_address_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_process_file_00107740",
                "param_1": "file",
                "iVar1": "filenameComparisonResult",
                "iVar2": "exitCode",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "filePointer",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "offset",
                "plVar8": "currentFile",
                "puVar9": "localArray",
                "uVar10": "totalBytesRead",
                "sVar11": "bytesToRead",
                "local_c8": "zeroedArray",
                "_Stack_b0": "permission",
                "uStack_98": "totalSize",
                "uStack_80": "timestamp1",
                "uStack_70": "timestamp2"
            },
            "code": "\n\n\nlong * extractAndProcessFile_00107740(long **file)\n\n{\n  int filenameComparisonResult;\n  int exitCode;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  long **filePointer;\n  void *buffer;\n  size_t bytesRead;\n  long offset;\n  long *currentFile;\n  undefined4 *localArray;\n  ulong totalBytesRead;\n  size_t bytesToRead;\n  undefined4 zeroedArray [6];\n  __mode_t permission;\n  ulong totalSize;\n  undefined8 timestamp1;\n  undefined8 timestamp2;\n  \n  if (_DAT_0010d600 != 0) {\n    localArray = zeroedArray;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *localArray = 0;\n      localArray = localArray + 1;\n    }\n  }\n  filePointer = (long **)file[0x1d];\n  if ((long **)file[0x1d] == (long **)0x0) {\n    filePointer = file;\n  }\n  exitCode = (*(code *)filePointer[1][0x3d])(file,zeroedArray);\n  if (exitCode != 0) {\n    currentFile = *file;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    exitCode = print_error_and_exit_00107690(errorMessage,currentFile);\n    errorMessage = DAT_0010d638;\n    if (exitCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        filenameComparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (filenameComparisonResult == 0) {\n          if (exitCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(file,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (totalSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_and_process_file_00105a20(*file);\n  }\n  else {\n    totalBytesRead = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = totalSize - totalBytesRead;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead,file);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        file = (long **)*file[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(errorMessage,file);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_and_process_file_00105a20(*file);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      totalBytesRead = totalBytesRead + bytesRead;\n    } while (totalBytesRead < totalSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,permission);\n  if (_DAT_0010d600 != 0) {\n    timestamp1 = timestamp2;\n    set_file_timestamps_00107c80(errorString,zeroedArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_process_file_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "arguments",
                "unaff_RBP": "outputFile",
                "unaff_R12": "data",
                "unaff_R13": "buffer",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000068": "filePermissions",
                "uStack000000000000006c": "inodeNumber",
                "in_stack_00000070": "blockSize",
                "in_stack_00000080": "lastModifiedTime"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **arguments;\n  FILE *outputFile;\n  long data;\n  void *buffer;\n  int fileDescriptor;\n  undefined uStack0000000000000015;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char in_stack_00000018;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined uStack000000000000001f;\n  uint filePermissions;\n  uint inodeNumber;\n  uint blockSize;\n  undefined8 lastModifiedTime;\n  \n  do {\n    bVar1 = print_error_and_exit_00107c10();\n    *(uint *)((long)arguments + 0x44) = *(uint *)((long)arguments + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(data + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)arguments + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = copy_and_delete_file_00105bc0();\n    if (iVar3 == 0) {\n      free(buffer);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  print_error_and_exit_00107c10();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = filePermissions & 0xf000;\n  if (uVar4 == 0x4000) {\n    uStack0000000000000015 = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    uStack0000000000000015 = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    uStack0000000000000015 = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    uStack0000000000000015 = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    uStack0000000000000015 = 0x73;\n  }\n  else {\n    uStack0000000000000015 = 0x70;\n    if (uVar4 != 0x1000) {\n      uStack0000000000000015 = 0x2d;\n    }\n  }\n  cStack0000000000000016 = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  cStack0000000000000017 = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  in_stack_00000018 = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  cStack0000000000000019 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001a = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001b = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  cStack000000000000001c = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001d = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001e = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (in_stack_00000018 == 'x') {\n      in_stack_00000018 = 's';\n    }\n    else {\n      in_stack_00000018 = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (cStack000000000000001b == 'x') {\n      cStack000000000000001b = 's';\n    }\n    else {\n      cStack000000000000001b = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (cStack000000000000001e == 'x') {\n      cStack000000000000001e = 't';\n    }\n    else {\n      cStack000000000000001e = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)blockSize,lastModifiedTime,&stack0x00000020,(ulong)filePermissions)\n  ;\n  fputs(*arguments,outputFile);\n  if ((char)data != '\\0') {\n    if ((*(byte *)((long)arguments + 0x49) & 0x10) == 0) {\n      if (arguments[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (arguments[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "free",
                "dup",
                "FUN_00107c10",
                "xexit",
                "FUN_00105bc0",
                "bfd_close",
                "bfd_set_archive_head",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "find_and_process_files_001028ed",
                "param_1": "error_msg",
                "param_2": "param_ptr",
                "uVar1": "unknown",
                "bVar2": "flag",
                "iVar3": "index",
                "sVar4": "size",
                "piVar5": "errno_ptr",
                "pcVar6": "filename_1",
                "pcVar7": "filename_2",
                "ppcVar8": "file_ptr",
                "uVar9": "process_result",
                "lVar10": "file_link",
                "__s": "basename_1",
                "__s_00": "basename_2",
                "lVar11": "current_link",
                "uVar12": "static_data",
                "uVar13": "file_length",
                "unaff_RBX": "filename_ptr",
                "ppcVar14": "file_info_ptr",
                "unaff_RBP": "file_list_ptr",
                "unaff_R12": "filename_list_ptr",
                "unaff_R13D": "file_mode",
                "ppcVar15": "next_file_info",
                "unaff_R14": "file_info_link",
                "bVar16": "result_flag",
                "bVar17": "byte_value",
                "param_7": "dir_ptr",
                "param_9": "info_result",
                "in_stack_00000078": "stack_var_1",
                "in_stack_00000108": "stack_var_2"
            },
            "code": "\n\n\nundefined8 find_and_process_files_001028ed(undefined8 error_msg,long param_ptr)\n\n{\n  undefined unknown;\n  byte flag;\n  int index;\n  size_t size;\n  int *errno_ptr;\n  char *filename_1;\n  char *filename_2;\n  char **file_ptr;\n  undefined8 process_result;\n  long file_link;\n  char *basename_1;\n  char *basename_2;\n  long current_link;\n  undefined8 static_data;\n  ulong file_length;\n  char *filename_ptr;\n  char **file_info_ptr;\n  char **file_list_ptr;\n  char **filename_list_ptr;\n  uint file_mode;\n  char **next_file_info;\n  long file_info_link;\n  bool result_flag;\n  byte byte_value;\n  char **dir_ptr;\n  undefined8 info_result;\n  long stack_var_1;\n  long stack_var_2;\n  \n  byte_value = 0;\ncode_r0x001028ed:\n  print_error_and_exit_00107c10(filename_ptr,param_ptr);\nLAB_001028f5:\n  static_data = DAT_0010d638;\n  if (file_mode != 3) {\n    while( true ) {\n      if ((undefined8 *)*filename_list_ptr == (undefined8 *)0x0) goto LAB_0010571f;\n      index = filename_cmp(*(undefined8 *)*filename_list_ptr,static_data);\n      if (index == 0) break;\n      filename_list_ptr = (char **)(*filename_list_ptr + 0xf0);\n    }\n    if (file_mode != 2) goto LAB_0010571f;\n    filename_list_ptr = (char **)(*filename_list_ptr + 0xf0);\n    goto LAB_0010571f;\n  }\n  file_link = *(long *)(file_info_link + 0xf0);\n  if (*(long *)(file_info_link + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    current_link = file_link;\n    file_link = *(long *)(current_link + 0xf0);\n  } while (file_link != 0);\n  filename_list_ptr = (char **)(current_link + 0xf0);\n  filename_ptr = *file_list_ptr;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  unknown = DAT_0010d5f8;\n  file_mode = (uint)(DAT_0010d60c != 0);\n  param_ptr = bfd_openr(filename_ptr,DAT_0010d5f0);\n  if (param_ptr != 0) {\n    file_list_ptr = file_list_ptr + 1;\n    flag = process_archived_files_00105af0(filename_list_ptr,param_ptr,file_mode,unknown);\n    info_result._6_1_ = info_result._6_1_ | flag;\n    filename_1 = *file_list_ptr;\n    do {\n      if (filename_1 == (char *)0x0) {\n        if (info_result._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        static_data = extract_and_print_file_info_001058b0();\n        return static_data;\n      }\n      file_info_ptr = *(char ***)(file_info_link + 0xf0);\n      filename_list_ptr = dir_ptr;\n      if (info_result._7_1_ == '\\0') {\n        next_file_info = dir_ptr;\n        if (file_info_ptr != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              basename_1 = (char *)lbasename(*file_info_ptr);\n              filename_2 = basename_1;\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(basename_1);\n                file_length = (ulong)*(byte *)(*(long *)(file_info_link + 8) + 0x1e);\n                if (file_length < size) {\n                  filename_2 = (char *)xmalloc(file_length + 1);\n                  file_link = *(long *)(file_info_link + 8);\n                  filename_1 = filename_2;\n                  for (file_length = (ulong)*(byte *)(file_link + 0x1e); file_length != 0; file_length = file_length - 1) {\n                    *filename_1 = *basename_1;\n                    basename_1 = basename_1 + (ulong)byte_value * -2 + 1;\n                    filename_1 = filename_1 + (ulong)byte_value * -2 + 1;\n                  }\n                  filename_2[*(byte *)(file_link + 0x1e)] = '\\0';\n                }\n                filename_1 = *file_list_ptr;\n                basename_1 = filename_2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              filename_1 = *file_list_ptr;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              basename_2 = (char *)lbasename(filename_1);\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(basename_2);\n                file_length = (ulong)*(byte *)(*(long *)(file_info_link + 8) + 0x1e);\n                filename_1 = basename_2;\n                basename_1 = filename_2;\n                if (file_length < size) {\n                  filename_1 = (char *)xmalloc(file_length + 1);\n                  file_link = *(long *)(file_info_link + 8);\n                  filename_2 = filename_1;\n                  for (file_length = (ulong)*(byte *)(file_link + 0x1e); file_length != 0; file_length = file_length - 1) {\n                    *filename_2 = *basename_2;\n                    basename_2 = basename_2 + (ulong)byte_value * -2 + 1;\n                    filename_2 = filename_2 + (ulong)byte_value * -2 + 1;\n                  }\n                  filename_1[*(byte *)(file_link + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              index = filename_cmp(basename_2,filename_2);\n            }\n            else {\n              filename_1 = *file_list_ptr;\n              basename_1 = *file_info_ptr;\nLAB_00102980:\n              index = filename_cmp(filename_1,basename_1);\n            }\n            if ((index == 0) && (file_info_ptr[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                index = stat(*file_list_ptr,(stat *)&stack0x000000b0);\n                if (index != 0) {\n                  errno_ptr = __errno_location();\n                  if (*errno_ptr != 2) {\n                    print_error_and_exit_00107c10(*file_list_ptr);\nLAB_00102b7e:\n                    filename_1 = *file_info_ptr;\n                    static_data = dcgettext(0,\"internal stat error on %s\",5);\n                    print_error_and_exit_00107690(static_data,filename_1);\n                    free(file_list_ptr);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                file_ptr = (char **)file_info_ptr[0x1d];\n                if ((char **)file_info_ptr[0x1d] == (char **)0x0) {\n                  file_ptr = file_info_ptr;\n                }\n                index = (**(code **)(file_ptr[1] + 0x1e8))(file_info_ptr,&stack0x00000020);\n                if (index != 0) goto LAB_00102b7e;\n                if (stack_var_2 <= stack_var_1) goto LAB_0010577e;\n              }\n              static_data = find_file_in_memory_00105870(dir_ptr,2,*file_info_ptr);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                filename_1 = *file_list_ptr;\n                result_flag = DAT_0010d60c != 0;\n                file_link = bfd_openr(filename_1,DAT_0010d5f0);\n                if (file_link == 0) {\n                  print_error_and_exit_00107c10(filename_1,0);\n                  goto LAB_00102b3e;\n                }\n                flag = update_and_print_value_00103172(static_data,file_link,result_flag);\n              }\n              else {\n                process_result = process_file_name_00105830(*file_list_ptr);\n                index = filename_cmp(process_result,\"__.LIBDEP\");\n                if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                flag = update_and_print_value_00103172(static_data,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (flag != 0) {\n                *next_file_info = *(char **)(*next_file_info + 0xf0);\n                info_result._6_1_ = flag;\n              }\n              goto LAB_0010577e;\n            }\n            next_file_info = file_info_ptr + 0x1e;\n            file_info_ptr = (char **)file_info_ptr[0x1e];\n          } while (file_info_ptr != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        file_mode = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        file_mode = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        file_link = *(long *)(file_info_link + 0xf0);\n        if (*(long *)(file_info_link + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      filename_ptr = *file_list_ptr;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      static_data = process_file_name_00105830(filename_ptr);\n      index = filename_cmp(static_data,\"__.LIBDEP\");\n      if (index != 0) goto code_r0x0010574f;\n      flag = process_archived_files_00105ae0(filename_list_ptr,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      info_result._6_1_ = flag | info_result._6_1_;\nLAB_0010577e:\n      file_list_ptr = file_list_ptr + 1;\n      filename_1 = *file_list_ptr;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  filename_ptr = *file_list_ptr;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "FUN_00105ae0",
                "FUN_00105870",
                "FUN_00107c10",
                "FUN_00105830",
                "bfd_openr",
                "dcgettext",
                "FUN_00105af0",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_001058b0",
                "stat",
                "strlen",
                "FUN_00103172",
                "filename_cmp",
                "lbasename",
                "xmalloc",
                "__errno_location",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_and_process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_and_exit_001033b0",
                "param_1": "errorMessage"
            },
            "code": "\n\n\nvoid printAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_00103df9",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103e95",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_not_found_error_001025a0",
                "piVar1": "errorCodePtr",
                "uVar2": "errorMessage",
                "__errno_location": "getErrorLocation",
                "dcgettext": "getLocalizedMessage",
                "print_error_message_00107920": "printErrorMessage"
            },
            "code": "\nundefined8 handleFileNotFoundError_001025a0(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorMessage;\n  \n  errorCodePtr = __errno_location();\n  if (*errorCodePtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    printErrorMessage(errorMessage);\n  }\n  else {\n    strerror(*errorCodePtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    printErrorMessage(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_not_found_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_constant_one_0010284b"
            },
            "code": "\nundefined8 getConstantOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_constant_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_process_file_00102c25",
                "param_7": "permissions",
                "param_11": "mode",
                "param_12": "archive_size",
                "puVar9": "param_ptr",
                "iVar1": "filename_comparison_result",
                "iVar2": "internal_stat_error",
                "plVar8": "current_file",
                "uVar5": "error_message",
                "pcVar4": "error_message_str",
                "piVar3": "error_number",
                "unaff_RBX": "file_data",
                "pplVar6": "file_data_ptr",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "sVar11": "bytes_to_write",
                "uVar10": "bytes_written"
            },
            "code": "\n\n\nlong * extract_and_process_file_00102c25(void)\n\n{\n  int filename_comparison_result;\n  int internal_stat_error;\n  int *error_number;\n  char *error_message_str;\n  undefined8 error_message;\n  long **file_data_ptr;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **file_data;\n  long *current_file;\n  undefined4 *param_ptr;\n  ulong bytes_written;\n  size_t bytes_to_write;\n  undefined4 *permissions;\n  __mode_t mode;\n  ulong archive_size;\n  \n  param_ptr = permissions;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *param_ptr = 0;\n    param_ptr = param_ptr + 1;\n  }\n  file_data_ptr = (long **)file_data[0x1d];\n  if ((long **)file_data[0x1d] == (long **)0x0) {\n    file_data_ptr = file_data;\n  }\n  internal_stat_error = (*(code *)file_data_ptr[1][0x3d])();\n  if (internal_stat_error != 0) {\n    current_file = *file_data;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    internal_stat_error = print_error_and_exit_00107690(error_message,current_file);\n    error_message = DAT_0010d638;\n    if (internal_stat_error == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        filename_comparison_result = filename_cmp(*(undefined8 *)*current_file,error_message);\n        if (filename_comparison_result == 0) {\n          if (internal_stat_error != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_and_process_file_00102c25_00105a20(*file_data);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_write = archive_size - bytes_written;\n      if (0x2000 < bytes_to_write) {\n        bytes_to_write = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_write);\n      if (bytes_to_write != bytes_read) {\nLAB_00102c78:\n        file_data = (long **)*file_data[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(error_message,file_data);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_and_process_file_00102c25_00105a20(*file_data);\n      }\n      bytes_to_write = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_write != bytes_read) {\n        error_number = __errno_location();\n        error_message_str = strerror(*error_number);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message_str);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message_str = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,mode);\n  if (_DAT_0010d600 != 0) {\n    set_file_timestamps_00107c80(error_message_str,permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "fclose",
                "strerror",
                "fwrite",
                "FUN_00107c80",
                "free",
                "xmalloc",
                "bfd_seek",
                "__errno_location",
                "FUN_00105a20",
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_process_file_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "parse_input_string_00102bb0",
                "in_RAX": "input_string",
                "sVar2": "string_length",
                "puVar3": "parsed_string",
                "uVar4": "max_length",
                "unaff_RBX": "current_char",
                "unaff_RBP": "base_pointer",
                "puVar5": "parsed_string_pos",
                "bVar6": "is_negative",
                "auVar7": "return_value",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] parse_input_string_00102bb0(void)\n\n{\n  long lVar1;\n  char *input_string;\n  size_t string_length;\n  undefined *parsed_string;\n  ulong max_length;\n  undefined *current_char;\n  long base_pointer;\n  undefined *parsed_string_pos;\n  byte is_negative;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  is_negative = 0;\n  string_length = strlen(input_string);\n  max_length = (ulong)*(byte *)(*(long *)(base_pointer + 8) + 0x1e);\n  parsed_string = current_char;\n  if (max_length < string_length) {\n    parsed_string = (undefined *)xmalloc(max_length + 1);\n    lVar1 = *(long *)(base_pointer + 8);\n    parsed_string_pos = parsed_string;\n    for (max_length = (ulong)*(byte *)(lVar1 + 0x1e); max_length != 0; max_length = max_length - 1) {\n      *parsed_string_pos = *current_char;\n      current_char = current_char + (ulong)is_negative * -2 + 1;\n      parsed_string_pos = parsed_string_pos + (ulong)is_negative * -2 + 1;\n    }\n    parsed_string[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = parsed_string;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "parse_input_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "param1",
                "unaff_R12": "param2"
            },
            "code": "\nundefined8 printAndAssign_00102f08(void)\n\n{\n  undefined8 *param1;\n  undefined8 *param2;\n  \n  printf(\"a - %s\\n\",*param1);\n  param1[0x1e] = *param2;\n  *param2 = param1;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "analyze_binary_00105570",
                "param_1": "binary",
                "param_2": "fileNames",
                "param_3": "extractInfo",
                "ppcVar1": "fileData",
                "uVar2": "undefinedVar",
                "bVar3": "isProcessingSuccessful",
                "iVar4": "comparisonResult",
                "sVar5": "stringLength",
                "piVar6": "errnoLocation",
                "pcVar7": "fileName",
                "pcVar8": "processedFileName",
                "uVar9": "fileUpdateInfo",
                "pcVar10": "currentFile",
                "__s": "basenameResult",
                "lVar11": "currentPPCVar",
                "lVar12": "nextPPCVar",
                "uVar13": "returnValue",
                "uVar14": "byteCounter",
                "ppcVar15": "currentPPCVar",
                "ppcVar16": "nextPPCVar",
                "uVar17": "dataFlag",
                "ppcVar18": "previousPPCVar",
                "bVar19": "flagValue",
                "bVar20": "byteValue",
                "local_15a": "localFlag",
                "auStack_158": "stackArray",
                "lStack_100": "timeLimit",
                "sStack_c8": "fileStat"
            },
            "code": "\n\n\nundefined8 analyzeBinary_00105570(long binary,char **fileNames,char extractInfo)\n\n{\n  char **fileData;\n  undefined undefinedVar;\n  byte isProcessingSuccessful;\n  int comparisonResult;\n  size_t stringLength;\n  int *errnoLocation;\n  char *fileName;\n  char *processedFileName;\n  undefined8 fileUpdateInfo;\n  char *currentFile;\n  char *basenameResult;\n  long currentPPCVar;\n  long nextPPCVar;\n  undefined8 returnValue;\n  ulong byteCounter;\n  char **currentPPCVar;\n  char **nextPPCVar;\n  uint dataFlag;\n  char **previousPPCVar;\n  bool flagValue;\n  byte byteValue;\n  byte localFlag;\n  undefined stackArray [88];\n  long timeLimit;\n  stat fileStat;\n  \n  byteValue = 0;\n  fileData = (char **)(binary + 0xf0);\n  localFlag = 0;\n  if (fileNames == (char **)0x0) {\n    returnValue = initialize_data_00102943();\n    return returnValue;\n  }\n  do {\n    currentFile = *fileNames;\njoined_r0x001055aa:\n    if (currentFile == (char *)0x0) {\n      if (localFlag != 0) {\n        returnValue = extract_and_print_file_info_001058b0(binary);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentPPCVar = *(char ***)(binary + 0xf0);\n    nextPPCVar = fileData;\n    if (extractInfo != '\\0') {\nLAB_0010564c:\n      dataFlag = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      nextPPCVar = *(long *)(binary + 0xf0);\n      if (*(long *)(binary + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPPCVar = nextPPCVar;\n        nextPPCVar = *(long *)(currentPPCVar + 0xf0);\n      } while (nextPPCVar != 0);\n      nextPPCVar = (char **)(currentPPCVar + 0xf0);\n      currentFile = *fileNames;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = process_file_name_00105830(currentFile,binary);\n          comparisonResult = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (comparisonResult == 0) {\n            isProcessingSuccessful = process_archived_files_00105ae0(nextPPCVar,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localFlag = isProcessingSuccessful | localFlag;\n            goto LAB_0010577e;\n          }\n          currentFile = *fileNames;\n        }\n        undefinedVar = DAT_0010d5f8;\n        flagValue = DAT_0010d60c != 0;\n        nextPPCVar = bfd_openr(currentFile,DAT_0010d5f0);\n        if (nextPPCVar != 0) {\n          fileNames = fileNames + 1;\n          isProcessingSuccessful = process_archived_files_00105af0(nextPPCVar,nextPPCVar,(uint)flagValue,undefinedVar);\n          localFlag = localFlag | isProcessingSuccessful;\n          currentFile = *fileNames;\n          goto joined_r0x001055aa;\n        }\n        print_error_and_exit_00107c10(currentFile,0);\n        dataFlag = (uint)flagValue;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (dataFlag == 3) {\n          nextPPCVar = *(long *)(binary + 0xf0);\n          if (*(long *)(binary + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*nextPPCVar != (undefined8 *)0x0;\n              nextPPCVar = (char **)(*nextPPCVar + 0xf0)) {\n            comparisonResult = filename_cmp(*(undefined8 *)*nextPPCVar,returnValue);\n            if (comparisonResult == 0) {\n              if (dataFlag == 2) {\n                nextPPCVar = (char **)(*nextPPCVar + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFile = *fileNames;\n      } while( true );\n    }\n    previousPPCVar = fileData;\n    if (currentPPCVar == (char **)0x0) {\n      dataFlag = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFile = (char *)lbasename(*currentPPCVar);\n      processedFileName = currentFile;\n      if (DAT_0010d5fa != '\\0') {\n        stringLength = strlen(currentFile);\n        byteCounter = (ulong)*(byte *)(*(long *)(binary + 8) + 0x1e);\n        if (byteCounter < stringLength) {\n          processedFileName = (char *)xmalloc(byteCounter + 1);\n          nextPPCVar = *(long *)(binary + 8);\n          fileName = processedFileName;\n          for (byteCounter = (ulong)*(byte *)(nextPPCVar + 0x1e); byteCounter != 0; byteCounter = byteCounter - 1) {\n            *fileName = *currentFile;\n            currentFile = currentFile + (ulong)byteValue * -2 + 1;\n            fileName = fileName + (ulong)byteValue * -2 + 1;\n          }\n          processedFileName[*(byte *)(nextPPCVar + 0x1e)] = '\\0';\n        }\n        fileName = *fileNames;\n        currentFile = processedFileName;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      fileName = *fileNames;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basenameResult = (char *)lbasename(fileName);\n      if (DAT_0010d5fa != '\\0') {\n        stringLength = strlen(basenameResult);\n        byteCounter = (ulong)*(byte *)(*(long *)(binary + 8) + 0x1e);\n        fileName = basenameResult;\n        currentFile = processedFileName;\n        if (byteCounter < stringLength) {\n          fileName = (char *)xmalloc(byteCounter + 1);\n          nextPPCVar = *(long *)(binary + 8);\n          processedFileName = fileName;\n          for (byteCounter = (ulong)*(byte *)(nextPPCVar + 0x1e); byteCounter != 0; byteCounter = byteCounter - 1) {\n            *processedFileName = *basenameResult;\n            basenameResult = basenameResult + (ulong)byteValue * -2 + 1;\n            processedFileName = processedFileName + (ulong)byteValue * -2 + 1;\n          }\n          fileName[*(byte *)(nextPPCVar + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      comparisonResult = filename_cmp(basenameResult,processedFileName);\n      if (comparisonResult == 0) goto LAB_00102993;\nLAB_00105639:\n      previousPPCVar = currentPPCVar + 0x1e;\n      currentPPCVar = (char **)currentPPCVar[0x1e];\n      if (currentPPCVar == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    fileName = *fileNames;\n    currentFile = *currentPPCVar;\nLAB_00102980:\n    comparisonResult = filename_cmp(fileName,currentFile);\n    if (comparisonResult != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentPPCVar[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      comparisonResult = stat(*fileNames,&fileStat);\n      if (comparisonResult != 0) {\n        errnoLocation = __errno_location();\n        if (*errnoLocation != 2) {\n          print_error_and_exit_00107c10(*fileNames);\nLAB_00102b7e:\n          currentFile = *currentPPCVar;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_and_exit_00107690(returnValue,currentFile);\n          free(fileNames);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      nextPPCVar = (char **)currentPPCVar[0x1d];\n      if ((char **)currentPPCVar[0x1d] == (char **)0x0) {\n        nextPPCVar = currentPPCVar;\n      }\n      comparisonResult = (**(code **)(nextPPCVar[1] + 0x1e8))(currentPPCVar,stackArray);\n      if (comparisonResult != 0) goto LAB_00102b7e;\n      if (fileStat.st_mtim.tv_sec <= timeLimit) goto LAB_0010577e;\n    }\n    returnValue = find_file_in_memory_00105870(fileData,2,*currentPPCVar);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFile = *fileNames;\n      flagValue = DAT_0010d60c != 0;\n      nextPPCVar = bfd_openr(currentFile,DAT_0010d5f0);\n      if (nextPPCVar == 0) {\n        print_error_and_exit_00107c10(currentFile,0);\n        goto LAB_00102b3e;\n      }\n      isProcessingSuccessful = update_and_print_value_00103172(returnValue,nextPPCVar,flagValue);\n    }\n    else {\n      fileUpdateInfo = process_file_name_00105830(*fileNames,binary);\n      comparisonResult = filename_cmp(fileUpdateInfo,\"__.LIBDEP\");\n      if (comparisonResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      isProcessingSuccessful = update_and_print_value_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (isProcessingSuccessful != 0) {\n      *previousPPCVar = *(char **)(*previousPPCVar + 0xf0);\n      localFlag = isProcessingSuccessful;\n    }\nLAB_0010577e:\n    fileNames = fileNames + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "analyze_binary_00105570"
        }
    },
    "used_tokens": 120723,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}