{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_pointer_00102cd9",
                "in_EAX": "count",
                "iVar1": "comparisonResult",
                "unaff_RBX": "pointerArray",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingPointer_00102cd9(void)\n\n{\n  int count;\n  int comparisonResult;\n  long *pointerArray;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (count == 3) {\n    for (; *pointerArray != 0; pointerArray = (long *)(*pointerArray + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*pointerArray != (undefined8 *)0x0; pointerArray = (long *)(*pointerArray + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*pointerArray,targetFilename);\n      if (comparisonResult == 0) {\n        if (count != 2) {\n          return pointerArray;\n        }\n        return (long *)(*pointerArray + 0xf0);\n      }\n    }\n  }\n  return pointerArray;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_pointer_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102710",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_00105db0",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "isTimeDataPresent",
                "param_4": "printHexAddress",
                "iVar1": "returnStatus",
                "ppcVar2": "backupFileInfo",
                "pcVar3": "timeString",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "permissionChar",
                "cStack_f2": "userRead",
                "cStack_f1": "userWrite",
                "cStack_f0": "userExecute",
                "cStack_ef": "groupRead",
                "cStack_ee": "groupWrite",
                "cStack_ed": "groupExecute",
                "cStack_ec": "otherRead",
                "cStack_eb": "otherWrite",
                "cStack_ea": "otherExecute",
                "local_e8": "formattedTimeString",
                "local_b8": "placeholderArray",
                "uStack_a0": "filePermission",
                "uStack_9c": "inodeNumber",
                "uStack_98": "hardLinks",
                "uStack_88": "fileSize",
                "local_60": "fileModifiedTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char isTimeDataPresent,char printHexAddress)\n\n{\n  int returnStatus;\n  char **backupFileInfo;\n  char *timeString;\n  uint fileType;\n  time_t currentTime;\n  undefined permissionChar;\n  char userRead;\n  char userWrite;\n  char userExecute;\n  char groupRead;\n  char groupWrite;\n  char groupExecute;\n  char otherRead;\n  char otherWrite;\n  char otherExecute;\n  undefined uStack_e9;\n  char formattedTimeString [48];\n  undefined placeholderArray [24];\n  uint filePermission;\n  uint inodeNumber;\n  uint hardLinks;\n  undefined8 fileSize;\n  time_t fileModifiedTime;\n  \n  if (isTimeDataPresent != '\\0') {\n    backupFileInfo = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      backupFileInfo = fileInfo;\n    }\n    returnStatus = (**(code **)(backupFileInfo[1] + 0x1e8))(fileInfo,placeholderArray);\n    if (returnStatus == 0) {\n      currentTime = fileModifiedTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTimeString,timeString);\n      }\n      else {\n        sprintf(formattedTimeString,\"%.12s %.4s\",timeString + 4);\n      }\n      fileType = filePermission & 0xf000;\n      if (fileType == 0x4000) {\n        permissionChar = 100;\n      }\n      else if (fileType == 0xa000) {\n        permissionChar = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        permissionChar = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        permissionChar = 99;\n      }\n      else if (fileType == 0xc000) {\n        permissionChar = 0x73;\n      }\n      else {\n        permissionChar = 0x70;\n        if (fileType != 0x1000) {\n          permissionChar = 0x2d;\n        }\n      }\n      userRead = (-((filePermission & 0x100) == 0) & 0xbbU) + 0x72;\n      userWrite = (-((filePermission & 0x80) == 0) & 0xb6U) + 0x77;\n      userExecute = (-((filePermission & 0x40) == 0) & 0xb5U) + 0x78;\n      groupRead = (-((filePermission & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWrite = (-((filePermission & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecute = (-((filePermission & 8) == 0) & 0xb5U) + 0x78;\n      otherRead = (-((filePermission & 4) == 0) & 0xbbU) + 0x72;\n      otherWrite = (-((filePermission & 2) == 0) & 0xb6U) + 0x77;\n      otherExecute = (-((filePermission & 1) == 0) & 0xb5U) + 0x78;\n      if ((filePermission & 0x800) != 0) {\n        if (userExecute == 'x') {\n          userExecute = 's';\n        }\n        else {\n          userExecute = 'S';\n        }\n      }\n      if ((filePermission & 0x400) != 0) {\n        if (groupExecute == 'x') {\n          groupExecute = 's';\n        }\n        else {\n          groupExecute = 'S';\n        }\n      }\n      if ((filePermission & 0x200) != 0) {\n        if (otherExecute == 'x') {\n          otherExecute = 't';\n        }\n        else {\n          otherExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&userRead,(ulong)inodeNumber,(ulong)hardLinks,fileSize,\n              formattedTimeString,(ulong)filePermission);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printHexAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "FUN_00102d8c",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_path_00105a68",
                "pcVar1": "filePath",
                "pFVar2": "file",
                "sVar3": "length"
            },
            "code": "\nvoid processFilePath_00105a68(void)\n\n{\n  char *filePath;\n  FILE *file;\n  size_t length;\n  \n  filePath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    length = strlen(DAT_0010d5e8);\n    if (length != 0) {\n      if (filePath[length - 1] == '/') {\n        DAT_0010d618 = (char *)concat(filePath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(filePath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file = fopen(DAT_0010d618,\"w\");\n  if (file != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "concat",
                "printf",
                "fopen",
                "strlen",
                "xexit",
                "FUN_00102e57"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_path_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "param_1": "entriesArray",
                "param_2": "callbackFunction",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "currentEntryName",
                "bVar3": "foundEntry",
                "plVar4": "currentEntryPtr",
                "iVar5": "comparisonResult",
                "__format": "errorMessageFormat",
                "plVar6": "nextEntryPtr",
                "lVar7": "currentEntry",
                "plVar8": "previousEntryPtr"
            },
            "code": "\n\n\nundefined8 processArchiveEntries_001032a8(long *entriesArray,code *callbackFunction,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 currentEntryName;\n  bool foundEntry;\n  long *currentEntryPtr;\n  int comparisonResult;\n  char *errorMessageFormat;\n  long *nextEntryPtr;\n  long currentEntry;\n  long *previousEntryPtr;\n  \n  currentEntry = entriesArray[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntry != 0) {\n      nextEntry = *(long *)(currentEntry + 0xf0);\n      (*callbackFunction)(currentEntry,0);\n      currentEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentEntryPtr = (long *)entriesArray[0x1e];\n      previousEntryPtr = entriesArray;\n      while (nextEntryPtr = currentEntryPtr, nextEntryPtr != (long *)0x0) {\n        if (*nextEntryPtr != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*callbackFunction)(nextEntryPtr,previousEntryPtr);\n          }\n        }\n        previousEntryPtr = nextEntryPtr;\n        currentEntryPtr = (long *)nextEntryPtr[0x1e];\n      }\n      if (!foundEntry) {\n        currentEntryName = *entryNames;\n        errorMessageFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessageFormat,currentEntryName);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entries_0010285f",
                "unaff_RBP": "callbackFunc",
                "unaff_R12": "archivePtr",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "filenameCounter",
                "uVar4": "currentEntryName",
                "__format": "errorMessage",
                "lVar2": "currentEntry",
                "plVar3": "archiveEntry",
                "plVar5": "nextEntry"
            },
            "code": "\n\n\nvoid printMissingEntries_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessage;\n  long currentEntry;\n  long *archiveEntry;\n  undefined8 currentEntryName;\n  long *nextEntry;\n  code *callbackFunc;\n  long archivePtr;\n  int entryCount;\n  undefined8 *entryNames;\n  int filenameCounter;\n  \ncode_r0x0010285f:\n  currentEntryName = *entryNames;\n  errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessage,currentEntryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  nextEntry = *(long **)(archivePtr + 0xf0);\n  filenameCounter = 0;\n  do {\n    if (nextEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)nextEntry + 0xac) == 0) {\n      currentEntry = *nextEntry;\n      if (currentEntry == 0) {\n        archiveEntry = (long *)nextEntry[0x1d];\n        if ((long *)nextEntry[0x1d] == (long *)0x0) {\n          archiveEntry = nextEntry;\n        }\n        (**(code **)(archiveEntry[1] + 0x1e8))(nextEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) || (currentEntry = FUN_00105830(), currentEntry != 0))\n      {\n        currentEntryName = FUN_00105830(*entryNames);\n        iVar1 = filename_cmp(currentEntryName,currentEntry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (filenameCounter = filenameCounter + 1,\n            filenameCounter == _DAT_0010d630)))) break;\n      }\n    }\n    nextEntry = (long *)nextEntry[0x1e];\n  } while( true );\n  (*callbackFunc)();\n  *(undefined4 *)((long)nextEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_missing_entries_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_001057a0",
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorFlag != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "display_usage_0010342d",
                "param_1": "outputToStdout",
                "uVar1": "version",
                "pcVar2": "message",
                "__stream": "stream"
            },
            "code": "\n\n\nvoid displayUsage_0010342d(uint outputToStdout)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *stream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  stream = _stderr;\n  if (outputToStdout != 0) {\n    stream = _stdout;\n  }\n  fprintf(stream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(stream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(stream,message);\n  FUN_0010336b(stream);\n  FUN_0010266f(DAT_0010d660,stream);\n  if (outputToStdout != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010336b",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "display_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_message_0010394a",
                "param_1": "errorFlag",
                "uVar1": "dataPtr",
                "pcVar2": "messagePtr",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsageMessage_0010394a(uint errorFlag)\n\n{\n  undefined8 dataPtr;\n  char *messagePtr;\n  FILE *outputStream;\n  \n  dataPtr = DAT_0010d660;\n  outputStream = _stderr;\n  if (errorFlag != 0) {\n    outputStream = _stdout;\n  }\n  messagePtr = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,messagePtr,dataPtr);\n  messagePtr = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,messagePtr);\n  messagePtr = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,messagePtr);\n  messagePtr = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,messagePtr);\n  messagePtr = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,messagePtr);\n  messagePtr = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,messagePtr);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (errorFlag != 0) {\n    messagePtr = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,messagePtr,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(errorFlag ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_message_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "initialize_function_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "source",
                "local_c8": "destination",
                "local_b8": "valueBuffer",
                "local_b0": "localParam1",
                "local_a8": "localParam2",
                "local_a0": "localParam3",
                "local_98": "localParam4",
                "local_90": "localParam5",
                "local_88": "localVariable1",
                "local_78": "localVariable2",
                "local_68": "localVariable3",
                "local_58": "localVariable4",
                "local_48": "localVariable5",
                "local_38": "localVariable6",
                "local_28": "localVariable7",
                "local_18": "localVariable8"
            },
            "code": "\nvoid initializeFunction_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 offset;\n  undefined *source;\n  undefined *destination;\n  undefined valueBuffer [8];\n  undefined8 localParam1;\n  undefined8 localParam2;\n  undefined8 localParam3;\n  undefined8 localParam4;\n  undefined8 localParam5;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  undefined4 localVariable7;\n  undefined4 localVariable8;\n  \n  if (flag != '\\0') {\n    localVariable1 = input1;\n    localVariable2 = input2;\n    localVariable3 = input3;\n    localVariable4 = input4;\n    localVariable5 = input5;\n    localVariable6 = input6;\n    localVariable7 = input7;\n    localVariable8 = input8;\n  }\n  source = &stack0x00000008;\n  size = 8;\n  destination = valueBuffer;\n  offset = 0x30;\n  localParam1 = param2;\n  localParam2 = param3;\n  localParam3 = param4;\n  localParam4 = param5;\n  localParam5 = param6;\n  FUN_001078c0(param1,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_function_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "is_always_one_00105bb0"
            },
            "code": "\nundefined8 isAlwaysOne_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "is_always_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_00107640",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "create_output_file_00102e6f",
                "pcVar1": "currentDirectory",
                "in_RAX": "fileName",
                "uVar2": "baseName",
                "uVar3": "errorMessage",
                "pFVar4": "filePtr",
                "sVar5": "length",
                "pcVar6": "currentCharacter"
            },
            "code": "\nvoid createOutputFile_00102e6f(void)\n\n{\n  char *currentDirectory;\n  char *fileName;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePtr;\n  size_t length;\n  char *currentCharacter;\n  \n  currentDirectory = DAT_0010d5e8;\n  do {\n    fileName = fileName + 1;\n    while (*fileName != '/') {\n      if (*fileName == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (length = strlen(DAT_0010d5e8), length != 0)) {\n          if (currentDirectory[length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(currentDirectory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(currentDirectory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePtr = fopen(DAT_0010d618,\"w\");\n        if (filePtr == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentCharacter = fileName;\n      if ((*fileName == '.') && (currentCharacter = fileName + 1, fileName[1] == '.')) {\n        currentCharacter = fileName + 2;\n        if ((fileName[2] == '/') || (fileName[2] == '\\0')) {\n          baseName = lbasename();\n          currentDirectory = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(errorMessage,currentDirectory,baseName);\n          DAT_0010d618 = (char *)baseName;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (fileName = currentCharacter, *currentCharacter != '\\0' && (*currentCharacter != '/')); currentCharacter = currentCharacter + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107920",
                "lbasename",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_data_validity_0010315d"
            },
            "code": "\n\n\nvoid checkDataValidity_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_data_validity_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_output_00107890",
                "param_1": "output",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printOutput_00107890(undefined8 output)\n\n{\n  FUN_001079c0(standardOutput,output,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_output_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "dataBuffer",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *dataBuffer;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dataBuffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dataBuffer;\n  } while (dataBuffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "malloc",
                "FUN_001033b0",
                "FUN_001031cf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "store_data_00103172",
                "param_1": "data_pointer",
                "param_2": "buffer",
                "param_3": "flag",
                "param_4": "value",
                "uVar1": "data_value",
                "auVar2": "result"
            },
            "code": "\nundefined  [16]\nstore_data_00103172(undefined8 *data_pointer,undefined8 *buffer,char flag,undefined8 value)\n\n{\n  undefined8 data_value;\n  undefined result [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*buffer);\n  }\n  data_value = *data_pointer;\n  buffer[0x1e] = data_value;\n  result._1_7_ = (undefined7)((ulong)data_value >> 8);\n  result[0] = 1;\n  *data_pointer = buffer;\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "store_data_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_in_directory_00105870",
                "param_1": "directory",
                "param_2": "searchMode",
                "param_3": "targetFile",
                "iVar1": "comparisonResult",
                "iVar3": "condition",
                "uVar2": "defaultFile"
            },
            "code": "\nlong * findFileInDirectory_00105870(long *directory,int searchMode,undefined8 targetFile)\n\n{\n  int comparisonResult;\n  undefined8 defaultFile;\n  int condition;\n  \n  defaultFile = DAT_0010d638;\n  condition = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultFile = targetFile;\n    condition = searchMode;\n  }\n  if (condition == 3) {\n    for (; *directory != 0; directory = (long *)(*directory + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*directory != (undefined8 *)0x0; directory = (long *)(*directory + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*directory,defaultFile);\n      if (comparisonResult == 0) {\n        if (condition != 2) {\n          return directory;\n        }\n        return (long *)(*directory + 0xf0);\n      }\n    }\n  }\n  return directory;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_file_in_directory_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "pointer",
                "puVar1[2]": "extractedPointer"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *pointer;\n  \n  pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)extractedPointer;\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_file_and_remove_source_00105bc0",
                "param_1": "source_path",
                "param_2": "destination_path",
                "param_3": "flags",
                "param_4": "file_size",
                "uVar1": "copy_result",
                "piVar2": "errno_pointer",
                "pcVar3": "error_message",
                "uVar4": "error_string",
                "uVar5": "copy_success",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copy_file_and_remove_source_00105bc0(char *source_path,char *destination_path,undefined4 flags,undefined8 file_size)\n\n{\n  uint copy_result;\n  int *errno_pointer;\n  char *error_message;\n  undefined8 error_string;\n  ulong copy_success;\n  undefined result [16];\n  \n  if (destination_path == source_path) {\n    copy_success = 0;\n  }\n  else {\n    copy_result = FUN_00105c00(flags);\n    copy_success = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_pointer = __errno_location();\n      error_message = strerror(*errno_pointer);\n      error_string = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(error_string,destination_path,error_message);\n    }\n    unlink(source_path);\n  }\n  result._8_8_ = file_size;\n  result._0_8_ = copy_success;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_file_and_remove_source_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_process_00107650",
                "param_1": "input",
                "uVar1": "result",
                "lVar2": "counter"
            },
            "code": "\nundefined8 check_and_process_00107650(undefined8 input)\n\n{\n  undefined8 result;\n  long counter;\n  \n  counter = FUN_001052a0();\n  if (counter < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    counter = FUN_00105300(input,0);\n    if (counter == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(counter);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010284b",
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_001052a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_process_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_error_00102f1e",
                "unaff_RBP": "file_size",
                "unaff_R12": "file_path",
                "unaff_retaddr": "return_address",
                "piVar1": "error_location",
                "uVar2": "error_message",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16] copy_file_error_00102f1e(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(error_message);\n  unlink(file_path);\n  return_value._0_8_ = file_size & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "unlink",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_set_error_00102fd7",
                "piVar1": "errorPtr",
                "uVar2": "errorString"
            },
            "code": "\nvoid printTimeSetError_00102fd7(void)\n\n{\n  int *errorPtr;\n  undefined8 errorString;\n  \n  errorPtr = __errno_location();\n  strerror(*errorPtr);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_time_set_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "print_ar_when_not_empty_00103ba8"
            },
            "code": "\n\n\nvoid printARWhenNotEmpty_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_ar_when_not_empty_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_001032a8",
                "FUN_00105db0",
                "FUN_00102cd9",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001025a0",
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001052a0",
                "FUN_00102c25",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001031a5",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_001032a8",
                "FUN_00102f96",
                "FUN_0010342d",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "initialize_data_00103ddc",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_00103ddc(undefined8 data)\n\n{\n  FUN_001079c0(DAT_0010d578,data,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "formatArgs",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,__gnuc_va_list formatArgs)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,message,formatArgs);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "message"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "entryList",
                "param_2": "callback",
                "param_3": "archiveNames",
                "param_4": "numArchives",
                "iVar1": "comparisonResult",
                "__format": "errorMessage",
                "lVar2": "currentEntry",
                "plVar3": "tempPtr",
                "uVar4": "tempValue",
                "plVar5": "currentArchive",
                "local_cc": "count",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long entryList,code *callback,undefined8 *archiveNames,int numArchives)\n\n{\n  int comparisonResult;\n  char *errorMessage;\n  long currentEntry;\n  long *tempPtr;\n  undefined8 tempValue;\n  long *currentArchive;\n  int count;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(entryList + 0xf0);\n  if (numArchives == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      currentArchive = *(long **)(entryList + 0xf0);\n      count = 0;\n      for (; currentArchive != (long *)0x0; currentArchive = (long *)currentArchive[0x1e]) {\n        if (*(int *)((long)currentArchive + 0xac) == 0) {\n          currentEntry = *currentArchive;\n          if (currentEntry == 0) {\n            tempPtr = (long *)currentArchive[0x1d];\n            if ((long *)currentArchive[0x1d] == (long *)0x0) {\n              tempPtr = currentArchive;\n            }\n            (**(code **)(tempPtr[1] + 0x1e8))(currentArchive,localBuffer);\n          }\n          else if (((*(byte *)(entryList + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,entryList), currentEntry != 0)) {\n            tempValue = FUN_00105830(*archiveNames,entryList);\n            comparisonResult = filename_cmp(tempValue,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)currentArchive + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      tempValue = *archiveNames;\n      errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMessage,tempValue);\nLAB_0010553e:\n      archiveNames = archiveNames + 1;\n      numArchives = numArchives + -1;\n    } while (numArchives != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010285f",
                "FUN_00105830",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "display_archive_script_error_001031a5",
                "__format": "errorMessageFormat",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid displayArchiveScriptError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorMessageFormat;\n  \n  lineNumber = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "display_archive_script_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103a78",
                "FUN_00102ba1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_0010315d",
                "FUN_00105db0",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00107690",
                "FUN_00105a68",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_buffer_size",
                "puVar3": "buffer_ptr",
                "bVar4": "is_zero"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_buffer_size;\n  undefined4 *buffer_ptr;\n  byte is_zero;\n  \n  is_zero = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_buffer_size = DAT_0010d580 + 8;\n    buffer_size = new_buffer_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_buffer_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)is_zero * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_binary_00103a78",
                "param_1": "binaryHeader",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "libraryPtr",
                "uVar3": "bytesRead",
                "uVar4": "errorMsg",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorMessage",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "expectedTotalBytes",
                "auStack_b8": "stackBuffer",
                "local_88": "fileSize"
            },
            "code": "\n\n\nvoid extractAndPrintBinary_00103a78(undefined8 *binaryHeader)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *libraryPtr;\n  ulong bytesRead;\n  undefined8 errorMsg;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t remainingBytes;\n  char *errorMessage;\n  ulong totalBytesRead;\n  ulong expectedTotalBytes;\n  undefined stackBuffer [48];\n  ulong fileSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  libraryPtr = (undefined8 *)binaryHeader[0x1d];\n  if ((undefined8 *)binaryHeader[0x1d] == (undefined8 *)0x0) {\n    libraryPtr = binaryHeader;\n  }\n  result = (**(code **)(libraryPtr[1] + 0x1e8))(binaryHeader,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*binaryHeader);\n    }\n    totalBytesRead = 0;\n    bfd_seek(binaryHeader,0,0);\n    goto LAB_00103afd;\n  }\n  binaryHeader = (undefined8 *)*binaryHeader;\n  errorMessage = \"internal stat error on %s\";\n  do {\n    errorMsg = dcgettext(0,errorMessage,5);\n    FUN_00107690(errorMsg,binaryHeader);\n    fileSize = expectedTotalBytes;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errnoPtr = __errno_location();\n        errorMessage = strerror(*errnoPtr);\n        FUN_00107690(\"stdout: %s\",errorMessage);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (fileSize <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = fileSize - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,binaryHeader);\n    } while (remainingBytes == bytesRead);\n    errorMessage = \"%s is not a valid archive\";\n    binaryHeader = *(undefined8 **)binaryHeader[0x1d];\n    expectedTotalBytes = fileSize;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "printf",
                "bfd_seek",
                "bfd_bread",
                "__errno_location",
                "free",
                "FUN_00107690",
                "fwrite",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_binary_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001078c0",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_001032a8",
                "FUN_0010342d",
                "FUN_00102f96",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_metadata_001058b0",
                "param_1": "file_parameters",
                "uVar4": "output_stream",
                "__ptr": "filename",
                "__stream": "archive_stream",
                "ppcVar5": "file_descriptor",
                "uVar2": "format_flags",
                "__format": "time_corrupt_format",
                "uStack0000000000000020": "file_mode",
                "in_stack_00000028": "file_uid",
                "in_stack_00000038": "file_size",
                "local_3c": "error_code",
                "uStack_33": "file_type",
                "cStack_32": "file_permission1",
                "cStack_31": "file_permission2"
            },
            "code": "\n\n\nvoid write_archive_metadata_001058b0(undefined8 *file_parameters)\n\n{\n  char cVar1;\n  uint format_flags;\n  int iVar3;\n  undefined8 output_stream;\n  char *time_corrupt_format;\n  void *filename;\n  FILE *archive_stream;\n  char **file_descriptor;\n  uint file_mode;\n  uint file_uid;\n  undefined8 file_size;\n  int error_code [2];\n  undefined file_type;\n  char file_permission1;\n  char file_permission2;\n  \n  output_stream = file_parameters[0x1e];\n  error_code[0] = -1;\n  filename = (void *)xstrdup(*file_parameters);\n  archive_stream = (FILE *)FUN_001057a0(filename,error_code);\n  iVar3 = error_code[0];\n  if (archive_stream != (FILE *)0x0) {\n    DAT_0010d618 = archive_stream;\n    file_descriptor = (char **)bfd_fdopenw(archive_stream,*(undefined8 *)file_parameters[1],error_code[0]);\n    if (file_descriptor != (char **)0x0) {\n      DAT_0010d5e0 = file_descriptor;\n      bfd_set_format(file_descriptor,2);\n      format_flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)file_descriptor + 0x49) & 0xfffffff7;\n      *(char *)((long)file_descriptor + 0x49) = (char)format_flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)file_parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)file_descriptor + 0x49) = (byte)format_flags | 0x10;\n        }\n        cVar1 = bfd_set_archive_head(file_descriptor,output_stream);\n        if (cVar1 != '\\0') break;\n        format_flags = FUN_00107c10(filename);\nLAB_00102d37:\n        *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      cVar1 = bfd_close(file_descriptor);\n      if (cVar1 == '\\0') {\n        FUN_00107c10(filename);\n        time_corrupt_format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,time_corrupt_format);\n        format_flags = file_mode & 0xf000;\n        if (format_flags == 0x4000) {\n          file_type = 100;\n        }\n        else if (format_flags == 0xa000) {\n          file_type = 0x6c;\n        }\n        else if (format_flags == 0x6000) {\n          file_type = 0x62;\n        }\n        else if (format_flags == 0x2000) {\n          file_type = 99;\n        }\n        else if (format_flags == 0xc000) {\n          file_type = 0x73;\n        }\n        else {\n          file_type = 0x70;\n          if (format_flags != 0x1000) {\n            file_type = 0x2d;\n          }\n        }\n        file_permission1 = (-((_file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        file_permission2 = (-((_file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(archive_stream,\"%s %ld/%ld %6lu %s \",&file_permission1,_file_mode >> 0x20,\n                (ulong)file_uid,file_size,&stack0xffffffffffffffd8,\n                _file_mode & 0xffffffff);\n        fputs(*file_descriptor,archive_stream);\n        if ((char)file_parameters != '\\0') {\n          if ((*(byte *)((long)file_descriptor + 0x49) & 0x10) == 0) {\n            if (file_descriptor[0xb] != (char *)0x0) {\n              fprintf(archive_stream,\" 0x%lx\");\n            }\n          }\n          else if (file_descriptor[0xc] != (char *)0x0) {\n            fprintf(archive_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,archive_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(file_parameters);\n      iVar3 = FUN_00105bc0(archive_stream,filename,iVar3);\n      if (iVar3 == 0) {\n        free(filename);\n        free(archive_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    FUN_00107c10(filename);\n  }\n  output_stream = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(output_stream);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107c10",
                "close",
                "bfd_fdopenw",
                "FUN_001057a0",
                "xstrdup",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "write_archive_metadata_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_00102bf5"
            },
            "code": "\nvoid cleanup_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105db0",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105af0",
                "FUN_00105300",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "uVar4": "errorMsg",
                "local_38": "lastModifiedTime",
                "uStack_34": "lastAccessTime",
                "uStack_30": "createTime",
                "uStack_2c": "fileFlags",
                "local_28": "filePermissions"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *piVar2;\n  char *pcVar3;\n  undefined8 errorMsg;\n  undefined4 lastModifiedTime;\n  undefined4 lastAccessTime;\n  undefined4 createTime;\n  undefined4 fileFlags;\n  undefined4 filePermissions;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  filePermissions = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  lastModifiedTime = *(undefined4 *)(fileInfo + 0x48);\n  lastAccessTime = *(undefined4 *)(fileInfo + 0x4c);\n  createTime = *(undefined4 *)(fileInfo + 0x50);\n  fileFlags = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&lastModifiedTime,0);\n  if (result != 0) {\n    piVar2 = __errno_location();\n    pcVar3 = strerror(*piVar2);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(errorMsg,filePath,pcVar3);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "process_path_00105a20",
                "param_1": "path",
                "pcVar1": "basePath",
                "pcVar2": "currentDir",
                "uVar3": "baseName",
                "uVar4": "errorMsg",
                "pFVar5": "filePtr",
                "sVar6": "strLen"
            },
            "code": "\nvoid processPath_00105a20(char *path)\n\n{\n  char *basePath;\n  char *currentDir;\n  undefined8 baseName;\n  undefined8 errorMsg;\n  FILE *filePtr;\n  size_t strLen;\n  \n  basePath = DAT_0010d5e8;\n  DAT_0010d618 = path;\n  if (*path == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    basePath = DAT_0010d618;\n    errorMsg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(errorMsg,basePath,baseName);\n    DAT_0010d618 = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (strLen = strlen(DAT_0010d5e8), strLen != 0)) {\n        if (basePath[strLen - 1] == '/') {\n          DAT_0010d618 = (char *)concat(basePath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(basePath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePtr = fopen(DAT_0010d618,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentDir = path;\n    if ((*path == '.') && (currentDir = path + 1, path[1] == '.')) {\n      currentDir = path + 2;\n      if ((path[2] == '/') || (path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentDir != '\\0' && (*currentDir != '/')); currentDir = currentDir + 1) {\n    }\n    for (; path = currentDir, *currentDir == '/'; currentDir = currentDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "process_path_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_and_set_error_code_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errorLocation",
                "iVar1": "errorCode"
            },
            "code": "\nundefined8 closeAndSetErrorCode_00102f55(void)\n\n{\n  int errorCode;\n  int *errorLocation;\n  int fileDescriptor;\n  \n  errorLocation = __errno_location();\n  errorCode = *errorLocation;\n  close(fileDescriptor);\n  *errorLocation = errorCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_and_set_error_code_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_filepath_001057a0",
                "param_1": "path",
                "param_2": "file_descriptor",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "substr_length",
                "lVar4": "index",
                "lVar5": "path_length",
                "pcVar6": "extracted_path",
                "bVar7": "is_slash",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_filepath_001057a0(char *path,int *file_descriptor,undefined8 arg_1,undefined8 arg_2)\n\n{\n  int result;\n  char *last_slash;\n  long substr_length;\n  long index;\n  long path_length;\n  char *extracted_path;\n  byte is_slash;\n  undefined return_value [16];\n  \n  is_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    substr_length = 0;\n  }\n  else {\n    path_length = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(path_length + 0xb);\n    substr_length = path_length + 1;\n    extracted_path = last_slash;\n    for (index = path_length; index != 0; index = index + -1) {\n      *extracted_path = *path;\n      path = path + (ulong)is_slash * -2 + 1;\n      extracted_path = extracted_path + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[path_length] = '/';\n  }\n  *(undefined8 *)(last_slash + substr_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + substr_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    extracted_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    extracted_path = last_slash;\n  }\n  return_value._8_8_ = arg_2;\n  return_value._0_8_ = extracted_path;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "mkstemp",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "extract_filepath_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "fileAttributes",
                "param_20": "fileSize",
                "param_22": "fileLastModified",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isExecutable",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "readPermission",
                "cStack0000000000000017": "writePermission",
                "param_9": "executePermission",
                "cStack0000000000000019": "readPermissionGroup",
                "cStack000000000000001a": "writePermissionGroup",
                "cStack000000000000001b": "executePermissionGroup",
                "cStack000000000000001c": "readPermissionOther",
                "cStack000000000000001d": "writePermissionOther",
                "cStack000000000000001e": "executePermissionOther",
                "uStack000000000000001f": "padding"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *__format;\n  uint uVar1;\n  char **fileData;\n  FILE *outputFile;\n  char isExecutable;\n  undefined fileType;\n  char readPermission;\n  char writePermission;\n  char executePermission;\n  char readPermissionGroup;\n  char writePermissionGroup;\n  char executePermissionGroup;\n  char readPermissionOther;\n  char writePermissionOther;\n  char executePermissionOther;\n  undefined padding;\n  uint fileAttributes;\n  uint uStack000000000000006c;\n  uint fileSize;\n  undefined8 fileLastModified;\n  \n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar1 = fileAttributes & 0xf000;\n  if (uVar1 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar1 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  readPermission = (-((fileAttributes & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermission = (-((fileAttributes & 0x80) == 0) & 0xb6U) + 0x77;\n  executePermission = (-((fileAttributes & 0x40) == 0) & 0xb5U) + 0x78;\n  readPermissionGroup = (-((fileAttributes & 0x20) == 0) & 0xbbU) + 0x72;\n  writePermissionGroup = (-((fileAttributes & 0x10) == 0) & 0xb6U) + 0x77;\n  executePermissionGroup = (-((fileAttributes & 8) == 0) & 0xb5U) + 0x78;\n  readPermissionOther = (-((fileAttributes & 4) == 0) & 0xbbU) + 0x72;\n  writePermissionOther = (-((fileAttributes & 2) == 0) & 0xb6U) + 0x77;\n  executePermissionOther = (-((fileAttributes & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileAttributes & 0x800) != 0) {\n    if (executePermission == 'x') {\n      executePermission = 's';\n    }\n    else {\n      executePermission = 'S';\n    }\n  }\n  if ((fileAttributes & 0x400) != 0) {\n    if (executePermissionGroup == 'x') {\n      executePermissionGroup = 's';\n    }\n    else {\n      executePermissionGroup = 'S';\n    }\n  }\n  if ((fileAttributes & 0x200) != 0) {\n    if (executePermissionOther == 'x') {\n      executePermissionOther = 't';\n    }\n    else {\n      executePermissionOther = 'T';\n    }\n  }\n  padding = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)uStack000000000000006c,\n          (ulong)fileSize,fileLastModified,&stack0x00000020,(ulong)fileAttributes);\n  fputs(*fileData,outputFile);\n  if (isExecutable != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputs",
                "fprintf",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001031cf",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_archived_files_00105300",
                "param_1": "filename",
                "param_2": "archivedFiles",
                "plVar1": "archivedFilePtr",
                "pcVar2": "pluginName",
                "bVar3": "isThinLibrary",
                "cVar4": "formatCheckResult",
                "iVar5": "statResult",
                "uVar6": "errorMessage",
                "uVar7": "messageArgument",
                "piVar8": "errnoLocation",
                "lVar9": "nextArchivedFile",
                "puVar10": "openwResult",
                "local_b0": "fileStatus",
                "local_a8": "statResultStruct"
            },
            "code": "\n\n\nundefined8 * extractArchivedFiles_00105300(char *filename,undefined8 *archivedFiles)\n\n{\n  long *archivedFilePtr;\n  char *pluginName;\n  byte isThinLibrary;\n  char formatCheckResult;\n  int statResult;\n  undefined8 errorMessage;\n  undefined8 messageArgument;\n  int *errnoLocation;\n  long nextArchivedFile;\n  undefined8 *openwResult;\n  undefined8 fileStatus;\n  stat statResultStruct;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  statResult = stat(filename,&statResultStruct);\n  pluginName = DAT_0010d618;\n  if (statResult == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archivedFiles != (undefined8 *)0x0)) {\n      openwResult = (undefined8 *)FUN_00102710();\n      return openwResult;\n    }\n    archivedFiles = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((archivedFiles != (undefined8 *)0x0) && (formatCheckResult = bfd_set_format(archivedFiles,2), formatCheckResult != '\\0')) &&\n       (formatCheckResult = bfd_close(archivedFiles), formatCheckResult != '\\0')) {\n      pluginName = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(filename);\n  do {\n    isThinLibrary = *(byte *)((long)archivedFiles + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        messageArgument = *archivedFiles;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(errorMessage,messageArgument);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      messageArgument = *archivedFiles;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(errorMessage,messageArgument);\nLAB_001027cb:\n      FUN_00107c20(filename);\n      statResult = bfd_get_error();\n      if (statResult == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(fileStatus);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePtr = archivedFiles + 0x1e;\n      for (nextArchivedFile = bfd_openr_next_archived_file(archivedFiles,0); nextArchivedFile != 0;\n          nextArchivedFile = bfd_openr_next_archived_file(archivedFiles,nextArchivedFile)) {\n        *archivedFilePtr = nextArchivedFile;\n        archivedFilePtr = (long *)(nextArchivedFile + 0xf0);\n      }\n      *archivedFilePtr = 0;\n      statResult = bfd_get_error();\n      if (statResult == 9) {\n        return archivedFiles;\n      }\n      do {\n        FUN_00107c10(filename);\nLAB_00102826:\n        messageArgument = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(messageArgument,filename);\n        pluginName = filename;\nLAB_001053be:\n        DAT_0010d618 = pluginName;\n        archivedFiles = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (archivedFiles == (undefined8 *)0x0);\n      formatCheckResult = bfd_check_format_matches(archivedFiles,2,&fileStatus);\n      if (formatCheckResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (nextArchivedFile = bfd_openr_next_archived_file(archivedFiles,0), nextArchivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "FUN_00103bd1",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_close",
                "__errno_location",
                "FUN_00107920",
                "bfd_set_error",
                "FUN_00107690",
                "stat",
                "fprintf",
                "bfd_openw",
                "FUN_00107c20",
                "FUN_00102710",
                "perror",
                "FUN_0010315d",
                "xexit",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte",
                "puVar2": "ptrUint",
                "bVar3": "byteVar",
                "plVar4": "ptrLong",
                "puVar5": "ptrUndef8",
                "uVar6": "undef4Var",
                "uVar7": "undef4Var",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "ptrToPtrChar",
                "piVar11": "ptrInt",
                "puVar12": "ptrUndef",
                "bVar13": "byteVar2",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "argcVar"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptrByte;\n  uint *ptrUint;\n  byte byteVar;\n  long *ptrLong;\n  undefined8 *ptrUndef8;\n  undefined4 undef4Var;\n  undefined4 undef4Var;\n  bool boolVar1;\n  bool boolVar2;\n  char **ptrToPtrChar;\n  int *ptrInt;\n  undefined *ptrUndef;\n  byte byteVar2;\n  char charVar;\n  int intVar;\n  uint argcVar;\n  undefined4 uVar17;\n  FILE *pFVar18;\n  size_t sVar19;\n  size_t sVar20;\n  byte *__ptr;\n  long *plVar21;\n  FILE *pFVar22;\n  char *pcVar23;\n  long lVar24;\n  ulong uVar25;\n  undefined8 *ptrUint6;\n  undefined8 uVar27;\n  FILE *pFVar28;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long lVar34;\n  long lVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  pFVar18 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  pFVar22 = argv;\n  do {\n    argcVar = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)argcVar;\n    local_130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)pFVar22;\n    if (**(char **)(&pFVar22->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        plVar21 = *(long **)pFVar22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,plVar21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&pFVar22->_flags + (long)unaff_RBP * 2) + 1;\n      intVar = stat(pcVar39,(stat *)local_c8);\n      if (-1 < intVar) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          plVar21 = *(long **)pFVar22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        pFVar18 = fopen(pcVar39,\"r\");\n        if (pFVar18 != (FILE *)0x0) {\n          intVar = fseek(pFVar18,0,2);\n          if (((intVar != -1) && (sVar19 = ftell(pFVar18), sVar19 != 0xffffffffffffffff)) &&\n             (intVar = fseek(pFVar18,0,0), intVar != -1)) {\n            local_118 = (byte *)xmalloc(sVar19 + 1);\n            sVar20 = fread(local_118,1,sVar19,pFVar18);\n            if ((sVar19 == sVar20) || (intVar = ferror(pFVar18), intVar == 0)) {\n              local_118[sVar20] = 0;\n              byteVar2 = *local_118;\n              pbyteVar3 = local_118;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sVar19 = strlen((char *)local_118);\n              __ptr = (byte *)xmalloc(sVar19 + 1);\n              pFVar28 = (FILE *)0x0;\n              intVar = 0;\n              boolVar2 = false;\n              bVar47 = false;\n              boolVar1 = false;\n              local_100 = 0;\n              pbyteVar3 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)local_100)) {\n                  if (pFVar28 == (FILE *)0x0) {\n                    intVar = 8;\n                    pFVar28 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&pFVar28->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    pFVar28 = (FILE *)xrealloc(pFVar28,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&pFVar28->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&pFVar28->_flags + local_100 * 8);\n                }\n                byteVar2 = *pbyteVar3;\n                pbyteVar8 = __ptr;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | bVar47))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *pbyteVar8 = byteVar2;\n                    pbyteVar8 = pbyteVar8 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar3;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar2 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar8 = byteVar2;\n                      pbyteVar8 = pbyteVar8 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  ptrByte = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar2 = *ptrByte;\n                }\nLAB_0010606f:\n                *pbyteVar8 = 0;\n                plVar21 = (long *)xstrdup(__ptr);\n                *ppcVar31 = (char *)plVar21;\n                *(undefined8 *)(pFVar28->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar2 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                local_100 = local_100 + 1;\n                if (byteVar2 == 0) {\n                  free(__ptr);\n                  if (pFVar22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(pFVar18);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(argcVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        argcVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        argcVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptrUndef = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)argcVar;\n        if ((char)argcVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            ptrUndef = PTR_DAT_0010d2e0;\n            intVar = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar + 1;\n            *(code **)(ptrUndef + (long)intVar * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            ptrUint6 = (undefined8 *)malloc(0x110);\n            if (ptrUint6 != (undefined8 *)0x0) {\n              *ptrUint6 = ptrUndef;\n              *(undefined4 *)(ptrUint6 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)ptrUint6;\n              goto LAB_0010632b;\n            }\n          }\n          lVar24 = 1;\n          do {\n            lVar35 = lVar24;\n            intVar = (int)pcVar46;\n            if (intVar <= (int)lVar35) break;\n            charVar = FUN_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            lVar24 = lVar35 + 1;\n          } while (charVar != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = intVar - ((int)lVar35 + -1);\n          pFVar18 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar = getopt_long(pFVar18,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar != -1)\n            {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = argcVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                argcVar = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | argcVar);\n              }\n            }\n            while (lVar24 = FUN_001052a0(pcVar39), lVar24 < 1) {\n              argcVar = 1;\nLAB_001071c4:\n              ptrInt = (int *)pcVar43;\n              pcVar43 = (char *)((long)ptrInt + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | argcVar);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)ptrInt * 8 + -0x7b);\n            }\n            intVar = open(pcVar39,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(pcVar39);\nLAB_0010737f:\n              FUN_00107c10(pcVar39);\nLAB_00107387:\n              FUN_00107c20(pcVar39);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                ptrUint = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *ptrUint = *ptrUint | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                argcVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            uVar27 = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(uVar27,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            sVar19 = strlen(pcVar39);\n            if ((sVar19 < 6) ||\n               (intVar = filename_cmp(pcVar39 + (sVar19 - 6),\"ranlib\"), intVar != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          pFVar22 = (FILE *)unaff_RBP;\n          pFVar28 = pFVar18;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)argcVar);\nLAB_001063a3:\n          pFVar22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            sVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar = (int)sVar19 + (int)pFVar18;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            uVar17 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = uVar17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            local_128 = (FILE *)((long)pcVar46 + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(local_118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(local_118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(local_118);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar;\n                        pcVar23 = (char *)xstrdup(local_118);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = pcVar23;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            lVar24 = (long)(int)pFVar18;\n            ptrInt = (int *)pcVar46 + lVar24 * 2;\n            if (local_128 < ptrInt) {\n              uVar25 = lVar24 * 8 - 0x11;\n              if ((uVar25 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < ptrInt) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < ptrInt &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < ptrInt)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < ptrInt)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < ptrInt)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  ptrToPtrChar = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < ptrInt;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *ptrToPtrChar = *ppcVar31;\n                    ptrToPtrChar = ptrToPtrChar + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undef4Var = *(undefined4 *)((long)pcVar46 + 0x18);\n                undef4Var = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (uVar25 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uVar17;\n                *(undefined4 *)(ppcVar32 + 1) = undef4Var;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undef4Var;\n                uVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undef4Var = *(undefined4 *)((long)pcVar46 + 0x28);\n                undef4Var = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                uVar25 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uVar17;\n                *(undefined4 *)(ppcVar32 + 3) = undef4Var;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undef4Var;\n                if (uVar25 != 2) {\n                  uVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undef4Var = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undef4Var = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uVar17;\n                  *(undefined4 *)(ppcVar32 + 5) = undef4Var;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undef4Var;\n                  if (uVar25 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      uVar17 = *(undefined4 *)(pcVar39 + 4);\n                      undef4Var = *(undefined4 *)(pcVar39 + 8);\n                      undef4Var = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uVar17;\n                      *(undefined4 *)(ppcVar31 + 1) = undef4Var;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undef4Var;\n                      uVar41 = uVar42;\n                    } while (uVar42 != uVar25);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + lVar24 + -2;\n            }\n            pFVar18 = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            argcVar = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,ppuVar36,0);\n            unaff_RBP = (char *)pFVar22;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            pFVar28 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)pFVar28;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          pFVar22 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)pFVar18 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            argcVar = (int)pFVar18 - (_optind + -1);\n            pFVar18 = (FILE *)(ulong)argcVar;\n            _optind = 0;\n            if (1 < (int)argcVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)local_130 & 0xff);\n          argcVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              pFVar28 = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  uVar17 = FUN_00107650();\n                    \n                  xexit(uVar17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    uVar27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(uVar27);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar + 1);\n                  lVar24 = strtol(*(char **)((long)ppuVar36 + (long)intVar * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)lVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              lVar24 = (long)(int)unaff_RBP;\n              pFVar22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + lVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              pFVar22 = (FILE *)((long)ppuVar36 + (lVar24 + 1) * 2 * 4);\n              if (*(FILE **)pFVar22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                pFVar22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                pFVar18 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)pFVar18;\n                  pFVar18 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + lVar24 * 2 * 4) + (long)pFVar18 * 2) !=\n                         0);\n              }\n              ptrUint6 = (undefined8 *)FUN_00105300();\n              pFVar18 = pFVar22;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrUint6 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)pFVar22;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(ptrUint6,FUN_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sVar19 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sVar19 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",ptrUint6);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  lVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (lVar24 != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    pFVar28 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (pFVar28 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    lVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (lVar24 == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    local_130 = (FILE *)((long)(intVar + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      lVar24 = 0;\n                    }\n                    else {\n                      uVar17 = *(undefined4 *)&pFVar22->field_0x4;\n                      *(int *)unaff_RBP = pFVar22->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = uVar17;\n                      lVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&pFVar22->_flags;\n                        pFVar22 = (FILE *)((long)pFVar22 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + lVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      pFVar22 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)pFVar22;\n                if (pFVar22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                pFVar18 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)pFVar22;\n                if ((pFVar22 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(ptrUint6,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(ptrUint6,FUN_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(ptrUint6,FUN_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (pFVar22 == (FILE *)0x0) break;\nLAB_00106afb:\n                pFVar18 = (FILE *)(ptrUint6 + 0x1e);\n                do {\n                  unaff_R12 = pFVar18;\n                  if (*(FILE **)pFVar22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(ptrUint6);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    plVar21 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)pFVar22;\n                    if (plVar21 == (long *)0x0) {\n                      uVar27 = *ptrUint6;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(uVar30,pcVar46,uVar27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    lVar24 = *plVar21;\n                    uVar27 = FUN_00105830(pcVar46,ptrUint6);\n                    intVar = filename_cmp(uVar27,lVar24);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)plVar21[0x1e];\n                  pplVar29 = (long **)FUN_00105870(pFVar18,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  ptrLong = *pplVar29;\n                  *pplVar29 = plVar21;\n                  plVar21[0x1e] = (long)ptrLong;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)pFVar22);\n                  }\n                  pFVar22 = (FILE *)&pFVar22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uVar17 = bfd_get_error();\n        pFVar22 = (FILE *)bfd_errmsg(uVar17);\n        uVar27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = FUN_00107690(uVar27,\"x86_64-pc-linux-gnu\",pFVar22);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          pFVar28 = (FILE *)pcVar46;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            argcVar = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)pFVar22;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)pFVar22;\nLAB_00106803:\n        uVar27 = dcgettext(0,pcVar39,5);\n        FUN_00107690(uVar27);\nLAB_00106814:\n        intVar = (int)pcVar46;\n        pFVar28 = (FILE *)xmalloc(8);\n        *(long **)pFVar28 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            lVar24 = 1;\n            do {\n              intVar = (int)lVar24;\n              lVar35 = lVar24 * 2;\n              lVar24 = lVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          pFVar22 = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          plVar21 = *(long **)pcVar43;\n          lVar24 = 0;\n          while (plVar21 != (long *)0x0) {\n            uVar27 = xstrdup();\n            *(undefined8 *)((long)&pFVar22->_flags + lVar24) = uVar27;\n            plVar21 = *(long **)((char *)((long)pcVar43 + 0x83) + lVar24 + -0x7b);\n            lVar24 = lVar24 + 8;\n          }\n          *(undefined8 *)((long)&pFVar22->_flags + lVar24) = 0;\nLAB_0010610a:\n          intVar = (int)pcVar46;\n          pcVar43 = (char *)pFVar22;\n          if (*(long **)pFVar28 == (long *)0x0) goto LAB_00106a80;\n          lVar24 = 0;\n          do {\n            lVar34 = lVar24 + 1;\n            lVar35 = lVar24 * 8;\n            lVar24 = lVar34;\n          } while (*(long *)(pFVar28->_shortbuf + lVar35 + -0x7b) != 0);\n          local_108 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          local_108 = 0;\n        }\n        lVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + lVar24));\n        pFVar22 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar) * 8);\n        uVar44 = intVar + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&pFVar22->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&pFVar22->_IO_read_ptr + (long)local_130),\n                (long)(int)(intVar - argcVar) << 3);\n        memcpy((void *)((long)&local_130->_flags + (long)&pFVar22->_flags),pFVar28,local_108);\n        free(pFVar28);\n        free(local_118);\n        fclose(pFVar18);\n        argcVar = (int)local_128 + 1;\n        unaff_R12 = local_130;\n        pcVar43 = (char *)pFVar22;\n        local_130 = pFVar28;\n        if ((int)argcVar < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    argcVar = argcVar + 1;\n    local_128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)argcVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)pFVar22;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  uVar27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(uVar27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)pFVar18 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVar = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  ptrUndef8 = ptrUint6;\n  if (intVar == 0) {\n    *(byte *)((long)ptrUint6 + 0x49) = *(byte *)((long)ptrUint6 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      plVar21 = ptrUndef8 + 0x1e;\n      if ((undefined8 *)*plVar21 == (undefined8 *)0x0) break;\n      uVar27 = *(undefined8 *)*plVar21;\n      uVar30 = FUN_00105830(*(FILE **)unaff_RBP,ptrUint6);\n      intVar = filename_cmp(uVar30,uVar27);\n      if ((intVar == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *plVar21 = *(long *)(*plVar21 + 0xf0);\n        pFVar18 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      ptrUndef8 = (undefined8 *)*plVar21;\n    }\n    if (DAT_0010d60c != 0) {\n      pFVar22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,pFVar22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_close",
                "FUN_00105300",
                "FUN_00105830",
                "stat",
                "memmove",
                "bfd_init",
                "FUN_00103a78",
                "strlen",
                "getopt_long",
                "ferror",
                "FUN_00107890",
                "xexit",
                "FUN_001075e0",
                "FUN_00105870",
                "FUN_00107c10",
                "strtol",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_errmsg",
                "bfd_find_target",
                "bfd_set_error",
                "bindtextdomain",
                "setlocale",
                "fprintf",
                "FUN_00107c20",
                "bfd_bwrite",
                "fseek",
                "bfd_fdopenr",
                "textdomain",
                "bfd_create",
                "printf",
                "xrealloc",
                "FUN_00107730",
                "fclose",
                "FUN_00107740",
                "FUN_0010342d",
                "xstrdup",
                "strcmp",
                "FUN_00103e95",
                "FUN_00105570",
                "fileno",
                "fopen",
                "FUN_00107cc0",
                "lbasename",
                "bfd_plugin_set_program_name",
                "FUN_0010394a",
                "filename_cmp",
                "FUN_001058b0",
                "bfd_plugin_set_plugin",
                "free",
                "isatty",
                "malloc",
                "bfd_set_format",
                "FUN_00107650",
                "dcgettext",
                "memcpy",
                "xmalloc",
                "FUN_00103bd1",
                "FUN_00105480",
                "FUN_00107920",
                "fread",
                "bfd_make_readable",
                "FUN_001052a0",
                "FUN_00107690",
                "xmalloc_set_program_name",
                "bfd_make_writable",
                "bfd_set_error_program_name",
                "open",
                "FUN_00107640",
                "bfd_set_default_target",
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "defaultFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 defaultFormat;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  defaultFormat = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,defaultFormat);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatList);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "load_library_00102710",
                "plVar1": "archived_files",
                "cVar2": "has_valid_format",
                "bVar3": "is_thin_library",
                "iVar4": "error_code",
                "lVar5": "file",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "library_handle",
                "unaff_RBP": "initial_rbp",
                "in_stack_00000008": "stack_argument"
            },
            "code": "\n\n\nundefined8 * load_library_00102710(void)\n\n{\n  long *archived_files;\n  char has_valid_format;\n  byte is_thin_library;\n  int error_code;\n  long file;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *library_handle;\n  undefined8 initial_rbp;\n  undefined8 stack_argument;\n  \n  file = bfd_openr();\n  if (file != 0) {\n    has_valid_format = bfd_check_format(file,1);\n    if (has_valid_format != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file + 8);\n    }\n    bfd_close(file);\n  }\n  library_handle = (undefined8 *)bfd_openw();\n  if (((library_handle != (undefined8 *)0x0) && (has_valid_format = bfd_set_format(library_handle,2), has_valid_format != '\\0')) &&\n     (has_valid_format = bfd_close(library_handle), has_valid_format != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    is_thin_library = *(byte *)((long)library_handle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        library_name = *library_handle;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      library_name = *library_handle;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nLAB_001027cb:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(stack_argument);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_files = library_handle + 0x1e;\n      for (file = bfd_openr_next_archived_file(library_handle,0); file != 0;\n          file = bfd_openr_next_archived_file(library_handle,file)) {\n        *archived_files = file;\n        archived_files = (long *)(file + 0xf0);\n      }\n      *archived_files = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return library_handle;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nLAB_001053b7:\n        DAT_0010d618 = initial_rbp;\n        library_handle = (undefined8 *)bfd_openr();\n      } while (library_handle == (undefined8 *)0x0);\n      has_valid_format = bfd_check_format_matches(library_handle,2,&stack0x00000008);\n      if (has_valid_format == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file = bfd_openr_next_archived_file(library_handle,0), file == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "load_library_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompress_and_process_files_00103e95",
                "pplVar1": "fileDataPointer",
                "cVar2": "charValue",
                "ppFVar3": "filePointerPointer",
                "pFVar4": "filePointer",
                "plVar5": "fileSizePointer",
                "uVar6": "fileSize",
                "pbVar7": "bytePointer",
                "iVar8": "intVar",
                "pcVar10": "charPointer",
                "uVar11": "uintVar",
                "iVar9": "intVar2",
                "plVar12": "fileSizePointer2",
                "sVar13": "size",
                "pvVar14": "voidPointer",
                "pcVar15": "charPointer1",
                "pcVar16": "charPointer2",
                "lVar17": "longVar",
                "lVar18": "loopCounter",
                "lVar21": "loopCounter2",
                "lVar31": "loopCounter3",
                "auVar40": "temporaryVariable1",
                "auVar41": "temporaryVariable2",
                "local_828": "bufferPointer",
                "local_820": "oldBufferPointer",
                "local_818": "bufferSize",
                "local_810": "filePathsArray",
                "local_800": "fileCount",
                "local_7fc": "resultValue",
                "local_7f8": "temporaryBufferPointer",
                "local_7d0": "fileStats",
                "local_740": "buffer",
                "local_678": "fileNamesArray"
            },
            "code": "\n\n\nvoid decompressAndProcessFiles_00103e95(void)\n\n{\n  long **fileDataPointer;\n  char charValue;\n  FILE **filePointerPointer;\n  FILE *filePointer;\n  long *fileSizePointer;\n  undefined8 fileSize;\n  byte *bytePointer;\n  int intVar;\n  char *charPointer;\n  undefined8 uintVar;\n  int intVar2;\n  long *fileSizePointer2;\n  size_t size;\n  void *voidPointer;\n  char *charPointer1;\n  char *charPointer2;\n  long longVar;\n  long loopCounter;\n  ulong uVar19;\n  uint uVar20;\n  long loopCounter2;\n  undefined8 *puVar22;\n  undefined8 *puVar23;\n  uint uVar24;\n  int iVar25;\n  ulong uVar26;\n  char **ppcharValue7;\n  bool bVar28;\n  char **ppcharValue9;\n  byte bVar30;\n  long loopCounter3;\n  byte *pbVar32;\n  byte *pbVar33;\n  int *piVar34;\n  byte *pbVar35;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined temporaryVariable1 [16];\n  undefined temporaryVariable2 [16];\n  char *bufferPointer;\n  char *oldBufferPointer;\n  long bufferSize;\n  char **filePathsArray;\n  int fileCount;\n  uint resultValue;\n  byte *temporaryBufferPointer;\n  stat fileStats;\n  char buffer [200];\n  char *fileNamesArray [201];\n  \n  bVar39 = 0;\n  loopCounter = 0;\n  DAT_0010d550 = -2;\n  ppcharValue9 = fileNamesArray;\n  fileCount = 0;\n  bufferPointer = buffer;\n  bufferSize = 200;\n  oldBufferPointer = bufferPointer;\n  filePathsArray = ppcharValue9;\nLAB_00103ee9:\n  *bufferPointer = (char)loopCounter;\n  if (oldBufferPointer + bufferSize + -1 <= bufferPointer) {\n    loopCounter2 = (long)bufferPointer - (long)oldBufferPointer;\n    longVar = loopCounter2 + 1;\n    if (bufferSize < 10000) {\n      loopCounter3 = bufferSize * 2;\n      bufferSize = 10000;\n      if (loopCounter3 < 0x2711) {\n        bufferSize = loopCounter3;\n      }\n      charPointer = (char *)malloc(bufferSize * 9 + 7);\n      if (charPointer != (char *)0x0) {\n        loopCounter3 = longVar * 8;\n        charPointer1 = oldBufferPointer;\n        charPointer2 = charPointer;\n        for (; longVar != 0; longVar = longVar + -1) {\n          *charPointer2 = *charPointer1;\n          charPointer1 = charPointer1 + (ulong)bVar39 * -2 + 1;\n          charPointer2 = charPointer2 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(charPointer + bufferSize);\n        ppcharValue9 = ppcVar38;\n        for (; loopCounter3 != 0; loopCounter3 = loopCounter3 + -1) {\n          *(undefined *)ppcharValue9 = *(undefined *)filePathsArray;\n          filePathsArray = (char **)((long)filePathsArray + (ulong)bVar39 * -2 + 1);\n          ppcharValue9 = (char **)((long)ppcharValue9 + (ulong)bVar39 * -2 + 1);\n        }\n        if (oldBufferPointer != buffer) {\n          free(oldBufferPointer);\n        }\n        bufferPointer = charPointer + loopCounter2;\n        ppcharValue9 = ppcVar38 + loopCounter2;\n        oldBufferPointer = charPointer;\n        filePathsArray = ppcVar38;\n        if (charPointer + bufferSize + -1 <= bufferPointer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    charPointer = oldBufferPointer;\n    if (oldBufferPointer == buffer) {\n      return;\n    }\nLAB_00105265:\n    free(charPointer);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)loopCounter;\n  if (iVar37 == 3) goto LAB_0010524c;\n  charValue = (&DAT_0010a200)[iVar37];\n  if (charValue != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uintVar = FUN_001033d6(DAT_0010d590);\n          *puVar22 = uintVar;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pbVar32 = DAT_0010d5b0;\n      pbVar35 = DAT_0010d5b0;\n      uVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)uVar20;\n      uVar26 = (ulong)resultValue;\n      bVar28 = false;\n      do {\n        bVar30 = (&DAT_0010ab00)[*pbVar35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          bVar28 = true;\n          uVar26 = uVar19 & 0xffffffff;\n          temporaryBufferPointer = pbVar35;\n        }\n        while( true ) {\n          intVar = (int)uVar19;\n          loopCounter = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)intVar * 2) + (uint)bVar30);\n          if (intVar == *(short *)(&DAT_0010a440 + loopCounter * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)intVar * 2)) {\n            bVar30 = (&DAT_0010a7c0)[(int)(uint)bVar30];\n          }\n        }\n        pbVar35 = pbVar35 + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + loopCounter * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      resultValue = (uint)uVar26;\n      pbVar33 = pbVar32;\n      if (bVar28) {\n        DAT_0010d5b8 = temporaryBufferPointer;\n        DAT_0010d5c0 = resultValue;\n      }\nLAB_0010419f:\n      intVar = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (intVar == 0) {\n        intVar = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pbVar35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pbVar35 - (int)pbVar33;\n      DAT_0010d588 = *pbVar35;\n      DAT_0010d5b0 = pbVar35;\n      DAT_0010d5c8 = pbVar33;\n      *pbVar35 = 0;\nLAB_001041f0:\n      pbVar32 = DAT_0010d5c8;\n      loopCounter = DAT_0010d5a0;\n      switch(intVar) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      loopCounter = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uVar20 = charValue + iVar37;\n    if ((0x22 < uVar20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uVar20])) goto LAB_001049db;\n    charValue = (&DAT_0010a060)[(int)uVar20];\n    loopCounter = (long)charValue;\n    if (charValue < '\\x01') {\n      iVar37 = -(int)charValue;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    fileCount = fileCount + -1 + (uint)(fileCount == 0);\n    ppcharValue9 = ppcharValue9 + 1;\n    *ppcharValue9 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)loopCounter];\n  if ((&DAT_0010a020)[(int)loopCounter] == '\\0') {\n    if (fileCount == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[loopCounter] != -0xe) &&\n             (uVar20 = (int)(char)(&DAT_0010a200)[loopCounter] + 1, uVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uVar20] == '\\x01')) &&\n           (loopCounter = (long)(char)(&DAT_0010a060)[(int)uVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uVar20])) goto LAB_00105227;\n        if (oldBufferPointer == bufferPointer) goto LAB_0010524c;\n        bufferPointer = bufferPointer + -1;\n        ppcharValue9 = ppcharValue9 + -1;\n        loopCounter = (long)*bufferPointer;\n      } while( true );\n    }\n    if (fileCount != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uintVar = DAT_0010d660;\n  ppcharValue7 = DAT_0010d558;\n  charValue = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)ppcharValue9[1 - charValue];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    puVar22 = (undefined8 *)*ppcharValue9;\n    if (DAT_0010d558 == (char **)0x0) {\n      charPointer = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charPointer = (char *)dcgettext(0,charPointer,5);\n      fprintf(_stderr,charPointer,uintVar);\n      FUN_0010315d();\n    }\n    else {\n      for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n        for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; puVar23 != (undefined8 *)0x0;\n            puVar23 = (undefined8 *)puVar23[0x1e]) {\n          intVar = filename_cmp(*puVar23);\n          if (intVar == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*puVar22,0);\n        fileSize = DAT_0010d660;\n        uintVar = *puVar22;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer,fileSize,uintVar);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    puVar22 = (undefined8 *)*ppcharValue9;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      charPointer = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcharValue7 = DAT_0010d558 + 0x1f;\n      for (charPointer = DAT_0010d558[0x1f]; charPointer != (char *)0x0;\n          charPointer = *(char **)(charPointer + 0xf0)) {\n        intVar = filename_cmp();\n        if (intVar == 0) {\n          charPointer1 = (char *)bfd_openr(*puVar22,0);\n          uintVar = DAT_0010d660;\n          if (charPointer1 == (char *)0x0) {\n            fileSize = *puVar22;\n            charPointer1 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,charPointer1,uintVar,fileSize);\n            FUN_0010315d();\n          }\n          else {\n            *ppcharValue7 = charPointer1;\n            bVar28 = true;\n            *(undefined8 *)(charPointer1 + 0xf0) = *(undefined8 *)(charPointer + 0xf0);\n          }\n        }\n        else {\n          ppcharValue7 = (char **)(charPointer + 0xf0);\n        }\n      }\n      if (!bVar28) {\n        charPointer = (char *)bfd_openr(*puVar22,0);\n        fileSize = DAT_0010d660;\n        uintVar = *puVar22;\n        charPointer1 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer1,fileSize,uintVar);\n        uintVar = DAT_0010d660;\n        if (charPointer == (char *)0x0) {\n          fileSize = *puVar22;\n          charPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charPointer,uintVar,fileSize);\n          FUN_0010315d();\n        }\n        else {\n          *ppcharValue7 = charPointer;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    puVar22 = (undefined8 *)*ppcharValue9;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcharValue7 = DAT_0010d558 + 0x1f;\n      for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; uintVar = DAT_0010d660,\n          puVar23 != (undefined8 *)0x0; puVar23 = (undefined8 *)puVar23[0x1e]) {\n        intVar = filename_cmp(*puVar23,*puVar22);\n        if (intVar == 0) {\n          bVar28 = true;\n          *ppcharValue7 = (char *)puVar23[0x1e];\n        }\n        else {\n          ppcharValue7 = (char **)(puVar23 + 0x1e);\n        }\n      }\n      if (!bVar28) {\n        fileSize = *puVar22;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer,uintVar,fileSize);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    puVar22 = (undefined8 *)*ppcharValue9;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      charPointer = (char *)bfd_openr(*puVar22,\"plugin\");\n      uintVar = DAT_0010d660;\n      ppcharValue7 = DAT_0010d558;\n      if (charPointer == (char *)0x0) {\n        fileSize = *puVar22;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charPointer,uintVar,fileSize);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(charPointer + 0xf0) = DAT_0010d558[0x1f];\n        ppcharValue7[0x1f] = charPointer;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    charPointer = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    charPointer1 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(charPointer1,charPointer);\n    for (charPointer = DAT_0010d558[0x1f]; charPointer != (char *)0x0; charPointer = *(char **)(charPointer + 0xf0))\n    {\n      FUN_00103ddc(charPointer,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(ppcharValue7);\n    charPointer = DAT_0010d570;\n    intVar = stat(DAT_0010d570,&fileStats);\n    if ((intVar != 0) && (DAT_0010d558 = (char **)bfd_openw(charPointer,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*ppcharValue9,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*ppcharValue9,1);\n    break;\n  case 0x20:\n    charPointer = *ppcharValue9;\n    if (DAT_0010d558 == (char **)0x0) {\n      charPointer = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    loopCounter = FUN_00105300(ppcharValue9[-1],0);\n    if (loopCounter != 0) {\n      FUN_001032a8(loopCounter,FUN_0010312d,charPointer);\n    }\n    break;\n  case 0x21:\n    charPointer = *ppcharValue9;\n    charPointer1 = ppcharValue9[-1];\n    uintVar = FUN_00105300(ppcharValue9[-2],0);\n    if (charPointer == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(charPointer,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(uintVar,FUN_00103ddc,charPointer1);\n        bfd_close(uintVar);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      charPointer2 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,charPointer2,charPointer);\n    }\n    FUN_001032a8(uintVar,FUN_00103ddc,charPointer1);\n    bfd_close(uintVar);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ppcharValue9;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ppcharValue9[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    charPointer = ppcharValue9[-2];\n    *ppcVar38 = *ppcharValue9;\n    ppcVar38[1] = charPointer;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  loopCounter = (long)charValue;\n  bufferPointer = bufferPointer + -loopCounter;\n  ppcharValue9[1 - loopCounter] = (char *)ppcVar38;\n  ppcharValue9 = ppcharValue9 + (1 - loopCounter);\n  uVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*bufferPointer;\n  if ((uVar20 < 0x23) && (*bufferPointer == (&DAT_0010a0a0)[(int)uVar20])) {\n    loopCounter = (long)(char)(&DAT_0010a060)[(int)uVar20];\n  }\n  else {\n    loopCounter = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  intVar = ((int)pbVar35 - (int)DAT_0010d5c8) + -1;\n  *pbVar35 = DAT_0010d588;\n  fileDataPointer = (long **)(DAT_0010d5a8 + loopCounter * 8);\n  filePointerPointer = (FILE **)*fileDataPointer;\n  if (*(int *)(filePointerPointer + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)filePointerPointer + 0x1c);\n    *(undefined4 *)(filePointerPointer + 7) = 1;\n    *filePointerPointer = DAT_0010d590;\n  }\n  bytePointer = DAT_0010d5b0;\n  filePointer = filePointerPointer[1];\n  temporaryVariable1._8_8_ = filePointer;\n  temporaryVariable1._0_8_ = filePointerPointer;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      temporaryVariable1 = FUN_001033b0();\n    }\n    if (*(int *)(temporaryVariable1._0_8_ + 0x34) != 0) {\n      uVar20 = (int)((long)bytePointer - (long)pbVar32) - 1;\n      for (loopCounter = 0; (int)loopCounter < (int)uVar20; loopCounter = loopCounter + 1) {\n        *(byte *)(temporaryVariable1._8_8_ + loopCounter) = pbVar32[loopCounter];\n      }\n      fileSizePointer2 = *fileDataPointer;\n      if (*(int *)(fileSizePointer2 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)fileSizePointer2 + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = DAT_0010d590;\n        if (uVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uintVar = FUN_001033d6(filePointer);\n            *puVar22 = uintVar;\n          }\n          loopCounter = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            loopCounter = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          intVar2 = 1;\n          FUN_001031cf(loopCounter);\n          FUN_001030ed();\n        }\n        else {\n          intVar2 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          fileSizePointer = *fileDataPointer;\n          uVar24 = ~uVar20 + *(int *)(fileSizePointer2 + 3);\n          if (0 < (int)uVar24) break;\n          uVar24 = (int)DAT_0010d5b0 - (int)(void *)fileSizePointer[1];\n          if (*(int *)(fileSizePointer + 4) == 0) {\n            fileSizePointer[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          intVar2 = *(int *)(fileSizePointer + 3);\n          iVar25 = intVar2;\n          if (intVar2 < 1) {\n            iVar25 = intVar2 / 8;\n          }\n          *(int *)(fileSizePointer + 3) = iVar25 + intVar2;\n          voidPointer = realloc((void *)fileSizePointer[1],(long)(iVar25 + intVar2 + 2));\n          fileSizePointer[1] = (long)voidPointer;\n          if (voidPointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)voidPointer + (long)(int)uVar24);\n          fileSizePointer2 = *fileDataPointer;\n        }\n        if (0x2000 < (int)uVar24) {\n          uVar24 = 0x2000;\n        }\n        uVar26 = (ulong)uVar24;\n        if (*(int *)((long)fileSizePointer + 0x24) == 0) {\n          piVar34 = __errno_location();\n          uVar26 = (ulong)(int)uVar24;\n          uVar19 = (ulong)(int)uVar20;\n          *piVar34 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        piVar34 = (int *)(long)(int)uVar20;\n        do {\n          intVar2 = getc(DAT_0010d590);\n          uVar36 = (uint)uVar19;\n          if (intVar2 == -1) {\n            intVar2 = ferror(DAT_0010d590);\n            uVar24 = uVar36;\n            if (intVar2 != 0) {\n              do {\n                charPointer = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *piVar34 = 0;\n                  clearerr((FILE *)charPointer);\nLAB_001046c7:\n                  size = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,uVar26,DAT_0010d590);\n                  charPointer = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size;\n                  uVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (intVar2 = ferror(DAT_0010d590), uVar24 = DAT_0010d598, intVar2 == 0))\n                  goto LAB_00104738;\n                } while (*piVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (intVar2 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uVar24 = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)piVar34) =\n               (char)intVar2;\n          piVar34 = (int *)((long)piVar34 + 1);\n        } while (uVar24 != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uVar24;\n        uVar24 = DAT_0010d598;\n        intVar2 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uVar24 == 0) goto LAB_0010475e;\n      }\n      fileSizePointer2 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      loopCounter = *fileSizePointer2;\n      uVar20 = uVar20 + DAT_0010d598;\n      if (*(int *)(loopCounter + 0x18) < (int)uVar20) {\n        iVar25 = ((int)DAT_0010d598 >> 1) + uVar20;\n        voidPointer = realloc(*(void **)(loopCounter + 8),(long)iVar25);\n        *(void **)(loopCounter + 8) = voidPointer;\n        temporaryVariable2._8_8_ = fileSizePointer2;\n        temporaryVariable2._0_8_ = *fileSizePointer2;\n        if (*(long *)(*fileSizePointer2 + 8) == 0) {\n          temporaryVariable2 = FUN_001033b0();\n        }\n        fileSizePointer2 = temporaryVariable2._8_8_;\n        *(int *)(temporaryVariable2._0_8_ + 0x18) = iVar25 + -2;\n      }\n      DAT_0010d598 = uVar20;\n      *(undefined *)(*(long *)(*fileSizePointer2 + 8) + (long)(int)uVar20) = 0;\n      *(undefined *)(*(long *)(*fileSizePointer2 + 8) + 1 + (long)(int)uVar20) = 0;\n      pbVar32 = *(byte **)(*fileSizePointer2 + 8);\n      DAT_0010d5c8 = pbVar32;\n      if (intVar2 == 1) goto LAB_001048a4;\n      if (intVar2 == 2) goto LAB_001048ca;\n      pbVar35 = pbVar32 + intVar;\n      DAT_0010d5b0 = pbVar35;\n      uVar20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)pbVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pbVar35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pbVar35;\n    uVar19 = FUN_0010300e();\n    pbVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pbVar35 = pbVar32 + intVar;\n  DAT_0010d5b0 = pbVar35;\n  uVar19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = pbVar35;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  uVar26 = uVar19 & 0xffffffff;\n  while( true ) {\n    intVar = (int)uVar26;\n    if (intVar == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar * 2) + 1) * 2)) break;\n    uVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar * 2);\n  }\n  uVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar * 2) + 1) * 2);\n  pbVar33 = pbVar32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)intVar * 2) + 1) * 2) == 0)\n     || (uVar20 == 0xb0)) goto LAB_0010419f;\n  pbVar35 = pbVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  intVar = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pbVar35 = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  pbVar35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcharValue9 = ppcharValue9 + 1;\n  fileCount = 3;\n  *ppcharValue9 = DAT_0010d548;\nLAB_001049d1:\n  bufferPointer = bufferPointer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "fopen",
                "bfd_close",
                "FUN_00105300",
                "bfd_cache_close",
                "FUN_00103df9",
                "FUN_00103ddc",
                "stat",
                "filename_cmp",
                "fwrite",
                "FUN_0010312d",
                "FUN_001033d6",
                "unlink",
                "malloc",
                "free",
                "ferror",
                "FUN_00103c60",
                "bfd_set_format",
                "FUN_001031cf",
                "dcgettext",
                "realloc",
                "bfd_openr",
                "getc",
                "__errno_location",
                "fread",
                "FUN_00103ba8",
                "fprintf",
                "bfd_openw",
                "FUN_001030ed",
                "FUN_001033b0",
                "dup",
                "FUN_001031a5",
                "printf",
                "FUN_00105bc0",
                "clearerr",
                "fclose",
                "FUN_0010315d",
                "FUN_001032a8",
                "FUN_00107740",
                "xstrdup",
                "FUN_0010300e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "decompress_and_process_files_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_reverse_code_00107cc0",
                "lVar1": "index",
                "lVar2": "innerIndex",
                "lVar3": "loopIndex",
                "plVar4": "functionPtr",
                "uVar5": "count"
            },
            "code": "\nvoid executeReverseCode_00107cc0(void)\n\n{\n  long index;\n  long innerIndex;\n  long loopIndex;\n  long *functionPtr;\n  uint count;\n  \n  functionPtr = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionPtr + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionPtr[index + 2])();\n        innerIndex = index + -1;\n        if (-1 < (int)innerIndex) {\n          loopIndex = innerIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionPtr[index + 1])();\n                        innerIndex = index + -2;\n                      }\n                      (*(code *)functionPtr[innerIndex + 2])();\n                      innerIndex = innerIndex + -1;\n                    }\n                    (*(code *)functionPtr[innerIndex + 2])();\n                    innerIndex = innerIndex + -1;\n                  }\n                  (*(code *)functionPtr[innerIndex + 2])();\n                  innerIndex = innerIndex + -1;\n                }\n                (*(code *)functionPtr[innerIndex + 2])();\n                innerIndex = innerIndex + -1;\n              }\n              (*(code *)functionPtr[innerIndex + 2])();\n              innerIndex = innerIndex + -1;\n            }\n            (*(code *)functionPtr[innerIndex + 2])();\n            loopIndex = innerIndex + -1;\n            if ((int)(innerIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPtr[loopIndex + 2])();\n            index = loopIndex + -1;\n            (*(code *)functionPtr[loopIndex + 1])();\n            (*(code *)functionPtr[loopIndex])();\n            (*(code *)functionPtr[index])();\n            (*(code *)functionPtr[loopIndex + -2])();\n            (*(code *)functionPtr[loopIndex + -3])();\n            (*(code *)functionPtr[loopIndex + -4])();\n            (*(code *)functionPtr[loopIndex + -5])();\n            loopIndex = loopIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionPtr = (long *)*functionPtr;\n    } while (functionPtr != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_reverse_code_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "execute_task_00105ae0",
                "param_1": "taskParam1",
                "param_2": "taskParam2",
                "param_3": "taskParam3",
                "param_4": "taskParam4"
            },
            "code": "\nvoid executeTask_00105ae0(undefined8 taskParam1,undefined8 taskParam2,undefined taskParam3,undefined taskParam4)\n\n{\n  FUN_00105af0(taskParam1,taskParam2,taskParam3,taskParam4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "execute_task_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105db0",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "process_data_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "paramA",
                "param_10": "paramB",
                "param_11": "paramC",
                "param_12": "paramD",
                "param_13": "paramE",
                "param_14": "paramF",
                "in_AL": "is_valid",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "buffer_ptr",
                "local_c8": "buffer_data",
                "local_b8": "buffer",
                "local_b0": "buffer_param1",
                "local_a8": "buffer_param2",
                "local_a0": "buffer_param3",
                "local_98": "buffer_param4",
                "local_90": "buffer_param5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid processData_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 paramA,undefined8 paramB,undefined8 paramC,undefined8 paramD,\n                 undefined8 paramE,undefined8 paramF)\n\n{\n  char is_valid;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer_ptr;\n  undefined *buffer_data;\n  undefined buffer [8];\n  undefined8 buffer_param1;\n  undefined8 buffer_param2;\n  undefined8 buffer_param3;\n  undefined8 buffer_param4;\n  undefined8 buffer_param5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (is_valid != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  buffer_ptr = &stack0x00000008;\n  size = 8;\n  buffer_data = buffer;\n  length = 0x30;\n  buffer_param1 = paramB;\n  buffer_param2 = paramC;\n  buffer_param3 = paramD;\n  buffer_param4 = paramE;\n  buffer_param5 = paramF;\n  FUN_001078c0(paramA,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00103a78",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "process_data_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "targetName",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentPointer"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long targetName,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentPointer;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentPointer = targetList;\n  while( true ) {\n    currentTarget = *currentPointer;\n    currentPointer = currentPointer + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extracted_function_00105830",
                "param_1": "filename",
                "param_2": "structPtr",
                "param_3": "value1",
                "param_4": "value2",
                "lVar1": "structValue",
                "sVar2": "filenameLength",
                "__s": "baseName",
                "uVar3": "structOffset",
                "pcVar4": "outputPtr",
                "bVar5": "byteVar",
                "auVar6": "returnValues"
            },
            "code": "\nundefined  [16] extractedFunction_00105830(char *filename,long structPtr,undefined8 value1,undefined8 value2)\n\n{\n  long structValue;\n  size_t filenameLength;\n  char *baseName;\n  ulong structOffset;\n  char *outputPtr;\n  byte byteVar;\n  undefined returnValues [16];\n  \n  byteVar = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    filename = baseName;\n    if ((DAT_0010d5fa != '\\0') && (structPtr != 0)) {\n      filenameLength = strlen(baseName);\n      structOffset = (ulong)*(byte *)(*(long *)(structPtr + 8) + 0x1e);\n      if (structOffset < filenameLength) {\n        filename = (char *)xmalloc(structOffset + 1);\n        structValue = *(long *)(structPtr + 8);\n        outputPtr = filename;\n        for (structOffset = (ulong)*(byte *)(structValue + 0x1e); structOffset != 0; structOffset = structOffset - 1) {\n          *outputPtr = *baseName;\n          baseName = baseName + (ulong)byteVar * -2 + 1;\n          outputPtr = outputPtr + (ulong)byteVar * -2 + 1;\n        }\n        filename[*(byte *)(structValue + 0x1e)] = '\\0';\n      }\n    }\n  }\n  returnValues._8_8_ = value2;\n  returnValues._0_8_ = filename;\n  return returnValues;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extracted_function_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "close_file_and_remove_00107730",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid closeFileAndRemove_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "close_file_and_remove_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_details_00107c20",
                "param_1": "errorString",
                "iVar1": "errorIndicator",
                "uVar2": "errorMessage",
                "in_R10": "placeholder",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "dcgettext": "getErrorMessage",
                "bfd_get_error": "getBfdError",
                "bfd_errmsg": "getBfdErrorMessage",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printErrorDetails_00107c20(long errorString)\n\n{\n  int errorIndicator;\n  undefined8 errorMessage;\n  undefined8 placeholder;\n  \n  errorIndicator = bfd_get_error();\n  if (errorIndicator == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorIndicator);\n  }\n  fflush(standardOutput);\n  if (errorString != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010d660,errorString,errorMessage,placeholder);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010d660,errorMessage,placeholder);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_details_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "fileStream",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoPtr"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *fileStream,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoPtr;\n  long lVar5;\n  \n  errnoPtr = __errno_location();\n  lVar5 = DAT_0010d5a8;\n  errnoValue = *errnoPtr;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = fileStream;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(lVar5 + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (lVar5 != 0) {\n      if (filePtr == *(FILE ***)(lVar5 + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *filePtr = fileStream;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = fileStream;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (fileStream != (FILE *)0x0) {\n    fileDescriptor = fileno(fileStream);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTerminal;\n  *errnoPtr = errnoValue;\n  return param5;\n}\n\n",
            "called": [
                "fileno",
                "__errno_location",
                "isatty",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "extract_data_from_binary_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "filename",
                "iVar1": "originalErrno",
                "__fd": "outputFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "filePosition",
                "uVar4": "result",
                "sVar5": "bytesWritten",
                "piVar6": "errnoLocation",
                "auStack_2038": "buffer"
            },
            "code": "\nulong extractDataFromBinary_00105c00(int fileDescriptor,char *filename)\n\n{\n  int originalErrno;\n  int outputFileDescriptor;\n  int bytesRead;\n  __off_t filePosition;\n  ulong result;\n  size_t bytesWritten;\n  int *errnoLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (filePosition = lseek(fileDescriptor,0,0), filePosition == 0)) {\n    outputFileDescriptor = open(filename,0x201);\n    if (outputFileDescriptor < 0) {\n      result = FUN_00102f55();\n      return result;\n    }\n    do {\n      result = read(fileDescriptor,buffer,0x2000);\n      bytesRead = (int)result;\n      if (bytesRead < 1) {\n        errnoLocation = __errno_location();\n        originalErrno = *errnoLocation;\n        close(fileDescriptor);\n        close(outputFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoLocation = originalErrno;\n          return 0xffffffff;\n        }\n        return result & 0xffffffff;\n      }\n      bytesWritten = write(outputFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoLocation = __errno_location();\n    bytesRead = *errnoLocation;\n    close(fileDescriptor);\n    close(outputFileDescriptor);\n    *errnoLocation = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "FUN_00102f55",
                "__errno_location",
                "open",
                "write",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_stats_warning_001052a0",
                "param_1": "fileName",
                "iVar1": "result",
                "piVar2": "errorLocation",
                "uVar3": "message",
                "pcVar4": "errorMessage",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileStatsWarning_001052a0(char *fileName)\n\n{\n  int result;\n  int *errorLocation;\n  undefined8 message;\n  char *errorMessage;\n  stat fileStats;\n  \n  if (fileName != (char *)0x0) {\n    result = stat(fileName,&fileStats);\n    if (result < 0) {\n      errorLocation = __errno_location();\n      if (*errorLocation == 2) {\n        message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(message,fileName);\n      }\n      else {\n        errorMessage = strerror(*errorLocation);\n        message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(message,fileName,errorMessage);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(message,fileName);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(message,fileName);\n    }\n    else {\n      message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(message,fileName);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001025a0",
                "FUN_00107920",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_file_stats_warning_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "file",
                "pcVar1": "emulationOptionsMsg"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *file)\n\n{\n  char *emulationOptionsMsg;\n  \n  emulationOptionsMsg = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(file,emulationOptionsMsg);\n  emulationOptionsMsg = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(file,emulationOptionsMsg);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_00103ba8",
                "FUN_00105a68",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00103172",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "open_plugin_archive_00103c60",
                "param_1": "input_archive_name",
                "param_2": "format_flag",
                "cVar1": "check_format_result",
                "piVar2": "errno_location_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_archive_file",
                "lVar5": "next_archived_file",
                "uVar6": "program_name",
                "plVar7": "archived_file_ptr"
            },
            "code": "\n\n\nvoid open_plugin_archive_00103c60(char *input_archive_name,int format_flag)\n\n{\n  char check_format_result;\n  int *errno_location_ptr;\n  char *error_message;\n  long input_archive_file;\n  long next_archived_file;\n  undefined8 program_name;\n  long *archived_file_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_location_ptr = __errno_location();\n    input_archive_name = strerror(*errno_location_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive_name = DAT_0010d560;\n    }\n    else {\n      if (format_flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive_file = bfd_openr(input_archive_name,\"plugin\");\n      if (input_archive_file == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        check_format_result = bfd_check_format(input_archive_file,2);\n        if (check_format_result != '\\0') {\n          archived_file_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (next_archived_file = bfd_openr_next_archived_file(input_archive_file,0); next_archived_file != 0;\n              next_archived_file = bfd_openr_next_archived_file(input_archive_file,next_archived_file)) {\n            *archived_file_ptr = next_archived_file;\n            archived_file_ptr = (long *)(next_archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_archive_name);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_openr",
                "bfd_fdopenw",
                "FUN_001057a0",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "FUN_0010315d",
                "fprintf",
                "xstrdup",
                "bfd_set_format",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "open_plugin_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "initialize_output_file_00102e57",
                "pFVar1": "outputFile"
            },
            "code": "\nvoid initializeOutputFile_00102e57(void)\n\n{\n  FILE *outputFile;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  outputFile = fopen(DAT_0010d618,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "check_format",
                "param_4": "extract_files",
                "cVar1": "format_valid",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "total_files"
            },
            "code": "\nulong extract_archived_files_00105af0(long *file_list,long archive_file,char check_format,char extract_files)\n\n{\n  char format_valid;\n  uint result;\n  long archived_file;\n  ulong total_files;\n  \n  if (extract_files == '\\0') {\n    if (check_format != '\\0') {\n      total_files = FUN_00102f08();\n      return total_files;\n    }\n  }\n  else {\n    format_valid = bfd_check_format(archive_file,2);\n    if (format_valid != '\\0') {\n      total_files = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        result = extract_archived_files_00105af0(file_list,archived_file,check_format,1);\n        if ((char)result != '\\0') {\n          total_files = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return total_files;\n    }\n    if (check_format != '\\0') {\n      total_files = FUN_00102f08();\n      return total_files;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_value_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "adjustedIndex",
                "bVar4": "offset",
                "pbVar5": "currentBytePtr",
                "in_R9": "matchingBytePtr",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingValue_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long adjustedIndex;\n  byte offset;\n  byte *currentBytePtr;\n  byte *matchingBytePtr;\n  int matchingIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentBytePtr = DAT_0010d5c8; currentBytePtr < DAT_0010d5b0; currentBytePtr = currentBytePtr + 1) {\n    offset = 1;\n    if (*currentBytePtr != 0) {\n      offset = (&DAT_0010ab00)[*currentBytePtr];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchingBytePtr = currentBytePtr;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      adjustedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)offset);\n      if (*(short *)(&DAT_0010a440 + adjustedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        offset = (&DAT_0010a7c0)[(int)(uint)offset];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + adjustedIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingBytePtr;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_value_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_00102ba1",
                "unaff_RBP": "ptr_to_be_freed",
                "unaff_retaddr": "return_address",
                "auVar1": "return_value"
            },
            "code": "\nundefined  [16] free_and_return_00102ba1(void)\n\n{\n  undefined return_value [16];\n  void *ptr_to_be_freed;\n  ulong return_address;\n  \n  free(ptr_to_be_freed);\n  return_value._8_8_ = 0;\n  return_value._0_8_ = return_address;\n  return return_value << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_data_from_binary_00107740",
                "param_1": "binaryData",
                "iVar1": "filenameComparisonResult",
                "iVar2": "internalStatError",
                "piVar3": "errorLocation",
                "pcVar4": "errorString",
                "uVar5": "gettextOutput",
                "pplVar6": "archiveData",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "plVar8": "currentPointer",
                "puVar9": "localArray",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "local_c8": "localArray",
                "_Stack_b0": "permissions",
                "uStack_98": "archiveSize",
                "uStack_80": "outputVariable1",
                "uStack_70": "outputVariable2"
            },
            "code": "\n\n\nlong * extractDataFromBinary_00107740(long **binaryData)\n\n{\n  int filenameComparisonResult;\n  int internalStatError;\n  int *errorLocation;\n  char *errorString;\n  undefined8 gettextOutput;\n  long **archiveData;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long *currentPointer;\n  undefined4 *localArray;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 localArray [6];\n  __mode_t permissions;\n  ulong archiveSize;\n  undefined8 outputVariable1;\n  undefined8 outputVariable2;\n  \n  if (_DAT_0010d600 != 0) {\n    localArray = localArray;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localArray = 0;\n      localArray = localArray + 1;\n    }\n  }\n  archiveData = (long **)binaryData[0x1d];\n  if ((long **)binaryData[0x1d] == (long **)0x0) {\n    archiveData = binaryData;\n  }\n  internalStatError = (*(code *)archiveData[1][0x3d])(binaryData,localArray);\n  if (internalStatError != 0) {\n    currentPointer = *binaryData;\n    gettextOutput = dcgettext(0,\"internal stat error on %s\",5);\n    internalStatError = FUN_00107690(gettextOutput,currentPointer);\n    gettextOutput = DAT_0010d638;\n    if (internalStatError == 3) {\n      for (; *currentPointer != 0; currentPointer = (long *)(*currentPointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentPointer != (undefined8 *)0x0; currentPointer = (long *)(*currentPointer + 0xf0)) {\n        filenameComparisonResult = filename_cmp(*(undefined8 *)*currentPointer,gettextOutput);\n        if (filenameComparisonResult == 0) {\n          if (internalStatError != 2) {\n            return currentPointer;\n          }\n          return (long *)(*currentPointer + 0xf0);\n        }\n      }\n    }\n    return currentPointer;\n  }\n  bfd_seek(binaryData,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*binaryData);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead,binaryData);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        binaryData = (long **)*binaryData[0x1d];\n        gettextOutput = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(gettextOutput,binaryData);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*binaryData);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errorLocation = __errno_location();\n        errorString = strerror(*errorLocation);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,permissions);\n  if (_DAT_0010d600 != 0) {\n    outputVariable1 = outputVariable2;\n    FUN_00107c80(errorString,localArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12": "flags1",
                "unaff_R13": "memory1",
                "unaff_R14D": "duplication",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "executable",
                "cStack0000000000000017": "writable",
                "in_stack_00000018": "readable",
                "cStack0000000000000019": "executable2",
                "cStack000000000000001a": "writable2",
                "cStack000000000000001b": "readable2",
                "cStack000000000000001c": "executable3",
                "cStack000000000000001d": "writable3",
                "cStack000000000000001e": "readable3",
                "uStack000000000000001f": "flag",
                "uStack0000000000000068": "permissions",
                "uStack000000000000006c": "links",
                "in_stack_00000070": "size",
                "in_stack_00000080": "timestamp",
                "__format": "timeMsg"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *timeMsg;\n  uint uVar4;\n  char **fileInfo;\n  FILE *outputFile;\n  long flags1;\n  void *memory1;\n  int duplication;\n  undefined fileType;\n  char executable;\n  char writable;\n  char readable;\n  char executable2;\n  char writable2;\n  char readable2;\n  char executable3;\n  char writable3;\n  char readable3;\n  undefined flag;\n  uint permissions;\n  uint links;\n  uint size;\n  undefined8 timestamp;\n  \n  do {\n    bVar1 = FUN_00107c10();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(flags1 + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(duplication);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = FUN_00105bc0();\n    if (iVar3 == 0) {\n      free(memory1);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  timeMsg = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeMsg);\n  uVar4 = permissions & 0xf000;\n  if (uVar4 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar4 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  executable = (-((permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  writable = (-((permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  readable = (-((permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  executable2 = (-((permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  writable2 = (-((permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  readable2 = (-((permissions & 8) == 0) & 0xb5U) + 0x78;\n  executable3 = (-((permissions & 4) == 0) & 0xbbU) + 0x72;\n  writable3 = (-((permissions & 2) == 0) & 0xb6U) + 0x77;\n  readable3 = (-((permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((permissions & 0x800) != 0) {\n    if (readable == 'x') {\n      readable = 's';\n    }\n    else {\n      readable = 'S';\n    }\n  }\n  if ((permissions & 0x400) != 0) {\n    if (readable2 == 'x') {\n      readable2 = 's';\n    }\n    else {\n      readable2 = 'S';\n    }\n  }\n  if ((permissions & 0x200) != 0) {\n    if (readable3 == 'x') {\n      readable3 = 't';\n    }\n    else {\n      readable3 = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)links,\n          (ulong)size,timestamp,&stack0x00000020,(ulong)permissions)\n  ;\n  fputs(*fileInfo,outputFile);\n  if ((char)flags1 != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00107c10",
                "FUN_00105bc0",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "xexit",
                "dup",
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "reversed_code_001028ed",
                "param_1": "input_param",
                "param_2": "file_descriptor",
                "uVar1": "undefined_var1",
                "bVar2": "byte_var2",
                "iVar3": "index_var",
                "sVar4": "size_var",
                "piVar5": "ptr_var5",
                "pcVar6": "string_var1",
                "pcVar7": "string_var2",
                "ppcVar8": "ptr_to_str_ptr_var",
                "uVar9": "undefined_var2",
                "lVar10": "long_var1",
                "__s": "string_var3",
                "__s_00": "string_var4",
                "lVar11": "long_var2",
                "uVar12": "undefined_var3",
                "uVar13": "ulong_var",
                "unaff_RBX": "input_string_ptr",
                "ppcVar14": "ptr_to_data",
                "unaff_RBP": "ptr_to_str_ptr",
                "unaff_R12": "ptr_to_str_ptr2",
                "unaff_R13D": "uint_var",
                "ppcVar15": "ptr_to_str_ptr3",
                "unaff_R14": "long_var3",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "param_7": "params",
                "param_9": "struct_param",
                "in_stack_00000078": "stack_var1",
                "in_stack_00000108": "stack_var2"
            },
            "code": "\n\n\nundefined8 reversed_code_001028ed(undefined8 input_param,long file_descriptor)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int index_var;\n  size_t size_var;\n  int *ptr_var5;\n  char *string_var1;\n  char *string_var2;\n  char **ptr_to_str_ptr_var;\n  undefined8 undefined_var2;\n  long long_var1;\n  char *string_var3;\n  char *string_var4;\n  long long_var2;\n  undefined8 undefined_var3;\n  ulong ulong_var;\n  char *input_string_ptr;\n  char **ptr_to_data;\n  char **ptr_to_str_ptr;\n  char **ptr_to_str_ptr2;\n  uint uint_var;\n  char **ptr_to_str_ptr3;\n  long long_var3;\n  bool bool_var;\n  byte byte_var;\n  char **params;\n  undefined8 struct_param;\n  long stack_var1;\n  long stack_var2;\n  \n  byte_var = 0;\ncode_r0x001028ed:\n  FUN_00107c10(input_string_ptr,file_descriptor);\nLAB_001028f5:\n  undefined_var3 = DAT_0010d638;\n  if (uint_var != 3) {\n    while( true ) {\n      if ((undefined8 *)*ptr_to_str_ptr2 == (undefined8 *)0x0) goto LAB_0010571f;\n      index_var = filename_cmp(*(undefined8 *)*ptr_to_str_ptr2,undefined_var3);\n      if (index_var == 0) break;\n      ptr_to_str_ptr2 = (char **)(*ptr_to_str_ptr2 + 0xf0);\n    }\n    if (uint_var != 2) goto LAB_0010571f;\n    ptr_to_str_ptr2 = (char **)(*ptr_to_str_ptr2 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var1 = *(long *)(long_var3 + 0xf0);\n  if (*(long *)(long_var3 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var2 = long_var1;\n    long_var1 = *(long *)(long_var2 + 0xf0);\n  } while (long_var1 != 0);\n  ptr_to_str_ptr2 = (char **)(long_var2 + 0xf0);\n  input_string_ptr = *ptr_to_str_ptr;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  uint_var = (uint)(DAT_0010d60c != 0);\n  file_descriptor = bfd_openr(input_string_ptr,DAT_0010d5f0);\n  if (file_descriptor != 0) {\n    ptr_to_str_ptr = ptr_to_str_ptr + 1;\n    byte_var2 = FUN_00105af0(ptr_to_str_ptr2,file_descriptor,uint_var,undefined_var1);\n    struct_param._6_1_ = struct_param._6_1_ | byte_var2;\n    string_var1 = *ptr_to_str_ptr;\n    do {\n      if (string_var1 == (char *)0x0) {\n        if (struct_param._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var3 = FUN_001058b0();\n        return undefined_var3;\n      }\n      ptr_to_data = *(char ***)(long_var3 + 0xf0);\n      ptr_to_str_ptr2 = params;\n      if (struct_param._7_1_ == '\\0') {\n        ptr_to_str_ptr3 = params;\n        if (ptr_to_data != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              string_var3 = (char *)lbasename(*ptr_to_data);\n              string_var2 = string_var3;\n              if (DAT_0010d5fa != '\\0') {\n                size_var = strlen(string_var3);\n                ulong_var = (ulong)*(byte *)(*(long *)(long_var3 + 8) + 0x1e);\n                if (ulong_var < size_var) {\n                  string_var2 = (char *)xmalloc(ulong_var + 1);\n                  long_var1 = *(long *)(long_var3 + 8);\n                  string_var1 = string_var2;\n                  for (ulong_var = (ulong)*(byte *)(long_var1 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n                    *string_var1 = *string_var3;\n                    string_var3 = string_var3 + (ulong)byte_var * -2 + 1;\n                    string_var1 = string_var1 + (ulong)byte_var * -2 + 1;\n                  }\n                  string_var2[*(byte *)(long_var1 + 0x1e)] = '\\0';\n                }\n                string_var1 = *ptr_to_str_ptr;\n                string_var3 = string_var2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              string_var1 = *ptr_to_str_ptr;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string_var4 = (char *)lbasename(string_var1);\n              if (DAT_0010d5fa != '\\0') {\n                size_var = strlen(string_var4);\n                ulong_var = (ulong)*(byte *)(*(long *)(long_var3 + 8) + 0x1e);\n                string_var1 = string_var4;\n                string_var3 = string_var2;\n                if (ulong_var < size_var) {\n                  string_var1 = (char *)xmalloc(ulong_var + 1);\n                  long_var1 = *(long *)(long_var3 + 8);\n                  string_var2 = string_var1;\n                  for (ulong_var = (ulong)*(byte *)(long_var1 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n                    *string_var2 = *string_var4;\n                    string_var4 = string_var4 + (ulong)byte_var * -2 + 1;\n                    string_var2 = string_var2 + (ulong)byte_var * -2 + 1;\n                  }\n                  string_var1[*(byte *)(long_var1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              index_var = filename_cmp(string_var4,string_var2);\n            }\n            else {\n              string_var1 = *ptr_to_str_ptr;\n              string_var3 = *ptr_to_data;\nLAB_00102980:\n              index_var = filename_cmp(string_var1,string_var3);\n            }\n            if ((index_var == 0) && (ptr_to_data[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                index_var = stat(*ptr_to_str_ptr,(stat *)&stack0x000000b0);\n                if (index_var != 0) {\n                  ptr_var5 = __errno_location();\n                  if (*ptr_var5 != 2) {\n                    FUN_00107c10(*ptr_to_str_ptr);\nLAB_00102b7e:\n                    string_var1 = *ptr_to_data;\n                    undefined_var3 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefined_var3,string_var1);\n                    free(ptr_to_str_ptr);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                ptr_to_str_ptr_var = (char **)ptr_to_data[0x1d];\n                if ((char **)ptr_to_data[0x1d] == (char **)0x0) {\n                  ptr_to_str_ptr_var = ptr_to_data;\n                }\n                index_var = (**(code **)(ptr_to_str_ptr_var[1] + 0x1e8))(ptr_to_data,&stack0x00000020);\n                if (index_var != 0) goto LAB_00102b7e;\n                if (stack_var2 <= stack_var1) goto LAB_0010577e;\n              }\n              undefined_var3 = FUN_00105870(params,2,*ptr_to_data);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                string_var1 = *ptr_to_str_ptr;\n                bool_var = DAT_0010d60c != 0;\n                long_var1 = bfd_openr(string_var1,DAT_0010d5f0);\n                if (long_var1 == 0) {\n                  FUN_00107c10(string_var1,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = FUN_00103172(undefined_var3,long_var1,bool_var);\n              }\n              else {\n                undefined_var2 = FUN_00105830(*ptr_to_str_ptr);\n                index_var = filename_cmp(undefined_var2,\"__.LIBDEP\");\n                if (index_var != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = FUN_00103172(undefined_var3,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *ptr_to_str_ptr3 = *(char **)(*ptr_to_str_ptr3 + 0xf0);\n                struct_param._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            ptr_to_str_ptr3 = ptr_to_data + 0x1e;\n            ptr_to_data = (char **)ptr_to_data[0x1e];\n          } while (ptr_to_data != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var1 = *(long *)(long_var3 + 0xf0);\n        if (*(long *)(long_var3 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      input_string_ptr = *ptr_to_str_ptr;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var3 = FUN_00105830(input_string_ptr);\n      index_var = filename_cmp(undefined_var3,\"__.LIBDEP\");\n      if (index_var != 0) goto code_r0x0010574f;\n      byte_var2 = FUN_00105ae0(ptr_to_str_ptr2,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      struct_param._6_1_ = byte_var2 | struct_param._6_1_;\nLAB_0010577e:\n      ptr_to_str_ptr = ptr_to_str_ptr + 1;\n      string_var1 = *ptr_to_str_ptr;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  input_string_ptr = *ptr_to_str_ptr;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_openr",
                "FUN_00107c10",
                "dcgettext",
                "FUN_00105ae0",
                "xmalloc",
                "__errno_location",
                "FUN_00105af0",
                "lbasename",
                "FUN_00105830",
                "FUN_00107690",
                "stat",
                "filename_cmp",
                "FUN_00102943",
                "FUN_001058b0",
                "strlen",
                "FUN_00103172",
                "FUN_00105870",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "reversed_code_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorStream,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "pErrno",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *pErrno;\n  undefined8 errorMessage;\n  \n  pErrno = __errno_location();\n  if (*pErrno == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(errorMessage);\n  }\n  else {\n    strerror(*pErrno);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "return_one_0010284b"
            },
            "code": "\nundefined8 returnOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "return_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_process_archives_00102c25",
                "param_7": "file_permissions",
                "param_11": "mode",
                "param_12": "archive_size",
                "puVar9": "permissions_ptr",
                "pplVar6": "archive_ptr",
                "iVar2": "error_code",
                "plVar8": "current_archive",
                "uVar5": "error_message",
                "lVar7": "loop_counter",
                "unaff_RBX": "archive_array",
                "sVar11": "bytes_read",
                "__ptr": "buffer",
                "__n": "buffer_size",
                "uVar10": "bytes_processed",
                "piVar3": "errno_ptr",
                "pcVar4": "strerror_result",
                "iVar1": "filename_cmp_result"
            },
            "code": "\n\n\nlong * extractAndProcessArchives_00102c25(void)\n\n{\n  int filename_cmp_result;\n  int error_code;\n  int *errno_ptr;\n  char *strerror_result;\n  undefined8 error_message;\n  long **archive_ptr;\n  void *buffer;\n  size_t buffer_size;\n  long loop_counter;\n  long **archive_array;\n  long *current_archive;\n  undefined4 *permissions_ptr;\n  ulong bytes_processed;\n  size_t bytes_read;\n  undefined4 *file_permissions;\n  __mode_t mode;\n  ulong archive_size;\n  \n  permissions_ptr = file_permissions;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *permissions_ptr = 0;\n    permissions_ptr = permissions_ptr + 1;\n  }\n  archive_ptr = (long **)archive_array[0x1d];\n  if ((long **)archive_array[0x1d] == (long **)0x0) {\n    archive_ptr = archive_array;\n  }\n  error_code = (*(code *)archive_ptr[1][0x3d])();\n  if (error_code != 0) {\n    current_archive = *archive_array;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = FUN_00107690(error_message,current_archive);\n    error_message = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_archive != 0; current_archive = (long *)(*current_archive + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_archive != (undefined8 *)0x0; current_archive = (long *)(*current_archive + 0xf0)) {\n        filename_cmp_result = filename_cmp(*(undefined8 *)*current_archive,error_message);\n        if (filename_cmp_result == 0) {\n          if (error_code != 2) {\n            return current_archive;\n          }\n          return (long *)(*current_archive + 0xf0);\n        }\n      }\n    }\n    return current_archive;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive_array);\n  }\n  else {\n    bytes_processed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_read = archive_size - bytes_processed;\n      if (0x2000 < bytes_read) {\n        bytes_read = 0x2000;\n      }\n      buffer_size = bfd_bread(buffer,bytes_read);\n      if (bytes_read != buffer_size) {\nLAB_00102c78:\n        archive_array = (long **)*archive_array[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(error_message,archive_array);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive_array);\n      }\n      bytes_read = fwrite(buffer,1,buffer_size,DAT_0010d5d8);\n      if (bytes_read != buffer_size) {\n        errno_ptr = __errno_location();\n        strerror_result = strerror(*errno_ptr);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,strerror_result);\n        goto LAB_00102c78;\n      }\n      bytes_processed = bytes_processed + buffer_size;\n    } while (bytes_processed < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  strerror_result = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,mode);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(strerror_result,file_permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00107c80",
                "dcgettext",
                "FUN_00105a20",
                "xmalloc",
                "__errno_location",
                "bfd_bread",
                "FUN_00107690",
                "fwrite",
                "bfd_seek",
                "fclose",
                "free",
                "chmod",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_process_archives_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "stringLength",
                "puVar3": "newString",
                "uVar4": "maxSize",
                "unaff_RBX": "sourcePtr",
                "unaff_RBP": "stackPtr",
                "puVar5": "newStringPtr",
                "bVar6": "flag",
                "auVar7": "returnVal"
            },
            "code": "\nundefined  [16] reverseString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t stringLength;\n  undefined *newString;\n  ulong maxSize;\n  undefined *sourcePtr;\n  long stackPtr;\n  undefined *newStringPtr;\n  byte flag;\n  undefined returnVal [16];\n  undefined8 unaff_retaddr;\n  \n  flag = 0;\n  stringLength = strlen(inputString);\n  maxSize = (ulong)*(byte *)(*(long *)(stackPtr + 8) + 0x1e);\n  newString = sourcePtr;\n  if (maxSize < stringLength) {\n    newString = (undefined *)xmalloc(maxSize + 1);\n    lVar1 = *(long *)(stackPtr + 8);\n    newStringPtr = newString;\n    for (maxSize = (ulong)*(byte *)(lVar1 + 0x1e); maxSize != 0; maxSize = maxSize - 1) {\n      *newStringPtr = *sourcePtr;\n      sourcePtr = sourcePtr + (ulong)flag * -2 + 1;\n      newStringPtr = newStringPtr + (ulong)flag * -2 + 1;\n    }\n    newString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnVal._8_8_ = unaff_retaddr;\n  returnVal._0_8_ = newString;\n  return returnVal;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "reverse_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_swap_00102f08",
                "unaff_RBX": "inputStringPtr",
                "unaff_R12": "outputPtr"
            },
            "code": "\nundefined8 printAndSwap_00102f08(void)\n\n{\n  undefined8 *inputStringPtr;\n  undefined8 *outputPtr;\n  \n  printf(\"a - %s\\n\",*inputStringPtr);\n  inputStringPtr[0x1e] = *outputPtr;\n  *outputPtr = inputStringPtr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_swap_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "arg1",
                "param_2": "filePaths",
                "param_3": "flag",
                "ppcVar1": "ptrArr1",
                "uVar2": "undefinedVar2",
                "bVar3": "byteVar3",
                "iVar4": "indexVar",
                "sVar5": "sizeVar",
                "piVar6": "ptrIndexVar",
                "pcVar7": "path",
                "pcVar8": "basename",
                "uVar9": "var9",
                "pcVar10": "currentPath",
                "__s": "basename2",
                "lVar11": "ptrVar11",
                "lVar12": "ptrVar12",
                "uVar13": "resultVar",
                "uVar14": "ulongVar",
                "ppcVar15": "ptrArr2",
                "ppcVar16": "ptrArr3",
                "uVar17": "uintVar",
                "ppcVar18": "ptrArr4",
                "bVar19": "boolVar",
                "bVar20": "byteVar20",
                "local_15a": "localVar",
                "auStack_158": "stackVar",
                "lStack_100": "lStackVar",
                "sStack_c8": "statVar"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long arg1,char **filePaths,char flag)\n\n{\n  char **ptrArr1;\n  undefined undefinedVar2;\n  byte byteVar3;\n  int indexVar;\n  size_t sizeVar;\n  int *ptrIndexVar;\n  char *path;\n  char *basename;\n  undefined8 var9;\n  char *currentPath;\n  char *basename2;\n  long ptrVar11;\n  long ptrVar12;\n  undefined8 resultVar;\n  ulong ulongVar;\n  char **ptrArr2;\n  char **ptrArr3;\n  uint uintVar;\n  char **ptrArr4;\n  bool boolVar;\n  byte byteVar20;\n  byte localVar;\n  undefined stackVar [88];\n  long lStackVar;\n  stat statVar;\n  \n  byteVar20 = 0;\n  ptrArr1 = (char **)(arg1 + 0xf0);\n  localVar = 0;\n  if (filePaths == (char **)0x0) {\n    resultVar = FUN_00102943();\n    return resultVar;\n  }\n  do {\n    currentPath = *filePaths;\njoined_r0x001055aa:\n    if (currentPath == (char *)0x0) {\n      if (localVar != 0) {\n        resultVar = FUN_001058b0(arg1);\n        return resultVar;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    ptrArr2 = *(char ***)(arg1 + 0xf0);\n    ptrArr3 = ptrArr1;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uintVar = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      ptrVar12 = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        ptrVar11 = ptrVar12;\n        ptrVar12 = *(long *)(ptrVar11 + 0xf0);\n      } while (ptrVar12 != 0);\n      ptrArr3 = (char **)(ptrVar11 + 0xf0);\n      currentPath = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          resultVar = FUN_00105830(currentPath,arg1);\n          indexVar = filename_cmp(resultVar,\"__.LIBDEP\");\n          if (indexVar == 0) {\n            byteVar3 = FUN_00105ae0(ptrArr3,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localVar = byteVar3 | localVar;\n            goto LAB_0010577e;\n          }\n          currentPath = *filePaths;\n        }\n        undefinedVar2 = DAT_0010d5f8;\n        boolVar = DAT_0010d60c != 0;\n        ptrVar12 = bfd_openr(currentPath,DAT_0010d5f0);\n        if (ptrVar12 != 0) {\n          filePaths = filePaths + 1;\n          byteVar3 = FUN_00105af0(ptrArr3,ptrVar12,(uint)boolVar,undefinedVar2);\n          localVar = localVar | byteVar3;\n          currentPath = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(currentPath,0);\n        uintVar = (uint)boolVar;\nLAB_001028f5:\n        resultVar = DAT_0010d638;\n        if (uintVar == 3) {\n          ptrVar12 = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*ptrArr3 != (undefined8 *)0x0;\n              ptrArr3 = (char **)(*ptrArr3 + 0xf0)) {\n            indexVar = filename_cmp(*(undefined8 *)*ptrArr3,resultVar);\n            if (indexVar == 0) {\n              if (uintVar == 2) {\n                ptrArr3 = (char **)(*ptrArr3 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentPath = *filePaths;\n      } while( true );\n    }\n    ptrArr4 = ptrArr1;\n    if (ptrArr2 == (char **)0x0) {\n      uintVar = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentPath = (char *)lbasename(*ptrArr2);\n      basename = currentPath;\n      if (DAT_0010d5fa != '\\0') {\n        sizeVar = strlen(currentPath);\n        ulongVar = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (ulongVar < sizeVar) {\n          basename = (char *)xmalloc(ulongVar + 1);\n          ptrVar12 = *(long *)(arg1 + 8);\n          path = basename;\n          for (ulongVar = (ulong)*(byte *)(ptrVar12 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *path = *currentPath;\n            currentPath = currentPath + (ulong)byteVar20 * -2 + 1;\n            path = path + (ulong)byteVar20 * -2 + 1;\n          }\n          basename[*(byte *)(ptrVar12 + 0x1e)] = '\\0';\n        }\n        path = *filePaths;\n        currentPath = basename;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      path = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basename2 = (char *)lbasename(path);\n      if (DAT_0010d5fa != '\\0') {\n        sizeVar = strlen(basename2);\n        ulongVar = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        path = basename2;\n        currentPath = basename;\n        if (ulongVar < sizeVar) {\n          path = (char *)xmalloc(ulongVar + 1);\n          ptrVar12 = *(long *)(arg1 + 8);\n          basename = path;\n          for (ulongVar = (ulong)*(byte *)(ptrVar12 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *basename = *basename2;\n            basename2 = basename2 + (ulong)byteVar20 * -2 + 1;\n            basename = basename + (ulong)byteVar20 * -2 + 1;\n          }\n          path[*(byte *)(ptrVar12 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      indexVar = filename_cmp(basename2,basename);\n      if (indexVar == 0) goto LAB_00102993;\nLAB_00105639:\n      ptrArr4 = ptrArr2 + 0x1e;\n      ptrArr2 = (char **)ptrArr2[0x1e];\n      if (ptrArr2 == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    path = *filePaths;\n    currentPath = *ptrArr2;\nLAB_00102980:\n    indexVar = filename_cmp(path,currentPath);\n    if (indexVar != 0) goto LAB_00105639;\nLAB_00102993:\n    if (ptrArr2[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      indexVar = stat(*filePaths,&statVar);\n      if (indexVar != 0) {\n        ptrIndexVar = __errno_location();\n        if (*ptrIndexVar != 2) {\n          FUN_00107c10(*filePaths);\nLAB_00102b7e:\n          currentPath = *ptrArr2;\n          resultVar = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(resultVar,currentPath);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      ptrArr3 = (char **)ptrArr2[0x1d];\n      if ((char **)ptrArr2[0x1d] == (char **)0x0) {\n        ptrArr3 = ptrArr2;\n      }\n      indexVar = (**(code **)(ptrArr3[1] + 0x1e8))(ptrArr2,stackVar);\n      if (indexVar != 0) goto LAB_00102b7e;\n      if (statVar.st_mtim.tv_sec <= lStackVar) goto LAB_0010577e;\n    }\n    resultVar = FUN_00105870(ptrArr1,2,*ptrArr2);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentPath = *filePaths;\n      boolVar = DAT_0010d60c != 0;\n      ptrVar12 = bfd_openr(currentPath,DAT_0010d5f0);\n      if (ptrVar12 == 0) {\n        FUN_00107c10(currentPath,0);\n        goto LAB_00102b3e;\n      }\n      byteVar3 = FUN_00103172(resultVar,ptrVar12,boolVar);\n    }\n    else {\n      var9 = FUN_00105830(*filePaths,arg1);\n      indexVar = filename_cmp(var9,\"__.LIBDEP\");\n      if (indexVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar3 = FUN_00103172(resultVar,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byteVar3 != 0) {\n      *ptrArr4 = *(char **)(*ptrArr4 + 0xf0);\n      localVar = byteVar3;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 76763,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}