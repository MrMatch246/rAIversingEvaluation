{
    "functions": {
        "putc": {
            "renaming": {}, 
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n", 
            "called": [
                "putc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102130", 
            "calling": [
                "FUN_00102e20", 
                "FUN_001024f0", 
                "FUN_00102380"
            ], 
            "imported": false, 
            "current_name": "putc"
        }, 
        "fflush": {
            "renaming": {}, 
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n", 
            "called": [
                "fflush"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102180", 
            "calling": [
                "FUN_00102e20", 
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "fflush"
        }, 
        "_FINI_0": {
            "renaming": {}, 
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00105120 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00105100);\n  FUN_00102430();\n  DAT_00105120 = 1;\n  return;\n}\n\n", 
            "called": [
                "__cxa_finalize", 
                "FUN_00102430"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001024a0", 
            "calling": [], 
            "imported": false, 
            "current_name": "_FINI_0"
        }, 
        "ftell": {
            "renaming": {}, 
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n", 
            "called": [
                "ftell"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102150", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "ftell"
        }, 
        "dcgettext": {
            "renaming": {}, 
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n", 
            "called": [
                "dcgettext"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102090", 
            "calling": [
                "FUN_0010225e", 
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "dcgettext"
        }, 
        "bfd_set_error_program_name": {
            "renaming": {}, 
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n", 
            "called": [
                "bfd_set_error_program_name"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021b0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "bfd_set_error_program_name"
        }, 
        "fputc": {
            "renaming": {}, 
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n", 
            "called": [
                "fputc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102120", 
            "calling": [
                "FUN_0010225e"
            ], 
            "imported": false, 
            "current_name": "fputc"
        }, 
        "strchr": {
            "renaming": {}, 
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n", 
            "called": [
                "strchr"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020c0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "strchr"
        }, 
        "FUN_0010225e": {
            "renaming": {}, 
            "code": "\n\n\nvoid FUN_0010225e(FILE *param_1,int param_2)\n\n{\n  char *__format;\n  undefined8 *puVar1;\n  \n  fprintf(param_1,\"Usage: %s [options] [mangled names]\\n\",DAT_0010d148);\n  fprintf(param_1,\"Options are:\\n  [-_|--strip-underscore]     Ignore first leading underscore%s\\n\",\n          \"\");\n  fprintf(param_1,\"  [-n|--no-strip-underscore]  Do not ignore a leading underscore%s\\n\",\n          \" (default)\");\n  fwrite(\"  [-p|--no-params]            Do not display function arguments\\n  [-i|--no-verbose]           Do not show implementation details (if any)\\n  [-R|--recurse-limit]        Enable a limit on recursion whilst demangling.  [Default]\\n  ]-r|--no-recurse-limit]     Disable a limit on recursion whilst demangling\\n  [-t|--types]                Also attempt to demangle type encodings\\n  [-s|--format \"\n         ,1,0x184,param_1);\n  fprintf(param_1,\"{%s\",_libiberty_demanglers);\n  puVar1 = (undefined8 *)&libiberty_demanglers;\n  while (*(int *)(puVar1 + 4) != 0) {\n    fprintf(param_1,\",%s\",puVar1[3]);\n    puVar1 = puVar1 + 3;\n  }\n  fputc(0x7d,param_1);\n  fwrite(&DAT_001035e8,1,2,param_1);\n  fwrite(\"  [@<file>]                   Read extra options from <file>\\n  [-h|--help]                 Display this information\\n  [-v|--version]              Show the version information\\nDemangled names are displayed to stdout.\\nIf a name cannot be demangled it is just echoed to stdout.\\nIf no names are provided on the command line, stdin is read.\\n\"\n         ,1,0x150,param_1);\n  if (param_2 == 0) {\n    __format = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(param_1,__format,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(param_2);\n}\n\n", 
            "called": [
                "fputc", 
                "exit", 
                "exit", 
                "memmove", 
                "fwrite", 
                "fprintf", 
                "dcgettext", 
                "bfd_set_error_program_name"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x0010225e", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "FUN_0010225e"
        }, 
        "_DT_INIT": {
            "renaming": {}, 
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n", 
            "called": [
                "__gmon_start__"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102000", 
            "calling": [], 
            "imported": false, 
            "current_name": "_DT_INIT"
        }, 
        "fseek": {
            "renaming": {}, 
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n", 
            "called": [
                "fseek"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102190", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "fseek"
        }, 
        "cplus_demangle": {
            "renaming": {}, 
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n", 
            "called": [
                "cplus_demangle"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021a0", 
            "calling": [
                "FUN_00102380"
            ], 
            "imported": false, 
            "current_name": "cplus_demangle"
        }, 
        "FUN_001024f0": {
            "renaming": {}, 
            "code": "\n\n\nundefined8 FUN_001024f0(int param_1,long *param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  byte bVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  FILE *__stream;\n  size_t __n;\n  byte *__s;\n  size_t sVar10;\n  byte *__ptr;\n  long lVar11;\n  long *plVar12;\n  long *__src;\n  long *plVar13;\n  undefined8 uVar14;\n  char *pcVar15;\n  byte *pbVar16;\n  long lVar17;\n  undefined **ppuVar18;\n  long lVar19;\n  byte *pbVar20;\n  ulong unaff_R13;\n  int local_110;\n  int local_10c;\n  size_t local_108;\n  long local_100;\n  stat local_c8;\n  \n  DAT_0010d148 = *param_2;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d148);\n  plVar12 = param_2;\n  if (1 < param_1) {\n    local_10c = 2000;\n    unaff_R13 = 1;\n    local_110 = 0;\n    do {\n      iVar9 = (int)unaff_R13;\n      lVar17 = (long)iVar9;\n      if (*(char *)plVar12[lVar17] == '@') {\n        local_10c = local_10c + -1;\n        if (local_10c == 0) goto LAB_00102bdd;\n        pcVar15 = (char *)plVar12[lVar17] + 1;\n        iVar7 = stat(pcVar15,&local_c8);\n        if (iVar7 < 0) goto LAB_00102900;\n        if ((local_c8.st_mode & 0xf000) == 0x4000) {\n          lVar17 = *plVar12;\n          pcVar15 = \"%s: error: @-file refers to a directory\\n\";\n          do {\n            fprintf(_stderr,pcVar15,lVar17);\n            xexit(1);\nLAB_00102bdd:\n            lVar17 = *plVar12;\n            pcVar15 = \"%s: error: too many @-files encountered\\n\";\n          } while( true );\n        }\n        __stream = fopen(pcVar15,\"r\");\n        if (__stream == (FILE *)0x0) goto LAB_00102900;\n        iVar7 = fseek(__stream,0,2);\n        if (((iVar7 == -1) || (__n = ftell(__stream), __n == 0xffffffffffffffff)) ||\n           (iVar7 = fseek(__stream,0,0), iVar7 == -1)) {\nLAB_001029a0:\n          fclose(__stream);\n          if (iVar9 + 1 < param_1) goto LAB_0010290d;\n          break;\n        }\n        __s = (byte *)xmalloc(__n + 1);\n        sVar10 = fread(__s,1,__n,__stream);\n        if ((__n != sVar10) && (iVar7 = ferror(__stream), iVar7 != 0)) {\n          free(__s);\n          goto LAB_001029a0;\n        }\n        __s[sVar10] = 0;\n        bVar6 = *__s;\n        pbVar16 = __s;\n        if (bVar6 != 0) {\nLAB_00102680:\n          if (((&_sch_istable)[(ulong)bVar6 * 2] & 0x40) != 0) goto LAB_00102670;\n          strlen((char *)__s);\n          __ptr = (byte *)xmalloc();\n          __src = (long *)0x0;\n          iVar7 = 0;\n          bVar3 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_100 = 0;\n          pbVar16 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar16 * 2] & 0x40) != 0) {\n              pbVar16 = pbVar16 + 1;\n            }\n            if ((iVar7 == 0) || (iVar7 + -1 <= (int)local_100)) {\n              if (__src == (long *)0x0) {\n                iVar7 = 8;\n                __src = (long *)xmalloc(0x40);\n              }\n              else {\n                iVar7 = iVar7 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar7 << 3);\n              }\n              plVar13 = __src + local_100;\n              *plVar13 = 0;\n            }\n            else {\n              plVar13 = __src + local_100;\n            }\n            bVar6 = *pbVar16;\n            pbVar20 = __ptr;\n            while (bVar6 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar6 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar3))) {\n                  bVar4 = false;\n                  bVar3 = false;\n                  bVar5 = false;\n                  goto LAB_0010276f;\n                }\n                if (!bVar4) break;\n                pbVar16 = pbVar16 + 1;\n                *pbVar20 = bVar6;\n                pbVar20 = pbVar20 + 1;\n                bVar4 = false;\n                bVar6 = *pbVar16;\n                if (bVar6 == 0) goto LAB_0010276f;\n              }\n              if (bVar6 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar6 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_001028e1:\n                  *pbVar20 = bVar6;\n                  pbVar20 = pbVar20 + 1;\n                }\n              }\n              else if (bVar3) {\n                if (bVar6 != 0x22) goto LAB_001028e1;\n                bVar3 = false;\n              }\n              else if (bVar6 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar6 != 0x22) goto LAB_001028e1;\n                bVar3 = true;\n              }\n              pbVar1 = pbVar16 + 1;\n              pbVar16 = pbVar16 + 1;\n              bVar6 = *pbVar1;\n            }\nLAB_0010276f:\n            *pbVar20 = 0;\n            lVar11 = xstrdup(__ptr);\n            *plVar13 = lVar11;\n            __src[local_100 + 1] = 0;\n            bVar6 = *pbVar16;\n            bVar2 = (&_sch_istable)[(ulong)bVar6 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar6 = pbVar16[1];\n              pbVar16 = pbVar16 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar6 * 2];\n            }\n            local_100 = local_100 + 1;\n          } while (bVar6 != 0);\n          free(__ptr);\n          plVar13 = plVar12;\n          if (param_2 == plVar12) goto LAB_00102adb;\n          goto LAB_00102807;\n        }\nLAB_00102abe:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == plVar12) {\nLAB_00102adb:\n          if (*plVar12 == 0) {\n            iVar7 = 0;\n          }\n          else {\n            lVar11 = 1;\n            do {\n              iVar7 = (int)lVar11;\n              plVar13 = plVar12 + lVar11;\n              lVar11 = lVar11 + 1;\n            } while (*plVar13 != 0);\n          }\n          lVar19 = 0;\n          plVar13 = (long *)xmalloc((long)(iVar7 + 1) << 3);\n          lVar11 = *plVar12;\n          while (lVar11 != 0) {\n            uVar14 = xstrdup();\n            *(undefined8 *)((long)plVar13 + lVar19) = uVar14;\n            lVar19 = lVar19 + 8;\n            lVar11 = *(long *)((long)plVar12 + lVar19);\n          }\n          *(undefined8 *)((long)plVar13 + lVar19) = 0;\nLAB_00102807:\n          plVar12 = plVar13;\n          if (*__src == 0) goto LAB_00102ba3;\n          lVar11 = 0;\n          do {\n            lVar11 = lVar11 + 1;\n          } while (__src[lVar11] != 0);\n          local_108 = lVar11 * 8;\n        }\n        else {\nLAB_00102ba3:\n          lVar11 = 0;\n          local_108 = 0;\n        }\n        free((void *)plVar12[lVar17]);\n        plVar12 = (long *)xrealloc(plVar12,(lVar11 + 1 + (long)param_1) * 8);\n        iVar7 = param_1 + -1 + (int)lVar11;\n        memmove(plVar12 + lVar17 + lVar11,plVar12 + lVar17 + 1,(long)(param_1 - iVar9) << 3);\n        memcpy(plVar12 + lVar17,__src,local_108);\n        free(__src);\n        free(__s);\n        fclose(__stream);\n        uVar8 = local_110 + 1;\n        unaff_R13 = lVar17 * 8;\n        param_1 = iVar7;\n        if (iVar7 <= (int)uVar8) break;\n      }\n      else {\nLAB_00102900:\n        if (param_1 <= iVar9 + 1) break;\nLAB_0010290d:\n        uVar8 = iVar9 + 1;\n        local_110 = iVar9;\n      }\n      unaff_R13 = (ulong)uVar8;\n    } while( true );\n  }\n  ppuVar18 = &PTR_s_strip_underscore_00104be0;\n  while (iVar9 = getopt_long(param_1,plVar12,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0),\n        iVar9 != -1) {\n    switch(iVar9) {\n    case 0x3f:\nswitchD_001029f9_caseD_3f:\n      FUN_0010225e(_stderr,1);\n    case 0x5f:\nswitchD_001029f9_caseD_5f:\n      _DAT_0010d140 = 1;\n      break;\n    default:\n      do {\n        iVar9 = getopt_long(param_1,plVar12,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0);\n        if (iVar9 == -1) goto LAB_00102a6c;\n        switch(iVar9) {\n        case 0x3f:\n          goto switchD_001029f9_caseD_3f;\n        case 0x52:\n          goto switchD_001029f9_caseD_52;\n        case 0x5f:\n          goto switchD_001029f9_caseD_5f;\n        case 0x68:\n          goto switchD_001029f9_caseD_68;\n        case 0x69:\n          goto switchD_001029f9_caseD_69;\n        case 0x6e:\n          goto switchD_001029f9_caseD_6e;\n        case 0x70:\n          goto switchD_001029f9_caseD_70;\n        case 0x72:\n          goto switchD_001029f9_caseD_72;\n        case 0x73:\n          goto switchD_001029f9_caseD_73;\n        case 0x74:\n          goto switchD_001029f9_caseD_74;\n        case 0x76:\n          goto switchD_001029f9_caseD_76;\n        }\n      } while( true );\n    case 0x52:\nswitchD_001029f9_caseD_52:\n      DAT_00105108 = DAT_00105108 & 0xfffbffff;\n      break;\n    case 0x68:\nswitchD_001029f9_caseD_68:\n      FUN_0010225e(_stdout,0);\n    case 0x74:\nswitchD_001029f9_caseD_74:\n      DAT_00105108 = DAT_00105108 | 0x10;\n      break;\n    case 0x69:\nswitchD_001029f9_caseD_69:\n      DAT_00105108 = DAT_00105108 & 0xfffffff7;\n      break;\n    case 0x6e:\nswitchD_001029f9_caseD_6e:\n      _DAT_0010d140 = 0;\n      break;\n    case 0x70:\nswitchD_001029f9_caseD_70:\n      DAT_00105108 = DAT_00105108 & 0xfffffffe;\n      break;\n    case 0x72:\nswitchD_001029f9_caseD_72:\n      DAT_00105108 = DAT_00105108 | 0x40000;\n      break;\n    case 0x73:\nswitchD_001029f9_caseD_73:\n      iVar9 = cplus_demangle_name_to_style(_optarg);\n      if (iVar9 == 0) {\n        fprintf(_stderr,\"%s: unknown demangling style `%s\\'\\n\",DAT_0010d148,_optarg);\n        return 1;\n      }\n      cplus_demangle_set_style(iVar9);\n      break;\n    case 0x76:\nswitchD_001029f9_caseD_76:\n      printf(\"GNU %s %s\\n\",\"c++filt\",\"(GNU Binutils for Debian) 2.40\");\n      pcVar15 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(pcVar15);\n      pcVar15 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(pcVar15);\n                    \n      exit(0);\n    }\n  }\nLAB_00102a6c:\n  if (_optind < param_1) {\n    do {\n      FUN_00102380(plVar12[_optind]);\n      putc(10,_stdout);\n      _optind = _optind + 1;\n    } while (_optind < param_1);\n  }\n  else {\n    if (_current_demangling_style == 0x8000) {\nLAB_00102c76:\n      ppuVar18 = (undefined **)&stdout;\n      do {\n        unaff_R13 = 0;\n        uVar8 = getc(_stdin);\n        while( true ) {\n          plVar12 = (long *)(unaff_R13 & 0xffffffff);\n          if (uVar8 == 0xffffffff) goto LAB_00102d0d;\n          if ((((&_sch_istable)[(ulong)(uVar8 & 0xff) * 2] & 0x8c) == 0) &&\n             (pcVar15 = strchr(\"_$.\",uVar8), pcVar15 == (char *)0x0)) {\n            if ((int)plVar12 != 0) goto LAB_00102d6f;\n            goto LAB_00102d47;\n          }\n          if (unaff_R13 == 0x7ffe) break;\n          (&DAT_00105140)[unaff_R13] = (char)uVar8;\n          unaff_R13 = unaff_R13 + 1;\n          uVar8 = getc(_stdin);\n        }\n        plVar12 = (long *)0x7ffe;\nLAB_00102d6f:\n        *(undefined *)(plVar12 + 0x20a28) = 0;\n        FUN_00102380(&DAT_00105140);\nLAB_00102d47:\n        putc(uVar8,_stdout);\n        if (uVar8 == 10) {\n          fflush(_stdout);\n        }\n      } while( true );\n    }\n    if (_current_demangling_style < 0x8001) {\n      if (((_current_demangling_style == 0x100) || (_current_demangling_style == 0x4000)) ||\n         (_current_demangling_style == 4)) goto LAB_00102c76;\n    }\n    else if ((_current_demangling_style - 0x10000U & 0xfffeffff) == 0) goto LAB_00102c76;\n    FUN_00102e20(\"Internal error: no symbol alphabet for current style\");\nLAB_00102d0d:\n    if ((int)unaff_R13 != 0) {\n      *(undefined *)(plVar12 + 0x20a28) = 0;\n      FUN_00102380();\n    }\n    fflush((FILE *)*ppuVar18);\n  }\n  return 0;\nLAB_00102670:\n  bVar6 = pbVar16[1];\n  pbVar16 = pbVar16 + 1;\n  if (bVar6 == 0) goto LAB_00102abe;\n  goto LAB_00102680;\n}\n\n", 
            "called": [
                "xstrdup", 
                "fseek", 
                "memmove", 
                "xrealloc", 
                "cplus_demangle_set_style", 
                "cplus_demangle_name_to_style", 
                "fclose", 
                "FUN_00102e20", 
                "bfd_set_error_program_name", 
                "xmalloc", 
                "strlen", 
                "FUN_0010225e", 
                "printf", 
                "getc", 
                "fprintf", 
                "fopen", 
                "ferror", 
                "stat", 
                "dcgettext", 
                "FUN_00102380", 
                "putc", 
                "fflush", 
                "xmalloc_set_program_name", 
                "ftell", 
                "xexit", 
                "exit", 
                "fread", 
                "strchr", 
                "memcpy", 
                "free", 
                "getopt_long"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x001024f0", 
            "calling": [
                "entry"
            ], 
            "imported": false, 
            "current_name": "FUN_001024f0"
        }, 
        "printf": {
            "renaming": {}, 
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n", 
            "called": [
                "printf"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020d0", 
            "calling": [
                "FUN_001024f0", 
                "FUN_00102380"
            ], 
            "imported": false, 
            "current_name": "printf"
        }, 
        "_INIT_0": {
            "renaming": {}, 
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUN_00102460();\n  return;\n}\n\n", 
            "called": [
                "FUN_00102460"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001024e0", 
            "calling": [], 
            "imported": false, 
            "current_name": "_INIT_0"
        }, 
        "strlen": {
            "renaming": {}, 
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n", 
            "called": [
                "strlen"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020a0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "strlen"
        }, 
        "cplus_demangle_set_style": {
            "renaming": {}, 
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n", 
            "called": [
                "cplus_demangle_set_style"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102070", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "cplus_demangle_set_style"
        }, 
        "xmalloc": {
            "renaming": {}, 
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n", 
            "called": [
                "xmalloc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020f0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "xmalloc"
        }, 
        "FUN_00102230": {
            "renaming": {}, 
            "code": "\n\n\nvoid FUN_00102230(ulong param_1)\n\n{\n  byte in_AL;\n  void *__ptr;\n  char *unaff_RBX;\n  \n  if (unaff_RBX[in_AL] == '_') {\n    param_1 = (ulong)((int)param_1 + 1);\n  }\n  __ptr = (void *)cplus_demangle(unaff_RBX + param_1,DAT_00105108);\n  if (__ptr != (void *)0x0) {\n    if (*unaff_RBX == '.') {\n      putc(0x2e,_stdout);\n    }\n    printf(\"%s\",__ptr);\n    free(__ptr);\n    return;\n  }\n  printf(\"%s\");\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102230", 
            "calling": [
                "FUN_00102380"
            ], 
            "imported": false, 
            "current_name": "FUN_00102230"
        }, 
        "FUN_00102430": {
            "renaming": {}, 
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102443) */\n/* WARNING: Removing unreachable block (ram,0x0010244f) */\n\nvoid FUN_00102430(void)\n\n{\n  return;\n}\n\n", 
            "called": [
                "_ITM_deregisterTMCloneTable"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102430", 
            "calling": [
                "_FINI_0"
            ], 
            "imported": false, 
            "current_name": "FUN_00102430"
        }, 
        "free": {
            "renaming": {}, 
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n", 
            "called": [
                "free"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102040", 
            "calling": [
                "FUN_001024f0", 
                "FUN_00102380"
            ], 
            "imported": false, 
            "current_name": "free"
        }, 
        "xrealloc": {
            "renaming": {}, 
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n", 
            "called": [
                "xrealloc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020e0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "xrealloc"
        }, 
        "xexit": {
            "renaming": {}, 
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n", 
            "called": [
                "xexit"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021e0", 
            "calling": [
                "FUN_00102e20", 
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "xexit"
        }, 
        "xmalloc_set_program_name": {
            "renaming": {}, 
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n", 
            "called": [
                "xmalloc_set_program_name"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102100", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "xmalloc_set_program_name"
        }, 
        "__cxa_finalize": {
            "renaming": {}, 
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n", 
            "called": [
                "__cxa_finalize"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102220", 
            "calling": [
                "_FINI_0"
            ], 
            "imported": false, 
            "current_name": "__cxa_finalize"
        }, 
        "fopen": {
            "renaming": {}, 
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n", 
            "called": [
                "fopen"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021d0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "fopen"
        }, 
        "stat": {
            "renaming": {}, 
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n", 
            "called": [
                "stat"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102160", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "stat"
        }, 
        "_DT_FINI": {
            "renaming": {}, 
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102f00", 
            "calling": [], 
            "imported": false, 
            "current_name": "_DT_FINI"
        }, 
        "getopt_long": {
            "renaming": {}, 
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n", 
            "called": [
                "getopt_long"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020b0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "getopt_long"
        }, 
        "fclose": {
            "renaming": {}, 
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n", 
            "called": [
                "fclose"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102080", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "fclose"
        }, 
        "xstrdup": {
            "renaming": {}, 
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n", 
            "called": [
                "xstrdup"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102110", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "xstrdup"
        }, 
        "fwrite": {
            "renaming": {}, 
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n", 
            "called": [
                "fwrite"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102200", 
            "calling": [
                "FUN_00102e20", 
                "FUN_0010225e"
            ], 
            "imported": false, 
            "current_name": "fwrite"
        }, 
        "cplus_demangle_name_to_style": {
            "renaming": {}, 
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n", 
            "called": [
                "cplus_demangle_name_to_style"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102030", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "cplus_demangle_name_to_style"
        }, 
        "fprintf": {
            "renaming": {}, 
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n", 
            "called": [
                "fprintf"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102140", 
            "calling": [
                "FUN_00102e20", 
                "FUN_0010225e", 
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "fprintf"
        }, 
        "fread": {
            "renaming": {}, 
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n", 
            "called": [
                "fread"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102060", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "fread"
        }, 
        "ferror": {
            "renaming": {}, 
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n", 
            "called": [
                "ferror"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102050", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "ferror"
        }, 
        "exit": {
            "renaming": {}, 
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n", 
            "called": [
                "exit"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021f0", 
            "calling": [
                "FUN_0010225e", 
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "exit"
        }, 
        "entry": {
            "renaming": {}, 
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001024f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
            "called": [
                "__libc_start_main", 
                "FUN_001024f0"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102400", 
            "calling": [], 
            "imported": false, 
            "current_name": "entry"
        }, 
        "memcpy": {
            "renaming": {}, 
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n", 
            "called": [
                "memcpy"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102170", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "memcpy"
        }, 
        "memmove": {
            "renaming": {}, 
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n", 
            "called": [
                "memmove"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021c0", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "memmove"
        }, 
        "FUN_00102e20": {
            "renaming": {}, 
            "code": "\n\n\nvoid FUN_00102e20(void)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010d148);\n  fwrite(\"Internal error: no symbol alphabet for current style\",1,0x34,_stderr);\n  putc(10,_stderr);\n  xexit(1);\n  return;\n}\n\n", 
            "called": [
                "putc", 
                "fflush", 
                "xexit", 
                "fprintf", 
                "fwrite"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102e20", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "FUN_00102e20"
        }, 
        "getc": {
            "renaming": {}, 
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n", 
            "called": [
                "getc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102210", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "getc"
        }, 
        "FUN_00102380": {
            "renaming": {}, 
            "code": "\n\n\nvoid FUN_00102380(char *param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  uint uVar1;\n  void *__ptr;\n  ulong uVar2;\n  \n  uVar1 = (uint)(*param_1 == '.' || *param_1 == '$');\n  uVar2 = (ulong)uVar1;\n  if ((_DAT_0010d140 != 0) && (param_1[uVar1] == '_')) {\n    uVar2 = (ulong)(uVar1 + 1);\n  }\n  __ptr = (void *)cplus_demangle(param_1 + uVar2,DAT_00105108);\n  if (__ptr != (void *)0x0) {\n    if (*param_1 == '.') {\n      putc(0x2e,_stdout);\n    }\n    printf(\"%s\",__ptr);\n    free(__ptr);\n    return;\n  }\n  printf(\"%s\",param_1,param_4);\n  return;\n}\n\n", 
            "called": [
                "putc", 
                "printf", 
                "free", 
                "cplus_demangle", 
                "FUN_00102230"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102380", 
            "calling": [
                "FUN_001024f0"
            ], 
            "imported": false, 
            "current_name": "FUN_00102380"
        }, 
        "FUN_00102020": {
            "renaming": {}, 
            "code": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102020", 
            "calling": [], 
            "imported": false, 
            "current_name": "FUN_00102020"
        }, 
        "FUN_00102460": {
            "renaming": {}, 
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102484) */\n/* WARNING: Removing unreachable block (ram,0x00102490) */\n\nvoid FUN_00102460(void)\n\n{\n  return;\n}\n\n", 
            "called": [
                "_ITM_registerTMCloneTable"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102460", 
            "calling": [
                "_INIT_0"
            ], 
            "imported": false, 
            "current_name": "FUN_00102460"
        }
    }, 
    "locked_functions": [], 
    "used_tokens": 0, 
    "layers": []
}