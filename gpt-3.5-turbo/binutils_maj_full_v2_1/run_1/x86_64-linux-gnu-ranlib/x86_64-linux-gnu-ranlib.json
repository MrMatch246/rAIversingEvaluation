{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "0x0": {
                    "target_address": 1
                },
                "FUN_00102020": {
                    "call_indirect_function": 2,
                    "execute_binary_function": 1,
                    "execute_code": 2,
                    "execute_dynamic_code": 1,
                    "execute_function": 4,
                    "execute_function_at_address": 1,
                    "execute_indirect_call": 1,
                    "execute_indirect_function": 4,
                    "execute_indirect_jump": 13,
                    "execute_pointer_function": 1,
                    "perform_indirect_jump": 1
                },
                "PTR_0": {
                    "function_pointer": 1
                },
                "PTR_undefined": {
                    "dynamic_code_pointer": 1,
                    "target_address": 1
                },
                "code": {
                    "function_pointer": 2
                },
                "code_ptr": {
                    "function_ptr": 1
                },
                "original_function_name": {
                    "execute_function": 1
                },
                "original_parameter_name_1": {
                    "param_1": 1
                },
                "original_variable_name_1": {
                    "temp": 1
                },
                "undefined": {
                    "code_pointer": 1,
                    "function_address": 1,
                    "function_pointer": 2,
                    "function_ptr": 3,
                    "indirect_address": 1,
                    "ptr_to_function": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_ptr *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025a0": {
            "additional_data": {
                "FUN_001025a0": {
                    "display_file_not_found_error": 1,
                    "file_not_found_error": 3,
                    "find_file": 2,
                    "handle_file_error": 13,
                    "handle_file_not_found_error": 4,
                    "print_error_message": 5,
                    "print_error_message_if_file_not_found": 1,
                    "print_file_error": 1,
                    "process_file_error": 1
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_localized_message": 1
                },
                "piVar1": {
                    "errno_location": 2,
                    "errno_pointer": 2,
                    "errno_ptr": 16,
                    "error_code": 7,
                    "error_code_ptr": 1,
                    "error_pointer": 2,
                    "error_ptr": 1
                },
                "print_formatted_error_message_00107920": {
                    "print_error_message": 2,
                    "print_formatted_error": 2,
                    "print_formatted_error_message": 4
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 29,
                    "error_msg": 1
                }
            },
            "called": [
                "FUN_00107920",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_001052a0"
            ],
            "code": "\nundefined8 handle_file_not_found_error_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_formatted_error_message(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_formatted_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_not_found_error_001025a0",
            "entrypoint": "0x001025a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025a0": "handle_file_not_found_error_001025a0",
                "dcgettext": "get_error_message",
                "piVar1": "errno_ptr",
                "print_formatted_error_message_00107920": "print_formatted_error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010266f": {
            "additional_data": {
                "FUN_0010266f": {
                    "print_supported_targets": 31
                },
                "__ptr": {
                    "target_list": 29,
                    "target_list_pointer": 1,
                    "target_list_ptr": 1
                },
                "lVar1": {
                    "current": 1,
                    "current_element": 1,
                    "current_target": 6,
                    "current_target_name": 2,
                    "current_target_val": 1,
                    "current_target_value": 10,
                    "target": 2,
                    "target_address": 1,
                    "target_item": 1,
                    "target_pointer": 1,
                    "target_ptr": 2,
                    "target_value": 2
                },
                "param_1": {
                    "selected_target": 1,
                    "target": 24,
                    "target_name": 6
                },
                "param_2": {
                    "file": 2,
                    "output": 1,
                    "output_file": 27,
                    "output_stream": 1
                },
                "pcVar2": {
                    "header_text": 1,
                    "message": 25,
                    "target_string": 2,
                    "text": 2
                },
                "plVar3": {
                    "current_pointer": 1,
                    "current_target": 21,
                    "current_target_pointer": 1,
                    "current_target_ptr": 2,
                    "ptr": 4,
                    "target_ptr": 1,
                    "target_ptr_list": 1
                }
            },
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "bfd_target_list",
                "fputc"
            ],
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "code": "\nvoid print_supported_targets_0010266f(long target,FILE *output_file)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_0010266f",
            "entrypoint": "0x0010266f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "__ptr": "target_list",
                "lVar1": "current_target_value",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102710": {
            "additional_data": {
                "ARCHIVE_FORMAT": {
                    "archive_format": 1
                },
                "Archived_File_Info": {
                    "archived_file_info": 1
                },
                "DAT_0010d5f0": {
                    "default_library": 1,
                    "default_output_binary": 1,
                    "extracted_data": 1,
                    "format_data": 1,
                    "global_variable": 1,
                    "input_bfd_ptr": 1,
                    "input_library": 1,
                    "matching_library": 1,
                    "selected_library": 1
                },
                "DAT_0010d5f8": {
                    "enable_thin_library_conversion": 1,
                    "flag": 1,
                    "global_flag2": 1,
                    "is_existing_library": 1,
                    "is_library": 1,
                    "thin_flag": 1
                },
                "DAT_0010d610": {
                    "conversion_flag": 1,
                    "flag": 1,
                    "global_flag": 1,
                    "is_format_existed": 1,
                    "is_library_conversion_needed": 1
                },
                "DAT_0010d618": {
                    "archived_info": 1,
                    "creation_flag": 1,
                    "global_variable": 1,
                    "output_library": 1,
                    "read_format": 1,
                    "stored_stack_frame_pointer_2": 1
                },
                "DAT_0010d64c": {
                    "archived_file_check": 1,
                    "flag": 1,
                    "flag_variable_2": 1,
                    "format_check_variable": 1,
                    "format_mode": 1,
                    "format_option": 1
                },
                "FUN_00102710": {
                    "decode_binary": 1,
                    "decompile_and_improve": 1,
                    "decompiled_function": 2,
                    "extract_and_convert_archived_files": 1,
                    "extract_and_convert_libraries": 1,
                    "extract_archived_files": 10,
                    "extract_archived_libraries": 1,
                    "extract_library_files": 2,
                    "load_and_convert_binary": 1,
                    "load_and_convert_file": 1,
                    "load_library": 2,
                    "open_and_convert_library": 1,
                    "open_and_extract_archived_files": 1,
                    "parse_bfd_file": 1,
                    "parse_binary_file": 1,
                    "process_binary_file": 1,
                    "read_and_convert_library": 3
                },
                "LAB_00102812": {
                    "matching_formats": 1
                },
                "LAB_00102826": {
                    "create_matching_format": 1,
                    "open_failure": 1,
                    "open_input_library": 1
                },
                "LAB_001053b7": {
                    "convert_library_to_desired_format": 1,
                    "successful_exit": 1
                },
                "_DAT_0010d610": {
                    "conditional_variable": 1,
                    "enable_conversion_check": 1,
                    "flag_variable": 1
                },
                "bVar3": {
                    "bit_value": 1,
                    "convert_flag": 3,
                    "convert_to_thin": 2,
                    "is_thin_format": 3,
                    "is_thin_library": 12,
                    "thin_conversion_flag": 1,
                    "thin_library": 1,
                    "thin_library_flag": 8
                },
                "bfd_check_format": {
                    "check_bfd_format": 2,
                    "check_binary_format": 1,
                    "check_file_format": 1,
                    "check_format": 2,
                    "check_format_match": 1
                },
                "bfd_check_format_matches": {
                    "check_binary_format_matches": 1,
                    "check_format_matches": 3
                },
                "bfd_close": {
                    "close": 1,
                    "close_bfd": 1,
                    "close_bfd_handle": 1,
                    "close_binary": 1,
                    "close_file": 2,
                    "close_handle": 1,
                    "close_library": 1
                },
                "bfd_get_error": {
                    "get_bfd_error": 1,
                    "get_bfd_error_code": 1,
                    "get_error": 3,
                    "get_error_code": 1
                },
                "bfd_openr": {
                    "open_file": 1,
                    "open_input_bfd": 1,
                    "open_read": 1,
                    "open_read_file": 1,
                    "open_read_handle": 2,
                    "open_read_mode": 1,
                    "open_readonly": 1
                },
                "bfd_openr_next_archived_file": {
                    "get_next_archived_file": 3,
                    "open_next_archived_file": 4
                },
                "bfd_openw": {
                    "open_output_bfd": 1,
                    "open_output_file": 1,
                    "open_write": 1,
                    "open_write_file": 1,
                    "open_write_handle": 2,
                    "open_write_mode": 1,
                    "open_writeonly": 1
                },
                "bfd_set_format": {
                    "set_bfd_format": 2,
                    "set_binary_format": 1,
                    "set_file_format": 2,
                    "set_format": 3
                },
                "cVar2": {
                    "check_format_result": 1,
                    "check_result": 2,
                    "format_check": 6,
                    "format_check_result": 8,
                    "format_checked": 1,
                    "format_exists": 1,
                    "format_flag": 1,
                    "format_match": 1,
                    "format_valid": 3,
                    "format_validity": 1,
                    "is_format_checked": 1,
                    "is_valid_format": 4,
                    "status": 1
                },
                "dcgettext": {
                    "get_localized_string": 1,
                    "get_translation": 1,
                    "gettext": 1
                },
                "extract_archived_files": {
                    "extract_archived_files": 1
                },
                "iVar4": {
                    "bfd_error": 1,
                    "bfd_error_code": 2,
                    "error": 10,
                    "error_code": 17,
                    "error_flag": 1
                },
                "in_stack_00000008": {
                    "archive_file": 1,
                    "archive_file_name": 1,
                    "archived_file": 1,
                    "buffer_size": 1,
                    "context_extra_data": 1,
                    "default_format_str": 1,
                    "error_message": 1,
                    "extra_param": 1,
                    "filename": 1,
                    "format": 1,
                    "format_match": 1,
                    "format_name": 1,
                    "format_stack_variable": 1,
                    "input_file_name": 1,
                    "matching_criteria": 1,
                    "matching_format": 1,
                    "matching_formats_ptr": 1,
                    "matching_options": 1,
                    "output_buffer": 1,
                    "stack_arg": 2,
                    "stack_argument": 1,
                    "stack_param": 2,
                    "stack_parameter": 2,
                    "stack_var": 1,
                    "stack_variable": 1
                },
                "lVar5": {
                    "archive_handle": 1,
                    "archived_file": 3,
                    "archived_file_ptr": 1,
                    "bfd": 1,
                    "bfd_file": 1,
                    "bfd_file_descriptor": 1,
                    "bfd_file_handle": 1,
                    "bfd_handle": 8,
                    "file_descriptor": 3,
                    "file_handle": 8,
                    "file_ptr": 2,
                    "input_file": 1
                },
                "plVar1": {
                    "archived_file": 2,
                    "archived_file_descriptor": 1,
                    "archived_file_handles": 1,
                    "archived_file_pointer": 3,
                    "archived_file_ptr": 4,
                    "archived_files_pointer": 1,
                    "current_archived_file": 1,
                    "current_file_ptr": 2,
                    "file_addresses": 1,
                    "file_entry_ptr": 1,
                    "file_handles": 1,
                    "file_list_pointer": 1,
                    "file_ptr": 2,
                    "pointer_to_long": 1
                },
                "print_error_and_exit_00107690": {
                    "print_error_and_exit": 1
                },
                "print_error_and_exit_00107c10": {
                    "print_error_and_exit": 1
                },
                "print_error_message_00107c20": {
                    "print_error": 3,
                    "print_error_message": 6
                },
                "print_error_message_and_exit_00107690": {
                    "print_conversion_error_and_exit": 1,
                    "print_error_and_exit": 2,
                    "print_error_and_exit2": 1,
                    "print_error_and_exit_with_args": 1,
                    "print_error_and_exit_with_library": 1,
                    "print_error_and_exit_with_string_param": 1,
                    "print_error_message_and_exit": 1,
                    "print_error_message_and_exit2": 1
                },
                "print_error_message_and_exit_00107c10": {
                    "print_error_and_exit": 6,
                    "print_error_and_exit_message": 1,
                    "print_error_message_and_exit": 2
                },
                "print_formatted_error_message_00107920": {
                    "print_formatted_error": 2,
                    "print_formatted_error_message": 5
                },
                "print_matching_formats_00103bd1": {
                    "print_matching_formats": 8
                },
                "puVar8": {
                    "archive": 1,
                    "archive_handle": 1,
                    "bfd_file_ptr": 1,
                    "bfd_handle_writer": 1,
                    "bfd_write_handle": 2,
                    "output_bfd": 2,
                    "output_bfd_handle": 1,
                    "output_bfd_ptr": 1,
                    "output_file": 2,
                    "output_file_descriptor": 1,
                    "output_file_handle": 7,
                    "output_file_ptr": 2,
                    "output_handle": 4,
                    "output_library": 1,
                    "output_library_handle": 1,
                    "output_library_ptr": 1,
                    "write_bfd_ptr": 1,
                    "write_file_handle": 1
                },
                "stack0x00000008": {
                    "matching_format": 1
                },
                "uVar6": {
                    "error_description": 1,
                    "error_message": 19,
                    "error_message1": 1,
                    "error_msg": 1,
                    "error_string": 2
                },
                "uVar7": {
                    "error_context": 1,
                    "error_format": 1,
                    "error_message": 1,
                    "error_message2": 1,
                    "format_message": 1,
                    "library_file": 1,
                    "library_name": 15,
                    "library_path": 1,
                    "message": 1,
                    "message_buffer": 1
                },
                "unaff_RBP": {
                    "additional_info": 1,
                    "additional_param": 1,
                    "buffer": 1,
                    "closing_value": 1,
                    "context": 2,
                    "default_format": 1,
                    "default_rbp": 1,
                    "destination": 1,
                    "extra_info": 1,
                    "fallback_file": 1,
                    "input_library_handle": 1,
                    "library_path": 1,
                    "matching_format": 2,
                    "matching_formats": 1,
                    "output_file_handle": 1,
                    "output_file_name": 1,
                    "parent_func_ptr": 1,
                    "previous_rbp_value": 1,
                    "return_address": 1,
                    "return_value": 1,
                    "specific_bfd_ptr": 1,
                    "stack_pointer": 1,
                    "stored_stack_frame_pointer": 1,
                    "unaff_rbp": 2,
                    "unaffected_rbp": 1,
                    "write_format": 1
                },
                "xexit": {
                    "exit_func": 1,
                    "exit_program": 7
                }
            },
            "called": [
                "bfd_check_format",
                "bfd_openr",
                "bfd_close"
            ],
            "calling": [
                "FUN_00105300"
            ],
            "code": "\n\n\nundefined8 * extract_and_convert_archived_files_00102710(void)\n\n{\n  long *archived_file_ptr;\n  char format_check_result;\n  byte is_thin_library;\n  int error_code;\n  long file_handle;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_file_handle;\n  undefined8 context;\n  undefined8 stack_parameter;\n  \n  file_handle = bfd_openr();\n  if (file_handle != 0) {\n    format_check_result = bfd_check_format(file_handle,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_handle + 8);\n    }\n    bfd_close(file_handle);\n  }\n  output_file_handle = (undefined8 *)bfd_openw();\n  if (((output_file_handle != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_file_handle,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_file_handle), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto open_failure;\n    goto successful_exit;\n  }\n  print_error_and_exit();\n  do {\n    is_thin_library = *(byte *)((long)output_file_handle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        library_name = *output_file_handle;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit(error_message,library_name);\n        goto matching_formats;\n      }\n    }\n    else if (is_thin_library == 0) {\n      library_name = *output_file_handle;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit(error_message,library_name);\nLAB_001027cb:\n      print_error_message();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nmatching_formats:\n        print_matching_formats(stack_parameter);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = output_file_handle + 0x1e;\n      for (file_handle = bfd_openr_next_archived_file(output_file_handle,0); file_handle != 0;\n          file_handle = bfd_openr_next_archived_file(output_file_handle,file_handle)) {\n        *archived_file_ptr = file_handle;\n        archived_file_ptr = (long *)(file_handle + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file_handle;\n      }\n      do {\n        print_error_and_exit();\nopen_failure:\n        library_name = dcgettext(0,\"creating %s\",5);\n        print_formatted_error_message(library_name);\nsuccessful_exit:\n        DAT_0010d618 = context;\n        output_file_handle = (undefined8 *)bfd_openr();\n      } while (output_file_handle == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_file_handle,2,&matching_format);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_handle = bfd_openr_next_archived_file(output_file_handle,0), file_handle == 0));\n  } while( true );\n}\n\n",
            "current_name": "extract_and_convert_archived_files_00102710",
            "entrypoint": "0x00102710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102710": "extract_and_convert_archived_files_00102710",
                "LAB_00102812": "matching_formats",
                "LAB_00102826": "open_failure",
                "LAB_001053b7": "successful_exit",
                "bVar3": "is_thin_library",
                "bfd_check_format": "check_bfd_format",
                "bfd_check_format_matches": "check_format_matches",
                "bfd_close": "close_file",
                "bfd_get_error": "get_error",
                "bfd_openr": "open_read_handle",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_openw": "open_write_handle",
                "bfd_set_format": "set_format",
                "cVar2": "format_check_result",
                "dcgettext": "get_translation",
                "iVar4": "error_code",
                "in_stack_00000008": "stack_parameter",
                "lVar5": "file_handle",
                "plVar1": "archived_file_ptr",
                "print_error_message_00107c20": "print_error_message",
                "print_error_message_and_exit_00107690": "print_error_and_exit",
                "print_error_message_and_exit_00107c10": "print_error_and_exit",
                "print_formatted_error_message_00107920": "print_formatted_error_message",
                "print_matching_formats_00103bd1": "print_matching_formats",
                "puVar8": "output_file_handle",
                "stack0x00000008": "matching_format",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "unaff_RBP": "context",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010284b": {
            "additional_data": {
                "FUN_0010284b": {
                    "calculate_return_value": 2,
                    "get_boolean_value": 1,
                    "get_constant_value": 1,
                    "get_default_value": 1,
                    "get_one": 10,
                    "get_return_value": 10,
                    "get_status": 1,
                    "initialize": 1,
                    "initialize_counter": 1,
                    "one": 1,
                    "return_one": 1
                },
                "result": {
                    "one": 1
                },
                "return": {
                    "result": 2,
                    "return_value": 1
                },
                "return_value": {
                    "result": 1
                },
                "undefined8": {
                    "bool": 1,
                    "uint64_t": 3,
                    "unsigned_long": 1,
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00107650"
            ],
            "code": "\nuint64_t get_one_0010284b(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_0010284b",
            "entrypoint": "0x0010284b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010285f": {
            "additional_data": {
                "DAT_0010d634": {
                    "comparison_flag": 1,
                    "condition": 1,
                    "condition_flag": 1,
                    "flag": 1,
                    "some_bool": 1,
                    "some_condition": 1,
                    "some_global_flag": 1
                },
                "FUN_0010285f": {
                    "print_archive_entry_error": 2,
                    "print_archive_entry_not_found": 10,
                    "print_archive_entry_not_found_error": 2,
                    "print_archived_entry_error": 1,
                    "print_entry_error": 1,
                    "print_entry_error_message": 1,
                    "print_entry_not_found_error": 2,
                    "print_entry_not_found_error_message": 2,
                    "print_entry_not_found_in_archive": 2,
                    "print_entry_not_in_archive": 1,
                    "print_error_message": 1,
                    "print_missing_entries": 1,
                    "print_missing_entries_in_archive": 1,
                    "print_missing_entry_error": 2,
                    "print_missing_entry_error_message": 1,
                    "print_not_found_entries": 1
                },
                "LAB_0010553e": {
                    "loop_back": 1,
                    "loop_end": 2
                },
                "_DAT_0010d630": {
                    "compare_limit": 1,
                    "desired_matching_count": 1,
                    "limit": 1,
                    "max_matching_entries": 1,
                    "max_matching_entry_count": 1,
                    "some_global_threshold": 1,
                    "threshold": 1
                },
                "__format": {
                    "error_format_string": 1,
                    "error_message": 5,
                    "error_message_format": 13,
                    "format": 1,
                    "format_string": 11
                },
                "_stderr": {
                    "error_stream": 2,
                    "standard_error": 4,
                    "standard_error_stream": 1,
                    "stderr": 1
                },
                "code_r0x0010285f": {
                    "loop_start": 1,
                    "rerun_print_entry_error": 1,
                    "start": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_localized_text": 4,
                    "get_translated_message": 1,
                    "get_translated_string": 1,
                    "gettext": 1
                },
                "extract_and_copy_substring_00105830": {
                    "extract_and_copy_substring": 8,
                    "extract_copy_substring": 1
                },
                "filename_cmp": {
                    "compare_file_name": 1,
                    "compare_file_names": 1,
                    "compare_filename": 3,
                    "compare_filenames": 5
                },
                "fprintf": {
                    "print_error": 1,
                    "print_error_message": 4,
                    "print_formatted": 1,
                    "print_formatted_error": 1,
                    "print_to_stderr": 1
                },
                "iStack000000000000000c": {
                    "counter": 10,
                    "entry_count": 3,
                    "entry_counter": 1,
                    "extracted_entry_count": 1,
                    "filename_counter": 1,
                    "found_entry_count": 1,
                    "matched_entry_count": 1,
                    "matching_count": 3,
                    "matching_entries_count": 2,
                    "matching_entry_count": 1,
                    "num_matched_entries": 1,
                    "num_matches": 5,
                    "substring_count": 1
                },
                "iVar1": {
                    "comparison_result": 2,
                    "filename_comparison": 1,
                    "filename_comparison_result": 2
                },
                "lVar2": {
                    "archive_entry": 1,
                    "current_entry": 2,
                    "entry": 5,
                    "entry_data": 1,
                    "entry_index": 2,
                    "entry_name": 1,
                    "entry_pointer": 1,
                    "entry_string": 1,
                    "extracted_entry_name": 1,
                    "file_size": 1,
                    "filename": 1,
                    "substring": 9,
                    "substring_length": 4,
                    "substring_pointer": 1
                },
                "plVar3": {
                    "alternate_entry_pointer": 1,
                    "alternative_entry": 2,
                    "alternative_file_pointer": 1,
                    "entry": 1,
                    "entry_pointer": 1,
                    "extracted_string": 1,
                    "fallback_entry": 3,
                    "fallback_pointer": 1,
                    "filename": 1,
                    "found_entry": 1,
                    "next_entry": 3,
                    "non_null_pointer": 1,
                    "not_null_entry": 1,
                    "static_var": 1,
                    "sub_string_pointer": 1,
                    "sub_string_ptr": 1,
                    "substring_end_pointer": 1,
                    "substring_pointer": 2,
                    "substring_pointer2": 1,
                    "substring_ptr": 2,
                    "temp_entry": 1,
                    "temp_ptr": 2
                },
                "plVar5": {
                    "archive_entry": 3,
                    "current_entry": 22,
                    "current_entry_pointer": 1,
                    "current_file_pointer": 1,
                    "entry": 2,
                    "entry_ptr": 2
                },
                "stack0x00000010": {
                    "buffer": 1,
                    "stack_buffer": 1
                },
                "uVar4": {
                    "current_entry": 2,
                    "current_string": 1,
                    "entry": 7,
                    "entry_name": 20
                },
                "unaff_R12": {
                    "archive": 9,
                    "archive_base": 1,
                    "archive_data": 2,
                    "archive_pointer": 6,
                    "archive_ptr": 10,
                    "archive_settings": 1,
                    "context": 1,
                    "some_pointer": 1
                },
                "unaff_R13D": {
                    "entry_count": 11,
                    "num_entries": 14,
                    "number_of_entries": 1,
                    "remaining_entries": 5
                },
                "unaff_R14": {
                    "entries": 2,
                    "entry_list": 2,
                    "entry_name_list": 3,
                    "entry_name_pointer": 1,
                    "entry_names": 17,
                    "entry_pointer": 1,
                    "entry_pointers": 2,
                    "entry_ptr": 1,
                    "entry_strings": 1,
                    "string_array": 1
                },
                "unaff_RBP": {
                    "callback": 6,
                    "callback_func": 1,
                    "callback_function": 12,
                    "exit_function": 1,
                    "function_pointer": 10,
                    "function_to_call": 1
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00105480"
            ],
            "code": "\n\n\nvoid print_archive_entry_not_found_error_0010285f(void)\n\n{\n  int filename_comparison_result;\n  char *error_message_format;\n  long substring;\n  long *fallback_entry;\n  undefined8 entry_name;\n  long *current_entry;\n  code *callback_function;\n  long archive_ptr;\n  int num_entries;\n  undefined8 *entry_names;\n  int counter;\n  \nrerun_print_entry_error:\n  entry_name = *entry_names;\n  error_message_format = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(standard_error,error_message_format,entry_name);\nloop_end:\n  entry_names = entry_names + 1;\n  num_entries = num_entries + -1;\n  if (num_entries == 0) {\n    return;\n  }\n  current_entry = *(long **)(archive_ptr + 0xf0);\n  counter = 0;\n  do {\n    if (current_entry == (long *)0x0) goto rerun_print_entry_error;\n    if (*(int *)((long)current_entry + 0xac) == 0) {\n      substring = *current_entry;\n      if (substring == 0) {\n        fallback_entry = (long *)current_entry[0x1d];\n        if ((long *)current_entry[0x1d] == (long *)0x0) {\n          fallback_entry = current_entry;\n        }\n        (**(code **)(fallback_entry[1] + 0x1e8))(current_entry,&stack_buffer);\n      }\n      else if (((*(byte *)(archive_ptr + 0x49) & 0x10) == 0) || (substring = extract_and_copy_substring(), substring != 0))\n      {\n        entry_name = extract_and_copy_substring(*entry_names);\n        filename_comparison_result = filename_cmp(entry_name,substring);\n        if ((filename_comparison_result == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (counter = counter + 1,\n            counter == _DAT_0010d630)))) break;\n      }\n    }\n    current_entry = (long *)current_entry[0x1e];\n  } while( true );\n  (*callback_function)();\n  *(undefined4 *)((long)current_entry + 0xac) = 1;\n  goto loop_end;\n}\n\n",
            "current_name": "print_archive_entry_not_found_error_0010285f",
            "entrypoint": "0x0010285f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_error_0010285f",
                "LAB_0010553e": "loop_end",
                "__format": "error_message_format",
                "_stderr": "standard_error",
                "code_r0x0010285f": "rerun_print_entry_error",
                "dcgettext": "get_localized_text",
                "extract_and_copy_substring_00105830": "extract_and_copy_substring",
                "filename_cmp": "compare_filenames",
                "fprintf": "print_error_message",
                "iStack000000000000000c": "counter",
                "iVar1": "filename_comparison_result",
                "lVar2": "substring",
                "plVar3": "fallback_entry",
                "plVar5": "current_entry",
                "stack0x00000010": "stack_buffer",
                "uVar4": "entry_name",
                "unaff_R12": "archive_ptr",
                "unaff_R13D": "num_entries",
                "unaff_R14": "entry_names",
                "unaff_RBP": "callback_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028ed": {
            "additional_data": {
                "FUN_001028ed": {
                    "analyze_files": 1,
                    "extract_and_print_archived_files": 1,
                    "extract_and_process_archived_files": 1,
                    "extract_and_process_archives": 1,
                    "find_and_print_archived_files": 1,
                    "find_and_print_files": 1,
                    "find_and_process_archived_files": 1,
                    "find_and_process_files": 1,
                    "find_file_in_archive": 1,
                    "find_matching_files": 1,
                    "print_and_extract_archived_files": 1,
                    "print_error_message_and_exit": 1,
                    "process_files": 6,
                    "process_files_and_print_data": 1
                },
                "__s": {
                    "archive_file_basename": 1,
                    "basename1_temp": 1,
                    "basename_a": 1,
                    "basename_var_1": 1,
                    "char_ptr1": 1,
                    "char_ptr_11": 1,
                    "char_ptr_3": 1,
                    "char_ptr_s": 3,
                    "char_ptr_var3": 1,
                    "char_var": 1,
                    "current_file_base_name": 1,
                    "filename1": 1,
                    "pointer_to_char3": 1,
                    "s_string": 1,
                    "str_1": 1,
                    "str_ptr": 1,
                    "str_s": 1,
                    "string": 1,
                    "string1": 2,
                    "string_1": 3,
                    "string_s": 3,
                    "string_var": 1,
                    "string_var1": 2
                },
                "__s_00": {
                    "basename2_temp": 1,
                    "basename_b": 1,
                    "basename_var_2": 1,
                    "char_ptr2": 1,
                    "char_ptr_12": 1,
                    "char_ptr_4": 1,
                    "char_ptr_s00": 1,
                    "char_ptr_s_00": 2,
                    "char_ptr_var4": 1,
                    "char_var_2": 1,
                    "file_base_name": 1,
                    "file_basename2": 1,
                    "filename2": 1,
                    "pointer_to_char4": 1,
                    "s_string_2": 1,
                    "str_2": 1,
                    "str_ptr2": 1,
                    "str_s_00": 1,
                    "string2": 2,
                    "string_00": 1,
                    "string_2": 3,
                    "string_s_00": 3,
                    "string_var2": 2,
                    "string_var_2": 1
                },
                "bVar16": {
                    "bool1": 1,
                    "bool_val": 2,
                    "bool_var": 10,
                    "bool_var16": 9,
                    "bool_var_21": 1,
                    "bool_variable": 2,
                    "byte_var16": 2,
                    "check_result": 1,
                    "entry_found": 1,
                    "flag": 1,
                    "use_extracted_info": 1
                },
                "bVar17": {
                    "auxiliary_variable3": 1,
                    "byte": 1,
                    "byte2": 1,
                    "byte_counter": 1,
                    "byte_val2": 1,
                    "byte_val3": 1,
                    "byte_var": 1,
                    "byte_var1": 1,
                    "byte_var17": 11,
                    "byte_var2": 3,
                    "byte_var_2": 6,
                    "byte_var_22": 1,
                    "byte_variable2": 1,
                    "byte_variable_2": 1
                },
                "bVar2": {
                    "byte1": 1,
                    "byte_val": 2,
                    "byte_var": 10,
                    "byte_var2": 11,
                    "byte_var_2": 1,
                    "byte_variable": 2,
                    "error_code": 1,
                    "process_result": 1,
                    "result": 2
                },
                "iVar3": {
                    "cmp_result": 2,
                    "comparison_result": 2,
                    "index_var": 1,
                    "int1": 1,
                    "int_val": 1,
                    "int_var": 8,
                    "int_var3": 9,
                    "int_var_3": 1,
                    "integer_var": 1,
                    "integer_var3": 2,
                    "integer_variable": 2
                },
                "in_stack_00000078": {
                    "in_stack_var1": 1,
                    "in_stack_var_1": 1,
                    "long1": 1,
                    "long_stack_00000078": 1,
                    "long_stack_var_1": 2,
                    "long_var4": 1,
                    "long_var_25": 1,
                    "long_var_3": 1,
                    "long_var_4": 1,
                    "long_var_in_stack_00000078": 1,
                    "max_file_index": 1,
                    "param_3": 1,
                    "stack0x00000078": 1,
                    "stack_78": 1,
                    "stack_data1": 1,
                    "stack_param_1": 1,
                    "stack_val1": 1,
                    "stack_value_00000078": 1,
                    "stack_var1": 5,
                    "stack_var78": 1,
                    "stack_var_1": 1,
                    "stack_variable1": 2,
                    "stack_variable_1": 1,
                    "temp_stack_var1": 1
                },
                "in_stack_00000108": {
                    "in_stack_var2": 1,
                    "in_stack_var_2": 1,
                    "long2": 1,
                    "long_stack_00000108": 1,
                    "long_stack_var_2": 2,
                    "long_var5": 1,
                    "long_var_26": 1,
                    "long_var_4": 1,
                    "long_var_5": 1,
                    "long_var_in_stack_00000108": 1,
                    "min_file_index": 1,
                    "param_4": 1,
                    "stack0x00000108": 1,
                    "stack_108": 1,
                    "stack_data2": 1,
                    "stack_param_2": 1,
                    "stack_val2": 1,
                    "stack_value_00000108": 1,
                    "stack_var108": 1,
                    "stack_var2": 5,
                    "stack_var_2": 1,
                    "stack_variable2": 2,
                    "stack_variable_2": 1,
                    "temp_stack_var2": 1
                },
                "ivar3": {
                    "comparison_result": 1
                },
                "lVar10": {
                    "current_file": 3,
                    "current_file_ptr": 1,
                    "file_index": 2,
                    "file_length": 1,
                    "file_ptr": 1,
                    "long_val1": 1,
                    "long_var": 3,
                    "long_var1": 3,
                    "long_var10": 8,
                    "long_var_1": 3,
                    "long_var_10": 1,
                    "long_variable1": 1,
                    "long_variable_1": 1,
                    "next_entry": 1,
                    "pointer_to_char": 1
                },
                "lVar11": {
                    "current_entry": 1,
                    "current_file": 1,
                    "file_ptr_tmp": 1,
                    "long_val2": 1,
                    "long_var11": 8,
                    "long_var2": 3,
                    "long_var_11": 1,
                    "long_var_2": 6,
                    "long_variable2": 1,
                    "long_variable_2": 1,
                    "next_file": 1,
                    "pointer_to_char": 1,
                    "prev_file": 1,
                    "previous_file": 1,
                    "previous_file_ptr": 1,
                    "temp_file_index": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "archive_directory": 1,
                    "archive_file": 1,
                    "archive_name": 1,
                    "data": 1,
                    "error_message": 5,
                    "file_list": 2,
                    "file_path": 1,
                    "filename": 6,
                    "filename_list": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_buffer": 1,
                    "input_data": 2,
                    "input_param": 4,
                    "input_path": 1,
                    "param_1": 1,
                    "program_name": 1
                },
                "param_2": {
                    "archive_file": 1,
                    "archive_number": 1,
                    "archive_status": 1,
                    "bfd": 1,
                    "bfd_handle": 1,
                    "error_flag": 1,
                    "file_count": 1,
                    "file_descriptor": 3,
                    "file_handle": 1,
                    "file_length": 1,
                    "file_list": 1,
                    "file_size": 8,
                    "filesize": 1,
                    "flag": 1,
                    "input_length": 3,
                    "length": 2,
                    "param_2": 2,
                    "param_data": 1
                },
                "param_7": {
                    "char_pointer_pointer_6": 1,
                    "char_ptr_ptr5": 1,
                    "char_ptr_ptr_23": 1,
                    "char_ptr_ptr_4": 1,
                    "char_ptr_ptr_5": 1,
                    "char_ptr_ptr_var_param_7": 1,
                    "command_line_args": 1,
                    "file_list": 1,
                    "file_name_list": 1,
                    "file_paths": 1,
                    "filename_array": 1,
                    "input_buffers": 1,
                    "input_param_ptr": 1,
                    "output": 1,
                    "output_data": 1,
                    "output_files": 1,
                    "output_path": 1,
                    "param7": 1,
                    "param_7": 2,
                    "param_data_ptr": 1,
                    "param_list": 1,
                    "param_ptr7": 1,
                    "param_ptr_var": 1,
                    "param_var7": 1,
                    "parameter7": 1,
                    "parameter_7": 1,
                    "pointer_to_pointer_to_char": 1,
                    "ppc_var15_list": 1,
                    "str_ptr": 1,
                    "string_double_ptr_param7": 1
                },
                "param_9": {
                    "function_status": 1,
                    "output": 1,
                    "output_param": 4,
                    "output_parameter": 1,
                    "param9": 1,
                    "param_9": 2,
                    "param_data2": 1,
                    "param_ptr9": 1,
                    "param_val": 1,
                    "param_var": 1,
                    "param_var9": 1,
                    "parameter9": 1,
                    "parameter_9": 1,
                    "result": 3,
                    "result2": 1,
                    "return_value": 1,
                    "undefined8_3": 1,
                    "undefined8_var": 1,
                    "undefined8_var_param_9": 1,
                    "undefined_var4": 1,
                    "undefined_var9": 1,
                    "undefined_var_24": 1,
                    "undefined_var_4": 3
                },
                "pcVar6": {
                    "basename1": 1,
                    "char_pointer1": 1,
                    "char_pointer_1": 1,
                    "char_pointer_var6": 1,
                    "char_pointer_variable_1": 1,
                    "char_ptr": 1,
                    "char_ptr1": 1,
                    "char_ptr6": 3,
                    "char_ptr_1": 3,
                    "char_ptr_6": 1,
                    "char_ptr_var": 1,
                    "char_ptr_var1": 2,
                    "char_ptr_var6": 5,
                    "char_var1": 1,
                    "character_pointer_var6": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "file_var": 1,
                    "filename": 1,
                    "filename_ptr": 1,
                    "pointer_to_char": 1,
                    "pointer_var6": 1
                },
                "pcVar7": {
                    "base_name": 1,
                    "basename2": 1,
                    "basename_ptr": 1,
                    "basename_result": 1,
                    "basename_var": 1,
                    "char_pointer2": 1,
                    "char_pointer_2": 1,
                    "char_pointer_var7": 1,
                    "char_pointer_variable_2": 1,
                    "char_ptr2": 1,
                    "char_ptr7": 3,
                    "char_ptr_2": 4,
                    "char_ptr_7": 1,
                    "char_ptr_var2": 2,
                    "char_ptr_var7": 5,
                    "char_ptr_var_2": 1,
                    "char_var2": 1,
                    "character_pointer_var7": 1,
                    "file_basename": 1,
                    "pointer_to_char2": 1,
                    "pointer_var7": 1
                },
                "piVar5": {
                    "errno_location": 2,
                    "errno_ptr": 2,
                    "error_number": 1,
                    "error_pointer": 1,
                    "int_pointer": 1,
                    "int_pointer_var": 1,
                    "int_pointer_var5": 1,
                    "int_ptr": 5,
                    "int_ptr5": 3,
                    "int_ptr_5": 1,
                    "int_ptr_var": 3,
                    "int_ptr_var5": 4,
                    "integer_pointer_var5": 1,
                    "integer_pointer_variable": 1,
                    "pointer_to_int": 1,
                    "pointer_to_integer": 1,
                    "pointer_var5": 2
                },
                "ppcVar14": {
                    "char_double_pointer_var14": 1,
                    "char_double_pointer_variable_2": 1,
                    "char_double_ptr_var14": 1,
                    "char_pointer_pointer_2": 1,
                    "char_ptr_ptr1": 1,
                    "char_ptr_ptr14": 3,
                    "char_ptr_ptr_1": 2,
                    "char_ptr_ptr_15": 1,
                    "char_ptr_ptr_2": 2,
                    "char_ptr_ptr_var1": 2,
                    "char_ptr_ptr_var14": 3,
                    "char_ptr_ptr_var_2": 1,
                    "char_ptr_ptr_var_ppc_var14": 1,
                    "character_pointer_pointer_var14": 1,
                    "current_entry": 1,
                    "current_file_ptr": 1,
                    "double_pointer_var14": 1,
                    "file_info": 1,
                    "file_info_array": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "pointer_pointer_var": 1,
                    "pointer_to_pointer_to_char": 1,
                    "pointer_to_pointer_to_char1": 1
                },
                "ppcVar15": {
                    "char_double_pointer_var15": 1,
                    "char_double_pointer_variable_3": 1,
                    "char_double_ptr_var15": 1,
                    "char_pointer_pointer_5": 1,
                    "char_ptr_ptr15": 3,
                    "char_ptr_ptr4": 1,
                    "char_ptr_ptr_3": 2,
                    "char_ptr_ptr_4": 1,
                    "char_ptr_ptr_5": 1,
                    "char_ptr_ptr_var15": 2,
                    "char_ptr_ptr_var4": 2,
                    "char_ptr_ptr_var_19": 1,
                    "char_ptr_ptr_var_5": 1,
                    "char_ptr_ptr_var_ppc_var15": 1,
                    "character_pointer_pointer_var15": 1,
                    "double_pointer_var15": 1,
                    "file_ptr_1": 1,
                    "next_file_info": 2,
                    "pointer_pointer_var2": 1,
                    "pointer_to_pointer_to_char": 1,
                    "pointer_to_pointer_to_char4": 1,
                    "ppc_var15": 1,
                    "previous_file_ptr": 1,
                    "temp_pointer2": 1
                },
                "ppcVar8": {
                    "archive_file_info": 1,
                    "char_double_pointer_var8": 1,
                    "char_double_pointer_variable": 1,
                    "char_double_ptr_var8": 1,
                    "char_pointer_pointer": 1,
                    "char_pointer_pointer_var": 1,
                    "char_ptr_ptr": 5,
                    "char_ptr_ptr8": 3,
                    "char_ptr_ptr_8": 1,
                    "char_ptr_ptr_var": 3,
                    "char_ptr_ptr_var8": 4,
                    "character_pointer_pointer_var8": 1,
                    "double_pointer_var8": 1,
                    "file_handler": 1,
                    "pointer_to_pointer_to_char": 2,
                    "ppc_var": 1,
                    "ppc_var8": 1,
                    "temp_pointer": 1
                },
                "sVar4": {
                    "length": 1,
                    "size": 1,
                    "size_t1": 1,
                    "size_val": 1,
                    "size_var": 10,
                    "size_var4": 11,
                    "size_var_4": 1,
                    "size_variable": 2,
                    "string_length": 3
                },
                "uVar1": {
                    "error_code": 1,
                    "error_report": 1,
                    "found": 1,
                    "some_variable": 1,
                    "undefined": 1,
                    "undefined1": 1,
                    "undefined_val1": 1,
                    "undefined_var": 7,
                    "undefined_var1": 13,
                    "undefined_var_1": 2,
                    "undefined_variable1": 1,
                    "undefined_variable_1": 1
                },
                "uVar12": {
                    "auxiliary_variable": 1,
                    "data": 2,
                    "default_locale": 1,
                    "temp_var": 1,
                    "undefined8_2": 1,
                    "undefined_val3": 1,
                    "undefined_var12": 12,
                    "undefined_var3": 2,
                    "undefined_var_12": 1,
                    "undefined_var_2": 1,
                    "undefined_var_3": 5,
                    "undefined_variable3": 1,
                    "undefined_variable_3": 1
                },
                "uVar13": {
                    "auxiliary_variable2": 1,
                    "basename_length": 1,
                    "length": 2,
                    "max_length": 1,
                    "temp_var2": 1,
                    "ulong1": 1,
                    "ulong_val": 1,
                    "ulong_var": 9,
                    "ulong_var13": 11,
                    "ulong_var_13": 1,
                    "ulong_variable": 2
                },
                "uVar9": {
                    "extract_result": 1,
                    "result": 2,
                    "substring": 1,
                    "substring_result": 1,
                    "u_var9": 1,
                    "undefined8_1": 1,
                    "undefined_val2": 1,
                    "undefined_var2": 2,
                    "undefined_var9": 12,
                    "undefined_var_2": 5,
                    "undefined_var_9": 1,
                    "undefined_variable2": 1,
                    "undefined_variable_2": 1
                },
                "unaff_R12": {
                    "archive_file": 1,
                    "char_pointer_pointer_4": 1,
                    "char_ptr_ptr3": 1,
                    "char_ptr_ptr_3": 2,
                    "char_ptr_ptr_4": 1,
                    "char_ptr_ptr_r12": 1,
                    "char_ptr_ptr_unaff_r12": 1,
                    "char_ptr_ptr_var3": 2,
                    "char_ptr_ptr_var_17": 1,
                    "char_ptr_ptr_var_4": 1,
                    "char_ptr_ptr_var_r12": 2,
                    "char_ptr_ptr_var_unaff_r12": 1,
                    "current_file_info": 1,
                    "file_info_array_end": 1,
                    "file_path_ptr": 1,
                    "file_pointer_list_temp": 1,
                    "pointer_to_pointer_to_char": 1,
                    "pointer_to_pointer_to_char3": 1,
                    "pointer_var3": 1,
                    "ppc_var_array": 1,
                    "r12": 1,
                    "r12_register": 1,
                    "r12_variable": 1,
                    "register_r12": 1,
                    "unaffected_r12": 2,
                    "unaffected_register_r12": 1,
                    "unaffected_var_r12": 1
                },
                "unaff_R13D": {
                    "archive_type": 2,
                    "file_count": 1,
                    "file_counter": 1,
                    "flag_var": 1,
                    "is_internal_stat_error": 1,
                    "num_files": 1,
                    "r13_d": 1,
                    "r13_d_register": 1,
                    "r13_d_variable": 1,
                    "register_r13_d": 1,
                    "uint1": 1,
                    "uint_r13_d": 1,
                    "uint_unaff_r13_d": 1,
                    "uint_val": 1,
                    "uint_var": 7,
                    "uint_var_18": 1,
                    "uint_var_r13_d": 1,
                    "uint_var_unaff_r13_d": 2,
                    "uint_variable1": 1,
                    "unaffected_r13_d": 2,
                    "unaffected_register_r13_d": 1,
                    "unaffected_var_r13_d": 1
                },
                "unaff_R14": {
                    "archive_info": 1,
                    "archive_list": 1,
                    "file_array": 1,
                    "file_data": 1,
                    "file_info_array_start": 1,
                    "long_r14": 1,
                    "long_unaff_r14": 1,
                    "long_val3": 1,
                    "long_var": 2,
                    "long_var3": 3,
                    "long_var_20": 1,
                    "long_var_3": 3,
                    "long_var_r14": 1,
                    "long_var_unaff_r14": 2,
                    "long_variable3": 1,
                    "object_file_list_ptr": 1,
                    "pointer_to_char": 1,
                    "r14": 1,
                    "r14_register": 1,
                    "r14_variable": 1,
                    "register_r14": 1,
                    "unaffected_r14": 2,
                    "unaffected_register_r14": 1,
                    "unaffected_var_r14": 1
                },
                "unaff_RBP": {
                    "archive_files": 1,
                    "char_pointer_pointer_3": 1,
                    "char_ptr_ptr2": 1,
                    "char_ptr_ptr_2": 2,
                    "char_ptr_ptr_3": 1,
                    "char_ptr_ptr_rbp": 1,
                    "char_ptr_ptr_unaff_rbp": 1,
                    "char_ptr_ptr_var2": 2,
                    "char_ptr_ptr_var_16": 1,
                    "char_ptr_ptr_var_3": 1,
                    "char_ptr_ptr_var_bp": 1,
                    "char_ptr_ptr_var_rbp": 1,
                    "char_ptr_ptr_var_unaff_rbp": 1,
                    "file_info_array_pointer": 1,
                    "file_path_list": 1,
                    "file_paths": 1,
                    "file_pointer_list": 1,
                    "param_7": 1,
                    "pointer_to_pointer_to_char": 1,
                    "pointer_to_pointer_to_char2": 1,
                    "pointer_var2": 1,
                    "rbp": 1,
                    "rbp_register": 1,
                    "rbp_variable": 1,
                    "register_bp": 1,
                    "unaffected_rbp": 2,
                    "unaffected_register_bp": 1,
                    "unaffected_var_rbp": 1
                },
                "unaff_RBX": {
                    "archive_file": 1,
                    "archive_filename": 1,
                    "char_pointer_3": 1,
                    "char_ptr": 1,
                    "char_ptr3": 1,
                    "char_ptr_5": 1,
                    "char_ptr_ptr_1": 1,
                    "char_ptr_rbx": 1,
                    "char_ptr_unaff_rbx": 1,
                    "char_ptr_var3": 1,
                    "char_ptr_var5": 1,
                    "char_ptr_var_14": 1,
                    "char_ptr_var_3": 1,
                    "char_ptr_var_rbx": 1,
                    "char_ptr_var_unaff_rbx": 1,
                    "current_file": 1,
                    "current_file_1": 1,
                    "current_filename": 1,
                    "file": 1,
                    "file_ptr_rbx": 1,
                    "pointer_to_char": 2,
                    "pointer_var1": 1,
                    "rbx": 1,
                    "rbx_register": 1,
                    "rbx_variable": 1,
                    "register_bx": 1,
                    "unaffected_rbx": 2,
                    "unaffected_register_bx": 1,
                    "unaffected_var_rb": 1
                }
            },
            "called": [
                "FUN_00103172",
                "filename_cmp",
                "xmalloc",
                "stat",
                "FUN_001058b0",
                "FUN_00107c10",
                "FUN_00105830",
                "__errno_location",
                "FUN_00105af0",
                "FUN_001028ed",
                "lbasename",
                "FUN_00105ae0",
                "dcgettext",
                "strlen",
                "FUN_00105870",
                "bfd_openr",
                "FUN_00102943",
                "FUN_00107690"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\n\n\nundefined8 process_files_and_print_data_001028ed(undefined8 filename,long file_size)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int int_var3;\n  size_t size_var4;\n  int *int_ptr;\n  char *char_ptr_var6;\n  char *char_ptr_var7;\n  char **char_ptr_ptr;\n  undefined8 undefined_var9;\n  long long_var10;\n  char *string_1;\n  char *string_2;\n  long long_var11;\n  undefined8 undefined_var12;\n  ulong ulong_var13;\n  char *pointer_to_char;\n  char **char_ptr_ptr14;\n  char **char_ptr_ptr_var2;\n  char **char_ptr_ptr_var3;\n  uint uint_var;\n  char **char_ptr_ptr15;\n  long long_var_3;\n  bool bool_var;\n  byte byte_var17;\n  char **param_7;\n  undefined8 output_param;\n  long stack_var1;\n  long stack_var2;\n  \n  byte_var17 = 0;\ncode_r0x001028ed:\n  print_error_message_and_exit_00107c10(pointer_to_char,file_size);\nLAB_001028f5:\n  undefined_var12 = DAT_0010d638;\n  if (uint_var != 3) {\n    while( true ) {\n      if ((undefined8 *)*char_ptr_ptr_var3 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var3 = filename_cmp(*(undefined8 *)*char_ptr_ptr_var3,undefined_var12);\n      if (int_var3 == 0) break;\n      char_ptr_ptr_var3 = (char **)(*char_ptr_ptr_var3 + 0xf0);\n    }\n    if (uint_var != 2) goto LAB_0010571f;\n    char_ptr_ptr_var3 = (char **)(*char_ptr_ptr_var3 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var10 = *(long *)(long_var_3 + 0xf0);\n  if (*(long *)(long_var_3 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var11 = long_var10;\n    long_var10 = *(long *)(long_var11 + 0xf0);\n  } while (long_var10 != 0);\n  char_ptr_ptr_var3 = (char **)(long_var11 + 0xf0);\n  pointer_to_char = *char_ptr_ptr_var2;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  uint_var = (uint)(DAT_0010d60c != 0);\n  file_size = bfd_openr(pointer_to_char,DAT_0010d5f0);\n  if (file_size != 0) {\n    char_ptr_ptr_var2 = char_ptr_ptr_var2 + 1;\n    byte_var2 = process_archived_files_00105af0(char_ptr_ptr_var3,file_size,uint_var,undefined_var1);\n    output_param._6_1_ = output_param._6_1_ | byte_var2;\n    char_ptr_var6 = *char_ptr_ptr_var2;\n    do {\n      if (char_ptr_var6 == (char *)0x0) {\n        if (output_param._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var12 = extract_and_print_archive_file_info_001058b0();\n        return undefined_var12;\n      }\n      char_ptr_ptr14 = *(char ***)(long_var_3 + 0xf0);\n      char_ptr_ptr_var3 = param_7;\n      if (output_param._7_1_ == '\\0') {\n        char_ptr_ptr15 = param_7;\n        if (char_ptr_ptr14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              string_1 = (char *)lbasename(*char_ptr_ptr14);\n              char_ptr_var7 = string_1;\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string_1);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_var_3 + 8) + 0x1e);\n                if (ulong_var13 < size_var4) {\n                  char_ptr_var7 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_var_3 + 8);\n                  char_ptr_var6 = char_ptr_var7;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr_var6 = *string_1;\n                    string_1 = string_1 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr_var6 = char_ptr_var6 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr_var7[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                char_ptr_var6 = *char_ptr_ptr_var2;\n                string_1 = char_ptr_var7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_ptr_var6 = *char_ptr_ptr_var2;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string_2 = (char *)lbasename(char_ptr_var6);\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string_2);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(long_var_3 + 8) + 0x1e);\n                char_ptr_var6 = string_2;\n                string_1 = char_ptr_var7;\n                if (ulong_var13 < size_var4) {\n                  char_ptr_var6 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(long_var_3 + 8);\n                  char_ptr_var7 = char_ptr_var6;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr_var7 = *string_2;\n                    string_2 = string_2 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr_var7 = char_ptr_var7 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr_var6[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var3 = filename_cmp(string_2,char_ptr_var7);\n            }\n            else {\n              char_ptr_var6 = *char_ptr_ptr_var2;\n              string_1 = *char_ptr_ptr14;\nLAB_00102980:\n              int_var3 = filename_cmp(char_ptr_var6,string_1);\n            }\n            if ((int_var3 == 0) && (char_ptr_ptr14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var3 = stat(*char_ptr_ptr_var2,(stat *)&stack0x000000b0);\n                if (int_var3 != 0) {\n                  int_ptr = __errno_location();\n                  if (*int_ptr != 2) {\n                    print_error_message_and_exit_00107c10(*char_ptr_ptr_var2);\nLAB_00102b7e:\n                    char_ptr_var6 = *char_ptr_ptr14;\n                    undefined_var12 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_error_message_and_exit_00107690(undefined_var12,char_ptr_var6);\n                    free(char_ptr_ptr_var2);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr = (char **)char_ptr_ptr14[0x1d];\n                if ((char **)char_ptr_ptr14[0x1d] == (char **)0x0) {\n                  char_ptr_ptr = char_ptr_ptr14;\n                }\n                int_var3 = (**(code **)(char_ptr_ptr[1] + 0x1e8))(char_ptr_ptr14,&stack0x00000020);\n                if (int_var3 != 0) goto LAB_00102b7e;\n                if (stack_var2 <= stack_var1) goto LAB_0010577e;\n              }\n              undefined_var12 = find_last_file_index_00105870(param_7,2,*char_ptr_ptr14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_ptr_var6 = *char_ptr_ptr_var2;\n                bool_var = DAT_0010d60c != 0;\n                long_var10 = bfd_openr(char_ptr_var6,DAT_0010d5f0);\n                if (long_var10 == 0) {\n                  print_error_message_and_exit_00107c10(char_ptr_var6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = print_and_update_data_00103172(undefined_var12,long_var10,bool_var);\n              }\n              else {\n                undefined_var9 = extract_and_copy_substring_00105830(*char_ptr_ptr_var2);\n                int_var3 = filename_cmp(undefined_var9,\"__.LIBDEP\");\n                if (int_var3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = print_and_update_data_00103172(undefined_var12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *char_ptr_ptr15 = *(char **)(*char_ptr_ptr15 + 0xf0);\n                output_param._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            char_ptr_ptr15 = char_ptr_ptr14 + 0x1e;\n            char_ptr_ptr14 = (char **)char_ptr_ptr14[0x1e];\n          } while (char_ptr_ptr14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var10 = *(long *)(long_var_3 + 0xf0);\n        if (*(long *)(long_var_3 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      pointer_to_char = *char_ptr_ptr_var2;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var12 = extract_and_copy_substring_00105830(pointer_to_char);\n      int_var3 = filename_cmp(undefined_var12,\"__.LIBDEP\");\n      if (int_var3 != 0) goto code_r0x0010574f;\n      byte_var2 = process_archived_files_00105ae0(char_ptr_ptr_var3,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      output_param._6_1_ = byte_var2 | output_param._6_1_;\nLAB_0010577e:\n      char_ptr_ptr_var2 = char_ptr_ptr_var2 + 1;\n      char_ptr_var6 = *char_ptr_ptr_var2;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  pointer_to_char = *char_ptr_ptr_var2;\n  goto LAB_00105698;\n}\n\n",
            "current_name": "process_files_and_print_data_001028ed",
            "entrypoint": "0x001028ed",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028ed": "process_files_and_print_data_001028ed",
                "__s": "string_1",
                "__s_00": "string_2",
                "bVar16": "bool_var",
                "bVar17": "byte_var17",
                "bVar2": "byte_var2",
                "iVar3": "int_var3",
                "in_stack_00000078": "stack_var1",
                "in_stack_00000108": "stack_var2",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "param_1": "filename",
                "param_2": "file_size",
                "param_9": "output_param",
                "pcVar6": "char_ptr_var6",
                "pcVar7": "char_ptr_var7",
                "piVar5": "int_ptr",
                "ppcVar14": "char_ptr_ptr14",
                "ppcVar15": "char_ptr_ptr15",
                "ppcVar8": "char_ptr_ptr",
                "sVar4": "size_var4",
                "uVar1": "undefined_var1",
                "uVar12": "undefined_var12",
                "uVar13": "ulong_var13",
                "uVar9": "undefined_var9",
                "unaff_R12": "char_ptr_ptr_var3",
                "unaff_R13D": "uint_var",
                "unaff_R14": "long_var_3",
                "unaff_RBP": "char_ptr_ptr_var2",
                "unaff_RBX": "pointer_to_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102943": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_0010d618": {
                    "counter": 10,
                    "data": 1,
                    "data_counter": 7,
                    "data_flag": 2,
                    "data_initialized": 2,
                    "data_value": 1,
                    "global_variable": 1,
                    "initialized_value": 1
                },
                "FUN_00102943": {
                    "initialize_counter": 3,
                    "initialize_data": 16,
                    "initialize_global_variable": 1,
                    "reset_counter": 5,
                    "reset_dat_pointer": 1,
                    "reset_data": 3,
                    "reset_global_counter": 1,
                    "reset_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "code": "\nvoid initialize_data_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_00102943",
            "entrypoint": "0x00102943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102ba1": {
            "additional_data": {
                "FUN_00102ba1": {
                    "dealloc_memory": 1,
                    "deallocate_and_shift": 1,
                    "deallocate_memory": 7,
                    "deallocate_memory_and_return": 2,
                    "deallocate_memory_and_shift": 1,
                    "decompiled_function": 1,
                    "free_and_return": 4,
                    "free_and_return_address": 1,
                    "free_and_return_address_shifted": 1,
                    "free_and_shift": 4,
                    "free_and_shift_address": 1,
                    "free_memory": 2,
                    "free_memory_and_return": 3,
                    "free_memory_and_return_address": 1,
                    "release_memory": 1
                },
                "auVar1": {
                    "modified_address": 1,
                    "result": 4,
                    "return_value": 2,
                    "temporary_variable": 1,
                    "updated_return_value": 2
                },
                "unaff_RBP": {
                    "memory_address": 6,
                    "memory_block": 11,
                    "memory_chunk": 1,
                    "memory_chunk_address": 1,
                    "memory_pointer": 2,
                    "memory_to_free": 2,
                    "pointer_to_be_freed": 2,
                    "pointer_to_free": 2,
                    "ptr_to_free_memory": 2,
                    "ptr_to_memory": 1,
                    "to_free": 1
                },
                "unaff_retaddr": {
                    "return_address": 30,
                    "return_value": 1
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\nundefined  [16] free_memory_and_return_address_00102ba1(void)\n\n{\n  undefined result [16];\n  void *memory_block;\n  ulong return_address;\n  \n  free(memory_block);\n  result._8_8_ = 0;\n  result._0_8_ = return_address;\n  return result << 0x40;\n}\n\n",
            "current_name": "free_memory_and_return_address_00102ba1",
            "entrypoint": "0x00102ba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102ba1": "free_memory_and_return_address_00102ba1",
                "auVar1": "result",
                "unaff_RBP": "memory_block",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102bb0": {
            "additional_data": {
                "FUN_00102bb0": {
                    "copy_string_limited": 1,
                    "copy_string_with_limit": 1,
                    "copy_string_with_max_length": 1,
                    "extract_string": 1,
                    "reverse_and_allocate_string": 1,
                    "reverse_string": 23,
                    "string_copy": 3
                },
                "auVar7": {
                    "result": 4,
                    "return_address": 1,
                    "return_data": 1,
                    "return_val": 1,
                    "return_value": 20,
                    "return_values": 1,
                    "returned_value": 1
                },
                "bVar6": {
                    "addition_factor": 1,
                    "byte_value": 1,
                    "copy_direction": 1,
                    "flag": 1,
                    "increment": 1,
                    "is_negative": 9,
                    "is_reverse": 4,
                    "is_reversed": 6,
                    "iteration_flag": 1,
                    "loop_condition": 1,
                    "loop_variable": 1,
                    "reverse_direction": 1,
                    "reverse_flag": 3
                },
                "in_RAX": {
                    "input_string": 28,
                    "source_string": 2,
                    "string": 1
                },
                "lVar1": {
                    "input_pointer": 1,
                    "input_string_address": 1
                },
                "puVar3": {
                    "allocated_memory": 1,
                    "allocated_string": 1,
                    "copied_string": 4,
                    "destination_pointer": 1,
                    "destination_string": 1,
                    "new_string": 1,
                    "output_string": 2,
                    "reversed_string": 19
                },
                "puVar5": {
                    "current_char": 1,
                    "dest": 2,
                    "dest_pointer": 1,
                    "dest_ptr": 1,
                    "destination": 2,
                    "destination_pointer": 5,
                    "destination_pointer_it": 1,
                    "output_string_pointer": 1,
                    "reversed_char": 7,
                    "reversed_pointer": 1,
                    "reversed_string_cursor": 1,
                    "reversed_string_index": 1,
                    "reversed_string_pointer": 1,
                    "reversed_string_ptr": 4,
                    "temp_ptr": 1
                },
                "sVar2": {
                    "input_length": 6,
                    "length": 2,
                    "source_length": 2,
                    "string_length": 20
                },
                "uVar4": {
                    "comparison_value": 1,
                    "copy_length": 1,
                    "copy_limit": 1,
                    "limit": 2,
                    "max_chars": 1,
                    "max_copy_length": 1,
                    "max_copy_size": 1,
                    "max_length": 17,
                    "max_size": 1,
                    "max_string_length": 3,
                    "num_characters": 1,
                    "substring_length": 1
                },
                "unaff_RBP": {
                    "base_pointer": 20,
                    "frame_pointer": 5,
                    "saved_base_ptr": 1,
                    "stack_base": 2,
                    "stack_base_ptr": 1,
                    "stack_pointer": 1,
                    "unaff_rbp": 1
                },
                "unaff_RBX": {
                    "current_char": 13,
                    "iterator": 2,
                    "original_string": 1,
                    "source": 4,
                    "source_pointer": 8,
                    "source_ptr": 1,
                    "src_pointer": 1,
                    "string_pointer": 1
                },
                "unaff_retaddr": {
                    "return_address": 18
                }
            },
            "called": [
                "strlen",
                "xmalloc"
            ],
            "calling": [
                "FUN_00105830"
            ],
            "code": "\nundefined  [16] reverse_and_allocate_string_00102bb0(void)\n\n{\n  long input_pointer;\n  char *input_string;\n  size_t string_length;\n  undefined *reversed_string;\n  ulong max_length;\n  undefined *current_char;\n  long base_pointer;\n  undefined *reversed_char;\n  byte is_negative;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  is_negative = 0;\n  string_length = strlen(input_string);\n  max_length = (ulong)*(byte *)(*(long *)(base_pointer + 8) + 0x1e);\n  reversed_string = current_char;\n  if (max_length < string_length) {\n    reversed_string = (undefined *)xmalloc(max_length + 1);\n    input_pointer = *(long *)(base_pointer + 8);\n    reversed_char = reversed_string;\n    for (max_length = (ulong)*(byte *)(input_pointer + 0x1e); max_length != 0; max_length = max_length - 1) {\n      *reversed_char = *current_char;\n      current_char = current_char + (ulong)is_negative * -2 + 1;\n      reversed_char = reversed_char + (ulong)is_negative * -2 + 1;\n    }\n    reversed_string[*(byte *)(input_pointer + 0x1e)] = 0;\n  }\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = reversed_string;\n  return return_value;\n}\n\n",
            "current_name": "reverse_and_allocate_string_00102bb0",
            "entrypoint": "0x00102bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102bb0": "reverse_and_allocate_string_00102bb0",
                "auVar7": "return_value",
                "bVar6": "is_negative",
                "in_RAX": "input_string",
                "lVar1": "input_pointer",
                "puVar3": "reversed_string",
                "puVar5": "reversed_char",
                "sVar2": "string_length",
                "uVar4": "max_length",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "current_char",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102bf5": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "file": 1,
                    "file_descriptor": 1,
                    "file_handle": 2,
                    "file_pointer": 2,
                    "file_to_close": 3
                },
                "DAT_0010d5e0": {
                    "bfd_cache_flag": 1,
                    "cache_enabled": 1,
                    "cache_initialized": 1,
                    "cache_is_active": 1,
                    "cache_status": 1,
                    "file_cache_exists": 1,
                    "flag": 1,
                    "flag_value": 1
                },
                "DAT_0010d618": {
                    "file_path": 5,
                    "file_to_delete": 2,
                    "file_to_unlink": 1
                },
                "FILE": {
                    "file": 3
                },
                "FUN_00102bf5": {
                    "cleanup": 4,
                    "cleanup_and_close": 1,
                    "cleanup_and_close_files": 3,
                    "cleanup_function": 1,
                    "cleanup_resources": 10,
                    "close_and_cleanup": 1,
                    "close_and_delete_files": 1,
                    "close_and_remove_files": 1,
                    "close_cache_and_file": 3,
                    "close_file_and_delete": 1,
                    "close_file_and_remove": 1,
                    "close_file_and_unlink": 2,
                    "close_file_manager": 1,
                    "close_files_and_remove": 1
                },
                "bfd_cache_close": {
                    "close_cache": 2
                },
                "cleanup_and_close_files": {
                    "cleanup_and_close_files": 1
                },
                "closeFileManager": {
                    "close_file_manager": 1
                },
                "fclose": {
                    "close_file": 9
                },
                "file": {
                    "file_ptr": 1
                },
                "filePtr": {
                    "file_ptr": 1
                },
                "remove_file": {
                    "remove_file": 1
                },
                "unink_if_ordinary": {
                    "remove_file": 1
                },
                "unlink_if_ordinary": {
                    "delete_file": 4,
                    "remove_file": 17,
                    "remove_file_regularly": 1,
                    "unlink_file": 3
                },
                "void": {
                    "void": 1
                }
            },
            "called": [
                "fclose",
                "bfd_cache_close",
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00107730"
            ],
            "code": "\nvoid cleanup_resources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (file *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "current_name": "cleanup_resources_00102bf5",
            "entrypoint": "0x00102bf5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "close_cache",
                "fclose": "close_file",
                "unlink_if_ordinary": "remove_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c25": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "dat_file": 1,
                    "file_pointer": 2,
                    "output_file": 3
                },
                "DAT_0010d618": {
                    "dat_path": 1,
                    "file_path": 1,
                    "output_path": 4
                },
                "DAT_0010d638": {
                    "dat_message": 1,
                    "default_error_message": 2,
                    "default_translation_string": 1,
                    "error_message_data": 1,
                    "internal_error_message": 1
                },
                "FUN_00102c25": {
                    "extract_and_copy_archive": 1,
                    "extract_and_process": 1,
                    "extract_and_process_archive": 9,
                    "extract_and_process_archives": 1,
                    "extract_and_process_file": 1,
                    "extract_and_process_files": 1,
                    "extract_and_save_archive": 4,
                    "extract_and_write_archive_content": 1,
                    "extract_archive": 2,
                    "extract_archive_contents": 1,
                    "extract_file_from_archive": 2,
                    "improved_extract_archive": 1,
                    "process_archive": 4,
                    "process_binary_file": 1,
                    "process_files": 1
                },
                "_DAT_0010d600": {
                    "dat_flag": 1,
                    "flag": 1,
                    "modification_flag": 3,
                    "modify_file_modification_time": 1
                },
                "__errno_location": {
                    "error_location": 1
                },
                "__mode_t": {
                    "file_permission_type": 1
                },
                "__n": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "bytes_read": 23,
                    "chunk_size": 1,
                    "read_size": 3
                },
                "__ptr": {
                    "buffer": 20,
                    "buffer_pointer": 6,
                    "buffer_ptr": 5
                },
                "iVar1": {
                    "cmp_result": 1,
                    "comparison_result": 15,
                    "file_cmp_result": 1,
                    "filename_comparison": 1,
                    "filename_comparison_result": 8,
                    "filename_match": 1
                },
                "iVar2": {
                    "error_code": 11,
                    "error_flag": 1,
                    "error_status": 1,
                    "function_result": 1,
                    "internal_error_code": 1,
                    "internal_stat_error": 3,
                    "result": 3,
                    "return_value": 1,
                    "stat_error": 2,
                    "stat_error_code": 1,
                    "stat_error_result": 1,
                    "stat_result": 1,
                    "status": 4
                },
                "lVar7": {
                    "index": 1,
                    "loop_count": 1,
                    "loop_counter": 19,
                    "loop_index": 1,
                    "loop_iteration": 1,
                    "loop_iterator": 1,
                    "loop_size": 1,
                    "loop_variable": 6
                },
                "param_11": {
                    "file_mode": 2,
                    "file_permission": 6,
                    "file_permissions": 10,
                    "mode": 5,
                    "new_permissions": 2,
                    "param_permissions": 1,
                    "permissions": 5
                },
                "param_12": {
                    "archive_size": 25,
                    "file_size": 4,
                    "param_archive_size": 1,
                    "size": 1
                },
                "param_7": {
                    "err_flags": 1,
                    "error_array": 1,
                    "error_codes": 4,
                    "error_codes_array": 1,
                    "error_flags": 3,
                    "file_modes": 1,
                    "file_permissions": 4,
                    "file_status": 1,
                    "flags": 4,
                    "info_array": 1,
                    "param_array": 2,
                    "param_error_messages": 1,
                    "param_errors": 1,
                    "param_flags": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "permissions": 3
                },
                "pcVar4": {
                    "error_description": 1,
                    "error_message": 18,
                    "error_msg": 1,
                    "error_str": 2,
                    "error_string": 8
                },
                "piVar3": {
                    "errno_location": 11,
                    "errno_pointer": 2,
                    "errno_ptr": 4,
                    "errnum": 1,
                    "error_code": 1,
                    "error_code_pointer": 1,
                    "error_location": 3,
                    "error_number": 5,
                    "error_number_pointer": 1,
                    "error_number_ptr": 1
                },
                "plVar8": {
                    "archive_entry_ptr": 1,
                    "archive_pointer": 1,
                    "archive_ptr": 1,
                    "current_archive_entry": 1,
                    "current_element_ptr": 1,
                    "current_entry": 2,
                    "current_file": 7,
                    "current_file_pointer": 3,
                    "current_file_ptr": 1,
                    "current_info": 1,
                    "current_pointer": 3,
                    "current_ptr": 1,
                    "file_pointer": 3,
                    "file_ptr": 2,
                    "output_data": 1,
                    "pointer": 1,
                    "pointer_to_long": 1
                },
                "pplVar6": {
                    "archive_data": 3,
                    "archive_info": 1,
                    "archive_path": 1,
                    "archive_pointer": 5,
                    "archive_ptr": 8,
                    "archive_ptr_array": 1,
                    "archive_structure": 1,
                    "file_array": 1,
                    "file_path_ptr": 1,
                    "file_pointer": 1,
                    "file_pointer_array": 1,
                    "function_pointer_array": 1,
                    "function_pointers": 2,
                    "pointer_to_archive": 1,
                    "pointer_to_location": 1,
                    "ptr_to_file_pointers": 1
                },
                "puVar9": {
                    "array_pointer": 2,
                    "current_error_code": 1,
                    "current_permission": 1,
                    "error_code_ptr": 1,
                    "flags_ptr": 1,
                    "initialize_variables": 1,
                    "loop_variable": 1,
                    "memset_ptr": 1,
                    "param_7_iterator": 1,
                    "param_7_ptr": 1,
                    "param_7_pu_var9": 1,
                    "param_array": 1,
                    "param_array_pointer": 1,
                    "param_buffer": 1,
                    "param_pointer": 2,
                    "param_ptr": 3,
                    "parameter_pointer": 2,
                    "permissions_ptr": 1,
                    "pointer_iterator": 1,
                    "pointer_to_uint": 1,
                    "pointer_to_zero": 1,
                    "ptr": 1,
                    "ptr_array": 1,
                    "src_ptr": 1
                },
                "sVar11": {
                    "buffer_size": 1,
                    "bytes_read": 2,
                    "bytes_remaining": 1,
                    "bytes_to_copy": 2,
                    "bytes_to_process": 3,
                    "bytes_to_read": 4,
                    "bytes_to_write": 6,
                    "chunk_size": 2,
                    "copy_size": 1,
                    "data_size": 1,
                    "read_size": 2,
                    "read_write_result": 1,
                    "size": 1,
                    "temp_size": 1,
                    "write_size": 3
                },
                "uVar10": {
                    "bytes_copied": 4,
                    "bytes_processed": 10,
                    "bytes_read": 2,
                    "bytes_written": 10,
                    "current_offset": 1,
                    "total_bytes_read": 2,
                    "ulong_var": 1
                },
                "uVar5": {
                    "error_domain": 1,
                    "error_message": 11,
                    "error_message_domain": 1,
                    "error_string": 5,
                    "error_text": 2,
                    "gettext_message": 2,
                    "gettext_result": 2,
                    "message": 2,
                    "translated_message": 2,
                    "translation": 1,
                    "translation_msg": 1,
                    "translation_string": 1
                },
                "unaff_RBX": {
                    "archive": 1,
                    "archive_data": 1,
                    "archive_info": 1,
                    "archive_object": 1,
                    "archive_pointer": 1,
                    "archive_reference": 1,
                    "file": 1,
                    "file_array": 1,
                    "file_info": 2,
                    "file_info_array": 2,
                    "file_information": 1,
                    "file_metadata": 1,
                    "func_params": 1,
                    "function_arguments": 3,
                    "function_parameters": 1,
                    "function_params": 1,
                    "input_data": 2,
                    "pointer_array": 1,
                    "ptr_array": 1,
                    "ptr_rbx": 1,
                    "unaffected_rbx": 2,
                    "unaffiliated_pointer": 1
                }
            },
            "called": [
                "FUN_00105a20",
                "fclose",
                "bfd_bread",
                "fwrite",
                "strerror",
                "bfd_seek",
                "xmalloc",
                "__errno_location",
                "chmod",
                "dcgettext",
                "free",
                "FUN_00107690",
                "FUN_00107c80"
            ],
            "calling": [
                "FUN_00107740"
            ],
            "code": "\n\n\nlong * extract_and_process_archive_00102c25(void)\n\n{\n  int comparison_result;\n  int error_code;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  long **archive_ptr;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **function_arguments;\n  long *current_file;\n  undefined4 *param_ptr;\n  ulong bytes_written;\n  size_t bytes_to_write;\n  undefined4 *file_permissions;\n  file_permission_type file_permissions;\n  ulong archive_size;\n  \n  param_ptr = file_permissions;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *param_ptr = 0;\n    param_ptr = param_ptr + 1;\n  }\n  archive_ptr = (long **)function_arguments[0x1d];\n  if ((long **)function_arguments[0x1d] == (long **)0x0) {\n    archive_ptr = function_arguments;\n  }\n  error_code = (*(code *)archive_ptr[1][0x3d])();\n  if (error_code != 0) {\n    current_file = *function_arguments;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_error_message_and_exit_00107690(error_message,current_file);\n    error_message = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,error_message);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)process_output_path_00105a20(*function_arguments);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_write = archive_size - bytes_written;\n      if (0x2000 < bytes_to_write) {\n        bytes_to_write = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_write);\n      if (bytes_to_write != bytes_read) {\nLAB_00102c78:\n        function_arguments = (long **)*function_arguments[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_message_and_exit_00107690(error_message,function_arguments);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)process_output_path_00105a20(*function_arguments);\n      }\n      bytes_to_write = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_write != bytes_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_error_message_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    set_file_modification_time_00107c80(error_message,file_permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "current_name": "extract_and_process_archive_00102c25",
            "entrypoint": "0x00102c25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c25": "extract_and_process_archive_00102c25",
                "__errno_location": "error_location",
                "__mode_t": "file_permission_type",
                "__n": "bytes_read",
                "__ptr": "buffer",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "lVar7": "loop_counter",
                "param_11": "file_permissions",
                "param_12": "archive_size",
                "param_7": "file_permissions",
                "pcVar4": "error_message",
                "piVar3": "errno_location",
                "plVar8": "current_file",
                "pplVar6": "archive_ptr",
                "puVar9": "param_ptr",
                "sVar11": "bytes_to_write",
                "uVar10": "bytes_written",
                "uVar5": "error_message",
                "unaff_RBX": "function_arguments"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cd9": {
            "additional_data": {
                "DAT_0010d638": {
                    "default_filename": 1
                },
                "FUN_00102cd9": {
                    "find_file_by_index": 1,
                    "find_file_offset": 2,
                    "find_matching_address": 6,
                    "find_matching_entry": 7,
                    "find_matching_file": 4,
                    "find_matching_filename": 1,
                    "find_matching_pointer": 7,
                    "find_matching_value": 1,
                    "find_target": 1,
                    "search_and_return": 1
                },
                "filename_cmp": {
                    "compare_filenames": 3
                },
                "iVar1": {
                    "cmp_result": 3,
                    "comparison_result": 20,
                    "filename_comparison": 3,
                    "result": 1
                },
                "in_EAX": {
                    "argc": 1,
                    "comparison_value": 6,
                    "condition": 1,
                    "count": 1,
                    "file_type": 3,
                    "flag": 2,
                    "input_parameter": 1,
                    "input_value": 6,
                    "loop_counter": 1,
                    "loop_iterator": 1,
                    "mode": 1,
                    "num_files": 1,
                    "num_iterations": 1,
                    "option": 1,
                    "param1": 1,
                    "search_type": 2,
                    "status": 1
                },
                "param_7": {
                    "comparison_param": 1,
                    "comparison_value": 2,
                    "desired_address": 1,
                    "filename": 5,
                    "search_address": 1,
                    "search_file_name": 2,
                    "search_filename": 2,
                    "search_parameter": 1,
                    "search_string": 1,
                    "search_value": 1,
                    "specified_filename": 1,
                    "target_address": 1,
                    "target_file_name": 3,
                    "target_filename": 6,
                    "target_pointer": 1,
                    "target_value": 2
                },
                "unaff_RBX": {
                    "address_pointer": 3,
                    "addresses": 2,
                    "array_ptr": 1,
                    "current_address": 1,
                    "current_entry": 3,
                    "current_pointer": 4,
                    "current_ptr": 1,
                    "entries": 1,
                    "entry_pointer": 3,
                    "file_array": 1,
                    "file_entry": 1,
                    "file_list": 3,
                    "file_offset_ptr": 1,
                    "file_offsets": 1,
                    "pointer_array": 2,
                    "pointer_list": 2,
                    "target_ptr": 1
                }
            },
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105870"
            ],
            "code": "\nlong * find_file_by_index_00102cd9(void)\n\n{\n  int comparison_value;\n  int comparison_result;\n  long *current_pointer;\n  undefined8 target_filename;\n  \n  target_filename = DAT_0010d638;\n  if (comparison_value == 3) {\n    for (; *current_pointer != 0; current_pointer = (long *)(*current_pointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*current_pointer != (undefined8 *)0x0; current_pointer = (long *)(*current_pointer + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*current_pointer,target_filename);\n      if (comparison_result == 0) {\n        if (comparison_value != 2) {\n          return current_pointer;\n        }\n        return (long *)(*current_pointer + 0xf0);\n      }\n    }\n  }\n  return current_pointer;\n}\n\n",
            "current_name": "find_file_by_index_00102cd9",
            "entrypoint": "0x00102cd9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cd9": "find_file_by_index_00102cd9",
                "filename_cmp": "compare_filenames",
                "iVar1": "comparison_result",
                "in_EAX": "comparison_value",
                "param_7": "target_filename",
                "unaff_RBX": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d2f": {
            "additional_data": {
                "DAT_0010d5f8": {
                    "data_flag": 1,
                    "time_data_corrupt": 1
                },
                "FUN_00102d2f": {
                    "print_and_exit": 1,
                    "print_and_exit_on_error": 1,
                    "print_file_attributes": 1,
                    "print_file_details": 3,
                    "print_file_info": 21,
                    "print_file_information": 1,
                    "print_file_meta_data": 1,
                    "print_file_metadata": 1
                },
                "__format": {
                    "error_format": 1,
                    "error_message_format": 2,
                    "format_str": 1,
                    "format_string": 2,
                    "time_corrupt_message": 1,
                    "time_data_corrupt_format": 1,
                    "time_data_corrupt_msg": 2,
                    "time_data_message": 1,
                    "time_error_message": 3,
                    "time_error_msg": 1,
                    "time_format": 2
                },
                "bVar1": {
                    "error_code": 1,
                    "error_flag": 5,
                    "error_message": 2,
                    "error_message_flag": 1,
                    "error_status_code": 1
                },
                "bfd_close": {
                    "close_file": 1
                },
                "bfd_set_archive_head": {
                    "set_archive_head": 1
                },
                "cStack0000000000000016": {
                    "error_flag_1": 1,
                    "exec_permission": 1,
                    "executable_flag": 1,
                    "file_permission2": 1,
                    "file_permission_char1": 1,
                    "flag1": 1,
                    "has_executable_permission": 1,
                    "has_read_permission": 1,
                    "is_executable": 2,
                    "is_readable": 3,
                    "owner_read": 1,
                    "perm_flag1": 1,
                    "permission": 1,
                    "permission_bit1": 1,
                    "permission_user_read": 1,
                    "read_permission": 1,
                    "user_read_permission": 1,
                    "user_readable": 1
                },
                "cStack0000000000000017": {
                    "error_flag_2": 1,
                    "file_permission3": 1,
                    "file_permission_char2": 1,
                    "flag2": 1,
                    "has_write_permission": 2,
                    "is_writable": 5,
                    "owner_write": 1,
                    "perm_flag2": 1,
                    "permission": 1,
                    "permission_bit2": 1,
                    "permission_user_write": 1,
                    "user_writable": 1,
                    "user_write_permission": 1,
                    "writable_flag": 1,
                    "write_permission": 2
                },
                "cStack0000000000000019": {
                    "archive_executable_flag": 1,
                    "error_flag_3": 1,
                    "file_permission5": 1,
                    "file_permission_char4": 1,
                    "flag4": 1,
                    "group_read": 1,
                    "group_read_permission": 1,
                    "group_readable": 1,
                    "has_read_permission2": 1,
                    "is_archive": 3,
                    "is_archive_file": 1,
                    "is_readable_by_others": 1,
                    "perm_flag4": 1,
                    "permission": 1,
                    "permission_bit4": 1,
                    "permission_group_read": 1,
                    "sticky_bit": 1
                },
                "cStack000000000000001a": {
                    "archive_writable_flag": 1,
                    "error_flag_4": 1,
                    "file_permission6": 1,
                    "file_permission_char5": 1,
                    "flag5": 1,
                    "group_writable": 1,
                    "group_write": 1,
                    "group_write_permission": 1,
                    "has_write_permission2": 1,
                    "is_directory": 2,
                    "is_shared": 1,
                    "is_symbolic_link": 1,
                    "is_writable_by_others": 1,
                    "perm_flag5": 1,
                    "permission": 1,
                    "permission_bit5": 1,
                    "permission_group_write": 1,
                    "setgid_bit": 1
                },
                "cStack000000000000001b": {
                    "archive_readable_flag": 1,
                    "error_flag_5": 1,
                    "file_permission7": 1,
                    "file_permission_char6": 1,
                    "flag6": 1,
                    "group_executable": 1,
                    "group_execute": 1,
                    "group_execute_permission": 1,
                    "has_execute_permission2": 1,
                    "has_set_group_id_permission": 1,
                    "is_executable_by_others": 1,
                    "is_set_gid": 1,
                    "is_setuid": 1,
                    "is_sticky": 1,
                    "is_text": 1,
                    "perm_flag6": 1,
                    "permission": 1,
                    "permission_bit6": 1,
                    "permission_group_execute": 1,
                    "set_uid_permission": 1,
                    "setuid_bit": 1
                },
                "cStack000000000000001c": {
                    "directory_permission": 1,
                    "error_flag_6": 1,
                    "file_permission8": 1,
                    "file_permission_char7": 1,
                    "flag7": 1,
                    "has_read_permission3": 1,
                    "is_readable_by_group": 1,
                    "is_set_uid": 1,
                    "is_setgid": 1,
                    "is_setuid": 2,
                    "other_read_permission": 1,
                    "other_readable": 1,
                    "others_read": 1,
                    "perm_flag7": 1,
                    "permission": 1,
                    "permission_bit7": 1,
                    "permission_other_read": 1,
                    "setuid_flag": 1
                },
                "cStack000000000000001d": {
                    "error_flag_7": 1,
                    "file_permission9": 1,
                    "file_permission_char8": 1,
                    "flag8": 1,
                    "has_write_permission3": 1,
                    "is_setgid": 2,
                    "is_sticky": 2,
                    "is_writable_by_group": 1,
                    "other_read_permission": 1,
                    "other_writable": 1,
                    "other_write_permission": 1,
                    "others_write": 1,
                    "perm_flag8": 1,
                    "permission": 1,
                    "permission_bit8": 1,
                    "permission_other_write": 1,
                    "setgid_flag": 1
                },
                "cStack000000000000001e": {
                    "error_flag_8": 1,
                    "file_permission10": 1,
                    "file_permission_char9": 1,
                    "flag9": 1,
                    "has_execute_permission3": 1,
                    "has_sticky_bit_permission": 1,
                    "is_executable_by_group": 1,
                    "is_other_writable": 1,
                    "is_sticky": 2,
                    "is_text": 1,
                    "other_executable": 1,
                    "other_execute_permission": 1,
                    "other_write_permission": 1,
                    "others_execute": 1,
                    "perm_flag9": 1,
                    "permission": 1,
                    "permission_bit9": 1,
                    "permission_other_execute": 1,
                    "set_gid_permission": 1,
                    "sticky_flag": 1
                },
                "cStack000000000000001f": {
                    "flag": 1,
                    "is_binary": 1,
                    "is_user_owned": 1,
                    "other_execute_permission": 1
                },
                "cVar2": {
                    "archive_head_flag": 1,
                    "bfd_set_archive_head_result": 1,
                    "res": 1,
                    "result": 5,
                    "return_value": 1,
                    "set_head_result": 1
                },
                "copy_and_delete_file_00105bc0": {
                    "copy_and_delete_file": 3
                },
                "dcgettext": {
                    "get_message": 2,
                    "get_translated_text": 1
                },
                "fclose": {
                    "close_file": 1
                },
                "fopen": {
                    "open_file": 1
                },
                "fprintf": {
                    "formatted_print": 1,
                    "write_formatted_to_file": 1
                },
                "fputc": {
                    "write_character": 1,
                    "write_character_to_file": 1,
                    "write_new_line": 1
                },
                "fputs": {
                    "write_string": 1,
                    "write_to_file": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 1
                },
                "iVar3": {
                    "copy_and_delete_file_result": 1,
                    "copy_delete_result": 1,
                    "copy_result": 6,
                    "copy_ret_val": 1,
                    "result": 1
                },
                "in_stack_00000018": {
                    "execute_permission": 1,
                    "execute_permissions": 1,
                    "file_flag": 1,
                    "file_permission4": 1,
                    "file_permission_char3": 1,
                    "flag3": 1,
                    "has_execute_permission": 1,
                    "has_read_permission": 1,
                    "is_executable": 2,
                    "is_readable": 2,
                    "owner_execute": 1,
                    "perm_flag3": 1,
                    "permission": 1,
                    "permission_bit3": 1,
                    "permission_user_execute": 1,
                    "read_permission": 1,
                    "readable_flag": 1,
                    "user_executable": 1,
                    "user_execute_permission": 1
                },
                "in_stack_00000070": {
                    "file_group": 4,
                    "file_group_id": 2,
                    "file_group_uid": 1,
                    "file_inode": 1,
                    "file_mode": 1,
                    "file_mode3": 1,
                    "file_owner": 2,
                    "file_size": 8,
                    "file_size_low": 1,
                    "file_time2": 1,
                    "file_user": 1,
                    "file_user_id": 2,
                    "group_id": 3,
                    "group_identifier": 1,
                    "size": 1,
                    "total_size": 1
                },
                "in_stack_00000080": {
                    "creation_time": 1,
                    "file_group_id": 1,
                    "file_mode4": 1,
                    "file_owner": 1,
                    "file_size": 14,
                    "file_size_in_bytes": 1,
                    "file_time3": 1,
                    "file_timestamp": 1,
                    "last_modified": 1,
                    "last_modified_date": 1,
                    "last_modified_time": 2,
                    "modification_time": 1,
                    "timestamp": 5
                },
                "print_error_message_and_exit_00107c10": {
                    "print_error_message_and_exit": 3
                },
                "sprintf": {
                    "format_string": 2
                },
                "stack0x00000016": {
                    "permission_string": 1
                },
                "stack0x00000020": {
                    "error_message": 2
                },
                "uStack0000000000000015": {
                    "file_perm": 1,
                    "file_permission": 5,
                    "file_permission1": 1,
                    "file_permission_flag": 1,
                    "file_permissions": 1,
                    "file_type": 9,
                    "file_type_ascii": 1
                },
                "uStack000000000000001f": {
                    "extra_permission": 2,
                    "flag": 1,
                    "flag1": 1,
                    "flag10": 1,
                    "is_executable": 1,
                    "is_null_terminator": 1,
                    "padding": 2,
                    "print_flag": 1,
                    "unknown": 1,
                    "unused_flag": 2,
                    "unused_stack_var": 1,
                    "zero_value": 1
                },
                "uStack0000000000000068": {
                    "file_attributes": 3,
                    "file_metadata": 1,
                    "file_mode": 14,
                    "file_mode1": 1,
                    "file_permission": 2,
                    "file_permissions": 6,
                    "file_size": 1,
                    "file_stat_mode": 1,
                    "permissions": 2
                },
                "uStack000000000000006c": {
                    "file_links": 5,
                    "file_mode2": 1,
                    "file_owner": 3,
                    "file_owner_id": 1,
                    "file_owner_uid": 1,
                    "file_size": 2,
                    "file_size_high": 1,
                    "file_time1": 1,
                    "file_user": 1,
                    "file_user_id": 1,
                    "group_id": 1,
                    "hard_links_count": 1,
                    "inode": 1,
                    "inode_number": 1,
                    "number_of_hard_links": 1,
                    "number_of_links": 3,
                    "owner_id": 1,
                    "user_id": 2,
                    "user_identifier": 1
                },
                "uVar4": {
                    "file_mode": 1,
                    "file_permission": 1,
                    "file_permissions": 1,
                    "file_type": 6,
                    "permission_bits": 1,
                    "permission_flag": 1
                },
                "unaff_R12": {
                    "archive_flag": 1,
                    "archive_status": 1,
                    "archive_type": 1,
                    "current_time": 1,
                    "error_code": 1,
                    "error_flag": 1,
                    "file_data": 1,
                    "file_flag": 1,
                    "file_flags": 2,
                    "file_format": 1,
                    "file_info": 1,
                    "file_info_flag": 1,
                    "file_options": 1,
                    "file_permissions": 2,
                    "file_type": 6,
                    "flag": 3,
                    "is_archive": 2,
                    "mode_flags": 1,
                    "time_data": 3
                },
                "unaff_R13": {
                    "allocated_mem": 1,
                    "buf": 1,
                    "buffer": 7,
                    "buffer_ptr": 1,
                    "data_ptr": 1,
                    "error_message": 1,
                    "file_buffer": 3,
                    "file_content": 1,
                    "file_data": 4,
                    "file_data_buffer": 1,
                    "file_data_copy": 1,
                    "file_info": 2,
                    "file_path": 1,
                    "file_path_copies": 1,
                    "file_pointer": 1,
                    "malloc_ptr": 1,
                    "memory": 1,
                    "path": 1,
                    "unallocated_memory": 1
                },
                "unaff_R14D": {
                    "dup_descriptor": 1,
                    "dup_file_descriptor": 1,
                    "duplicate_fd": 1,
                    "duplicate_handle": 1,
                    "fd": 1,
                    "file_descriptor": 26
                },
                "unaff_RBP": {
                    "file": 2,
                    "file_pointer": 2,
                    "file_ptr": 2,
                    "output_file": 25
                },
                "unaff_RBX": {
                    "archive_path": 1,
                    "argv": 2,
                    "file": 2,
                    "file_attributes": 1,
                    "file_content": 2,
                    "file_data": 4,
                    "file_details": 1,
                    "file_info": 4,
                    "file_info_ptr": 1,
                    "file_information": 1,
                    "file_lines": 1,
                    "file_names": 1,
                    "file_paths": 9,
                    "params": 1
                },
                "xexit": {
                    "exit_program": 2
                }
            },
            "called": [
                "FUN_00105bc0",
                "xexit",
                "free",
                "bfd_set_archive_head",
                "FUN_00107c10",
                "FUN_00102d2f",
                "bfd_close",
                "dup"
            ],
            "calling": [
                "FUN_00102d2f"
            ],
            "code": "\nvoid print_file_info_00102d2f(void)\n\n{\n  byte error_flag;\n  char result;\n  int copy_result;\n  char *time_error_message;\n  uint file_type;\n  char **file_paths;\n  FILE *output_file;\n  long file_type;\n  void *buffer;\n  int file_descriptor;\n  undefined file_type;\n  char is_readable;\n  char is_writable;\n  char is_readable;\n  char is_archive;\n  char is_directory;\n  char permission_group_execute;\n  char is_setuid;\n  char is_setgid;\n  char is_sticky;\n  undefined unused_flag;\n  uint file_mode;\n  uint file_links;\n  uint file_size;\n  undefined8 file_size;\n  \n  do {\n    error_flag = print_error_message_and_exit();\n    *(uint *)((long)file_paths + 0x44) = *(uint *)((long)file_paths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(file_type + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)file_paths + 0x49) = error_flag | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  dup(file_descriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    copy_result = copy_and_delete_file();\n    if (copy_result == 0) {\n      free_memory(buffer);\n      free_memory(output_file);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  print_error_message_and_exit();\n  time_error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&error_message,time_error_message);\n  file_type = file_mode & 0xf000;\n  if (file_type == 0x4000) {\n    file_type = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type = 0x73;\n  }\n  else {\n    file_type = 0x70;\n    if (file_type != 0x1000) {\n      file_type = 0x2d;\n    }\n  }\n  is_readable = (-((file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n  is_writable = (-((file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n  is_readable = (-((file_mode & 0x40) == 0) & 0xb5U) + 0x78;\n  is_archive = (-((file_mode & 0x20) == 0) & 0xbbU) + 0x72;\n  is_directory = (-((file_mode & 0x10) == 0) & 0xb6U) + 0x77;\n  permission_group_execute = (-((file_mode & 8) == 0) & 0xb5U) + 0x78;\n  is_setuid = (-((file_mode & 4) == 0) & 0xbbU) + 0x72;\n  is_setgid = (-((file_mode & 2) == 0) & 0xb6U) + 0x77;\n  is_sticky = (-((file_mode & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_mode & 0x800) != 0) {\n    if (is_readable == 'x') {\n      is_readable = 's';\n    }\n    else {\n      is_readable = 'S';\n    }\n  }\n  if ((file_mode & 0x400) != 0) {\n    if (permission_group_execute == 'x') {\n      permission_group_execute = 's';\n    }\n    else {\n      permission_group_execute = 'S';\n    }\n  }\n  if ((file_mode & 0x200) != 0) {\n    if (is_sticky == 'x') {\n      is_sticky = 't';\n    }\n    else {\n      is_sticky = 'T';\n    }\n  }\n  unused_flag = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&permission_string,(ulong)file_links,\n          (ulong)file_size,file_size,&error_message,(ulong)file_mode)\n  ;\n  fputs(*file_paths,output_file);\n  if ((char)file_type != '\\0') {\n    if ((*(byte *)((long)file_paths + 0x49) & 0x10) == 0) {\n      if (file_paths[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_paths[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "current_name": "print_file_info_00102d2f",
            "entrypoint": "0x00102d2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "__format": "time_error_message",
                "bVar1": "error_flag",
                "bfd_close": "close_file",
                "bfd_set_archive_head": "set_archive_head",
                "cStack0000000000000016": "is_readable",
                "cStack0000000000000017": "is_writable",
                "cStack0000000000000019": "is_archive",
                "cStack000000000000001a": "is_directory",
                "cStack000000000000001b": "permission_group_execute",
                "cStack000000000000001c": "is_setuid",
                "cStack000000000000001d": "is_setgid",
                "cStack000000000000001e": "is_sticky",
                "cVar2": "result",
                "copy_and_delete_file_00105bc0": "copy_and_delete_file",
                "dcgettext": "get_message",
                "fprintf": "formatted_print",
                "fputc": "write_character_to_file",
                "fputs": "write_to_file",
                "free": "free_memory",
                "iVar3": "copy_result",
                "in_stack_00000018": "is_readable",
                "in_stack_00000070": "file_size",
                "in_stack_00000080": "file_size",
                "print_error_message_and_exit_00107c10": "print_error_message_and_exit",
                "sprintf": "format_string",
                "stack0x00000016": "permission_string",
                "stack0x00000020": "error_message",
                "uStack0000000000000015": "file_type",
                "uStack000000000000001f": "unused_flag",
                "uStack0000000000000068": "file_mode",
                "uStack000000000000006c": "file_links",
                "uVar4": "file_type",
                "unaff_R12": "file_type",
                "unaff_R13": "buffer",
                "unaff_R14D": "file_descriptor",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_paths",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d8c": {
            "additional_data": {
                "FUN_00102d8c": {
                    "convert_permissions": 1,
                    "format_and_print_data": 1,
                    "format_and_print_file_info": 4,
                    "format_time_data": 2,
                    "print_file_details": 2,
                    "print_file_info": 19,
                    "print_file_permissions": 1
                },
                "__format": {
                    "corrupt_time_data_msg": 1,
                    "corrupt_time_format": 4,
                    "corrupted_time_data_msg": 2,
                    "err_msg": 1,
                    "error_format": 1,
                    "error_message": 5,
                    "error_msg": 2,
                    "time_data_corrupt": 1,
                    "time_error_message": 1,
                    "time_format": 1
                },
                "cStack0000000000000015": {
                    "file_char": 1,
                    "permission_char": 1
                },
                "cStack0000000000000016": {
                    "character1": 1,
                    "file_permission_char1": 1,
                    "flag1": 1,
                    "info_char2": 1,
                    "is_hidden_char": 1,
                    "is_read": 1,
                    "is_readable": 1,
                    "is_regular_file_flag": 1,
                    "permission_bit1": 2,
                    "permission_char1": 1,
                    "permission_char2": 1,
                    "permission_char_read": 1,
                    "permission_flag1": 1,
                    "read_permission": 2,
                    "read_permission_char": 1,
                    "u_rwx": 1,
                    "user_read": 1,
                    "user_read_perm": 1,
                    "user_read_permission": 1,
                    "user_read_permission_char": 1
                },
                "cStack0000000000000017": {
                    "character2": 1,
                    "file_permission_char2": 1,
                    "flag2": 1,
                    "g_rwx": 1,
                    "info_char3": 1,
                    "is_directory_flag": 1,
                    "is_read_only_char": 1,
                    "is_writable": 1,
                    "is_write": 1,
                    "permission_bit2": 2,
                    "permission_char2": 1,
                    "permission_char3": 1,
                    "permission_char_write": 1,
                    "permission_flag2": 1,
                    "user_write": 1,
                    "user_write_perm": 1,
                    "user_write_permission": 1,
                    "user_write_permission_char": 1,
                    "write_permission": 2,
                    "write_permission_char": 1
                },
                "cStack0000000000000019": {
                    "character4": 1,
                    "execute_permission": 1,
                    "file_permission_char4": 1,
                    "flag4": 1,
                    "group_read": 1,
                    "group_read_perm": 1,
                    "group_read_permission": 1,
                    "group_read_permission_char": 1,
                    "info_char5": 1,
                    "is_block_special_file_flag": 1,
                    "is_directory_char": 1,
                    "is_read_owner": 1,
                    "is_setuid": 1,
                    "o_rwx": 1,
                    "permission_bit4": 1,
                    "permission_bit5": 1,
                    "permission_char4": 2,
                    "permission_char_read_other": 1,
                    "permission_flag4": 1,
                    "read_permission_group": 1
                },
                "cStack000000000000001a": {
                    "character5": 1,
                    "file_permission_char5": 1,
                    "flag5": 1,
                    "group_write": 1,
                    "group_write_perm": 1,
                    "group_write_permission": 1,
                    "group_write_permission_char": 1,
                    "info_char6": 1,
                    "is_archive_char": 1,
                    "is_character_special_file_flag": 1,
                    "is_setgid": 1,
                    "is_write_owner": 1,
                    "permission_bit5": 1,
                    "permission_bit6": 1,
                    "permission_char5": 2,
                    "permission_char_write_other": 1,
                    "permission_flag5": 1,
                    "u_r": 1,
                    "write_permission_group": 1
                },
                "cStack000000000000001b": {
                    "character6": 1,
                    "execute_permission_group": 1,
                    "file_permission_char6": 1,
                    "flag6": 1,
                    "g_r": 1,
                    "group_execute_permission": 1,
                    "group_execute_permission_char": 1,
                    "info_char7": 1,
                    "is_execute_owner": 1,
                    "is_fifo_flag": 1,
                    "is_sticky": 1,
                    "is_temporary_char": 1,
                    "other_read_perm": 1,
                    "permission_bit3": 1,
                    "permission_bit6": 1,
                    "permission_char6": 2,
                    "permission_char_execute_other": 1,
                    "permission_flag6": 1,
                    "setgid_char": 1,
                    "setuid_permission": 1
                },
                "cStack000000000000001c": {
                    "character7": 1,
                    "file_permission_char7": 1,
                    "flag7": 1,
                    "info_char8": 1,
                    "is_device_char": 1,
                    "is_other_readable": 1,
                    "is_read_group": 1,
                    "is_symbolic_link_flag": 1,
                    "o_r": 1,
                    "other_read_permission": 1,
                    "other_read_permission_char": 1,
                    "other_write_perm": 1,
                    "others_read": 1,
                    "permission_bit7": 2,
                    "permission_char7": 2,
                    "permission_char_read_group": 1,
                    "permission_flag7": 1,
                    "read_permission_other": 1
                },
                "cStack000000000000001d": {
                    "character8": 1,
                    "file_permission_char8": 1,
                    "flag8": 1,
                    "info_char9": 1,
                    "is_executable_flag": 1,
                    "is_normal_char": 1,
                    "is_other_writable": 1,
                    "is_write_group": 1,
                    "other_write_permission": 1,
                    "other_write_permission_char": 1,
                    "others_write": 1,
                    "permission_bit8": 2,
                    "permission_char8": 2,
                    "permission_char_write_group": 1,
                    "permission_flag8": 1,
                    "sticky_bit": 1,
                    "u_w": 1,
                    "write_permission_other": 1
                },
                "cStack000000000000001e": {
                    "character9": 1,
                    "execute_permission_other": 1,
                    "file_permission_char9": 1,
                    "flag9": 1,
                    "g_w": 1,
                    "info_char10": 1,
                    "is_execute_group": 1,
                    "is_other_executable": 1,
                    "is_readable_flag": 1,
                    "is_sparse_char": 1,
                    "other_execute_permission": 1,
                    "other_execute_permission_char": 1,
                    "permission_bit4": 1,
                    "permission_bit9": 1,
                    "permission_char9": 2,
                    "permission_char_execute_group": 1,
                    "permission_flag9": 1,
                    "setgid_bit": 1,
                    "sticky_bit_permission": 1,
                    "sticky_char": 1
                },
                "cStack000000000000001f": {
                    "extra_info_flag": 1,
                    "flag": 1,
                    "is_executable": 1,
                    "o_w": 1,
                    "print_flag": 1,
                    "setuid_bit": 1
                },
                "fprintf": {
                    "print_formatted": 2,
                    "write_to_file": 1
                },
                "fputc": {
                    "write_char_to_file": 1,
                    "write_character": 1,
                    "write_character_to_file": 1,
                    "write_new_line": 1
                },
                "fputs": {
                    "append_to_file": 1,
                    "write_string": 1,
                    "write_string_to_file": 1
                },
                "param_19": {
                    "file_attributes": 3,
                    "file_mode": 6,
                    "file_permission": 6,
                    "file_permissions": 13,
                    "mode": 1,
                    "permission_bits": 1
                },
                "param_20": {
                    "file_size": 25,
                    "file_size2": 1,
                    "inode": 2,
                    "mod_time": 1,
                    "timestamp": 1
                },
                "param_22": {
                    "date_time": 1,
                    "file_address": 1,
                    "file_create_time": 1,
                    "file_last_modified": 1,
                    "file_modified_time": 1,
                    "file_name": 2,
                    "file_size": 1,
                    "file_time": 1,
                    "file_timestamp": 1,
                    "filename": 1,
                    "last_access_time": 1,
                    "last_modified": 2,
                    "mod_time": 1,
                    "modification_time": 2,
                    "time_stamp": 2,
                    "timestamp": 11
                },
                "param_9": {
                    "character": 1,
                    "character3": 1,
                    "execute_permission": 1,
                    "execute_permission_char": 1,
                    "file_permission_char3": 1,
                    "flag3": 1,
                    "info_char4": 1,
                    "is_executable": 2,
                    "is_execute": 1,
                    "is_socket_flag": 1,
                    "is_system_char": 1,
                    "permission": 1,
                    "permission9": 1,
                    "permission_bit3": 1,
                    "permission_char1": 1,
                    "permission_char3": 1,
                    "permission_char_execute": 1,
                    "permission_character": 1,
                    "permission_flag3": 1,
                    "permissions": 1,
                    "user_execute_permission": 1,
                    "user_execute_permission_char": 1
                },
                "stack0x00000016": {
                    "formatted_date_time": 1,
                    "time_string": 1
                },
                "stack0x00000020": {
                    "error_message": 3,
                    "formatted_error_msg": 1
                },
                "uStack0000000000000015": {
                    "file_indicator": 1,
                    "file_permission": 2,
                    "file_type": 8,
                    "file_type_char": 3,
                    "info_char1": 1,
                    "permission_char": 3,
                    "permission_display": 1,
                    "permission_flag": 1
                },
                "uStack000000000000001f": {
                    "flag": 3,
                    "flag10": 1,
                    "format_specifier": 1,
                    "is_executable": 1,
                    "is_extended": 1,
                    "is_extra_info_required": 1,
                    "is_other": 1,
                    "is_special": 1,
                    "is_special_file": 1,
                    "should_print_address_flag": 1,
                    "should_print_hex_address": 1,
                    "unused": 1,
                    "unused_variable": 1
                },
                "uStack000000000000006c": {
                    "current_time": 1,
                    "current_timestamp": 1,
                    "current_uid": 1,
                    "device": 1,
                    "file_permissions_octal": 1,
                    "file_size": 2,
                    "file_size1": 1,
                    "file_type": 1,
                    "inode": 1,
                    "inode_number": 4,
                    "num_links": 1,
                    "permission_mode": 1,
                    "process_id": 1,
                    "timestamp": 1,
                    "user_id": 1,
                    "year": 1
                },
                "uVar1": {
                    "file_permission": 2,
                    "file_type": 9,
                    "file_type_flag": 1,
                    "file_type_mask": 1,
                    "first_four_bits": 1,
                    "permission_type": 1,
                    "upper_bits": 1,
                    "upper_part_of_permissions": 1
                },
                "unaff_R12B": {
                    "add_hex_prefix": 1,
                    "check_flag": 1,
                    "flag": 2,
                    "has_additional_info": 1,
                    "has_extra_info": 1,
                    "has_prefix": 1,
                    "include_hex": 1,
                    "is_executable": 9,
                    "is_file_type_text": 1,
                    "is_flag_set": 1,
                    "is_hex": 3,
                    "is_hexadecimal": 3,
                    "print_hex_flag": 1,
                    "should_print_address": 1,
                    "should_print_hex": 2
                },
                "unaff_RBP": {
                    "file": 2,
                    "file_pointer": 5,
                    "file_stream": 1,
                    "output": 1,
                    "output_file": 20
                },
                "unaff_RBX": {
                    "error_message": 1,
                    "file_content": 10,
                    "file_data": 8,
                    "file_data_array": 1,
                    "file_info": 3,
                    "file_path": 1,
                    "file_paths": 3,
                    "strings": 2
                }
            },
            "called": [
                "fputs",
                "dcgettext",
                "fprintf",
                "fputc",
                "sprintf"
            ],
            "calling": [
                "FUN_001079c0"
            ],
            "code": "\nvoid format_and_print_file_info_00102d8c(void)\n\n{\n  char *error_message;\n  uint file_type;\n  char **file_content;\n  FILE *output_file;\n  char is_executable;\n  undefined file_type;\n  char permission_bit1;\n  char permission_bit2;\n  char is_executable;\n  char permission_char4;\n  char permission_char5;\n  char permission_char6;\n  char permission_char7;\n  char permission_bit8;\n  char permission_char9;\n  undefined flag;\n  uint file_permissions;\n  uint inode_number;\n  uint file_size;\n  undefined8 timestamp;\n  \n  error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&error_message,error_message);\n  file_type = file_permissions & 0xf000;\n  if (file_type == 0x4000) {\n    file_type = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type = 0x73;\n  }\n  else {\n    file_type = 0x70;\n    if (file_type != 0x1000) {\n      file_type = 0x2d;\n    }\n  }\n  permission_bit1 = (-((file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  permission_bit2 = (-((file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  is_executable = (-((file_permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  permission_char4 = (-((file_permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  permission_char5 = (-((file_permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  permission_char6 = (-((file_permissions & 8) == 0) & 0xb5U) + 0x78;\n  permission_char7 = (-((file_permissions & 4) == 0) & 0xbbU) + 0x72;\n  permission_bit8 = (-((file_permissions & 2) == 0) & 0xb6U) + 0x77;\n  permission_char9 = (-((file_permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_permissions & 0x800) != 0) {\n    if (is_executable == 'x') {\n      is_executable = 's';\n    }\n    else {\n      is_executable = 'S';\n    }\n  }\n  if ((file_permissions & 0x400) != 0) {\n    if (permission_char6 == 'x') {\n      permission_char6 = 's';\n    }\n    else {\n      permission_char6 = 'S';\n    }\n  }\n  if ((file_permissions & 0x200) != 0) {\n    if (permission_char9 == 'x') {\n      permission_char9 = 't';\n    }\n    else {\n      permission_char9 = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&time_string,(ulong)inode_number,\n          (ulong)file_size,timestamp,&error_message,(ulong)file_permissions);\n  fputs(*file_content,output_file);\n  if (is_executable != '\\0') {\n    if ((*(byte *)((long)file_content + 0x49) & 0x10) == 0) {\n      if (file_content[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_content[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "current_name": "format_and_print_file_info_00102d8c",
            "entrypoint": "0x00102d8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d8c": "format_and_print_file_info_00102d8c",
                "__format": "error_message",
                "cStack0000000000000016": "permission_bit1",
                "cStack0000000000000017": "permission_bit2",
                "cStack0000000000000019": "permission_char4",
                "cStack000000000000001a": "permission_char5",
                "cStack000000000000001b": "permission_char6",
                "cStack000000000000001c": "permission_char7",
                "cStack000000000000001d": "permission_bit8",
                "cStack000000000000001e": "permission_char9",
                "fprintf": "print_formatted",
                "fputc": "write_character_to_file",
                "fputs": "write_string",
                "param_19": "file_permissions",
                "param_20": "file_size",
                "param_22": "timestamp",
                "param_9": "is_executable",
                "stack0x00000016": "time_string",
                "stack0x00000020": "error_message",
                "uStack0000000000000015": "file_type",
                "uStack000000000000001f": "flag",
                "uStack000000000000006c": "inode_number",
                "uVar1": "file_type",
                "unaff_R12B": "is_executable",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_content"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e57": {
            "additional_data": {
                "DAT_0010d60c": {
                    "flag": 1,
                    "is_file_path_valid": 1,
                    "is_path_valid": 1,
                    "is_print_enabled": 2,
                    "print_flag": 1,
                    "should_print": 3
                },
                "DAT_0010d618": {
                    "file_name": 3,
                    "file_path": 3,
                    "filename": 2,
                    "output_file_name": 1
                },
                "FUN_00102e57": {
                    "create_and_print_file": 1,
                    "create_output_file": 3,
                    "print_and_write_to_file": 1,
                    "save_data_to_file": 2,
                    "save_to_file": 4,
                    "write_output_file": 1,
                    "write_to_file": 19
                },
                "concat": {
                    "build_output_file_path": 1,
                    "combine_strings": 1,
                    "concat_strings": 2,
                    "concatenate_string": 1,
                    "concatenate_strings": 6,
                    "create_file_content": 1,
                    "create_file_path": 2,
                    "create_output_string": 1,
                    "generate_file_name": 1,
                    "generate_file_path": 1,
                    "generate_filename": 3,
                    "get_concatenated_string": 4,
                    "get_concatenation": 1,
                    "get_file_path": 1
                },
                "fopen": {
                    "open_file": 5
                },
                "pFVar1": {
                    "file": 2,
                    "file_pointer": 20,
                    "file_ptr": 7,
                    "output_file": 2
                },
                "perror": {
                    "print_error": 3,
                    "print_error_message": 1
                },
                "printf": {
                    "print_filename": 1,
                    "print_message": 2,
                    "print_to_file": 2
                },
                "xexit": {
                    "exit_program": 5,
                    "exit_with_error": 1,
                    "terminate_program": 1
                }
            },
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00105a68"
            ],
            "code": "\nvoid print_and_write_to_file_00102e57(void)\n\n{\n  FILE *file_pointer;\n  \n  DAT_0010d618 = (char *)concatenate_strings();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_and_write_to_file_00102e57",
            "entrypoint": "0x00102e57",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e57": "print_and_write_to_file_00102e57",
                "concat": "concatenate_strings",
                "fopen": "open_file",
                "pFVar1": "file_pointer",
                "perror": "print_error",
                "printf": "print_to_file",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e6f": {
            "additional_data": {
                "DAT_0010d5e8": {
                    "base_dir_path": 1,
                    "base_directory": 1
                },
                "DAT_0010d60c": {
                    "has_error": 1,
                    "is_verbose": 1
                },
                "DAT_0010d618": {
                    "output_file_path": 1,
                    "output_path": 1
                },
                "FUN_00102e6f": {
                    "create_output_file": 3,
                    "extract_and_print_file_path": 1,
                    "extract_and_store_files": 1,
                    "extract_archive_file": 1,
                    "extract_file_from_path": 1,
                    "extract_file_path": 5,
                    "extract_files_from_path": 1,
                    "extract_files_from_pathname": 1,
                    "handle_output_file": 1,
                    "prepare_output_path": 1,
                    "process_and_save_file": 1,
                    "process_archive_file": 1,
                    "process_archive_member": 1,
                    "process_file": 1,
                    "process_file_path": 7,
                    "process_output_file": 3,
                    "process_output_path": 1
                },
                "concat": {
                    "concatenate_strings": 1
                },
                "in_RAX": {
                    "current_char": 2,
                    "file_path": 19,
                    "input_path": 5,
                    "path": 5
                },
                "pFVar4": {
                    "file": 3,
                    "file_handle": 1,
                    "file_pointer": 15,
                    "file_ptr": 8,
                    "output_file": 3,
                    "output_file_pointer": 1
                },
                "pcVar1": {
                    "archive_parent_dir": 1,
                    "base_dir": 5,
                    "base_directory": 2,
                    "base_path": 6,
                    "current_dir": 3,
                    "current_dir_path": 1,
                    "current_directory": 2,
                    "current_path": 6,
                    "original_path": 1,
                    "previous_path": 3,
                    "source_path": 1
                },
                "pcVar6": {
                    "current_char": 5,
                    "current_dir": 2,
                    "current_directory": 1,
                    "current_path": 10,
                    "current_segment": 1,
                    "filename": 1,
                    "next_char": 2,
                    "next_path": 2,
                    "pathname": 1,
                    "sub_dir": 1,
                    "sub_path": 2,
                    "substring_pos": 1,
                    "temp_path": 2
                },
                "sVar5": {
                    "base_dir_length": 2,
                    "base_directory_length": 1,
                    "base_length": 1,
                    "base_name_length": 1,
                    "base_path_length": 3,
                    "dir_length": 1,
                    "directory_length": 1,
                    "file_path_length": 1,
                    "length": 6,
                    "original_path_length": 1,
                    "path_length": 13
                },
                "uVar2": {
                    "base_name": 15,
                    "base_path": 2,
                    "basename": 2,
                    "new_base_dir": 1,
                    "new_file_path": 1,
                    "output_path": 1,
                    "temp1": 1
                },
                "uVar3": {
                    "error": 1,
                    "error_message": 16,
                    "error_msg": 4,
                    "error_text": 1,
                    "temp2": 1
                }
            },
            "called": [
                "FUN_00107920",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext",
                "FUN_00105a68"
            ],
            "calling": [
                "FUN_00102e6f"
            ],
            "code": "\nvoid process_file_path_00102e6f(void)\n\n{\n  char *current_path;\n  char *file_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t path_length;\n  char *current_path;\n  \n  current_path = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (path_length = strlen(DAT_0010d5e8), path_length != 0)) {\n          if (current_path[path_length - 1] == '/') {\n            DAT_0010d618 = (char *)concatenate_strings(current_path,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concatenate_strings(current_path,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file_pointer = fopen(DAT_0010d618,\"w\");\n        if (file_pointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_path = file_path;\n      if ((*file_path == '.') && (current_path = file_path + 1, file_path[1] == '.')) {\n        current_path = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          base_name = lbasename();\n          current_path = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_formatted_error_message_00107920(error_message,current_path,base_name);\n          DAT_0010d618 = (char *)base_name;\n          write_to_file_and_exit_00105a68();\n          return;\n        }\n      }\n      for (; (file_path = current_path, *current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_file_path_00102e6f",
            "entrypoint": "0x00102e6f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e6f": "process_file_path_00102e6f",
                "concat": "concatenate_strings",
                "in_RAX": "file_path",
                "pFVar4": "file_pointer",
                "pcVar1": "current_path",
                "pcVar6": "current_path",
                "sVar5": "path_length",
                "uVar2": "base_name",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f08": {
            "additional_data": {
                "FUN_00102f08": {
                    "print_and_assign": 5,
                    "print_and_assign_value": 5,
                    "print_and_assign_values": 1,
                    "print_and_change_value": 1,
                    "print_and_copy_data": 1,
                    "print_and_set_values": 2,
                    "print_and_swap": 6,
                    "print_and_swap_data": 2,
                    "print_and_update_data": 2,
                    "print_and_update_values": 5,
                    "print_memory_and_swap": 1
                },
                "printf": {
                    "print_format": 1
                },
                "unaff_R12": {
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "destination_ptr": 1,
                    "new_data_ptr": 1,
                    "other_string_pointer": 1,
                    "pointer_address": 1,
                    "pointer_ptr": 2,
                    "pointer_to_string": 1,
                    "pointer_to_swap": 1,
                    "source_ptr": 1,
                    "swap_value": 1,
                    "target_ptr": 2,
                    "temp": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 1,
                    "value_pointer": 3,
                    "value_ptr": 6,
                    "value_to_assign": 1
                },
                "unaff_RBX": {
                    "array_of_strings": 1,
                    "array_pointer": 1,
                    "data_ptr": 5,
                    "input_string": 1,
                    "memory_pointer": 1,
                    "message": 2,
                    "message_pointer": 1,
                    "message_ptr": 3,
                    "pointer_value": 1,
                    "str_pointer": 1,
                    "string_pointer": 5,
                    "string_ptr": 9
                },
                "value_ptr": {
                    "original_value": 1
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00105af0"
            ],
            "code": "\nundefined8 print_and_assign_value_00102f08(void)\n\n{\n  undefined8 *string_ptr;\n  undefined8 *value_ptr;\n  \n  printf(\"a - %s\\n\",*string_ptr);\n  string_ptr[0x1e] = *value_ptr;\n  *value_ptr = string_ptr;\n  return 1;\n}\n\n",
            "current_name": "print_and_assign_value_00102f08",
            "entrypoint": "0x00102f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f08": "print_and_assign_value_00102f08",
                "printf": "print_format",
                "unaff_R12": "value_ptr",
                "unaff_RBX": "string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f1e": {
            "additional_data": {
                "FUN_00102f1e": {
                    "copy_and_delete_file": 4,
                    "copy_and_print_error_message": 1,
                    "copy_and_remove_file": 3,
                    "copy_and_unlink_file": 5,
                    "copy_file_and_handle_error": 1,
                    "copy_file_and_print_error": 11,
                    "copy_file_and_print_error_message": 2,
                    "copy_file_and_unlink": 3,
                    "copy_file_with_reason": 1
                },
                "auVar3": {
                    "result": 2,
                    "return_value": 4
                },
                "piVar1": {
                    "errno_addr": 1,
                    "errno_location": 2,
                    "errno_location_pointer": 1,
                    "errno_location_ptr": 1,
                    "errno_pointer": 1,
                    "errno_ptr": 4,
                    "error_code": 1,
                    "error_location": 3,
                    "error_number": 1,
                    "error_number_ptr": 1
                },
                "uVar2": {
                    "error_message": 13,
                    "error_string": 3,
                    "formatted_error_message": 1
                },
                "unaff_R12": {
                    "file_name": 5,
                    "file_path": 23,
                    "filename": 2
                },
                "unaff_RBP": {
                    "error_code": 1,
                    "file_flags": 1,
                    "file_length": 3,
                    "file_permission": 1,
                    "file_size": 22,
                    "previous_rbp": 1,
                    "unaff_return_buffer_pointer": 1,
                    "value1": 1
                },
                "unaff_retaddr": {
                    "return_address": 29
                }
            },
            "called": [
                "unlink",
                "FUN_00107920",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00105bc0"
            ],
            "code": "\nundefined  [16] copy_file_and_print_error_message_00102f1e(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_formatted_error_message_00107920(error_message);\n  unlink(file_path);\n  return_value._0_8_ = file_size & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "current_name": "copy_file_and_print_error_message_00102f1e",
            "entrypoint": "0x00102f1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f1e": "copy_file_and_print_error_message_00102f1e",
                "auVar3": "return_value",
                "piVar1": "errno_ptr",
                "uVar2": "error_message",
                "unaff_R12": "file_path",
                "unaff_RBP": "file_size",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f55": {
            "additional_data": {
                "FUN_00102f55": {
                    "close_and_reset_errno": 1,
                    "close_and_return_error": 1,
                    "close_and_set_errno": 4,
                    "close_and_set_last_error": 1,
                    "close_file": 2,
                    "close_file_and_handle_errors": 1,
                    "close_file_and_return": 1,
                    "close_file_and_return_error": 6,
                    "close_file_and_return_error_status": 1,
                    "close_file_and_set_errno": 6,
                    "close_file_and_set_error": 3,
                    "close_file_and_set_error_code": 2,
                    "close_file_with_error_handling": 1
                },
                "iVar1": {
                    "errno_value": 4,
                    "error_code": 3,
                    "error_value": 1,
                    "old_error_code": 2,
                    "original_errno": 2,
                    "original_error_value": 1,
                    "previous_errno": 2,
                    "previous_error": 2,
                    "saved_errno": 1
                },
                "piVar2": {
                    "errno_location": 2,
                    "errno_pointer": 5,
                    "errno_ptr": 2,
                    "error_code_pointer": 1,
                    "error_pointer": 4,
                    "error_ptr": 1
                },
                "unaff_R12D": {
                    "file_descriptor": 31
                }
            },
            "called": [
                "close",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\nundefined8 close_file_and_set_errno_00102f55(void)\n\n{\n  int errno_value;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  errno_value = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = errno_value;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_and_set_errno_00102f55",
            "entrypoint": "0x00102f55",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f55": "close_file_and_set_errno_00102f55",
                "iVar1": "errno_value",
                "piVar2": "errno_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f96": {
            "additional_data": {
                "FUN_00102f96": {
                    "print_error": 5,
                    "print_error_details": 1,
                    "print_error_info": 1,
                    "print_error_information": 3,
                    "print_error_message": 21
                },
                "uVar1": {
                    "error_message": 24,
                    "error_string": 3
                },
                "unaff_RBX": {
                    "error_cause": 1,
                    "error_code": 14,
                    "error_flag": 10,
                    "error_message_flag": 1,
                    "error_status": 3,
                    "error_type": 2
                },
                "unaff_retaddr": {
                    "caller_address": 1,
                    "return_address": 30
                }
            },
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "calling": [
                "FUN_00107c20"
            ],
            "code": "\n\n\nvoid print_error_message_00102f96(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102f96",
            "entrypoint": "0x00102f96",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fd7": {
            "additional_data": {
                "FUN_00102fd7": {
                    "print_cannot_set_time_error_message": 1,
                    "print_error_cannot_set_time": 1,
                    "print_error_if_time_set_fails": 1,
                    "print_error_message": 11,
                    "print_formatted_error_message": 4,
                    "print_formatted_time_error": 1,
                    "print_time_error": 1,
                    "print_time_error_message": 7,
                    "print_time_set_error_message": 1,
                    "print_time_setting_error": 1,
                    "print_time_setting_error_message": 1,
                    "set_time_error": 1
                },
                "__errno_location": {
                    "get_error_code_location": 1,
                    "get_error_location": 1,
                    "get_error_number": 1
                },
                "dcgettext": {
                    "get_formatted_error_message": 2,
                    "get_formatted_error_string": 1
                },
                "piVar1": {
                    "errno_location": 1,
                    "errno_location_pointer": 3,
                    "errno_location_ptr": 1,
                    "errno_pointer": 4,
                    "errno_ptr": 4,
                    "errno_value": 1,
                    "error_code": 2,
                    "error_code_ptr": 2,
                    "error_location": 5,
                    "error_number": 2,
                    "error_pointer": 5
                },
                "print_formatted_error_message_00107920": {
                    "print_error_message": 2,
                    "print_formatted_error_message": 3
                },
                "strerror": {
                    "get_error_message": 1,
                    "get_error_string": 2
                },
                "uVar2": {
                    "error_message": 17,
                    "error_string": 8,
                    "formatted_error_message": 2,
                    "formatted_message": 1,
                    "gettext_result": 1,
                    "localized_error_message": 1,
                    "translated_error_message": 1
                }
            },
            "called": [
                "FUN_00107920",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00107c80"
            ],
            "code": "\nvoid print_time_setting_error_message_00102fd7(void)\n\n{\n  int *error_pointer;\n  undefined8 error_message;\n  \n  error_pointer = __errno_location();\n  strerror(*error_pointer);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_formatted_error_message(error_message);\n  return;\n}\n\n",
            "current_name": "print_time_setting_error_message_00102fd7",
            "entrypoint": "0x00102fd7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fd7": "print_time_setting_error_message_00102fd7",
                "__errno_location": "get_error_code_location",
                "dcgettext": "get_formatted_error_message",
                "piVar1": "error_pointer",
                "print_formatted_error_message_00107920": "print_formatted_error_message",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010300e": {
            "additional_data": {
                "DAT_0010a240": {
                    "f_values": 1,
                    "move_index_table": 1,
                    "table5": 1
                },
                "DAT_0010a440": {
                    "c_values": 1,
                    "check_index_table": 1,
                    "table3": 1
                },
                "DAT_0010a640": {
                    "addition_offset_table": 1,
                    "b_values": 1,
                    "table2": 1
                },
                "DAT_0010a7c0": {
                    "check_byte_table": 1,
                    "e_values": 1,
                    "lookup_table2": 1
                },
                "DAT_0010a800": {
                    "d_values": 1,
                    "next_index_table": 1,
                    "table4": 1
                },
                "DAT_0010a980": {
                    "a_values": 1,
                    "check_zero_table": 1,
                    "table1": 1
                },
                "DAT_0010ab00": {
                    "lookup_table": 1,
                    "lookup_table1": 1,
                    "replace_table": 1
                },
                "DAT_0010d5b0": {
                    "end_byte_ptr": 1,
                    "end_byteptr": 1,
                    "end_pointer": 1,
                    "input_end": 1
                },
                "DAT_0010d5b8": {
                    "final_matching_byte_ptr": 1,
                    "matched_input_start": 1,
                    "matched_pointer": 1,
                    "matching_byteptr": 1
                },
                "DAT_0010d5c0": {
                    "final_matching_index": 1,
                    "matched_index": 1,
                    "matched_variable": 1,
                    "matching_index": 1
                },
                "DAT_0010d5c8": {
                    "input_start": 1,
                    "start_byte_ptr": 1,
                    "start_byteptr": 1,
                    "start_pointer": 1
                },
                "DAT_0010d5d0": {
                    "first_variable": 1,
                    "initial_index": 1,
                    "initial_match_index": 1,
                    "original_index": 1
                },
                "FUN_0010300e": {
                    "decode_and_update_data": 1,
                    "decode_data": 1,
                    "find_match": 1,
                    "find_matching_bytes": 1,
                    "find_matching_index": 1,
                    "find_matching_indexes": 1,
                    "find_matching_indices": 1,
                    "find_matching_pattern": 2,
                    "find_matching_value": 3,
                    "find_matching_value_index": 1,
                    "find_matching_values": 4,
                    "find_relevant_data": 2,
                    "find_target_indices": 1,
                    "find_target_value": 2,
                    "identify_and_store_match": 1,
                    "reverse_and_store_data": 2,
                    "reverse_and_update": 1
                },
                "bVar1": {
                    "found_match": 7,
                    "found_matching": 1,
                    "found_matching_byte": 1,
                    "found_matching_value": 1,
                    "found_relevant_data": 1,
                    "found_target": 4,
                    "has_match": 6,
                    "has_matched_value": 1,
                    "has_matching_value": 1,
                    "has_non_zero_element": 1,
                    "is_condition_met": 1,
                    "is_found": 1,
                    "is_match_found": 1,
                    "is_matching_index": 1,
                    "is_var_set": 1,
                    "pattern_found": 1
                },
                "bVar4": {
                    "adjusted_value": 1,
                    "byte_value": 1,
                    "calculated_value": 1,
                    "computed_value": 2,
                    "current_byte": 1,
                    "current_byte_value": 1,
                    "flag": 1,
                    "lookup_byte": 1,
                    "lookup_index": 1,
                    "lookup_result": 1,
                    "lookup_value": 3,
                    "mapping_value": 1,
                    "matching_byte": 1,
                    "matching_value": 2,
                    "next_byte": 1,
                    "offset": 4,
                    "offset_value": 1,
                    "replacement_byte": 1,
                    "search_index": 1,
                    "temp_byte": 2,
                    "temp_var": 1,
                    "value_modifier": 1,
                    "value_retrieved": 1
                },
                "iVar2": {
                    "current_index": 22,
                    "current_index_value": 1,
                    "current_match_index": 1,
                    "current_offset": 1,
                    "current_value": 2,
                    "current_variable": 2,
                    "index": 1
                },
                "in_R10D": {
                    "current_index": 2,
                    "found_index": 1,
                    "last_non_zero_value": 1,
                    "match_index": 1,
                    "match_start_index": 1,
                    "matching_byte_index": 1,
                    "matching_index": 6,
                    "matching_index_int": 1,
                    "matching_value_index": 4,
                    "matching_variable": 1,
                    "new_index2": 1,
                    "relevant_data_index": 2,
                    "result_index": 2,
                    "start_index": 1,
                    "start_offset": 1,
                    "target_index": 3,
                    "target_value": 1,
                    "updated_value": 1
                },
                "in_R9": {
                    "current_byte_ptr": 2,
                    "found_byte": 1,
                    "last_non_zero_pointer": 1,
                    "match_byte_pointer": 1,
                    "match_start_byte": 1,
                    "matching_array_pointer": 1,
                    "matching_byte": 4,
                    "matching_byte_pointer": 2,
                    "matching_byte_ptr": 2,
                    "matching_index": 1,
                    "matching_index_byteptr": 1,
                    "matching_value_pointer": 1,
                    "matching_value_ptr": 1,
                    "new_pointer": 1,
                    "relevant_data": 1,
                    "relevant_data_byte_ptr": 1,
                    "result_byte": 1,
                    "result_pointer": 1,
                    "start_byte": 2,
                    "target_byte": 3,
                    "target_data_pointer": 1,
                    "updated_ptr": 1
                },
                "lVar3": {
                    "address": 1,
                    "calculated_index": 5,
                    "calculated_value": 1,
                    "computed_index": 3,
                    "current_index": 1,
                    "new_index": 4,
                    "new_value": 1,
                    "next_index": 3,
                    "offset": 3,
                    "replacement_index": 1,
                    "sum_index": 1,
                    "temp_index": 1,
                    "temp_value": 1,
                    "updated_index": 3,
                    "updated_index_value": 1
                },
                "new_variable_name": {
                    "new_variable_name": 1
                },
                "pbVar5": {
                    "array_pointer": 1,
                    "byte_pointer": 3,
                    "byte_ptr": 1,
                    "byteptr": 1,
                    "current_byte": 15,
                    "current_byte_pointer": 1,
                    "current_byte_ptr": 3,
                    "current_data_pointer": 1,
                    "current_pointer": 2,
                    "current_value_pointer": 1,
                    "data_ptr": 1,
                    "input": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid find_matching_value_index_0010300e(void)\n\n{\n  bool found_match;\n  int current_index;\n  long calculated_index;\n  byte offset;\n  byte *current_byte;\n  byte *matching_byte;\n  int matching_index;\n  \n  found_match = false;\n  current_index = DAT_0010d5d0;\n  for (current_byte = DAT_0010d5c8; current_byte < DAT_0010d5b0; current_byte = current_byte + 1) {\n    offset = 1;\n    if (*current_byte != 0) {\n      offset = (&DAT_0010ab00)[*current_byte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)current_index * 2) != 0) {\n      found_match = true;\n      matching_byte = current_byte;\n      matching_index = current_index;\n    }\n    while( true ) {\n      calculated_index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)current_index * 2) + (uint)offset);\n      if (*(short *)(&DAT_0010a440 + calculated_index * 2) == current_index) break;\n      current_index = (int)*(short *)(&DAT_0010a800 + (long)current_index * 2);\n      if (0xb0 < current_index) {\n        offset = (&DAT_0010a7c0)[(int)(uint)offset];\n      }\n    }\n    current_index = (int)*(short *)(&DAT_0010a240 + calculated_index * 2);\n  }\n  if (found_match) {\n    DAT_0010d5b8 = matching_byte;\n    DAT_0010d5c0 = matching_index;\n  }\n  return;\n}\n\n",
            "current_name": "find_matching_value_index_0010300e",
            "entrypoint": "0x0010300e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010300e": "find_matching_value_index_0010300e",
                "bVar1": "found_match",
                "bVar4": "offset",
                "iVar2": "current_index",
                "in_R10D": "matching_index",
                "in_R9": "matching_byte",
                "lVar3": "calculated_index",
                "pbVar5": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030ed": {
            "additional_data": {
                "DAT_0010d588": {
                    "copied_data": 1,
                    "data_value": 1,
                    "extracted_data_value": 1,
                    "extracted_value3": 1,
                    "extracted_value4": 1,
                    "extracted_value5": 1,
                    "extracted_value_5": 1,
                    "first_data": 1,
                    "first_data_value": 3,
                    "first_element_data": 1,
                    "first_element_value": 2,
                    "first_string": 1,
                    "first_value_in_data_array": 1,
                    "function_data2": 1,
                    "improved_data_value": 1,
                    "result5": 1,
                    "second_value": 2,
                    "value2": 2,
                    "value3": 1,
                    "value5": 2
                },
                "DAT_0010d590": {
                    "data": 2,
                    "data_ptr": 1,
                    "data_value": 2,
                    "extracted_value2": 1,
                    "extracted_value3": 1,
                    "extracted_value4": 1,
                    "extracted_value_4": 1,
                    "first_data": 2,
                    "first_data_value": 1,
                    "first_value": 7,
                    "function_data1": 1,
                    "result4": 1,
                    "value1": 2,
                    "value2": 1,
                    "value4": 2
                },
                "DAT_0010d598": {
                    "data_offset": 1,
                    "data_value": 4,
                    "extracted_value": 11,
                    "extracted_value1": 2,
                    "extracted_value2": 1,
                    "extracted_value_1": 1,
                    "function_info1": 1,
                    "info_offset": 1,
                    "result": 1,
                    "result1": 1,
                    "value1": 3
                },
                "DAT_0010d5a0": {
                    "address2": 1,
                    "current_index": 1,
                    "data_offset2": 1,
                    "data_pointer2": 1,
                    "data_segment2": 1,
                    "index": 15,
                    "offset": 8
                },
                "DAT_0010d5a8": {
                    "address1": 1,
                    "base_address": 13,
                    "data_array": 2,
                    "data_offset": 1,
                    "data_offset1": 1,
                    "data_pointer": 2,
                    "data_pointer1": 2,
                    "data_pointer_array": 1,
                    "data_ptr": 1,
                    "data_segment1": 1,
                    "pointer_array": 3
                },
                "DAT_0010d5b0": {
                    "data_address": 1,
                    "data_pointer": 7,
                    "data_pointer_address": 1,
                    "extracted_data": 2,
                    "extracted_pointer": 2,
                    "extracted_ptr": 1,
                    "extracted_value2": 1,
                    "extracted_value_2": 1,
                    "function_info2": 1,
                    "info_ptr": 1,
                    "pointer_to_extracted_data": 1,
                    "pointer_value": 1,
                    "result2": 1,
                    "string_pointer": 3,
                    "value2": 2
                },
                "DAT_0010d5c8": {
                    "copied_data_pointer": 2,
                    "copied_pointer": 1,
                    "copied_string_pointer": 1,
                    "current_data": 1,
                    "current_info_ptr": 1,
                    "current_string": 1,
                    "extracted_data": 1,
                    "extracted_value3": 1,
                    "extracted_value_3": 1,
                    "final_data": 1,
                    "final_pointer": 1,
                    "improved_data_pointer_address": 1,
                    "new_string_pointer": 1,
                    "pointer_to_data_copy": 1,
                    "processed_data": 1,
                    "processed_pointer": 1,
                    "result3": 1,
                    "result_ptr": 1,
                    "updated_data": 1,
                    "updated_data_pointer": 3,
                    "value3": 2
                },
                "FUN_001030ed": {
                    "extract_data": 9,
                    "extract_data_from_binary": 12,
                    "extract_function_data": 3,
                    "extract_function_info": 2,
                    "extract_info_from_binary": 1,
                    "extract_information": 1,
                    "initialize_data": 3
                },
                "puVar1": {
                    "binary_data_pointer": 1,
                    "data_pointer": 10,
                    "data_ptr": 1,
                    "entry_pointer": 1,
                    "extracted_data": 1,
                    "extracted_value": 1,
                    "function_data_pointer": 1,
                    "function_info_ptr": 1,
                    "function_pointer": 3,
                    "pointer": 6,
                    "pointer_to_data": 4,
                    "ptr_data_entry": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "code": "\nvoid extract_data_from_binary_001030ed(void)\n\n{\n  undefined8 *data_pointer;\n  \n  data_pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)data_pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)data_pointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *data_pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "current_name": "extract_data_from_binary_001030ed",
            "entrypoint": "0x001030ed",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010312d": {
            "additional_data": {
                "FUN_0010312d": {
                    "copy_and_assign_data": 1,
                    "copy_and_swap_data": 2,
                    "copy_and_swap_values": 1,
                    "copy_data": 21,
                    "copy_data_and_link": 1,
                    "copy_data_with_backup": 1,
                    "copy_function": 1,
                    "copy_memory": 2,
                    "update_param1_and_store_previous_param1": 1
                },
                "lVar1": {
                    "backup_data": 1,
                    "temp": 10,
                    "temp_address": 1,
                    "temp_data": 2,
                    "temp_pointer": 2,
                    "temp_var": 7
                },
                "param_1": {
                    "current_param1": 1,
                    "dest": 2,
                    "destination": 3,
                    "source": 16,
                    "source_address": 2,
                    "source_data": 3,
                    "source_pointer": 2,
                    "source_ptr": 2
                },
                "param_2": {
                    "current_param2": 1,
                    "destination": 16,
                    "destination_address": 2,
                    "destination_data": 3,
                    "destination_pointer": 2,
                    "destination_ptr": 2,
                    "source": 3,
                    "src": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid copy_and_swap_data_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "current_name": "copy_and_swap_data_0010312d",
            "entrypoint": "0x0010312d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010312d": "copy_and_swap_data_0010312d",
                "lVar1": "temp",
                "param_1": "source",
                "param_2": "destination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010315d": {
            "additional_data": {
                "FUN_0010315d": {
                    "check_and_exit": 1,
                    "check_and_exit_if_flag_zero": 1,
                    "check_and_exit_if_invalid": 1,
                    "check_and_exit_if_zero": 14,
                    "check_and_exit_if_zero_flag_set": 1,
                    "check_and_exit_on_error": 1,
                    "check_if_exit_required": 1,
                    "check_initialization": 2,
                    "check_initialization_and_exit": 2,
                    "check_initialized": 1,
                    "exit_if_flag_zero": 2,
                    "exit_if_variable_zero": 1,
                    "exit_if_zero": 1,
                    "handle_invalid_exit": 1,
                    "verify_and_exit_if_zero": 1
                },
                "_DAT_0010d608": {
                    "check_variable": 1,
                    "error_code": 3,
                    "error_flag": 2,
                    "exit_status": 1,
                    "flag": 5,
                    "initialization_flag": 1,
                    "initialization_status": 1,
                    "initialized_flag": 2,
                    "is_initialized": 2,
                    "pointer_value": 1,
                    "return_value": 1,
                    "some_condition": 1,
                    "status": 1,
                    "variable_check": 1,
                    "zero_flag": 2
                },
                "xexit": {
                    "exit_if_invalid": 1,
                    "exit_program": 1,
                    "exit_with_code": 1,
                    "exit_with_error": 1,
                    "terminate_program": 1
                }
            },
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid check_and_exit_if_zero_flag_set_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_exit_if_zero_flag_set_0010315d",
            "entrypoint": "0x0010315d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_flag_set_0010315d",
                "xexit": "exit_with_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103172": {
            "additional_data": {
                "FUN_00103172": {
                    "copy_and_print": 1,
                    "copy_and_print_string": 4,
                    "extract_and_print_message": 1,
                    "extract_data": 1,
                    "print_and_assign": 1,
                    "print_and_assign_value": 2,
                    "print_and_set_value": 1,
                    "print_and_store_value": 1,
                    "print_and_update": 6,
                    "print_and_update_data": 2,
                    "print_and_update_param": 1,
                    "print_and_update_value": 1,
                    "print_and_update_values": 1,
                    "process_data": 2,
                    "reverse_and_copy_data": 1,
                    "reverse_and_copy_string": 1,
                    "reverse_and_store": 1,
                    "update_data": 1,
                    "update_param": 1,
                    "update_parameter_and_print": 1
                },
                "auVar2": {
                    "destination_value": 1,
                    "modified_value": 1,
                    "new_array": 2,
                    "new_data": 2,
                    "new_string": 1,
                    "new_value": 1,
                    "output_data": 1,
                    "result": 11,
                    "result_arr": 1,
                    "result_array": 2,
                    "reversed_value": 1,
                    "temp_array": 3,
                    "temp_var": 1,
                    "updated_data": 1,
                    "updated_value": 1,
                    "updated_values": 1
                },
                "param_1": {
                    "current_value": 1,
                    "data1": 1,
                    "data_ptr": 3,
                    "input": 1,
                    "input_data": 1,
                    "input_ptr": 2,
                    "old_value": 1,
                    "original_value": 1,
                    "source": 2,
                    "source_data": 2,
                    "source_message": 1,
                    "source_param": 1,
                    "source_ptr": 6,
                    "source_string": 3,
                    "source_string_ptr": 1,
                    "value1": 1,
                    "value_ptr": 2,
                    "value_to_set": 1
                },
                "param_2": {
                    "data2": 1,
                    "data_array": 1,
                    "dest": 1,
                    "dest_message": 1,
                    "dest_ptr": 2,
                    "destination": 1,
                    "destination_array": 2,
                    "destination_data": 2,
                    "destination_param": 1,
                    "destination_ptr": 4,
                    "destination_string": 1,
                    "destination_string_ptr": 1,
                    "output": 1,
                    "output_data": 1,
                    "output_ptr": 1,
                    "string_array": 1,
                    "string_ptr": 4,
                    "strings": 2,
                    "strings_ptr": 2,
                    "value2": 1
                },
                "param_3": {
                    "flag": 4,
                    "is_reverse": 1,
                    "is_reverse_enabled": 1,
                    "is_valid": 2,
                    "print_flag": 3,
                    "reverse_flag": 1,
                    "should_print": 19
                },
                "param_4": {
                    "additional_data": 6,
                    "additional_info": 1,
                    "additional_value": 1,
                    "assigned_value": 1,
                    "config": 1,
                    "custom_data": 1,
                    "custom_value": 1,
                    "data": 2,
                    "extra_data": 3,
                    "extra_parameter": 1,
                    "meta_data": 1,
                    "new_value": 4,
                    "num": 1,
                    "param": 1,
                    "reverse_data": 1,
                    "updated_value": 1,
                    "value": 4
                },
                "uVar1": {
                    "current_value": 3,
                    "data_value": 2,
                    "message_value": 1,
                    "old_source_data": 1,
                    "old_value": 2,
                    "original_value": 1,
                    "previous_value": 1,
                    "source": 1,
                    "source_string": 1,
                    "source_string_value": 1,
                    "source_value": 8,
                    "temp": 1,
                    "temp_value": 5,
                    "temp_var": 1,
                    "value": 1,
                    "value1": 1
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\nundefined  [16]\nprint_and_update_data_00103172(undefined8 *source_ptr,undefined8 *string_ptr,char should_print,undefined8 additional_data)\n\n{\n  undefined8 source_value;\n  undefined result [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*string_ptr);\n  }\n  source_value = *source_ptr;\n  string_ptr[0x1e] = source_value;\n  result._1_7_ = (undefined7)((ulong)source_value >> 8);\n  result[0] = 1;\n  *source_ptr = string_ptr;\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "current_name": "print_and_update_data_00103172",
            "entrypoint": "0x00103172",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103172": "print_and_update_data_00103172",
                "auVar2": "result",
                "param_1": "source_ptr",
                "param_2": "string_ptr",
                "param_3": "should_print",
                "param_4": "additional_data",
                "uVar1": "source_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001031a5": {
            "additional_data": {
                "FUN_001031a5": {
                    "print_archive_script_error": 5,
                    "print_archive_script_syntax_error": 5,
                    "print_archive_syntax_error": 1,
                    "print_error_message": 3,
                    "print_syntax_error": 13,
                    "print_syntax_error_in_archive_script": 1,
                    "print_syntax_error_line": 2,
                    "print_syntax_error_message": 1
                },
                "__format": {
                    "error_format": 7,
                    "error_format_string": 2,
                    "error_message": 2,
                    "error_message_format": 9,
                    "error_message_template": 1,
                    "error_msg_format": 1,
                    "format_string": 9
                },
                "uVar1": {
                    "line_number": 25,
                    "num_lines": 1,
                    "updated_counter": 2,
                    "updated_line_number": 2,
                    "updated_variable": 1
                }
            },
            "called": [
                "printf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid print_syntax_error_in_archive_script_001031a5(void)\n\n{\n  uint line_number;\n  char *error_message_format;\n  \n  line_number = DAT_0010d554 + 1;\n  error_message_format = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(error_message_format,(ulong)line_number);\n  return;\n}\n\n",
            "current_name": "print_syntax_error_in_archive_script_001031a5",
            "entrypoint": "0x001031a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001031a5": "print_syntax_error_in_archive_script_001031a5",
                "__format": "error_message_format",
                "uVar1": "line_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001031cf": {
            "additional_data": {
                "DAT_0010d5a0": {
                    "constant_value": 1,
                    "data_index": 2,
                    "data_value": 1,
                    "data_value4": 1,
                    "file_handler_index": 1,
                    "global_var2": 1,
                    "global_var_index": 1
                },
                "DAT_0010d5a8": {
                    "constant_value": 1,
                    "data_address": 1,
                    "data_ptr": 1,
                    "data_value3": 1,
                    "data_var": 1,
                    "file_handler_data_addr": 1,
                    "global_data": 1,
                    "global_var": 1,
                    "global_var1": 1,
                    "l_var5_value": 1,
                    "some_data": 1,
                    "variable1": 1
                },
                "FUN_001031cf": {
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "extract_data_from_file": 1,
                    "initialize_file": 21,
                    "initialize_file_handler": 1,
                    "initialize_file_pointer": 2,
                    "initialize_file_stream": 2,
                    "process_file": 2
                },
                "_DAT_00000000": {
                    "data_value2": 1,
                    "file_pointer": 2,
                    "flag2": 2,
                    "flag_value2": 1,
                    "global_data": 1,
                    "global_file": 2,
                    "global_file_handle": 1,
                    "global_file_pointer": 2,
                    "global_input_file": 1,
                    "input_file_pointer": 1,
                    "stored_input_file_stream": 1
                },
                "_DAT_00000034": {
                    "data_flag": 1,
                    "data_value1": 1,
                    "flag1": 3,
                    "flag34": 1,
                    "flag_value1": 1,
                    "global_flag": 3,
                    "global_flag1": 2,
                    "initial_flag": 1,
                    "initialized_flag": 1,
                    "is_param_1_null": 1
                },
                "_flags": {
                    "file_flags": 1,
                    "flags": 2,
                    "status_flags": 1
                },
                "extract_data_from_binary_001030ed": {
                    "extract_data": 2,
                    "extract_data_from_binary": 6
                },
                "fileno": {
                    "get_fileno": 1
                },
                "iVar1": {
                    "err_value": 1,
                    "errno": 1,
                    "errno_value": 12,
                    "error": 2,
                    "error_code": 5,
                    "error_status": 1,
                    "error_value": 5,
                    "original_errno": 1,
                    "prev_error_code": 1,
                    "previous_errno": 1,
                    "saved_error_code": 1
                },
                "iVar3": {
                    "fd": 1,
                    "file_descriptor": 20,
                    "file_no": 1,
                    "file_number": 7,
                    "is_terminal": 1
                },
                "initalizeFile": {
                    "initialize": 1
                },
                "isatty": {
                    "is_terminal": 1
                },
                "lVar5": {
                    "base_address": 1,
                    "constant_value": 2,
                    "dat_0010d5a8": 1,
                    "data": 1,
                    "data_address": 3,
                    "data_location": 4,
                    "data_offset": 3,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "errno_location": 1,
                    "file_data": 2,
                    "file_data_location": 1,
                    "file_descriptor": 1,
                    "file_handler_data": 1,
                    "file_handlers": 1,
                    "file_offset": 1,
                    "file_structure": 1,
                    "global_var": 1,
                    "l_var5": 1,
                    "some_variable": 1,
                    "var1": 1
                },
                "param_1": {
                    "file": 1,
                    "file_handle_ptr": 1,
                    "file_handler": 1,
                    "file_pointer": 6,
                    "file_pointer1": 2,
                    "file_ptr": 6,
                    "outfile": 1,
                    "output_file": 10,
                    "output_file_pointer": 1,
                    "output_file_stream": 1,
                    "user_file": 1
                },
                "param_2": {
                    "default_file": 1,
                    "file_pointer": 1,
                    "file_pointer2": 2,
                    "input_file": 22,
                    "input_file_pointer": 1,
                    "input_file_stream": 1,
                    "source_file": 3
                },
                "param_3": {
                    "arg3": 1,
                    "param1": 2,
                    "param3": 16,
                    "param_3": 12
                },
                "param_4": {
                    "arg4": 1,
                    "param2": 2,
                    "param4": 16,
                    "param_4": 12
                },
                "param_5": {
                    "param3": 1,
                    "param5": 16,
                    "param_5": 10,
                    "result": 1,
                    "return_value": 3
                },
                "piVar4": {
                    "err_number": 1,
                    "errno_address": 1,
                    "errno_location": 7,
                    "errno_pointer": 6,
                    "errno_ptr": 6,
                    "error_code": 2,
                    "error_code_pointer": 1,
                    "error_flag": 1,
                    "error_location": 3,
                    "error_pointer": 2,
                    "error_ptr": 1
                },
                "uVar2": {
                    "is_input_terminal": 1,
                    "is_interactive": 1,
                    "is_terminal": 18,
                    "is_tty": 7,
                    "result": 1
                }
            },
            "called": [
                "fileno",
                "__errno_location",
                "FUN_001030ed",
                "isatty"
            ],
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "code": "\n\n\nundefined8\ninitialize_file_pointer_001031cf(FILE **output_file,FILE *input_file,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errno_value;\n  uint isatty;\n  int file_descriptor;\n  int *errno_location;\n  long data_location;\n  \n  errno_location = __errno_location();\n  data_location = DAT_0010d5a8;\n  errno_value = *errno_location;\n  if (output_file == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = input_file;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (output_file == *(FILE ***)(data_location + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)output_file + 0x1c) = 0;\n    *(undefined *)&output_file[1]->flags = 0;\n    *(undefined *)((long)&output_file[1]->flags + 1) = 0;\n    *(undefined4 *)(output_file + 5) = 1;\n    output_file[2] = output_file[1];\n    *(undefined4 *)(output_file + 7) = 0;\n    if (data_location != 0) {\n      if (output_file == *(FILE ***)(data_location + DAT_0010d5a0 * 8)) {\n        extract_data_from_binary();\n      }\n      *output_file = input_file;\n      *(undefined4 *)((long)output_file + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *output_file = input_file;\n    *(undefined4 *)((long)output_file + 0x34) = 1;\n  }\n  *(undefined8 *)((long)output_file + 0x2c) = 1;\nLAB_0010327b:\n  is_terminal = 0;\n  if (input_file != (FILE *)0x0) {\n    file_descriptor = get_fileno(input_file);\n    file_descriptor = is_terminal(file_descriptor);\n    is_terminal = (uint)(0 < file_descriptor);\n  }\n  *(uint *)((long)output_file + 0x24) = is_terminal;\n  *errno_location = errno_value;\n  return param5;\n}\n\n",
            "current_name": "initialize_file_pointer_001031cf",
            "entrypoint": "0x001031cf",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001031cf": "initialize_file_pointer_001031cf",
                "_flags": "flags",
                "extract_data_from_binary_001030ed": "extract_data_from_binary",
                "fileno": "get_fileno",
                "iVar1": "errno_value",
                "iVar3": "file_descriptor",
                "isatty": "is_terminal",
                "lVar5": "data_location",
                "param_1": "output_file",
                "param_2": "input_file",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "piVar4": "errno_location",
                "uVar2": "is_terminal"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032a8": {
            "additional_data": {
                "FUN_001032a8": {
                    "archive_process": 1,
                    "extract_archive_entries": 2,
                    "extract_archived_entries": 1,
                    "extract_entries_from_archive": 4,
                    "extract_from_archive": 1,
                    "process_archive": 7,
                    "process_archive_entries": 10,
                    "process_archived_files": 1,
                    "process_entries": 2,
                    "process_entries_in_archive": 2
                },
                "__format": {
                    "error_format": 4,
                    "error_format_string": 1,
                    "error_message": 9,
                    "error_message_format": 9,
                    "error_msg_format": 1,
                    "format_string": 7
                },
                "_stderr": {
                    "error_stream": 1,
                    "standard_error": 1,
                    "standard_error_output": 1
                },
                "bVar3": {
                    "entry_exists": 1,
                    "entry_found": 15,
                    "file_found": 1,
                    "found_entry": 14
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "iVar5": {
                    "cmp_result": 3,
                    "compare_result": 1,
                    "comparison_result": 23,
                    "filename_cmp_result": 1,
                    "filename_comparison_result": 2,
                    "name_comparison_result": 1
                },
                "lVar1": {
                    "current_entry": 3,
                    "next_entry": 27,
                    "next_file": 1
                },
                "lVar7": {
                    "curr_entry": 1,
                    "current_archive_entry": 1,
                    "current_element": 1,
                    "current_entry": 13,
                    "current_entry_address": 3,
                    "current_entry_index": 3,
                    "current_entry_list": 2,
                    "current_entry_offset": 2,
                    "current_entry_ptr": 2,
                    "current_entry_temp": 1,
                    "current_file": 1,
                    "current_node_address": 1
                },
                "param_1": {
                    "archive": 10,
                    "archive_contents": 1,
                    "archive_data": 6,
                    "archive_entries": 8,
                    "archive_info": 1,
                    "entries": 1,
                    "entry_list": 2,
                    "entry_metadata": 1,
                    "file_array": 1
                },
                "param_2": {
                    "archive_entry_callback": 1,
                    "callback": 11,
                    "callback_func": 1,
                    "callback_function": 4,
                    "entry_function": 1,
                    "entry_handler": 2,
                    "entry_processor": 4,
                    "extract_entry_function": 1,
                    "extract_func": 1,
                    "file_processor": 1,
                    "process_entry": 2,
                    "process_entry_func": 1,
                    "processing_func": 1
                },
                "param_3": {
                    "archive_entries": 2,
                    "entries": 1,
                    "entry_array": 1,
                    "entry_list": 7,
                    "entry_names": 17,
                    "file_list": 1,
                    "requested_entries": 1,
                    "required_entries": 1
                },
                "param_4": {
                    "result": 8,
                    "return_val": 1,
                    "return_value": 22
                },
                "plVar4": {
                    "current_entry": 20,
                    "current_entry_ptr": 5,
                    "current_file": 1,
                    "current_node": 2,
                    "entry": 1,
                    "next_entry": 1,
                    "next_entry_ptr": 1
                },
                "plVar6": {
                    "current_entry_ptr": 1,
                    "entry": 1,
                    "next_entry": 14,
                    "next_entry_list": 2,
                    "next_entry_ptr": 6,
                    "next_entry_temp": 1,
                    "next_file": 1,
                    "next_node": 2,
                    "previous_entry_ptr": 1,
                    "temp_entry": 2
                },
                "plVar8": {
                    "prev_entry": 3,
                    "prev_entry_ptr": 2,
                    "previous_element": 1,
                    "previous_entry": 15,
                    "previous_entry_ptr": 6,
                    "previous_file": 1,
                    "previous_node": 2
                },
                "uVar2": {
                    "archive_entry": 1,
                    "current_entry": 7,
                    "current_entry_name": 4,
                    "current_file": 1,
                    "current_name": 1,
                    "current_required_entry": 1,
                    "entry": 4,
                    "entry_name": 10,
                    "filename": 1,
                    "format_string": 1
                }
            },
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nundefined8 process_entries_in_archive_001032a8(long *archive,code *callback,undefined8 *entry_names,undefined8 return_value)\n\n{\n  long next_entry;\n  undefined8 entry_name;\n  bool entry_found;\n  long *current_entry;\n  int comparison_result;\n  char *error_message_format;\n  long *next_entry;\n  long current_entry;\n  long *previous_entry;\n  \n  current_entry = archive[0x1e];\n  if (entry_names == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*callback)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_entry = (long *)archive[0x1e];\n      previous_entry = archive;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          comparison_result = filename_cmp(*entry_names);\n          if (comparison_result == 0) {\n            entry_found = true;\n            (*callback)(next_entry,previous_entry);\n          }\n        }\n        previous_entry = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!entry_found) {\n        entry_name = *entry_names;\n        error_message_format = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(standard_error_output,error_message_format,entry_name);\n      }\n      entry_names = (undefined8 *)entry_names[1];\n    } while (entry_names != (undefined8 *)0x0);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_entries_in_archive_001032a8",
            "entrypoint": "0x001032a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032a8": "process_entries_in_archive_001032a8",
                "__format": "error_message_format",
                "_stderr": "standard_error_output",
                "bVar3": "entry_found",
                "dcgettext": "get_error_message",
                "iVar5": "comparison_result",
                "lVar1": "next_entry",
                "lVar7": "current_entry",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entry_names",
                "param_4": "return_value",
                "plVar4": "current_entry",
                "plVar6": "next_entry",
                "plVar8": "previous_entry",
                "uVar2": "entry_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010336b": {
            "additional_data": {
                "FUN_0010336b": {
                    "print_emulation_options": 31
                },
                "param_1": {
                    "file": 4,
                    "file_ptr": 4,
                    "output_file": 23
                },
                "pcVar1": {
                    "emulation_message": 2,
                    "emulation_option": 4,
                    "emulation_option_text": 1,
                    "emulation_options": 1,
                    "emulation_options_msg": 2,
                    "emulation_options_string": 5,
                    "emulation_options_text": 2,
                    "emulation_string": 2,
                    "emulation_text": 2,
                    "message": 1,
                    "option_description": 1,
                    "option_message": 1,
                    "option_text": 2,
                    "options_message": 1,
                    "options_string": 2,
                    "translation": 2
                }
            },
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_0010342d"
            ],
            "code": "\nvoid print_emulation_options_0010336b(FILE *output_file)\n\n{\n  char *emulation_options_string;\n  \n  emulation_options_string = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(output_file,emulation_options_string);\n  emulation_options_string = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(output_file,emulation_options_string);\n  return;\n}\n\n",
            "current_name": "print_emulation_options_0010336b",
            "entrypoint": "0x0010336b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "output_file",
                "pcVar1": "emulation_options_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001033b0": {
            "additional_data": {
                "FUN_001033b0": {
                    "print_and_exit": 7,
                    "print_error_and_exit": 5,
                    "print_error_message_and_exit": 19
                },
                "_stderr": {
                    "standard_error": 1
                },
                "exit": {
                    "terminate_program": 1
                },
                "fprintf": {
                    "print_formatted_output": 1,
                    "write_to_standard_error": 1
                },
                "param_1": {
                    "error_message": 26,
                    "message": 5
                }
            },
            "called": [
                "exit",
                "fprintf"
            ],
            "calling": [
                "FUN_00103df9",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid print_error_message_and_exit_001033b0(undefined8 error_message)\n\n{\n  fprintf(standard_error,\"%s\\n\",error_message);\n                    \n  terminate_program(2);\n}\n\n",
            "current_name": "print_error_message_and_exit_001033b0",
            "entrypoint": "0x001033b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "_stderr": "standard_error",
                "exit": "terminate_program",
                "fprintf": "print_formatted_output",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001033d6": {
            "additional_data": {
                "FUN_001033d6": {
                    "allocate_and_initialize_file_buffer": 1,
                    "create_and_initialize_buffer": 2,
                    "create_buffer": 23,
                    "create_buffer_from_memory": 1,
                    "create_dynamic_buffer": 1,
                    "create_parser_buffer": 1,
                    "yy_create_buffer": 2
                },
                "auVar3": {
                    "buffer_au_var3": 1,
                    "buffer_info": 1,
                    "result": 18,
                    "result_buffer": 1,
                    "return_value": 7
                },
                "param_1": {
                    "arg1": 1,
                    "buffer_param": 1,
                    "buffer_param1": 1,
                    "data_start": 1,
                    "error_messages": 1,
                    "file_data": 1,
                    "file_descriptor": 1,
                    "file_path": 2,
                    "file_pointer": 1,
                    "first_param": 2,
                    "initial_value": 1,
                    "input_file": 1,
                    "input_file_stream": 1,
                    "input_length": 1,
                    "input_param": 4,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_size": 1,
                    "memory_start": 1,
                    "param": 1,
                    "param1": 5,
                    "unknown_param_1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "buffer_param2": 1,
                    "buffer_size": 1,
                    "data": 1,
                    "data_end": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value1": 1,
                    "memory_end": 1,
                    "output_file": 1,
                    "output_param": 4,
                    "param2": 6,
                    "param_2": 5,
                    "second_param": 2,
                    "size": 1,
                    "unknown_param_2": 1,
                    "unused_param1": 1
                },
                "param_3": {
                    "arg3": 1,
                    "buffer_data": 1,
                    "buffer_param3": 1,
                    "buffer_size": 1,
                    "config_param": 1,
                    "dynamic_memory_param": 1,
                    "flag_param": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_value2": 1,
                    "memory_param": 1,
                    "param3": 7,
                    "param_3": 5,
                    "pointer": 1,
                    "size": 1,
                    "third_param": 2,
                    "unknown_param_3": 1,
                    "unused_param1": 1,
                    "unused_param2": 1
                },
                "param_4": {
                    "arg4": 1,
                    "buffer": 1,
                    "buffer_param": 1,
                    "buffer_param4": 1,
                    "buffer_size": 1,
                    "custom_value": 1,
                    "file_param": 2,
                    "file_pointer": 3,
                    "file_pointer_param": 1,
                    "flag": 2,
                    "flag_param": 1,
                    "fourth_param": 2,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "mode": 1,
                    "output_file_stream": 1,
                    "param4": 7,
                    "unknown_param_4": 1,
                    "unused_param2": 1,
                    "unused_param3": 1
                },
                "pvVar1": {
                    "buffer": 28,
                    "buffer_ptr": 2,
                    "buffer_ptr1": 1
                },
                "pvVar2": {
                    "allocated_memory": 1,
                    "aux_buffer": 1,
                    "buffer2": 1,
                    "buffer_content": 1,
                    "buffer_data_ptr": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr2": 1,
                    "data": 2,
                    "data_buffer": 2,
                    "data_ptr": 2,
                    "dynamic_buffer": 1,
                    "dynamic_mem": 1,
                    "dynamic_memory": 7,
                    "file_buffer_ptr": 1,
                    "malloc_result": 2,
                    "other_buffer": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "ptr_buffer": 1,
                    "temp_buffer": 1
                }
            },
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nundefined  [16]\ncreate_and_initialize_buffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *dynamic_memory;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dynamic_memory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dynamic_memory;\n  } while (dynamic_memory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_pointer_001031cf(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "current_name": "create_and_initialize_buffer_001033d6",
            "entrypoint": "0x001033d6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001033d6": "create_and_initialize_buffer_001033d6",
                "auVar3": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "dynamic_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010342d": {
            "additional_data": {
                "DAT_0010d660": {
                    "program_name": 2
                },
                "FUN_0010342d": {
                    "print_archive_usage": 1,
                    "print_usage": 28,
                    "print_usage_and_exit": 1,
                    "print_usage_info": 1
                },
                "__stream": {
                    "file": 1,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "output_stream": 23,
                    "stream": 5
                },
                "_stderr": {
                    "error_stream": 1
                },
                "_stdout": {
                    "standard_stream": 1
                },
                "dcgettext": {
                    "get_localized_string": 1,
                    "get_translated_message": 1,
                    "get_translated_string": 1,
                    "get_translated_text": 1
                },
                "fprintf": {
                    "print_formatted": 3,
                    "print_to_stream": 1
                },
                "param_1": {
                    "is_error": 2,
                    "is_param_one_zero": 1,
                    "is_stdout": 3,
                    "is_verbose": 7,
                    "is_verbose_mode": 1,
                    "options": 1,
                    "output_to_file": 1,
                    "output_to_stdout": 3,
                    "output_type": 2,
                    "param": 3,
                    "param_type": 1,
                    "print_to_stdout": 1,
                    "show_usage": 1,
                    "verbose_mode": 1,
                    "verbosity": 3
                },
                "pcVar2": {
                    "error_message": 1,
                    "localization_string": 1,
                    "localized_message": 2,
                    "localized_string": 4,
                    "localized_text": 1,
                    "message": 14,
                    "message_ptr": 1,
                    "msg": 1,
                    "msg_ptr": 1,
                    "str": 1,
                    "string": 1,
                    "text": 2,
                    "translated_text": 1
                },
                "print_emulation_options_0010336b": {
                    "print_emulation_options": 1
                },
                "print_supported_targets_0010266f": {
                    "print_supported_targets": 1
                },
                "uVar1": {
                    "archive_file_name": 1,
                    "data_pointer": 1,
                    "data_variable": 1,
                    "format": 1,
                    "format_specifier": 1,
                    "format_string": 2,
                    "formatted_string": 1,
                    "localized_value": 1,
                    "message": 1,
                    "output": 1,
                    "print_var": 1,
                    "string_ptr": 1,
                    "translation1": 1,
                    "usage_string": 1,
                    "var1": 1,
                    "version": 2,
                    "version_number": 2
                },
                "xexit": {
                    "exit_program": 3
                }
            },
            "called": [
                "FUN_0010266f",
                "xexit",
                "FUN_0010336b",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_usage_info_0010342d(uint is_verbose)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *output_stream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  output_stream = error_stream;\n  if (is_verbose != 0) {\n    output_stream = standard_stream;\n  }\n  fprintf(output_stream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(output_stream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  print_emulation_options(output_stream);\n  print_supported_targets(DAT_0010d660,output_stream);\n  if (is_verbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(is_verbose ^ 1);\n}\n\n",
            "current_name": "print_usage_info_0010342d",
            "entrypoint": "0x0010342d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010342d": "print_usage_info_0010342d",
                "__stream": "output_stream",
                "_stderr": "error_stream",
                "_stdout": "standard_stream",
                "dcgettext": "get_translated_text",
                "fprintf": "print_formatted",
                "param_1": "is_verbose",
                "pcVar2": "message",
                "print_emulation_options_0010336b": "print_emulation_options",
                "print_supported_targets_0010266f": "print_supported_targets",
                "uVar1": "version",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010394a": {
            "additional_data": {
                "FUM_0010394a": {
                    "print_usage": 1
                },
                "FUN_0010394a": {
                    "print_archive_help": 1,
                    "print_archive_index": 2,
                    "print_archive_info": 1,
                    "print_archive_options": 2,
                    "print_archive_usage": 2,
                    "print_help_message": 1,
                    "print_index": 1,
                    "print_index_function": 1,
                    "print_index_usage": 1,
                    "print_usage": 16,
                    "print_usage_and_exit": 2
                },
                "__stream": {
                    "output_stream": 27,
                    "print_stream": 1,
                    "stream": 3
                },
                "_stderr": {
                    "standard_error": 1
                },
                "_stdout": {
                    "standard_output": 1
                },
                "dcgettext": {
                    "get_translated_message": 1
                },
                "param_1": {
                    "archive_flag": 1,
                    "display_mode": 1,
                    "enable_output": 1,
                    "flag": 2,
                    "is_debug_mode": 1,
                    "is_error": 3,
                    "is_stdout": 1,
                    "is_update": 1,
                    "is_verbose": 9,
                    "option_flag": 1,
                    "options": 1,
                    "output_mode": 2,
                    "output_to_file": 1,
                    "output_to_stdout": 1,
                    "print_mode": 1,
                    "print_option": 1,
                    "show_bugs": 1,
                    "stream_mode": 1,
                    "stream_option": 1
                },
                "pcVar2": {
                    "localized_string": 1,
                    "localized_text": 1,
                    "message": 25,
                    "print_text": 1,
                    "text": 3
                },
                "print_supported_targets_0010266f": {
                    "print_supported_targets": 1
                },
                "uVar1": {
                    "archive_filename": 1,
                    "archive_name": 4,
                    "data": 1,
                    "data_string": 1,
                    "default_options": 1,
                    "program_name": 10,
                    "timestamp": 1,
                    "usage": 1,
                    "usage_message": 1,
                    "usage_string": 7,
                    "version": 2,
                    "version_info": 1
                },
                "xexit": {
                    "exit_program": 1
                }
            },
            "called": [
                "FUN_0010266f",
                "xexit",
                "dcgettext",
                "fprintf"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_usage_and_exit_0010394a(uint is_verbose)\n\n{\n  undefined8 program_name;\n  char *message;\n  FILE *output_stream;\n  \n  program_name = DAT_0010d660;\n  output_stream = standard_error;\n  if (is_verbose != 0) {\n    output_stream = standard_output;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(output_stream,message,program_name);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  print_supported_targets(DAT_0010d660,output_stream);\n  if (is_verbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(is_verbose ^ 1);\n}\n\n",
            "current_name": "print_usage_and_exit_0010394a",
            "entrypoint": "0x0010394a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010394a": "print_usage_and_exit_0010394a",
                "__stream": "output_stream",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "dcgettext": "get_translated_message",
                "param_1": "is_verbose",
                "pcVar2": "message",
                "print_supported_targets_0010266f": "print_supported_targets",
                "uVar1": "program_name",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a78": {
            "additional_data": {
                "DAT_0010d60c": {
                    "flag": 1
                },
                "FUN_00103a78": {
                    "decompile_and_print_archive": 1,
                    "extract_and_print_archive": 10,
                    "extract_and_print_archive_content": 1,
                    "extract_and_print_archive_contents": 7,
                    "extract_and_print_data": 1,
                    "extract_and_print_file_from_archive": 1,
                    "extract_archive": 1,
                    "extract_archive_and_print": 1,
                    "extract_archive_contents": 2,
                    "extract_archived_files": 1,
                    "load_and_print_archive": 1,
                    "process_archive": 1,
                    "process_binary": 1,
                    "read_and_print_archive": 1,
                    "reverse_and_print_archive": 1
                },
                "__ptr": {
                    "archive_buffer": 1,
                    "buffer": 29,
                    "buffer_ptr": 1
                },
                "_stdout": {
                    "file_output": 1
                },
                "auStack_b8": {
                    "auxiliary_stack": 1,
                    "auxillary_stack": 1,
                    "local_stack": 1,
                    "stack_array": 1,
                    "stack_buffer": 18,
                    "stack_data": 3,
                    "temp_buffer": 1,
                    "temp_stack": 1,
                    "temp_stack_array": 1,
                    "temporary_buffer": 2
                },
                "iVar1": {
                    "callback_result": 1,
                    "result": 20,
                    "status": 5
                },
                "local_88": {
                    "buffer_size": 1,
                    "chunk_size": 1,
                    "expected_archive_size": 2,
                    "expected_bytes": 1,
                    "expected_size": 4,
                    "expected_total_bytes": 1,
                    "file_size": 5,
                    "max_buffer_size": 2,
                    "max_bytes": 1,
                    "max_bytes_to_read": 1,
                    "output_size": 1,
                    "remaining_archive_size": 1,
                    "remaining_bytes": 2,
                    "remaining_size": 1,
                    "target_bytes": 1,
                    "target_size": 2,
                    "total_bytes": 2,
                    "total_bytes_to_write": 1
                },
                "param_1": {
                    "archive": 14,
                    "archive_data": 1,
                    "archive_file": 2,
                    "archive_handle": 1,
                    "archive_info": 1,
                    "archive_metadata": 1,
                    "archive_ptr": 1,
                    "arg_list": 1,
                    "arguments": 1,
                    "binary_info": 1,
                    "file_descriptor": 1,
                    "file_parameters": 1,
                    "function_arguments": 1,
                    "function_params": 1,
                    "input": 3
                },
                "pcVar7": {
                    "error_message": 10,
                    "error_message_format": 7,
                    "error_msg_format": 1,
                    "error_msg_template": 1,
                    "error_str": 2,
                    "error_string": 9,
                    "format_string": 1
                },
                "piVar6": {
                    "err_num": 1,
                    "errno": 1,
                    "errno_loc": 2,
                    "errno_location": 9,
                    "errno_ptr": 7,
                    "error_code": 4,
                    "error_code_ptr": 1,
                    "error_location": 3,
                    "error_number": 3
                },
                "puVar2": {
                    "alt_input": 1,
                    "alternative_archive_file": 1,
                    "archive": 3,
                    "archive_param": 1,
                    "archive_ptr": 3,
                    "aux_list": 1,
                    "callback_data": 1,
                    "callback_function": 1,
                    "data_ptr": 1,
                    "file_ptr": 1,
                    "func_ptr": 2,
                    "function_array": 1,
                    "function_ptr": 1,
                    "library": 1,
                    "param_2": 1,
                    "ptr": 5,
                    "ptr_or_input": 1,
                    "secondary_archive": 1,
                    "secondary_archive_ptr": 1,
                    "secondary_file_parameters": 1,
                    "secondary_handle": 1,
                    "temp_ptr": 1
                },
                "sVar5": {
                    "bytes_written": 31
                },
                "uVar3": {
                    "bytes_read": 27,
                    "bytes_read_temp": 1,
                    "read_size": 2
                },
                "uVar4": {
                    "error": 1,
                    "error_message": 23,
                    "error_msg": 3,
                    "error_text": 1,
                    "message": 1,
                    "translated_error_message": 1
                },
                "unaff_R13": {
                    "bytes_processed": 2,
                    "bytes_read": 1,
                    "total_bytes_read": 25,
                    "total_bytes_written": 2
                },
                "unaff_R14": {
                    "archive_size": 27,
                    "total_bytes": 1,
                    "total_bytes_expected": 2
                },
                "unaff_RBP": {
                    "bytes_remaining": 4,
                    "bytes_to_read": 1,
                    "read_buffer_size": 1,
                    "remaining_bytes": 23,
                    "remaining_bytes_to_read": 2
                }
            },
            "called": [
                "printf",
                "__errno_location",
                "bfd_bread",
                "dcgettext",
                "fwrite",
                "strerror",
                "bfd_seek",
                "xmalloc",
                "free",
                "FUN_00107690"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid extract_and_print_archive_contents_00103a78(undefined8 *archive)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *ptr;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_location;\n  size_t remaining_bytes;\n  char *error_message;\n  ulong total_bytes_read;\n  ulong archive_size;\n  undefined stack_buffer [48];\n  ulong file_size;\n  \n  buffer = (void *)xmalloc(0x2000);\n  ptr = (undefined8 *)archive[0x1d];\n  if ((undefined8 *)archive[0x1d] == (undefined8 *)0x0) {\n    ptr = archive;\n  }\n  result = (**(code **)(ptr[1] + 0x1e8))(archive,stack_buffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive);\n    }\n    total_bytes_read = 0;\n    bfd_seek(archive,0,0);\n    goto LAB_00103afd;\n  }\n  archive = (undefined8 *)*archive;\n  error_message = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_message,5);\n    print_error_message_and_exit_00107690(error_message,archive);\n    file_size = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,file_output);\n      if (bytes_written != remaining_bytes) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_error_message_and_exit_00107690(\"stdout: %s\",error_message);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes_read = total_bytes_read + bytes_written;\nLAB_00103afd:\n      if (file_size <= total_bytes_read) goto LAB_00103b91;\n      remaining_bytes = file_size - total_bytes_read;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,archive);\n    } while (remaining_bytes == bytes_read);\n    error_message = \"%s is not a valid archive\";\n    archive = *(undefined8 **)archive[0x1d];\n    archive_size = file_size;\n  } while( true );\n}\n\n",
            "current_name": "extract_and_print_archive_contents_00103a78",
            "entrypoint": "0x00103a78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "__ptr": "buffer",
                "_stdout": "file_output",
                "auStack_b8": "stack_buffer",
                "iVar1": "result",
                "local_88": "file_size",
                "param_1": "archive",
                "pcVar7": "error_message",
                "piVar6": "errno_location",
                "puVar2": "ptr",
                "sVar5": "bytes_written",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "unaff_R13": "total_bytes_read",
                "unaff_R14": "archive_size",
                "unaff_RBP": "remaining_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ba8": {
            "additional_data": {
                "FUN_00103ba8": {
                    "check_and_print_ar": 3,
                    "check_and_print_ar_status": 1,
                    "check_ar_status": 3,
                    "check_display_status": 1,
                    "check_for_active_ar": 1,
                    "check_if_ar_greater_than_zero": 1,
                    "print_a_ror_return": 1,
                    "print_active_resource": 1,
                    "print_ar": 3,
                    "print_ar_if_not_zero": 1,
                    "print_ar_message": 7,
                    "print_ar_message_if_not_zero": 1,
                    "print_ar_prompt": 1,
                    "print_ar_status": 2,
                    "print_ar_value": 1,
                    "print_arrows_if_not_zero": 1,
                    "print_if_ar_is_not_zero": 1,
                    "print_prompt_if_not_ar": 1
                },
                "_DAT_0010d608": {
                    "ar": 1,
                    "ar_value": 3,
                    "flag": 6,
                    "is_active": 1,
                    "is_ar": 1,
                    "is_ar_active": 3,
                    "is_ar_available": 1,
                    "is_ar_enabled": 1,
                    "status": 2,
                    "status_flag": 2
                },
                "_stdout": {
                    "output_stream": 2,
                    "standard_output": 3
                },
                "fflush": {
                    "flush_output_buffer": 1,
                    "flush_output_stream": 1
                },
                "printf": {
                    "print_ar_message": 1,
                    "print_message": 1
                },
                "stdout": {
                    "output_stream": 1,
                    "standard_output": 2
                }
            },
            "called": [
                "printf",
                "fflush"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid print_ar_message_if_not_zero_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standard_output);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_ar_message_if_not_zero_00103ba8",
            "entrypoint": "0x00103ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ba8": "print_ar_message_if_not_zero_00103ba8",
                "_stdout": "standard_output",
                "fflush": "flush_output_buffer",
                "printf": "print_ar_message",
                "stdout": "standard_output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bd1": {
            "additional_data": {
                "FUN_00103bd1": {
                    "print_matching_formats": 31
                },
                "__format": {
                    "error_message": 1,
                    "error_message_format": 1,
                    "format_message": 3,
                    "format_msg": 1,
                    "format_string": 18,
                    "format_string_message": 1,
                    "localized_format": 1,
                    "message_format": 1,
                    "translation": 1
                },
                "_stderr": {
                    "": 1,
                    "standard_error": 7
                },
                "_stdout": {
                    "": 1,
                    "standard_output": 7
                },
                "param_1": {
                    "format_list": 5,
                    "format_strings": 12,
                    "format_strs": 1,
                    "formats": 10,
                    "matching_formats": 1,
                    "string_list": 1,
                    "strings_array": 1
                },
                "plVar2": {
                    "current_format": 18,
                    "current_format_string": 5,
                    "current_string": 3,
                    "format_ptr": 2
                },
                "uVar1": {
                    "current_format": 1,
                    "current_locale": 1,
                    "data": 6,
                    "data_pointer": 1,
                    "data_value": 1,
                    "default_format": 4,
                    "default_value": 1,
                    "format_value": 1,
                    "matching_format": 1,
                    "matching_formats": 2,
                    "saved_standard_output": 1,
                    "saved_value": 1,
                    "selected_format": 1,
                    "translation": 1
                }
            },
            "called": [
                "dcgettext",
                "free",
                "fflush",
                "fprintf",
                "fputc"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid print_matching_formats_00103bd1(long *format_strings)\n\n{\n  undefined8 data;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  data = DAT_0010d660;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,data);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_00103bd1",
            "entrypoint": "0x00103bd1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "param_1": "format_strings",
                "plVar2": "current_format",
                "uVar1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c60": {
            "additional_data": {
                "FUN_00103c60": {
                    "create_temporary_output_archive": 1,
                    "extract_and_check_archives": 1,
                    "extract_and_create_temp_file": 1,
                    "extract_and_format_archive": 1,
                    "extract_and_modify_archive": 13,
                    "extract_and_modify_archived_files": 1,
                    "extract_and_modify_file": 1,
                    "extract_and_modify_files": 1,
                    "extract_and_open_archive": 2,
                    "extract_archive_and_modify_flags": 1,
                    "extract_archive_and_set_format": 1,
                    "extract_archive_file": 1,
                    "extract_archive_files": 1,
                    "extract_archived_files": 1,
                    "extract_temporary_and_open_output_archive": 1,
                    "process_archive": 1,
                    "process_archived_files": 1,
                    "process_files": 1
                },
                "_stderr": {
                    "error_stream": 1,
                    "standard_error": 2,
                    "standard_error_stream": 1
                },
                "cVar1": {
                    "check_format_flag": 1,
                    "check_format_result": 3,
                    "check_result": 4,
                    "format_check": 3,
                    "format_check_result": 8,
                    "format_valid": 3,
                    "is_archive": 1,
                    "is_archive_format": 1,
                    "is_valid_format": 1
                },
                "check_and_exit_if_zero_flag_set_0010315d": {
                    "check_and_exit_if_zero_flag_set": 1
                },
                "fprintf": {
                    "print_error": 1,
                    "print_error_message": 1
                },
                "lVar4": {
                    "input_archive": 19,
                    "input_archive_handle": 6,
                    "input_archive_ptr": 1,
                    "input_archived_file": 1,
                    "input_bfd": 2,
                    "input_file": 2
                },
                "lVar5": {
                    "archived_file": 23,
                    "archived_file_handle": 6,
                    "archived_file_ptr": 1,
                    "next_archived_file": 1
                },
                "param_1": {
                    "archive_file_path": 1,
                    "archive_path": 9,
                    "file_path": 2,
                    "input_archive": 11,
                    "input_archive_filepath": 1,
                    "input_archive_path": 2,
                    "input_file": 1,
                    "input_file_name": 1,
                    "input_file_path": 2,
                    "input_path": 1
                },
                "param_2": {
                    "archive_format": 1,
                    "create_new_archive": 1,
                    "create_output": 1,
                    "flag": 11,
                    "is_output_archive": 1,
                    "is_plugin": 9,
                    "modify_flag": 2,
                    "reversed_flag": 1,
                    "set_format_flag": 1,
                    "should_modify": 1,
                    "use_plugin": 1,
                    "use_temp": 1
                },
                "pcVar3": {
                    "error_message": 30,
                    "error_msg_format": 1
                },
                "piVar2": {
                    "errno_loc": 1,
                    "errno_location": 5,
                    "errno_location_result": 2,
                    "errno_ptr": 3,
                    "error": 2,
                    "error_code": 3,
                    "error_code_pointer": 1,
                    "error_location": 4,
                    "error_num": 1,
                    "error_number": 6,
                    "error_number_ptr": 1,
                    "error_ptr": 1
                },
                "plVar7": {
                    "archive_list": 1,
                    "archived_file_handles": 2,
                    "archived_file_ptr": 3,
                    "archived_files": 3,
                    "archived_files_array": 3,
                    "archived_files_ptr": 1,
                    "current_archived_file_handle": 1,
                    "current_file": 4,
                    "current_file_pointer": 2,
                    "current_file_pointer_in_output_archive": 1,
                    "current_file_ptr": 4,
                    "file_list": 1,
                    "file_offset": 1,
                    "file_pointer": 2,
                    "next_archived_file": 1,
                    "output_archive_file_pointers": 1
                },
                "uVar6": {
                    "archive_name": 1,
                    "binary_name": 1,
                    "error_text": 1,
                    "executable_name": 1,
                    "filename": 1,
                    "function_name": 1,
                    "output_archive": 3,
                    "program_name": 22
                }
            },
            "called": [
                "FUN_0010315d",
                "__errno_location",
                "bfd_fdopenw",
                "bfd_openr_next_archived_file",
                "FUN_001057a0",
                "dcgettext",
                "bfd_check_format",
                "strerror",
                "xstrdup",
                "bfd_openr",
                "bfd_set_format",
                "fprintf"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid extract_archive_and_modify_flags_00103c60(char *input_archive,int flag)\n\n{\n  char format_check_result;\n  int *error_number;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *current_file;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_file_name_and_create_temp_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    error_number = __errno_location();\n    input_archive = strerror(*error_number);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(input_archive,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        format_check_result = bfd_check_format(input_archive,2);\n        if (format_check_result != '\\0') {\n          current_file = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *current_file = archived_file;\n            current_file = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(standard_error,error_message,program_name,input_archive);\n  check_and_exit_if_zero_flag_set();\n  return;\n}\n\n",
            "current_name": "extract_archive_and_modify_flags_00103c60",
            "entrypoint": "0x00103c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c60": "extract_archive_and_modify_flags_00103c60",
                "_stderr": "standard_error",
                "cVar1": "format_check_result",
                "check_and_exit_if_zero_flag_set_0010315d": "check_and_exit_if_zero_flag_set",
                "fprintf": "print_error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "param_1": "input_archive",
                "param_2": "flag",
                "pcVar3": "error_message",
                "piVar2": "error_number",
                "plVar7": "current_file",
                "uVar6": "program_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ddc": {
            "additional_data": {
                "DAT_0010d578": {
                    "file_buffer": 1,
                    "file_data": 3,
                    "file_data_buffer": 1,
                    "file_info": 2,
                    "file_info_array": 2,
                    "file_info_buffer": 1,
                    "file_info_constant1": 1,
                    "file_info_data": 3,
                    "file_info_format": 1,
                    "file_info_ptr": 1,
                    "file_info_variable": 1
                },
                "DAT_0010d60c": {
                    "file_info_constant2": 1,
                    "has_additional_info": 1,
                    "is_condition_true": 1,
                    "is_debug_enabled": 1,
                    "is_enabled": 1,
                    "is_flag_set": 1,
                    "is_non_zero": 1,
                    "is_option_enabled": 1,
                    "is_verbose": 6,
                    "print_flag": 1,
                    "should_print": 1
                },
                "FUN_00103ddc": {
                    "print_file_info": 27,
                    "print_file_information": 3,
                    "print_formatted_file_info": 1
                },
                "format_and_print_file_info_001079c0": {
                    "format_and_print_file_info": 18,
                    "print_file_format_and_info": 1,
                    "print_file_info_formatted": 1,
                    "print_formatted_file_info": 5
                },
                "param_1": {
                    "file": 6,
                    "file_info": 21,
                    "file_path": 4
                }
            },
            "called": [
                "FUN_001079c0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid print_formatted_file_info_00103ddc(undefined8 file_info)\n\n{\n  format_and_print_file_info(DAT_0010d578,file_info,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "current_name": "print_formatted_file_info_00103ddc",
            "entrypoint": "0x00103ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ddc": "print_formatted_file_info_00103ddc",
                "format_and_print_file_info_001079c0": "format_and_print_file_info",
                "param_1": "file_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103df9": {
            "additional_data": {
                "FUN_00103df9": {
                    "ensure_buffer_stack": 31
                },
                "__size": {
                    "buffer_size": 16,
                    "size": 6,
                    "total_size": 6
                },
                "bVar4": {
                    "bool_value": 1,
                    "boolean_flag": 1,
                    "byte_flag": 6,
                    "byte_value": 4,
                    "byte_var": 2,
                    "count": 1,
                    "flag": 12,
                    "is_first_iteration": 1,
                    "loop_increment": 1,
                    "loop_incrementor": 1,
                    "temp_var": 1
                },
                "in_RCX": {
                    "input": 5,
                    "input_arg": 1,
                    "input_param": 3,
                    "input_parameter": 5,
                    "input_value": 2,
                    "result": 2,
                    "return_code": 1,
                    "return_value": 12
                },
                "lVar1": {
                    "counter": 2,
                    "loop_count": 1,
                    "loop_counter": 25,
                    "loop_index": 2,
                    "loop_variable1": 1
                },
                "lVar2": {
                    "loop_variable2": 1,
                    "new_buffer_size": 12,
                    "new_size": 18
                },
                "print_error_message_and_exit_001033b0": {
                    "print_error_message_and_exit": 1
                },
                "puVar3": {
                    "buffer_pointer": 9,
                    "buffer_ptr": 12,
                    "current_buffer_ptr": 2,
                    "current_ptr": 1,
                    "pointer": 1,
                    "pointer_to_buffer": 1,
                    "ptr": 2,
                    "ptr_to_buffer": 1,
                    "ptr_to_last_element": 2
                }
            },
            "called": [
                "calloc",
                "FUN_001033b0",
                "realloc"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_size = DAT_0010d580 + 8;\n    buffer_size = new_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)flag * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  print_error_message_and_exit(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "current_name": "ensure_buffer_stack_00103df9",
            "entrypoint": "0x00103df9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "__size": "buffer_size",
                "bVar4": "flag",
                "in_RCX": "return_value",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "print_error_message_and_exit_001033b0": "print_error_message_and_exit",
                "puVar3": "buffer_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103e95": {
            "additional_data": {
                "DAT_0010d550": {
                    "current_token": 1
                },
                "FUN_00103e95": {
                    "extract_and_modify_archive": 2,
                    "extract_and_modify_flags": 1,
                    "extract_and_modify_flags_of_archived_files": 1,
                    "extract_and_process_archive_script": 3,
                    "extract_and_process_archived_data": 1,
                    "extract_and_process_files_from_archive": 1,
                    "extract_data_from_binary": 1,
                    "improve_and_extract_archived_files": 1,
                    "improved_extract_and_convert_archived_files": 3,
                    "improved_extract_and_modify_flags": 1,
                    "improved_extract_and_parse_archive_script": 1,
                    "improved_extract_and_process_archives": 1,
                    "improved_extract_archive": 1,
                    "improved_extract_archive_script": 1,
                    "improved_extract_archived_files": 2,
                    "improved_extract_data_from_archive": 1,
                    "improved_extract_data_from_binary": 2,
                    "improved_extract_files_from_binary": 2,
                    "improved_extract_from_archive": 1
                },
                "PI_01": {
                    "flag_ptr": 1
                },
                "auVar19": {
                    "temp_var1": 1
                },
                "auVar20": {
                    "temp_var2": 1
                },
                "auVar40": {
                    "array_of_unsigned_var40": 1,
                    "array_var": 1,
                    "auxiliary_var40": 1,
                    "buffer_stack_result": 1,
                    "error_print_format_array": 1,
                    "error_var1": 1,
                    "generic_array_1": 1,
                    "result": 1,
                    "temp_array": 1,
                    "temp_var1": 1,
                    "temp_variable1": 1,
                    "temp_variable13": 1,
                    "tmp_var_34": 1,
                    "undefined_array": 1,
                    "undefined_array_variable_40bytes": 1
                },
                "auVar41": {
                    "array_of_unsigned_var41": 1,
                    "array_var": 1,
                    "auxiliary_var41": 1,
                    "error_var2": 1,
                    "generic_array_2": 1,
                    "ptr_temp1": 1,
                    "realloc_array": 1,
                    "realloc_result": 1,
                    "temp_array": 1,
                    "temp_var2": 1,
                    "temp_variable14": 1,
                    "temp_variable2": 1,
                    "tmp_var_35": 1,
                    "undefined_array": 1,
                    "undefined_array_variable_16bytes": 1
                },
                "bVar16": {
                    "bool_var": 1
                },
                "bVar17": {
                    "byte_var": 1
                },
                "bVar18": {
                    "b1": 1
                },
                "bVar19": {
                    "b2": 1
                },
                "bVar27": {
                    "bool_var1": 1
                },
                "bVar28": {
                    "b_var28": 1,
                    "bool": 1,
                    "bool_var": 3,
                    "bool_var28": 1,
                    "bool_variable": 3,
                    "boolean_var": 1,
                    "boolean_var28": 1,
                    "boolean_variable": 2,
                    "file_found": 1,
                    "found_match": 2,
                    "found_value": 2,
                    "has_open_archive": 1,
                    "match_found": 1,
                    "module_found": 1,
                    "tmp_var_20": 1
                },
                "bVar30": {
                    "archive_char_value": 1,
                    "b_var30": 1,
                    "bool": 1,
                    "boolean_var": 1,
                    "boolean_variable": 1,
                    "byte_var": 3,
                    "byte_var1": 1,
                    "byte_var30": 2,
                    "byte_var_1": 1,
                    "byte_variable": 2,
                    "case_value": 1,
                    "char_transition": 1,
                    "current_char": 1,
                    "file_byte": 1,
                    "index_boolean": 1,
                    "temp_variable11": 1,
                    "tmp_var_21": 1,
                    "transition_flag": 1
                },
                "bVar39": {
                    "buffer_flag": 1,
                    "byte_var": 2,
                    "byte_var39": 1,
                    "byte_var_2": 1,
                    "error_flag": 1,
                    "flag": 2,
                    "flag_boolean": 1,
                    "found_matching_value": 1,
                    "is_eof": 1,
                    "is_error": 1,
                    "tmp_var_30": 1
                },
                "cVar15": {
                    "char_var": 1
                },
                "cVar2": {
                    "char_value": 1,
                    "char_var": 2,
                    "char_variable": 1,
                    "character": 4,
                    "character_var": 2,
                    "character_variable": 3,
                    "current_char": 2,
                    "current_character": 1,
                    "current_value": 3,
                    "file_action": 1,
                    "temp_char": 1,
                    "token_char": 1
                },
                "iVar25": {
                    "file_operation_error": 1,
                    "flag": 1,
                    "i_var25": 1,
                    "int_var": 1,
                    "int_var3": 1,
                    "int_variable": 1,
                    "integer": 1,
                    "integer_var": 1,
                    "integer_var25": 2,
                    "integer_var_2": 1,
                    "integer_variable": 2,
                    "loop_variable_2": 1,
                    "new_length": 1,
                    "new_size": 2,
                    "new_value": 1,
                    "temp_index_variable": 1,
                    "temp_int_2": 1
                },
                "iVar37": {
                    "action_type": 1,
                    "case_value": 2,
                    "file_operation": 1,
                    "i_var37": 1,
                    "int_var": 1,
                    "integer_var37": 1,
                    "integer_var_3": 1,
                    "state": 1,
                    "state_index": 1,
                    "switch_variable": 1,
                    "tmp_var_29": 1,
                    "token_code": 1
                },
                "iVar8": {
                    "i_var8": 1,
                    "index": 1,
                    "int_var": 3,
                    "int_variable": 1,
                    "integer": 2,
                    "integer_var": 1,
                    "integer_var8": 2,
                    "integer_var_1": 1,
                    "integer_variable": 3,
                    "iter": 1,
                    "loop_var": 1,
                    "loop_variable": 1,
                    "temp_int": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "tmp_var_2": 1,
                    "value": 3
                },
                "iVar9": {
                    "error_code": 1,
                    "file_descriptor": 1,
                    "file_operation_result": 1,
                    "i_var9": 1,
                    "int_var": 2,
                    "int_var2": 1,
                    "int_variable": 1,
                    "integer": 1,
                    "integer_var": 1,
                    "integer_var9": 2,
                    "integer_variable": 1,
                    "loop_pointer": 1,
                    "operation": 1,
                    "status": 2,
                    "temp_var3": 1,
                    "tmp_var_5": 1
                },
                "lVar12": {
                    "buffer_end": 1
                },
                "lVar14": {
                    "long_var1": 1
                },
                "lVar15": {
                    "long_var2": 1
                },
                "lVar17": {
                    "buffer_length": 1,
                    "count": 1,
                    "entry_length": 1,
                    "l_var17": 1,
                    "length": 1,
                    "long": 1,
                    "long_var": 2,
                    "long_var17": 2,
                    "long_var3": 2,
                    "long_variable": 3,
                    "loop_variable": 1,
                    "module_file_size": 1,
                    "temp_long": 1,
                    "temp_var": 1,
                    "tmp_var_11": 1
                },
                "lVar18": {
                    "counter": 1,
                    "current_char": 1,
                    "file_index": 1,
                    "flag": 1,
                    "index": 6,
                    "l_var18": 1,
                    "long": 1,
                    "long_var": 2,
                    "long_var18": 2,
                    "long_var4": 1,
                    "long_variable": 3,
                    "loop_var": 1,
                    "loop_var2": 1,
                    "loop_variable": 1,
                    "match_index": 1,
                    "temp_long_2": 1,
                    "temp_variable": 1,
                    "tmp_var_33": 1
                },
                "lVar21": {
                    "buffer_index": 2,
                    "buffer_offset": 1,
                    "current_length": 1,
                    "file_index": 1,
                    "l1": 1,
                    "l_var21": 1,
                    "long": 1,
                    "long_var": 2,
                    "long_var21": 2,
                    "long_var5": 1,
                    "long_variable": 3,
                    "new_value": 1,
                    "shift_offset": 1,
                    "temp_long_3": 1,
                    "temp_var": 1,
                    "temp_variable8": 1,
                    "tmp_var_13": 1
                },
                "lVar22": {
                    "l2": 1
                },
                "lVar31": {
                    "bytes_written": 1,
                    "copy_offset": 1,
                    "data_length": 1,
                    "double_loop_variable": 1,
                    "file_size": 1,
                    "l_var31": 1,
                    "long": 1,
                    "long_var": 2,
                    "long_var31": 2,
                    "long_var6": 1,
                    "long_variable": 3,
                    "temp_long_4": 1,
                    "temp_var": 1,
                    "temp_variable12": 1,
                    "tmp_var_32": 1
                },
                "lVar5": {
                    "temp_var1": 1
                },
                "local_678": {
                    "archive_script_lines": 1,
                    "archive_stack_buffer": 1,
                    "array_of_201_char_pointers": 1,
                    "char_pointer_array": 1,
                    "file_buffers": 1,
                    "file_names": 1,
                    "file_paths_stack": 1,
                    "filename_array": 2,
                    "filename_buffer": 1,
                    "local_array_of_char_pointer": 1,
                    "local_array_pointer_char": 1,
                    "local_char_pointer_var678": 1,
                    "local_character_array": 1,
                    "local_character_array_pointer": 1,
                    "local_string_array": 1,
                    "path_array": 1,
                    "string_array": 1
                },
                "local_740": {
                    "archive_script_buffer": 1,
                    "buffer": 1,
                    "char_array": 1,
                    "error_message": 1,
                    "error_string": 1,
                    "extracted_buffer": 1,
                    "file_path": 1,
                    "filename_buffer": 1,
                    "local_array": 1,
                    "local_array_char": 1,
                    "local_array_of_char": 1,
                    "local_buffer": 1,
                    "local_char_array": 1,
                    "local_char_var740": 1,
                    "local_character_array": 1,
                    "local_character_array740": 1,
                    "output_string_buffer": 1,
                    "temp_buffer": 2
                },
                "local_7d0": {
                    "file_info": 1,
                    "file_stat": 4,
                    "file_stat_struct2": 1,
                    "file_status": 1,
                    "local_stat": 5,
                    "local_stat_struct_variable": 1,
                    "local_stat_var7d0": 1,
                    "stat_data": 1,
                    "stat_structure": 1,
                    "stat_variable": 1,
                    "temp_stat": 1
                },
                "local_7f8": {
                    "buffer_pointer_temp": 1,
                    "byte_pointer": 1,
                    "comparison_data_ptr": 1,
                    "current_archived_file_name": 1,
                    "current_output_file_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_buffer": 1,
                    "local_byte_pointer": 3,
                    "local_pointer_to_byte": 3,
                    "local_variable_2": 1,
                    "localp_byte_var7f8": 1,
                    "match_ptr": 1,
                    "matching_byte": 1,
                    "pointer_to_bytes_5": 1,
                    "ptr": 1,
                    "temp_buffer2": 1
                },
                "local_7fc": {
                    "current_archive_index": 1,
                    "current_output_file_index": 1,
                    "index": 1,
                    "local_uint": 3,
                    "local_uint_var7fc": 1,
                    "local_uint_variable": 1,
                    "local_unsigned": 1,
                    "local_unsigned_var7fc": 1,
                    "local_variable_1": 1,
                    "loop_counter2": 1,
                    "match_index": 1,
                    "matching_index": 1,
                    "module_index": 1,
                    "size_variable_temp": 1,
                    "temp_uint_2": 1,
                    "temp_var5": 1,
                    "uint_variable": 1,
                    "value_index": 1
                },
                "local_800": {
                    "buffer_count": 1,
                    "count": 1,
                    "file_count": 2,
                    "int_variable": 1,
                    "local_array_length": 1,
                    "local_count": 1,
                    "local_int": 2,
                    "local_int_var800": 1,
                    "local_integer": 1,
                    "local_integer_var800": 1,
                    "local_integer_variable": 1,
                    "loop_counter": 1,
                    "loop_variable_temp": 1,
                    "num_archives": 1,
                    "num_files": 2,
                    "output_files_stack_size": 1,
                    "process_index": 1,
                    "stack_size": 1,
                    "temp_int_3": 1
                },
                "local_810": {
                    "archive_script_buffer_ptr": 1,
                    "archived_file_names": 1,
                    "array_of_char_pointers": 1,
                    "buffer_stack": 1,
                    "buffer_stack_top_ptr": 1,
                    "char_pointer_pointer": 1,
                    "copy_buffer": 1,
                    "file_buffer_pointers": 1,
                    "file_list_temp": 1,
                    "file_paths": 2,
                    "local_buffer3": 1,
                    "local_char_pointer_pointer": 1,
                    "local_double_pointer_to_character": 1,
                    "local_pointer_array": 1,
                    "local_pointer_pointer_char": 1,
                    "local_pointer_to_pointer_of_char": 1,
                    "local_pointer_to_pointer_to_character": 1,
                    "localpp_char_var810": 1,
                    "module_array": 1,
                    "module_files": 1,
                    "new_buffer": 1,
                    "old_archive_stack_ptr": 1,
                    "output_files_stack": 1,
                    "string_array": 1,
                    "temp_pointer6": 1
                },
                "local_818": {
                    "archive_name_length": 1,
                    "archive_script_buffer_size": 1,
                    "buffer_size": 9,
                    "file_buffer_size": 1,
                    "local_buffer_size": 1,
                    "local_long": 3,
                    "local_long_var818": 2,
                    "local_long_variable": 1,
                    "local_size": 1,
                    "long_variable": 1,
                    "string_length": 1,
                    "temp_long_5": 1
                },
                "local_820": {
                    "archive_name_end": 1,
                    "archive_script_buffer": 1,
                    "buffer": 2,
                    "buffer_pointer": 1,
                    "buffer_start": 3,
                    "char_pointer": 1,
                    "file_buffer_start": 1,
                    "local_buffer2": 1,
                    "local_buffer_pointer_2": 1,
                    "local_char_pointer": 1,
                    "local_pointer_char": 1,
                    "local_pointer_char_var820": 1,
                    "local_pointer_to_char": 1,
                    "local_pointer_to_character": 2,
                    "old_buffer": 1,
                    "old_extracted_filename_ptr": 1,
                    "original_buffer": 1,
                    "saved_buffer": 1,
                    "source_string": 1,
                    "temp_char_pointer_4": 1,
                    "temp_pointer5": 1
                },
                "local_828": {
                    "archive_name": 1,
                    "buffer": 1,
                    "buffer_ptr": 3,
                    "char_pointer": 1,
                    "current_buffer": 1,
                    "current_byte": 1,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_file": 1,
                    "current_file_name": 1,
                    "current_string": 1,
                    "extracted_filename_ptr": 1,
                    "local_buffer": 1,
                    "local_buffer_pointer_1": 1,
                    "local_char_pointer": 1,
                    "local_pointer_char": 1,
                    "local_pointer_char_var828": 1,
                    "local_pointer_to_char": 1,
                    "local_pointer_to_character": 2,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "temp_char_pointer_5": 1
                },
                "pFVar4": {
                    "current_archive_file": 1,
                    "current_file": 3,
                    "current_file_ptr": 1,
                    "current_output_file": 1,
                    "file_pointer": 8,
                    "file_ptr": 2,
                    "file_stream": 1,
                    "input_file": 1,
                    "p_file": 1,
                    "p_file_var4": 1,
                    "pointer_to_file": 3,
                    "pointer_to_p_f_var4": 1
                },
                "pbVar30": {
                    "index_swap": 1,
                    "input_char": 1,
                    "transition_byte": 1
                },
                "pbVar32": {
                    "archive_char_ptr": 1,
                    "buffer": 1,
                    "buffer_ptr": 2,
                    "buffer_start": 1,
                    "buffer_start_ptr": 1,
                    "byte_pointer": 4,
                    "byte_pointer2": 1,
                    "dest_buffer": 1,
                    "file_buffer": 1,
                    "input_buffer": 1,
                    "original_data_ptr": 1,
                    "output_buffer": 1,
                    "p_byte_var32": 1,
                    "pb_var32": 1,
                    "pointer_to_byte": 3,
                    "pointer_to_bytes_2": 1,
                    "ptr_buffer1": 1,
                    "starting_addr": 1,
                    "tmp_var_23": 1
                },
                "pbVar33": {
                    "best_match_ptr": 1,
                    "byte_pointer": 4,
                    "byte_pointer3": 1,
                    "compare_data_ptr": 1,
                    "current_byte": 1,
                    "extracted_byte": 1,
                    "input_buffer": 1,
                    "match_ptr": 1,
                    "matching_value": 1,
                    "matching_value_char_ptr": 1,
                    "p_byte_var33": 1,
                    "pb_var33": 1,
                    "pointer_to_byte": 3,
                    "pointer_to_bytes_3": 1,
                    "ptr": 1,
                    "source_buffer": 1,
                    "temp_buffer": 1,
                    "tmp_var_24": 1
                },
                "pbVar35": {
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "byte_pointer": 4,
                    "byte_pointer4": 1,
                    "compare_data_ptr": 1,
                    "current_archive_char_ptr": 1,
                    "current_buffer": 1,
                    "current_extracted_byte": 1,
                    "current_position": 1,
                    "file_buffer_current": 1,
                    "file_offset_end_ptr": 1,
                    "next_byte": 1,
                    "output_buffer": 1,
                    "p_byte_var35": 1,
                    "pointer_to_byte": 3,
                    "pointer_to_bytes_4": 1,
                    "pointer_to_pb_var35": 1,
                    "ptr": 1,
                    "ptr_buffer2": 1,
                    "tmp_var_27": 1
                },
                "pbVar36": {
                    "p_byte_var36": 1,
                    "pointer_to_byte": 1
                },
                "pbVar37": {
                    "pointer_to_byte": 1
                },
                "pbVar39": {
                    "bool_buffer": 1,
                    "byte": 1,
                    "byte_pointer": 1,
                    "byte_var": 1,
                    "byte_var2": 1,
                    "byte_variable": 1,
                    "flag": 1,
                    "match_found": 1,
                    "pointer_to_byte": 2,
                    "temp_byte": 1
                },
                "pbVar7": {
                    "buffer_ptr": 1,
                    "byte_pointer": 4,
                    "byte_ptr": 1,
                    "byte_var": 1,
                    "data_ptr": 1,
                    "input_buffer_ptr": 1,
                    "output_buffer": 1,
                    "p_byte_var7": 1,
                    "pointer_to_byte": 4,
                    "pointer_to_bytes": 1,
                    "pointer_to_pb_var7": 1,
                    "ptr_byte": 1,
                    "temp_buffer": 1,
                    "temp_byte": 1,
                    "temp_pointer": 1
                },
                "pcVar10": {
                    "char_pointer": 1,
                    "char_var": 1,
                    "char_var2": 1,
                    "character_pointer": 2,
                    "error_message": 5,
                    "pc_var10": 1,
                    "pointer_char": 1,
                    "pointer_char_var10": 1,
                    "pointer_to_char": 1,
                    "pointer_to_character": 2,
                    "string_var1": 1,
                    "string_variable": 1,
                    "temp_char_pointer": 1,
                    "tmp_var_3": 1
                },
                "pcVar15": {
                    "char_pointer": 2,
                    "char_var3": 1,
                    "character_pointer": 1,
                    "format_string": 2,
                    "message": 1,
                    "module_file": 2,
                    "pc_var15": 1,
                    "pointer_char": 1,
                    "pointer_char_var15": 1,
                    "pointer_to_char": 1,
                    "pointer_to_character": 2,
                    "str_var": 1,
                    "string_var2": 1,
                    "temp_char_pointer_2": 1,
                    "tmp_var_9": 1
                },
                "pcVar16": {
                    "char_pointer": 2,
                    "char_var4": 1,
                    "character_pointer": 1,
                    "destination_string": 1,
                    "new_module_file": 2,
                    "output_string": 1,
                    "pc_var16": 1,
                    "pointer_char": 1,
                    "pointer_char_var16": 1,
                    "pointer_to_char": 1,
                    "pointer_to_character": 2,
                    "str_var": 1,
                    "string_var3": 1,
                    "target_file": 1,
                    "temp_char_pointer_3": 1,
                    "tmp_var_10": 1
                },
                "pcVar40": {
                    "pc_var40": 1
                },
                "pcVar41": {
                    "pc_var41": 1
                },
                "piVar34": {
                    "count_pointer": 1,
                    "file_flags": 1,
                    "file_index": 1,
                    "file_pointer": 1,
                    "index_pointer": 1,
                    "int_pointer": 4,
                    "int_ptr": 1,
                    "int_var": 2,
                    "integer_pointer": 1,
                    "integer_pointer2": 1,
                    "p_int_var34": 1,
                    "pointer_to_int": 1,
                    "pointer_to_integer": 3,
                    "pointer_to_pi_var34": 1,
                    "ptr_int": 1,
                    "tmp_var_25": 1
                },
                "piVar9": {
                    "ptr_result": 1
                },
                "plVar12": {
                    "buffer_pointer": 1,
                    "current_archive": 1,
                    "current_buffer": 1,
                    "file_data_ptr": 1,
                    "file_pointer": 1,
                    "int_ptr": 1,
                    "long_pointer": 4,
                    "long_ptr2": 1,
                    "long_var2": 1,
                    "new_data_ptr": 1,
                    "p_long_var12": 1,
                    "pointer_long": 1,
                    "pointer_to_long": 2,
                    "pointer_to_pl_var12": 1,
                    "tmp_var_6": 1
                },
                "plVar21": {
                    "long_ptr3": 1
                },
                "plVar25": {
                    "long_ptr4": 1
                },
                "plVar4": {
                    "ptr3": 1
                },
                "plVar5": {
                    "buffer": 1,
                    "buffer_location": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "buffer_stack_entry_ptr": 1,
                    "current_buffer": 2,
                    "current_entry": 1,
                    "current_row": 1,
                    "int_ptr": 1,
                    "long_pointer": 3,
                    "long_ptr": 1,
                    "long_var": 2,
                    "p_long_var5": 1,
                    "pointer_to_lengths_2": 1,
                    "pointer_to_long": 4,
                    "pointer_to_pl_var5": 1
                },
                "plVar6": {
                    "ptr4": 1
                },
                "plVar7": {
                    "ptr5": 1
                },
                "ppFVar3": {
                    "archive_file": 1,
                    "archive_files": 1,
                    "current_archive": 1,
                    "current_input_file": 1,
                    "double_file_pointer": 1,
                    "double_pointer_pointer": 2,
                    "double_pointer_to_file": 1,
                    "double_pointer_to_file_stream": 1,
                    "double_pointer_to_pointer_of_file": 1,
                    "fd_array": 1,
                    "file_pointer": 1,
                    "file_pointer_ptr": 1,
                    "file_ptr_ptr": 1,
                    "input_file": 1,
                    "input_file_ptr": 2,
                    "output_file_ptr": 1,
                    "pointer_pointer_array": 1,
                    "pointer_to_files": 1,
                    "pointer_to_pointer_of_file": 1,
                    "pointer_to_pointer_to_file": 1,
                    "pointer_to_pp_f_var3": 1,
                    "pp_file": 1,
                    "pp_file_var3": 1
                },
                "ppcVar27": {
                    "archive_files_ptr": 1,
                    "archive_files_stack": 1,
                    "char_pointer_pointer": 2,
                    "current_archive_ptr": 1,
                    "current_file_ptr": 1,
                    "double_char_pointer": 1,
                    "double_pointer_to_char": 1,
                    "double_pointer_to_character": 1,
                    "file_entry": 1,
                    "module_array": 1,
                    "output_file_path": 1,
                    "pointer_pointer_char": 1,
                    "pointer_to_pointer_of_char": 1,
                    "pointer_to_pointer_to_character": 1,
                    "pointer_to_ppc_var27": 1,
                    "pp_char_var27": 1,
                    "ptr_temp": 1,
                    "temp_pointer4": 1,
                    "tmp_var_19": 1
                },
                "ppcVar28": {
                    "string_ptr_ptr": 1
                },
                "ppcVar29": {
                    "action_stack": 1,
                    "archive_files": 1,
                    "archive_script_stack": 1,
                    "archive_stack_ptr": 1,
                    "archived_files": 1,
                    "archives": 1,
                    "buffer_stack_entry_ptr": 1,
                    "char_pointer_pointer": 2,
                    "current_file_path": 1,
                    "double_char_pointer2": 1,
                    "double_pointer_to_char": 1,
                    "double_pointer_to_character": 1,
                    "file_buffer_ptr": 1,
                    "file_list": 1,
                    "file_paths": 1,
                    "file_stack": 2,
                    "pointer_to_ppc_var29": 1,
                    "pp_char_var29": 1,
                    "stack_pointer": 1,
                    "string_ptr_ptr2": 1,
                    "tmp_var_31": 1
                },
                "ppcVar38": {
                    "archive_script_symbol": 1,
                    "current_action": 1,
                    "double_char_pointer3": 1,
                    "extract_dir_ptr": 1,
                    "file_pointer": 1,
                    "input_file_path": 1,
                    "module_file": 1,
                    "new_archive_stack_ptr": 1,
                    "path_array_ptr": 1,
                    "pointer_to_pointer_of_char": 1,
                    "pointer_to_pointer_to_character": 1,
                    "pp_char_var38": 1,
                    "temp_archived_file_names": 1,
                    "temp_var": 1
                },
                "pplVar1": {
                    "archive_buffer": 1,
                    "buffer": 1,
                    "buffer_stack": 1,
                    "buffer_stack_ptr": 2,
                    "double_pointer": 3,
                    "double_pointer_to_archive": 1,
                    "double_pointer_to_file_cache": 1,
                    "double_pointer_to_long": 1,
                    "file_buffers": 1,
                    "pointer_array": 1,
                    "pointer_to_lengths": 1,
                    "pointer_to_long_pointer": 1,
                    "pointer_to_pointer_of_long": 1,
                    "pointer_to_ppl_var1": 1
                },
                "pppVar1": {
                    "p_double_pointer_var1": 1
                },
                "puVar2": {
                    "ptr1": 1
                },
                "puVar22": {
                    "buffer_location": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 2,
                    "p_void_var22": 1,
                    "pointer_to_undefined8": 1,
                    "pointer_to_unsigned_var22": 1,
                    "pointer_to_unsigned_variable": 1,
                    "pointer_undefined8": 1,
                    "pu_var22": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "undefined8_pointer": 2,
                    "unsigned_long_pointer": 1,
                    "void_ptr_ptr": 1
                },
                "puVar23": {
                    "buffer_index_pointer": 1,
                    "entry_ptr": 1,
                    "new_buffer_ptr": 1,
                    "p_void_var23": 1,
                    "pointer_to_undefined8": 1,
                    "pointer_to_unsigned_var23": 1,
                    "pointer_to_unsigned_variable": 1,
                    "pointer_undefined8": 1,
                    "pu_var23": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_2": 1,
                    "undefined8_pointer": 1,
                    "undefined8_pointer2": 1,
                    "unsigned_long_pointer": 1,
                    "void_ptr_ptr": 1
                },
                "puVar3": {
                    "ptr2": 1
                },
                "pvVar14": {
                    "allocated_memory": 1,
                    "new_buffer": 1,
                    "p_void_var14": 1,
                    "pointer": 1,
                    "pointer_to_pv_var14": 1,
                    "pointer_to_void": 1,
                    "pointer_var": 1,
                    "pointer_variable": 1,
                    "ptr_value": 1,
                    "realloc_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "tmp_var_8": 1,
                    "void_pointer": 6,
                    "void_ptr": 2
                },
                "sVar10": {
                    "size_var": 1
                },
                "sVar13": {
                    "bytes_read": 1,
                    "bytes_read_size": 1,
                    "num_bytes_read": 1,
                    "read_length": 1,
                    "read_result": 1,
                    "s_var13": 1,
                    "size": 1,
                    "size_t": 1,
                    "size_t_variable": 2,
                    "size_var": 4,
                    "size_var13": 2,
                    "size_variable": 2,
                    "temp_var3": 1,
                    "tmp_var_7": 1
                },
                "size_t": {
                    "unsigned_integer_type": 1
                },
                "stat": {
                    "file_stat_struct": 1
                },
                "uDVar39": {
                    "u_d_var39": 1
                },
                "uVar105": {
                    "temp_var22": 1
                },
                "uVar108": {
                    "temp_var23": 1
                },
                "uVar11": {
                    "archive_file_path": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "filename": 2,
                    "module_file_name": 1,
                    "string_value": 1,
                    "string_variable_3": 1,
                    "temp_filename": 1,
                    "temp_variable5": 1,
                    "tmp_var_4": 1,
                    "u_var11": 1,
                    "undefined8_var2": 1,
                    "undefined8_variable": 2,
                    "undefined_var": 1,
                    "undefined_var11": 1,
                    "unsigned_long": 1,
                    "unsigned_var": 1,
                    "unsigned_var11": 1
                },
                "uVar115": {
                    "temp_var24": 1
                },
                "uVar16": {
                    "uint_var1": 1
                },
                "uVar19": {
                    "current_value_index": 1,
                    "entry_index": 1,
                    "file_index": 2,
                    "index": 1,
                    "index_value": 1,
                    "loop_variable_3": 1,
                    "match_index": 1,
                    "temp_var5": 1,
                    "temp_variable6": 1,
                    "tmp_var_15": 1,
                    "u_var1": 1,
                    "u_var19": 1,
                    "ulong": 1,
                    "ulong_var": 2,
                    "ulong_var19": 1,
                    "ulong_variable": 2,
                    "unsigned_var": 1,
                    "unsigned_variable": 1,
                    "value_index": 2
                },
                "uVar20": {
                    "archived_value_index": 1,
                    "case_index": 1,
                    "current_value": 1,
                    "error_index": 1,
                    "file_type": 1,
                    "loop_variable_4": 1,
                    "matching_index": 1,
                    "temp_var6": 1,
                    "temp_variable7": 1,
                    "tmp_var_16": 1,
                    "u_var2": 1,
                    "u_var20": 1,
                    "uint": 1,
                    "uint_var": 2,
                    "uint_var20": 1,
                    "uint_variable": 2,
                    "unsigned_var": 1,
                    "unsigned_variable": 1,
                    "value": 1,
                    "value_index": 1
                },
                "uVar21": {
                    "uint_var2": 1
                },
                "uVar22": {
                    "uint_var3": 1
                },
                "uVar23": {
                    "uint_var4": 1
                },
                "uVar24": {
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "bytes_read": 3,
                    "bytes_written": 1,
                    "loop_variable_5": 1,
                    "num_bytes": 1,
                    "read_size": 1,
                    "temp_uint": 1,
                    "temp_var7": 1,
                    "u3": 1,
                    "u_var24": 1,
                    "uint": 1,
                    "uint_var": 1,
                    "uint_var2": 1,
                    "uint_var24": 1,
                    "uint_var5": 1,
                    "uint_variable": 2,
                    "unsigned_var": 1,
                    "unsigned_var24": 1,
                    "unsigned_variable": 1,
                    "value": 1
                },
                "uVar25": {
                    "uint_var6": 1
                },
                "uVar26": {
                    "archived_file_size": 1,
                    "bytes_to_read": 1,
                    "current_index": 1,
                    "file_size": 2,
                    "loop_variable_6": 1,
                    "match_index": 1,
                    "matching_index": 1,
                    "num_bytes_remaining": 1,
                    "temp_ulong": 1,
                    "temp_var8": 1,
                    "temp_variable9": 1,
                    "tmp_var_18": 1,
                    "u4": 1,
                    "u_var26": 1,
                    "uint_var7": 1,
                    "ulong": 1,
                    "ulong_var": 1,
                    "ulong_var2": 1,
                    "ulong_var26": 1,
                    "ulong_variable": 2,
                    "unsigned_var": 1,
                    "unsigned_var26": 1,
                    "unsigned_variable": 1,
                    "value": 1
                },
                "uVar29": {
                    "u1": 1
                },
                "uVar33": {
                    "u2": 1
                },
                "uVar36": {
                    "buffer_index": 1,
                    "file_offset": 1,
                    "loop_variable_7": 1,
                    "source_value": 1,
                    "temp_var9": 1,
                    "tmp_var_28": 1,
                    "u_var36": 1,
                    "uint_var36": 1,
                    "uint_var8": 1,
                    "value": 1
                },
                "uVar40": {
                    "temp_var10": 1,
                    "temp_var3": 1
                },
                "uVar41": {
                    "temp_var11": 1,
                    "temp_var4": 1
                },
                "uVar54": {
                    "temp_var12": 1
                },
                "uVar57": {
                    "temp_var13": 1
                },
                "uVar6": {
                    "buffer_size": 2,
                    "current_file_name": 1,
                    "format_string": 1,
                    "function_ptr": 1,
                    "string_variable_2": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_variable4": 1,
                    "tmp_var_1": 1,
                    "u_var6": 1,
                    "undefined8": 1,
                    "undefined8_var": 1,
                    "undefined8_variable": 2,
                    "undefined_var": 1,
                    "undefined_var6": 1,
                    "unsigned_long": 1,
                    "unsigned_var": 1,
                    "unsigned_var6": 1,
                    "unsigned_variable": 1,
                    "unused_var6": 1
                },
                "uVar65": {
                    "temp_var14": 1
                },
                "uVar68": {
                    "temp_var15": 1
                },
                "uVar75": {
                    "temp_var16": 1
                },
                "uVar78": {
                    "temp_var17": 1
                },
                "uVar85": {
                    "temp_var18": 1
                },
                "uVar88": {
                    "temp_var19": 1
                },
                "uVar95": {
                    "temp_var20": 1
                },
                "uVar98": {
                    "temp_var21": 1
                }
            },
            "called": [
                "unlink",
                "FUN_00105bc0",
                "fclose",
                "FUN_00103ddc",
                "filename_cmp",
                "stat",
                "bfd_openw",
                "FUN_001031a5",
                "FUN_0010300e",
                "dup",
                "FUN_00103df9",
                "printf",
                "FUN_001030ed",
                "fopen",
                "bfd_openr",
                "free",
                "bfd_cache_close",
                "FUN_00107740",
                "xstrdup",
                "getc",
                "fprintf",
                "FUN_0010315d",
                "FUN_001033d6",
                "FUN_001033b0",
                "fwrite",
                "ferror",
                "FUN_00103c60",
                "malloc",
                "fread",
                "clearerr",
                "FUN_0010312d",
                "__errno_location",
                "FUN_001031cf",
                "FUN_001032a8",
                "realloc",
                "dcgettext",
                "bfd_set_format",
                "bfd_close",
                "FUN_00105300",
                "FUN_00103ba8"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid improved_extract_and_convert_archived_files_00103e95(void)\n\n{\n  long **double_pointer;\n  char character;\n  FILE **input_file_ptr;\n  FILE *file_pointer;\n  long *pointer_to_long;\n  undefined8 undefined8_variable;\n  byte *byte_pointer;\n  int integer_variable;\n  char *error_message;\n  undefined8 undefined8_variable;\n  int status;\n  long *long_pointer;\n  unsigned_integer_type size_var;\n  void *void_pointer;\n  char *module_file;\n  char *char_pointer;\n  long long_variable;\n  long index;\n  ulong ulong_variable;\n  uint uint_variable;\n  long long_variable;\n  undefined8 *undefined8_pointer;\n  undefined8 *entry_ptr;\n  uint bytes_read;\n  int integer_var25;\n  ulong ulong_variable;\n  char **char_pointer_pointer;\n  bool bool_var;\n  char **char_pointer_pointer;\n  byte byte_var;\n  long long_variable;\n  byte *byte_pointer;\n  byte *byte_pointer;\n  int *int_pointer;\n  byte *byte_pointer;\n  uint uint_var36;\n  int case_value;\n  char **module_file;\n  byte flag;\n  undefined undefined_array_variable_40bytes [16];\n  undefined temp_variable14 [16];\n  char *buffer_ptr;\n  char *buffer_start;\n  long buffer_size;\n  char **file_paths;\n  int file_count;\n  uint local_uint;\n  byte *local_byte_pointer;\n  file_stat_struct local_stat;\n  char temp_buffer [200];\n  char *filename_array [201];\n  \n  flag = 0;\n  index = 0;\n  DAT_0010d550 = -2;\n  char_pointer_pointer = filename_array;\n  file_count = 0;\n  buffer_ptr = temp_buffer;\n  buffer_size = 200;\n  buffer_start = buffer_ptr;\n  file_paths = char_pointer_pointer;\nLAB_00103ee9:\n  *buffer_ptr = (char)index;\n  if (buffer_start + buffer_size + -1 <= buffer_ptr) {\n    long_variable = (long)buffer_ptr - (long)buffer_start;\n    long_variable = long_variable + 1;\n    if (buffer_size < 10000) {\n      long_variable = buffer_size * 2;\n      buffer_size = 10000;\n      if (long_variable < 0x2711) {\n        buffer_size = long_variable;\n      }\n      error_message = (char *)malloc(buffer_size * 9 + 7);\n      if (error_message != (char *)0x0) {\n        long_variable = long_variable * 8;\n        module_file = buffer_start;\n        char_pointer = error_message;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *char_pointer = *module_file;\n          module_file = module_file + (ulong)flag * -2 + 1;\n          char_pointer = char_pointer + (ulong)flag * -2 + 1;\n        }\n        module_file = (char **)(error_message + buffer_size);\n        char_pointer_pointer = module_file;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *(undefined *)char_pointer_pointer = *(undefined *)file_paths;\n          file_paths = (char **)((long)file_paths + (ulong)flag * -2 + 1);\n          char_pointer_pointer = (char **)((long)char_pointer_pointer + (ulong)flag * -2 + 1);\n        }\n        if (buffer_start != temp_buffer) {\n          free(buffer_start);\n        }\n        buffer_ptr = error_message + long_variable;\n        char_pointer_pointer = module_file + long_variable;\n        buffer_start = error_message;\n        file_paths = module_file;\n        if (error_message + buffer_size + -1 <= buffer_ptr) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_syntax_error_in_archive_script_001031a5();\nLAB_0010524c:\n    error_message = buffer_start;\n    if (buffer_start == temp_buffer) {\n      return;\n    }\nLAB_00105265:\n    free(error_message);\n    return;\n  }\nLAB_00103fd8:\n  case_value = (int)index;\n  if (case_value == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[case_value];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          undefined8_pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          undefined8_variable = create_and_initialize_buffer_001033d6(DAT_0010d590);\n          *undefined8_pointer = undefined8_variable;\n        }\n        extract_data_from_binary_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      byte_pointer = DAT_0010d5b0;\n      byte_pointer = DAT_0010d5b0;\n      uint_variable = DAT_0010d5d0;\nLAB_001040d4:\n      ulong_variable = (ulong)uint_variable;\n      ulong_variable = (ulong)local_uint;\n      bool_var = false;\n      do {\n        byte_var = (&DAT_0010ab00)[*byte_pointer];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong_variable * 2) != 0) {\n          bool_var = true;\n          ulong_variable = ulong_variable & 0xffffffff;\n          local_byte_pointer = byte_pointer;\n        }\n        while( true ) {\n          integer_variable = (int)ulong_variable;\n          index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integer_variable * 2) + (uint)byte_var);\n          if (integer_variable == *(short *)(&DAT_0010a440 + index * 2)) break;\n          ulong_variable = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer_variable * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integer_variable * 2)) {\n            byte_var = (&DAT_0010a7c0)[(int)(uint)byte_var];\n          }\n        }\n        byte_pointer = byte_pointer + 1;\n        ulong_variable = (ulong)*(short *)(&DAT_0010a240 + index * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong_variable * 2) != 0xc2);\n      local_uint = (uint)ulong_variable;\n      byte_pointer = byte_pointer;\n      if (bool_var) {\n        DAT_0010d5b8 = local_byte_pointer;\n        DAT_0010d5c0 = local_uint;\n      }\nLAB_0010419f:\n      integer_variable = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong_variable * 2);\n      if (integer_variable == 0) {\n        integer_variable = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        byte_pointer = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)byte_pointer - (int)byte_pointer;\n      DAT_0010d588 = *byte_pointer;\n      DAT_0010d5b0 = byte_pointer;\n      DAT_0010d5c8 = byte_pointer;\n      *byte_pointer = 0;\nLAB_001041f0:\n      byte_pointer = DAT_0010d5c8;\n      index = DAT_0010d5a0;\n      switch(integer_variable) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_error_message_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      index = (long)case_value;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        case_value = 2;\n        if (DAT_0010d550 < 0x114) {\n          case_value = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    case_value = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint_variable = character + case_value;\n    if ((0x22 < uint_variable) || (case_value != (char)(&DAT_0010a0a0)[(int)uint_variable])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)uint_variable];\n    index = (long)character;\n    if (character < '\\x01') {\n      case_value = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    file_count = file_count + -1 + (uint)(file_count == 0);\n    char_pointer_pointer = char_pointer_pointer + 1;\n    *char_pointer_pointer = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  case_value = (int)(char)(&DAT_0010a020)[(int)index];\n  if ((&DAT_0010a020)[(int)index] == '\\0') {\n    if (file_count == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_syntax_error_in_archive_script_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[index] != -0xe) &&\n             (uint_variable = (int)(char)(&DAT_0010a200)[index] + 1, uint_variable < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint_variable] == '\\x01')) &&\n           (index = (long)(char)(&DAT_0010a060)[(int)uint_variable],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint_variable])) goto LAB_00105227;\n        if (buffer_start == buffer_ptr) goto LAB_0010524c;\n        buffer_ptr = buffer_ptr + -1;\n        char_pointer_pointer = char_pointer_pointer + -1;\n        index = (long)*buffer_ptr;\n      } while( true );\n    }\n    if (file_count != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined8_variable = DAT_0010d660;\n  char_pointer_pointer = DAT_0010d558;\n  character = (&DAT_00109fe0)[case_value];\n  module_file = (char **)char_pointer_pointer[1 - character];\n  switch(case_value) {\n  case 2:\n  case 6:\n    print_ar_message_if_not_zero_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_syntax_error_in_archive_script_001031a5();\n    break;\n  case 0x17:\n    undefined8_pointer = (undefined8 *)*char_pointer_pointer;\n    if (DAT_0010d558 == (char **)0x0) {\n      error_message = \"%s: no open archive\\n\";\nLAB_00104b62:\n      error_message = (char *)dcgettext(0,error_message,5);\n      fprintf(_stderr,error_message,undefined8_variable);\n      check_and_exit_if_zero_flag_set_0010315d();\n    }\n    else {\n      for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n        for (entry_ptr = (undefined8 *)DAT_0010d558[0x1f]; entry_ptr != (undefined8 *)0x0;\n            entry_ptr = (undefined8 *)entry_ptr[0x1e]) {\n          integer_variable = filename_cmp(*entry_ptr);\n          if (integer_variable == 0) {\n            process_and_extract_archive_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*undefined8_pointer,0);\n        undefined8_variable = DAT_0010d660;\n        undefined8_variable = *undefined8_pointer;\n        error_message = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,error_message,undefined8_variable,undefined8_variable);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    undefined8_pointer = (undefined8 *)*char_pointer_pointer;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      error_message = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n      bool_var = false;\n      char_pointer_pointer = DAT_0010d558 + 0x1f;\n      for (error_message = DAT_0010d558[0x1f]; error_message != (char *)0x0;\n          error_message = *(char **)(error_message + 0xf0)) {\n        integer_variable = filename_cmp();\n        if (integer_variable == 0) {\n          module_file = (char *)bfd_openr(*undefined8_pointer,0);\n          undefined8_variable = DAT_0010d660;\n          if (module_file == (char *)0x0) {\n            undefined8_variable = *undefined8_pointer;\n            module_file = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,module_file,undefined8_variable,undefined8_variable);\n            check_and_exit_if_zero_flag_set_0010315d();\n          }\n          else {\n            *char_pointer_pointer = module_file;\n            bool_var = true;\n            *(undefined8 *)(module_file + 0xf0) = *(undefined8 *)(error_message + 0xf0);\n          }\n        }\n        else {\n          char_pointer_pointer = (char **)(error_message + 0xf0);\n        }\n      }\n      if (!bool_var) {\n        error_message = (char *)bfd_openr(*undefined8_pointer,0);\n        undefined8_variable = DAT_0010d660;\n        undefined8_variable = *undefined8_pointer;\n        module_file = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,module_file,undefined8_variable,undefined8_variable);\n        undefined8_variable = DAT_0010d660;\n        if (error_message == (char *)0x0) {\n          undefined8_variable = *undefined8_pointer;\n          error_message = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,error_message,undefined8_variable,undefined8_variable);\n          check_and_exit_if_zero_flag_set_0010315d();\n        }\n        else {\n          *char_pointer_pointer = error_message;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    undefined8_pointer = (undefined8 *)*char_pointer_pointer;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n      bool_var = false;\n      char_pointer_pointer = DAT_0010d558 + 0x1f;\n      for (entry_ptr = (undefined8 *)DAT_0010d558[0x1f]; undefined8_variable = DAT_0010d660,\n          entry_ptr != (undefined8 *)0x0; entry_ptr = (undefined8 *)entry_ptr[0x1e]) {\n        integer_variable = filename_cmp(*entry_ptr,*undefined8_pointer);\n        if (integer_variable == 0) {\n          bool_var = true;\n          *char_pointer_pointer = (char *)entry_ptr[0x1e];\n        }\n        else {\n          char_pointer_pointer = (char **)(entry_ptr + 0x1e);\n        }\n      }\n      if (!bool_var) {\n        undefined8_variable = *undefined8_pointer;\n        error_message = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,error_message,undefined8_variable,undefined8_variable);\n        check_and_exit_if_zero_flag_set_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    undefined8_pointer = (undefined8 *)*char_pointer_pointer;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n      error_message = (char *)bfd_openr(*undefined8_pointer,\"plugin\");\n      undefined8_variable = DAT_0010d660;\n      char_pointer_pointer = DAT_0010d558;\n      if (error_message == (char *)0x0) {\n        undefined8_variable = *undefined8_pointer;\n        error_message = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,error_message,undefined8_variable,undefined8_variable);\n        check_and_exit_if_zero_flag_set_0010315d();\n      }\n      else {\n        *(char **)(error_message + 0xf0) = DAT_0010d558[0x1f];\n        char_pointer_pointer[0x1f] = error_message;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    error_message = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    module_file = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(module_file,error_message);\n    for (error_message = DAT_0010d558[0x1f]; error_message != (char *)0x0; error_message = *(char **)(error_message + 0xf0))\n    {\n      print_formatted_file_info_00103ddc(error_message,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(char_pointer_pointer);\n    error_message = DAT_0010d570;\n    integer_variable = file_stat_struct(DAT_0010d570,&local_stat);\n    if ((integer_variable != 0) && (DAT_0010d558 = (char **)bfd_openw(error_message,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_delete_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    extract_archive_and_modify_flags_00103c60(*char_pointer_pointer,0);\n    break;\n  case 0x1f:\n    extract_archive_and_modify_flags_00103c60(*char_pointer_pointer,1);\n    break;\n  case 0x20:\n    error_message = *char_pointer_pointer;\n    if (DAT_0010d558 == (char **)0x0) {\n      error_message = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    index = improved_extract_and_convert_archived_files_00103e95_00105300(char_pointer_pointer[-1],0);\n    if (index != 0) {\n      process_entries_in_archive_001032a8(index,copy_and_swap_data_0010312d,error_message);\n    }\n    break;\n  case 0x21:\n    error_message = *char_pointer_pointer;\n    module_file = char_pointer_pointer[-1];\n    undefined8_variable = improved_extract_and_convert_archived_files_00103e95_00105300(char_pointer_pointer[-2],0);\n    if (error_message == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(error_message,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        process_entries_in_archive_001032a8(undefined8_variable,print_formatted_file_info_00103ddc,module_file);\n        bfd_close(undefined8_variable);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      char_pointer = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,char_pointer,error_message);\n    }\n    process_entries_in_archive_001032a8(undefined8_variable,print_formatted_file_info_00103ddc,module_file);\n    bfd_close(undefined8_variable);\n    break;\n  case 0x22:\n    module_file = (char **)*char_pointer_pointer;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    module_file = (char **)0x0;\n    break;\n  case 0x24:\n    module_file = (char **)char_pointer_pointer[-1];\n    break;\n  case 0x26:\n    module_file = (char **)malloc(0x10);\n    error_message = char_pointer_pointer[-2];\n    *module_file = *char_pointer_pointer;\n    module_file[1] = error_message;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  index = (long)character;\n  buffer_ptr = buffer_ptr + -index;\n  char_pointer_pointer[1 - index] = (char *)module_file;\n  char_pointer_pointer = char_pointer_pointer + (1 - index);\n  uint_variable = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[case_value] + -0x18] + (int)*buffer_ptr;\n  if ((uint_variable < 0x23) && (*buffer_ptr == (&DAT_0010a0a0)[(int)uint_variable])) {\n    index = (long)(char)(&DAT_0010a060)[(int)uint_variable];\n  }\n  else {\n    index = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[case_value] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer_variable = ((int)byte_pointer - (int)DAT_0010d5c8) + -1;\n  *byte_pointer = DAT_0010d588;\n  double_pointer = (long **)(DAT_0010d5a8 + index * 8);\n  input_file_ptr = (FILE **)*double_pointer;\n  if (*(int *)(input_file_ptr + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)input_file_ptr + 0x1c);\n    *(undefined4 *)(input_file_ptr + 7) = 1;\n    *input_file_ptr = DAT_0010d590;\n  }\n  byte_pointer = DAT_0010d5b0;\n  file_pointer = input_file_ptr[1];\n  undefined_array_variable_40bytes._8_8_ = file_pointer;\n  undefined_array_variable_40bytes._0_8_ = input_file_ptr;\n  if ((byte *)((long)&file_pointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&file_pointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefined_array_variable_40bytes = print_error_message_and_exit_001033b0();\n    }\n    if (*(int *)(undefined_array_variable_40bytes._0_8_ + 0x34) != 0) {\n      uint_variable = (int)((long)byte_pointer - (long)byte_pointer) - 1;\n      for (index = 0; (int)index < (int)uint_variable; index = index + 1) {\n        *(byte *)(undefined_array_variable_40bytes._8_8_ + index) = byte_pointer[index];\n      }\n      long_pointer = *double_pointer;\n      if (*(int *)(long_pointer + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)long_pointer + 0x1c) = 0;\nLAB_0010475e:\n        file_pointer = DAT_0010d590;\n        if (uint_variable == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            undefined8_pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            undefined8_variable = create_and_initialize_buffer_001033d6(file_pointer);\n            *undefined8_pointer = undefined8_variable;\n          }\n          index = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            index = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          status = 1;\n          initialize_file_pointer_001031cf(index);\n          extract_data_from_binary_001030ed();\n        }\n        else {\n          status = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_to_long = *double_pointer;\n          bytes_read = ~uint_variable + *(int *)(long_pointer + 3);\n          if (0 < (int)bytes_read) break;\n          bytes_read = (int)DAT_0010d5b0 - (int)(void *)pointer_to_long[1];\n          if (*(int *)(pointer_to_long + 4) == 0) {\n            pointer_to_long[1] = 0;\nLAB_00104626:\n            print_error_message_and_exit_001033b0();\n            break;\n          }\n          status = *(int *)(pointer_to_long + 3);\n          integer_var25 = status;\n          if (status < 1) {\n            integer_var25 = status / 8;\n          }\n          *(int *)(pointer_to_long + 3) = integer_var25 + status;\n          void_pointer = realloc((void *)pointer_to_long[1],(long)(integer_var25 + status + 2));\n          pointer_to_long[1] = (long)void_pointer;\n          if (void_pointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)void_pointer + (long)(int)bytes_read);\n          long_pointer = *double_pointer;\n        }\n        if (0x2000 < (int)bytes_read) {\n          bytes_read = 0x2000;\n        }\n        ulong_variable = (ulong)bytes_read;\n        if (*(int *)((long)pointer_to_long + 0x24) == 0) {\n          int_pointer = __errno_location();\n          ulong_variable = (ulong)(int)bytes_read;\n          ulong_variable = (ulong)(int)uint_variable;\n          *int_pointer = 0;\n          goto LAB_001046c7;\n        }\n        ulong_variable = 0;\n        int_pointer = (int *)(long)(int)uint_variable;\n        do {\n          status = getc(DAT_0010d590);\n          uint_var36 = (uint)ulong_variable;\n          if (status == -1) {\n            status = ferror(DAT_0010d590);\n            bytes_read = uint_var36;\n            if (status != 0) {\n              do {\n                error_message = \"input in flex scanner failed\";\n                print_error_message_and_exit_001033b0();\n                do {\n                  *int_pointer = 0;\n                  clearerr((FILE *)error_message);\nLAB_001046c7:\n                  size_var = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong_variable),1,ulong_variable,DAT_0010d590);\n                  error_message = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_var;\n                  bytes_read = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (status = ferror(DAT_0010d590), bytes_read = DAT_0010d598, status == 0))\n                  goto LAB_00104738;\n                } while (*int_pointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (status == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_variable +\n             (long)(int)uint_var36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            bytes_read = uint_var36 + 1;\n            break;\n          }\n          ulong_variable = (ulong)(uint_var36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)int_pointer) =\n               (char)status;\n          int_pointer = (int *)((long)int_pointer + 1);\n        } while (bytes_read != uint_var36 + 1);\nLAB_00104738:\n        DAT_0010d598 = bytes_read;\n        bytes_read = DAT_0010d598;\n        status = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (bytes_read == 0) goto LAB_0010475e;\n      }\n      long_pointer = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      index = *long_pointer;\n      uint_variable = uint_variable + DAT_0010d598;\n      if (*(int *)(index + 0x18) < (int)uint_variable) {\n        integer_var25 = ((int)DAT_0010d598 >> 1) + uint_variable;\n        void_pointer = realloc(*(void **)(index + 8),(long)integer_var25);\n        *(void **)(index + 8) = void_pointer;\n        temp_variable14._8_8_ = long_pointer;\n        temp_variable14._0_8_ = *long_pointer;\n        if (*(long *)(*long_pointer + 8) == 0) {\n          temp_variable14 = print_error_message_and_exit_001033b0();\n        }\n        long_pointer = temp_variable14._8_8_;\n        *(int *)(temp_variable14._0_8_ + 0x18) = integer_var25 + -2;\n      }\n      DAT_0010d598 = uint_variable;\n      *(undefined *)(*(long *)(*long_pointer + 8) + (long)(int)uint_variable) = 0;\n      *(undefined *)(*(long *)(*long_pointer + 8) + 1 + (long)(int)uint_variable) = 0;\n      byte_pointer = *(byte **)(*long_pointer + 8);\n      DAT_0010d5c8 = byte_pointer;\n      if (status == 1) goto LAB_001048a4;\n      if (status == 2) goto LAB_001048ca;\n      byte_pointer = byte_pointer + integer_variable;\n      DAT_0010d5b0 = byte_pointer;\n      uint_variable = find_matching_value_index_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)byte_pointer - (long)byte_pointer == 1) goto LAB_001048a4;\nLAB_001048ca:\n    byte_pointer = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = byte_pointer;\n    ulong_variable = find_matching_value_index_0010300e();\n    byte_pointer = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  byte_pointer = byte_pointer + integer_variable;\n  DAT_0010d5b0 = byte_pointer;\n  ulong_variable = find_matching_value_index_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong_variable * 2) != 0) {\n    DAT_0010d5b8 = byte_pointer;\n    DAT_0010d5c0 = (uint)ulong_variable;\n  }\n  ulong_variable = ulong_variable & 0xffffffff;\n  while( true ) {\n    integer_variable = (int)ulong_variable;\n    if (integer_variable == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer_variable * 2) + 1) * 2)) break;\n    ulong_variable = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer_variable * 2);\n  }\n  uint_variable = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer_variable * 2) + 1) * 2);\n  byte_pointer = byte_pointer;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integer_variable * 2) + 1) * 2) == 0)\n     || (uint_variable == 0xb0)) goto LAB_0010419f;\n  byte_pointer = byte_pointer + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer_variable = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *byte_pointer = DAT_0010d588;\n  ulong_variable = (ulong)DAT_0010d5c0;\n  byte_pointer = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  char_pointer_pointer = char_pointer_pointer + 1;\n  file_count = 3;\n  *char_pointer_pointer = DAT_0010d548;\nLAB_001049d1:\n  buffer_ptr = buffer_ptr + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "current_name": "improved_extract_and_convert_archived_files_00103e95",
            "entrypoint": "0x00103e95",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103e95": "improved_extract_and_convert_archived_files_00103e95",
                "auVar40": "undefined_array_variable_40bytes",
                "auVar41": "temp_variable14",
                "bVar28": "bool_var",
                "bVar30": "byte_var",
                "bVar39": "flag",
                "cVar15": "char_var",
                "cVar2": "character",
                "iVar25": "integer_var25",
                "iVar37": "case_value",
                "iVar8": "integer_variable",
                "iVar9": "status",
                "lVar12": "buffer_end",
                "lVar17": "long_variable",
                "lVar18": "index",
                "lVar21": "long_variable",
                "lVar31": "long_variable",
                "lVar5": "temp_var1",
                "local_678": "filename_array",
                "local_740": "temp_buffer",
                "local_7d0": "local_stat",
                "local_7f8": "local_byte_pointer",
                "local_7fc": "local_uint",
                "local_800": "file_count",
                "local_810": "file_paths",
                "local_818": "buffer_size",
                "local_820": "buffer_start",
                "local_828": "buffer_ptr",
                "pFVar4": "file_pointer",
                "pbVar32": "byte_pointer",
                "pbVar33": "byte_pointer",
                "pbVar35": "byte_pointer",
                "pbVar7": "byte_pointer",
                "pcVar10": "error_message",
                "pcVar15": "module_file",
                "pcVar16": "char_pointer",
                "piVar34": "int_pointer",
                "plVar12": "long_pointer",
                "plVar5": "pointer_to_long",
                "ppFVar3": "input_file_ptr",
                "ppcVar27": "char_pointer_pointer",
                "ppcVar29": "char_pointer_pointer",
                "ppcVar38": "module_file",
                "pplVar1": "double_pointer",
                "puVar2": "ptr1",
                "puVar22": "undefined8_pointer",
                "puVar23": "entry_ptr",
                "pvVar14": "void_pointer",
                "sVar13": "size_var",
                "size_t": "unsigned_integer_type",
                "stat": "file_stat_struct",
                "uVar11": "undefined8_variable",
                "uVar19": "ulong_variable",
                "uVar20": "uint_variable",
                "uVar22": "uint_var3",
                "uVar23": "uint_var4",
                "uVar24": "bytes_read",
                "uVar26": "ulong_variable",
                "uVar36": "uint_var36",
                "uVar40": "temp_var3",
                "uVar41": "temp_var4",
                "uVar6": "undefined8_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a0": {
            "additional_data": {
                "FUN_001052a0": {
                    "check_file": 4,
                    "check_file_information": 1,
                    "check_file_properties": 1,
                    "check_file_size": 1,
                    "check_file_status": 3,
                    "file_info": 1,
                    "get_file_details": 1,
                    "get_file_info": 1,
                    "get_file_information": 4,
                    "get_file_size": 7,
                    "get_file_size_or_error": 1,
                    "get_file_stat_size": 1,
                    "get_file_stats": 3,
                    "get_file_status": 2
                },
                "iVar1": {
                    "result": 9,
                    "stat_result": 6,
                    "status": 16
                },
                "param_1": {
                    "file_path": 24,
                    "filename": 7
                },
                "pcVar4": {
                    "err_str": 1,
                    "error_description": 3,
                    "error_reason": 21,
                    "error_str": 1,
                    "error_string": 2,
                    "reason": 2,
                    "str_error": 1
                },
                "piVar2": {
                    "err": 1,
                    "err_num_ptr": 1,
                    "errno_location": 6,
                    "errno_ptr": 13,
                    "error_code": 3,
                    "error_num_ptr": 1,
                    "error_number_ptr": 1,
                    "error_ptr": 3,
                    "errptr": 1,
                    "p_error_number": 1
                },
                "sStack_a8": {
                    "file_info": 4,
                    "file_stat": 12,
                    "file_stats": 10,
                    "file_status": 3,
                    "stat_info": 1,
                    "stats": 1
                },
                "uVar3": {
                    "err_msg": 1,
                    "error_message": 27,
                    "error_string": 3
                }
            },
            "called": [
                "FUN_00107920",
                "dcgettext",
                "FUN_001025a0",
                "stat"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "code": "\nlong get_file_stat_size_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_formatted_error_message_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_formatted_error_message_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_formatted_error_message_00107920(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_formatted_error_message_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_formatted_error_message_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "get_file_stat_size_001052a0",
            "entrypoint": "0x001052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a0": "get_file_stat_size_001052a0",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stat",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105300": {
            "additional_data": {
                "FUN_00105300": {
                    "convert_and_open_archive": 1,
                    "convert_and_open_library": 1,
                    "convert_archive_format": 1,
                    "convert_archived_file": 1,
                    "convert_archived_files": 1,
                    "convert_extracted_archived_files": 1,
                    "convert_library": 1,
                    "convert_library_format": 7,
                    "convert_to_formatted_archive": 1,
                    "convert_to_normal_format": 1,
                    "decompile_extracted_file": 1,
                    "extract_and_convert_archived_files": 8,
                    "extract_and_handle_archived_files": 1,
                    "extract_archived_files": 3,
                    "improved_extract_and_convert_archived_files": 1,
                    "open_archive_and_convert": 1
                },
                "bVar3": {
                    "archive_flag": 1,
                    "bit_flag": 1,
                    "conversion_flag": 2,
                    "convert_flag": 1,
                    "is_convert": 1,
                    "is_thin": 2,
                    "is_thin_format": 5,
                    "is_thin_library": 12,
                    "thin_conversion_flag": 1,
                    "thin_flag": 3,
                    "thin_format_flag": 1,
                    "thin_library_flag": 1
                },
                "cVar4": {
                    "char_flag": 1,
                    "check_format_result": 2,
                    "conversion_result": 1,
                    "error_flag": 2,
                    "format_check": 3,
                    "format_check_result": 11,
                    "format_flag": 1,
                    "format_is_matching": 1,
                    "format_match": 1,
                    "format_result": 3,
                    "format_status": 2,
                    "result": 2,
                    "set_format_result": 1
                },
                "iVar5": {
                    "result": 3,
                    "stat_result": 17,
                    "status": 11
                },
                "lVar9": {
                    "archived_file": 9,
                    "archived_file_location": 1,
                    "archived_file_offset": 1,
                    "archived_file_pointer": 3,
                    "current_archived_file": 1,
                    "current_file": 1,
                    "file_address": 1,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "file_iterator": 1,
                    "file_offset": 1,
                    "file_pointer": 4,
                    "file_ptr": 3,
                    "next_archived_file": 2,
                    "next_object_offset": 1
                },
                "local_a8": {
                    "file_info": 4,
                    "file_information": 1,
                    "file_stat": 9,
                    "file_statistics": 1,
                    "file_stats": 9,
                    "file_status": 5,
                    "stat_buffer": 1,
                    "stat_struct": 1
                },
                "local_b0": {
                    "format_buffer": 1,
                    "format_criteria": 1,
                    "format_info": 1,
                    "format_match": 2,
                    "format_match_buf": 1,
                    "format_matched": 1,
                    "format_matching_stat": 1,
                    "format_properties": 1,
                    "formatted_error_message": 1,
                    "matching_format": 2,
                    "matching_formats": 15,
                    "matching_paths": 1,
                    "stat_buff": 1,
                    "stat_struct": 1,
                    "target_format": 1
                },
                "param_1": {
                    "archive_path": 2,
                    "file": 1,
                    "file_name": 1,
                    "file_path": 6,
                    "filename": 8,
                    "input_file": 2,
                    "input_file_name": 2,
                    "input_file_path": 2,
                    "input_filename": 1,
                    "input_path": 2,
                    "library_path": 4
                },
                "param_2": {
                    "archive": 1,
                    "archive_handle": 1,
                    "archived_files": 3,
                    "bfd_handle": 1,
                    "bfd_object": 1,
                    "converted_library": 1,
                    "libraries": 1,
                    "library_handle": 1,
                    "opened_library": 1,
                    "output": 1,
                    "output_file": 1,
                    "output_file_list": 1,
                    "output_files": 9,
                    "output_format": 2,
                    "output_handle": 1,
                    "output_objects": 1,
                    "output_paths": 1,
                    "processed_files": 1,
                    "result": 2
                },
                "pcVar2": {
                    "default_plugin": 7,
                    "error_message": 7,
                    "error_msg": 1,
                    "error_string": 4,
                    "format": 1,
                    "output_format": 2,
                    "plugin_name": 7,
                    "plugin_path": 1,
                    "program_name": 1
                },
                "piVar8": {
                    "errno": 2,
                    "errno_loc": 1,
                    "errno_location": 8,
                    "errno_pointer": 2,
                    "errno_ptr": 8,
                    "error_code": 3,
                    "error_location": 1,
                    "error_num": 1,
                    "error_num_ptr": 1,
                    "error_number": 4
                },
                "plVar1": {
                    "archive_file_list": 1,
                    "archive_ptr": 2,
                    "archived_file": 1,
                    "archived_file_handle": 1,
                    "archived_file_list": 1,
                    "archived_file_pointer": 1,
                    "archived_file_ptr": 2,
                    "archived_files_pointer": 1,
                    "current_archived_file": 1,
                    "current_file": 2,
                    "current_file_pointer": 2,
                    "current_object": 1,
                    "current_path_ptr": 1,
                    "file_list": 2,
                    "file_list_pointer": 1,
                    "file_pointer": 3,
                    "file_pointers": 1,
                    "file_ptr": 2,
                    "next_archived_file_ptr": 1,
                    "next_file_ptr": 1,
                    "pointer_list": 2,
                    "ptr_list": 1
                },
                "puVar10": {
                    "archived_files": 5,
                    "archived_files_ptr": 1,
                    "archived_objects": 1,
                    "converted_files": 9,
                    "extract_result": 1,
                    "extracted_files": 11,
                    "extracted_files_ptr": 1,
                    "extracted_paths": 1,
                    "result_ptr": 1
                },
                "uVar6": {
                    "conversion_error": 1,
                    "conversion_error_message": 1,
                    "err_msg": 1,
                    "err_msg1": 1,
                    "error_message": 14,
                    "error_msg": 3,
                    "error_msg1": 1,
                    "error_string": 7,
                    "msg_format": 1,
                    "translated_error": 1
                },
                "uVar7": {
                    "conversion_message": 1,
                    "err_msg2": 1,
                    "error_format": 2,
                    "error_message": 5,
                    "error_message2": 3,
                    "error_message_arg": 1,
                    "error_message_string": 1,
                    "error_msg": 2,
                    "error_msg2": 2,
                    "error_string": 3,
                    "error_string2": 2,
                    "file_name": 1,
                    "library_name": 5,
                    "msg": 1,
                    "msg_param": 1
                }
            },
            "called": [
                "FUN_0010315d",
                "xexit",
                "FUN_00107c20",
                "FUN_00102710",
                "stat",
                "bfd_openw",
                "FUN_00107c10",
                "perror",
                "bfd_get_error",
                "FUN_00107920",
                "__errno_location",
                "bfd_openr_next_archived_file",
                "FUN_00103bd1",
                "dcgettext",
                "bfd_check_format_matches",
                "bfd_set_error",
                "bfd_openr",
                "FUN_00107690",
                "bfd_set_format",
                "bfd_close",
                "fprintf"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00107650"
            ],
            "code": "\n\n\nundefined8 * improved_extract_and_convert_archived_files_00105300(char *filename,undefined8 *output_files)\n\n{\n  long *file_pointer;\n  char *default_plugin;\n  byte is_thin_library;\n  char format_check_result;\n  int stat_result;\n  undefined8 error_message;\n  undefined8 library_name;\n  int *errno_ptr;\n  long archived_file;\n  undefined8 *extracted_files;\n  undefined8 matching_formats;\n  stat file_stats;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  stat_result = stat(filename,&file_stats);\n  default_plugin = DAT_0010d618;\n  if (stat_result == 0) goto LAB_001053be;\n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      check_and_exit_if_zero_flag_set_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (output_files != (undefined8 *)0x0)) {\n      extracted_files = (undefined8 *)extract_and_convert_archived_files_00102710();\n      return extracted_files;\n    }\n    output_files = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((output_files != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_files,2), format_check_result != '\\0')) &&\n       (format_check_result = bfd_close(output_files), format_check_result != '\\0')) {\n      default_plugin = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  print_error_message_and_exit_00107c10(filename);\n  do {\n    is_thin_library = *(byte *)((long)output_files + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        library_name = *output_files;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_message_and_exit_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      library_name = *output_files;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_message_and_exit_00107690(error_message,library_name);\nLAB_001027cb:\n      print_error_message_00107c20(filename);\n      stat_result = bfd_get_error();\n      if (stat_result == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matching_formats);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      file_pointer = output_files + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(output_files,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(output_files,archived_file)) {\n        *file_pointer = archived_file;\n        file_pointer = (long *)(archived_file + 0xf0);\n      }\n      *file_pointer = 0;\n      stat_result = bfd_get_error();\n      if (stat_result == 9) {\n        return output_files;\n      }\n      do {\n        print_error_message_and_exit_00107c10(filename);\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        print_formatted_error_message_00107920(library_name,filename);\n        default_plugin = filename;\nLAB_001053be:\n        DAT_0010d618 = default_plugin;\n        output_files = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (output_files == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_files,2,&matching_formats);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(output_files,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "current_name": "improved_extract_and_convert_archived_files_00105300",
            "entrypoint": "0x00105300",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105300": "improved_extract_and_convert_archived_files_00105300",
                "bVar3": "is_thin_library",
                "cVar4": "format_check_result",
                "iVar5": "stat_result",
                "lVar9": "archived_file",
                "local_a8": "file_stats",
                "local_b0": "matching_formats",
                "param_1": "filename",
                "param_2": "output_files",
                "pcVar2": "default_plugin",
                "piVar8": "errno_ptr",
                "plVar1": "file_pointer",
                "puVar10": "extracted_files",
                "uVar6": "error_message",
                "uVar7": "library_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105480": {
            "additional_data": {
                "DAT_0010d634": {
                    "flag": 2
                },
                "FUN_00105480": {
                    "extract_and_print_archive_entries": 1,
                    "extract_and_print_entries": 1,
                    "extract_entries_from_archive": 1,
                    "find_entries": 1,
                    "process_archive": 3,
                    "process_archive_entries": 14,
                    "process_archived_entries": 3,
                    "process_entries": 5,
                    "reverse_archive_entries": 1
                },
                "_DAT_0010d630": {
                    "max_matches": 1,
                    "threshold": 1
                },
                "__format": {
                    "error_format": 3,
                    "error_format_string": 1,
                    "error_message": 6,
                    "error_message_format": 2,
                    "error_msg_format": 1,
                    "fmt": 1,
                    "format": 1,
                    "format_str": 4,
                    "format_string": 10
                },
                "_stderr": {
                    "error_output": 2,
                    "stderr": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_translated_text": 1
                },
                "extract_and_copy_substring_00105830": {
                    "extract_and_copy_substring": 2
                },
                "filename_cmp": {
                    "compare_filenames": 2
                },
                "fprintf": {
                    "print_error": 2,
                    "print_error_message": 2,
                    "print_to_stderr": 1
                },
                "iVar1": {
                    "cmp_result": 4,
                    "comparison_result": 6,
                    "filename_comparison_result": 1,
                    "result": 1
                },
                "lVar2": {
                    "current_data": 1,
                    "current_entry": 23,
                    "current_entry_ptr": 4,
                    "entry_ptr": 3
                },
                "local_c8": {
                    "buffer": 15,
                    "extract_buffer": 1,
                    "local_buffer": 8,
                    "local_memory_buffer": 1,
                    "substring_buffer": 3,
                    "temp_buffer": 3
                },
                "local_cc": {
                    "count": 4,
                    "counter": 7,
                    "entry_count": 3,
                    "entry_counter": 6,
                    "entry_index": 2,
                    "found_entries": 1,
                    "matched_entries": 1,
                    "matching_count": 2,
                    "matching_entries": 1,
                    "num_processed": 2,
                    "processed_count": 1,
                    "processed_entries_count": 1
                },
                "param_1": {
                    "archive": 8,
                    "archive_base": 1,
                    "archive_data": 2,
                    "archive_entries": 1,
                    "archive_pointer": 3,
                    "archive_ptr": 12,
                    "entry_list": 3,
                    "input_data": 1
                },
                "param_2": {
                    "callback": 7,
                    "callback_fn": 1,
                    "callback_func": 6,
                    "callback_function": 3,
                    "entry_callback": 1,
                    "entry_func": 1,
                    "entry_func_ptr": 1,
                    "entry_handler": 1,
                    "entry_processor": 8,
                    "process_entry": 2
                },
                "param_3": {
                    "entry_list": 2,
                    "entry_name_ptrs": 1,
                    "entry_names": 16,
                    "entry_paths": 1,
                    "entry_pointers": 1,
                    "file_names": 2,
                    "filenames": 6,
                    "filenames_ptr": 1,
                    "output_data": 1
                },
                "param_4": {
                    "entry_count": 3,
                    "num_entries": 19,
                    "num_filenames": 2,
                    "num_files": 6,
                    "output_data_count": 1
                },
                "plVar3": {
                    "alternative_entry_ptr": 1,
                    "current_entry": 1,
                    "decompilation_ptr": 1,
                    "default_entry": 1,
                    "default_entry_ptr": 1,
                    "fallback_entry": 11,
                    "fallback_entry_ptr": 2,
                    "next_entry": 8,
                    "null_entry": 1,
                    "p_link": 1,
                    "prev_entry_ptr": 1,
                    "temp_entry": 1,
                    "temp_ptr": 1
                },
                "plVar5": {
                    "current": 2,
                    "current_entry_ptr": 4,
                    "current_node": 1,
                    "entry": 6,
                    "entry_list": 3,
                    "entry_pointer": 1,
                    "entry_ptr": 11,
                    "iter_entry": 1,
                    "loop_var": 1,
                    "next_entry": 1
                },
                "uVar4": {
                    "current_entry_name": 2,
                    "entry_name": 2,
                    "extracted_entry": 3,
                    "extracted_entry_name": 2,
                    "extracted_file": 1,
                    "extracted_file_name": 1,
                    "extracted_filename": 2,
                    "extracted_path": 1,
                    "extracted_substring": 8,
                    "filename": 5,
                    "substring": 3,
                    "substring_result": 1
                }
            },
            "called": [
                "FUN_00105830",
                "filename_cmp",
                "FUN_0010285f"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid process_archive_entries_00105480(long archive_ptr,code *entry_processor,undefined8 *entry_names,int num_entries)\n\n{\n  int comparison_result;\n  char *format_string;\n  long current_entry;\n  long *fallback_entry;\n  undefined8 extracted_substring;\n  long *entry_ptr;\n  int counter;\n  undefined buffer [152];\n  \n  current_entry = *(long *)(archive_ptr + 0xf0);\n  if (num_entries == 0) {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      (*entry_processor)(current_entry);\n    }\n  }\n  else {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      *(undefined4 *)(current_entry + 0xac) = 0;\n    }\n    do {\n      entry_ptr = *(long **)(archive_ptr + 0xf0);\n      counter = 0;\n      for (; entry_ptr != (long *)0x0; entry_ptr = (long *)entry_ptr[0x1e]) {\n        if (*(int *)((long)entry_ptr + 0xac) == 0) {\n          current_entry = *entry_ptr;\n          if (current_entry == 0) {\n            fallback_entry = (long *)entry_ptr[0x1d];\n            if ((long *)entry_ptr[0x1d] == (long *)0x0) {\n              fallback_entry = entry_ptr;\n            }\n            (**(code **)(fallback_entry[1] + 0x1e8))(entry_ptr,buffer);\n          }\n          else if (((*(byte *)(archive_ptr + 0x49) & 0x10) == 0) ||\n                  (current_entry = extract_and_copy_substring(current_entry,archive_ptr), current_entry != 0)) {\n            extracted_substring = extract_and_copy_substring(*entry_names,archive_ptr);\n            comparison_result = filename_cmp(extracted_substring,current_entry);\n            if ((comparison_result == 0) &&\n               ((DAT_0010d634 == '\\0' || (counter = counter + 1, counter == _DAT_0010d630)))) {\n              (*entry_processor)();\n              *(undefined4 *)((long)entry_ptr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      extracted_substring = *entry_names;\n      format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(error_output,format_string,extracted_substring);\nLAB_0010553e:\n      entry_names = entry_names + 1;\n      num_entries = num_entries + -1;\n    } while (num_entries != 0);\n  }\n  return;\n}\n\n",
            "current_name": "process_archive_entries_00105480",
            "entrypoint": "0x00105480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "__format": "format_string",
                "_stderr": "error_output",
                "dcgettext": "get_translated_text",
                "extract_and_copy_substring_00105830": "extract_and_copy_substring",
                "filename_cmp": "compare_filenames",
                "fprintf": "print_error_message",
                "iVar1": "comparison_result",
                "lVar2": "current_entry",
                "local_c8": "buffer",
                "local_cc": "counter",
                "param_1": "archive_ptr",
                "param_2": "entry_processor",
                "param_3": "entry_names",
                "param_4": "num_entries",
                "plVar3": "fallback_entry",
                "plVar5": "entry_ptr",
                "uVar4": "extracted_substring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105570": {
            "additional_data": {
                "FUN_00105570": {
                    "analyze_files": 1,
                    "extract_and_print_archive_file_info": 2,
                    "extract_and_print_archive_info": 6,
                    "extract_and_print_file_info": 1,
                    "extract_and_print_files_info": 1,
                    "extract_and_print_info_from_binary": 1,
                    "extract_and_process_files": 1,
                    "extract_archive": 1,
                    "extract_archive_files": 1,
                    "extract_print_update_files": 1,
                    "process_archive": 1,
                    "process_binary": 1,
                    "process_files": 2,
                    "process_files_and_print_info": 1
                },
                "__s": {
                    "base_file_name": 1,
                    "base_file_name_2": 1,
                    "base_name": 3,
                    "base_name2": 1,
                    "base_string": 1,
                    "basename": 3,
                    "basename2": 2,
                    "basename_1": 1,
                    "basename_current_file_name": 1,
                    "basename_file_path": 1,
                    "basename_result": 1,
                    "basename_result_2": 1,
                    "basename_result_ptr": 1,
                    "basename_substring": 1,
                    "basename_temp": 1,
                    "basename_var": 1,
                    "char_pointer4": 1,
                    "current_base_name2": 1,
                    "current_basename": 1,
                    "file_base_name": 1,
                    "file_name_1": 1,
                    "filename_copy": 1,
                    "s_var": 1,
                    "string_var_s": 1,
                    "stripped_basename": 1
                },
                "auStack_158": {
                    "aux_stack": 1,
                    "buffer": 2,
                    "byte_array_au_stack_158": 1,
                    "helper_array": 1,
                    "stack_arr": 1,
                    "stack_array": 11,
                    "stack_buffer": 4,
                    "stack_memory": 1,
                    "stack_variable": 1,
                    "substring_buffer": 1,
                    "substring_stack": 1,
                    "substring_storage": 1,
                    "temp_array": 1,
                    "temp_stack": 2,
                    "temp_stack_variable": 1
                },
                "bVar19": {
                    "bool_flag": 1,
                    "bool_value": 1,
                    "bool_value2": 1,
                    "bool_var": 12,
                    "bool_var_19": 2,
                    "boolean_flag": 2,
                    "boolean_var": 2,
                    "boolean_variable": 1,
                    "copy_substrings": 1,
                    "flag": 1,
                    "flag2": 1,
                    "flag_3": 1,
                    "include_dep": 1,
                    "is_copy_required": 1,
                    "is_dependency_file": 1,
                    "use_dependency": 1
                },
                "bVar20": {
                    "b_var20": 1,
                    "bool_var2": 1,
                    "bool_var_20": 1,
                    "boolean_variable_2": 1,
                    "byte_counter": 1,
                    "byte_flag": 1,
                    "byte_value": 2,
                    "byte_value_2": 1,
                    "byte_var": 5,
                    "byte_var2": 6,
                    "byte_var_2": 3,
                    "byte_var_20": 1,
                    "flag_2": 1,
                    "local_flag": 1,
                    "temp_byte": 2,
                    "zero_flag": 1
                },
                "bVar3": {
                    "archive_result": 1,
                    "bool_value": 1,
                    "bool_var": 1,
                    "byte_value": 1,
                    "byte_var": 14,
                    "byte_var_3": 2,
                    "byte_variable": 1,
                    "flag": 1,
                    "has_processed_archive": 1,
                    "is_processed": 1,
                    "process_flag": 1,
                    "process_result": 1,
                    "process_status": 1,
                    "result": 2,
                    "return_value": 1,
                    "temp_bvar": 1
                },
                "iVar4": {
                    "cmp_result": 2,
                    "comparison_result": 6,
                    "index": 7,
                    "index_var": 7,
                    "int_value": 1,
                    "int_var": 3,
                    "int_var_4": 1,
                    "integer_var": 2,
                    "stat_result": 1,
                    "temp_ivar": 1
                },
                "lStack_100": {
                    "compared_date": 1,
                    "file_time": 2,
                    "l_stack_value": 1,
                    "l_stack_var": 1,
                    "last_modification_time": 1,
                    "last_modified_time": 4,
                    "last_time_sec": 1,
                    "latest_modified_time": 1,
                    "long_stack_var": 1,
                    "long_var3": 1,
                    "long_var_l_stack_100": 1,
                    "lvar_stack": 1,
                    "previous_time": 1,
                    "stack_temp": 1,
                    "stack_value": 1,
                    "stack_var": 4,
                    "stack_variable": 1,
                    "stack_variable_2": 1,
                    "stat_info": 1,
                    "temp_long_stack": 1,
                    "time_limit": 1,
                    "time_threshold": 1,
                    "time_value": 1,
                    "timestamp": 1
                },
                "lVar11": {
                    "current_address": 1,
                    "current_archive_info_ptr": 1,
                    "current_data": 1,
                    "current_directory": 1,
                    "current_entry": 1,
                    "current_file": 1,
                    "current_file_data": 1,
                    "current_file_info": 1,
                    "current_file_path_address": 1,
                    "current_file_pointer": 1,
                    "current_file_ptr": 1,
                    "current_file_ptr_2": 1,
                    "current_handle": 1,
                    "current_offset": 1,
                    "current_pointer": 2,
                    "current_ptr": 4,
                    "file_ptr2": 1,
                    "l_var1": 1,
                    "long_var1": 1,
                    "long_var_11": 1,
                    "loop_var1": 1,
                    "loop_var_1": 2,
                    "ptr1": 1,
                    "ptr_temp": 1,
                    "temp_lvar1": 1,
                    "temp_var1": 1
                },
                "lVar12": {
                    "file_descriptor": 1,
                    "file_pointer": 1,
                    "file_ptr3": 1,
                    "l_var2": 1,
                    "long_var2": 1,
                    "long_var_12": 1,
                    "loop_var2": 1,
                    "loop_var_2": 2,
                    "next_address": 1,
                    "next_archive_info_ptr": 1,
                    "next_data": 1,
                    "next_directory": 1,
                    "next_entry": 1,
                    "next_file": 1,
                    "next_file_data": 1,
                    "next_file_info": 1,
                    "next_file_ptr": 2,
                    "next_file_ptr_2": 1,
                    "next_handle": 1,
                    "next_pointer": 2,
                    "next_ptr": 2,
                    "previous_file_path_address": 1,
                    "previous_offset": 1,
                    "ptr2": 1,
                    "ptr_temp2": 1,
                    "temp_lvar2": 1,
                    "temp_var2": 1
                },
                "local_15a": {
                    "archive_data_found": 1,
                    "archive_file_found": 1,
                    "archive_flag": 2,
                    "archive_found": 1,
                    "byte_var_local_15a": 1,
                    "file_info_flag": 1,
                    "final_flag": 1,
                    "flag_value_2": 1,
                    "flag_var": 1,
                    "has_error": 1,
                    "is_archive_file": 1,
                    "is_archive_info_extracted": 1,
                    "is_archive_processed": 1,
                    "local_bool_var": 1,
                    "local_byte": 1,
                    "local_byte_var": 3,
                    "local_flag": 6,
                    "local_value": 1,
                    "local_var": 2,
                    "local_var1": 1,
                    "result_flag": 1,
                    "total_flag": 1
                },
                "param_1": {
                    "archive": 1,
                    "archive_file": 1,
                    "archive_handle": 1,
                    "archive_info": 2,
                    "archive_info_ptr": 1,
                    "arg1": 2,
                    "argument": 1,
                    "binary": 1,
                    "binary_data": 1,
                    "binary_file": 1,
                    "binary_image": 1,
                    "binary_offset": 1,
                    "data": 2,
                    "file_descriptor": 1,
                    "file_info": 1,
                    "file_manager": 1,
                    "file_pointer": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_data": 2,
                    "input_param": 3,
                    "param": 3,
                    "param_ptr": 1
                },
                "param_2": {
                    "arg2": 1,
                    "file_list": 9,
                    "file_names": 1,
                    "file_paths": 18,
                    "input_strings": 2
                },
                "param_3": {
                    "archive_flag": 1,
                    "arg3": 1,
                    "extract_flag": 4,
                    "extract_info_flag": 1,
                    "flag": 9,
                    "include_subdirectories": 1,
                    "input_flag": 1,
                    "is_archive": 1,
                    "is_archived": 1,
                    "is_extract": 2,
                    "is_extract_mode": 1,
                    "is_extracting": 1,
                    "is_extraction": 1,
                    "print_info": 1,
                    "recursive": 1,
                    "reverse": 1,
                    "reverse_order": 1,
                    "use_basename": 1,
                    "use_default_paths": 1
                },
                "pcVar10": {
                    "char_pointer3": 1,
                    "current_file": 14,
                    "current_file_name": 2,
                    "current_file_path": 3,
                    "current_file_path_ptr": 1,
                    "current_file_pointer": 1,
                    "current_filename": 1,
                    "current_path": 1,
                    "file_path": 1,
                    "file_path_iterator": 1,
                    "string_var_10": 1
                },
                "pcVar7": {
                    "basename": 1,
                    "char_pointer1": 1,
                    "current_file": 1,
                    "current_file_base_name": 1,
                    "current_file_name": 2,
                    "current_file_path": 2,
                    "current_string": 1,
                    "file": 2,
                    "file_name": 6,
                    "file_path": 7,
                    "file_path_1": 1,
                    "file_path_ptr": 1,
                    "filename": 1,
                    "filename_1": 1,
                    "pc_var": 1,
                    "string_var_7": 1
                },
                "pcVar8": {
                    "base_file_name": 1,
                    "base_filename": 1,
                    "base_name": 1,
                    "basename": 8,
                    "basename_copy": 1,
                    "basename_file_name": 1,
                    "basename_ptr": 2,
                    "basename_result": 1,
                    "basename_var": 1,
                    "char_pointer2": 1,
                    "comparison_file_name": 1,
                    "current_base_name": 1,
                    "file_path_2": 1,
                    "filename_2": 1,
                    "modified_file_base_name": 1,
                    "modified_file_path": 1,
                    "new_string": 1,
                    "short_file_name": 1,
                    "string_var_8": 1,
                    "temp_file_name": 2,
                    "temp_string": 1
                },
                "piVar6": {
                    "errno_location": 11,
                    "errno_pointer": 1,
                    "errno_ptr": 6,
                    "errno_var": 1,
                    "error": 1,
                    "error_code_ptr": 2,
                    "error_loc": 1,
                    "error_location": 1,
                    "error_num": 1,
                    "error_number": 1,
                    "error_ptr": 1,
                    "error_value_ptr": 1,
                    "error_var": 1,
                    "int_ptr_6": 1,
                    "pi_var": 1
                },
                "ppcVar1": {
                    "archive_data": 1,
                    "archive_file_list": 1,
                    "archive_file_ptr": 1,
                    "archive_files_ptr": 1,
                    "archived_files": 1,
                    "current_file": 3,
                    "current_file_path": 4,
                    "current_path": 2,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "file_data_array": 1,
                    "file_data_ptr": 1,
                    "file_list_ptr": 2,
                    "file_path_ptr": 1,
                    "file_paths_offset": 1,
                    "file_pointer_array": 1,
                    "file_ptr": 4,
                    "list_ptr": 1,
                    "pointer1": 1,
                    "pointer_array_1": 1,
                    "ppc_var_ptr": 1
                },
                "ppcVar15": {
                    "current_archive_file": 1,
                    "current_data_array": 1,
                    "current_entry": 3,
                    "current_file": 2,
                    "current_file_array": 1,
                    "current_file_info": 1,
                    "current_file_info_ptr": 1,
                    "current_file_path": 1,
                    "current_file_ptr": 5,
                    "current_list_ptr": 1,
                    "current_node": 1,
                    "current_ptr": 1,
                    "file_data": 1,
                    "file_entry": 1,
                    "file_list": 1,
                    "file_list_pointer": 1,
                    "file_list_ptr": 3,
                    "file_paths_iterator": 1,
                    "file_paths_pointer": 1,
                    "file_paths_ptr": 1,
                    "pointer2": 1,
                    "pointer_array_2": 1
                },
                "ppcVar16": {
                    "archive_entry": 1,
                    "archive_file_ptr": 1,
                    "current_data_offset": 1,
                    "current_file_list": 1,
                    "current_file_path_iterator": 1,
                    "current_file_pointer": 1,
                    "current_file_ptr": 2,
                    "entry_pointer": 1,
                    "file_paths_pointer2": 1,
                    "file_ptr": 1,
                    "file_ptr4": 1,
                    "loop_ptr_1": 1,
                    "next_archive_file": 1,
                    "next_data_array": 1,
                    "next_entry": 1,
                    "next_file": 2,
                    "next_file_array": 1,
                    "next_file_info": 1,
                    "next_file_info_ptr": 1,
                    "next_file_path_data": 1,
                    "next_file_ptr": 3,
                    "next_list_ptr": 1,
                    "next_node": 1,
                    "pointer3": 1,
                    "pointer_array_3": 1,
                    "ppc_var_ptr": 1,
                    "previous_entry": 1
                },
                "ppcVar18": {
                    "last_file_ptr": 1,
                    "loop_ptr_2": 1,
                    "next_file_list": 1,
                    "pointer4": 1,
                    "pointer_array_4": 1,
                    "prev_file": 1,
                    "prev_file_path": 1,
                    "prev_file_path_data": 1,
                    "prev_file_ptr": 1,
                    "prev_node": 1,
                    "prev_ptr": 1,
                    "previous_archive_file": 1,
                    "previous_data_array": 1,
                    "previous_entry": 3,
                    "previous_entry2": 1,
                    "previous_file": 1,
                    "previous_file_array": 1,
                    "previous_file_info": 1,
                    "previous_file_info_ptr": 1,
                    "previous_file_path": 1,
                    "previous_file_path_iterator": 1,
                    "previous_file_pointer": 1,
                    "previous_file_ptr": 6,
                    "previous_list_ptr": 1
                },
                "sStack_c8": {
                    "file_info": 1,
                    "file_stat": 11,
                    "file_stats": 2,
                    "s_stack_value": 1,
                    "s_stack_var": 1,
                    "stack_stat_variable": 1,
                    "stack_struct": 1,
                    "stat_data": 1,
                    "stat_result": 1,
                    "stat_struct": 8,
                    "stat_struct_s_stack_c8": 1,
                    "stat_var": 2
                },
                "sVar5": {
                    "filename_length": 1,
                    "size": 2,
                    "size_value": 1,
                    "size_var": 9,
                    "size_var_5": 1,
                    "str_len": 1,
                    "str_length": 3,
                    "string_length": 8,
                    "string_size": 3,
                    "string_var": 1,
                    "temp_svar": 1
                },
                "uVar13": {
                    "result": 13,
                    "return_val": 3,
                    "return_value": 11,
                    "u_var": 1,
                    "u_var13": 1,
                    "undefined_var_13": 2
                },
                "uVar14": {
                    "byte_length": 2,
                    "file_size": 1,
                    "index": 1,
                    "length_limit": 1,
                    "length_var": 1,
                    "limit": 1,
                    "loop_var_14": 1,
                    "max_len": 1,
                    "max_length": 4,
                    "string_length": 1,
                    "string_size": 1,
                    "temp_long": 1,
                    "temp_ulong": 1,
                    "temp_uvar2": 1,
                    "u_var": 1,
                    "u_var14": 1,
                    "ulong_value": 2,
                    "ulong_var": 7,
                    "ulong_var_14": 1,
                    "undefined_var_14": 1
                },
                "uVar17": {
                    "archive_mode": 1,
                    "archive_type": 1,
                    "data_type": 1,
                    "file_cmp_mode": 1,
                    "file_filter": 1,
                    "file_flag": 1,
                    "file_mode": 2,
                    "file_type": 2,
                    "flag": 3,
                    "flag_4": 1,
                    "flag_value": 4,
                    "loop_var_17": 1,
                    "u_var": 1,
                    "u_var17": 1,
                    "uint_value": 2,
                    "uint_var": 6,
                    "uint_var_17": 1,
                    "undefined_var_17": 1
                },
                "uVar2": {
                    "result": 1,
                    "temp_var": 2,
                    "u_var": 2,
                    "undefined": 1,
                    "undefined_value": 3,
                    "undefined_var": 14,
                    "undefined_var2": 1,
                    "undefined_var_2": 3,
                    "undefined_variable": 1
                },
                "uVar9": {
                    "extracted_file": 2,
                    "extracted_file_path": 1,
                    "extracted_string": 3,
                    "extracted_substring": 6,
                    "file_name_var": 1,
                    "result": 1,
                    "sub_file_name": 1,
                    "sub_string": 1,
                    "substring": 8,
                    "substring_result": 1,
                    "temp_uvar": 1,
                    "u_var": 1,
                    "u_var9": 1,
                    "undefined_var_9": 2,
                    "updated_substring": 1
                }
            },
            "called": [
                "FUN_00102943"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nundefined8 extract_and_print_archive_file_info_00105570(long input_param,char **file_paths,char flag)\n\n{\n  char **current_file_path;\n  undefined undefined_var;\n  byte byte_var;\n  int index;\n  size_t size_var;\n  int *errno_location;\n  char *file_path;\n  char *basename;\n  undefined8 substring;\n  char *current_file;\n  char *basename;\n  long current_ptr;\n  long loop_var_2;\n  undefined8 result;\n  ulong ulong_var;\n  char **current_file_ptr;\n  char **next_file_ptr;\n  uint uint_var;\n  char **previous_file_ptr;\n  bool bool_var;\n  byte byte_var2;\n  byte local_flag;\n  undefined stack_array [88];\n  long last_modified_time;\n  stat file_stat;\n  \n  byte_var2 = 0;\n  current_file_path = (char **)(input_param + 0xf0);\n  local_flag = 0;\n  if (file_paths == (char **)0x0) {\n    result = initialize_data_00102943();\n    return result;\n  }\n  do {\n    current_file = *file_paths;\njoined_r0x001055aa:\n    if (current_file == (char *)0x0) {\n      if (local_flag != 0) {\n        result = extract_and_print_archive_file_info_00105570_001058b0(input_param);\n        return result;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    current_file_ptr = *(char ***)(input_param + 0xf0);\n    next_file_ptr = current_file_path;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      loop_var_2 = *(long *)(input_param + 0xf0);\n      if (*(long *)(input_param + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        current_ptr = loop_var_2;\n        loop_var_2 = *(long *)(current_ptr + 0xf0);\n      } while (loop_var_2 != 0);\n      next_file_ptr = (char **)(current_ptr + 0xf0);\n      current_file = *file_paths;\n      do {\n        if (DAT_0010d620 != 0) {\n          result = extract_and_copy_substring_00105830(current_file,input_param);\n          index = filename_cmp(result,\"__.LIBDEP\");\n          if (index == 0) {\n            byte_var = process_archived_files_00105ae0(next_file_ptr,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            local_flag = byte_var | local_flag;\n            goto LAB_0010577e;\n          }\n          current_file = *file_paths;\n        }\n        undefined_var = DAT_0010d5f8;\n        bool_var = DAT_0010d60c != 0;\n        loop_var_2 = bfd_openr(current_file,DAT_0010d5f0);\n        if (loop_var_2 != 0) {\n          file_paths = file_paths + 1;\n          byte_var = process_archived_files_00105af0(next_file_ptr,loop_var_2,(uint)bool_var,undefined_var);\n          local_flag = local_flag | byte_var;\n          current_file = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        print_error_message_and_exit_00107c10(current_file,0);\n        uint_var = (uint)bool_var;\nLAB_001028f5:\n        result = DAT_0010d638;\n        if (uint_var == 3) {\n          loop_var_2 = *(long *)(input_param + 0xf0);\n          if (*(long *)(input_param + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*next_file_ptr != (undefined8 *)0x0;\n              next_file_ptr = (char **)(*next_file_ptr + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*next_file_ptr,result);\n            if (index == 0) {\n              if (uint_var == 2) {\n                next_file_ptr = (char **)(*next_file_ptr + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        current_file = *file_paths;\n      } while( true );\n    }\n    previous_file_ptr = current_file_path;\n    if (current_file_ptr == (char **)0x0) {\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      current_file = (char *)lbasename(*current_file_ptr);\n      basename = current_file;\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(current_file);\n        ulong_var = (ulong)*(byte *)(*(long *)(input_param + 8) + 0x1e);\n        if (ulong_var < size_var) {\n          basename = (char *)xmalloc(ulong_var + 1);\n          loop_var_2 = *(long *)(input_param + 8);\n          file_path = basename;\n          for (ulong_var = (ulong)*(byte *)(loop_var_2 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *file_path = *current_file;\n            current_file = current_file + (ulong)byte_var2 * -2 + 1;\n            file_path = file_path + (ulong)byte_var2 * -2 + 1;\n          }\n          basename[*(byte *)(loop_var_2 + 0x1e)] = '\\0';\n        }\n        file_path = *file_paths;\n        current_file = basename;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file_path = *file_paths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basename = (char *)lbasename(file_path);\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(basename);\n        ulong_var = (ulong)*(byte *)(*(long *)(input_param + 8) + 0x1e);\n        file_path = basename;\n        current_file = basename;\n        if (ulong_var < size_var) {\n          file_path = (char *)xmalloc(ulong_var + 1);\n          loop_var_2 = *(long *)(input_param + 8);\n          basename = file_path;\n          for (ulong_var = (ulong)*(byte *)(loop_var_2 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *basename = *basename;\n            basename = basename + (ulong)byte_var2 * -2 + 1;\n            basename = basename + (ulong)byte_var2 * -2 + 1;\n          }\n          file_path[*(byte *)(loop_var_2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(basename,basename);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      previous_file_ptr = current_file_ptr + 0x1e;\n      current_file_ptr = (char **)current_file_ptr[0x1e];\n      if (current_file_ptr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file_path = *file_paths;\n    current_file = *current_file_ptr;\nLAB_00102980:\n    index = filename_cmp(file_path,current_file);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (current_file_ptr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*file_paths,&file_stat);\n      if (index != 0) {\n        errno_location = __errno_location();\n        if (*errno_location != 2) {\n          print_error_message_and_exit_00107c10(*file_paths);\nLAB_00102b7e:\n          current_file = *current_file_ptr;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_and_exit_00107690(result,current_file);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      next_file_ptr = (char **)current_file_ptr[0x1d];\n      if ((char **)current_file_ptr[0x1d] == (char **)0x0) {\n        next_file_ptr = current_file_ptr;\n      }\n      index = (**(code **)(next_file_ptr[1] + 0x1e8))(current_file_ptr,stack_array);\n      if (index != 0) goto LAB_00102b7e;\n      if (file_stat.st_mtim.tv_sec <= last_modified_time) goto LAB_0010577e;\n    }\n    result = find_last_file_index_00105870(current_file_path,2,*current_file_ptr);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      current_file = *file_paths;\n      bool_var = DAT_0010d60c != 0;\n      loop_var_2 = bfd_openr(current_file,DAT_0010d5f0);\n      if (loop_var_2 == 0) {\n        print_error_message_and_exit_00107c10(current_file,0);\n        goto LAB_00102b3e;\n      }\n      byte_var = print_and_update_data_00103172(result,loop_var_2,bool_var);\n    }\n    else {\n      substring = extract_and_copy_substring_00105830(*file_paths,input_param);\n      index = filename_cmp(substring,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_var = print_and_update_data_00103172(result,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byte_var != 0) {\n      *previous_file_ptr = *(char **)(*previous_file_ptr + 0xf0);\n      local_flag = byte_var;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "current_name": "extract_and_print_archive_file_info_00105570",
            "entrypoint": "0x00105570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105570": "extract_and_print_archive_file_info_00105570",
                "__s": "basename",
                "auStack_158": "stack_array",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "bVar3": "byte_var",
                "iVar4": "index",
                "lStack_100": "last_modified_time",
                "lVar11": "current_ptr",
                "lVar12": "loop_var_2",
                "local_15a": "local_flag",
                "param_1": "input_param",
                "param_2": "file_paths",
                "param_3": "flag",
                "pcVar10": "current_file",
                "pcVar7": "file_path",
                "pcVar8": "basename",
                "piVar6": "errno_location",
                "ppcVar1": "current_file_path",
                "ppcVar15": "current_file_ptr",
                "ppcVar16": "next_file_ptr",
                "ppcVar18": "previous_file_ptr",
                "sStack_c8": "file_stat",
                "sVar5": "size_var",
                "uVar13": "result",
                "uVar14": "ulong_var",
                "uVar17": "uint_var",
                "uVar2": "undefined_var",
                "uVar9": "substring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001057a0": {
            "additional_data": {
                "FUN_001057a0": {
                    "allocate_and_copy_path": 1,
                    "create_temp_file": 2,
                    "extract_file_extension": 1,
                    "extract_file_from_path": 1,
                    "extract_file_name": 4,
                    "extract_file_name_and_create_temp": 1,
                    "extract_file_name_and_create_temp_file": 1,
                    "extract_file_path_and_create_temp_file": 1,
                    "extract_filename_and_create_temp": 1,
                    "extract_filename_and_create_temp_file": 4,
                    "extract_filename_and_extension": 1,
                    "extract_filepath_and_create_temp_file": 3,
                    "extract_last_directory": 1,
                    "parse_path_and_create_temp_file": 1,
                    "reverse_and_allocate_file_path": 1,
                    "reverse_and_allocate_filepath": 1,
                    "reverse_extracted_file_path": 1,
                    "reverse_file_name_and_create_temp_file": 1,
                    "reverse_file_path_and_create_temp_file": 1,
                    "reverse_filename": 1,
                    "reverse_filepath": 1,
                    "reverse_string_and_create_temp_file": 1
                },
                "auVar8": {
                    "function_result": 1,
                    "result": 15,
                    "result_buffer": 1,
                    "result_struct": 1,
                    "return_val": 1,
                    "return_value": 12
                },
                "bVar7": {
                    "b": 1,
                    "byte_value": 1,
                    "copy_direction": 1,
                    "counter": 1,
                    "flag": 2,
                    "increment": 1,
                    "is_first_iter": 1,
                    "is_first_slash": 1,
                    "is_last_slash": 1,
                    "is_last_slash_found": 1,
                    "is_null": 2,
                    "is_path_rooted": 1,
                    "is_separator": 1,
                    "is_slash": 3,
                    "is_slash_found": 1,
                    "is_slash_present": 1,
                    "loop_direction": 1,
                    "loop_index": 2,
                    "null_byte": 1,
                    "offset": 1,
                    "path_separator": 1,
                    "reverse_flag": 1,
                    "should_increment_param_1": 1,
                    "slash_counter": 1,
                    "slash_found": 1,
                    "slash_occurrence": 1
                },
                "iVar1": {
                    "mkstemp_result": 1,
                    "result": 7,
                    "temp_file_descriptor": 4
                },
                "lVar3": {
                    "file_name_length": 5,
                    "file_name_start_index": 1,
                    "file_name_starting_index": 1,
                    "file_path_length": 1,
                    "filename_length": 4,
                    "filename_offset": 2,
                    "filename_start_index": 1,
                    "filepath_len": 1,
                    "filepath_length": 4,
                    "input_dir_length": 1,
                    "l_var": 1,
                    "name_length": 1,
                    "path_length": 5,
                    "prefix_length": 3
                },
                "lVar4": {
                    "copy_index": 1,
                    "current_char_index": 1,
                    "current_index": 3,
                    "current_offset": 1,
                    "filename_length": 1,
                    "i": 4,
                    "index": 8,
                    "iterator": 4,
                    "loop_counter": 4,
                    "loop_idx": 1,
                    "loop_index": 1,
                    "loop_var": 1,
                    "position": 1
                },
                "lVar5": {
                    "file_name_end_index": 1,
                    "file_name_length": 1,
                    "filename_index": 1,
                    "filename_length": 3,
                    "last_separator_index": 2,
                    "last_slash_idx": 1,
                    "last_slash_index": 7,
                    "last_slash_offset": 8,
                    "last_slash_position": 1,
                    "path_length": 1,
                    "slash_diff": 1,
                    "slash_index": 3,
                    "slash_position": 1
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 9,
                    "filename": 2,
                    "filepath": 8,
                    "input_filepath": 2,
                    "input_path": 1,
                    "original_path": 1,
                    "path": 7
                },
                "param_2": {
                    "file_descriptor": 26,
                    "output_file_descriptor": 3,
                    "temp_file_descriptor": 2
                },
                "param_3": {
                    "arg3": 1,
                    "constant1": 1,
                    "param3": 1,
                    "param_3": 1,
                    "unknown_param": 1,
                    "unknown_param_1": 3,
                    "unused": 1,
                    "unused1": 1,
                    "unused_param": 5,
                    "unused_param1": 5,
                    "unused_param_1": 8,
                    "unused_parameter_1": 2,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "constant2": 1,
                    "flags": 1,
                    "null_terminator": 1,
                    "param4": 1,
                    "param_4": 1,
                    "some_data": 1,
                    "unknown8": 1,
                    "unknown_param_2": 3,
                    "unused2": 1,
                    "unused_param": 2,
                    "unused_param2": 6,
                    "unused_param_2": 8,
                    "unused_parameter_2": 2,
                    "var4": 1
                },
                "pcVar2": {
                    "file_name": 3,
                    "last_forward_slash": 1,
                    "last_occurrence_of_slash": 1,
                    "last_separator": 2,
                    "last_slash": 16,
                    "last_slash_index": 1,
                    "last_slash_pos": 1,
                    "last_slash_position": 6
                },
                "pcVar6": {
                    "allocated_memory": 2,
                    "allocated_path": 1,
                    "copied_path": 1,
                    "copy_ptr": 1,
                    "file_name": 1,
                    "new_file_path": 4,
                    "new_filename": 3,
                    "new_filepath": 4,
                    "new_path": 5,
                    "output_filepath": 1,
                    "temp_file_path": 4,
                    "temp_filepath": 4
                }
            },
            "called": [
                "strrchr",
                "mkstemp",
                "FUN_00102ba1",
                "xmalloc"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "code": "\nundefined  [16] extract_file_name_and_create_temp_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long index;\n  long last_slash_offset;\n  char *new_path;\n  byte is_slash;\n  undefined result [16];\n  \n  is_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_slash_offset = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_offset + 0xb);\n    path_length = last_slash_offset + 1;\n    new_path = last_slash;\n    for (index = last_slash_offset; index != 0; index = index + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)is_slash * -2 + 1;\n      new_path = new_path + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[last_slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_path = last_slash;\n  }\n  result._8_8_ = unused_param_2;\n  result._0_8_ = new_path;\n  return result;\n}\n\n",
            "current_name": "extract_file_name_and_create_temp_001057a0",
            "entrypoint": "0x001057a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001057a0": "extract_file_name_and_create_temp_001057a0",
                "auVar8": "result",
                "bVar7": "is_slash",
                "iVar1": "result",
                "lVar3": "path_length",
                "lVar4": "index",
                "lVar5": "last_slash_offset",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "pcVar2": "last_slash",
                "pcVar6": "new_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105830": {
            "additional_data": {
                "FUN_00105830": {
                    "cstring_manipulator": 1,
                    "decompiled_function": 1,
                    "extract_and_copy_substring": 2,
                    "extract_base_name": 1,
                    "extract_file_name": 3,
                    "extract_filename": 1,
                    "extract_param_string": 1,
                    "extract_string": 5,
                    "extract_substring": 8,
                    "extracted_file_name": 1,
                    "extracted_string": 2,
                    "reverse_and_resize_string": 1,
                    "reverse_extracted_code": 1,
                    "reverse_string": 3
                },
                "__s": {
                    "base_name": 14,
                    "basename": 2,
                    "basename_ptr": 1,
                    "basename_result": 5,
                    "file_name": 1,
                    "filename": 1,
                    "source_string": 2,
                    "temp_string": 1
                },
                "auVar6": {
                    "result": 17,
                    "result_array": 1,
                    "result_string": 1,
                    "return_struct": 1,
                    "return_val": 1,
                    "return_value": 6,
                    "return_values": 1,
                    "return_variable": 1
                },
                "bVar5": {
                    "byte_counter": 1,
                    "byte_val": 1,
                    "byte_var": 6,
                    "counter": 1,
                    "flag": 5,
                    "is_negative": 6,
                    "is_zero": 1,
                    "loop_control": 1,
                    "loop_counter": 4,
                    "offset": 1
                },
                "lVar1": {
                    "data_pointer": 1,
                    "data_ptr_value": 1,
                    "file_address": 1,
                    "ptr1": 1,
                    "struct_member1": 1,
                    "struct_offset": 2,
                    "struct_pointer": 1,
                    "struct_pointer_value": 1,
                    "struct_ptr": 1,
                    "struct_value": 1,
                    "structure_pointer": 1
                },
                "param_1": {
                    "base_path": 1,
                    "file_name": 3,
                    "file_path": 4,
                    "filename": 6,
                    "input_file_path": 1,
                    "input_string": 12,
                    "original_string": 2,
                    "source": 1,
                    "source_string": 1
                },
                "param_2": {
                    "additional_data": 1,
                    "address": 1,
                    "buffer_pointer": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_ptr": 2,
                    "destination": 1,
                    "file_info_ptr": 1,
                    "info_ptr": 2,
                    "input_parameters": 1,
                    "string_info": 3,
                    "struct_address": 4,
                    "struct_pointer": 4,
                    "struct_ptr": 5,
                    "structure": 1,
                    "structure_address": 2
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 2,
                    "param3": 3,
                    "param_3": 3,
                    "parameter3": 1,
                    "unknown_value1": 1,
                    "unknown_value_1": 1,
                    "unused1": 1,
                    "unused_param": 3,
                    "unused_param1": 3,
                    "unused_param3": 1,
                    "unused_param_1": 2,
                    "unused_param_3": 1,
                    "unused_parameter": 1,
                    "unused_parameter1": 1,
                    "var1": 1,
                    "var3": 1,
                    "var_3": 1
                },
                "param_4": {
                    "additional_info": 1,
                    "arg2": 1,
                    "arg4": 2,
                    "output_param": 1,
                    "output_string": 1,
                    "param4": 3,
                    "param_4": 3,
                    "parameter4": 1,
                    "result": 2,
                    "unknown_value2": 1,
                    "unknown_value_2": 1,
                    "unused2": 1,
                    "unused_param2": 3,
                    "unused_param4": 1,
                    "unused_param_2": 2,
                    "unused_param_4": 1,
                    "unused_parameter2": 1,
                    "var2": 1,
                    "var4": 1,
                    "var_4": 1
                },
                "pcVar4": {
                    "dest": 3,
                    "dest_ptr": 2,
                    "dest_string": 2,
                    "destination_ptr": 1,
                    "destination_string": 2,
                    "dst_pointer": 1,
                    "new_file_name": 1,
                    "new_filename": 1,
                    "new_filename_ptr": 1,
                    "new_string": 1,
                    "new_string_pointer": 1,
                    "new_string_ptr": 1,
                    "output_file_path": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_string": 10,
                    "substring": 1
                },
                "sVar2": {
                    "base_name_len": 1,
                    "base_name_length": 7,
                    "base_path_length": 1,
                    "file_name_length": 1,
                    "file_path_length": 1,
                    "filename_length": 4,
                    "input_length": 2,
                    "input_string_length": 2,
                    "len": 1,
                    "source_length": 2,
                    "string_length": 7
                },
                "uVar3": {
                    "byte_length": 1,
                    "byte_value": 4,
                    "copied_length": 1,
                    "desired_length": 1,
                    "max_copy_length": 1,
                    "max_file_name_length": 1,
                    "max_input_length": 1,
                    "max_len": 1,
                    "max_length": 6,
                    "max_substring_length": 1,
                    "requested_length": 1,
                    "required_length": 1,
                    "size": 1,
                    "size_limit": 1,
                    "specified_length": 1,
                    "string_length": 1,
                    "struct_member2": 1,
                    "substr_length": 1,
                    "substring_length": 5
                }
            },
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "calling": [
                "FUN_00105480",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "code": "\nundefined  [16] extract_and_copy_substring_00105830(char *input_string,long struct_ptr,undefined8 param_3,undefined8 param4)\n\n{\n  long struct_offset;\n  size_t base_name_length;\n  char *base_name;\n  ulong max_length;\n  char *output_string;\n  byte byte_var;\n  undefined result [16];\n  \n  byte_var = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    input_string = base_name;\n    if ((DAT_0010d5fa != '\\0') && (struct_ptr != 0)) {\n      base_name_length = strlen(base_name);\n      max_length = (ulong)*(byte *)(*(long *)(struct_ptr + 8) + 0x1e);\n      if (max_length < base_name_length) {\n        input_string = (char *)xmalloc(max_length + 1);\n        struct_offset = *(long *)(struct_ptr + 8);\n        output_string = input_string;\n        for (max_length = (ulong)*(byte *)(struct_offset + 0x1e); max_length != 0; max_length = max_length - 1) {\n          *output_string = *base_name;\n          base_name = base_name + (ulong)byte_var * -2 + 1;\n          output_string = output_string + (ulong)byte_var * -2 + 1;\n        }\n        input_string[*(byte *)(struct_offset + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param4;\n  result._0_8_ = input_string;\n  return result;\n}\n\n",
            "current_name": "extract_and_copy_substring_00105830",
            "entrypoint": "0x00105830",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105830": "extract_and_copy_substring_00105830",
                "__s": "base_name",
                "auVar6": "result",
                "bVar5": "byte_var",
                "lVar1": "struct_offset",
                "param_1": "input_string",
                "param_2": "struct_ptr",
                "param_4": "param4",
                "pcVar4": "output_string",
                "sVar2": "base_name_length",
                "uVar3": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105870": {
            "additional_data": {
                "0x0": {
                    "null": 1
                },
                "0xf0": {
                    "file_size": 1
                },
                "DAT_0010d638": {
                    "default_filename": 1
                },
                "DAT_0010d640": {
                    "default_mode": 1
                },
                "FUN_00105870": {
                    "find_file": 2,
                    "find_file_address": 1,
                    "find_file_in_list": 1,
                    "find_file_offset": 2,
                    "find_file_pointer": 1,
                    "find_filename": 2,
                    "find_last_entry": 1,
                    "find_last_file_index": 1,
                    "find_last_instance": 1,
                    "find_last_match": 3,
                    "find_last_matching_address": 1,
                    "find_last_matching_file": 1,
                    "find_last_matching_filename": 1,
                    "find_last_matching_pointer": 1,
                    "find_last_occurrence": 2,
                    "find_match_in_list": 1,
                    "find_matching_entry": 4,
                    "find_matching_file": 1,
                    "find_matching_file_name": 1,
                    "find_matching_pointer": 2,
                    "find_next_matching_pointer": 1
                },
                "filename_cmp": {
                    "compare_file_names": 1,
                    "compare_filename": 1
                },
                "iVar1": {
                    "cmp_result": 14,
                    "compare_result": 1,
                    "comparison_result": 16
                },
                "iVar3": {
                    "action_type": 1,
                    "comparison_type": 2,
                    "file_offset_type": 1,
                    "file_type": 2,
                    "filename_type": 1,
                    "loop_condition": 1,
                    "mode": 11,
                    "search_mode": 6,
                    "search_option": 1,
                    "search_type": 5
                },
                "param_1": {
                    "addresses": 1,
                    "array": 4,
                    "entries": 2,
                    "entry_array": 2,
                    "entry_list": 1,
                    "file_addresses": 1,
                    "file_array": 3,
                    "file_list": 8,
                    "file_offsets": 2,
                    "file_pointers": 1,
                    "input_array": 1,
                    "list": 1,
                    "pointer_array": 3,
                    "pointers": 1
                },
                "param_2": {
                    "address_count": 1,
                    "array_length": 1,
                    "array_size": 3,
                    "comparison_option": 1,
                    "comparison_type": 1,
                    "count": 3,
                    "entry_count": 2,
                    "file_array_size": 1,
                    "file_count": 2,
                    "file_offset_count": 1,
                    "input_size": 1,
                    "length": 4,
                    "list_length": 2,
                    "num_addresses": 1,
                    "num_entries": 3,
                    "num_files": 3,
                    "search_mode": 1
                },
                "param_3": {
                    "desired_filename": 1,
                    "desired_value": 1,
                    "file_name": 1,
                    "filename": 9,
                    "search_address": 1,
                    "search_filename": 1,
                    "search_term": 1,
                    "search_value": 2,
                    "target": 3,
                    "target_element": 1,
                    "target_file": 3,
                    "target_file_name": 1,
                    "target_filename": 6
                },
                "uVar2": {
                    "default_file": 2,
                    "default_file_name": 1,
                    "default_filename": 5,
                    "default_search_address": 1,
                    "default_target": 3,
                    "default_target_filename": 1,
                    "default_term": 1,
                    "default_value": 1,
                    "target_filename": 1
                }
            },
            "called": [
                "FUN_00102cd9"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "code": "\nlong * find_last_file_index_00105870(long *file_list,int length,undefined8 filename)\n\n{\n  int comparison_result;\n  undefined8 default_filename;\n  int mode;\n  \n  default_filename = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_filename = filename;\n    mode = length;\n  }\n  if (mode == 3) {\n    for (; *file_list != 0; file_list = (long *)(*file_list + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*file_list != (undefined8 *)0x0; file_list = (long *)(*file_list + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*file_list,default_filename);\n      if (comparison_result == 0) {\n        if (mode != 2) {\n          return file_list;\n        }\n        return (long *)(*file_list + 0xf0);\n      }\n    }\n  }\n  return file_list;\n}\n\n",
            "current_name": "find_last_file_index_00105870",
            "entrypoint": "0x00105870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105870": "find_last_file_index_00105870",
                "filename_cmp": "compare_file_names",
                "iVar1": "comparison_result",
                "iVar3": "mode",
                "param_1": "file_list",
                "param_2": "length",
                "param_3": "filename",
                "uVar2": "default_filename"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001058b0": {
            "additional_data": {
                "DAT_0010d2d0": {
                    "flag2": 1
                },
                "DAT_0010d5e0": {
                    "archive_buffer": 1,
                    "current_pointer": 1,
                    "output_file_data": 1
                },
                "DAT_0010d5f8": {
                    "archive_flag_5": 1,
                    "flag4": 1,
                    "skip_special_archives": 1
                },
                "DAT_0010d5f9": {
                    "archive_flag_4": 1,
                    "flag3": 1,
                    "skip_corrupt_files": 1
                },
                "DAT_0010d5fa": {
                    "archive_flag_2": 1,
                    "flag1": 1,
                    "print_full_info": 1
                },
                "DAT_0010d618": {
                    "archive_file": 1,
                    "current_stream": 1,
                    "output_file": 1
                },
                "DAT_0010d648": {
                    "archive_flag_1": 1,
                    "unknown_value": 1
                },
                "FUN_001058b0": {
                    "archive_to_file": 1,
                    "extract_and_print_archive": 1,
                    "extract_and_print_archive_contents": 2,
                    "extract_and_print_archive_data": 1,
                    "extract_and_print_archive_details": 1,
                    "extract_and_print_archive_file_info": 2,
                    "extract_and_print_archive_info": 12,
                    "extract_and_print_archive_information": 2,
                    "extract_and_print_file": 1,
                    "extract_and_print_file_info": 1,
                    "extract_and_print_file_information": 1,
                    "extract_and_print_file_metadata": 1,
                    "extract_and_write_archive": 1,
                    "process_archive": 2,
                    "write_archive_to_file": 2
                },
                "_DAT_0010d2d0": {
                    "archive_flag_3": 1,
                    "skip": 1
                },
                "__format": {
                    "corrupt_time_msg": 1,
                    "error_message": 3,
                    "error_message_format": 6,
                    "format": 2,
                    "format_str": 1,
                    "format_string": 8,
                    "message_format": 1,
                    "time_data_message": 1,
                    "time_error_message": 2,
                    "time_error_msg": 1,
                    "time_format": 4
                },
                "__ptr": {
                    "archive_path": 1,
                    "copied_file_name": 1,
                    "duplicate_file_path": 2,
                    "duplicate_pointer": 1,
                    "duplicate_ptr": 1,
                    "duplicated_string": 1,
                    "file_info": 1,
                    "file_name": 6,
                    "file_path": 3,
                    "file_path_dup": 1,
                    "file_paths_copy": 1,
                    "file_ptr": 1,
                    "filename": 2,
                    "path": 1,
                    "ptr": 1,
                    "str_ptr": 1,
                    "temp_file": 1,
                    "temp_file_name": 3,
                    "temp_file_path": 1,
                    "temp_pointer": 1
                },
                "__stream": {
                    "archive_file": 1,
                    "file": 1,
                    "file_ptr": 2,
                    "file_stream": 8,
                    "output_stream": 1,
                    "temp_file": 14,
                    "temp_file_pointer": 1,
                    "temp_file_stream": 3
                },
                "_uStack0000000000000020": {
                    "file_info_mask": 1,
                    "full_mode": 1,
                    "permissions_2": 1
                },
                "bfd_close": {
                    "close_file": 1
                },
                "bfd_fdopenw": {
                    "open_file_stream": 1
                },
                "bfd_set_archive_head": {
                    "set_archive_header": 1
                },
                "bfd_set_format": {
                    "set_file_format": 1
                },
                "cStack_31": {
                    "archive_flag2": 1,
                    "c_stack2": 1,
                    "char_stack_var2": 1,
                    "file_permission_w": 1,
                    "file_type": 1,
                    "group_permission": 1,
                    "group_permissions_char": 1,
                    "is_executable": 1,
                    "is_set_gid": 1,
                    "is_set_gid_char": 1,
                    "is_setuid_char": 1,
                    "is_whiteout": 1,
                    "is_writable": 2,
                    "permission_char2": 2,
                    "permission_flag": 1,
                    "permissions2": 1,
                    "permissions_symbol": 1,
                    "setgid_flag": 1,
                    "setuid_char": 1,
                    "sticky_bit_char": 1,
                    "temp_stack_var6": 1,
                    "third_char": 1,
                    "type_code3": 1,
                    "writable_flag_char": 1,
                    "write_permission": 2
                },
                "cStack_32": {
                    "archive_flag1": 1,
                    "c_stack1": 1,
                    "char_stack_var": 1,
                    "executable_flag": 1,
                    "executable_flag_char": 1,
                    "file_permission_r": 1,
                    "file_permissions": 1,
                    "is_executable": 1,
                    "is_readable": 1,
                    "is_set_uid": 1,
                    "is_set_uid_char": 1,
                    "is_setgid_char": 1,
                    "is_symbolic_link": 2,
                    "owner_permission": 1,
                    "owner_permissions_char": 1,
                    "permission_char1": 2,
                    "permissions": 1,
                    "permissions1": 1,
                    "read_permission": 2,
                    "second_char": 1,
                    "set_uid_gid_char": 1,
                    "setgid_char": 1,
                    "setuid_flag": 1,
                    "temp_stack_var5": 1,
                    "type_code2": 1
                },
                "cVar1": {
                    "archive_result": 1,
                    "char1": 2,
                    "char_val": 2,
                    "char_value": 3,
                    "char_var": 2,
                    "char_var1": 2,
                    "error_status": 1,
                    "flag": 2,
                    "is_success": 1,
                    "result": 8,
                    "return_value": 1,
                    "status": 3,
                    "success": 1
                },
                "close": {
                    "close_file": 1
                },
                "copy_and_delete_file_00105bc0": {
                    "copy_and_delete_file": 1
                },
                "dcgettext": {
                    "get_translation": 1
                },
                "dup": {
                    "duplicate_file_descriptor": 1
                },
                "fprintf": {
                    "print_to_file": 1
                },
                "fputc": {
                    "write_char_to_file": 1
                },
                "fputs": {
                    "write_to_file": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "iVar3": {
                    "dup_fd": 1,
                    "duplicate_file_stream": 1,
                    "fd": 3,
                    "file_descriptor": 16,
                    "int_var": 1,
                    "temp_fd": 2,
                    "temp_file_descriptor": 3,
                    "temp_var2": 1
                },
                "in_stack_00000028": {
                    "device_number": 2,
                    "file_descriptor_copy": 1,
                    "file_group_id": 1,
                    "file_owner": 4,
                    "file_permissions": 2,
                    "file_size": 8,
                    "file_type": 1,
                    "group_id": 1,
                    "in_stack28": 1,
                    "inode": 3,
                    "num_links": 2,
                    "stack_var2": 1,
                    "stat_uid": 1,
                    "temp_stack_var2": 1,
                    "u_stack2": 1,
                    "uint_stack_var2": 1
                },
                "in_stack_00000038": {
                    "file_modified_time": 1,
                    "file_name_length": 1,
                    "file_size": 9,
                    "in_stack38": 1,
                    "inode_number": 1,
                    "last_modified": 1,
                    "last_modified_time": 2,
                    "modification_time": 2,
                    "size": 1,
                    "stack_var3": 1,
                    "stat_size": 1,
                    "temp_stack_var3": 1,
                    "time_stamp": 1,
                    "timedate": 1,
                    "timestamp": 5,
                    "u_stack3": 1,
                    "uint_stack_var3": 1
                },
                "local_3c": {
                    "error_code": 6,
                    "error_codes": 2,
                    "error_values": 1,
                    "extract_result": 1,
                    "fd_info": 1,
                    "file_descriptor": 1,
                    "file_descriptor_array": 1,
                    "file_errors": 1,
                    "local_array": 1,
                    "return_code": 1,
                    "status": 1,
                    "temp_array1": 1,
                    "temp_fd_and_error": 1,
                    "temp_fd_arr": 1,
                    "temp_file": 1,
                    "temp_file_desc_holder": 1,
                    "temp_file_descriptor": 5,
                    "temp_file_fd": 1,
                    "temp_file_params": 1,
                    "temp_info": 1
                },
                "param_1": {
                    "archive": 1,
                    "archive_data": 1,
                    "archive_file": 2,
                    "archive_info": 4,
                    "archive_name": 1,
                    "archive_paths": 2,
                    "arguments": 1,
                    "file_info": 1,
                    "file_information": 1,
                    "file_params": 1,
                    "file_paths": 8,
                    "file_paths_array": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_files": 1,
                    "parameters": 2,
                    "params": 2
                },
                "ppcVar5": {
                    "archive": 2,
                    "archive_format": 1,
                    "bfd_data": 1,
                    "bfd_file": 4,
                    "bfd_file_data": 1,
                    "bfd_file_pointer": 1,
                    "bfd_format_ptr": 1,
                    "file": 1,
                    "file_buffer": 1,
                    "file_data": 2,
                    "file_data_pointer": 1,
                    "file_description": 1,
                    "file_descriptors": 1,
                    "file_format": 1,
                    "file_format_ptr": 1,
                    "file_pointer": 2,
                    "format_strings_ptr": 1,
                    "formatted_data": 1,
                    "formatted_file": 1,
                    "opened_file": 1,
                    "stream_pointer": 1,
                    "string_array": 1,
                    "string_array_ptr": 1,
                    "temp_file_as_bfd": 1,
                    "temp_file_ptr": 1
                },
                "print_error_message_and_exit_00107c10": {
                    "print_error_message_and_exit": 1
                },
                "sprintf": {
                    "convert_to_string": 1
                },
                "stack0xffffffffffffffd8": {
                    "corrupt_data": 1,
                    "error_message": 1,
                    "time_data": 2
                },
                "uStack0000000000000020": {
                    "file_info": 1,
                    "file_mode": 12,
                    "file_permissions": 4,
                    "file_stats": 1,
                    "file_type_permissions": 1,
                    "mode_and_permissions": 1,
                    "perm": 1,
                    "permission_bits": 1,
                    "permissions": 3,
                    "stack_var1": 1,
                    "stat_mode": 1,
                    "temp_stack_var1": 1,
                    "u_stack1": 1,
                    "u_stack20": 1,
                    "uint_stack_var": 1
                },
                "uStack_33": {
                    "file_type": 7,
                    "file_type_char": 8,
                    "file_type_character": 1,
                    "file_type_code": 1,
                    "file_type_flag": 1,
                    "first_char": 1,
                    "link_indicator": 1,
                    "temp_stack_var4": 1,
                    "type": 1,
                    "type_char": 1,
                    "type_code1": 1,
                    "type_flag": 1,
                    "u_stack4": 1,
                    "uchar_stack_var": 1
                },
                "uVar2": {
                    "archive_flags": 1,
                    "bitwise_var": 1,
                    "file_mode": 1,
                    "flag": 1,
                    "flags": 15,
                    "format": 1,
                    "format_flags": 3,
                    "new_flags": 1,
                    "permission": 1,
                    "permission_bits": 1,
                    "temp_var": 1,
                    "uint_var": 1,
                    "var1": 2
                },
                "uVar4": {
                    "archive_head": 1,
                    "archive_header": 1,
                    "archive_identifier": 1,
                    "error_message": 1,
                    "file_name": 2,
                    "file_size": 2,
                    "format_str": 1,
                    "root_filename": 1,
                    "temp_file": 5,
                    "temp_file_name": 3,
                    "temp_file_path": 1,
                    "temp_file_pointer": 1,
                    "temp_file_ptr": 1,
                    "temp_var3": 1,
                    "time_stamp": 1,
                    "uint_var2": 1,
                    "var2": 1
                },
                "xexit": {
                    "exit_program": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [
                "close",
                "bfd_fdopenw",
                "FUN_001057a0",
                "dcgettext",
                "xstrdup",
                "bfd_set_format",
                "FUN_00107c10"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00107650"
            ],
            "code": "\n\n\nvoid extract_and_print_archive_file_info_001058b0(undefined8 *file_paths)\n\n{\n  char result;\n  uint flags;\n  int file_descriptor;\n  undefined8 temp_file;\n  char *format_string;\n  void *file_name;\n  FILE *temp_file;\n  char **bfd_file;\n  uint file_mode;\n  uint file_size;\n  undefined8 file_size;\n  int error_code [2];\n  undefined file_type_char;\n  char permission_char1;\n  char is_writable;\n  \n  temp_file = file_paths[0x1e];\n  error_code[0] = -1;\n  file_name = (void *)xstrdup(*file_paths);\n  temp_file = (FILE *)extract_file_name_and_create_temp_001057a0(file_name,error_code);\n  file_descriptor = error_code[0];\n  if (temp_file != (FILE *)0x0) {\n    DAT_0010d618 = temp_file;\n    bfd_file = (char **)bfd_fdopenw(temp_file,*(undefined8 *)file_paths[1],error_code[0]);\n    if (bfd_file != (char **)0x0) {\n      DAT_0010d5e0 = bfd_file;\n      bfd_set_format(bfd_file,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)bfd_file + 0x49) & 0xfffffff7;\n      *(char *)((long)bfd_file + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)file_paths + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)bfd_file + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(bfd_file,temp_file);\n        if (result != '\\0') break;\n        flags = print_error_message_and_exit(file_name);\nLAB_00102d37:\n        *(uint *)((long)bfd_file + 0x44) = *(uint *)((long)bfd_file + 0x44) | 0x100000;\n      }\n      file_descriptor = duplicate_file_descriptor(file_descriptor);\n      result = bfd_close(bfd_file);\n      if (result == '\\0') {\n        print_error_message_and_exit(file_name);\n        format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&time_data,format_string);\n        flags = file_mode & 0xf000;\n        if (flags == 0x4000) {\n          file_type_char = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type_char = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type_char = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type_char = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type_char = 0x73;\n        }\n        else {\n          file_type_char = 0x70;\n          if (flags != 0x1000) {\n            file_type_char = 0x2d;\n          }\n        }\n        permission_char1 = (-((full_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        is_writable = (-((full_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(temp_file,\"%s %ld/%ld %6lu %s \",&permission_char1,full_mode >> 0x20,\n                (ulong)file_size,file_size,&time_data,\n                full_mode & 0xffffffff);\n        fputs(*bfd_file,temp_file);\n        if ((char)file_paths != '\\0') {\n          if ((*(byte *)((long)bfd_file + 0x49) & 0x10) == 0) {\n            if (bfd_file[0xb] != (char *)0x0) {\n              fprintf(temp_file,\" 0x%lx\");\n            }\n          }\n          else if (bfd_file[0xc] != (char *)0x0) {\n            fprintf(temp_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,temp_file);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      close_file(file_paths);\n      file_descriptor = copy_and_delete_file(temp_file,file_name,file_descriptor);\n      if (file_descriptor == 0) {\n        free(file_name);\n        free(temp_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close_file(file_descriptor);\n    print_error_message_and_exit(file_name);\n  }\n  temp_file = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  print_error_message_and_exit(temp_file);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "current_name": "extract_and_print_archive_file_info_001058b0",
            "entrypoint": "0x001058b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001058b0": "extract_and_print_archive_file_info_001058b0",
                "__format": "format_string",
                "__ptr": "file_name",
                "__stream": "temp_file",
                "_uStack0000000000000020": "full_mode",
                "bfd_close": "close_file",
                "bfd_fdopenw": "open_file_stream",
                "bfd_set_archive_head": "set_archive_header",
                "bfd_set_format": "set_file_format",
                "cStack_31": "is_writable",
                "cStack_32": "permission_char1",
                "cVar1": "result",
                "close": "close_file",
                "copy_and_delete_file_00105bc0": "copy_and_delete_file",
                "dcgettext": "get_translation",
                "dup": "duplicate_file_descriptor",
                "fprintf": "print_to_file",
                "fputc": "write_char_to_file",
                "fputs": "write_to_file",
                "free": "deallocate_memory",
                "iVar3": "file_descriptor",
                "in_stack_00000028": "file_size",
                "in_stack_00000038": "file_size",
                "local_3c": "error_code",
                "param_1": "file_paths",
                "ppcVar5": "bfd_file",
                "print_error_message_and_exit_00107c10": "print_error_message_and_exit",
                "sprintf": "convert_to_string",
                "stack0xffffffffffffffd8": "time_data",
                "uStack0000000000000020": "file_mode",
                "uStack_33": "file_type_char",
                "uVar2": "flags",
                "uVar4": "temp_file",
                "xexit": "exit_program",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105a20": {
            "additional_data": {
                "DAT_0010d5e8": {
                    "base_output_path": 1,
                    "base_path_global": 1
                },
                "DAT_0010d60c": {
                    "is_verbose": 1,
                    "print_flag": 1
                },
                "DAT_0010d618": {
                    "output_path_global": 1,
                    "output_path_with_base": 1
                },
                "FUN_00105a20": {
                    "create_output_file": 3,
                    "extract_and_backup_file": 1,
                    "extract_and_open_file": 1,
                    "extract_archive_member": 5,
                    "extract_file_name": 1,
                    "extract_file_path": 2,
                    "extract_output_path": 1,
                    "improve_pathname": 1,
                    "process_file": 1,
                    "process_file_path": 1,
                    "process_input_path": 1,
                    "process_output": 1,
                    "process_output_file": 2,
                    "process_output_path": 8,
                    "process_path": 1,
                    "reversed_file_open": 1
                },
                "LAB_00102e9a": {
                    "handle_illegal_path": 1,
                    "illegal_path_label": 1
                },
                "concat": {
                    "concatenate_strings": 1
                },
                "fopen": {
                    "open_file": 1,
                    "open_output_file": 1
                },
                "pFVar5": {
                    "file": 5,
                    "file_descriptor": 1,
                    "file_pointer": 14,
                    "file_ptr": 5,
                    "output_file": 6
                },
                "param_1": {
                    "file_path": 4,
                    "input_path": 4,
                    "output_path": 19,
                    "path": 1,
                    "pathname": 3
                },
                "pcVar1": {
                    "archive_path": 1,
                    "base_dir": 9,
                    "base_directory": 3,
                    "base_input_path": 1,
                    "base_name": 1,
                    "base_output_path": 1,
                    "base_path": 10,
                    "basepath": 1,
                    "current_dir": 1,
                    "current_directory": 1,
                    "current_path": 2
                },
                "pcVar2": {
                    "current_char": 5,
                    "current_dir": 4,
                    "current_path": 15,
                    "current_path_segment": 1,
                    "current_position": 1,
                    "next_path": 2,
                    "path": 1,
                    "path_ptr": 1,
                    "path_segment": 1
                },
                "perror": {
                    "print_error": 1
                },
                "printf": {
                    "print_message": 1,
                    "print_output": 1
                },
                "sVar6": {
                    "archive_path_length": 1,
                    "base_dir_length": 6,
                    "base_directory_length": 1,
                    "base_len": 1,
                    "base_length": 3,
                    "base_name_length": 3,
                    "base_path_length": 5,
                    "basename_length": 1,
                    "length": 4,
                    "path_length": 4,
                    "pathname_length": 1
                },
                "uVar3": {
                    "base_file_name": 1,
                    "base_name": 20,
                    "base_name_result": 1,
                    "basename": 2,
                    "basename_result": 4,
                    "extracted_name": 1,
                    "extracted_path": 1,
                    "new_file_name": 1
                },
                "uVar4": {
                    "error_message": 26,
                    "error_msg": 5
                },
                "xexit": {
                    "exit_program": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\nvoid process_output_path_00105a20(char *output_path)\n\n{\n  char *base_path;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t base_dir_length;\n  \n  base_path = DAT_0010d5e8;\n  DAT_0010d618 = output_path;\n  if (*output_path == '/') {\nhandle_illegal_path:\n    base_name = lbasename();\n    base_path = DAT_0010d618;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_formatted_error_message_00107920(error_message,base_path,base_name);\n    DAT_0010d618 = (char *)base_name;\n    write_to_file_and_exit_00105a68();\n    return;\n  }\n  do {\n    if (*output_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (base_dir_length = strlen(DAT_0010d5e8), base_dir_length != 0)) {\n        if (base_path[base_dir_length - 1] == '/') {\n          DAT_0010d618 = (char *)concatenate_strings(base_path,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concatenate_strings(base_path,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_pointer = fopen(DAT_0010d618,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = output_path;\n    if ((*output_path == '.') && (current_path = output_path + 1, output_path[1] == '.')) {\n      current_path = output_path + 2;\n      if ((output_path[2] == '/') || (output_path[2] == '\\0')) goto handle_illegal_path;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; output_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_output_path_00105a20",
            "entrypoint": "0x00105a20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105a20": "process_output_path_00105a20",
                "LAB_00102e9a": "handle_illegal_path",
                "concat": "concatenate_strings",
                "fopen": "open_file",
                "pFVar5": "file_pointer",
                "param_1": "output_path",
                "pcVar1": "base_path",
                "pcVar2": "current_path",
                "perror": "print_error",
                "printf": "print_message",
                "sVar6": "base_dir_length",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105a68": {
            "additional_data": {
                "DAT_0010d5e8": {
                    "directory": 1
                },
                "DAT_0010d60c": {
                    "should_print": 1
                },
                "DAT_0010d618": {
                    "file_path": 1
                },
                "FUN_00105a68": {
                    "create_and_write_file": 1,
                    "create_file_from_path": 1,
                    "create_file_with_path": 1,
                    "create_output_file": 2,
                    "generate_file_path": 1,
                    "generate_output_file": 1,
                    "initialize_and_write_file": 1,
                    "initialize_output_file": 2,
                    "prepare_and_open_file": 1,
                    "process_file": 2,
                    "process_file_and_print": 1,
                    "save_file_and_print": 1,
                    "write_file": 1,
                    "write_to_file": 14,
                    "write_to_file_and_exit": 1
                },
                "pFVar2": {
                    "file": 1,
                    "file_pointer": 21,
                    "file_ptr": 4,
                    "output_file": 3,
                    "output_file_handle": 1,
                    "output_file_pointer": 1
                },
                "pcVar1": {
                    "base_directory": 2,
                    "base_path": 5,
                    "directory_path": 15,
                    "file_directory": 1,
                    "file_path": 2,
                    "input_directory": 4,
                    "path": 1,
                    "source_directory": 1
                },
                "sVar3": {
                    "base_path_length": 4,
                    "directory_length": 8,
                    "directory_path_length": 6,
                    "file_directory_length": 1,
                    "file_length": 1,
                    "file_path_length": 1,
                    "file_size": 1,
                    "input_directory_length": 2,
                    "input_length": 1,
                    "length": 1,
                    "path_length": 3,
                    "source_length": 1,
                    "string_length": 1
                }
            },
            "called": [
                "printf",
                "xexit",
                "fopen",
                "FUN_00102e57",
                "strlen",
                "perror",
                "concat"
            ],
            "calling": [
                "FUN_00102e6f"
            ],
            "code": "\nvoid write_to_file_and_exit_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *file_pointer;\n  size_t directory_length;\n  \n  directory_path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directory_length = strlen(DAT_0010d5e8);\n    if (directory_length != 0) {\n      if (directory_path[directory_length - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directory_path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directory_path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "write_to_file_and_exit_00105a68",
            "entrypoint": "0x00105a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105a68": "write_to_file_and_exit_00105a68",
                "pFVar2": "file_pointer",
                "pcVar1": "directory_path",
                "sVar3": "directory_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105ae0": {
            "additional_data": {
                "FUN_00105ae0": {
                    "process_and_archive_files": 1,
                    "process_archived_files": 30
                },
                "param_1": {
                    "archive": 1,
                    "archive_files": 1,
                    "archive_handle": 1,
                    "archive_input": 1,
                    "archive_location": 1,
                    "archive_path": 10,
                    "arg1": 2,
                    "file_buffer": 1,
                    "file_parameter": 1,
                    "file_path": 1,
                    "file_ptr": 1,
                    "input_file": 2,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 6
                },
                "param_2": {
                    "archive_metadata": 1,
                    "archive_output": 1,
                    "archive_ptr": 1,
                    "arg2": 2,
                    "data_parameter": 1,
                    "destination_path": 2,
                    "extract_location": 1,
                    "file_size": 1,
                    "input_param2": 1,
                    "input_param_2": 6,
                    "output_dir": 4,
                    "output_directory": 1,
                    "output_file": 2,
                    "output_param": 1,
                    "output_path": 5,
                    "target_path": 1
                },
                "param_3": {
                    "arg3": 2,
                    "file_input": 1,
                    "flag1": 2,
                    "flag_1": 4,
                    "flag_param": 1,
                    "flags": 2,
                    "input_flag_1": 1,
                    "input_param_3": 4,
                    "option1": 2,
                    "option_1": 7,
                    "param_3": 3,
                    "unknown_val": 1
                },
                "param_4": {
                    "arg4": 2,
                    "file_output": 1,
                    "flag2": 2,
                    "flag_2": 4,
                    "input_flag_2": 1,
                    "input_param_4": 4,
                    "option2": 2,
                    "option_2": 7,
                    "option_param": 1,
                    "options": 2,
                    "param_4": 3,
                    "unknown_var": 1
                }
            },
            "called": [
                "FUN_00105af0"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\nvoid process_archived_files_00105ae0(undefined8 archive_path,undefined8 input_param_2,undefined option_1,undefined option_2)\n\n{\n  process_archived_files_00105ae0_00105af0(archive_path,input_param_2,option_1,option_2);\n  return;\n}\n\n",
            "current_name": "process_archived_files_00105ae0",
            "entrypoint": "0x00105ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105ae0": "process_archived_files_00105ae0",
                "param_1": "archive_path",
                "param_2": "input_param_2",
                "param_3": "option_1",
                "param_4": "option_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105af0": {
            "additional_data": {
                "FUN_00105af0": {
                    "archive_file_processor": 1,
                    "archive_function": 1,
                    "extract_archived_files": 2,
                    "process_archived_files": 3,
                    "process_binary_files": 1,
                    "process_files": 13,
                    "process_files_recursive": 1,
                    "reverse_and_assign": 1,
                    "reverse_and_assign_value": 2,
                    "reverse_archived_files": 2
                },
                "cVar1": {
                    "check_result": 6,
                    "format_check_result": 8,
                    "format_status": 1,
                    "is_bfd_format": 2,
                    "is_bfd_format_checked": 1,
                    "is_bfd_format_valid": 3,
                    "is_bfd_valid": 1,
                    "is_valid": 1,
                    "is_valid_format": 6,
                    "valid_format": 1
                },
                "lVar3": {
                    "archived_file": 18,
                    "archived_file_descriptor": 1,
                    "archived_file_handle": 2,
                    "archived_file_ptr": 1,
                    "file_handle": 1,
                    "file_ptr": 1,
                    "next_archived_file": 3,
                    "next_file": 2,
                    "subfile": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "archive_ptr": 1,
                    "array_ptr": 1,
                    "data_array": 1,
                    "data_list": 1,
                    "file_array": 1,
                    "file_list": 17,
                    "file_list_ptr": 2,
                    "files": 1,
                    "input_array": 2,
                    "input_files": 1,
                    "input_ptr": 1,
                    "source_address": 1,
                    "source_pointer": 1
                },
                "param_2": {
                    "archive_file": 7,
                    "archive_ptr": 1,
                    "archived_file": 1,
                    "archived_file_ptr": 1,
                    "current_file": 10,
                    "file": 1,
                    "file_descriptor": 2,
                    "file_handle": 3,
                    "file_pointer": 1,
                    "file_ptr": 3,
                    "input_param": 1
                },
                "param_3": {
                    "check_flag": 1,
                    "check_format": 2,
                    "condition_1": 1,
                    "flag1": 9,
                    "flag_1": 2,
                    "is_condition_1": 1,
                    "print_enabled": 2,
                    "print_flag": 8,
                    "print_output": 2,
                    "print_result": 1,
                    "should_print": 2
                },
                "param_4": {
                    "archive_flag": 3,
                    "check_archives": 1,
                    "check_flag": 1,
                    "check_format": 3,
                    "check_format_flag": 2,
                    "condition_2": 1,
                    "extract_files": 1,
                    "flag2": 9,
                    "flag_2": 2,
                    "format_check": 1,
                    "format_check_enabled": 1,
                    "format_check_flag": 1,
                    "format_flag": 1,
                    "is_condition_2": 1,
                    "process_recursive": 1,
                    "should_check_format": 2
                },
                "print_and_assign_value_00102f08": {
                    "print_and_assign_value": 2,
                    "print_file_and_assign_value": 1,
                    "print_value": 1
                },
                "uVar2": {
                    "file_processing_result": 1,
                    "function_result": 1,
                    "recursive_call_result": 1,
                    "recursive_result": 1,
                    "result": 21,
                    "return_value": 3,
                    "subfile_check_result": 1,
                    "temp_result": 1,
                    "temp_value": 1
                },
                "uVar4": {
                    "assign_value": 1,
                    "assigned_value": 1,
                    "assignment_result": 1,
                    "final_result": 6,
                    "num_extracted_files": 1,
                    "num_printed": 1,
                    "num_valid_files": 1,
                    "output": 1,
                    "output_value": 3,
                    "result": 4,
                    "return_value": 9,
                    "retval": 1,
                    "total_result": 1
                }
            },
            "called": [
                "FUN_00105af0",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00102f08"
            ],
            "calling": [
                "FUN_00105af0",
                "FUN_001028ed",
                "FUN_00105ae0"
            ],
            "code": "\nulong process_archived_files_00105af0(long *file_list,long current_file,char flag1,char flag2)\n\n{\n  char format_check_result;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      return_value = print_and_assign_value();\n      return return_value;\n    }\n  }\n  else {\n    format_check_result = bfd_check_format(current_file,2);\n    if (format_check_result != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(current_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(current_file,archived_file)) {\n        result = process_archived_files_00105af0(file_list,archived_file,flag1,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (flag1 != '\\0') {\n      return_value = print_and_assign_value();\n      return return_value;\n    }\n  }\n  *(long *)(current_file + 0xf0) = *file_list;\n  *file_list = current_file;\n  return 1;\n}\n\n",
            "current_name": "process_archived_files_00105af0",
            "entrypoint": "0x00105af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "cVar1": "format_check_result",
                "lVar3": "archived_file",
                "param_1": "file_list",
                "param_2": "current_file",
                "param_3": "flag1",
                "param_4": "flag2",
                "print_and_assign_value_00102f08": "print_and_assign_value",
                "uVar2": "result",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105bb0": {
            "additional_data": {
                "DAT_": {
                    "dat": 1,
                    "dat_": 1,
                    "unchanged": 1
                },
                "FUN_00105bb0": {
                    "check_if_valid": 1,
                    "check_status": 1,
                    "check_success": 2,
                    "determine_if_one": 1,
                    "determine_return_value": 1,
                    "get_one": 7,
                    "get_result": 3,
                    "get_return_value": 5,
                    "get_status": 1,
                    "get_true_value": 2,
                    "initialize": 1,
                    "initialize_application": 1,
                    "initialize_return_value": 1,
                    "initialize_value": 1,
                    "is_one": 1,
                    "is_result_positive": 1,
                    "return_one": 1
                },
                "PTR_": {
                    "ptr": 1,
                    "ptr_": 1,
                    "unchanged": 1
                },
                "get_one": {
                    "get_one": 1
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name1": 1
                },
                "original_parameter_name_2": {
                    "new_parameter_name2": 1
                },
                "original_variable_name_1": {
                    "new_variable_name1": 1
                },
                "original_variable_name_n": {
                    "new_variable_name_n": 1
                },
                "return": {
                    "result": 5,
                    "return": 1,
                    "return_value": 1,
                    "status": 1
                },
                "undefined8": {
                    "bool": 2,
                    "int": 4,
                    "uint64_t": 8,
                    "undefined_return_value": 1,
                    "void": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint64_t get_one_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00105bb0",
            "entrypoint": "0x00105bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105bc0": {
            "additional_data": {
                "FUN_00105bc0": {
                    "copy_and_delete_file": 10,
                    "copy_and_print_error_message": 3,
                    "copy_and_print_file": 4,
                    "copy_and_print_file_contents": 1,
                    "copy_and_remove_file": 3,
                    "copy_and_replace_file": 6,
                    "copy_and_unlink_file": 4
                },
                "auVar6": {
                    "copy_and_delete_result": 1,
                    "function_result": 1,
                    "result": 21,
                    "result_buffer": 1,
                    "return_data": 1,
                    "return_value": 5
                },
                "param_1": {
                    "original_filepath": 1,
                    "source_file": 7,
                    "source_file_name": 1,
                    "source_file_path": 17,
                    "source_filepath": 1,
                    "source_path": 3,
                    "src_file": 1
                },
                "param_2": {
                    "dest_file": 1,
                    "destination_file": 7,
                    "destination_file_name": 1,
                    "destination_file_path": 17,
                    "destination_filepath": 1,
                    "destination_path": 3,
                    "replacement_filepath": 1
                },
                "param_3": {
                    "buffer_size": 8,
                    "copy_buffer_size": 1,
                    "file_descriptor": 1,
                    "file_mode": 1,
                    "file_permission": 5,
                    "file_permissions": 14,
                    "permissions": 1
                },
                "param_4": {
                    "additional_data": 2,
                    "error_code": 2,
                    "error_data": 1,
                    "error_indicator": 1,
                    "error_message": 2,
                    "file_size": 15,
                    "original_file_size": 2,
                    "return_value": 2,
                    "time_modified": 1,
                    "timestamp": 2,
                    "user_data": 1
                },
                "pcVar3": {
                    "err_string": 1,
                    "errno_message": 1,
                    "error_description": 2,
                    "error_message": 17,
                    "error_msg": 1,
                    "error_str": 1,
                    "error_string": 7
                },
                "piVar2": {
                    "err_num_ptr": 1,
                    "errno_location": 11,
                    "errno_location_pointer": 1,
                    "errno_pointer": 3,
                    "errno_ptr": 2,
                    "error_code": 1,
                    "error_location": 3,
                    "error_number": 1,
                    "error_number_pointer": 2,
                    "error_number_ptr": 1,
                    "error_pointer": 3,
                    "error_ptr": 1
                },
                "uVar1": {
                    "copy_result": 29,
                    "copy_status": 1
                },
                "uVar4": {
                    "error_description": 1,
                    "error_format": 2,
                    "error_format_string": 1,
                    "error_message": 6,
                    "error_message_translation": 1,
                    "error_msg": 1,
                    "error_string": 4,
                    "formatted_error_message": 6,
                    "localized_error_message": 6,
                    "translated_error_message": 1,
                    "translated_error_string": 1
                },
                "uVar5": {
                    "bytes_copied": 8,
                    "copy_bytes": 2,
                    "copy_bytes_count": 1,
                    "copy_file_size": 1,
                    "copy_length": 1,
                    "copy_size": 10,
                    "file_copy_size": 1,
                    "file_size": 3,
                    "file_size_result": 1,
                    "num_bytes_copied": 1
                }
            },
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "code": "\nundefined  [16] copy_and_delete_file_00105bc0(char *source_file_path,char *destination_file_path,undefined4 file_permissions,undefined8 file_size)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 formatted_error_message;\n  ulong copy_size;\n  undefined result [16];\n  \n  if (destination_file_path == source_file_path) {\n    copy_size = 0;\n  }\n  else {\n    copy_result = copy_file_contents_00105c00(file_permissions);\n    copy_size = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      formatted_error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_formatted_error_message_00107920(formatted_error_message,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  result._8_8_ = file_size;\n  result._0_8_ = copy_size;\n  return result;\n}\n\n",
            "current_name": "copy_and_delete_file_00105bc0",
            "entrypoint": "0x00105bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "auVar6": "result",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "param_4": "file_size",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "uVar1": "copy_result",
                "uVar4": "formatted_error_message",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105c00": {
            "additional_data": {
                "FUN_00105c00": {
                    "copy_and_save_file": 1,
                    "copy_and_write_to_file": 1,
                    "copy_file": 12,
                    "copy_file_contents": 6,
                    "extract_and_save_data": 1,
                    "extract_data": 1,
                    "extract_data_from_file": 1,
                    "read_and_write_file": 1,
                    "read_and_write_to_file": 1,
                    "reverse_and_copy": 1,
                    "reverse_and_copy_data": 1,
                    "reverse_and_copy_file": 1,
                    "reverse_and_save_data": 1,
                    "reverse_and_save_file": 1,
                    "reverse_and_write_to_file": 1
                },
                "_Var3": {
                    "current_offset": 2,
                    "current_position": 3,
                    "file_cursor_position": 1,
                    "file_offset": 6,
                    "file_position": 3,
                    "file_seek_result": 1,
                    "initial_file_offset": 1,
                    "input_file_size": 1,
                    "offset": 1,
                    "seek_result": 2,
                    "source_file_length": 1,
                    "source_file_offset": 1,
                    "source_file_position": 7,
                    "source_file_size": 1
                },
                "__errno_location": {
                    "get_error_location": 1
                },
                "__fd": {
                    "dest_file_descriptor": 1,
                    "destination_fd": 1,
                    "destination_file_descriptor": 15,
                    "destination_file_fd": 1,
                    "file_descriptor_2": 1,
                    "new_file_descriptor": 2,
                    "output_fd": 1,
                    "output_file_descriptor": 8
                },
                "auStack_2038": {
                    "buffer": 29
                },
                "iVar1": {
                    "close_error": 1,
                    "errno": 1,
                    "errno_value": 2,
                    "error": 2,
                    "error_code": 3,
                    "error_number": 1,
                    "error_value": 2,
                    "original_errno": 12,
                    "original_error_code": 2,
                    "saved_errno": 2,
                    "source_file_error": 1
                },
                "iVar2": {
                    "bytes_read": 2,
                    "bytes_remaining": 1,
                    "bytes_written": 1,
                    "current_errno": 8,
                    "destination_file_error": 1,
                    "errno_value": 1,
                    "read_bytes": 4,
                    "read_length": 1,
                    "read_result": 3,
                    "read_size": 1,
                    "result": 2,
                    "return_value": 1,
                    "temp": 1
                },
                "param_1": {
                    "file_descriptor": 8,
                    "file_descriptor_1": 1,
                    "input_fd": 1,
                    "input_file_descriptor": 3,
                    "source_fd": 1,
                    "source_file": 1,
                    "source_file_descriptor": 16
                },
                "param_2": {
                    "destination_file": 3,
                    "destination_file_name": 3,
                    "destination_file_path": 12,
                    "destination_path": 1,
                    "file_path": 5,
                    "filename": 2,
                    "output_file_path": 3,
                    "output_filename": 2
                },
                "piVar6": {
                    "errno_location": 5,
                    "errno_pointer": 10,
                    "errno_ptr": 5,
                    "error_code_pointer": 1,
                    "error_location": 2,
                    "error_number": 1,
                    "error_pointer": 5,
                    "error_ptr": 2
                },
                "sVar5": {
                    "bytes_read": 1,
                    "bytes_written": 20,
                    "bytes_written_check": 1,
                    "num_bytes_written": 1,
                    "number_of_bytes_written": 1,
                    "write_bytes": 1,
                    "write_result": 4,
                    "written_bytes": 2
                },
                "uVar4": {
                    "bytes_copied": 3,
                    "bytes_read": 17,
                    "bytes_written": 2,
                    "num_bytes_read": 1,
                    "number_of_bytes_read": 1,
                    "read_bytes": 2,
                    "read_result": 2,
                    "return_value": 3
                }
            },
            "called": [
                "lseek",
                "read",
                "close",
                "__errno_location",
                "FUN_00102f55",
                "write",
                "open"
            ],
            "calling": [
                "FUN_00105bc0"
            ],
            "code": "\nulong copy_file_contents_00105c00(int source_file_descriptor,char *destination_file_path)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int current_errno;\n  __off_t source_file_position;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (source_file_position = lseek(source_file_descriptor,0,0), source_file_position == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = close_file_and_set_errno_00102f55();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      current_errno = (int)bytes_read;\n      if (current_errno < 1) {\n        errno_pointer = __errno_location();\n        original_errno = *errno_pointer;\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (current_errno != 0) {\n          *errno_pointer = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)current_errno);\n    } while (bytes_written == (long)current_errno);\n    errno_pointer = __errno_location();\n    current_errno = *errno_pointer;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_pointer = current_errno;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_contents_00105c00",
            "entrypoint": "0x00105c00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105c00": "copy_file_contents_00105c00",
                "_Var3": "source_file_position",
                "__errno_location": "get_error_location",
                "__fd": "destination_file_descriptor",
                "auStack_2038": "buffer",
                "iVar1": "original_errno",
                "iVar2": "current_errno",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "piVar6": "errno_pointer",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105cf0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105cf0",
            "entrypoint": "0x00105cf0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105d20": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105d20",
            "entrypoint": "0x00105d20",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105db0": {
            "additional_data": {
                "DAT_0010d2d4": {
                    "default_flag": 1
                },
                "DAT_0010d5f9": {
                    "tan_format_flag": 1
                },
                "DAT_0010d5fa": {
                    "numbered_flag": 1
                },
                "DAT_0010d5fc": {
                    "line_flag": 1
                },
                "DAT_0010d610": {
                    "plugin_flag": 1
                },
                "DAT_0010d628": {
                    "libdeps_file": 1
                },
                "DAT_0010d634": {
                    "libdeps_flag": 1
                },
                "DAT_0010d640": {
                    "position_flag": 1
                },
                "DAT_0010d648": {
                    "operation_flag": 1
                },
                "DAT_0010d650": {
                    "no_c_omment_flag": 1
                },
                "DAT_0010d654": {
                    "version_flag": 1
                },
                "DAT_0010d660": {
                    "bfd_ptr1": 1,
                    "ptr_long3": 1
                },
                "FUN_00105db0": {
                    "extract_and_convert_archived_files": 2,
                    "extract_and_print_archive_info": 2,
                    "extract_and_process_archive": 1,
                    "extract_and_process_archive_files": 3,
                    "extract_and_process_archived_files": 2,
                    "extract_and_process_files": 1,
                    "extract_and_update_archive_files": 1,
                    "extract_archive_files": 1,
                    "extract_files_from_archives": 1,
                    "improved_extract_and_convert_archived_files": 6,
                    "improved_extract_and_process_archived_files": 3,
                    "improved_extract_and_process_archives": 4,
                    "improved_extract_and_process_files": 1,
                    "improved_fun": 1,
                    "parse_command_line_arguments": 1
                },
                "__ptr": {
                    "byte_pointer": 6,
                    "byte_pointer2": 1,
                    "byte_pointer_temp": 1,
                    "byte_ptr": 4,
                    "byte_ptr2": 4,
                    "current_byte_pointer": 1,
                    "current_byte_ptr": 1,
                    "pointer_to_byte_var": 1,
                    "ptr8": 1,
                    "ptr_byte": 3,
                    "ptr_byte2": 1,
                    "temp_buffer": 1
                },
                "_city_state": {
                    "_libc_current_locale_value": 1
                },
                "_current_value": {
                    "_libc_current_locale_value": 1
                },
                "_optarg": {
                    "optarg": 1
                },
                "_optind": {
                    "optind": 1
                },
                "_stderr": {
                    "stderr": 2
                },
                "_stdin": {
                    "stdin": 1
                },
                "_stdout": {
                    "stdout": 2
                },
                "bVar13": {
                    "byte1": 2,
                    "byte_value": 2,
                    "byte_var": 8,
                    "byte_var13": 4,
                    "byte_var2": 7,
                    "byte_var_temp": 1,
                    "byte_variable13": 1,
                    "byte_variable2": 1,
                    "current_byte_val2": 1,
                    "current_byte_value": 1,
                    "current_byte_value_2": 1,
                    "current_char": 1,
                    "temp_byte2": 1
                },
                "bVar3": {
                    "byte_value": 2,
                    "byte_var": 14,
                    "byte_var1": 4,
                    "byte_var3": 2,
                    "byte_variable": 1,
                    "byte_variable3": 1,
                    "current_byte_is_symbol_delimiter": 1,
                    "current_byte_value": 3,
                    "flag": 1,
                    "temp_byte": 1,
                    "temp_flag": 1
                },
                "bVar47": {
                    "bool_var": 3,
                    "bool_var3": 1,
                    "bool_var4": 1,
                    "bool_var47": 1,
                    "current_bool3": 1
                },
                "bVar48": {
                    "b_var48": 1,
                    "byte_var": 3,
                    "byte_var3": 2,
                    "byte_var48": 1,
                    "byte_var_temp4": 1
                },
                "bVar8": {
                    "b_var8": 1,
                    "backslash_encountered": 1,
                    "bool1": 1,
                    "bool_value": 3,
                    "bool_var": 8,
                    "bool_var1": 8,
                    "bool_var8": 4,
                    "bool_variable8": 1,
                    "current_bool": 1,
                    "current_bool1": 1,
                    "flag1": 2
                },
                "bVar9": {
                    "b_var9": 1,
                    "bool2": 1,
                    "bool_value": 2,
                    "bool_value_2": 1,
                    "bool_var": 8,
                    "bool_var2": 8,
                    "bool_var9": 4,
                    "bool_variable9": 1,
                    "current_bool": 1,
                    "current_bool2": 1,
                    "flag2": 2,
                    "quote_encountered": 1
                },
                "cVar14": {
                    "c_var14": 1,
                    "ch": 1,
                    "char1": 1,
                    "char_value": 2,
                    "char_var": 12,
                    "char_var1": 4,
                    "char_var14": 4,
                    "char_variable": 1,
                    "char_variable14": 1,
                    "current_char_val": 1,
                    "current_char_value": 1,
                    "initialize_result": 1,
                    "temp_char": 1
                },
                "cVar46": {
                    "char_ptr5": 1
                },
                "extraout_EDX": {
                    "uint_extraout_edx": 1,
                    "uint_var": 4,
                    "uint_var6": 1
                },
                "iVar15": {
                    "current_index": 1,
                    "current_int": 1,
                    "current_int_value": 1,
                    "index": 1,
                    "index1": 1,
                    "int_value": 2,
                    "int_var": 12,
                    "int_var1": 4,
                    "int_var15": 3,
                    "int_variable": 1,
                    "int_variable15": 1,
                    "result": 1,
                    "temp_int": 1
                },
                "iVar37": {
                    "uint_var5": 1
                },
                "iVar45": {
                    "int_value": 1,
                    "int_var": 4,
                    "int_var2": 2,
                    "int_variable45": 1
                },
                "lVar24": {
                    "count": 1,
                    "current_long_val": 1,
                    "current_long_value": 1,
                    "long1": 1,
                    "long_value": 1,
                    "long_var": 8,
                    "long_var1": 4,
                    "long_var24": 2,
                    "long_var3": 1,
                    "long_var_temp3": 1,
                    "long_variable": 1,
                    "long_variable24": 1,
                    "temp_long": 1,
                    "temp_long_var1": 1,
                    "ulong_var": 1
                },
                "lVar29": {
                    "long_pointer": 1
                },
                "lVar34": {
                    "count": 1,
                    "long2": 1,
                    "long_value": 1,
                    "long_var": 7,
                    "long_var2": 4,
                    "long_var34": 1,
                    "long_var_temp": 1,
                    "long_variable2": 1,
                    "long_variable34": 1
                },
                "lVar35": {
                    "count": 1,
                    "long3": 1,
                    "long_value": 1,
                    "long_var": 6,
                    "long_var3": 3,
                    "long_var35": 1,
                    "long_var4": 2,
                    "long_var_temp2": 1,
                    "long_variable3": 1,
                    "long_variable35": 1
                },
                "lVar40": {
                    "current_entry_length": 1,
                    "long_value": 1,
                    "long_var": 1,
                    "long_variable40": 1
                },
                "lVar41": {
                    "current_entry_index": 1,
                    "long_value": 1,
                    "long_variable41": 1
                },
                "lVar42": {
                    "long_variable42": 1
                },
                "lVar44": {
                    "long_var44": 1
                },
                "lVar45": {
                    "long_value": 1,
                    "long_var45": 1
                },
                "local_100": {
                    "buffer_offset": 1,
                    "current_index": 1,
                    "current_long_val2": 1,
                    "local_long": 1,
                    "local_long100": 1,
                    "long_var": 4,
                    "long_var4": 1,
                    "long_var5": 1,
                    "long_var_local100": 1,
                    "long_variable4": 1,
                    "var_local100": 1,
                    "var_local_100": 1
                },
                "local_108": {
                    "at_file_size": 1,
                    "file_count": 1,
                    "file_data_size": 1,
                    "local_size1108": 1,
                    "local_size_t": 1,
                    "size_t_var": 1,
                    "size_t_var3": 1,
                    "size_t_variable3": 1,
                    "size_value": 1,
                    "size_var": 3,
                    "size_var3": 1,
                    "size_var_local108": 1,
                    "var_local108": 1,
                    "var_local_108": 1
                },
                "local_110": {
                    "at_file_list": 1,
                    "char_pointer_pointer": 2,
                    "char_pointer_pointer2": 1,
                    "char_ptr4": 1,
                    "char_ptr_ptr": 3,
                    "char_ptr_ptr2": 1,
                    "current_argv_ptr": 1,
                    "files": 1,
                    "local_char_pointer_pointer": 1,
                    "local_char_ptr_ptr110": 1,
                    "pointer_to_char_pointer_var_local110": 1,
                    "var_local110": 1,
                    "var_local_110": 1
                },
                "local_118": {
                    "buffer": 2,
                    "byte_pointer": 2,
                    "byte_pointer3": 1,
                    "byte_ptr": 2,
                    "byte_ptr4": 2,
                    "file_data": 1,
                    "local_byte_pointer": 1,
                    "local_byte_ptr": 1,
                    "local_byte_ptr118": 1,
                    "pointer_to_byte_var_local118": 1,
                    "var_local118": 1,
                    "var_local_118": 1
                },
                "local_128": {
                    "argv": 1,
                    "file_list": 1,
                    "file_pointer": 1,
                    "file_pointer5": 1,
                    "file_ptr": 3,
                    "file_ptr4": 1,
                    "file_var": 1,
                    "file_var2": 1,
                    "file_var_local128": 1,
                    "local_file_pointer2": 1,
                    "local_file_ptr128": 1,
                    "var_local128": 1,
                    "var_local_128": 1
                },
                "local_130": {
                    "entry_size": 1,
                    "file_offset": 1,
                    "file_pointer": 1,
                    "file_pointer4": 1,
                    "file_ptr": 1,
                    "file_var": 1,
                    "file_var1": 1,
                    "file_var_local130": 1,
                    "local_file_pointer1": 1,
                    "local_file_ptr130": 1,
                    "undefined8_value": 1,
                    "undefined8_var": 2,
                    "undefined8_var2": 1,
                    "var_local130": 1,
                    "var_local_130": 1
                },
                "local_b0": {
                    "argc_minus_one": 1,
                    "current_uint_val2": 1,
                    "file_list_size": 1,
                    "local_uint0": 1,
                    "local_uint_b0": 1,
                    "uint32_value": 1,
                    "uint_var": 3,
                    "uint_var3": 1,
                    "uint_var8": 1,
                    "uint_var_local_b0": 1,
                    "uint_variable": 1,
                    "var_local_b0": 2
                },
                "local_c8": {
                    "arr_localc8": 1,
                    "array_local_c8": 1,
                    "current_stat_info": 1,
                    "current_undef2_vals": 1,
                    "local_byte2_c8102": 1,
                    "stat_result": 1,
                    "undefined3": 1,
                    "undefined_array": 1,
                    "undefined_var": 2,
                    "undefined_var1": 1,
                    "undefined_var_local_c8": 1
                },
                "local_var": {
                    "local_var": 1
                },
                "pFVar18": {
                    "current_file": 2,
                    "current_file_pointer": 1,
                    "file_pointer": 3,
                    "file_pointer_var": 1,
                    "file_ptr": 6,
                    "file_ptr1": 3,
                    "file_ptr18": 1,
                    "file_var18": 1,
                    "p_file1": 1,
                    "ptr_file18": 1,
                    "temp_file": 1
                },
                "pFVar22": {
                    "archive_file": 1,
                    "current_file2": 1,
                    "current_file_pointer": 1,
                    "current_file_pointer_2": 1,
                    "file1": 1,
                    "file_pointer": 3,
                    "file_pointer2": 1,
                    "file_pointer_temp": 1,
                    "file_pointer_var": 1,
                    "file_ptr": 4,
                    "file_ptr2": 5,
                    "file_ptr22": 1,
                    "file_struct_pointer": 1,
                    "file_var22": 2,
                    "p_file2": 1,
                    "ptr_file22": 1,
                    "temp_file_ptr2": 1
                },
                "pFVar28": {
                    "current_file3": 1,
                    "current_file_pointer_3": 1,
                    "file2": 1,
                    "file_pointer": 3,
                    "file_pointer3": 1,
                    "file_pointer_temp2": 1,
                    "file_pointer_var": 1,
                    "file_ptr": 4,
                    "file_ptr3": 3,
                    "file_struct_pointer": 1,
                    "file_var": 1,
                    "file_var28": 2,
                    "p_file3": 1,
                    "ptr_file": 1,
                    "ptr_file28": 1,
                    "temp_file": 1,
                    "temp_file_ptr1": 1
                },
                "pFVar31": {
                    "file_pointer_var": 1,
                    "temp_file": 1
                },
                "pFVar32": {
                    "current_char_ptr3": 1,
                    "temp_file": 1
                },
                "param_1": {
                    "archive_file_count": 1,
                    "argc": 25,
                    "file_count": 1,
                    "input_param": 1,
                    "num": 1,
                    "num_args": 1,
                    "num_operations": 1
                },
                "param_2": {
                    "archive_file": 1,
                    "argv": 25,
                    "file_param": 1,
                    "file_pointer": 1,
                    "file_stream": 1,
                    "input_file": 2
                },
                "pbVar1": {
                    "byte_array": 1,
                    "byte_pointer": 8,
                    "byte_pointer1": 1,
                    "byte_ptr": 5,
                    "byte_ptr1": 3,
                    "current_byte": 4,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_byte": 4,
                    "ptr_byte1": 3
                },
                "pbVar33": {
                    "byte2": 1,
                    "byte_pointer": 1,
                    "byte_pointer2": 1,
                    "byte_ptr3": 3,
                    "current_byte": 1,
                    "ptr_byte33": 2
                },
                "pbVar38": {
                    "byte_pointer": 3,
                    "byte_pointer2": 1,
                    "byte_pointer_temp2": 1,
                    "byte_ptr": 3,
                    "current_byte_pointer_3": 1,
                    "pointer_to_byte_var38": 1,
                    "ptr_byte38": 1
                },
                "pcVar23": {
                    "char_pointer": 2,
                    "char_pointer1": 1,
                    "char_pointer_temp": 1,
                    "char_ptr": 3,
                    "char_ptr1": 3,
                    "char_ptr2": 1,
                    "char_var": 3,
                    "char_var_ptr": 1,
                    "current_char_pointer": 1,
                    "current_char_ptr2": 1,
                    "pointer_to_char_var23": 1,
                    "ptr_char": 2,
                    "ptr_char23": 1,
                    "str1": 1,
                    "temp_string": 1
                },
                "pcVar28": {
                    "file_var": 1
                },
                "pcVar39": {
                    "char_pointer": 4,
                    "char_pointer_temp4": 1,
                    "char_ptr": 1,
                    "char_ptr3": 2,
                    "char_var_ptr": 1,
                    "pointer_to_char_var39": 1,
                    "ptr_char39": 1
                },
                "pcVar43": {
                    "char_ptr": 1,
                    "char_var": 2,
                    "temp_str_ptr1": 1
                },
                "pcVar46": {
                    "char_pointer": 1,
                    "current_string": 1
                },
                "piVar11": {
                    "count_arr": 1,
                    "current_archive_index": 1,
                    "current_int_pointer": 1,
                    "current_int_ptr": 1,
                    "index": 1,
                    "int_pointer": 9,
                    "int_pointer1": 1,
                    "int_ptr": 5,
                    "int_ptr1": 3,
                    "pointer_to_int_var11": 1,
                    "ptr6": 1,
                    "ptr_int": 3,
                    "ptr_int11": 3
                },
                "plVar21": {
                    "current_long_pointer_2": 1,
                    "current_long_ptr2": 1,
                    "long_pointer": 5,
                    "long_pointer2": 2,
                    "long_pointer_temp": 1,
                    "long_ptr": 4,
                    "long_ptr2": 3,
                    "long_ptr3": 1,
                    "pointer_to_long_var21": 1,
                    "ptr9": 1,
                    "ptr_long": 1,
                    "ptr_long2": 1,
                    "ptr_long21": 2,
                    "stat_result": 1,
                    "temp_ptr1": 1
                },
                "plVar29": {
                    "current_long_pointer_3": 1,
                    "ptr11": 1
                },
                "plVar34": {
                    "long_pointer": 1
                },
                "plVar35": {
                    "long_pointer": 1
                },
                "plVar39": {
                    "archive_member": 1
                },
                "plVar4": {
                    "current_archive_member": 1,
                    "current_long": 1,
                    "current_long_pointer": 1,
                    "current_long_ptr": 1,
                    "long_pointer": 9,
                    "long_pointer1": 1,
                    "long_ptr": 5,
                    "long_ptr1": 3,
                    "ptr3": 1,
                    "ptr_arr": 1,
                    "ptr_long": 4,
                    "ptr_long4": 3
                },
                "plVar42": {
                    "current_entry": 1
                },
                "ppVar36": {
                    "undefined_ptr2": 1
                },
                "ppcVar10": {
                    "archive_members_list": 1,
                    "char2_d_ptr1": 1,
                    "char_double_pointer": 2,
                    "char_pointer_pointer": 5,
                    "char_pointer_pointer1": 1,
                    "char_ptr_ptr": 5,
                    "char_ptr_ptr1": 2,
                    "current_char_ptr_ptr": 1,
                    "current_string_pointer": 1,
                    "file_list": 1,
                    "pointer_to_char_pointer_var10": 1,
                    "ptr5": 1,
                    "ptr_arr2": 1,
                    "ptr_char_ptr10": 1,
                    "ptr_pointer_char10": 1,
                    "ptr_ptr_char": 3,
                    "ptr_ptr_char10": 1,
                    "string_array_pointer": 1
                },
                "ppcVar31": {
                    "char_double_pointer": 1,
                    "char_pointer_pointer": 1,
                    "char_ptr_ptr2": 1,
                    "ptr12": 1,
                    "ptr_char_ptr31": 1,
                    "ptr_ptr_char31": 1
                },
                "ppcVar32": {
                    "char_double_pointer": 1,
                    "char_ptr_ptr3": 1,
                    "current_string_pointer_2": 1,
                    "ptr13": 1,
                    "ptr_char_ptr32": 1,
                    "ptr_ptr_char32": 1
                },
                "ppcVar36": {
                    "ptr_ptr_char36": 1
                },
                "pplVar29": {
                    "double_ptr_arr": 1,
                    "long_double_pointer": 1,
                    "long_pointer_pointer": 4,
                    "long_pointer_pointer1": 1,
                    "long_ptr_ptr1": 1,
                    "ptr11": 1,
                    "ptr_long_long29": 1,
                    "ptr_ptr_long": 2,
                    "ptr_ptr_long29": 1
                },
                "pplVar31": {
                    "current_pointer_pointer": 1,
                    "ptr12": 1,
                    "ptr_char_ptr31": 1
                },
                "pplVar32": {
                    "long_double_pointer": 1,
                    "ptr_char_ptr32": 1
                },
                "ppuVar36": {
                    "options": 1,
                    "ptr_ptr_ptr_uint36": 1,
                    "ptr_ptr_uint36": 1,
                    "ptr_ptr_void36": 1,
                    "undefined2_d_ptr1": 1,
                    "undefined_pointer_pointer": 3
                },
                "ppvVar10": {
                    "char_pointer_pointer": 1
                },
                "puVar12": {
                    "current_undef_ptr": 1,
                    "current_undefined": 1,
                    "current_unknown_type_pointer": 1,
                    "pointer": 1,
                    "pointer_to_undefined_var12": 1,
                    "ptr1": 1,
                    "ptr7": 1,
                    "ptr_uint12": 2,
                    "ptr_undefined": 2,
                    "ptr_void": 1,
                    "ptr_void12": 1,
                    "temp_pointer": 1,
                    "undefined_pointer": 8,
                    "undefined_pointer1": 1,
                    "undefined_ptr": 5,
                    "undefined_ptr1": 3
                },
                "puVar2": {
                    "current_archive_entry": 1,
                    "current_pointer": 1,
                    "current_uint": 2,
                    "flag": 1,
                    "ptr2": 1,
                    "ptr_uint": 4,
                    "ptr_uint2": 3,
                    "uint_pointer": 9,
                    "uint_pointer1": 1,
                    "uint_ptr": 5,
                    "uint_ptr1": 3
                },
                "puVar26": {
                    "archive": 1,
                    "current_undef8_ptr2": 1,
                    "current_unknown_type_pointer_2": 1,
                    "pointer8": 1,
                    "pointer_to_undefined8_var26": 1,
                    "ptr10": 1,
                    "ptr_uint26": 2,
                    "ptr_void": 1,
                    "ptr_void2": 1,
                    "undefined8_pointer": 2,
                    "undefined8_pointer2": 2,
                    "undefined8_pointer_temp": 1,
                    "undefined8_ptr": 3,
                    "undefined8_ptr2": 4,
                    "void_ptr": 1
                },
                "puVar33": {
                    "byte_ptr": 1
                },
                "puVar36": {
                    "ptr14": 1,
                    "undefined_ptr3": 1
                },
                "puVar38": {
                    "current_string": 1
                },
                "puVar5": {
                    "current_string": 1,
                    "current_undef8_ptr": 1,
                    "current_undefined8": 1,
                    "current_void_pointer": 1,
                    "pointer8": 1,
                    "ptr4": 1,
                    "ptr_uint5": 1,
                    "ptr_uint64": 1,
                    "ptr_uint8": 1,
                    "ptr_undefined8": 3,
                    "ptr_void8": 1,
                    "temp_ptr_arr": 1,
                    "undefined8_pointer": 8,
                    "undefined8_pointer1": 1,
                    "undefined8_ptr": 4,
                    "undefined8_ptr1": 3,
                    "void_ptr": 1
                },
                "sVar19": {
                    "current_size_t": 1,
                    "current_size_val": 1,
                    "current_size_value": 1,
                    "size1": 1,
                    "size_t_var": 4,
                    "size_t_var1": 1,
                    "size_t_variable": 1,
                    "size_value": 3,
                    "size_var": 5,
                    "size_var1": 3,
                    "size_var19": 3,
                    "size_variable19": 1,
                    "temp_size": 1
                },
                "sVar20": {
                    "current_size_read": 1,
                    "current_size_t": 1,
                    "current_size_value_2": 1,
                    "read_size": 1,
                    "size2": 1,
                    "size_read": 1,
                    "size_t_var": 3,
                    "size_t_var2": 1,
                    "size_t_variable2": 1,
                    "size_value": 1,
                    "size_var": 5,
                    "size_var2": 4,
                    "size_var20": 3,
                    "size_variable20": 1
                },
                "uStack_c5": {
                    "u_stack_c5": 1,
                    "u_stack_var_c5": 1,
                    "undefined5_var": 3,
                    "undefined5_var1": 1,
                    "unused": 1,
                    "ushort_stack_c5": 1,
                    "var_u_stack_c5": 2
                },
                "uStack_c6": {
                    "u_stack_c6": 1,
                    "u_stack_var_c6": 1,
                    "undefined_var": 2,
                    "undefined_var2": 1,
                    "unused": 1,
                    "ushort_stack_c6": 1,
                    "var_u_stack_c6": 2
                },
                "uVar16": {
                    "current_uint": 1,
                    "current_uint_val": 1,
                    "current_unsigned_int_value_3": 1,
                    "index": 1,
                    "temp_uint3": 1,
                    "temp_var3": 1,
                    "u_var16": 1,
                    "u_var_uint16": 1,
                    "uint_value": 2,
                    "uint_var": 12,
                    "uint_var1": 2,
                    "uint_var16": 1,
                    "uint_var3": 2,
                    "uint_variable16": 1,
                    "value1": 1,
                    "var_uint16": 1
                },
                "uVar17": {
                    "current_undef4_val3": 1,
                    "current_undefined4": 1,
                    "current_unsigned_int_value_4": 1,
                    "temp_format": 1,
                    "temp_uint4": 1,
                    "temp_var4": 1,
                    "u_var17": 3,
                    "u_var3": 1,
                    "u_var_uint17": 1,
                    "uint32_value": 1,
                    "uint32_var": 1,
                    "uint_var": 2,
                    "uint_var17": 1,
                    "uint_var4": 2,
                    "uint_variable17": 1,
                    "undefined4_value": 1,
                    "undefined4_var": 4,
                    "undefined4_var2": 1,
                    "undefined4_var3": 2,
                    "undefined_var": 1,
                    "value2": 1,
                    "var_uint17": 1
                },
                "uVar25": {
                    "current_ulong_val": 1,
                    "current_unsigned_long_value": 1,
                    "temp_length": 1,
                    "temp_ulong": 1,
                    "temp_var7": 1,
                    "u_var_uint25": 1,
                    "ulong1": 1,
                    "ulong_value": 2,
                    "ulong_var": 11,
                    "ulong_var1": 5,
                    "ulong_var25": 1,
                    "ulong_variable": 1,
                    "ulong_variable25": 1
                },
                "uVar27": {
                    "current_undef8_val1": 1,
                    "current_unknown_type_value": 1,
                    "error_message": 1,
                    "temp_uint5": 1,
                    "temp_var9": 1,
                    "u_var27": 3,
                    "u_var4": 1,
                    "u_var_uint27": 1,
                    "uint_var": 1,
                    "uint_var27": 1,
                    "uint_variable27": 1,
                    "ulong_var": 2,
                    "undefined8_value": 2,
                    "undefined8_var": 7,
                    "undefined8_var1": 3,
                    "undefined8_var3": 1,
                    "val3": 1,
                    "var_uint27": 1
                },
                "uVar30": {
                    "current_undef8_val2": 1,
                    "current_unknown_type_value_2": 1,
                    "error_message": 1,
                    "temp_uint6": 1,
                    "temp_var10": 1,
                    "u_var30": 1,
                    "u_var5": 1,
                    "uint_variable30": 1,
                    "ulong_var": 1,
                    "ulong_var30": 1,
                    "undefined8_var": 4,
                    "undefined8_var2": 1,
                    "undefined8_var4": 1,
                    "val4": 1,
                    "var_uint30": 1
                },
                "uVar37": {
                    "extra_out_edx": 1,
                    "extraout_edx": 1,
                    "u_var_uint37": 1,
                    "uint_value": 1,
                    "uint_var": 3,
                    "uint_var2": 2,
                    "uint_var5": 2,
                    "uint_var_temp": 1,
                    "uint_variable37": 1,
                    "val5": 1
                },
                "uVar40": {
                    "temp_var12": 1,
                    "ulong_var": 6,
                    "ulong_var2": 5,
                    "ulong_var_temp": 1
                },
                "uVar41": {
                    "temp_var13": 1,
                    "ulong_var": 6,
                    "ulong_var2": 1,
                    "ulong_var3": 5,
                    "ulong_var_temp2": 1
                },
                "uVar42": {
                    "temp_var14": 1,
                    "ulong_value": 1,
                    "ulong_var": 6,
                    "ulong_var3": 1,
                    "ulong_var4": 5,
                    "ulong_var_temp3": 1
                },
                "uVar44": {
                    "temp_var15": 1,
                    "u_var44": 1,
                    "uint_value": 1,
                    "uint_var": 4,
                    "uint_var3": 1,
                    "uint_var4": 1,
                    "uint_var7": 1,
                    "uint_var_temp2": 1,
                    "uint_variable44": 1
                },
                "uVar45": {
                    "int_var_temp": 1,
                    "temp_var16": 1
                },
                "uVar46": {
                    "bool_var3": 1
                },
                "uVar48": {
                    "byte_var": 1
                },
                "uVar6": {
                    "current_format": 1,
                    "current_undef4_val1": 1,
                    "current_undefined4": 1,
                    "current_unsigned_int_value": 1,
                    "temp_uint": 1,
                    "temp_var1": 1,
                    "u_var1": 1,
                    "u_var6": 3,
                    "u_var_uint6": 1,
                    "uint32_value": 1,
                    "uint32_var": 1,
                    "uint_var": 5,
                    "uint_var1": 2,
                    "uint_var6": 2,
                    "uint_variable6": 1,
                    "undefined4_value": 1,
                    "undefined4_var": 3,
                    "undefined4_var1": 2,
                    "val1": 1,
                    "var_uint6": 1
                },
                "uVar7": {
                    "current_format_flags": 1,
                    "current_undef4_val2": 1,
                    "current_undefined4": 1,
                    "current_unsigned_int_value_2": 1,
                    "temp_uint2": 1,
                    "temp_var2": 1,
                    "u_var2": 1,
                    "u_var7": 3,
                    "u_var_uint7": 1,
                    "uint32_value": 1,
                    "uint32_var": 1,
                    "uint_var": 5,
                    "uint_var2": 2,
                    "uint_var7": 2,
                    "uint_variable7": 1,
                    "undefined4_value": 1,
                    "undefined4_var": 3,
                    "undefined4_var2": 2,
                    "val2": 1,
                    "var_uint7": 1
                },
                "unaff_R12": {
                    "file_pointer": 1,
                    "file_pointer_temp3": 1,
                    "file_ptr": 1,
                    "temp_file_ptr3": 1
                },
                "unaff_RBP": {
                    "char_pointer": 4,
                    "char_pointer_temp3": 1,
                    "char_pointer_unaff_rbp": 1,
                    "char_ptr": 3,
                    "char_ptr2": 2,
                    "char_ptr4": 1,
                    "current_byte_pointer_2": 1,
                    "current_char": 1,
                    "current_entry": 1,
                    "str2": 1,
                    "unaff_rbp": 1
                }
            },
            "called": [
                "FUN_00105480",
                "bfd_create",
                "memcpy",
                "fileno",
                "FUN_00107650",
                "FUN_001058b0",
                "FUN_00103a78",
                "bfd_get_error",
                "FUN_0010342d",
                "bfd_plugin_set_program_name",
                "FUN_00107640",
                "printf",
                "textdomain",
                "FUN_00105830",
                "fopen",
                "lbasename",
                "bfd_check_format_matches",
                "FUN_00105870",
                "FUN_00107740",
                "free",
                "FUN_00107730",
                "strcmp",
                "bfd_find_target",
                "bfd_set_error_program_name",
                "bfd_init",
                "FUN_00107890",
                "getopt_long",
                "fread",
                "FUN_00107c10",
                "isatty",
                "bfd_errmsg",
                "FUN_00107cc0",
                "FUN_00103bd1",
                "dcgettext",
                "bfd_plugin_set_plugin",
                "bfd_make_readable",
                "strtol",
                "bfd_set_error",
                "bfd_make_writable",
                "xrealloc",
                "bfd_set_format",
                "bfd_close",
                "FUN_00105300",
                "bindtextdomain",
                "fclose",
                "filename_cmp",
                "xmalloc",
                "stat",
                "open",
                "xmalloc_set_program_name",
                "FUN_00107920",
                "fseek",
                "FUN_00105570",
                "FUN_00103e95",
                "bfd_set_default_target",
                "xstrdup",
                "fprintf",
                "FUN_0010394a",
                "memmove",
                "xexit",
                "bfd_fdopenr",
                "FUN_00107c20",
                "ferror",
                "malloc",
                "bfd_bwrite",
                "FUN_001052a0",
                "FUN_001075e0",
                "strlen",
                "setlocale",
                "ftell",
                "FUN_00107690"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid improved_extract_and_convert_archived_files_00105db0(uint argc,FILE *argv)\n\n{\n  byte *byte_pointer;\n  uint *uint_pointer;\n  byte byte_var;\n  long *long_pointer;\n  undefined8 *undefined8_pointer;\n  undefined4 uint_var;\n  undefined4 uint_var;\n  bool bool_var1;\n  bool bool_var;\n  char **char_pointer_pointer;\n  int *int_pointer;\n  undefined *undefined_pointer;\n  byte byte_var;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined4 undefined4_var;\n  FILE *file_ptr;\n  size_t size_var;\n  size_t size_var;\n  byte *byte_pointer;\n  long *long_pointer;\n  FILE *file_ptr2;\n  char *char_var;\n  long long_var;\n  ulong ulong_var;\n  undefined8 *undefined8_ptr2;\n  undefined8 undefined8_var;\n  FILE *file_ptr;\n  long **long_pointer_pointer;\n  undefined8 undefined8_var;\n  char **char_double_pointer;\n  uint uint_var;\n  char **ptr_ptr_char32;\n  byte *byte_ptr3;\n  long long_var;\n  long long_var;\n  undefined **undefined_pointer_pointer;\n  uint uint_var;\n  char *char_pointer;\n  byte *byte_ptr;\n  char *char_pointer;\n  ulong ulong_var;\n  ulong ulong_var;\n  ulong ulong_var;\n  FILE *file_pointer_temp3;\n  char *char_var;\n  uint uint_var;\n  int int_var;\n  char *char_pointer;\n  bool bool_var;\n  byte byte_var;\n  undefined8 undefined8_var;\n  FILE *file_ptr;\n  byte *byte_ptr;\n  char **char_ptr_ptr;\n  size_t size_var;\n  long long_var;\n  undefined undefined_var [2];\n  undefined undefined_var;\n  undefined5 undefined5_var;\n  uint uint_var;\n  \n  byte_var = 0;\n  char_pointer = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  char_var = (char *)argv;\n  file_ptr = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  char_ptr_ptr = (char **)0x7d0;\n  file_pointer_temp3 = (FILE *)0x1;\n  file_ptr = (FILE *)0x0;\n  file_ptr2 = argv;\n  do {\n    uint_var = (uint)file_pointer_temp3;\n    char_pointer = (char *)(long)(int)uint_var;\n    undefined8_var = (FILE *)((long)char_pointer * 8);\n    char_var = (char *)file_ptr2;\n    if (**(char **)(&file_ptr2->_flags + (long)char_pointer * 2) == '@') {\n      uint_var = (int)char_ptr_ptr - 1;\n      char_ptr_ptr = (char **)(ulong)uint_var;\n      if (uint_var == 0) {\n        long_pointer = *(long **)file_ptr2;\n        char_pointer = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(stderr,char_pointer,long_pointer);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      char_pointer = *(char **)(&file_ptr2->_flags + (long)char_pointer * 2) + 1;\n      int_var = stat(char_pointer,(stat *)undefined_var);\n      if (-1 < int_var) {\n        if ((uint_var & 0xf000) == 0x4000) {\n          long_pointer = *(long **)file_ptr2;\n          char_pointer = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        file_ptr = fopen(char_pointer,\"r\");\n        if (file_ptr != (FILE *)0x0) {\n          int_var = fseek(file_ptr,0,2);\n          if (((int_var != -1) && (size_var = ftell(file_ptr), size_var != 0xffffffffffffffff)) &&\n             (int_var = fseek(file_ptr,0,0), int_var != -1)) {\n            byte_ptr = (byte *)xmalloc(size_var + 1);\n            size_var = fread(byte_ptr,1,size_var,file_ptr);\n            if ((size_var == size_var) || (int_var = ferror(file_ptr), int_var == 0)) {\n              byte_ptr[size_var] = 0;\n              byte_var = *byte_ptr;\n              byte_ptr3 = byte_ptr;\n              while( true ) {\n                if (byte_var == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byte_var * 2] & 0x40) == 0) break;\n                byte_var = byte_ptr3[1];\n                byte_ptr3 = byte_ptr3 + 1;\n              }\n              size_var = strlen((char *)byte_ptr);\n              byte_pointer = (byte *)xmalloc(size_var + 1);\n              file_ptr = (FILE *)0x0;\n              int_var = 0;\n              bool_var = false;\n              bool_var = false;\n              bool_var1 = false;\n              long_var = 0;\n              byte_ptr3 = byte_ptr;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_ptr3 * 2] & 0x40) != 0) {\n                  byte_ptr3 = byte_ptr3 + 1;\n                }\n                if ((int_var == 0) || (int_var + -1 <= (int)long_var)) {\n                  if (file_ptr == (FILE *)0x0) {\n                    int_var = 8;\n                    file_ptr = (FILE *)xmalloc(0x40);\n                    char_double_pointer = (char **)((long)&file_ptr->_flags + long_var * 8);\n                    *char_double_pointer = (char *)0x0;\n                  }\n                  else {\n                    int_var = int_var * 2;\n                    file_ptr = (FILE *)xrealloc(file_ptr,(long)int_var << 3);\n                    char_double_pointer = (char **)((long)&file_ptr->_flags + long_var * 8);\n                    *char_double_pointer = (char *)0x0;\n                  }\n                }\n                else {\n                  char_double_pointer = (char **)((long)&file_ptr->_flags + long_var * 8);\n                }\n                byte_var = *byte_ptr3;\n                byte_ptr = byte_pointer;\n                while (byte_var != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var | bool_var1 | bool_var))) {\n                      bool_var1 = false;\n                      bool_var = false;\n                      bool_var = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bool_var1) break;\n                    byte_ptr3 = byte_ptr3 + 1;\n                    *byte_ptr = byte_var;\n                    byte_ptr = byte_ptr + 1;\n                    bool_var1 = false;\n                    byte_var = *byte_ptr3;\n                    if (byte_var == 0) goto LAB_0010606f;\n                  }\n                  if (byte_var == 0x5c) {\n                    bool_var1 = true;\n                  }\n                  else if (bool_var) {\n                    if (byte_var == 0x27) {\n                      bool_var = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *byte_ptr = byte_var;\n                      byte_ptr = byte_ptr + 1;\n                    }\n                  }\n                  else if (bool_var) {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var = false;\n                  }\n                  else if (byte_var == 0x27) {\n                    bool_var = true;\n                  }\n                  else {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var = true;\n                  }\n                  byte_pointer = byte_ptr3 + 1;\n                  byte_ptr3 = byte_ptr3 + 1;\n                  byte_var = *byte_pointer;\n                }\nLAB_0010606f:\n                *byte_ptr = 0;\n                long_pointer = (long *)xstrdup(byte_pointer);\n                *char_double_pointer = (char *)long_pointer;\n                *(undefined8 *)(file_ptr->_shortbuf + long_var * 8 + -0x7b) = 0;\n                byte_var = *byte_ptr3;\n                byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                while ((byte_var & 0x40) != 0) {\n                  byte_var = byte_ptr3[1];\n                  byte_ptr3 = byte_ptr3 + 1;\n                  byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                }\n                long_var = long_var + 1;\n                if (byte_var == 0) {\n                  free(byte_pointer);\n                  if (file_ptr2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byte_ptr);\n          }\n          fclose(file_ptr);\n        }\n      }\n    }\n    if ((int)char_pointer <= (int)(uint_var + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uint_var = (uint)file_pointer_temp3;\n        int_var = bfd_init();\n        char_pointer = \"fatal error: libbfd ABI mismatch\";\n        if (int_var != 0x118) goto LAB_00106803;\n        char_pointer = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefined_pointer = PTR_DAT_0010d2e0;\n        file_pointer_temp3 = (FILE *)(ulong)uint_var;\n        if ((char)uint_var != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_functions_in_list_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefined_pointer = PTR_DAT_0010d2e0;\n            int_var = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = int_var + 1;\n            *(code **)(undefined_pointer + (long)int_var * 8 + 0x10) = cleanup_function_00107730;\n          }\n          else {\n            undefined8_ptr2 = (undefined8 *)malloc(0x110);\n            if (undefined8_ptr2 != (undefined8 *)0x0) {\n              *undefined8_ptr2 = undefined_pointer;\n              *(undefined4 *)(undefined8_ptr2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8_ptr2;\n              goto LAB_0010632b;\n            }\n          }\n          long_var = 1;\n          do {\n            long_var = long_var;\n            int_var = (int)char_pointer;\n            if (int_var <= (int)long_var) break;\n            char_var = initialize_program_00107640(*(undefined8 *)((int *)char_var + long_var * 2));\n            long_var = long_var + 1;\n          } while (char_var != '\\0');\n          char_pointer = (char *)((long)char_var + long_var * 8 + -8);\n          uint_var = int_var - ((int)long_var + -1);\n          file_ptr = (FILE *)(ulong)uint_var;\n          if (_DAT_0010d2d4 != 0) {\n            char_var = \"DhHUvVt\";\n            uint_var = 0;\n            while (int_var = getopt_long(file_ptr,char_pointer,\"DhHUvVt\",&PTR_DAT_0010d300), int_var != -1)\n            {\n              if (int_var < 0x77) {\n                if (0x43 < int_var) {\n                  switch(int_var) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uint_var = uint_var;\n                  }\n                }\n              }\n              else if (int_var == 0xc9) {\n                bfd_plugin_set_plugin(optarg);\n              }\n            }\n            if ((int)uint_var < 2) {\nLAB_00107125:\n              char_pointer = (char *)0x0;\n              print_usage_and_exit_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_and_exit_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_gnu_version_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              file_pointer_temp3 = (FILE *)0x0;\n              char_var = (char *)(long)optind;\n              while( true ) {\n                if ((int)uint_var <= (int)char_var) goto LAB_00106f8b;\n                char_pointer = *(char **)((int *)char_pointer + (long)char_var * 2);\n                if ((char)uint_var != '\\0') break;\n                uint_var = extract_and_print_archive_file_info_00107650();\n                char_var = (char *)((long)(int *)char_var + 1);\n                file_pointer_temp3 = (FILE *)(ulong)((uint)file_pointer_temp3 | uint_var);\n              }\n            }\n            while (long_var = get_file_stat_size_001052a0(char_pointer), long_var < 1) {\n              uint_var = 1;\nLAB_001071c4:\n              int_pointer = (int *)char_var;\n              char_var = (char *)((long)int_pointer + 1);\n              file_pointer_temp3 = (FILE *)(ulong)((uint)file_pointer_temp3 | uint_var);\n              if ((int)uint_var <= (int)char_var) {\nLAB_00106f8b:\n                    \n                xexit(file_pointer_temp3);\n              }\n              char_pointer = *(char **)((char *)((long)char_pointer + 0x83) + (long)int_pointer * 8 + -0x7b);\n            }\n            int_var = open(char_pointer,2,0);\n            if (int_var < 0) {\n              bfd_set_error(1);\n              print_error_message_and_exit_00107c10(char_pointer);\nLAB_0010737f:\n              print_error_message_and_exit_00107c10(char_pointer);\nLAB_00107387:\n              print_error_message_00107c20(char_pointer);\n              int_var = bfd_get_error();\n              if (int_var == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(undefined5_var,\n                                      CONCAT12(undefined_var,CONCAT11(undefined_var[1],undefined_var[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            char_pointer = (char *)bfd_fdopenr(char_pointer,0);\n            if ((FILE *)char_pointer == (FILE *)0x0) goto LAB_0010737f;\n            char_var = bfd_check_format_matches(char_pointer,2,undefined_var);\n            if (char_var == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)char_pointer + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uint_pointer = (uint *)((long)((long)char_pointer + 0x40) + 4);\n                *uint_pointer = *uint_pointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)char_pointer + 8) + 0x1f0))(char_pointer);\n              char_var = bfd_close(char_pointer);\n              if (char_var != '\\0') {\n                uint_var = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8_var = dcgettext(0,\"%s: no archive map to update\",5);\n            print_error_message_and_exit_00107690(undefined8_var,char_pointer);\nLAB_001073cc:\n            char_pointer = (char *)lbasename(DAT_0010d660);\n            size_var = strlen(char_pointer);\n            if ((size_var < 6) ||\n               (int_var = filename_cmp(char_pointer + (size_var - 6),\"ranlib\"), int_var != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          undefined_pointer_pointer = &PTR_DAT_0010d300;\n          char_pointer = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          char_var = (char *)&DAT_001096a0;\n          file_ptr2 = (FILE *)char_pointer;\n          file_ptr = file_ptr;\n          if ((int)uint_var < 2) goto switchD_00107462_caseD_1;\n          undefined8_var = (FILE *)CONCAT71(undefined8_var._1_7_,(char)uint_var);\nLAB_001063a3:\n          file_ptr2 = (FILE *)char_pointer;\n          if (**(char **)((long)char_pointer + 8) != '-') {\n            undefined_var[0] = 0x2d;\n            undefined_var = 0;\n            size_var = strlen(*(char **)((long)char_pointer + 8));\n            int_var = (int)size_var + (int)file_ptr;\n            file_pointer_temp3 = (FILE *)xmalloc((long)int_var * 8);\n            undefined4_var = *(undefined4 *)((long)char_pointer + 4);\n            file_pointer_temp3->_flags = *(int *)char_pointer;\n            *(undefined4 *)&file_pointer_temp3->field_0x4 = undefined4_var;\n            char_double_pointer = *(char ***)((long)char_pointer + 8);\n            file_ptr = (FILE *)((long)char_pointer + 0x10);\n            char_ptr_ptr = char_double_pointer;\n            if (*(char *)char_double_pointer == '\\0') {\n              ptr_ptr_char32 = &file_pointer_temp3->_IO_read_ptr;\n            }\n            else {\n              byte_ptr = undefined_var;\n              undefined_var[1] = *(char *)char_double_pointer;\n              char_pointer = (char *)xstrdup();\n              ptr_ptr_char32 = &file_pointer_temp3->_IO_read_end;\n              file_pointer_temp3->_IO_read_ptr = char_pointer;\n              if (*(char *)((long)char_double_pointer + 1) != '\\0') {\n                undefined_var[1] = *(char *)((long)char_double_pointer + 1);\n                char_pointer = (char *)xstrdup(byte_ptr);\n                ptr_ptr_char32 = &file_pointer_temp3->_IO_read_base;\n                file_pointer_temp3->_IO_read_end = char_pointer;\n                if (*(char *)((long)char_double_pointer + 2) != '\\0') {\n                  undefined_var[1] = *(char *)((long)char_double_pointer + 2);\n                  char_pointer = (char *)xstrdup(byte_ptr);\n                  ptr_ptr_char32 = &file_pointer_temp3->_IO_write_base;\n                  file_pointer_temp3->_IO_read_base = char_pointer;\n                  if (*(char *)((long)char_double_pointer + 3) != '\\0') {\n                    ptr_ptr_char32 = &file_pointer_temp3->_IO_write_ptr;\n                    undefined_var[1] = *(char *)((long)char_double_pointer + 3);\n                    char_pointer = (char *)xstrdup(byte_ptr);\n                    file_pointer_temp3->_IO_write_base = char_pointer;\n                    char_var = *(char *)((long)char_double_pointer + 4);\n                    char_ptr_ptr = ptr_ptr_char32;\n                    if (char_var != '\\0') {\n                      char_pointer = (char *)((long)char_double_pointer + 4);\n                      char_double_pointer = ptr_ptr_char32;\n                      do {\n                        ptr_ptr_char32 = char_double_pointer + 1;\n                        undefined_var[1] = char_var;\n                        char_var = (char *)xstrdup(byte_ptr);\n                        char_pointer = char_pointer + 1;\n                        *char_double_pointer = char_var;\n                        char_var = *char_pointer;\n                        char_double_pointer = ptr_ptr_char32;\n                        char_ptr_ptr = ptr_ptr_char32;\n                      } while (char_var != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            long_var = (long)(int)file_ptr;\n            int_pointer = (int *)char_pointer + long_var * 2;\n            if (file_ptr < int_pointer) {\n              ulong_var = long_var * 8 - 0x11;\n              if ((ulong_var < 0x18) || (ptr_ptr_char32 == (char **)((long)char_pointer + 0x18))) {\n                *ptr_ptr_char32 = *(char **)((long)char_pointer + 0x10);\n                if (((char **)((long)char_pointer + 0x18) < int_pointer) &&\n                   ((((ptr_ptr_char32[1] = *(char **)((long)char_pointer + 0x18),\n                      (char **)((long)char_pointer + 0x20) < int_pointer &&\n                      (ptr_ptr_char32[2] = *(char **)((long)char_pointer + 0x20),\n                      (char **)((long)char_pointer + 0x28) < int_pointer)) &&\n                     (ptr_ptr_char32[3] = *(char **)((long)char_pointer + 0x28),\n                     (char **)((long)char_pointer + 0x30) < int_pointer)) &&\n                    (ptr_ptr_char32[4] = *(char **)((long)char_pointer + 0x30),\n                    (char **)((long)char_pointer + 0x38) < int_pointer)))) {\n                  ptr_ptr_char32[5] = *(char **)((long)char_pointer + 0x38);\n                  char_pointer_pointer = ptr_ptr_char32 + 6;\n                  for (char_double_pointer = (char **)((long)char_pointer + 0x40); char_double_pointer < int_pointer;\n                      char_double_pointer = char_double_pointer + (ulong)byte_var * -2 + 1) {\n                    *char_pointer_pointer = *char_double_pointer;\n                    char_pointer_pointer = char_pointer_pointer + (ulong)byte_var * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4_var = *(undefined4 *)((long)((long)char_pointer + 0x10) + 4);\n                uint_var = *(undefined4 *)((long)char_pointer + 0x18);\n                uint_var = *(undefined4 *)((long)((long)char_pointer + 0x18) + 4);\n                ulong_var = (ulong_var >> 3) + 1;\n                *(undefined4 *)ptr_ptr_char32 = *(undefined4 *)((long)char_pointer + 0x10);\n                *(undefined4 *)((long)ptr_ptr_char32 + 4) = undefined4_var;\n                *(undefined4 *)(ptr_ptr_char32 + 1) = uint_var;\n                *(undefined4 *)((long)ptr_ptr_char32 + 0xc) = uint_var;\n                undefined4_var = *(undefined4 *)((long)((long)char_pointer + 0x20) + 4);\n                uint_var = *(undefined4 *)((long)char_pointer + 0x28);\n                uint_var = *(undefined4 *)((long)((long)char_pointer + 0x28) + 4);\n                ulong_var = ulong_var >> 1;\n                *(undefined4 *)(ptr_ptr_char32 + 2) = *(undefined4 *)((long)char_pointer + 0x20);\n                *(undefined4 *)((long)ptr_ptr_char32 + 0x14) = undefined4_var;\n                *(undefined4 *)(ptr_ptr_char32 + 3) = uint_var;\n                *(undefined4 *)((long)ptr_ptr_char32 + 0x1c) = uint_var;\n                if (ulong_var != 2) {\n                  undefined4_var = *(undefined4 *)((long)((long)char_pointer + 0x30) + 4);\n                  uint_var = *(undefined4 *)((long)char_pointer + 0x38);\n                  uint_var = *(undefined4 *)((long)((long)char_pointer + 0x38) + 4);\n                  *(undefined4 *)(ptr_ptr_char32 + 4) = *(undefined4 *)((long)char_pointer + 0x30);\n                  *(undefined4 *)((long)ptr_ptr_char32 + 0x24) = undefined4_var;\n                  *(undefined4 *)(ptr_ptr_char32 + 5) = uint_var;\n                  *(undefined4 *)((long)ptr_ptr_char32 + 0x2c) = uint_var;\n                  if (ulong_var != 3) {\n                    ulong_var = 3;\n                    do {\n                      ulong_var = ulong_var + 1;\n                      char_pointer = (char *)((long)char_pointer + 0x83) + ulong_var * 0x10 + -0x73;\n                      undefined4_var = *(undefined4 *)(char_pointer + 4);\n                      uint_var = *(undefined4 *)(char_pointer + 8);\n                      uint_var = *(undefined4 *)(char_pointer + 0xc);\n                      char_double_pointer = ptr_ptr_char32 + ulong_var * 2;\n                      *(undefined4 *)char_double_pointer = *(undefined4 *)char_pointer;\n                      *(undefined4 *)((long)char_double_pointer + 4) = undefined4_var;\n                      *(undefined4 *)(char_double_pointer + 1) = uint_var;\n                      *(undefined4 *)((long)char_double_pointer + 0xc) = uint_var;\n                      ulong_var = ulong_var;\n                    } while (ulong_var != ulong_var);\n                  }\n                }\n                if ((ulong_var & 1) != 0) {\n                  ptr_ptr_char32[ulong_var & 0xfffffffffffffffe] =\n                       *(char **)((long)file_ptr + (ulong_var & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ptr_ptr_char32 = ptr_ptr_char32 + long_var + -2;\n            }\n            file_ptr = (FILE *)(ulong)(int_var - 1);\n            *ptr_ptr_char32 = (char *)0x0;\n            char_pointer = (char *)file_pointer_temp3;\n          }\nLAB_001065a2:\n          while( true ) {\n            uint_var = (uint)file_pointer_temp3;\n            uint_var = getopt_long((ulong)file_ptr & 0xffffffff,char_pointer,file_ptr2,undefined_pointer_pointer,0);\n            char_pointer = (char *)file_ptr2;\n            if (uint_var == 0xffffffff) break;\n            if (((uint_var - 100 < 0x15) && ((0x117201UL >> ((ulong)(uint_var - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            file_ptr = (FILE *)char_pointer;\n            if (uint_var < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)char_var + (long)((int *)char_var)[uint_var]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_info_0010342d(0);\n            char_pointer = (char *)file_ptr;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uint_var = DAT_0010d64c;\n          file_ptr2 = (FILE *)char_pointer;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)file_ptr <= optind || (optind < 1)))) {\n              uint_var = 0;\n              goto LAB_001066aa;\n            }\n            char_pointer = (char *)((long)char_pointer + (long)optind * 8 + -8);\n            uint_var = (int)file_ptr - (optind + -1);\n            file_ptr = (FILE *)(ulong)uint_var;\n            optind = 0;\n            if (1 < (int)uint_var) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          file_pointer_temp3 = (FILE *)((ulong)undefined8_var & 0xff);\n          uint_var = (uint)file_pointer_temp3;\n          undefined_pointer_pointer = (undefined **)((int *)char_pointer + (long)optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_gnu_version_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              file_ptr = (FILE *)char_pointer;\n              if (*undefined_pointer_pointer == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uint_var == 3) goto LAB_00106abc;\n                  if (uint_var != 0) goto LAB_00106700;\nLAB_00106eff:\n                  char_pointer = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uint_var == 3) || (uint_var == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4_var = extract_and_print_archive_file_info_00107650();\n                    \n                  xexit(undefined4_var);\n                }\nLAB_00106abc:\n                if (uint_var == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  char_pointer = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              char_pointer = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*undefined_pointer_pointer;\n                char_pointer = (char *)0x1;\n                char_pointer = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                char_pointer = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  int_var = (int)char_pointer;\n                  if (*(char **)((long)undefined_pointer_pointer + (long)int_var * 2 * 4) == (char *)0x0) {\n                    undefined8_var = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_error_message_and_exit_00107690(undefined8_var);\n                    uint_var = uint_var;\nLAB_00107548:\n                    if (uint_var == 2) {\nLAB_0010704f:\n                      char_pointer = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  char_pointer = (char *)(ulong)(int_var + 1);\n                  long_var = strtol(*(char **)((long)undefined_pointer_pointer + (long)int_var * 2 * 4),(char **)0x0,10)\n                  ;\n                  char_pointer = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)long_var;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              long_var = (long)(int)char_pointer;\n              file_ptr2 = (FILE *)char_pointer;\n              if (*(long *)(int *)((long)undefined_pointer_pointer + long_var * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              file_ptr2 = (FILE *)((long)undefined_pointer_pointer + (long_var + 1) * 2 * 4);\n              if (*(FILE **)file_ptr2 == (FILE *)0x0) {\n                char_var = (char *)0x0;\n                file_ptr2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 2) * 2 * 4) == 0) {\n                char_var = (char *)0x1;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 3) * 2 * 4) == 0) {\n                char_var = (char *)0x2;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 4) * 2 * 4) == 0) {\n                char_var = (char *)0x3;\n              }\n              else if (*(long *)((long)undefined_pointer_pointer + (long_var + 5) * 2 * 4) == 0) {\n                char_var = (char *)0x4;\n              }\n              else {\n                file_ptr = (FILE *)0x5;\n                do {\n                  char_var = (char *)file_ptr;\n                  file_ptr = (FILE *)((long)(int *)char_var + 1);\n                } while (*(long *)((int *)((long)undefined_pointer_pointer + long_var * 2 * 4) + (long)file_ptr * 2) !=\n                         0);\n              }\n              undefined8_ptr2 = (undefined8 *)improved_extract_and_convert_archived_files_00105db0_00105300();\n              file_ptr = file_ptr2;\n              if (DAT_0010d64c == 5) {\n                char_pointer = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8_ptr2 + 0x49) & 0x10) == 0) {\n                  char_pointer = (char *)file_ptr2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archive_entries_00105480(undefined8_ptr2,process_and_extract_archive_00107740,char_pointer,(ulong)char_var & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_var = strlen(DAT_0010d628);\n                char_pointer = \"__.LIBDEP\";\n                char_pointer = (char *)(size_var + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8_ptr2);\n                if (DAT_0010d620 == 0) {\n                  char_pointer = \"Cannot create libdeps record.\";\n                }\n                else {\n                  long_var = bfd_find_target(\"binary\",DAT_0010d620);\n                  char_pointer = \"Cannot set libdeps record type to binary.\";\n                  if (long_var != 0) {\n                    char_var = bfd_set_format(DAT_0010d620,1,5);\n                    char_pointer = \"Cannot set libdeps object format.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    char_var = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    char_pointer = \"Cannot make libdeps object writable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    file_ptr = (FILE *)bfd_bwrite(DAT_0010d628,char_pointer,DAT_0010d620);\n                    char_pointer = \"Cannot write libdeps record.\";\n                    if (file_ptr != (FILE *)char_pointer) goto LAB_00106803;\n                    char_var = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    char_pointer = \"Cannot make libdeps object readable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    long_var = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    char_pointer = \"Cannot reset libdeps record type.\";\n                    if (long_var == 0) goto LAB_00106803;\n                    int_var = (int)char_var;\n                    undefined8_var = (FILE *)((long)(int_var + 2) * 8);\n                    char_pointer = (char *)xmalloc(undefined8_var,\"Cannot reset libdeps record type.\");\n                    if (int_var == 0) {\n                      long_var = 0;\n                    }\n                    else {\n                      undefined4_var = *(undefined4 *)&file_ptr2->field_0x4;\n                      *(int *)char_pointer = file_ptr2->_flags;\n                      *(undefined4 *)((long)char_pointer + 4) = undefined4_var;\n                      long_var = 8;\n                      char_double_pointer = (char **)((long)char_pointer + 8);\n                      for (char_var = undefined8_var[-1]._unused2 + 4; char_var != (char *)0x0;\n                          char_var = char_var + -1) {\n                        *(undefined *)char_double_pointer = *(undefined *)&file_ptr2->_flags;\n                        file_ptr2 = (FILE *)((long)file_ptr2 + (ulong)byte_var * -2 + 1);\n                        char_double_pointer = (char **)((long)char_double_pointer + (ulong)byte_var * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)char_pointer + long_var) = \"__.LIBDEP\";\n                    char_var = (char *)(ulong)(int_var + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)char_pointer + -0xd8))->_unused2 + 0xc + (long)undefined8_var) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      file_ptr2 = (FILE *)char_pointer;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                char_pointer = (char *)file_ptr2;\n                if (file_ptr2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                file_ptr = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                char_pointer = (char *)file_ptr2;\n                if ((file_ptr2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  extract_and_print_archive_file_info_00105570(undefined8_ptr2,char_pointer,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                char_pointer = (char *)file_ptr2;\nswitchD_00106ed8_caseD_3:\n                process_archive_entries_00105480(undefined8_ptr2,print_file_info_tostdout_00107890,char_pointer,(ulong)char_var & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                char_pointer = (char *)file_ptr2;\nswitchD_00106ed8_caseD_4:\n                process_archive_entries_00105480(undefined8_ptr2,extract_and_print_archive_contents_00103a78,char_pointer,(ulong)char_var & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                char_pointer = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (file_ptr2 == (FILE *)0x0) break;\nLAB_00106afb:\n                file_ptr = (FILE *)(undefined8_ptr2 + 0x1e);\n                do {\n                  file_pointer_temp3 = file_ptr;\n                  if (*(FILE **)file_ptr2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_and_print_archive_file_info_001058b0(undefined8_ptr2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    long_pointer = *(long **)file_pointer_temp3;\n                    char_pointer = *(char **)file_ptr2;\n                    if (long_pointer == (long *)0x0) {\n                      undefined8_var = *undefined8_ptr2;\n                      undefined8_var = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_error_message_and_exit_00107690(undefined8_var,char_pointer,undefined8_var);\n                      char_var = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    long_var = *long_pointer;\n                    undefined8_var = extract_and_copy_substring_00105830(char_pointer,undefined8_ptr2);\n                    int_var = filename_cmp(undefined8_var,long_var);\n                    if (int_var == 0) break;\n                    file_pointer_temp3 = (FILE *)(*(long **)file_pointer_temp3 + 0x1e);\n                  }\n                  *(long **)file_pointer_temp3 = (long *)long_pointer[0x1e];\n                  long_pointer_pointer = (long **)find_last_file_index_00105870(file_ptr,3,0);\n                  bool_var = DAT_0010d60c != 0;\n                  long_pointer = *long_pointer_pointer;\n                  *long_pointer_pointer = long_pointer;\n                  long_pointer[0x1e] = (long)long_pointer;\n                  if (bool_var) {\n                    printf(\"m - %s\\n\",*(FILE **)file_ptr2);\n                  }\n                  file_ptr2 = (FILE *)&file_ptr2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_info_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          int_var = fileno(stdin);\n          _DAT_0010d608 = isatty(int_var);\n          improved_extract_and_convert_archived_files_00105db0_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4_var = bfd_get_error();\n        file_ptr2 = (FILE *)bfd_errmsg(undefined4_var);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        int_var = print_error_message_and_exit_00107690(undefined8_var,\"x86_64-pc-linux-gnu\",file_ptr2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          undefined_pointer_pointer = (undefined **)char_pointer;\n          file_ptr = (FILE *)char_pointer;\n          switch(int_var) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uint_var = (uint)file_pointer_temp3;\n            char_pointer = \"libdeps specified more than once\";\n            char_pointer = (char *)file_ptr2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        char_pointer = \"two different operation options specified\";\n        char_pointer = (char *)file_ptr2;\nLAB_00106803:\n        undefined8_var = dcgettext(0,char_pointer,5);\n        print_error_message_and_exit_00107690(undefined8_var);\nLAB_00106814:\n        int_var = (int)char_pointer;\n        file_ptr = (FILE *)xmalloc(8);\n        *(long **)file_ptr = (long *)0x0;\n        if ((FILE *)char_var == argv) {\nLAB_00106834:\n          if (*(long **)char_var == (long *)0x0) {\n            int_var = 0;\n          }\n          else {\n            long_var = 1;\n            do {\n              int_var = (int)long_var;\n              long_var = long_var * 2;\n              long_var = long_var + 1;\n            } while (*(long *)((int *)char_var + long_var) != 0);\n          }\n          file_ptr2 = (FILE *)xmalloc((long)(int_var + 1) << 3);\n          long_pointer = *(long **)char_var;\n          long_var = 0;\n          while (long_pointer != (long *)0x0) {\n            undefined8_var = xstrdup();\n            *(undefined8 *)((long)&file_ptr2->_flags + long_var) = undefined8_var;\n            long_pointer = *(long **)((char *)((long)char_var + 0x83) + long_var + -0x7b);\n            long_var = long_var + 8;\n          }\n          *(undefined8 *)((long)&file_ptr2->_flags + long_var) = 0;\nLAB_0010610a:\n          int_var = (int)char_pointer;\n          char_var = (char *)file_ptr2;\n          if (*(long **)file_ptr == (long *)0x0) goto LAB_00106a80;\n          long_var = 0;\n          do {\n            long_var = long_var + 1;\n            long_var = long_var * 8;\n            long_var = long_var;\n          } while (*(long *)(file_ptr->_shortbuf + long_var + -0x7b) != 0);\n          size_var = long_var * 8;\n        }\n        else {\nLAB_00106a80:\n          long_var = 0;\n          size_var = 0;\n        }\n        long_var = (long)char_pointer * 2;\n        char_pointer = (char *)((long)(char **)char_pointer + long_var);\n        free(*(void **)((int *)char_var + long_var));\n        file_ptr2 = (FILE *)xrealloc(char_var,(long_var + 1 + (long)int_var) * 8);\n        uint_var = int_var + -1 + (int)long_var;\n        char_pointer = (char *)(ulong)uint_var;\n        memmove(&file_ptr2->_flags + (long)char_pointer * 2,\n                (void *)((long)&file_ptr2->_IO_read_ptr + (long)undefined8_var),\n                (long)(int)(int_var - uint_var) << 3);\n        memcpy((void *)((long)&undefined8_var->_flags + (long)&file_ptr2->_flags),file_ptr,size_var);\n        free(file_ptr);\n        free(byte_ptr);\n        fclose(file_ptr);\n        uint_var = (int)file_ptr + 1;\n        file_pointer_temp3 = undefined8_var;\n        char_var = (char *)file_ptr2;\n        undefined8_var = file_ptr;\n        if ((int)uint_var < (int)uint_var) goto LAB_001061ce;\n      } while( true );\n    }\n    uint_var = uint_var + 1;\n    file_ptr = file_pointer_temp3;\nLAB_001061ce:\n    file_pointer_temp3 = (FILE *)(ulong)uint_var;\n  } while( true );\nswitchD_00107462_caseD_0:\n  int_var = getopt_long((ulong)file_ptr & 0xffffffff,char_pointer,file_ptr2,\"x86_64-pc-linux-gnu\");\n  char_pointer = (char *)file_ptr2;\n  if (int_var == -1) goto LAB_00106680;\n  if ((0x14 < int_var - 100U) || ((0x117201UL >> ((byte)(int_var - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8_var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_formatted_error_message_00107920(undefined8_var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)char_pointer == (FILE *)0x0) {\n    if ((char)file_ptr != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  int_var = 0;\n  int_var = strcmp((char *)*(FILE **)char_pointer,\"__.SYMDEF\");\n  undefined8_pointer = undefined8_ptr2;\n  if (int_var == 0) {\n    *(byte *)((long)undefined8_ptr2 + 0x49) = *(byte *)((long)undefined8_ptr2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      long_pointer = undefined8_pointer + 0x1e;\n      if ((undefined8 *)*long_pointer == (undefined8 *)0x0) break;\n      undefined8_var = *(undefined8 *)*long_pointer;\n      undefined8_var = extract_and_copy_substring_00105830(*(FILE **)char_pointer,undefined8_ptr2);\n      int_var = filename_cmp(undefined8_var,undefined8_var);\n      if ((int_var == 0) &&\n         ((DAT_0010d634 == '\\0' || (int_var = int_var + 1, int_var == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)char_pointer);\n        }\n        *long_pointer = *(long *)(*long_pointer + 0xf0);\n        file_ptr = file_pointer_temp3;\n        goto LAB_00106d38;\n      }\n      undefined8_pointer = (undefined8 *)*long_pointer;\n    }\n    if (DAT_0010d60c != 0) {\n      file_ptr2 = *(FILE **)char_pointer;\n      char_pointer = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(char_pointer,file_ptr2);\n    }\n  }\nLAB_00106d38:\n  char_pointer = (char *)((long)char_pointer + 8);\n  goto LAB_00106b89;\n}\n\n",
            "current_name": "improved_extract_and_convert_archived_files_00105db0",
            "entrypoint": "0x00105db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105db0": "improved_extract_and_convert_archived_files_00105db0",
                "__ptr": "byte_pointer",
                "_optarg": "optarg",
                "_optind": "optind",
                "_stderr": "stderr",
                "_stdin": "stdin",
                "_stdout": "stdout",
                "bVar13": "byte_var",
                "bVar3": "byte_var",
                "bVar47": "bool_var",
                "bVar48": "byte_var",
                "bVar8": "bool_var1",
                "bVar9": "bool_var",
                "cVar14": "char_var",
                "cVar46": "char_ptr5",
                "extraout_EDX": "uint_var",
                "iVar15": "int_var",
                "iVar45": "int_var",
                "lVar24": "long_var",
                "lVar29": "long_pointer",
                "lVar34": "long_var",
                "lVar35": "long_var",
                "local_100": "long_var",
                "local_108": "size_var",
                "local_110": "char_ptr_ptr",
                "local_118": "byte_ptr",
                "local_128": "file_ptr",
                "local_130": "undefined8_var",
                "local_b0": "uint_var",
                "local_c8": "undefined_var",
                "pFVar18": "file_ptr",
                "pFVar22": "file_ptr2",
                "pFVar28": "file_ptr",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_pointer",
                "pbVar33": "byte_ptr3",
                "pbVar38": "byte_ptr",
                "pcVar23": "char_var",
                "pcVar39": "char_pointer",
                "pcVar43": "char_var",
                "pcVar46": "char_pointer",
                "piVar11": "int_pointer",
                "plVar21": "long_pointer",
                "plVar29": "ptr11",
                "plVar4": "long_pointer",
                "ppcVar10": "char_pointer_pointer",
                "ppcVar31": "char_double_pointer",
                "ppcVar32": "ptr_ptr_char32",
                "pplVar29": "long_pointer_pointer",
                "ppuVar36": "undefined_pointer_pointer",
                "puVar12": "undefined_pointer",
                "puVar2": "uint_pointer",
                "puVar26": "undefined8_ptr2",
                "puVar36": "ptr14",
                "puVar5": "undefined8_pointer",
                "sVar19": "size_var",
                "sVar20": "size_var",
                "uStack_c5": "undefined5_var",
                "uStack_c6": "undefined_var",
                "uVar16": "uint_var",
                "uVar17": "undefined4_var",
                "uVar25": "ulong_var",
                "uVar27": "undefined8_var",
                "uVar30": "undefined8_var",
                "uVar37": "uint_var",
                "uVar40": "ulong_var",
                "uVar41": "ulong_var",
                "uVar42": "ulong_var",
                "uVar44": "uint_var",
                "uVar6": "uint_var",
                "uVar7": "uint_var",
                "unaff_R12": "file_pointer_temp3",
                "unaff_RBP": "char_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001075e0": {
            "additional_data": {
                "FUN_001075e0": {
                    "print_binutils_info": 1,
                    "print_binutils_version": 2,
                    "print_gnu_binutils_version": 1,
                    "print_gnu_version": 1,
                    "print_gnu_version_info": 1,
                    "print_program_details": 1,
                    "print_program_info": 1,
                    "print_software_information": 1,
                    "print_version_info": 21,
                    "print_version_information": 1
                },
                "param_1": {
                    "compiler_name": 2,
                    "package_name": 1,
                    "program_name": 3,
                    "tool_name": 1,
                    "version": 13,
                    "version_string": 11
                },
                "pcVar1": {
                    "copy_right_msg": 1,
                    "copy_right_string": 1,
                    "copy_right_text": 1,
                    "copyleft_message": 1,
                    "copyright": 1,
                    "copyright_message": 4,
                    "copyright_msg": 1,
                    "copyright_string": 4,
                    "copyright_text": 5,
                    "gettext_message": 1,
                    "localized_text": 1,
                    "message": 9,
                    "translated_text": 1
                }
            },
            "called": [
                "printf",
                "exit",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid print_gnu_version_info_001075e0(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_gnu_version_info_001075e0",
            "entrypoint": "0x001075e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001075e0": "print_gnu_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107640": {
            "additional_data": {
                "FUN_00107640": {
                    "do_nothing": 1,
                    "get_default_value": 6,
                    "get_initialized_value": 1,
                    "initialize": 11,
                    "initialize_application": 1,
                    "initialize_data": 2,
                    "initialize_default_value": 1,
                    "initialize_function": 1,
                    "initialize_memory": 1,
                    "initialize_program": 2,
                    "initialize_return_value": 1,
                    "initialize_system": 1,
                    "initialize_variable": 1,
                    "initialize_zero": 1
                },
                "new_parameter_name_1": {
                    "ptr1": 1
                },
                "new_parameter_name_2": {
                    "ptr2": 1
                },
                "return": {
                    "initialize_successful": 1,
                    "result": 1,
                    "return_value": 1
                },
                "undefined8": {
                    "uint64_t": 1,
                    "void": 14
                }
            },
            "called": [],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid initialize_program_00107640(void)\n\n{\n  return_value 0;\n}\n\n",
            "current_name": "initialize_program_00107640",
            "entrypoint": "0x00107640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107640": "initialize_program_00107640",
                "return": "return_value",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107650": {
            "additional_data": {
                "FUN_00107650": {
                    "check_and_extract_archive": 1,
                    "check_and_extract_archived_files": 2,
                    "extract_and_convert_archived_files": 1,
                    "extract_and_print_archive_file_info": 5,
                    "extract_and_print_archive_info": 4,
                    "extract_and_print_archived_file": 1,
                    "extract_and_print_archived_files": 1,
                    "extract_and_print_file_info": 11,
                    "extract_and_print_file_statistics": 1,
                    "extract_and_print_file_stats": 1,
                    "extract_file_from_archive": 1,
                    "extract_files_from_archive": 1,
                    "process_file": 1
                },
                "extract_and_print_archive_file_info_001058b0": {
                    "extract_and_print_archive_file_info": 1,
                    "print_archive_file_info": 1
                },
                "get_file_stat_size_001052a0": {
                    "get_file_size": 2,
                    "get_file_stat_size": 4
                },
                "improved_extract_and_convert_archived_files_00105300": {
                    "extract_and_convert_archived_files": 4,
                    "extract_and_convert_files": 1
                },
                "lVar2": {
                    "file_size": 29,
                    "file_stat_size": 2
                },
                "param_1": {
                    "archive_file": 2,
                    "archive_file_path": 4,
                    "archive_path": 3,
                    "file": 8,
                    "file_handle": 2,
                    "file_path": 4,
                    "file_pointer": 1,
                    "input_file": 5,
                    "input_file_path": 1,
                    "param": 1
                },
                "uVar1": {
                    "result": 11,
                    "return_value": 6,
                    "status": 2,
                    "success": 1
                },
                "xexit": {
                    "exit": 3,
                    "exit_program": 2
                }
            },
            "called": [
                "FUN_001052a0",
                "xexit",
                "FUN_001058b0",
                "FUN_0010284b",
                "FUN_00105300"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nundefined8 extract_and_print_archive_file_info_00107650(undefined8 file)\n\n{\n  undefined8 result;\n  long file_size;\n  \n  file_size = get_file_stat_size();\n  if (file_size < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    file_size = extract_and_convert_archived_files(file,0);\n    if (file_size == 0) {\n                    \n      xexit(1);\n    }\n    extract_and_print_archive_file_info_00107650(file_size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "extract_and_print_archive_file_info_00107650",
            "entrypoint": "0x00107650",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107650": "extract_and_print_archive_file_info_00107650",
                "extract_and_print_archive_file_info_001058b0": "extract_and_print_archive_file_info",
                "get_file_stat_size_001052a0": "get_file_stat_size",
                "improved_extract_and_convert_archived_files_00105300": "extract_and_convert_archived_files",
                "lVar2": "file_size",
                "param_1": "file",
                "uVar1": "result",
                "xexit": "exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107690": {
            "additional_data": {
                "FUN_00107690": {
                    "format_error_and_exit": 1,
                    "print_and_exit": 3,
                    "print_error_and_exit": 11,
                    "print_error_message_and_exit": 10,
                    "print_formatted_error_and_exit": 2,
                    "print_formatted_error_message": 4
                },
                "in_AL": {
                    "bool_condition": 1,
                    "condition": 5,
                    "condition_flag": 1,
                    "enable_error_print": 1,
                    "flag": 13,
                    "input_flag": 2,
                    "is_active": 1,
                    "is_enabled": 1,
                    "is_error": 3,
                    "some_condition": 1
                },
                "local_18": {
                    "condition8": 1,
                    "error8_copy": 1,
                    "error8_local": 1,
                    "error_message8_copy": 1,
                    "error_param_copy": 1,
                    "local_param8": 2,
                    "local_param_8": 1,
                    "param8_copy": 10,
                    "param_8": 4,
                    "param_8_copy": 5,
                    "temp13": 1,
                    "temp_param8": 1
                },
                "local_28": {
                    "condition7": 1,
                    "error7_copy": 1,
                    "error7_local": 1,
                    "error_arg_copy": 1,
                    "error_message7_copy": 1,
                    "local_param7": 2,
                    "local_param_7": 1,
                    "param7_copy": 10,
                    "param_7": 4,
                    "param_7_copy": 5,
                    "temp12": 1,
                    "temp_param7": 1
                },
                "local_38": {
                    "condition6": 1,
                    "error6_copy": 1,
                    "error6_local": 1,
                    "error_data_copy": 1,
                    "error_message6_copy": 1,
                    "local_param6": 2,
                    "local_param_6": 1,
                    "param6_copy": 10,
                    "param_6": 4,
                    "param_6_copy": 5,
                    "temp11": 1,
                    "temp_param6": 1
                },
                "local_48": {
                    "condition5": 1,
                    "error5_copy": 1,
                    "error5_local": 1,
                    "error_info_copy": 1,
                    "error_message5_copy": 1,
                    "local_param5": 2,
                    "local_param_5": 1,
                    "param5_copy": 10,
                    "param_5": 4,
                    "param_5_copy": 5,
                    "temp10": 1,
                    "temp_param5": 1
                },
                "local_58": {
                    "condition4": 1,
                    "error4_copy": 1,
                    "error4_local": 1,
                    "error_message4_copy": 1,
                    "error_type_copy": 1,
                    "local_param4": 2,
                    "local_param_4": 1,
                    "param4_copy": 10,
                    "param_4": 4,
                    "param_4_copy": 5,
                    "temp9": 1,
                    "temp_param4": 1
                },
                "local_68": {
                    "condition3": 1,
                    "error3_copy": 1,
                    "error3_local": 1,
                    "error_detail_copy": 1,
                    "error_message3_copy": 1,
                    "error_status_copy": 1,
                    "local_param3": 2,
                    "local_param_3": 1,
                    "param3_copy": 10,
                    "param_3": 4,
                    "param_3_copy": 4,
                    "temp8": 1,
                    "temp_param3": 1
                },
                "local_78": {
                    "condition2": 1,
                    "error2_copy": 1,
                    "error2_local": 1,
                    "error_flag_copy": 1,
                    "error_message2_copy": 1,
                    "error_message_copy": 1,
                    "local_param2": 2,
                    "local_param_2": 1,
                    "param2_copy": 10,
                    "param_2": 4,
                    "param_2_copy": 4,
                    "temp7": 1,
                    "temp_param2": 1
                },
                "local_88": {
                    "condition1": 1,
                    "error1_copy": 1,
                    "error1_local": 1,
                    "error_code": 1,
                    "error_code_copy": 12,
                    "error_message1_copy": 1,
                    "local_param1": 2,
                    "local_param_1": 1,
                    "param1_copy": 1,
                    "param_1": 3,
                    "param_1_copy": 3,
                    "temp6": 1,
                    "temp_param1": 1
                },
                "local_90": {
                    "arg5": 1,
                    "arg5_copy": 1,
                    "local_data5": 1,
                    "param14": 2,
                    "param14_copy": 10,
                    "param_14": 5,
                    "param_14_copy": 6,
                    "param_e_copy": 1,
                    "param_e_local": 1,
                    "temp5": 1,
                    "temp_param14": 1,
                    "value14_copy": 1
                },
                "local_98": {
                    "arg4": 1,
                    "arg4_copy": 1,
                    "local_data4": 1,
                    "param13": 2,
                    "param13_copy": 10,
                    "param_13": 5,
                    "param_13_copy": 6,
                    "param_d_copy": 1,
                    "param_d_local": 1,
                    "temp4": 1,
                    "temp_param13": 1,
                    "value13_copy": 1
                },
                "local_a0": {
                    "arg3": 1,
                    "arg3_copy": 1,
                    "local_data3": 1,
                    "param12": 2,
                    "param12_copy": 10,
                    "param_12": 5,
                    "param_12_copy": 6,
                    "param_c_copy": 1,
                    "param_c_local": 1,
                    "temp3": 1,
                    "temp_param12": 1,
                    "value12_copy": 1
                },
                "local_a8": {
                    "arg2": 1,
                    "arg2_copy": 1,
                    "local_data2": 1,
                    "param11": 2,
                    "param11_copy": 10,
                    "param_11": 5,
                    "param_11_copy": 6,
                    "param_b_copy": 1,
                    "param_b_local": 1,
                    "temp2": 1,
                    "temp_param11": 1,
                    "value11_copy": 1
                },
                "local_b0": {
                    "arg1": 1,
                    "arg1_copy": 1,
                    "local_data1": 1,
                    "param10": 2,
                    "param10_copy": 10,
                    "param_10": 5,
                    "param_10_copy": 6,
                    "param_a_copy": 1,
                    "param_a_local": 1,
                    "temp1": 1,
                    "temp_param10": 1,
                    "value10_copy": 1
                },
                "local_b8": {
                    "buffer": 5,
                    "error_buffer": 1,
                    "error_message": 1,
                    "error_string": 1,
                    "formatted_error_message": 3,
                    "formatted_error_message_buffer": 1,
                    "formatted_message": 1,
                    "local_array": 3,
                    "local_b8": 1,
                    "local_buffer": 5,
                    "message_buffer": 1,
                    "temp_array": 1,
                    "temp_buffer": 2,
                    "temporary_buffer": 2,
                    "uninitialized_buffer": 1
                },
                "local_c8": {
                    "buffer": 5,
                    "buffer_ptr": 1,
                    "error_message_pointer": 1,
                    "formatted_string": 1,
                    "local_array": 1,
                    "local_buffer": 15,
                    "local_buffer_c8": 1,
                    "local_c8": 1,
                    "local_var1": 1,
                    "pointer_2": 1,
                    "source": 1
                },
                "local_d0": {
                    "buffer": 11,
                    "buffer_addr": 1,
                    "buffer_address": 1,
                    "buffer_pointer_d0": 1,
                    "buffer_ptr": 4,
                    "destination": 1,
                    "error_code_pointer": 1,
                    "local_buffer": 1,
                    "local_pointer": 1,
                    "message": 1,
                    "pointer_1": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1,
                    "string_address": 1,
                    "string_ptr": 1
                },
                "local_d4": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "buffer_size_d4": 1,
                    "const_value": 1,
                    "constant": 1,
                    "constant30": 1,
                    "count": 1,
                    "error_message_length": 1,
                    "local_d4": 1,
                    "local_var2": 1,
                    "local_variable": 1,
                    "local_variable_1": 1,
                    "number": 1,
                    "offset": 1,
                    "size": 2,
                    "some_value": 1,
                    "stack_size": 1,
                    "string_length": 2
                },
                "local_d8": {
                    "buffer_len": 1,
                    "buffer_length": 1,
                    "buffer_size": 12,
                    "buffer_size_d8": 1,
                    "error_code_length": 2,
                    "length": 3,
                    "local_size": 2,
                    "output_size": 1,
                    "print_length": 1,
                    "size": 6,
                    "stack_size": 1
                },
                "param_1": {
                    "error1": 3,
                    "error_code": 25,
                    "error_message": 1,
                    "error_message1": 1
                },
                "param_10": {
                    "arg1": 2,
                    "data1": 1,
                    "param10": 12,
                    "param_10": 11,
                    "param_a": 2,
                    "value1": 1,
                    "value10": 1
                },
                "param_11": {
                    "arg2": 2,
                    "data2": 1,
                    "param11": 12,
                    "param_11": 11,
                    "param_b": 2,
                    "value11": 1,
                    "value2": 1
                },
                "param_12": {
                    "arg3": 2,
                    "data3": 1,
                    "param12": 12,
                    "param_12": 11,
                    "param_c": 2,
                    "value12": 1,
                    "value3": 1
                },
                "param_13": {
                    "arg4": 2,
                    "data4": 1,
                    "param13": 12,
                    "param_13": 11,
                    "param_d": 2,
                    "value13": 1,
                    "value4": 1
                },
                "param_14": {
                    "arg5": 2,
                    "data5": 1,
                    "param14": 12,
                    "param_14": 11,
                    "param_e": 2,
                    "value14": 1,
                    "value5": 1
                },
                "param_2": {
                    "arg2": 1,
                    "error2": 3,
                    "error_flag": 1,
                    "error_message": 2,
                    "error_message2": 1,
                    "param2": 14,
                    "param_2": 8
                },
                "param_3": {
                    "arg3": 1,
                    "error3": 3,
                    "error_detail": 1,
                    "error_message3": 1,
                    "error_status": 1,
                    "param3": 14,
                    "param_3": 9
                },
                "param_4": {
                    "arg4": 1,
                    "error4": 3,
                    "error_message4": 1,
                    "error_type": 1,
                    "param4": 14,
                    "param_4": 10
                },
                "param_5": {
                    "arg5": 1,
                    "error5": 3,
                    "error_info": 1,
                    "error_message5": 1,
                    "param5": 14,
                    "param_5": 10
                },
                "param_6": {
                    "arg6": 1,
                    "error6": 3,
                    "error_data": 1,
                    "error_message6": 1,
                    "param6": 14,
                    "param_6": 10
                },
                "param_7": {
                    "arg7": 1,
                    "error7": 3,
                    "error_arg": 1,
                    "error_message7": 1,
                    "param7": 14,
                    "param_7": 10
                },
                "param_8": {
                    "arg8": 1,
                    "error8": 3,
                    "error_message8": 1,
                    "error_param": 1,
                    "param8": 14,
                    "param_8": 10
                },
                "param_9": {
                    "error_code": 2,
                    "error_flag": 1,
                    "error_message": 18,
                    "formatted_error_message": 5,
                    "message": 3,
                    "param_9": 1
                }
            },
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00105300"
            ],
            "code": "\nvoid print_error_message_and_exit_00107690(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  buffer_size = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_formatted_error_message_001078c0(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_error_message_and_exit_00107690",
            "entrypoint": "0x00107690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107690": "print_error_message_and_exit_00107690",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_size",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107730": {
            "additional_data": {
                "ARG_0010d5d8": {
                    "file_pointer": 1
                },
                "ARG_0010d5e0": {
                    "use_cache": 1
                },
                "ARG_0010d618": {
                    "file_path": 1
                },
                "DAT_0010d5d8": {
                    "file": 1,
                    "file_handle": 1,
                    "file_pointer": 9,
                    "file_ptr": 5,
                    "file_to_close": 1
                },
                "DAT_0010d5e0": {
                    "bfd_cache_open": 1,
                    "bfd_cache_status": 1,
                    "cache_enabled": 4,
                    "cache_exists": 1,
                    "cache_flag": 2,
                    "cache_status": 1,
                    "is_bfd_cache": 1,
                    "is_cache_active": 1,
                    "is_cache_enabled": 2,
                    "is_cache_open": 2,
                    "should_close_cache": 1
                },
                "DAT_0010d618": {
                    "binary_path": 1,
                    "file_descriptor": 2,
                    "file_exists": 1,
                    "file_handle": 3,
                    "file_path": 8
                },
                "FD_0010d5d8": {
                    "file_pointer": 1
                },
                "FD_0010d5e0": {
                    "cache_file_descriptor": 1
                },
                "FD_0010d618": {
                    "file_descriptor": 1
                },
                "FILE": {
                    "file": 1
                },
                "FUN_00107730": {
                    "clean_up_files": 1,
                    "cleanup": 4,
                    "cleanup_and_close": 1,
                    "cleanup_and_remove_file": 4,
                    "cleanup_binary": 1,
                    "cleanup_file": 3,
                    "cleanup_files": 4,
                    "cleanup_function": 7,
                    "cleanup_resources": 1,
                    "close_file_and_delete": 4,
                    "close_file_and_unlink": 1
                },
                "PTR_0010d5d8": {
                    "file": 1
                },
                "PTR_0010d5e0": {
                    "cache": 1
                },
                "PTR_0010d618": {
                    "file_path": 2,
                    "file_to_cleanup": 1
                },
                "bfd_cache_close": {
                    "close_bfd_cache": 1,
                    "close_cache": 2
                },
                "fclose": {
                    "close_file": 5
                },
                "unlink_if_ordinary": {
                    "delete_file": 9,
                    "delete_if_ordinary": 1,
                    "remove_file": 8
                }
            },
            "called": [
                "FUN_00102bf5"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid cleanup_function_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (file *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "current_name": "cleanup_function_00107730",
            "entrypoint": "0x00107730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00107730": "cleanup_function_00107730",
                "bfd_cache_close": "close_cache",
                "fclose": "close_file",
                "unlink_if_ordinary": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107740": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "output_file": 8,
                    "output_file_ptr": 1
                },
                "DAT_0010d600": {
                    "disable_modification_time_update": 1,
                    "flag": 1,
                    "flag1": 2,
                    "global_flag": 1,
                    "some_data": 1
                },
                "DAT_0010d618": {
                    "file_path": 3,
                    "input_file": 1,
                    "output_file_path": 2,
                    "output_path": 5
                },
                "DAT_0010d638": {
                    "another_data": 1,
                    "archive_error": 1,
                    "default_error_message": 1,
                    "default_message": 1,
                    "error_message": 1,
                    "error_string": 2,
                    "error_text": 1,
                    "flag2": 2,
                    "global_constant": 1
                },
                "FUN_00107740": {
                    "extract_and_check_archive": 1,
                    "extract_and_copy_archive": 1,
                    "extract_and_copy_files": 1,
                    "extract_and_print_archive_contents": 1,
                    "extract_and_process_archive": 3,
                    "extract_and_process_file": 1,
                    "extract_and_process_files": 1,
                    "extract_archive": 5,
                    "extract_archive_contents": 1,
                    "extract_archived_files": 2,
                    "extract_archives": 1,
                    "process_and_extract_archive": 1,
                    "process_and_extract_archives": 1,
                    "process_archive": 8,
                    "process_archived_files": 1,
                    "process_files": 1
                },
                "_DAT_0010d600": {
                    "data_flag": 1,
                    "debug_mode": 1,
                    "flag": 2,
                    "is_modification_enabled": 1
                },
                "_Stack_b0": {
                    "file_mode": 5,
                    "file_permission": 2,
                    "file_permissions": 15,
                    "file_stat": 1,
                    "permissions": 6,
                    "stack_permissions": 1
                },
                "__n": {
                    "buffer_size": 1,
                    "bytes_read": 29,
                    "read_bytes": 1
                },
                "__ptr": {
                    "buffer": 24,
                    "buffer_pointer": 3,
                    "buffer_ptr": 4
                },
                "iVar1": {
                    "cmp_result": 3,
                    "compare_result": 1,
                    "comparison_result": 17,
                    "filename_cmp_result": 2,
                    "filename_comparison": 1,
                    "filename_comparison_result": 5,
                    "filename_match": 1
                },
                "iVar2": {
                    "error_code": 15,
                    "error_type": 1,
                    "internal_stat_error": 1,
                    "print_error_message_and_exit_result": 1,
                    "result_code": 2,
                    "return_value": 3,
                    "stat_error": 3,
                    "status": 2,
                    "status_code": 1
                },
                "lVar7": {
                    "count": 1,
                    "counter": 1,
                    "current_offset": 1,
                    "file_size": 1,
                    "loop_counter": 9,
                    "loop_index": 3,
                    "loop_var": 2,
                    "offset": 12,
                    "seek_offset": 1
                },
                "local_c8": {
                    "init_values_array": 1,
                    "initialized_array": 2,
                    "initialized_int_array": 1,
                    "local_array": 13,
                    "local_buffer": 1,
                    "local_c8_array": 1,
                    "local_data": 1,
                    "local_error_codes_array": 1,
                    "local_variables": 1,
                    "local_variables_array": 1,
                    "local_vars": 1,
                    "local_vars_array": 1,
                    "status_array": 1,
                    "zero_array": 2,
                    "zeroed_array": 1,
                    "zeroes_array": 1
                },
                "param_1": {
                    "archive": 13,
                    "archive_contents": 1,
                    "archive_data": 1,
                    "archive_files": 1,
                    "archive_ptr": 1,
                    "archived_file": 1,
                    "archived_files": 1,
                    "archives": 1,
                    "file_list": 2,
                    "file_paths": 1,
                    "files_array": 1,
                    "input": 1,
                    "input_archive": 1,
                    "input_data": 2,
                    "input_files": 2,
                    "input_path": 1
                },
                "pcVar4": {
                    "errno_message": 1,
                    "error_description": 2,
                    "error_message": 15,
                    "error_msg": 1,
                    "error_str": 1,
                    "error_string": 10
                },
                "piVar3": {
                    "errno_location": 13,
                    "errno_location_ptr": 2,
                    "errno_pointer": 1,
                    "errno_ptr": 6,
                    "error": 1,
                    "error_number": 6,
                    "error_pointer": 1
                },
                "plVar8": {
                    "current_archive": 1,
                    "current_entry": 3,
                    "current_entry_ptr": 1,
                    "current_file": 8,
                    "current_file_pointer": 2,
                    "current_file_ptr": 2,
                    "current_pointer": 2,
                    "current_ptr": 1,
                    "file": 1,
                    "file_address": 1,
                    "file_pointer": 8,
                    "file_ptr": 1
                },
                "pplVar6": {
                    "archive": 1,
                    "archive_file": 1,
                    "archive_files_array": 1,
                    "archive_files_ptr": 1,
                    "archive_list": 1,
                    "archive_pointer": 7,
                    "archive_ptr": 2,
                    "archived_file_ptr": 1,
                    "archived_files_ptr": 1,
                    "current_archive": 2,
                    "extracted_files": 1,
                    "file_data": 1,
                    "file_list": 1,
                    "file_paths_ptr": 1,
                    "file_pointer": 1,
                    "file_pointer_list": 1,
                    "file_ptr": 1,
                    "param_pointer": 1,
                    "ptr_to_archive_ptr": 1,
                    "ptr_to_ptr": 1,
                    "ptrs_to_long_pointers": 1,
                    "temp_data": 1,
                    "temp_ptr": 1
                },
                "puVar9": {
                    "init_values_pointer": 1,
                    "initialized_array": 1,
                    "local_array": 10,
                    "local_array_ptr": 3,
                    "local_c8_ptr": 1,
                    "local_var_pointer": 1,
                    "local_variable": 1,
                    "local_variable1": 1,
                    "local_variables": 8,
                    "local_variables_pointer": 1,
                    "zeroed_array": 1,
                    "zeros_array": 1
                },
                "sVar11": {
                    "bytes_remaining": 4,
                    "bytes_to_copy": 1,
                    "bytes_to_process": 3,
                    "bytes_to_read": 13,
                    "bytes_to_write": 1,
                    "chunk_size": 1,
                    "copy_size": 2,
                    "max_read_size": 1,
                    "num_bytes_to_read": 1,
                    "read_size": 2,
                    "size_to_write": 1
                },
                "uStack_70": {
                    "access_time": 1,
                    "current_time": 2,
                    "file_access_time": 1,
                    "file_mod_time2": 2,
                    "file_modification_time": 2,
                    "file_time": 2,
                    "mod_time": 1,
                    "modification_time": 5,
                    "modification_time2": 2,
                    "modification_time_copy": 1,
                    "modification_time_temp": 1,
                    "modified_time": 1,
                    "original_modification_time": 3,
                    "stack_item2": 1,
                    "stack_var2": 1,
                    "time_2": 1,
                    "timestamp": 1,
                    "u_stack_70": 1,
                    "unused": 1
                },
                "uStack_80": {
                    "file_creation_time": 1,
                    "file_mod_time1": 2,
                    "file_modification_time": 3,
                    "file_time": 1,
                    "mod_time": 1,
                    "modification_time": 15,
                    "modification_time1": 1,
                    "modified_time": 1,
                    "stack_item1": 1,
                    "stack_var1": 1,
                    "time_1": 1,
                    "timestamp": 1,
                    "u_stack_80": 1
                },
                "uStack_98": {
                    "archive_size": 16,
                    "data_size": 1,
                    "file_size": 8,
                    "total_archive_size": 1,
                    "total_bytes": 2,
                    "total_file_bytes": 1,
                    "total_file_size": 1
                },
                "uVar10": {
                    "bytes_processed": 7,
                    "bytes_read": 1,
                    "bytes_remaining": 3,
                    "bytes_written": 3,
                    "total_bytes_read": 12,
                    "total_read": 1,
                    "total_read_bytes": 1
                },
                "uVar5": {
                    "error_category": 1,
                    "error_message": 2,
                    "error_msg": 1,
                    "error_string": 4,
                    "error_text": 1,
                    "gettext_result": 4,
                    "message": 4,
                    "message_id": 1,
                    "text": 1,
                    "translated_error": 1,
                    "translated_error_message": 4,
                    "translated_message": 1,
                    "translated_string": 4,
                    "translation_string": 2
                }
            },
            "called": [
                "FUN_00102c25"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nlong * process_and_extract_archive_00107740(long **archive)\n\n{\n  int comparison_result;\n  int error_code;\n  int *errno_location;\n  char *error_message;\n  undefined8 translated_string;\n  long **archive_pointer;\n  void *buffer;\n  size_t bytes_read;\n  long offset;\n  long *current_file;\n  undefined4 *local_array;\n  ulong total_bytes_read;\n  size_t bytes_to_read;\n  undefined4 local_array [6];\n  __mode_t file_permissions;\n  ulong archive_size;\n  undefined8 modification_time;\n  undefined8 modification_time;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array = local_array;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *local_array = 0;\n      local_array = local_array + 1;\n    }\n  }\n  archive_pointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archive_pointer = archive;\n  }\n  error_code = (*(code *)archive_pointer[1][0x3d])(archive,local_array);\n  if (error_code != 0) {\n    current_file = *archive;\n    translated_string = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_error_message_and_exit_00107690(translated_string,current_file);\n    translated_string = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,translated_string);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)process_output_path_00105a20(*archive);\n  }\n  else {\n    total_bytes_read = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = archive_size - total_bytes_read;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read,archive);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        translated_string = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_message_and_exit_00107690(translated_string,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)process_output_path_00105a20(*archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_error_message_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      total_bytes_read = total_bytes_read + bytes_read;\n    } while (total_bytes_read < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    modification_time = modification_time;\n    set_file_modification_time_00107c80(error_message,local_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "current_name": "process_and_extract_archive_00107740",
            "entrypoint": "0x00107740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107740": "process_and_extract_archive_00107740",
                "_Stack_b0": "file_permissions",
                "__n": "bytes_read",
                "__ptr": "buffer",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "lVar7": "offset",
                "local_c8": "local_array",
                "param_1": "archive",
                "pcVar4": "error_message",
                "piVar3": "errno_location",
                "plVar8": "current_file",
                "pplVar6": "archive_pointer",
                "puVar9": "local_array",
                "sVar11": "bytes_to_read",
                "uStack_70": "modification_time",
                "uStack_80": "modification_time",
                "uStack_98": "archive_size",
                "uVar10": "total_bytes_read",
                "uVar5": "translated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107890": {
            "additional_data": {
                "DAT_0010d60c": {
                    "check_file_info1": 1,
                    "flag1": 1,
                    "is_flag1_set": 1,
                    "variable_a": 1
                },
                "FUN_00107890": {
                    "print_file_info": 27,
                    "print_file_info_to_stdout": 1,
                    "print_file_information": 3
                },
                "_DAT_0010d5fc": {
                    "check_file_info2": 1,
                    "flag2": 1,
                    "is_flag2_set": 1,
                    "is_verbose": 1,
                    "is_verbose_mode": 1,
                    "variable_b": 1
                },
                "_DAT_0010d60c": {
                    "is_debug": 1,
                    "is_debug_mode": 1
                },
                "_stdout": {
                    "file_output": 1,
                    "output_file": 2,
                    "output_stream": 21,
                    "standard_output": 3,
                    "stdout": 1
                },
                "format_and_print_file_info_001079c0": {
                    "format_and_print_file_info": 5,
                    "print_file_info_formatted": 1,
                    "print_formatted_file_info": 1
                },
                "param_1": {
                    "file": 1,
                    "file_handle": 2,
                    "file_info": 26,
                    "file_path": 2
                },
                "param_2": {
                    "flag1": 1
                },
                "param_3": {
                    "flag2": 1
                }
            },
            "called": [
                "FUN_001079c0"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_file_info_to_stdout_00107890(undefined8 file_info)\n\n{\n  format_and_print_file_info(output_stream,file_info,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "current_name": "print_file_info_to_stdout_00107890",
            "entrypoint": "0x00107890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107890": "print_file_info_to_stdout_00107890",
                "_stdout": "output_stream",
                "format_and_print_file_info_001079c0": "format_and_print_file_info",
                "param_1": "file_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001078c0": {
            "additional_data": {
                "FFlush": {
                    "flush_standard_output": 1
                },
                "FUN_001078c0": {
                    "print_error_message": 29,
                    "print_formatted_error_message": 2
                },
                "__gnuc_va_list": {
                    "": 1,
                    "args": 2,
                    "arguments": 1,
                    "variable_argument_list": 1
                },
                "_stderr": {
                    "": 1,
                    "error_output": 2,
                    "error_stream": 1,
                    "standard_error": 16,
                    "stderr": 2,
                    "stderr_buffer": 1
                },
                "_stdout": {
                    "": 1,
                    "output_stream": 1,
                    "standard_output": 17,
                    "stdout": 2,
                    "stdout_buffer": 1
                },
                "fflush": {
                    "flush_output": 2,
                    "flush_standard_output": 3
                },
                "fprintf": {
                    "format_and_print_to_stderr": 1,
                    "print_error": 1,
                    "print_error_message_with_format": 1,
                    "print_formatted": 3,
                    "print_formatted_error_message": 1,
                    "print_to_standard_error": 1
                },
                "param_1": {
                    "error_message": 10,
                    "error_message_format": 2,
                    "format": 1,
                    "format_string": 5,
                    "message": 11,
                    "message_format": 1,
                    "message_string": 1
                },
                "param_2": {
                    "arg_list": 1,
                    "args": 7,
                    "argument_list": 1,
                    "arguments": 11,
                    "format_args": 1,
                    "format_arguments": 3,
                    "va_list": 2,
                    "var_args": 3,
                    "variable_arguments": 1
                },
                "putCharacter": {
                    "put_new_line_character": 1
                },
                "putc": {
                    "put_character": 3,
                    "put_character_to_standard_error": 1,
                    "put_character_to_stderr": 1,
                    "write_character": 2
                },
                "putchar": {
                    "": 1,
                    "output_character": 1,
                    "print_newline": 1
                },
                "stderr": {
                    "_stderr": 1
                },
                "stdout": {
                    "_stdout": 1
                },
                "vfprintf": {
                    "print_error_message_with_formatted_arguments": 1,
                    "print_formatted_arguments": 1,
                    "print_formatted_error": 1,
                    "print_formatted_error_message_with_arguments": 1,
                    "print_formatted_to_standard_error": 1,
                    "print_formatted_var_args": 1
                }
            },
            "called": [
                "putc",
                "vfprintf",
                "fflush",
                "fprintf"
            ],
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "code": "\n\n\nvoid print_formatted_error_message_001078c0(char *message,args arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010d660);\n  vfprintf(standard_error,message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_formatted_error_message_001078c0",
            "entrypoint": "0x001078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001078c0": "print_formatted_error_message_001078c0",
                "__gnuc_va_list": "args",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "fprintf": "print_formatted",
                "param_1": "message",
                "param_2": "arguments",
                "putc": "put_character",
                "stderr": "_stderr",
                "stdout": "_stdout",
                "vfprintf": "print_formatted_to_standard_error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107920": {
            "additional_data": {
                "FUN_00107920": {
                    "print_error": 3,
                    "print_error_message": 14,
                    "print_error_with_format": 1,
                    "print_error_with_formatted_data": 1,
                    "print_error_with_parameters": 2,
                    "print_error_with_params": 1,
                    "print_formatted_error_message": 8,
                    "print_formatted_message": 1
                },
                "in_AL": {
                    "condition": 6,
                    "condition_check": 1,
                    "execute_print": 1,
                    "flag": 9,
                    "input_flag": 3,
                    "is_debug_enabled": 1,
                    "is_error": 4,
                    "is_error_present": 2,
                    "is_error_set": 1,
                    "should_print_error_message": 1,
                    "some_flag": 1
                },
                "local_18": {
                    "arg25": 1,
                    "arg8_copy": 1,
                    "error_param8": 1,
                    "error_param8_copy": 1,
                    "flag8": 1,
                    "local8": 1,
                    "local_arg7": 1,
                    "local_arg8": 1,
                    "param7_copy": 2,
                    "param8": 2,
                    "param8_copy": 10,
                    "param_8": 2,
                    "temp8": 1
                },
                "local_28": {
                    "arg24": 1,
                    "arg7_copy": 1,
                    "error_param7": 1,
                    "error_param7_copy": 1,
                    "flag7": 1,
                    "local7": 1,
                    "local_arg6": 1,
                    "local_arg7": 1,
                    "param6_copy": 2,
                    "param7": 2,
                    "param7_copy": 10,
                    "param_7": 2,
                    "temp7": 1
                },
                "local_38": {
                    "arg23": 1,
                    "arg6_copy": 1,
                    "error_param6": 1,
                    "error_param6_copy": 1,
                    "flag6": 1,
                    "local6": 1,
                    "local_arg5": 1,
                    "local_arg6": 1,
                    "param5_copy": 2,
                    "param6": 2,
                    "param6_copy": 10,
                    "param_6": 2,
                    "temp6": 1
                },
                "local_48": {
                    "arg22": 1,
                    "arg5_copy": 1,
                    "error_param5": 1,
                    "error_param5_copy": 1,
                    "flag5": 1,
                    "local5": 1,
                    "local_arg4": 1,
                    "local_arg5": 1,
                    "param4_copy": 2,
                    "param5": 2,
                    "param5_copy": 10,
                    "param_5": 2,
                    "temp5": 1
                },
                "local_58": {
                    "arg21": 1,
                    "arg4_copy": 1,
                    "error_message": 1,
                    "error_param4": 1,
                    "error_param4_copy": 1,
                    "flag4": 1,
                    "local4": 1,
                    "local_arg3": 1,
                    "local_arg4": 1,
                    "param3_copy": 2,
                    "param4": 2,
                    "param4_copy": 10,
                    "param_4": 1,
                    "temp4": 1
                },
                "local_68": {
                    "arg20": 1,
                    "arg3_copy": 1,
                    "error_param3": 1,
                    "error_param3_copy": 1,
                    "error_severity": 1,
                    "error_type_copy": 1,
                    "flag3": 1,
                    "local3": 1,
                    "local_arg2": 1,
                    "local_arg3": 1,
                    "param2_copy": 2,
                    "param3": 2,
                    "param3_copy": 9,
                    "param_3": 1,
                    "temp3": 1
                },
                "local_78": {
                    "arg19": 1,
                    "error_flag_copy": 1,
                    "error_message": 1,
                    "error_message_copy": 1,
                    "error_param2": 1,
                    "error_param2_copy": 1,
                    "error_type": 1,
                    "flag2": 1,
                    "local2": 1,
                    "local_arg1": 1,
                    "local_arg2": 1,
                    "param1_copy": 2,
                    "param2": 1,
                    "param2_copy": 9,
                    "param_2": 1,
                    "temp2": 1
                },
                "local_88": {
                    "arg18": 1,
                    "error_code": 4,
                    "error_code_copy": 12,
                    "error_param1": 1,
                    "error_param1_copy": 1,
                    "flag1": 1,
                    "local1": 1,
                    "local_arg1": 1,
                    "local_error_code": 1,
                    "param1": 1,
                    "param1_copy": 1,
                    "temp1": 1
                },
                "local_90": {
                    "arg14_copy": 1,
                    "arg17": 1,
                    "buf5": 1,
                    "local14": 1,
                    "local_buffer5": 1,
                    "local_param14": 1,
                    "local_var10": 1,
                    "param13_copy": 1,
                    "param14": 5,
                    "param14_copy": 11,
                    "param14_value": 1,
                    "param_14": 2,
                    "value5": 1
                },
                "local_98": {
                    "arg13_copy": 1,
                    "arg16": 1,
                    "buf4": 1,
                    "local13": 1,
                    "local_buffer4": 1,
                    "local_param13": 1,
                    "local_var9": 1,
                    "param12_copy": 1,
                    "param13": 5,
                    "param13_copy": 11,
                    "param13_value": 1,
                    "param_13": 2,
                    "value4": 1
                },
                "local_a0": {
                    "arg12_copy": 1,
                    "arg15": 1,
                    "buf3": 1,
                    "local12": 1,
                    "local_buffer3": 1,
                    "local_param12": 1,
                    "local_var8": 1,
                    "param11_copy": 1,
                    "param12": 5,
                    "param12_copy": 11,
                    "param12_value": 1,
                    "param_12": 2,
                    "value3": 1
                },
                "local_a8": {
                    "arg11_copy": 1,
                    "arg14": 1,
                    "buf2": 1,
                    "local11": 1,
                    "local_buffer2": 1,
                    "local_param11": 1,
                    "local_var7": 1,
                    "param10_copy": 1,
                    "param11": 5,
                    "param11_copy": 11,
                    "param11_value": 1,
                    "param_11": 2,
                    "value2": 1
                },
                "local_b0": {
                    "arg10_copy": 1,
                    "arg13": 1,
                    "buf1": 1,
                    "local10": 1,
                    "local_buffer1": 1,
                    "local_param10": 1,
                    "local_var6": 1,
                    "param10": 5,
                    "param10_copy": 11,
                    "param10_value": 1,
                    "param9_copy": 1,
                    "param_10": 2,
                    "value1": 1
                },
                "local_b8": {
                    "buffer": 2,
                    "char_buffer": 1,
                    "error_buffer": 2,
                    "error_data": 1,
                    "error_message": 1,
                    "error_message_buffer": 3,
                    "error_msg_buf": 1,
                    "formatted_error": 1,
                    "formatted_error_message": 1,
                    "local_array": 7,
                    "local_buffer": 4,
                    "message_buffer": 1,
                    "print_buffer": 1,
                    "stack_buffer": 1,
                    "temp_buffer": 1
                },
                "local_c8": {
                    "buffer": 8,
                    "buffer_pointer": 1,
                    "error_message_buffer": 1,
                    "local_buf": 1,
                    "local_buffer": 11,
                    "local_data": 1,
                    "local_pointer2": 1,
                    "local_ptr": 1,
                    "local_var3": 2,
                    "local_variable2": 1
                },
                "local_d0": {
                    "arguments": 1,
                    "buffer": 7,
                    "buffer_offset": 1,
                    "buffer_pointer": 3,
                    "buffer_ptr": 2,
                    "local_pointer1": 1,
                    "local_var2": 2,
                    "message": 1,
                    "message_pointer": 1,
                    "pointer_to_buffer": 1,
                    "stack_pointer": 5,
                    "stack_ptr": 1
                },
                "local_d4": {
                    "buffer_length": 2,
                    "buffer_size": 1,
                    "byte_count": 1,
                    "byte_length": 1,
                    "bytes_written": 1,
                    "constant_value": 1,
                    "data_size": 1,
                    "error_message_length": 1,
                    "error_param_buffer_size": 1,
                    "local_1": 1,
                    "local_var": 3,
                    "local_var1": 3,
                    "local_variable1": 2,
                    "memory_size": 1,
                    "message_length": 1,
                    "offset": 2,
                    "size": 2,
                    "string_length": 1
                },
                "local_d8": {
                    "buffer_size": 18,
                    "error_code": 1,
                    "error_code_length": 3,
                    "error_code_size": 1,
                    "error_length": 1,
                    "formatted_message_length": 1,
                    "formatted_string_size": 1,
                    "length": 1,
                    "num_bytes": 1,
                    "size": 1
                },
                "param_1": {
                    "error_code": 28,
                    "error_message": 1,
                    "error_param1": 1
                },
                "param_10": {
                    "arg10": 1,
                    "arg8": 2,
                    "local_var1": 1,
                    "param10": 19,
                    "param8": 3,
                    "param_10": 3,
                    "value1": 1
                },
                "param_11": {
                    "arg11": 1,
                    "arg9": 2,
                    "local_var2": 1,
                    "param11": 19,
                    "param9": 3,
                    "param_11": 3,
                    "value2": 1
                },
                "param_12": {
                    "arg10": 2,
                    "arg12": 1,
                    "local_var3": 1,
                    "param10": 3,
                    "param12": 19,
                    "param_12": 3,
                    "value3": 1
                },
                "param_13": {
                    "arg11": 2,
                    "arg13": 1,
                    "local_var4": 1,
                    "param11": 3,
                    "param13": 19,
                    "param_13": 3,
                    "value4": 1
                },
                "param_14": {
                    "arg12": 2,
                    "arg14": 1,
                    "local_var5": 1,
                    "param12": 3,
                    "param14": 19,
                    "param_14": 3,
                    "value5": 1
                },
                "param_2": {
                    "": 1,
                    "arg1": 3,
                    "error_flag": 1,
                    "error_message": 2,
                    "error_msg": 1,
                    "error_param2": 1,
                    "error_type": 2,
                    "flag1": 1,
                    "format_specifier1": 1,
                    "param1": 4,
                    "param2": 12,
                    "param_2": 1
                },
                "param_3": {
                    "": 1,
                    "arg2": 3,
                    "arg3": 1,
                    "error_msg_length": 1,
                    "error_param3": 1,
                    "error_reason": 1,
                    "error_severity": 1,
                    "error_type": 1,
                    "flag2": 1,
                    "format_specifier2": 1,
                    "param2": 4,
                    "param3": 13,
                    "param_3": 1
                },
                "param_4": {
                    "": 1,
                    "arg3": 3,
                    "arg4": 2,
                    "error_message": 1,
                    "error_param4": 1,
                    "flag3": 1,
                    "format_specifier3": 1,
                    "param3": 4,
                    "param4": 14,
                    "param_4": 2
                },
                "param_5": {
                    "": 1,
                    "arg4": 3,
                    "arg5": 2,
                    "error_param5": 1,
                    "flag4": 1,
                    "format_specifier4": 1,
                    "param4": 4,
                    "param5": 14,
                    "param_5": 3
                },
                "param_6": {
                    "": 1,
                    "arg5": 3,
                    "arg6": 2,
                    "error_param6": 1,
                    "flag5": 1,
                    "format_specifier5": 1,
                    "param5": 4,
                    "param6": 14,
                    "param_6": 3
                },
                "param_7": {
                    "": 1,
                    "arg6": 3,
                    "arg7": 2,
                    "error_param7": 1,
                    "flag6": 1,
                    "format_specifier6": 1,
                    "param6": 4,
                    "param7": 13,
                    "param_7": 3
                },
                "param_8": {
                    "": 1,
                    "arg7": 3,
                    "arg8": 2,
                    "error_param8": 1,
                    "flag7": 1,
                    "format_specifier7": 1,
                    "param7": 4,
                    "param8": 13,
                    "param_8": 3
                },
                "param_9": {
                    "error_address": 1,
                    "error_message": 23,
                    "format_string": 7
                }
            },
            "called": [
                "FUN_001078c0"
            ],
            "calling": [
                "FUN_001052a0",
                "FUN_00105db0",
                "FUN_00102e6f",
                "FUN_00102f1e",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00105300"
            ],
            "code": "\nvoid print_formatted_error_message_00107920(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 local_var;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_array;\n  local_var = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_formatted_error_message_00107920_001078c0(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_formatted_error_message_00107920",
            "entrypoint": "0x00107920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107920": "print_formatted_error_message_00107920",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_array",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "local_var",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001079c0": {
            "additional_data": {
                "FUN_001079c0": {
                    "format_and_print_file_info": 1,
                    "format_and_print_file_line": 1,
                    "print_file_details": 4,
                    "print_file_info": 22,
                    "print_file_metadata": 2
                },
                "cStack_ea": {
                    "execute_permission_char3": 1,
                    "execute_permission_others": 1,
                    "file_permission10": 1,
                    "file_permissions_char6": 1,
                    "group_execute": 1,
                    "group_execute_permission": 1,
                    "is_group_executable": 1,
                    "is_group_execute": 1,
                    "is_group_writable_char": 1,
                    "is_other_executable": 1,
                    "is_others_executable": 2,
                    "other_exec": 1,
                    "other_executable": 1,
                    "other_execute": 5,
                    "other_execute_permission": 3,
                    "others_execute": 1,
                    "permission_bit9": 1,
                    "permission_o_x": 1
                },
                "cStack_eb": {
                    "file_permission9": 1,
                    "file_permissions_char5": 1,
                    "group_executable": 1,
                    "group_write": 1,
                    "group_write_permission": 1,
                    "is_group_readable_char": 1,
                    "is_group_writable": 1,
                    "is_group_write": 1,
                    "is_other_writable": 1,
                    "is_others_writable": 2,
                    "other_write": 5,
                    "other_write_permission": 3,
                    "others_write": 1,
                    "permission_bit8": 1,
                    "permission_o_w": 1,
                    "setuid": 1,
                    "write_permission_char3": 1,
                    "write_permission_others": 1
                },
                "cStack_ec": {
                    "file_permission8": 1,
                    "file_permissions_char4": 1,
                    "group_read": 1,
                    "group_read_permission": 1,
                    "is_group_read": 1,
                    "is_group_readable": 1,
                    "is_other_readable": 1,
                    "is_others_readable": 2,
                    "is_owner_executable_char": 1,
                    "other_read": 5,
                    "other_read_permission": 3,
                    "others_read": 1,
                    "permission_bit7": 1,
                    "permission_o_r": 1,
                    "read_permission_char3": 1,
                    "read_permission_others": 1,
                    "suid": 1,
                    "user_executable": 1
                },
                "cStack_ed": {
                    "execute_permission_char2": 1,
                    "execute_permission_group": 1,
                    "file_permission7": 1,
                    "file_permissions_char3": 1,
                    "group_execute": 6,
                    "group_execute_permission": 3,
                    "is_group_executable": 3,
                    "is_owner_executable": 1,
                    "is_owner_execute": 1,
                    "is_owner_writable_char": 1,
                    "other_writable": 1,
                    "permission_bit6": 1,
                    "setgid": 1,
                    "sticky": 1,
                    "user_execute": 1,
                    "user_execute_permission": 1
                },
                "cStack_ee": {
                    "file_permission6": 1,
                    "file_permissions_char2": 1,
                    "group_writable": 1,
                    "group_write": 6,
                    "group_write_permission": 3,
                    "is_group_writable": 3,
                    "is_owner_readable_char": 1,
                    "is_owner_writable": 1,
                    "is_owner_write": 1,
                    "permission_bit5": 1,
                    "setgid": 1,
                    "sticky": 1,
                    "user_write": 1,
                    "user_write_permission": 1,
                    "write_permission_char2": 1,
                    "write_permission_group": 1
                },
                "cStack_ef": {
                    "file_permission5": 1,
                    "file_permissions_char1": 1,
                    "group_read": 6,
                    "group_read_permission": 3,
                    "is_executable_char": 1,
                    "is_group_readable": 3,
                    "is_owner_read": 1,
                    "is_owner_readable": 1,
                    "permission_bit4": 1,
                    "read_permission_char2": 1,
                    "read_permission_group": 1,
                    "setuid": 1,
                    "sgid": 1,
                    "user_read": 1,
                    "user_read_permission": 1,
                    "user_writable": 1
                },
                "cStack_f0": {
                    "execute_permission": 1,
                    "execute_permission_char": 1,
                    "file_permission4": 1,
                    "file_type_char3": 1,
                    "has_execute_permission": 1,
                    "is_owner_executable": 1,
                    "is_sticky": 3,
                    "is_user_executable": 2,
                    "is_writable_char": 1,
                    "other_readable": 1,
                    "owner_execute": 1,
                    "permission_bit3": 1,
                    "permission_x": 2,
                    "user_execute": 5,
                    "user_execute_permission": 3
                },
                "cStack_f1": {
                    "file_permission3": 1,
                    "file_type_char2": 1,
                    "group_readable": 1,
                    "has_write_permission": 1,
                    "is_owner_writable": 1,
                    "is_readable_char": 1,
                    "is_set_gid": 1,
                    "is_setgid": 2,
                    "is_user_writable": 2,
                    "owner_write": 1,
                    "permission_bit2": 1,
                    "permission_w": 2,
                    "user_write": 5,
                    "user_write_permission": 3,
                    "write_permission": 1,
                    "write_permission_char": 1
                },
                "cStack_f2": {
                    "file_permission2": 1,
                    "file_type_char1": 1,
                    "has_read_permission": 1,
                    "is_hidden_char": 1,
                    "is_owner_readable": 1,
                    "is_set_uid": 1,
                    "is_setuid": 2,
                    "is_user_readable": 2,
                    "owner_read": 1,
                    "permission_bit1": 1,
                    "permission_r": 2,
                    "read_permission": 1,
                    "read_permission_char": 1,
                    "user_read": 5,
                    "user_read_permission": 3,
                    "user_readable": 1
                },
                "cStack_f3": {
                    "file_permission": 1
                },
                "currentTime": {
                    "local_100": 1
                },
                "currentTimeCopy": {
                    "local_60": 1
                },
                "data_9c": {
                    "unused": 1
                },
                "data_a0": {
                    "unused": 1
                },
                "data_b8": {
                    "local_data": 1
                },
                "executePermissionChar": {
                    "c_stack_f0": 1
                },
                "executePermissionChar2": {
                    "c_stack_ed": 1
                },
                "executePermissionChar3": {
                    "c_stack_ea": 1
                },
                "fileInfo": {
                    "param_2": 1
                },
                "fileInfoPtr": {
                    "ppc_var2": 1
                },
                "filePermissions": {
                    "u_stack_a0": 1
                },
                "fileSize": {
                    "u_stack_88": 1
                },
                "fileType": {
                    "u_var4": 1
                },
                "fileTypeChar": {
                    "u_stack_f3": 1
                },
                "formattedTime": {
                    "local_e8": 1
                },
                "fprintf": {
                    "write_formatted_output": 1
                },
                "fputc": {
                    "write_character": 1
                },
                "fputs": {
                    "write_string": 1
                },
                "groupID": {
                    "u_stack_98": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 17,
                    "return_value": 7,
                    "status": 3,
                    "success": 1
                },
                "local_100": {
                    "curr_time": 1,
                    "current_time": 20,
                    "current_time_raw": 1,
                    "current_timestamp": 7,
                    "file_time": 1
                },
                "local_60": {
                    "create_time": 1,
                    "creation_time": 2,
                    "creation_timestamp": 1,
                    "current_file_time": 1,
                    "current_time": 2,
                    "current_time_copy": 2,
                    "current_timestamp": 2,
                    "file_mod_time": 1,
                    "file_modification_time": 3,
                    "file_modified_time": 3,
                    "file_status": 1,
                    "file_time": 1,
                    "file_timestamp": 3,
                    "modification_time": 2,
                    "modification_timestamp": 1,
                    "modified_time": 1,
                    "time_value": 1,
                    "time_var": 1,
                    "timestamp": 1
                },
                "local_b8": {
                    "buffer": 2,
                    "local_buffer": 2,
                    "private_fields": 1,
                    "time_buffer": 1,
                    "unknown_buffer": 1
                },
                "local_e8": {
                    "formatted_time": 17,
                    "formatted_time_str": 1,
                    "formatted_timestamp": 1,
                    "time_buffer": 4,
                    "time_date": 1,
                    "time_format": 1,
                    "time_stamp": 1,
                    "time_string": 2,
                    "timestamp_formatted": 1,
                    "timestamp_string": 1
                },
                "outputFile": {
                    "param_1": 1
                },
                "param_1": {
                    "file": 16,
                    "file_pointer": 1,
                    "output_file": 13
                },
                "param_2": {
                    "args": 2,
                    "arguments": 1,
                    "argv": 1,
                    "file_attributes": 1,
                    "file_data": 1,
                    "file_info": 20,
                    "file_info_array": 1,
                    "info": 1,
                    "metadata": 2
                },
                "param_3": {
                    "enable_printing": 1,
                    "has_permissions": 1,
                    "include_header": 1,
                    "include_time": 1,
                    "include_timestamp": 1,
                    "is_enabled": 1,
                    "is_verbose": 2,
                    "print_additional_info": 1,
                    "print_file_info": 1,
                    "print_flag": 1,
                    "print_header": 5,
                    "print_time": 6,
                    "print_time_info": 1,
                    "print_timestamp": 1,
                    "should_print_file_permissions": 1,
                    "should_print_info": 1,
                    "should_print_time": 1,
                    "show_file_info": 1,
                    "show_permissions": 1,
                    "show_time": 1
                },
                "param_4": {
                    "enable_hex_dump": 1,
                    "hex_flag": 1,
                    "include_address": 3,
                    "is_hex": 1,
                    "print_address": 14,
                    "print_hex": 2,
                    "print_offsets": 1,
                    "should_print_hex": 1,
                    "should_print_hex_value": 1,
                    "should_print_memory_addresses": 1,
                    "show_address": 3,
                    "show_hex_offset": 1
                },
                "pcVar3": {
                    "ctime_ptr": 1,
                    "current_time": 1,
                    "formatted_time": 1,
                    "time_data": 5,
                    "time_info": 2,
                    "time_str": 5,
                    "time_string": 13,
                    "timestamp": 1
                },
                "ppcVar2": {
                    "default_file_info": 1,
                    "file_attr_pointer": 1,
                    "file_data_ptr": 1,
                    "file_info_ptr": 5,
                    "file_obj": 1,
                    "file_path": 1,
                    "file_pointer": 2,
                    "file_ptr": 4,
                    "func_ptr_array": 1,
                    "func_ptr_info": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "info_data": 1,
                    "metadata_ptr": 2,
                    "param1": 1,
                    "pp_file_info": 1,
                    "ppc_file_info": 1,
                    "ptr_file_info": 1,
                    "ptr_to_char_pointer": 1
                },
                "printAdditionalInfo": {
                    "param_3": 1
                },
                "printAddress": {
                    "param_4": 1
                },
                "readPermissionChar": {
                    "c_stack_f2": 1
                },
                "readPermissionChar2": {
                    "c_stack_ef": 1
                },
                "readPermissionChar3": {
                    "c_stack_ec": 1
                },
                "result": {
                    "i_var1": 1
                },
                "timeData": {
                    "pc_var3": 1
                },
                "uStack_88": {
                    "file_inode": 1,
                    "file_size": 19,
                    "file_timestamp": 1,
                    "inode": 1,
                    "inode_number": 4,
                    "link_count": 1,
                    "number_of_links": 1,
                    "size": 1,
                    "u_stack_88": 1
                },
                "uStack_98": {
                    "day": 1,
                    "device": 2,
                    "file_gid": 1,
                    "file_group_id": 2,
                    "file_links": 1,
                    "file_owner": 1,
                    "file_size": 1,
                    "file_size_lower_part": 1,
                    "group_id": 5,
                    "group_permission": 1,
                    "hard_links": 1,
                    "inode": 1,
                    "inode_number": 1,
                    "minor_device": 1,
                    "minor_device_num": 1,
                    "minor_device_number": 2,
                    "num_blocks": 1,
                    "owner_uid": 1,
                    "st_gid": 1,
                    "u_stack_98": 1,
                    "unused_var2": 1,
                    "user_id": 1
                },
                "uStack_9c": {
                    "device_id": 1,
                    "device_number": 1,
                    "file_hard_links": 1,
                    "file_owner_id": 1,
                    "file_permissions": 1,
                    "file_size_higher_part": 1,
                    "file_uid": 1,
                    "file_user_id": 1,
                    "inode": 2,
                    "inode_number": 1,
                    "link_count": 1,
                    "major_device": 1,
                    "major_device_num": 1,
                    "major_device_number": 2,
                    "month": 1,
                    "num_hard_links": 1,
                    "num_links": 1,
                    "number_of_hard_links": 1,
                    "st_uid": 1,
                    "u_stack_9c": 1,
                    "unused_var1": 1,
                    "user_id": 5,
                    "user_permission": 1
                },
                "uStack_a0": {
                    "address": 1,
                    "file_attributes": 1,
                    "file_info_bit_fields": 1,
                    "file_mode": 10,
                    "file_mode_bits": 1,
                    "file_permissions": 5,
                    "file_size": 7,
                    "file_type": 2,
                    "mode": 1,
                    "permissions": 1
                },
                "uStack_e9": {
                    "null_byte": 1,
                    "undefined1": 1,
                    "unused": 3
                },
                "uStack_f3": {
                    "file_mode": 1,
                    "file_permission1": 1,
                    "file_permissions": 3,
                    "file_type": 7,
                    "file_type_char": 4,
                    "permission": 1,
                    "permission_char": 1,
                    "permission_code": 1,
                    "permissions": 2
                },
                "uVar4": {
                    "file_mode": 4,
                    "file_permission": 1,
                    "file_permissions": 5,
                    "file_type": 15,
                    "file_type_bits": 1,
                    "permission": 1,
                    "permission_bits": 1,
                    "upper_nibble": 1
                },
                "userID": {
                    "u_stack_9c": 1
                },
                "writePermissionChar": {
                    "c_stack_f1": 1
                },
                "writePermissionChar2": {
                    "c_stack_ee": 1
                },
                "writePermissionChar3": {
                    "c_stack_eb": 1
                }
            },
            "called": [
                "ctime",
                "FUN_00102d8c",
                "sprintf"
            ],
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "code": "\nvoid format_and_print_file_info_001079c0(FILE *file,char **file_info,char print_time,char print_address)\n\n{\n  int result;\n  char **file_info_ptr;\n  char *time_string;\n  uint file_type;\n  time_t current_time;\n  undefined file_type;\n  char user_read;\n  char user_write;\n  char user_execute;\n  char group_read;\n  char group_write;\n  char group_execute;\n  char other_read;\n  char other_write;\n  char other_execute;\n  undefined unused;\n  char formatted_time [48];\n  undefined buffer [24];\n  uint file_mode;\n  uint user_id;\n  uint group_id;\n  undefined8 file_size;\n  time_t file_timestamp;\n  \n  if (print_time != '\\0') {\n    file_info_ptr = (char **)file_info[0x1d];\n    if ((char **)file_info[0x1d] == (char **)0x0) {\n      file_info_ptr = file_info;\n    }\n    result = (**(code **)(file_info_ptr[1] + 0x1e8))(file_info,buffer);\n    if (result == 0) {\n      current_time = file_timestamp;\n      time_string = ctime(&current_time);\n      if (time_string == (char *)0x0) {\n        time_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formatted_time,time_string);\n      }\n      else {\n        sprintf(formatted_time,\"%.12s %.4s\",time_string + 4);\n      }\n      file_type = file_mode & 0xf000;\n      if (file_type == 0x4000) {\n        file_type = 100;\n      }\n      else if (file_type == 0xa000) {\n        file_type = 0x6c;\n      }\n      else if (file_type == 0x6000) {\n        file_type = 0x62;\n      }\n      else if (file_type == 0x2000) {\n        file_type = 99;\n      }\n      else if (file_type == 0xc000) {\n        file_type = 0x73;\n      }\n      else {\n        file_type = 0x70;\n        if (file_type != 0x1000) {\n          file_type = 0x2d;\n        }\n      }\n      user_read = (-((file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n      user_write = (-((file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n      user_execute = (-((file_mode & 0x40) == 0) & 0xb5U) + 0x78;\n      group_read = (-((file_mode & 0x20) == 0) & 0xbbU) + 0x72;\n      group_write = (-((file_mode & 0x10) == 0) & 0xb6U) + 0x77;\n      group_execute = (-((file_mode & 8) == 0) & 0xb5U) + 0x78;\n      other_read = (-((file_mode & 4) == 0) & 0xbbU) + 0x72;\n      other_write = (-((file_mode & 2) == 0) & 0xb6U) + 0x77;\n      other_execute = (-((file_mode & 1) == 0) & 0xb5U) + 0x78;\n      if ((file_mode & 0x800) != 0) {\n        if (user_execute == 'x') {\n          user_execute = 's';\n        }\n        else {\n          user_execute = 'S';\n        }\n      }\n      if ((file_mode & 0x400) != 0) {\n        if (group_execute == 'x') {\n          group_execute = 's';\n        }\n        else {\n          group_execute = 'S';\n        }\n      }\n      if ((file_mode & 0x200) != 0) {\n        if (other_execute == 'x') {\n          other_execute = 't';\n        }\n        else {\n          other_execute = 'T';\n        }\n      }\n      unused = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&user_read,(ulong)user_id,(ulong)group_id,file_size,\n              formatted_time,(ulong)file_mode);\n    }\n  }\n  fputs(*file_info,file);\n  if (print_address != '\\0') {\n    if ((*(byte *)((long)file_info + 0x49) & 0x10) == 0) {\n      if (file_info[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (file_info[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "current_name": "format_and_print_file_info_001079c0",
            "entrypoint": "0x001079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001079c0": "format_and_print_file_info_001079c0",
                "cStack_ea": "other_execute",
                "cStack_eb": "other_write",
                "cStack_ec": "other_read",
                "cStack_ed": "group_execute",
                "cStack_ee": "group_write",
                "cStack_ef": "group_read",
                "cStack_f0": "user_execute",
                "cStack_f1": "user_write",
                "cStack_f2": "user_read",
                "fprintf": "write_formatted_output",
                "fputc": "write_character",
                "fputs": "write_string",
                "iVar1": "result",
                "local_100": "current_time",
                "local_60": "file_timestamp",
                "local_b8": "buffer",
                "local_e8": "formatted_time",
                "param_1": "file",
                "param_2": "file_info",
                "param_3": "print_time",
                "param_4": "print_address",
                "pcVar3": "time_string",
                "ppcVar2": "file_info_ptr",
                "uStack_88": "file_size",
                "uStack_98": "group_id",
                "uStack_9c": "user_id",
                "uStack_a0": "file_mode",
                "uStack_e9": "unused",
                "uStack_f3": "file_type",
                "uVar4": "file_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c10": {
            "additional_data": {
                "FUN_00107c10": {
                    "exit_with_error": 4,
                    "exit_with_error_message": 3,
                    "handle_error_and_exit": 3,
                    "print_error_and_exit": 18,
                    "print_error_message_and_exit": 3
                },
                "print_error_message_00107c20": {
                    "display_error_message": 1,
                    "print_error_message": 28
                },
                "xexit": {
                    "exit": 1,
                    "exit_code": 1
                }
            },
            "called": [
                "xexit",
                "FUN_00107c20"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102d2f",
                "FUN_00105300"
            ],
            "code": "\nvoid print_error_message_and_exit_00107c10(void)\n\n{\n  print_error_message();\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_error_message_and_exit_00107c10",
            "entrypoint": "0x00107c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c10": "print_error_message_and_exit_00107c10",
                "print_error_message_00107c20": "print_error_message",
                "xexit": "exit_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c20": {
            "additional_data": {
                "FUN_00107c20": {
                    "print_bfd_error": 2,
                    "print_error": 4,
                    "print_error_message": 25
                },
                "_stderr": {
                    "standard_error": 1
                },
                "_stdout": {
                    "standard_output": 1
                },
                "fflush": {
                    "flush_stdout": 1
                },
                "fprintf": {
                    "print_to_stderr": 1
                },
                "iVar1": {
                    "error": 19,
                    "error_code": 5,
                    "error_status": 6,
                    "error_value": 1
                },
                "in_R10": {
                    "extra_info": 1,
                    "optional_info": 1,
                    "placeholder": 1,
                    "unknown_value": 1,
                    "unknown_variable": 1,
                    "unused": 1,
                    "unused_variable": 1
                },
                "param_1": {
                    "error_code": 2,
                    "error_context": 1,
                    "error_description": 5,
                    "error_message": 14,
                    "error_string": 2,
                    "error_type": 4,
                    "file": 1,
                    "file_name": 2
                },
                "uVar2": {
                    "error_message": 15,
                    "error_message_text": 2,
                    "error_msg": 4,
                    "error_string": 9,
                    "error_text": 1
                }
            },
            "called": [
                "FUN_00102f96",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid print_error_message_00107c20(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 unknown_value;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010d660,error_message,error_message,unknown_value);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010d660,error_message,unknown_value);\n  return;\n}\n\n",
            "current_name": "print_error_message_00107c20",
            "entrypoint": "0x00107c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_stdout",
                "fprintf": "print_to_stderr",
                "iVar1": "error",
                "in_R10": "unknown_value",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c80": {
            "additional_data": {
                "FUN_00107c80": {
                    "set_file_modification_time": 3,
                    "set_file_modified_time": 1,
                    "set_file_time": 20,
                    "set_file_timestamp": 4,
                    "set_file_timestamps": 2,
                    "set_modified_time": 1
                },
                "iVar1": {
                    "result": 25,
                    "result_code": 1,
                    "return_value": 1
                },
                "local_28": {
                    "backup_access_time": 1,
                    "backup_time": 2,
                    "file_access_time_buf": 1,
                    "file_permissions": 1,
                    "flags": 1,
                    "modification_time": 3,
                    "original_file_time": 1,
                    "time_spec2": 1,
                    "timestamp5": 1,
                    "unused4": 1
                },
                "local_38": {
                    "access_time": 12,
                    "atime": 1,
                    "file_time": 1,
                    "file_time_buf": 1,
                    "modification_time": 1,
                    "time_spec1": 3,
                    "timestamp": 2,
                    "timestamp1": 1
                },
                "param_1": {
                    "file_path": 29,
                    "filename": 2
                },
                "param_2": {
                    "file_attributes": 2,
                    "file_data_ptr": 1,
                    "file_info": 24,
                    "file_info_address": 1,
                    "file_info_ptr": 3
                },
                "pcVar3": {
                    "err_message": 1,
                    "err_msg": 2,
                    "error_message": 9,
                    "error_msg": 5,
                    "error_str": 1,
                    "error_string": 9
                },
                "piVar2": {
                    "err_num_ptr": 1,
                    "errno_address": 1,
                    "errno_loc": 1,
                    "errno_location": 7,
                    "errno_pointer": 1,
                    "errno_ptr": 9,
                    "error": 1,
                    "error_code": 1,
                    "error_code_ptr": 3,
                    "error_number": 1,
                    "error_pointer": 1
                },
                "uStack_1c": {
                    "creation_time_nano": 1
                },
                "uStack_20": {
                    "create_time": 1,
                    "creation_time": 1
                },
                "uStack_24": {
                    "backup_time_nano": 1,
                    "change_time": 1
                },
                "uStack_2c": {
                    "access_time": 1,
                    "birth_time": 3,
                    "btime": 1,
                    "change_time": 1,
                    "creation_time": 3,
                    "file_handle": 1,
                    "modification_time_nano": 1,
                    "time_spec4": 2,
                    "timestamp4": 1,
                    "unused3": 1
                },
                "uStack_30": {
                    "change_time": 5,
                    "create_time": 1,
                    "ctime": 1,
                    "modification_time": 1,
                    "status_change_time": 1,
                    "time_spec3": 2,
                    "timestamp3": 1,
                    "unused2": 1
                },
                "uStack_34": {
                    "access_time_nano": 1,
                    "local_time": 1,
                    "mod_time": 5,
                    "modification_time": 3,
                    "mtime": 1,
                    "time_spec2": 2,
                    "timestamp2": 1,
                    "unused1": 1
                },
                "uVar4": {
                    "error_format": 4,
                    "error_format_string": 1,
                    "error_message": 6,
                    "error_msg": 2,
                    "error_string": 3,
                    "formatted_error_message": 4,
                    "localized_error_message": 1,
                    "localized_error_msg": 1,
                    "msg_id": 1,
                    "translated_error_message": 2,
                    "translated_error_str": 1,
                    "translated_message": 1
                }
            },
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\nvoid set_file_modification_time_00107c80(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_message;\n  undefined4 access_time;\n  undefined4 mod_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 creation_time_nano;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  change_time = *(undefined4 *)(file_info + 0x5c);\n  creation_time = *(undefined4 *)(file_info + 0x60);\n  creation_time_nano = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  mod_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_formatted_error_message_00107920(error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_modification_time_00107c80",
            "entrypoint": "0x00107c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c80": "set_file_modification_time_00107c80",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "uStack_1c": "creation_time_nano",
                "uStack_20": "creation_time",
                "uStack_24": "change_time",
                "uStack_2c": "creation_time",
                "uStack_30": "change_time",
                "uStack_34": "mod_time",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107cc0": {
            "additional_data": {
                "FUN_00107cc0": {
                    "decompiled_function": 1,
                    "execute_function_chain": 3,
                    "execute_functions": 9,
                    "execute_functions_in_list": 1,
                    "execute_reverse_code": 1,
                    "process_function": 1
                },
                "lVar1": {
                    "current_function_index": 2,
                    "current_index": 7,
                    "index": 14,
                    "inner_index": 1,
                    "iterator": 1,
                    "last_index": 2,
                    "loop_counter1": 1,
                    "loop_index1": 1,
                    "lower_bound": 1,
                    "previous_index": 1
                },
                "lVar2": {
                    "c_index": 1,
                    "current_idx": 1,
                    "current_index": 1,
                    "inner_index": 2,
                    "loop_counter2": 1,
                    "loop_index": 1,
                    "loop_index2": 1,
                    "outer_index": 1,
                    "prev_index": 7,
                    "previous_function_index": 2,
                    "previous_index": 7,
                    "previous_iterator": 1,
                    "secondary_index": 1,
                    "sub_index": 1,
                    "temp_index": 3
                },
                "lVar3": {
                    "count": 1,
                    "current_index": 1,
                    "inner_index": 1,
                    "inner_index2": 1,
                    "loop_counter3": 1,
                    "loop_index": 2,
                    "loop_index3": 1,
                    "nested_index": 1,
                    "next_index": 2,
                    "outer_index": 1,
                    "prev_prev_index": 2,
                    "r_index": 1,
                    "secondary_index": 1,
                    "temp_idx": 1,
                    "temp_index": 12,
                    "temp_index2": 1,
                    "temp_index_2": 1
                },
                "plVar4": {
                    "data_array": 1,
                    "func_ptr_list": 1,
                    "function_array": 1,
                    "function_chain": 2,
                    "function_list": 12,
                    "function_list_ptr": 1,
                    "function_pointer": 4,
                    "function_pointer_array": 2,
                    "function_pointer_list": 2,
                    "function_pointers": 4,
                    "function_ptr_list": 1
                },
                "uVar5": {
                    "count": 8,
                    "counter": 4,
                    "func_index": 1,
                    "function_index": 3,
                    "index": 6,
                    "loop_count": 2,
                    "loop_index": 1,
                    "num_functions": 2,
                    "remaining_functions": 2,
                    "remaining_loops": 1,
                    "subtract_one": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid execute_functions_in_list_00107cc0(void)\n\n{\n  long index;\n  long previous_index;\n  long temp_index;\n  long *function_list;\n  uint count;\n  \n  function_list = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)function_list[index + 2])();\n        previous_index = index + -1;\n        if (-1 < (int)previous_index) {\n          temp_index = previous_index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)function_list[index + 1])();\n                        previous_index = index + -2;\n                      }\n                      (*(code *)function_list[previous_index + 2])();\n                      previous_index = previous_index + -1;\n                    }\n                    (*(code *)function_list[previous_index + 2])();\n                    previous_index = previous_index + -1;\n                  }\n                  (*(code *)function_list[previous_index + 2])();\n                  previous_index = previous_index + -1;\n                }\n                (*(code *)function_list[previous_index + 2])();\n                previous_index = previous_index + -1;\n              }\n              (*(code *)function_list[previous_index + 2])();\n              previous_index = previous_index + -1;\n            }\n            (*(code *)function_list[previous_index + 2])();\n            temp_index = previous_index + -1;\n            if ((int)(previous_index + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_in_list_00107cc0",
            "entrypoint": "0x00107cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107cc0": "execute_functions_in_list_00107cc0",
                "lVar1": "index",
                "lVar2": "previous_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "count"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00107da8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00105d60",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00105d20"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00105da0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00105c00",
                "FUN_001031cf",
                "FUN_001028ed",
                "FUN_00102f55",
                "FUN_00102c25",
                "FUN_00102f1e",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00102fd7",
                "FUN_00105300"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00102540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00102370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_cache_close": {
            "called": [
                "bfd_cache_close"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "current_name": "bfd_cache_close",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00105af0",
                "FUN_00102710",
                "FUN_00103c60"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x001024c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00102d2f",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create": {
            "called": [
                "bfd_create"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "current_name": "bfd_create",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001024d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenr": {
            "called": [
                "bfd_fdopenr"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenr",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x00102570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_find_target": {
            "called": [
                "bfd_find_target"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "current_name": "bfd_find_target",
            "entrypoint": "0x001024e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_readable": {
            "called": [
                "bfd_make_readable"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "current_name": "bfd_make_readable",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_writable": {
            "called": [
                "bfd_make_writable"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "current_name": "bfd_make_writable",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00102710",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00102530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00102420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_plugin": {
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_plugin",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_program_name": {
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_program_name",
            "entrypoint": "0x001023a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x00102580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_archive_head": {
            "called": [
                "bfd_set_archive_head"
            ],
            "calling": [
                "FUN_00102d2f"
            ],
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "current_name": "bfd_set_archive_head",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001058b0",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_0010266f"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "calloc": {
            "called": [
                "calloc"
            ],
            "calling": [
                "FUN_00103df9"
            ],
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "calloc",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x00102430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "clearerr": {
            "called": [
                "clearerr"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "current_name": "clearerr",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ctime": {
            "called": [
                "ctime"
            ],
            "calling": [
                "FUN_001079c0"
            ],
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "current_name": "ctime",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00102f96",
                "FUN_00105db0",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_001031a5",
                "FUN_00103a78",
                "FUN_0010342d",
                "FUN_001052a0",
                "FUN_0010266f",
                "FUN_001028ed",
                "FUN_00102e6f",
                "FUN_001032a8",
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_0010336b",
                "FUN_00102f1e",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_00102d8c",
                "FUN_00102fd7",
                "FUN_0010394a",
                "FUN_00105300"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(improved_extract_and_convert_archived_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00105cc0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00102f96",
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00103ba8"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001023c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105480",
                "FUN_00102cd9",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_001032a8",
                "FUN_00103e95"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fileno": {
            "called": [
                "fileno"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fileno",
            "entrypoint": "0x00102390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00105a68"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00102f96",
                "FUN_00105db0",
                "FUN_001033b0",
                "FUN_001078c0",
                "FUN_00103c60",
                "FUN_0010342d",
                "FUN_0010266f",
                "FUN_001032a8",
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_00105300"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_0010266f",
                "FUN_00103bd1",
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_0010266f",
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00102ba1",
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001023f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25",
                "FUN_00103e95"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x00102560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lbasename": {
            "called": [
                "lbasename"
            ],
            "calling": [
                "FUN_00105830",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102e6f"
            ],
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "current_name": "lbasename",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001023b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x001023e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00102460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "perror": {
            "called": [
                "perror"
            ],
            "calling": [
                "FUN_00105a68",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "perror",
            "entrypoint": "0x001024a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00103172",
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00105a68",
                "FUN_001031a5",
                "FUN_00102f08",
                "FUN_00103ba8"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001078c0"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "realloc": {
            "called": [
                "realloc"
            ],
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "realloc",
            "entrypoint": "0x00102400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001024f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_001052a0",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25",
                "FUN_00102f1e",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102fd7"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00105a68",
                "FUN_00102bb0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00102bf5"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x001023d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_00107c80"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001078c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001024b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_0010315d",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_00107650",
                "FUN_00107690",
                "FUN_00107c10",
                "FUN_00102d2f",
                "FUN_0010394a",
                "FUN_00105300"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_001057a0",
                "FUN_00102c25",
                "FUN_00102bb0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_0010266f",
            "FUN_0010284b",
            "FUN_00102943",
            "FUN_00102ba1",
            "FUN_00102bb0",
            "FUN_00102bf5",
            "FUN_00102cd9",
            "FUN_00102d8c",
            "FUN_00102e57",
            "FUN_00102f08",
            "FUN_00102f55",
            "FUN_00102f96",
            "FUN_0010300e",
            "FUN_001030ed",
            "FUN_0010312d",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_001031a5",
            "FUN_001032a8",
            "FUN_0010336b",
            "FUN_001033b0",
            "FUN_00103ba8",
            "FUN_00103bd1",
            "FUN_001057a0",
            "FUN_00105830",
            "FUN_00105870",
            "FUN_00105a20",
            "FUN_00105a68",
            "FUN_00105bb0",
            "FUN_001075e0",
            "FUN_00107640",
            "FUN_00107730",
            "FUN_001078c0",
            "FUN_001079c0",
            "FUN_00107c20",
            "FUN_00107cc0"
        ],
        [
            "FUN_0010285f",
            "FUN_001031cf",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00103c60",
            "FUN_00103ddc",
            "FUN_00103df9",
            "FUN_00105480",
            "FUN_00105c00",
            "FUN_00107690",
            "FUN_00107890",
            "FUN_00107920",
            "FUN_00107c10"
        ],
        [
            "FUN_001025a0",
            "FUN_00102710",
            "FUN_00102e6f",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_001033d6",
            "FUN_00103a78",
            "FUN_001052a0",
            "FUN_00105bc0",
            "FUN_00107c80"
        ],
        [
            "FUN_00102c25",
            "FUN_00102d2f",
            "FUN_00105300",
            "FUN_001058b0",
            "FUN_00107740"
        ],
        [
            "FUN_00103e95",
            "FUN_00107650"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 365224
}