{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "FNU_00102020": {
                    "execute_function_at_address": 1
                },
                "FUN_00102020": {
                    "call_indirect_function": 2,
                    "execute_code": 1,
                    "execute_default_function": 1,
                    "execute_external_function": 3,
                    "execute_indirect_call": 3,
                    "execute_indirect_function": 1,
                    "execute_indirect_jump": 18
                },
                "PTR_DAT_00102020": {
                    "ptr_data": 1
                },
                "code": {
                    "function_pointer": 5,
                    "indirect_function_pointer": 1,
                    "indirect_jump": 1,
                    "indirect_jump_function": 1,
                    "jump_to_address": 1
                },
                "undefined": {
                    "base_address": 1,
                    "function_pointer": 1,
                    "jump_address": 1,
                    "target_address": 3
                },
                "undefined_ptr_0": {
                    "function_address": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102230": {
            "additional_data": {
                "FUN_00102230": {
                    "print_class_name": 1,
                    "print_decoded_string": 1,
                    "print_decompiled_code": 1,
                    "print_demangled_identifier": 1,
                    "print_demangled_name": 6,
                    "print_demangled_string": 14,
                    "print_mangled_name": 1,
                    "print_name": 1,
                    "print_reverse_and_demangle": 1,
                    "print_string_if_underscore": 1,
                    "print_symbol": 1,
                    "print_underscored": 1,
                    "reverse_and_print_string": 1
                },
                "__ptr": {
                    "decoded_string": 1,
                    "demangled_identifier": 1,
                    "demangled_name": 9,
                    "demangled_string": 17,
                    "demangled_symbol": 1,
                    "mangled_name": 1
                },
                "_ptr": {
                    "demangled_string": 1
                },
                "_stdout": {
                    "output_stream": 3,
                    "standard_output": 3,
                    "stdout": 2
                },
                "in_AL": {
                    "ascii_value": 1,
                    "byte_index": 1,
                    "byte_value": 1,
                    "char_to_check": 1,
                    "character": 18,
                    "character_index": 1,
                    "current_byte": 1,
                    "current_char": 3,
                    "index": 2,
                    "input_character": 1,
                    "symbol": 1
                },
                "param_1": {
                    "index": 13,
                    "input": 2,
                    "input_index": 2,
                    "input_offset": 3,
                    "offset": 8,
                    "position": 1,
                    "ptr": 1
                },
                "putc": {
                    "print_character": 2,
                    "put_character": 1
                },
                "unaff_RBX": {
                    "name": 7,
                    "string": 19,
                    "string_pointer": 1,
                    "string_ptr": 2,
                    "symbol_string": 1,
                    "unaffixed_string": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00102380"
            ],
            "code": "\n\n\nvoid print_demangled_string_00102230(ulong index)\n\n{\n  byte character;\n  void *demangled_string;\n  char *string;\n  \n  if (string[character] == '_') {\n    index = (ulong)((int)index + 1);\n  }\n  demangled_string = (void *)cplus_demangle(string + index,DAT_00105108);\n  if (demangled_string != (void *)0x0) {\n    if (*string == '.') {\n      putc(0x2e,output_stream);\n    }\n    printf(\"%s\",demangled_string);\n    free(demangled_string);\n    return;\n  }\n  printf(\"%s\");\n  return;\n}\n\n",
            "current_name": "print_demangled_string_00102230",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102230": "print_demangled_string_00102230",
                "__ptr": "demangled_string",
                "_ptr": "demangled_string",
                "_stdout": "output_stream",
                "in_AL": "character",
                "param_1": "index",
                "putc": "print_character",
                "unaff_RBX": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010225e": {
            "additional_data": {
                "DAT_001035e8": {
                    "additional_options": 1,
                    "extra_options": 2
                },
                "DAT_0010d148": {
                    "program_name": 2
                },
                "FUN_0010225e": {
                    "display_usage": 4,
                    "display_usage_info": 1,
                    "print_usage": 12,
                    "print_usage_and_exit": 13,
                    "print_usage_message": 1
                },
                "_DAT_0010315c": {
                    "info_message": 1
                },
                "_DAT_00103198": {
                    "bugs_message": 1
                },
                "_DAT_00103500": {
                    "bugzilla_website": 1
                },
                "_DAT_0010d148": {
                    "options": 1
                },
                "__c": {
                    "c": 2,
                    "character": 23
                },
                "__dest": {
                    "dest": 4,
                    "destination": 19
                },
                "__format": {
                    "bug_report_format": 3,
                    "format": 7,
                    "format_str": 2,
                    "format_string": 17,
                    "message_format": 2
                },
                "__n": {
                    "count": 3,
                    "length": 1,
                    "n": 3,
                    "num_bytes": 3,
                    "num_elements": 2,
                    "number_of_elements": 1,
                    "size": 13
                },
                "__ptr": {
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "pointer": 11,
                    "ptr": 11
                },
                "__s": {
                    "file": 5,
                    "file_pointer": 1,
                    "file_stream": 3,
                    "s": 2,
                    "stream": 5,
                    "stream_ptr": 1
                },
                "__size": {
                    "element_size": 16,
                    "item_size": 1,
                    "ptr_size": 1,
                    "size": 6
                },
                "__src": {
                    "source": 19,
                    "src": 5
                },
                "__status": {
                    "exit_status": 1,
                    "status": 7,
                    "status_code": 5
                },
                "__stream": {
                    "file_stream": 2,
                    "output_stream": 2,
                    "stream": 21,
                    "stream_file": 1
                },
                "_libiberty_demanglers": {
                    "demangled_names": 2,
                    "demangler_array": 2,
                    "demangler_names": 2,
                    "demangler_options": 1,
                    "demanglers": 6,
                    "demanglers_list": 7,
                    "lib_demanglers_str": 1,
                    "libiberty_demanglers": 4,
                    "supported_demanglers": 1
                },
                "bfd_set_error_program_name": {
                    "set_error_program_name": 1
                },
                "c": {
                    "character": 1
                },
                "dcgettext": {
                    "get_message": 1
                },
                "exit": {
                    "terminate_program": 1
                },
                "fprintf": {
                    "print_to_file": 1
                },
                "fputc": {
                    "write_char_to_file": 1,
                    "write_character_to_file": 1
                },
                "fwrite": {
                    "write_to_file": 2
                },
                "param_1": {
                    "file": 17,
                    "file_pointer": 1,
                    "file_stream": 1,
                    "out_file": 1,
                    "output_file": 11
                },
                "param_2": {
                    "error_code": 3,
                    "error_status": 1,
                    "exit_code": 7,
                    "exit_status": 9,
                    "status": 11
                },
                "puVar1": {
                    "current_demangler": 1,
                    "demangler": 2,
                    "demangler_ptr": 11,
                    "demanglers_iterator": 1,
                    "demanglers_ptr": 5,
                    "lib_demanglers": 1,
                    "libiberty_demanglers": 1,
                    "pointer": 1,
                    "pointer_to_demanglers": 1,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "ptr": 4,
                    "ptr_libiberty_demanglers": 1
                }
            },
            "called": [
                "fprintf",
                "dcgettext",
                "memmove",
                "exit",
                "bfd_set_error_program_name",
                "fputc",
                "exit",
                "fwrite"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nvoid print_usage_and_exit_0010225e(FILE *file,int status)\n\n{\n  char *format_string;\n  undefined8 *demangler_ptr;\n  \n  fprintf(file,\"Usage: %s [options] [mangled names]\\n\",DAT_0010d148);\n  fprintf(file,\"Options are:\\n  [-_|--strip-underscore]     Ignore first leading underscore%s\\n\",\n          \"\");\n  fprintf(file,\"  [-n|--no-strip-underscore]  Do not ignore a leading underscore%s\\n\",\n          \" (default)\");\n  fwrite(\"  [-p|--no-params]            Do not display function arguments\\n  [-i|--no-verbose]           Do not show implementation details (if any)\\n  [-R|--recurse-limit]        Enable a limit on recursion whilst demangling.  [Default]\\n  ]-r|--no-recurse-limit]     Disable a limit on recursion whilst demangling\\n  [-t|--types]                Also attempt to demangle type encodings\\n  [-s|--format \"\n         ,1,0x184,file);\n  fprintf(file,\"{%s\",demanglers_list);\n  demangler_ptr = (undefined8 *)&libiberty_demanglers;\n  while (*(int *)(demangler_ptr + 4) != 0) {\n    fprintf(file,\",%s\",demangler_ptr[3]);\n    demangler_ptr = demangler_ptr + 3;\n  }\n  fputc(0x7d,file);\n  fwrite(&DAT_001035e8,1,2,file);\n  fwrite(\"  [@<file>]                   Read extra options from <file>\\n  [-h|--help]                 Display this information\\n  [-v|--version]              Show the version information\\nDemangled names are displayed to stdout.\\nIf a name cannot be demangled it is just echoed to stdout.\\nIf no names are provided on the command line, stdin is read.\\n\"\n         ,1,0x150,file);\n  if (status == 0) {\n    format_string = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(file,format_string,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminate_program(status);\n}\n\n",
            "current_name": "print_usage_and_exit_0010225e",
            "entrypoint": "0x0010225e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010225e": "print_usage_and_exit_0010225e",
                "__format": "format_string",
                "_libiberty_demanglers": "demanglers_list",
                "dcgettext": "get_message",
                "exit": "terminate_program",
                "fprintf": "print_to_file",
                "fputc": "write_character_to_file",
                "fwrite": "write_to_file",
                "param_1": "file",
                "param_2": "status",
                "puVar1": "demangler_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102380": {
            "additional_data": {
                "DAT_00105108": {
                    "additional_data": 1,
                    "demangle_option": 1,
                    "demangle_param": 1,
                    "format": 1,
                    "format_string": 1
                },
                "DAT_0010d140": {
                    "use_underscore": 1
                },
                "FUN_00102380": {
                    "decode_and_print_name": 1,
                    "demangle_and_print": 1,
                    "print_c_plus_plus_name": 1,
                    "print_cplus_demangled_name": 1,
                    "print_demangled": 1,
                    "print_demangled_name": 14,
                    "print_demangled_string": 1,
                    "print_formatted_name": 1,
                    "print_name_or_string": 1,
                    "print_parameter_or_underscore": 1,
                    "print_recognizable_name": 1,
                    "print_symbol": 2,
                    "print_symbol_name": 2,
                    "print_symbol_or_string": 2
                },
                "_DAT_0010d140": {
                    "check_flag": 1,
                    "flag": 2,
                    "is_condition_met": 1,
                    "is_demangled_enabled": 1,
                    "is_nonzero": 1,
                    "is_valid": 1,
                    "some_condition": 1,
                    "special_character_flag": 1
                },
                "__ptr": {
                    "demangled_name": 21,
                    "demangled_string": 9,
                    "demangled_symbol": 1
                },
                "_stdout": {
                    "output_stream": 1,
                    "standard_output": 2
                },
                "cplus_demangle": {
                    "demangle": 3,
                    "demangle_cplus": 1,
                    "demangle_cpp_name": 1
                },
                "param_1": {
                    "input_string": 11,
                    "name": 13,
                    "string": 3,
                    "symbol": 2,
                    "symbol_name": 2
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 2,
                    "param2": 9,
                    "param_2": 2,
                    "unneeded_parameter1": 1,
                    "unused": 2,
                    "unused1": 2,
                    "unused_param": 3,
                    "unused_param1": 3,
                    "unused_param2": 3,
                    "unused_param_1": 1,
                    "unused_param_2": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 2,
                    "param3": 9,
                    "param_3": 2,
                    "unneeded_parameter2": 1,
                    "unused": 2,
                    "unused2": 2,
                    "unused_param": 3,
                    "unused_param2": 3,
                    "unused_param3": 3,
                    "unused_param_2": 1,
                    "unused_param_3": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 2,
                    "param4": 9,
                    "param_4": 3,
                    "unneeded_parameter3": 1,
                    "unused": 2,
                    "unused3": 2,
                    "unused_param": 3,
                    "unused_param3": 3,
                    "unused_param4": 3,
                    "unused_param_3": 1,
                    "unused_param_4": 1
                },
                "putc": {
                    "print_character": 1
                },
                "uVar1": {
                    "has_special_prefix": 1,
                    "is_dot_or_dollar": 10,
                    "is_dot_or_dollar_sign": 2,
                    "is_special_char": 5,
                    "is_special_character": 1,
                    "is_symbol": 1,
                    "starts_with_dot_or_dollar": 10,
                    "starts_with_special_char": 1
                },
                "uVar2": {
                    "additional_offset": 1,
                    "adjusted_index": 2,
                    "increment_value": 1,
                    "index": 3,
                    "index_counter": 1,
                    "index_offset": 1,
                    "num_chars_to_skip": 2,
                    "num_prefix_chars": 1,
                    "number_of_chars_to_skip": 1,
                    "offset": 6,
                    "prefix_length": 2,
                    "start_index": 9,
                    "starts_with_special_char_val": 1
                }
            },
            "called": [
                "FUN_00102230",
                "cplus_demangle",
                "printf",
                "free",
                "putc"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nvoid print_cplus_demangled_name_00102380(char *name,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  uint is_dot_or_dollar;\n  void *demangled_name;\n  ulong start_index;\n  \n  is_dot_or_dollar = (uint)(*name == '.' || *name == '$');\n  start_index = (ulong)is_dot_or_dollar;\n  if ((_DAT_0010d140 != 0) && (name[is_dot_or_dollar] == '_')) {\n    start_index = (ulong)(is_dot_or_dollar + 1);\n  }\n  demangled_name = (void *)demangle(name + start_index,DAT_00105108);\n  if (demangled_name != (void *)0x0) {\n    if (*name == '.') {\n      putc(0x2e,standard_output);\n    }\n    printf(\"%s\",demangled_name);\n    free(demangled_name);\n    return;\n  }\n  printf(\"%s\",name,param4);\n  return;\n}\n\n",
            "current_name": "print_cplus_demangled_name_00102380",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102380": "print_cplus_demangled_name_00102380",
                "__ptr": "demangled_name",
                "_stdout": "standard_output",
                "cplus_demangle": "demangle",
                "param_1": "name",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "putc": "print_character",
                "uVar1": "is_dot_or_dollar",
                "uVar2": "start_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102430": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102443) */\n/* WARNING: Removing unreachable block (ram,0x0010244f) */\n\nvoid FUNC_00102430(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00102430",
            "entrypoint": "0x00102430",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00102430": "FUNC_00102430"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00102460": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102484) */\n/* WARNING: Removing unreachable block (ram,0x00102490) */\n\nvoid FUNC_00102460(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00102460",
            "entrypoint": "0x00102460",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00102460": "FUNC_00102460"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001024f0": {
            "additional_data": {
                "DAT_00105108": {
                    "data_var3": 1
                },
                "DAT_0010d140": {
                    "data_var2": 1
                },
                "DAT_0010d148": {
                    "data_var1": 1,
                    "program_name": 1
                },
                "FUN_001024f0": {
                    "decode_binary_function": 1,
                    "demangle_symbols": 3,
                    "parse_command_line": 1,
                    "parse_command_line_arguments": 1,
                    "process_command_line_options": 1,
                    "symbol_demangler": 2
                },
                "PTR_s_strip_underscore_00104be0": {
                    "ptr_to_s_strip_underscore_00104be0": 1
                },
                "_0x3e": {
                    "var6": 1
                },
                "_0x3f": {
                    "var2": 1
                },
                "_0x5f": {
                    "var1": 1
                },
                "_0x68": {
                    "var4": 1
                },
                "_0x6e": {
                    "var7": 1
                },
                "_0x70": {
                    "var5": 1
                },
                "_0x72": {
                    "var8": 1
                },
                "_0x73": {
                    "var3": 1
                },
                "__n": {
                    "file_size": 11,
                    "num_bytes": 1,
                    "size": 13,
                    "size_t_var": 2,
                    "size_t_var1": 1,
                    "size_var1": 1,
                    "stream_size": 1
                },
                "__ptr": {
                    "buffer": 1,
                    "byte_pointer3": 1,
                    "byte_ptr": 1,
                    "byte_ptr2": 2,
                    "byte_ptr3": 3,
                    "byte_ptr_2": 1,
                    "byte_ptr_3": 1,
                    "char_array": 1,
                    "char_buffer": 1,
                    "current_string": 1,
                    "dst_ptr": 1,
                    "name_buffer": 1,
                    "new_buffer": 1,
                    "new_byte_ptr": 1,
                    "output": 1,
                    "output_ptr": 1,
                    "parsed_string": 1,
                    "ptr": 2,
                    "ptr2": 2,
                    "str_buffer": 1,
                    "str_ptr": 1,
                    "temp_buffer": 1,
                    "temp_pointer": 1,
                    "token": 1,
                    "unquoted_content": 1
                },
                "__s": {
                    "buffer": 3,
                    "byte_arr": 1,
                    "byte_array": 3,
                    "byte_pointer2": 1,
                    "byte_ptr": 2,
                    "byte_ptr2": 5,
                    "byte_ptr_2": 1,
                    "byte_var_ptr1": 1,
                    "file_content": 9,
                    "file_data": 2,
                    "stream_buffer": 1,
                    "string": 1
                },
                "__src": {
                    "current_token": 1,
                    "file_array": 1,
                    "file_paths": 1,
                    "long_ptr": 1,
                    "long_ptr1": 1,
                    "new_string_list": 1,
                    "ptr4": 1,
                    "source": 1,
                    "source_array": 1,
                    "source_list_ptr": 1,
                    "source_ptr": 7,
                    "src_array": 2,
                    "src_ptr": 3,
                    "string_array": 1,
                    "strings": 1,
                    "temp_src_pointer": 1
                },
                "__stream": {
                    "file": 3,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "file_stream": 24
                },
                "_bfd_error_program_name": {
                    "bfd_set_error_program_name": 1
                },
                "_current_demangling_style": {
                    "current_demangling_style": 1,
                    "demangling_style": 1
                },
                "_dgettext": {
                    "dgettext_func": 1
                },
                "_exit": {
                    "exit_func": 1
                },
                "_fflush": {
                    "fflush_func": 1
                },
                "_fseek": {
                    "fseek_func": 1
                },
                "_ftell": {
                    "ftell_func": 1
                },
                "_fun_00102380": {
                    "fun_00102380": 1
                },
                "_mkalign": {
                    "mkalign_func": 1
                },
                "_optarg": {
                    "opt_arg": 1,
                    "optarg_var": 1,
                    "option_argument": 1
                },
                "_optind": {
                    "opt_index": 1,
                    "optind_var": 1
                },
                "_putchar": {
                    "putchar_func": 1
                },
                "_sch_istable": {
                    "sch_istable": 1
                },
                "_stderr": {
                    "stderr_ptr": 1,
                    "stderr_stream": 1
                },
                "_stdin": {
                    "stdin_ptr": 1,
                    "stdin_stream": 1
                },
                "_stdout": {
                    "stdout_ptr": 1,
                    "stdout_stream": 1
                },
                "_xfopen": {
                    "xfopen_func": 1
                },
                "_xfprintf": {
                    "xfprintf_func": 1
                },
                "_xfree": {
                    "xfree_func": 1
                },
                "_xmalloc_set_program_name": {
                    "xmalloc_set_program_name": 1
                },
                "_xrealloc": {
                    "xrealloc_func": 1
                },
                "_xstrdup": {
                    "xstrdup_func": 1
                },
                "bVar2": {
                    "bool1": 1,
                    "bool_var2": 1,
                    "byte_flag": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "byte_var": 3,
                    "byte_var1": 1,
                    "byte_var2": 11,
                    "byte_var_2": 2,
                    "char_flag": 1,
                    "is_table_entry": 1,
                    "table_value": 1
                },
                "bVar3": {
                    "bool1": 1,
                    "bool2": 1,
                    "bool_flag1": 1,
                    "bool_var1": 7,
                    "bool_var3": 9,
                    "bool_var_3": 2,
                    "escape_flag": 1,
                    "is_backslash": 1,
                    "is_single_quote": 1,
                    "is_table_character": 1
                },
                "bVar4": {
                    "bool2": 1,
                    "bool3": 1,
                    "bool_flag2": 1,
                    "bool_var2": 7,
                    "bool_var4": 9,
                    "bool_var_4": 2,
                    "is_double_quote": 1,
                    "is_escape_character": 1,
                    "is_single_quote": 1,
                    "single_quote_flag": 1
                },
                "bVar5": {
                    "bool3": 1,
                    "bool4": 1,
                    "bool_flag3": 1,
                    "bool_var3": 7,
                    "bool_var5": 9,
                    "bool_var_5": 2,
                    "double_quote_flag": 1,
                    "is_double_quote": 1,
                    "is_escape": 1,
                    "is_single_quote": 1
                },
                "bVar6": {
                    "byte": 1,
                    "byte1": 1,
                    "byte_var": 1,
                    "byte_var2": 4,
                    "byte_var3": 2,
                    "byte_var4": 1,
                    "byte_var6": 9,
                    "byte_var_6": 2,
                    "current_byte": 1,
                    "current_char": 2,
                    "next_byte": 1
                },
                "iVar7": {
                    "index": 6,
                    "index_var": 2,
                    "int1": 1,
                    "int_var1": 6,
                    "int_var7": 8,
                    "int_var_7": 2,
                    "loop_index1": 1,
                    "result": 1,
                    "status": 1
                },
                "iVar9": {
                    "current_index": 1,
                    "index": 1,
                    "index2": 1,
                    "index_var": 1,
                    "int2": 1,
                    "int_var2": 5,
                    "int_var9": 3,
                    "int_var_9": 2,
                    "iteration_result": 1,
                    "iterator": 1,
                    "loop_index": 1,
                    "loop_var": 3,
                    "opt": 2,
                    "option": 3,
                    "result": 1,
                    "var2": 1
                },
                "lVar11": {
                    "cur_string": 1,
                    "index": 1,
                    "length": 1,
                    "long_var": 4,
                    "long_var1": 11,
                    "long_var11": 4,
                    "long_var_1": 2,
                    "loop_counter": 1,
                    "result": 1,
                    "temp": 1,
                    "temp_long": 1,
                    "temp_long_var": 1,
                    "var_11": 1
                },
                "lVar17": {
                    "cur_file_index": 1,
                    "current_index": 1,
                    "file_index": 1,
                    "index": 2,
                    "index2": 1,
                    "long_val": 1,
                    "long_var17": 3,
                    "long_var2": 14,
                    "long_var_2": 2,
                    "loop_long_var": 1,
                    "param_value": 1,
                    "var_17": 1
                },
                "lVar19": {
                    "cur_string_index": 1,
                    "file_paths_size": 1,
                    "long_index": 1,
                    "long_var19": 4,
                    "long_var2": 1,
                    "long_var3": 14,
                    "long_var_3": 2,
                    "string_array_index": 1,
                    "var_19": 1
                },
                "local_100": {
                    "buffer_idx": 1,
                    "count2": 1,
                    "local_buffer": 1,
                    "local_count": 1,
                    "local_long": 1,
                    "local_long_var_1": 1,
                    "local_var100": 2,
                    "local_var2": 1,
                    "local_var4": 11,
                    "local_var_100": 1,
                    "local_var_4": 1,
                    "long_var4": 1,
                    "name_index": 1,
                    "new_string_index": 1,
                    "temp_index": 1,
                    "temp_var3": 1,
                    "token_index": 1,
                    "total_entries": 1
                },
                "local_108": {
                    "file_path_size": 1,
                    "local_size": 3,
                    "local_size_t_var": 1,
                    "local_var108": 2,
                    "local_var3": 11,
                    "local_var_108": 1,
                    "local_var_3": 1,
                    "size2": 1,
                    "size3": 1,
                    "size_limit": 1,
                    "string_array_size": 1,
                    "string_size": 1,
                    "temp_var2": 1,
                    "token_list_size": 1,
                    "total_string_length": 1,
                    "total_symbols": 1
                },
                "local_10c": {
                    "int4": 1,
                    "limit": 1,
                    "local_int2": 1,
                    "local_int_var_2": 1,
                    "local_value": 1,
                    "local_var1": 1,
                    "local_var10c": 2,
                    "local_var2": 11,
                    "local_var_10c": 1,
                    "local_var_2": 1,
                    "max_attempts": 1,
                    "max_count": 1,
                    "max_file_count": 2,
                    "max_files": 3,
                    "max_loops": 1,
                    "temp_var1": 1
                },
                "local_110": {
                    "count1": 1,
                    "counter": 1,
                    "current_file_index": 1,
                    "file_count": 1,
                    "file_counter": 1,
                    "int3": 1,
                    "local_count": 2,
                    "local_int1": 1,
                    "local_int_var_1": 1,
                    "local_var1": 11,
                    "local_var110": 2,
                    "local_var_1": 1,
                    "local_var_110": 1,
                    "loop_index": 1,
                    "loop_index3": 1,
                    "loop_var1": 1,
                    "num_attempts": 1,
                    "num_loops": 1
                },
                "local_c8": {
                    "file_info": 2,
                    "file_stat": 2,
                    "file_stats": 2,
                    "local_stat": 5,
                    "local_stat_struct": 1,
                    "local_stat_var": 1,
                    "local_var5": 3,
                    "stat_buffer": 2,
                    "stat_data": 1,
                    "stat_info": 1,
                    "stat_struct": 6,
                    "stat_struct_var": 1,
                    "stat_var": 2,
                    "temp_stat_struct": 1
                },
                "param_1": {
                    "argc": 7,
                    "count": 5,
                    "function_count": 1,
                    "num_files": 3,
                    "num_parameters": 1,
                    "num_params": 13
                },
                "param_2": {
                    "argv": 7,
                    "array": 1,
                    "file_list": 1,
                    "file_names": 2,
                    "file_paths": 5,
                    "files": 2,
                    "param_array": 7,
                    "param_list": 2,
                    "param_values": 1,
                    "parameter_values": 1,
                    "params_array": 1
                },
                "pbVar1": {
                    "byte_pointer": 1,
                    "byte_pointer1": 1,
                    "byte_pointer_var1": 1,
                    "byte_ptr": 1,
                    "byte_ptr1": 9,
                    "byte_ptr_1": 2,
                    "current_byte": 3,
                    "p_byte_var1": 1,
                    "ptr1": 4,
                    "ptr_byte1": 2
                },
                "pbVar16": {
                    "buffer_ptr": 1,
                    "byte_pointer": 2,
                    "byte_pointer4": 1,
                    "byte_ptr": 1,
                    "byte_ptr2": 3,
                    "byte_ptr3": 4,
                    "byte_ptr4": 3,
                    "byte_ptr_3": 1,
                    "byte_ptr_4": 1,
                    "byte_ptr_var16": 1,
                    "ch": 1,
                    "content_ptr": 2,
                    "current_char": 1,
                    "current_character": 1,
                    "current_input": 1,
                    "input_str": 1,
                    "p_byte_var16": 1,
                    "pointer_byte": 1,
                    "ptr2": 2
                },
                "pbVar20": {
                    "buffer_ptr2": 1,
                    "byte_pointer5": 1,
                    "byte_ptr3": 3,
                    "byte_ptr4": 4,
                    "byte_ptr5": 3,
                    "byte_ptr_4": 1,
                    "byte_ptr_5": 1,
                    "byte_ptr_var20": 1,
                    "content_ptr2": 1,
                    "dest": 1,
                    "new_string_ptr": 1,
                    "output_pointer": 1,
                    "p_byte_var20": 1,
                    "pointer_byte2": 1,
                    "pointer_to_byte": 1,
                    "ptr3": 2,
                    "ptr_byte2": 1,
                    "string_pointer": 1,
                    "temp_pointer": 1
                },
                "pcVar15": {
                    "char_pointer": 1,
                    "char_ptr": 2,
                    "char_ptr1": 3,
                    "char_ptr_var15": 1,
                    "error_message": 5,
                    "file_path": 1,
                    "format_string": 1,
                    "msg_ptr": 1,
                    "pc_var15": 1,
                    "printable_char": 1,
                    "printable_string": 1,
                    "str_ptr": 3,
                    "str_ptr1": 1,
                    "str_ptr2": 1,
                    "str_var": 2,
                    "string_ptr": 2,
                    "temp_char_ptr": 1,
                    "temp_string": 1
                },
                "plVar12": {
                    "arguments": 1,
                    "current_file": 1,
                    "current_file_list": 1,
                    "current_param": 1,
                    "file_names_ptr": 2,
                    "file_paths_ptr": 2,
                    "files_pointer": 1,
                    "long_ptr1": 1,
                    "long_var_array": 1,
                    "param_2_copy": 1,
                    "param_2_ptr": 1,
                    "param_array": 2,
                    "param_array2": 1,
                    "param_array_ptr": 3,
                    "param_array_var": 1,
                    "param_list_ptr": 2,
                    "param_ptr": 1,
                    "parameters_ptr": 1,
                    "params": 1,
                    "ptr3": 1,
                    "symbol_list": 2,
                    "symbol_pointers": 1
                },
                "plVar13": {
                    "cur_string_pointer": 1,
                    "current_file_entry": 1,
                    "current_string": 1,
                    "dest_ptr": 1,
                    "file_path": 1,
                    "file_paths_ptr2": 1,
                    "long_ptr2": 2,
                    "long_var_array2": 1,
                    "name_array": 1,
                    "new_file_names_ptr": 1,
                    "param_2_ptr_2": 1,
                    "param_array": 1,
                    "param_array3": 1,
                    "param_array_var2": 1,
                    "param_list_ptr2": 2,
                    "param_ptr": 1,
                    "param_ptr2": 1,
                    "ptr5": 1,
                    "source_array": 1,
                    "source_ptr2": 1,
                    "src_array_ptr": 1,
                    "src_params": 1,
                    "string_array": 1,
                    "symbol_list2": 1,
                    "symbol_ptr": 1,
                    "temp_ptr": 1,
                    "tokens": 1
                },
                "ppuVar18": {
                    "option_ptr": 1,
                    "options": 1,
                    "pointer_of_pointer": 1,
                    "pointer_pointer": 1,
                    "pointer_ptr": 1,
                    "pointer_to_pointer": 2,
                    "pp_unk_var18": 1,
                    "ppu_var18": 1,
                    "prog_name": 1,
                    "ptr_ptr": 5,
                    "ptr_ptr_var18": 1,
                    "ptr_to_ptr": 4,
                    "str_ptr_ptr": 1,
                    "style_options": 1,
                    "style_pointer": 1,
                    "undefined_ptr": 1,
                    "undefined_ptr1": 1,
                    "undefined_ptr_ptr1": 1,
                    "usage_message": 1,
                    "var_pointer": 1
                },
                "sVar10": {
                    "array_size": 1,
                    "byte_size": 1,
                    "bytes_read": 10,
                    "read_size": 5,
                    "s_size": 1,
                    "s_size_t_var": 1,
                    "s_var10": 1,
                    "size2": 1,
                    "size_t_var2": 2,
                    "size_var": 4,
                    "size_var10": 2,
                    "size_var2": 1
                },
                "uVar14": {
                    "demangle_style": 3,
                    "exit_status": 1,
                    "result": 2,
                    "return_val": 1,
                    "strdup_result": 1,
                    "temp_u_var": 1,
                    "temp_value": 1,
                    "u_var14": 2,
                    "u_var2": 1,
                    "uint2": 1,
                    "uint_var14": 1,
                    "uint_var2": 4,
                    "uint_var_14": 1,
                    "undefined8_var1": 1,
                    "undefined_var": 4,
                    "undefined_var14": 1,
                    "unknown_var": 1,
                    "unsigned_var2": 1,
                    "var3": 1
                },
                "uVar8": {
                    "count": 2,
                    "file_index": 1,
                    "iteration": 1,
                    "loop_counter": 1,
                    "loop_index2": 1,
                    "u_var": 1,
                    "uint1": 1,
                    "uint_var": 3,
                    "uint_var1": 3,
                    "uint_var8": 8,
                    "uint_var_8": 2,
                    "unsigned_var": 1,
                    "var1": 1
                },
                "unaff_R13": {
                    "current_index": 1,
                    "current_length": 1,
                    "current_token_index": 1,
                    "file_index": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "r13": 1,
                    "temp_reg_value": 1,
                    "ulong_var": 6,
                    "ulong_var1": 5,
                    "ulong_var_1": 1,
                    "unaff_r13": 2,
                    "unaff_r13_var": 1,
                    "unaff_reg": 1,
                    "unaff_reg_var13": 1,
                    "unaff_register_13": 1,
                    "unaff_var": 2
                }
            },
            "called": [
                "fprintf",
                "fread",
                "FUN_00102e20",
                "xmalloc",
                "putc",
                "fopen",
                "FUN_00102380",
                "fflush",
                "xmalloc_set_program_name",
                "xexit",
                "xrealloc",
                "fclose",
                "bfd_set_error_program_name",
                "getopt_long",
                "printf",
                "free",
                "cplus_demangle_set_style",
                "memcpy",
                "memmove",
                "strchr",
                "fseek",
                "FUN_0010225e",
                "xstrdup",
                "exit",
                "cplus_demangle_name_to_style",
                "getc",
                "ftell",
                "dcgettext",
                "ferror",
                "strlen",
                "stat"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nundefined8 demangle_symbols_001024f0(int num_params,long *argv)\n\n{\n  byte *byte_ptr1;\n  byte byte_var2;\n  bool bool_var3;\n  bool bool_var4;\n  bool bool_var5;\n  byte byte_var6;\n  int int_var7;\n  uint uint_var8;\n  int int_var2;\n  FILE *file_stream;\n  size_t size;\n  byte *file_content;\n  size_t bytes_read;\n  byte *byte_ptr3;\n  long long_var1;\n  long *param_array_ptr;\n  long *source_ptr;\n  long *long_ptr2;\n  undefined8 uint_var2;\n  char *error_message;\n  byte *byte_ptr3;\n  long long_var2;\n  undefined **ptr_ptr;\n  long long_var3;\n  byte *byte_ptr4;\n  ulong ulong_var;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  long local_var4;\n  stat stat_struct;\n  \n  DAT_0010d148 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d148);\n  param_array_ptr = argv;\n  if (1 < num_params) {\n    local_var2 = 2000;\n    ulong_var = 1;\n    local_var1 = 0;\n    do {\n      int_var2 = (int)ulong_var;\n      long_var2 = (long)int_var2;\n      if (*(char *)param_array_ptr[long_var2] == '@') {\n        local_var2 = local_var2 + -1;\n        if (local_var2 == 0) goto LAB_00102bdd;\n        error_message = (char *)param_array_ptr[long_var2] + 1;\n        int_var7 = stat(error_message,&stat_struct);\n        if (int_var7 < 0) goto LAB_00102900;\n        if ((stat_struct.st_mode & 0xf000) == 0x4000) {\n          long_var2 = *param_array_ptr;\n          error_message = \"%s: error: @-file refers to a directory\\n\";\n          do {\n            fprintf(stderr_ptr,error_message,long_var2);\n            xexit(1);\nLAB_00102bdd:\n            long_var2 = *param_array_ptr;\n            error_message = \"%s: error: too many @-files encountered\\n\";\n          } while( true );\n        }\n        file_stream = fopen(error_message,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00102900;\n        int_var7 = fseek(file_stream,0,2);\n        if (((int_var7 == -1) || (size = ftell(file_stream), size == 0xffffffffffffffff)) ||\n           (int_var7 = fseek(file_stream,0,0), int_var7 == -1)) {\nLAB_001029a0:\n          fclose(file_stream);\n          if (int_var2 + 1 < num_params) goto LAB_0010290d;\n          break;\n        }\n        file_content = (byte *)xmalloc(size + 1);\n        bytes_read = fread(file_content,1,size,file_stream);\n        if ((size != bytes_read) && (int_var7 = ferror(file_stream), int_var7 != 0)) {\n          free(file_content);\n          goto LAB_001029a0;\n        }\n        file_content[bytes_read] = 0;\n        byte_var6 = *file_content;\n        byte_ptr3 = file_content;\n        if (byte_var6 != 0) {\nLAB_00102680:\n          if (((&sch_istable)[(ulong)byte_var6 * 2] & 0x40) != 0) goto LAB_00102670;\n          strlen((char *)file_content);\n          byte_ptr3 = (byte *)xmalloc();\n          source_ptr = (long *)0x0;\n          int_var7 = 0;\n          bool_var3 = false;\n          bool_var5 = false;\n          bool_var4 = false;\n          local_var4 = 0;\n          byte_ptr3 = file_content;\n          do {\n            while (((&sch_istable)[(ulong)*byte_ptr3 * 2] & 0x40) != 0) {\n              byte_ptr3 = byte_ptr3 + 1;\n            }\n            if ((int_var7 == 0) || (int_var7 + -1 <= (int)local_var4)) {\n              if (source_ptr == (long *)0x0) {\n                int_var7 = 8;\n                source_ptr = (long *)xmalloc(0x40);\n              }\n              else {\n                int_var7 = int_var7 * 2;\n                source_ptr = (long *)xrealloc(source_ptr,(long)int_var7 << 3);\n              }\n              long_ptr2 = source_ptr + local_var4;\n              *long_ptr2 = 0;\n            }\n            else {\n              long_ptr2 = source_ptr + local_var4;\n            }\n            byte_var6 = *byte_ptr3;\n            byte_ptr4 = byte_ptr3;\n            while (byte_var6 != 0) {\n              while( true ) {\n                if ((((&sch_istable)[(ulong)byte_var6 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var5 | bool_var4 | bool_var3))) {\n                  bool_var4 = false;\n                  bool_var3 = false;\n                  bool_var5 = false;\n                  goto LAB_0010276f;\n                }\n                if (!bool_var4) break;\n                byte_ptr3 = byte_ptr3 + 1;\n                *byte_ptr4 = byte_var6;\n                byte_ptr4 = byte_ptr4 + 1;\n                bool_var4 = false;\n                byte_var6 = *byte_ptr3;\n                if (byte_var6 == 0) goto LAB_0010276f;\n              }\n              if (byte_var6 == 0x5c) {\n                bool_var4 = true;\n              }\n              else if (bool_var5) {\n                if (byte_var6 == 0x27) {\n                  bool_var5 = false;\n                }\n                else {\nLAB_001028e1:\n                  *byte_ptr4 = byte_var6;\n                  byte_ptr4 = byte_ptr4 + 1;\n                }\n              }\n              else if (bool_var3) {\n                if (byte_var6 != 0x22) goto LAB_001028e1;\n                bool_var3 = false;\n              }\n              else if (byte_var6 == 0x27) {\n                bool_var5 = true;\n              }\n              else {\n                if (byte_var6 != 0x22) goto LAB_001028e1;\n                bool_var3 = true;\n              }\n              byte_ptr1 = byte_ptr3 + 1;\n              byte_ptr3 = byte_ptr3 + 1;\n              byte_var6 = *byte_ptr1;\n            }\nLAB_0010276f:\n            *byte_ptr4 = 0;\n            long_var1 = xstrdup(byte_ptr3);\n            *long_ptr2 = long_var1;\n            source_ptr[local_var4 + 1] = 0;\n            byte_var6 = *byte_ptr3;\n            byte_var2 = (&sch_istable)[(ulong)byte_var6 * 2];\n            while ((byte_var2 & 0x40) != 0) {\n              byte_var6 = byte_ptr3[1];\n              byte_ptr3 = byte_ptr3 + 1;\n              byte_var2 = (&sch_istable)[(ulong)byte_var6 * 2];\n            }\n            local_var4 = local_var4 + 1;\n          } while (byte_var6 != 0);\n          free(byte_ptr3);\n          long_ptr2 = param_array_ptr;\n          if (argv == param_array_ptr) goto LAB_00102adb;\n          goto LAB_00102807;\n        }\nLAB_00102abe:\n        source_ptr = (long *)xmalloc(8);\n        *source_ptr = 0;\n        if (argv == param_array_ptr) {\nLAB_00102adb:\n          if (*param_array_ptr == 0) {\n            int_var7 = 0;\n          }\n          else {\n            long_var1 = 1;\n            do {\n              int_var7 = (int)long_var1;\n              long_ptr2 = param_array_ptr + long_var1;\n              long_var1 = long_var1 + 1;\n            } while (*long_ptr2 != 0);\n          }\n          long_var3 = 0;\n          long_ptr2 = (long *)xmalloc((long)(int_var7 + 1) << 3);\n          long_var1 = *param_array_ptr;\n          while (long_var1 != 0) {\n            uint_var2 = xstrdup();\n            *(undefined8 *)((long)long_ptr2 + long_var3) = uint_var2;\n            long_var3 = long_var3 + 8;\n            long_var1 = *(long *)((long)param_array_ptr + long_var3);\n          }\n          *(undefined8 *)((long)long_ptr2 + long_var3) = 0;\nLAB_00102807:\n          param_array_ptr = long_ptr2;\n          if (*source_ptr == 0) goto LAB_00102ba3;\n          long_var1 = 0;\n          do {\n            long_var1 = long_var1 + 1;\n          } while (source_ptr[long_var1] != 0);\n          local_var3 = long_var1 * 8;\n        }\n        else {\nLAB_00102ba3:\n          long_var1 = 0;\n          local_var3 = 0;\n        }\n        free((void *)param_array_ptr[long_var2]);\n        param_array_ptr = (long *)xrealloc(param_array_ptr,(long_var1 + 1 + (long)num_params) * 8);\n        int_var7 = num_params + -1 + (int)long_var1;\n        memmove(param_array_ptr + long_var2 + long_var1,param_array_ptr + long_var2 + 1,(long)(num_params - int_var2) << 3);\n        memcpy(param_array_ptr + long_var2,source_ptr,local_var3);\n        free(source_ptr);\n        free(file_content);\n        fclose(file_stream);\n        uint_var8 = local_var1 + 1;\n        ulong_var = long_var2 * 8;\n        num_params = int_var7;\n        if (int_var7 <= (int)uint_var8) break;\n      }\n      else {\nLAB_00102900:\n        if (num_params <= int_var2 + 1) break;\nLAB_0010290d:\n        uint_var8 = int_var2 + 1;\n        local_var1 = int_var2;\n      }\n      ulong_var = (ulong)uint_var8;\n    } while( true );\n  }\n  ptr_ptr = &PTR_s_strip_underscore_00104be0;\n  while (int_var2 = getopt_long(num_params,param_array_ptr,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0),\n        int_var2 != -1) {\n    switch(int_var2) {\n    case 0x3f:\nswitchD_001029f9_caseD_3f:\n      FUN_0010225e(stderr_ptr,1);\n    case 0x5f:\nswitchD_001029f9_caseD_5f:\n      _DAT_0010d140 = 1;\n      break;\n    default:\n      do {\n        int_var2 = getopt_long(num_params,param_array_ptr,\"_hinprRs:tv\",&PTR_s_strip_underscore_00104be0,0);\n        if (int_var2 == -1) goto LAB_00102a6c;\n        switch(int_var2) {\n        case 0x3f:\n          goto switchD_001029f9_caseD_3f;\n        case 0x52:\n          goto switchD_001029f9_caseD_52;\n        case 0x5f:\n          goto switchD_001029f9_caseD_5f;\n        case 0x68:\n          goto switchD_001029f9_caseD_68;\n        case 0x69:\n          goto switchD_001029f9_caseD_69;\n        case 0x6e:\n          goto switchD_001029f9_caseD_6e;\n        case 0x70:\n          goto switchD_001029f9_caseD_70;\n        case 0x72:\n          goto switchD_001029f9_caseD_72;\n        case 0x73:\n          goto switchD_001029f9_caseD_73;\n        case 0x74:\n          goto switchD_001029f9_caseD_74;\n        case 0x76:\n          goto switchD_001029f9_caseD_76;\n        }\n      } while( true );\n    case 0x52:\nswitchD_001029f9_caseD_52:\n      DAT_00105108 = DAT_00105108 & 0xfffbffff;\n      break;\n    case 0x68:\nswitchD_001029f9_caseD_68:\n      FUN_0010225e(stdout_stream,0);\n    case 0x74:\nswitchD_001029f9_caseD_74:\n      DAT_00105108 = DAT_00105108 | 0x10;\n      break;\n    case 0x69:\nswitchD_001029f9_caseD_69:\n      DAT_00105108 = DAT_00105108 & 0xfffffff7;\n      break;\n    case 0x6e:\nswitchD_001029f9_caseD_6e:\n      _DAT_0010d140 = 0;\n      break;\n    case 0x70:\nswitchD_001029f9_caseD_70:\n      DAT_00105108 = DAT_00105108 & 0xfffffffe;\n      break;\n    case 0x72:\nswitchD_001029f9_caseD_72:\n      DAT_00105108 = DAT_00105108 | 0x40000;\n      break;\n    case 0x73:\nswitchD_001029f9_caseD_73:\n      int_var2 = cplus_demangle_name_to_style(opt_arg);\n      if (int_var2 == 0) {\n        fprintf(stderr_ptr,\"%s: unknown demangling style `%s\\'\\n\",DAT_0010d148,opt_arg);\n        return 1;\n      }\n      cplus_demangle_set_style(int_var2);\n      break;\n    case 0x76:\nswitchD_001029f9_caseD_76:\n      printf(\"GNU %s %s\\n\",\"c++filt\",\"(GNU Binutils for Debian) 2.40\");\n      error_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(error_message);\n      error_message = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(error_message);\n                    \n      exit(0);\n    }\n  }\nLAB_00102a6c:\n  if (opt_index < num_params) {\n    do {\n      FUN_00102380(param_array_ptr[opt_index]);\n      putc(10,stdout_stream);\n      opt_index = opt_index + 1;\n    } while (opt_index < num_params);\n  }\n  else {\n    if (current_demangling_style == 0x8000) {\nLAB_00102c76:\n      ptr_ptr = (undefined **)&stdout;\n      do {\n        ulong_var = 0;\n        uint_var8 = getc(stdin_stream);\n        while( true ) {\n          param_array_ptr = (long *)(ulong_var & 0xffffffff);\n          if (uint_var8 == 0xffffffff) goto LAB_00102d0d;\n          if ((((&sch_istable)[(ulong)(uint_var8 & 0xff) * 2] & 0x8c) == 0) &&\n             (error_message = strchr(\"_$.\",uint_var8), error_message == (char *)0x0)) {\n            if ((int)param_array_ptr != 0) goto LAB_00102d6f;\n            goto LAB_00102d47;\n          }\n          if (ulong_var == 0x7ffe) break;\n          (&DAT_00105140)[ulong_var] = (char)uint_var8;\n          ulong_var = ulong_var + 1;\n          uint_var8 = getc(stdin_stream);\n        }\n        param_array_ptr = (long *)0x7ffe;\nLAB_00102d6f:\n        *(undefined *)(param_array_ptr + 0x20a28) = 0;\n        FUN_00102380(&DAT_00105140);\nLAB_00102d47:\n        putc(uint_var8,stdout_stream);\n        if (uint_var8 == 10) {\n          fflush(stdout_stream);\n        }\n      } while( true );\n    }\n    if (current_demangling_style < 0x8001) {\n      if (((current_demangling_style == 0x100) || (current_demangling_style == 0x4000)) ||\n         (current_demangling_style == 4)) goto LAB_00102c76;\n    }\n    else if ((current_demangling_style - 0x10000U & 0xfffeffff) == 0) goto LAB_00102c76;\n    FUN_00102e20(\"Internal error: no symbol alphabet for current style\");\nLAB_00102d0d:\n    if ((int)ulong_var != 0) {\n      *(undefined *)(param_array_ptr + 0x20a28) = 0;\n      FUN_00102380();\n    }\n    fflush((FILE *)*ptr_ptr);\n  }\n  return 0;\nLAB_00102670:\n  byte_var6 = byte_ptr3[1];\n  byte_ptr3 = byte_ptr3 + 1;\n  if (byte_var6 == 0) goto LAB_00102abe;\n  goto LAB_00102680;\n}\n\n",
            "current_name": "demangle_symbols_001024f0",
            "entrypoint": "0x001024f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001024f0": "demangle_symbols_001024f0",
                "__n": "size",
                "__ptr": "byte_ptr3",
                "__s": "file_content",
                "__src": "source_ptr",
                "__stream": "file_stream",
                "_current_demangling_style": "current_demangling_style",
                "_optarg": "opt_arg",
                "_optind": "opt_index",
                "_sch_istable": "sch_istable",
                "_stderr": "stderr_ptr",
                "_stdin": "stdin_stream",
                "_stdout": "stdout_stream",
                "bVar2": "byte_var2",
                "bVar3": "bool_var3",
                "bVar4": "bool_var4",
                "bVar5": "bool_var5",
                "bVar6": "byte_var6",
                "iVar7": "int_var7",
                "iVar9": "int_var2",
                "lVar11": "long_var1",
                "lVar17": "long_var2",
                "lVar19": "long_var3",
                "local_100": "local_var4",
                "local_108": "local_var3",
                "local_10c": "local_var2",
                "local_110": "local_var1",
                "local_c8": "stat_struct",
                "param_1": "num_params",
                "param_2": "argv",
                "pbVar1": "byte_ptr1",
                "pbVar16": "byte_ptr3",
                "pbVar20": "byte_ptr4",
                "pcVar15": "error_message",
                "plVar12": "param_array_ptr",
                "plVar13": "long_ptr2",
                "ppuVar18": "ptr_ptr",
                "sVar10": "bytes_read",
                "uVar14": "uint_var2",
                "uVar8": "uint_var8",
                "unaff_R13": "ulong_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e20": {
            "additional_data": {
                "FUN_00102e20": {
                    "handle_internal_error": 24,
                    "print_error_message": 2,
                    "print_internal_error": 1,
                    "report_internal_error": 4
                },
                "__c": {
                    "c": 2,
                    "char_to_put": 1,
                    "character": 16
                },
                "__format": {
                    "error_message": 3,
                    "error_message_format": 1,
                    "error_msg_format": 1,
                    "format": 9,
                    "format_str": 1,
                    "format_string": 12,
                    "message": 4
                },
                "__n": {
                    "count": 5,
                    "element_count": 7,
                    "n": 7,
                    "num_elements": 10,
                    "number_of_elements": 2
                },
                "__ptr": {
                    "buffer": 3,
                    "data": 3,
                    "data_pointer": 8,
                    "data_ptr": 2,
                    "error_text": 1,
                    "pointer": 3,
                    "ptr": 11
                },
                "__s": {
                    "destination": 1,
                    "file": 3,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "output_file": 1,
                    "output_stream": 2,
                    "s": 5,
                    "source_file": 2,
                    "stream": 5
                },
                "__size": {
                    "data_size": 1,
                    "element_size": 18,
                    "size": 12
                },
                "__stream": {
                    "file": 11,
                    "file_ptr": 1,
                    "file_stream": 6,
                    "output_file": 2,
                    "output_stream": 3,
                    "stream": 8
                },
                "_stderr": {
                    "standard_error": 2,
                    "stderr": 1
                },
                "_stdout": {
                    "standard_output": 2,
                    "stdout": 1
                },
                "fflush": {
                    "flush_file": 1
                },
                "fprintf": {
                    "print_formatted": 1
                },
                "fwrite": {
                    "write_to_file": 1
                },
                "putc": {
                    "put_char": 1
                },
                "xexit": {
                    "exit_program": 2
                }
            },
            "called": [
                "fprintf",
                "putc",
                "fwrite",
                "fflush",
                "xexit"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nvoid handle_internal_error_00102e20(void)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010d148);\n  fwrite(\"Internal error: no symbol alphabet for current style\",1,0x34,standard_error);\n  putc(10,standard_error);\n  xexit(1);\n  return;\n}\n\n",
            "current_name": "handle_internal_error_00102e20",
            "entrypoint": "0x00102e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e20": "handle_internal_error_00102e20",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_file",
                "fprintf": "print_formatted",
                "fwrite": "write_to_file",
                "putc": "put_char",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00102f00",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00102430"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00105120 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00105100);\n  FUNC_00102430();\n  DAT_00105120 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x001024a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00102460"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00102460();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x001024e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle": {
            "called": [
                "cplus_demangle"
            ],
            "calling": [
                "FUN_00102380"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "cplus_demangle",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_name_to_style": {
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_name_to_style",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_set_style": {
            "called": [
                "cplus_demangle_set_style"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_set_style",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_0010225e",
                "FUN_001024f0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_001024f0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001024f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00102400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_0010225e",
                "FUN_001024f0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00102e20",
                "FUN_001024f0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00102e20",
                "FUN_0010225e",
                "FUN_001024f0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_0010225e"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00102e20",
                "FUN_0010225e"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00102e20",
                "FUN_001024f0",
                "FUN_00102380"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00102e20",
                "FUN_001024f0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_001024f0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_00102230",
            "FUN_0010225e",
            "FUN_00102380",
            "FUN_001024f0",
            "FUN_00102e20"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 33665
}