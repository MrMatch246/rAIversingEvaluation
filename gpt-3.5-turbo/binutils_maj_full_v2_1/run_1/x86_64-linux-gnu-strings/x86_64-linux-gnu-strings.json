{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "0x0": {
                    "function_address": 1
                },
                "DAT": {
                    "dat": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00102020": {
                    "call_indirect_function": 1,
                    "call_indirect_jump": 1,
                    "execute_code_at_address": 1,
                    "execute_dynamic_function": 1,
                    "execute_function": 2,
                    "execute_function_at_address": 2,
                    "execute_function_at_null_address": 1,
                    "execute_indeirect_jump": 1,
                    "execute_indirect_call": 4,
                    "execute_indirect_function": 5,
                    "execute_indirect_jump": 10,
                    "execute_undefined_function": 1,
                    "run_dynamic_function": 1
                },
                "PTR": {
                    "ptr": 1
                },
                "PTR_": {
                    "": 1
                },
                "PTR_undefined": {
                    "target_address": 1
                },
                "PTR_undefined_0": {
                    "target_function_pointer": 1
                },
                "code": {
                    "func_to_execute": 1,
                    "function_pointer": 3
                },
                "undefined": {
                    "function_address": 4,
                    "function_pointer": 2,
                    "indirect_function_pointer": 1,
                    "target_address": 2
                },
                "undefined_0": {
                    "indirect_jump_address": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(function_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "code": "function_pointer",
                "undefined": "function_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102330": {
            "additional_data": {
                "DAT_00108358": {
                    "line_ending": 1,
                    "output_string": 1
                },
                "DAT_00108360": {
                    "config_char1": 1,
                    "mode": 1
                },
                "DAT_00108371": {
                    "config_char3": 1
                },
                "DAT_00108372": {
                    "config_char4": 1
                },
                "DAT_00108373": {
                    "config_char2": 1,
                    "is_flag_set": 1
                },
                "FUN_00102330": {
                    "parse_input": 1,
                    "print_data": 1,
                    "process_and_print_data": 5,
                    "process_data": 17,
                    "process_input": 6
                },
                "LAB_00102381": {
                    "check_next_data3": 1,
                    "put_char3": 1
                },
                "LAB_001023bb": {
                    "check_next_data2": 1,
                    "put_char2": 1
                },
                "LAB_001023f5": {
                    "check_next_data": 1,
                    "put_char": 1
                },
                "LAB_00102438": {
                    "put_tab": 1,
                    "putc_tab": 1
                },
                "LAB_001033b3": {
                    "check_data": 1,
                    "read_next_data": 1
                },
                "LAB_00103400": {
                    "loop_end": 1,
                    "print_output": 1,
                    "skip_processing": 1
                },
                "LAB_0010348e": {
                    "check_data_failed": 1,
                    "update_and_break": 1
                },
                "LAB_001034be": {
                    "cleanup_and_return": 1,
                    "free_memory": 1
                },
                "LAB_001034d5": {
                    "process_input_data": 2
                },
                "_sch_istable": {
                    "char_table": 1,
                    "character_is_table": 1,
                    "character_table": 2,
                    "istable": 1
                },
                "_stdout": {
                    "output_stream": 1,
                    "standard_output": 3,
                    "stdout": 3
                },
                "bVar4": {
                    "condition": 1,
                    "counter_less_than_threshold": 1,
                    "is_below_count": 1,
                    "is_below_limit": 1,
                    "is_counter_less": 2,
                    "is_counter_less_than_max": 1,
                    "is_counter_less_than_size": 1,
                    "is_counter_less_than_threshold": 1,
                    "is_less": 4,
                    "is_less_than": 6,
                    "is_less_than_counter": 1,
                    "is_less_than_limit": 1,
                    "is_less_than_max": 1,
                    "is_loop_running": 1,
                    "is_looping": 1,
                    "is_valid_size": 1,
                    "is_within_limit": 1
                },
                "code_r0x00102330": {
                    "loop_start": 2,
                    "process_data_loop": 1,
                    "process_input": 1,
                    "read_input": 1
                },
                "code_r0x001034d5": {
                    "print_output": 1
                },
                "fputs": {
                    "output_string": 1,
                    "write": 1,
                    "write_to_stdout": 2
                },
                "free": {
                    "free_buffer": 1
                },
                "in_AX": {
                    "flag": 1,
                    "flags": 17,
                    "input": 1,
                    "input_flags": 9,
                    "input_status": 1,
                    "modifier": 1
                },
                "in_R8D": {
                    "count": 5,
                    "counter": 14,
                    "data_index": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "index": 1,
                    "length": 2,
                    "limit": 1,
                    "loop_counter": 2
                },
                "in_stack_00000010": {
                    "format_string": 1,
                    "formatted_string": 1,
                    "formatted_string1": 1,
                    "input1": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_identifier": 1,
                    "input_label": 4,
                    "input_message": 1,
                    "input_prompt": 2,
                    "input_string": 6,
                    "input_text": 1,
                    "message": 4,
                    "output_prefix": 1,
                    "print_prompt": 1,
                    "prompt": 1,
                    "string_argument": 1,
                    "text": 1
                },
                "in_stack_00000038": {
                    "formatted_input": 2,
                    "formatted_output": 10,
                    "formatted_value2": 1,
                    "input2": 1,
                    "output": 1,
                    "output_format": 4,
                    "output_identifier": 1,
                    "output_label": 2,
                    "output_message": 1,
                    "output_prompt": 2,
                    "output_string": 2,
                    "output_text": 1,
                    "output_value": 1,
                    "separator": 1
                },
                "param_1": {
                    "data": 19,
                    "input": 5,
                    "input_data": 6
                },
                "print_formatted_input_00103510": {
                    "print_formatted_input": 5
                },
                "print_formatted_output_001034fa": {
                    "print_formatted_output": 5
                },
                "print_formatted_value_0010286f": {
                    "print_formatted_value": 4
                },
                "printf": {
                    "print": 1,
                    "print_formatted_data": 1,
                    "print_formatted_string": 1
                },
                "process_input_data_001034d5": {
                    "process_input_data": 1,
                    "process_non_special_input": 1
                },
                "put": {
                    "write_to_stdout": 1
                },
                "putc": {
                    "print_char_to_stdout": 1,
                    "print_character": 1,
                    "put_char": 1,
                    "write_char": 1,
                    "write_char_to_stdout": 1
                },
                "read_data_and_convert_to_unsigned_long_00103520": {
                    "read_and_convert": 2,
                    "read_and_convert_to_unsigned_long": 2,
                    "read_data": 1,
                    "read_data_and_convert": 1
                },
                "uVar1": {
                    "code_value": 1,
                    "counter": 5,
                    "data_length": 1,
                    "input_char": 1,
                    "output_size": 1,
                    "temp": 1,
                    "temp1": 6,
                    "temp_var1": 8,
                    "value": 1,
                    "value1": 1
                },
                "uVar2": {
                    "current_index": 1,
                    "i": 1,
                    "index": 8,
                    "index1": 14,
                    "temp2": 1,
                    "temp_var2": 1,
                    "value2": 1
                },
                "uVar3": {
                    "index2": 14,
                    "j": 1,
                    "next_index": 9,
                    "temp3": 1,
                    "temp_var3": 1,
                    "value3": 1
                },
                "unaff_R14": {
                    "buffer": 15,
                    "output": 4,
                    "output_buffer": 11
                },
                "unaff_R15": {
                    "format": 4,
                    "format_buffer": 1,
                    "format_string": 4,
                    "format_value": 1,
                    "formatted_data": 2,
                    "formatted_output": 2,
                    "formatted_value": 11,
                    "formatted_value1": 1,
                    "formatter": 1,
                    "output": 1,
                    "output_format": 2
                },
                "update_data_and_pointer_00103810": {
                    "update_data_and_pointer": 5,
                    "update_data_pointer": 1
                }
            },
            "called": [
                "FUN_001034d5"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid process_and_print_data_00102330(ulong data)\n\n{\n  uint temp_var1;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint counter;\n  char *buffer;\n  undefined8 formatted_value;\n  bool is_less_than;\n  undefined8 input_string;\n  undefined8 formatted_output;\n  \nloop_start:\n  if ((DAT_00108360 != 'S') || ((long)data < 0x80)) {\n    if (DAT_00108373 == '\\0') goto print_output;\n    if ((flags & 0x40) == 0) {\n      process_input_data();\n      return;\n    }\n  }\nskip_processing:\n  index1 = (ulong)counter;\n  counter = counter + 1;\n  index2 = (ulong)counter;\n  is_less_than = counter < DAT_00108374;\n  buffer[index1] = (char)data;\n  if (is_less_than) goto check_data;\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",input_string);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[index2] = '\\0';\n      fputs(buffer,stdout);\n    }\n    else {\n      print_formatted_value(formatted_value);\n      buffer[index2] = '\\0';\n      write_to_stdout(buffer,stdout);\n    }\n    while (index2 = read_and_convert(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\ncheck_data_failed:\n        update_data_and_pointer();\n        break;\n      }\n      if (index2 == 9) {\nput_tab:\n        putc((int)index2,stdout);\n      }\n      else {\n        if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n          goto check_data_failed;\n          goto put_tab;\n        }\n        putc((int)index2,stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,stdout);\n    }\n    else {\n      write_to_stdout(DAT_00108358,stdout);\n    }\n    while (index2 = (ulong)DAT_00108374, formatted_value = formatted_output, DAT_00108374 != 0) {\n      index2 = read_and_convert();\n      temp_var1 = DAT_00108374;\n      if (index2 == 0xffffffffffffffff) goto cleanup_and_return;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nput_char:\n          *buffer = (char)index2;\n          if (temp_var1 < 2) {\n            print_formatted_output();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto print_output;\n            goto put_char;\n          }\n          *buffer = (char)index2;\n          if (temp_var1 < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = read_and_convert();\n        temp_var1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto cleanup_and_return;\n        if (0xff < index2) goto print_output;\n        if (index2 == 9) {\ncheck_next_data2:\n          buffer[1] = (char)index2;\n          if (temp_var1 < 3) {\n            print_formatted_input();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto print_output;\n            goto check_next_data2;\n          }\n          buffer[1] = (char)index2;\n          if (temp_var1 < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = read_and_convert();\n        temp_var1 = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto cleanup_and_return;\n        if (0xff < index2) goto print_output;\n        if (index2 == 9) {\ncheck_next_data3:\n          buffer[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&character_table + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index2 * 2) & 0x40) == 0))))\n            goto print_output;\n            goto check_next_data3;\n          }\n          buffer[2] = (char)index2;\n        }\n        if (temp_var1 < 4) {\n          index2 = 3;\n          break;\n        }\n        counter = 3;\ncheck_data:\n        data = read_and_convert();\n        if (data == 0xffffffffffffffff) {\ncleanup_and_return:\n          free_buffer(buffer);\n          return;\n        }\n        if (data < 0x100) {\n          if ((data == 9) ||\n             (flags = *(ushort *)(&character_table + data * 2), (flags & 0x10) != 0))\n          goto skip_processing;\n          goto loop_start;\n        }\n      }\nprint_output:\n      update_data_and_pointer();\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_and_print_data_00102330",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102330": "process_and_print_data_00102330",
                "LAB_00102381": "check_next_data3",
                "LAB_001023bb": "check_next_data2",
                "LAB_001023f5": "put_char",
                "LAB_00102438": "put_tab",
                "LAB_001033b3": "check_data",
                "LAB_00103400": "skip_processing",
                "LAB_0010348e": "check_data_failed",
                "LAB_001034be": "cleanup_and_return",
                "_sch_istable": "character_table",
                "_stdout": "stdout",
                "bVar4": "is_less_than",
                "code_r0x00102330": "loop_start",
                "code_r0x001034d5": "print_output",
                "fputs": "write_to_stdout",
                "free": "free_buffer",
                "in_AX": "flags",
                "in_R8D": "counter",
                "in_stack_00000010": "input_string",
                "in_stack_00000038": "formatted_output",
                "param_1": "data",
                "print_formatted_input_00103510": "print_formatted_input",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print_formatted_data",
                "process_input_data_001034d5": "process_input_data",
                "put": "write_to_stdout",
                "putc": "print_character",
                "read_data_and_convert_to_unsigned_long_00103520": "read_and_convert",
                "uVar1": "temp_var1",
                "uVar2": "index1",
                "uVar3": "index2",
                "unaff_R14": "buffer",
                "unaff_R15": "formatted_value",
                "update_data_and_pointer_00103810": "update_data_and_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010259a": {
            "additional_data": {
                "DAT_00108358": {
                    "end_of_line": 2,
                    "flag_00108358": 1,
                    "newline_string": 1,
                    "output_string_pointer": 1
                },
                "DAT_00108360": {
                    "character_type": 1,
                    "data_format": 1,
                    "flag_00108360": 1,
                    "mode": 1,
                    "special_character_flag": 1
                },
                "DAT_00108372": {
                    "flag_00108372": 1,
                    "formatted_output": 1,
                    "is_formatted": 1,
                    "is_formatted_output": 1,
                    "use_formatted_output": 1
                },
                "DAT_00108373": {
                    "extended_character_flag": 1,
                    "flag_00108373": 1,
                    "is_formatted_input": 1,
                    "is_printable": 1,
                    "use_output_table": 1
                },
                "DAT_00108374": {
                    "buffer_length": 1,
                    "flag_00108374": 1,
                    "formatted_input_length": 1,
                    "input_length_2": 1,
                    "remaining_data": 1
                },
                "FUN_0010259a": {
                    "print_and_process_data": 3,
                    "print_data": 4,
                    "print_data_from_binary": 1,
                    "print_formatted_data": 7,
                    "print_formatted_input_and_output": 1,
                    "print_formatted_output": 13,
                    "print_formatted_value_and_input": 1,
                    "print_input_data": 1
                },
                "LAB_00102381": {
                    "is_tab_2": 1,
                    "label_00102381": 1
                },
                "LAB_001023bb": {
                    "is_tab_1": 1,
                    "label_001023bb": 1
                },
                "LAB_001023f5": {
                    "is_tab": 1,
                    "label_001023f5": 1
                },
                "LAB_00102438": {
                    "print_tab": 1
                },
                "LAB_0010348e": {
                    "check_value_and_update": 1
                },
                "LAB_001034be": {
                    "end_of_function": 1
                },
                "PRINTF": {
                    "printf": 1
                },
                "_sch_istable": {
                    "char_table": 1,
                    "character_table": 5
                },
                "_stdout": {
                    "standard_output": 7
                },
                "bVar3": {
                    "break_condition": 1,
                    "condition_flag": 1,
                    "end_of_data": 1,
                    "end_of_output": 2,
                    "end_of_output_buffer": 1,
                    "flag": 3,
                    "is_end": 2,
                    "is_end_of_data": 2,
                    "is_end_of_file": 3,
                    "is_end_of_formatted_data": 1,
                    "is_end_of_input": 1,
                    "is_end_of_loop": 1,
                    "is_end_of_output": 3,
                    "is_end_of_string": 3,
                    "is_input_valid": 1,
                    "is_special": 1,
                    "is_special_char": 2,
                    "is_table": 1,
                    "is_table_entry": 1
                },
                "bool": {
                    "boolean": 1
                },
                "code_r0x001034d5": {
                    "check_data": 1,
                    "label_001034d5": 1
                },
                "fputs": {
                    "print_string": 1,
                    "write_string": 2
                },
                "free": {
                    "deallocate": 1,
                    "free_memory": 2
                },
                "in_R8": {
                    "char_index": 1,
                    "character_count": 1,
                    "current_index": 3,
                    "current_input_char": 1,
                    "current_position": 1,
                    "data_pointer": 1,
                    "index": 6,
                    "input_char_pos": 1,
                    "input_data_length": 1,
                    "input_index": 1,
                    "input_size": 1,
                    "iteration_count": 1,
                    "length": 1,
                    "loop_index": 1,
                    "output_char_index": 1,
                    "remaining_data_len": 1,
                    "temp_unsigned_long": 1,
                    "while_index": 1
                },
                "joined_r0x0010341b": {
                    "end_of_loop": 1,
                    "joined_loop": 1
                },
                "mode": {
                    "mode": 1
                },
                "param_11": {
                    "additional_format_string": 1,
                    "continue_format": 1,
                    "delimiter": 1,
                    "extra_format_str": 1,
                    "footer": 2,
                    "format": 1,
                    "format_option": 1,
                    "format_string": 2,
                    "format_string_end": 1,
                    "formatted_output": 1,
                    "input_format": 2,
                    "input_specifier": 1,
                    "input_string": 2,
                    "next_format": 1,
                    "next_format_string": 1,
                    "next_output_format": 1,
                    "output_data": 1,
                    "output_delimiter": 1,
                    "output_format": 2,
                    "output_string": 4,
                    "output_tag": 1,
                    "print_input_format": 1,
                    "sub_format_string": 1
                },
                "param_7": {
                    "char_index": 1,
                    "current_char_index": 1,
                    "current_data": 1,
                    "current_index": 3,
                    "data_index": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "data_value": 1,
                    "formatted_data_length": 1,
                    "formatted_string_length": 1,
                    "index": 2,
                    "input_char1_pos": 1,
                    "input_data": 1,
                    "input_data_index": 1,
                    "input_data_len": 1,
                    "input_index": 1,
                    "input_length": 3,
                    "input_value": 1,
                    "int_value": 1,
                    "length": 1,
                    "num_chars": 1,
                    "output_length": 1,
                    "output_size": 1,
                    "param_value": 1
                },
                "param_8": {
                    "filename": 1,
                    "format": 1,
                    "format_parameter": 1,
                    "format_specifier": 1,
                    "format_string": 12,
                    "header": 2,
                    "input_data": 1,
                    "input_string": 3,
                    "output_format": 1,
                    "output_header": 1,
                    "output_label": 1,
                    "param_string": 1,
                    "prompt": 4,
                    "tag": 1
                },
                "print_formatted_input_00103510": {
                    "print_formatted_input": 3,
                    "print_input": 1
                },
                "print_formatted_output_001034fa": {
                    "print_formatted_output": 3,
                    "print_formatted_output_2": 1,
                    "print_output": 1
                },
                "print_formatted_value_0010286f": {
                    "print_formatted_value": 5
                },
                "process_input_data_001034d5": {
                    "process_input_data": 4,
                    "process_input_data_2": 1
                },
                "put_character": {
                    "putc": 1
                },
                "putc": {
                    "print_char": 1,
                    "print_character": 1,
                    "put_character": 2,
                    "write_character": 1
                },
                "read_data_and_convert_to_unsigned_long_00103520": {
                    "read_and_convert_data": 2,
                    "read_and_convert_data_to_ulong": 1,
                    "read_converted_input_2": 1,
                    "read_data_and_convert_to_unsigned_long": 2
                },
                "uVar1": {
                    "byte_value": 1,
                    "converted_value": 1,
                    "data_counter": 1,
                    "data_value": 1,
                    "formatted_data": 1,
                    "input_char_count": 1,
                    "input_char_index": 1,
                    "input_data_index": 1,
                    "input_length": 1,
                    "input_value": 1,
                    "num_formats": 1,
                    "output_data_len": 1,
                    "temp1": 2,
                    "temp_value": 1,
                    "temp_var1": 1,
                    "unsigned_var1": 1,
                    "value": 2,
                    "while_value": 1
                },
                "uVar2": {
                    "current_char": 1,
                    "data": 3,
                    "data_value": 3,
                    "input_char": 2,
                    "input_character": 1,
                    "input_data_value": 1,
                    "read_value": 5,
                    "temp2": 2,
                    "temp_var2": 1,
                    "unsigned_var2": 1
                },
                "uint": {
                    "unsigned_integer": 1
                },
                "ulong": {
                    "unsigned_long": 1
                },
                "unaff_R14": {
                    "buffer": 3,
                    "current_data": 1,
                    "formatted_output": 2,
                    "formatted_string": 1,
                    "output_buffer": 13,
                    "output_str": 1,
                    "output_string": 10
                },
                "unaff_R15": {
                    "additional_format_string": 1,
                    "additional_format_string2": 1,
                    "current_format_string": 1,
                    "format_specifier": 1,
                    "format_str": 1,
                    "format_string": 3,
                    "format_value": 1,
                    "formatted_input": 2,
                    "formatted_output": 6,
                    "formatted_string": 2,
                    "formatted_value": 3,
                    "message": 1,
                    "next_buffer": 1,
                    "output_flag": 1,
                    "output_format": 4,
                    "output_format_arg": 1,
                    "print_format": 1
                },
                "undefined8": {
                    "eight_byte_value": 1
                },
                "update_data_and_pointer_00103810": {
                    "update_data_and_pointer": 5,
                    "update_output_pointer": 1
                }
            },
            "called": [
                "fputs",
                "free",
                "FUN_00103520",
                "FUN_00103510",
                "printf",
                "FUN_001034d5",
                "FUN_0010259a",
                "FUN_001034fa",
                "putc",
                "FUN_0010286f",
                "FUN_00103810",
                "FUN_00102330"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_input_and_output_0010259a(void)\n\n{\n  unsigned_integer temp1;\n  unsigned_long read_value;\n  unsigned_long index;\n  char *output_buffer;\n  eight_byte_value formatted_output;\n  boolean flag;\n  unsigned_integer input_length;\n  eight_byte_value format_string;\n  eight_byte_value output_string;\n  \n  do {\n    input_length = (unsigned_integer)index;\n    printf(\"%s: \",format_string);\n    index = (unsigned_long)input_length;\n    do {\n      if (DAT_00108372 == '\\0') {\n        output_buffer[index] = '\\0';\n        fputs(output_buffer,standard_output);\n      }\n      else {\n        input_length = (unsigned_integer)index;\n        print_formatted_value(formatted_output);\n        output_buffer[input_length] = '\\0';\n        fputs(output_buffer,standard_output);\n      }\n      while (read_value = read_and_convert_data(), read_value != 0xffffffffffffffff) {\n        if (0xff < read_value) {\ncheck_value_and_update:\n          update_data_and_pointer();\n          break;\n        }\n        if (read_value == 9) {\nprint_tab:\n          putc((int)read_value,standard_output);\n        }\n        else {\n          if ((*(ushort *)(&character_table + read_value * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)read_value < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + read_value * 2) & 0x40) == 0))))\n            goto check_value_and_update;\n            goto print_tab;\n          }\n          putc((int)read_value,standard_output);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        putc(10,standard_output);\n      }\n      else {\n        fputs(DAT_00108358,standard_output);\n      }\n      while (index = (unsigned_long)DAT_00108374, DAT_00108374 != 0) {\n        read_value = read_and_convert_data();\n        temp1 = DAT_00108374;\n        if (read_value == 0xffffffffffffffff) goto end_of_function;\n        if (read_value < 0x100) {\n          if (read_value == 9) {\nlabel_001023f5:\n            *output_buffer = (char)read_value;\n            if (temp1 < 2) {\n              print_formatted_output();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + read_value * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)read_value < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + read_value * 2) & 0x40) == 0))))\n              goto check_data;\n              goto label_001023f5;\n            }\n            *output_buffer = (char)read_value;\n            if (temp1 < 2) {\n              index = 1;\n              break;\n            }\n          }\n          read_value = read_and_convert_data();\n          temp1 = DAT_00108374;\n          if (read_value == 0xffffffffffffffff) goto end_of_function;\n          if (0xff < read_value) goto check_data;\n          if (read_value == 9) {\nlabel_001023bb:\n            output_buffer[1] = (char)read_value;\n            if (temp1 < 3) {\n              print_formatted_input();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&character_table + read_value * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)read_value < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + read_value * 2) & 0x40) == 0))))\n              goto check_data;\n              goto label_001023bb;\n            }\n            output_buffer[1] = (char)read_value;\n            if (temp1 < 3) {\n              index = 2;\n              break;\n            }\n          }\n          read_value = read_and_convert_data();\n          temp1 = DAT_00108374;\n          if (read_value == 0xffffffffffffffff) {\nend_of_function:\n            free_memory(output_buffer);\n            return;\n          }\n          if (0xff < read_value) goto check_data;\n          if (read_value == 9) {\nlabel_00102381:\n            output_buffer[2] = (char)read_value;\n          }\n          else {\n            if ((*(ushort *)(&character_table + read_value * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)read_value < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + read_value * 2) & 0x40) == 0))))\n              goto check_data;\n              goto label_00102381;\n            }\n            output_buffer[2] = (char)read_value;\n          }\n          if (3 < temp1) {\n            index = 3;\n            do {\n              input_length = (unsigned_integer)index;\n              read_value = read_and_convert_data();\n              if (read_value == 0xffffffffffffffff) goto end_of_function;\n              if (0xff < read_value) goto check_data;\n              if (((read_value != 9) && ((*(ushort *)(&character_table + read_value * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)read_value < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto check_data;\n                if ((*(ushort *)(&character_table + read_value * 2) & 0x40) == 0) {\n                  process_input_data();\n                  return;\n                }\n              }\n              index = (unsigned_long)(input_length + 1);\n              flag = DAT_00108374 <= input_length + 1;\n              output_buffer[input_length] = (char)read_value;\n              if (flag) goto joined_loop;\n            } while( true );\n          }\n          index = 3;\n          break;\n        }\ncheck_data:\n        update_data_and_pointer();\n      }\njoined_loop:\n      formatted_output = output_string;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_input_and_output_0010259a",
            "entrypoint": "0x0010259a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010259a": "print_formatted_input_and_output_0010259a",
                "LAB_00102381": "label_00102381",
                "LAB_001023bb": "label_001023bb",
                "LAB_001023f5": "label_001023f5",
                "LAB_00102438": "print_tab",
                "LAB_0010348e": "check_value_and_update",
                "LAB_001034be": "end_of_function",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar3": "flag",
                "bool": "boolean",
                "code_r0x001034d5": "check_data",
                "fputs": "write_string",
                "free": "free_memory",
                "in_R8": "index",
                "joined_r0x0010341b": "joined_loop",
                "param_11": "output_string",
                "param_7": "input_length",
                "param_8": "format_string",
                "print_formatted_input_00103510": "print_formatted_input",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_value_0010286f": "print_formatted_value",
                "process_input_data_001034d5": "process_input_data",
                "putc": "put_character",
                "read_data_and_convert_to_unsigned_long_00103520": "read_and_convert_data",
                "uVar1": "temp1",
                "uVar2": "read_value",
                "uint": "unsigned_integer",
                "ulong": "unsigned_long",
                "unaff_R14": "output_buffer",
                "unaff_R15": "formatted_output",
                "undefined8": "eight_byte_value",
                "update_data_and_pointer_00103810": "update_data_and_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102771": {
            "additional_data": {
                "0x18": {
                    "shift_amount": 1
                },
                "0xff": {
                    "bit_mask": 1
                },
                "FUN_00102771": {
                    "byte_swapping": 1,
                    "extract_byte_order": 1,
                    "extract_byte_sequence": 1,
                    "rearrange_bits": 2,
                    "reverse_bits": 15,
                    "reverse_byte_order": 9,
                    "reverse_bytes": 1,
                    "swap_bytes": 1
                },
                "unaff_RAX": {
                    "output": 1
                },
                "unaff_RBX": {
                    "input": 14,
                    "input_number": 2,
                    "input_value": 11,
                    "original_value": 1,
                    "output": 1,
                    "rbx": 1,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00103520"
            ],
            "code": "\nulong reverse_bits_00102771(void)\n\n{\n  ulong input;\n  \n  return input >> 0x18 & 0xff |\n         (input & 0xff) << 0x18 | (ulong)((uint)(input << 8) & 0xff0000) |\n         (ulong)((uint)(input >> 8) & 0xff00);\n}\n\n",
            "current_name": "reverse_bits_00102771",
            "entrypoint": "0x00102771",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102771": "reverse_bits_00102771",
                "unaff_RBX": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001027e2": {
            "additional_data": {
                "1": {
                    "one": 2
                },
                "FUN_001027e2": {
                    "add_and_increment": 1,
                    "add_params_and_update_pointer": 1,
                    "addition_with_offset": 1,
                    "calculate_and_update": 2,
                    "calculate_and_update_values": 1,
                    "calculate_sum": 5,
                    "calculate_sum_and_increment": 3,
                    "calculate_sum_and_update": 6,
                    "calculate_sum_and_update_result": 2,
                    "calculate_sum_and_update_value": 2,
                    "update_and_add": 1,
                    "update_and_sum": 1,
                    "update_parameters": 1,
                    "update_params": 1,
                    "update_params_and_calc_sum": 1,
                    "update_params_and_calculate_sum": 1,
                    "update_values": 1
                },
                "in_RAX": {
                    "accumulator": 1,
                    "address": 2,
                    "in_pointer": 1,
                    "in_register": 1,
                    "pointer": 3,
                    "ptr_value": 1,
                    "result": 1,
                    "result_ptr": 1,
                    "sum": 2,
                    "sum_pointer": 4,
                    "sum_ptr": 3,
                    "sum_ptr_value": 1,
                    "temp": 4,
                    "temp_pointer": 2,
                    "temp_ptr": 3,
                    "temp_variable": 1
                },
                "param_1": {
                    "addend_1": 2,
                    "first_number": 3,
                    "first_operand": 2,
                    "first_param": 1,
                    "input1": 3,
                    "input_1": 2,
                    "num1": 11,
                    "num_1": 1,
                    "operand1": 1,
                    "summand_1": 1,
                    "value1": 2,
                    "value_1": 2
                },
                "param_2": {
                    "addend_2": 2,
                    "input2": 3,
                    "input_2": 2,
                    "num2": 11,
                    "num_2": 1,
                    "operand2": 1,
                    "second_number": 3,
                    "second_operand": 2,
                    "second_param": 1,
                    "summand_2": 1,
                    "value2": 2,
                    "value_2": 2
                },
                "param_3": {
                    "condition": 2,
                    "constant": 1,
                    "decrement_value": 1,
                    "difference": 1,
                    "flag": 4,
                    "increment": 2,
                    "is_negative": 1,
                    "modifier": 10,
                    "multiplier": 1,
                    "negation_value": 1,
                    "numeric_value": 1,
                    "offset": 1,
                    "sub_value": 1,
                    "subtract_value": 1,
                    "subtraction_factor": 1,
                    "update_val": 1,
                    "value_to_subtract": 1
                },
                "param_4": {
                    "accumulator": 1,
                    "output": 2,
                    "result": 18,
                    "result_pointer": 4,
                    "result_ptr": 4,
                    "sum_ptr": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid calculate_sum_and_update_result_001027e2(int num1,int num2,long modifier,long *result)\n\n{\n  int *temp;\n  \n  *result = *result + (1 - modifier);\n  *temp = num1 + num2;\n  return;\n}\n\n",
            "current_name": "calculate_sum_and_update_result_001027e2",
            "entrypoint": "0x001027e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001027e2": "calculate_sum_and_update_result_001027e2",
                "in_RAX": "temp",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "modifier",
                "param_4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010282b": {
            "additional_data": {
                "DAT_00108348": {
                    "byte1": 1,
                    "first_byte": 2,
                    "high_byte": 2,
                    "memory_value_1": 1,
                    "output_data_1": 1,
                    "shifted_value1": 1,
                    "value1": 1
                },
                "DAT_00108349": {
                    "byte2": 1,
                    "memory_value_3": 1,
                    "output_data_3": 1,
                    "second_byte": 2,
                    "second_highest_byte": 1,
                    "shifted_value3": 1,
                    "third_byte": 1,
                    "value3": 1
                },
                "DAT_0010834a": {
                    "byte3": 1,
                    "highest_byte": 1,
                    "memory_value_2": 1,
                    "output_data_2": 1,
                    "second_byte": 1,
                    "shifted_value2": 1,
                    "third_byte": 2,
                    "value2": 1
                },
                "FUN_0010282b": {
                    "convert_rb_xto_dat": 1,
                    "initialize_data": 16,
                    "initialize_memory": 2,
                    "initialize_pointer_and_data": 1,
                    "initialize_pointer_values": 1,
                    "initialize_variables": 1,
                    "set_byte_and_pointer": 1,
                    "set_byte_array": 1,
                    "set_constants_and_pointers": 1,
                    "set_pointer_values": 1,
                    "set_rgb_values": 1,
                    "update_pointer_and_store_value": 1,
                    "update_register_values": 1,
                    "update_registers": 1,
                    "update_values": 1
                },
                "dataPointer": {
                    "data_pointer": 1
                },
                "destination": {
                    "data_pointer": 1
                },
                "in_RAX": {
                    "data_pointer": 5,
                    "data_ptr": 2,
                    "destination": 3,
                    "output_pointer": 6,
                    "output_ptr": 1,
                    "pointer": 2,
                    "pointer_to_number": 1,
                    "pointer_to_value": 2,
                    "register_ptr": 1,
                    "result_pointer": 5,
                    "return_code_pointer": 1,
                    "target_pointer": 1,
                    "value_pointer": 1
                },
                "in_RCX": {
                    "address_pointer": 2,
                    "buffer_pointer": 1,
                    "data_pointer": 14,
                    "destination": 1,
                    "destination_pointer": 2,
                    "memory_ptr": 1,
                    "output_ptr": 1,
                    "pointer_ptr": 1,
                    "pointer_to_data": 2,
                    "pointer_to_memory": 1,
                    "pointer_to_pointer": 1,
                    "result_ptr": 1,
                    "source": 3
                },
                "inputData": {
                    "input": 1
                },
                "outputPointer": {
                    "output_pointer": 1
                },
                "source": {
                    "pointer_to_data": 1
                },
                "unaff_RBX": {
                    "color_value": 1,
                    "data": 1,
                    "input_data": 3,
                    "input_value": 12,
                    "register_value": 5,
                    "source_data": 1,
                    "source_value": 1,
                    "value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00103810"
            ],
            "code": "\nvoid initialize_pointer_and_data_0010282b(void)\n\n{\n  undefined4 *output_pointer;\n  undefined8 *data_pointer;\n  undefined8 input_value;\n  \n  DAT_00108348 = (undefined)((ulong)input_value >> 8);\n  DAT_0010834a = (undefined)((ulong)input_value >> 0x18);\n  DAT_00108349 = (undefined)((ulong)input_value >> 0x10);\n  *output_pointer = 3;\n  *data_pointer = &DAT_00108348;\n  return;\n}\n\n",
            "current_name": "initialize_pointer_and_data_0010282b",
            "entrypoint": "0x0010282b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010282b": "initialize_pointer_and_data_0010282b",
                "in_RAX": "output_pointer",
                "in_RCX": "data_pointer",
                "unaff_RBX": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102853": {
            "additional_data": {
                "DAT_00108372": {
                    "flag": 1,
                    "is_formatting_enabled": 1
                },
                "FUN_00102853": {
                    "print_and_check_status": 1,
                    "print_and_format_value": 1,
                    "print_formatted_message": 2,
                    "print_formatted_string": 1,
                    "print_formatted_value_if_flag_set": 2,
                    "print_formatted_value_if_set": 1,
                    "print_formatted_value_with_message": 1,
                    "print_if_data_available": 1,
                    "print_if_data_exists": 1,
                    "print_if_data_valid": 1,
                    "print_if_flag_set": 1,
                    "print_if_formatted_value_exists": 1,
                    "print_if_not_disabled": 1,
                    "print_if_not_null": 1,
                    "print_if_not_null_value": 1,
                    "print_if_required": 1,
                    "print_if_value_not_empty": 1,
                    "print_message": 7,
                    "print_message_and_check_flag": 1,
                    "print_message_or_exit": 1,
                    "print_message_with_prefix": 1,
                    "print_prompt_and_value": 1,
                    "print_result_or_skip": 1
                },
                "param_1": {
                    "formatted_value": 1,
                    "input_string": 1,
                    "message": 24,
                    "new_message": 1,
                    "print_message": 1,
                    "prompt": 1,
                    "string_to_print": 1,
                    "value": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                },
                "print_formatted_value_0010286f": {
                    "print_formatted_value": 17,
                    "print_value": 2
                },
                "printf": {
                    "print": 1
                }
            },
            "called": [
                "printf",
                "FUN_0010286f"
            ],
            "calling": [
                "FUN_00103890"
            ],
            "code": "\nvoid print_formatted_value_with_message_00102853(undefined8 message)\n\n{\n  printf(\"%s: \",message);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  printf_formatted_value();\n  return;\n}\n\n",
            "current_name": "print_formatted_value_with_message_00102853",
            "entrypoint": "0x00102853",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102853": "print_formatted_value_with_message_00102853",
                "param_1": "message",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010286f": {
            "additional_data": {
                "0o10": {
                    "8": 1
                },
                "0x10": {
                    "16": 1,
                    "hex_format": 2,
                    "hexadecimal": 1
                },
                "10": {
                    "10": 1,
                    "decimal": 1,
                    "decimal_format": 2
                },
                "8": {
                    "8": 1,
                    "octal": 1,
                    "octal_format": 2
                },
                "DAT_00108354": {
                    "format": 1,
                    "format_code": 1,
                    "format_specifier": 2,
                    "format_type": 6,
                    "output_format": 1
                },
                "FUN_0010286f": {
                    "print_formatted_number": 8,
                    "print_formatted_output": 2,
                    "print_formatted_value": 19,
                    "print_number": 1,
                    "print_number_with_prefix": 1
                },
                "lo": {
                    "octal": 1
                },
                "lx": {
                    "hexadecimal": 1
                },
                "param_1": {
                    "number": 10,
                    "value": 21
                },
                "printf": {
                    "display_formatted_value": 1,
                    "formatted_output": 1,
                    "formatted_print": 2,
                    "output_formatted_number": 1,
                    "output_formatted_string": 1,
                    "print": 17,
                    "print_formatted": 2,
                    "print_formatted_number": 1,
                    "print_formatted_output": 3,
                    "print_formatted_string": 1,
                    "printf": 1
                },
                "printf_format1": {
                    "decimal_format": 1
                },
                "printf_format2": {
                    "octal_format": 1
                },
                "printf_format3": {
                    "hexadecimal_format": 1
                },
                "printf_format_1": {
                    "decimal_format": 1
                },
                "printf_format_2": {
                    "octal_format": 1
                },
                "printf_format_3": {
                    "hexadecimal_format": 1
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00102853",
                "FUN_0010259a"
            ],
            "code": "\nvoid print_formatted_value_0010286f(undefined8 value)\n\n{\n  if (DAT_00108354 == 10) {\n    printf(\"%7ld \",value);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      printf(\"%7octal \",value);\n      return;\n    }\n    return;\n  }\n  printf(\"%7hexadecimal \",value);\n  return;\n}\n\n",
            "current_name": "print_formatted_value_0010286f",
            "entrypoint": "0x0010286f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010286f": "print_formatted_value_0010286f",
                "lo": "octal",
                "lx": "hexadecimal",
                "param_1": "value",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028b2": {
            "additional_data": {
                "FUN_001028b2": {
                    "check_byte_sequence": 7,
                    "check_first_byte": 1,
                    "check_leading_byte": 1,
                    "check_utf8_encoding": 1,
                    "decode": 1,
                    "decode_byte_sequence": 2,
                    "decode_data_length": 1,
                    "decode_header": 2,
                    "decode_length": 2,
                    "decode_parameter": 1,
                    "decode_sequence_length": 2,
                    "decode_unicode_sequence": 1,
                    "decode_utf8_character": 1,
                    "extract_byte_sequence_length": 1,
                    "extracted_data_length": 1,
                    "get_encoding_length": 1,
                    "parse_byte_sequence": 3,
                    "parse_first_byte": 1,
                    "parse_utf8_character": 1
                },
                "bVar1": {
                    "byte_value": 3,
                    "current_byte": 2,
                    "first_byte": 24,
                    "leading_byte": 1
                },
                "lVar2": {
                    "decoded_length": 3,
                    "extracted_length": 1,
                    "length": 2,
                    "offset": 1,
                    "result": 23
                },
                "param_1": {
                    "byte_array": 2,
                    "byte_sequence": 15,
                    "data": 7,
                    "header_data": 2,
                    "input": 1,
                    "input_buffer": 1,
                    "input_bytes": 1,
                    "sequence": 2
                },
                "param_2": {
                    "array_size": 1,
                    "buffer_length": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "header_length": 1,
                    "header_size": 1,
                    "input_length": 1,
                    "length": 7,
                    "sequence_length": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_00103240"
            ],
            "code": "\nlong check_byte_sequence_001028b2(byte *byte_sequence,long sequence_length)\n\n{\n  byte first_byte;\n  long result;\n  \n  first_byte = *byte_sequence;\n  if ((0xbf < first_byte) && (sequence_length != 1)) {\n    result = 0;\n    if ((byte_sequence[1] & 0xc0) == 0x80) {\n      if ((first_byte & 0x20) == 0) {\n        return 2;\n      }\n      if ((sequence_length != 2) && ((byte_sequence[2] & 0xc0) == 0x80)) {\n        if ((first_byte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (sequence_length != 3) {\n            return (ulong)((byte_sequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_byte_sequence_001028b2",
            "entrypoint": "0x001028b2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028b2": "check_byte_sequence_001028b2",
                "bVar1": "first_byte",
                "lVar2": "result",
                "param_1": "byte_sequence",
                "param_2": "sequence_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010290e": {
            "additional_data": {
                "FUN_0010290e": {
                    "extract_next_byte": 1,
                    "get_byte": 1,
                    "get_byte_from_file": 1,
                    "get_char_from_file": 1,
                    "read_byte": 2,
                    "read_byte_from_buffer": 1,
                    "read_byte_from_file": 14,
                    "read_byte_from_stream": 3,
                    "read_next_byte": 4
                },
                "_IO_FILE": {
                    "file": 2,
                    "file_stream": 1
                },
                "__uflow": {
                    "flow_happened": 1
                },
                "param_1": {
                    "file": 20,
                    "file_pointer": 2,
                    "file_ptr": 2,
                    "file_stream": 2,
                    "stream": 4
                },
                "param_2": {
                    "file_offset": 2,
                    "file_position": 4,
                    "offset": 3,
                    "position": 22
                },
                "param_3": {
                    "bytes_remaining": 1,
                    "count_ptr": 1,
                    "num_chars": 1,
                    "remaining": 1,
                    "remaining_bytes": 27
                },
                "param_4": {
                    "byte_count": 1,
                    "bytes_read": 5,
                    "count": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_count": 2,
                    "error_counter": 1,
                    "error_flag": 2,
                    "error_ptr": 1,
                    "error_status": 2,
                    "num_bytes_read": 2,
                    "num_errors": 1,
                    "num_reads": 1,
                    "read_bytes_count": 1,
                    "read_characters": 1,
                    "read_count": 6,
                    "read_error": 1,
                    "read_error_counter": 1
                },
                "pbVar1": {
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "byte_pointer": 11,
                    "byte_ptr": 6,
                    "current_byte": 2,
                    "ptr_byte": 1,
                    "read_buffer": 1,
                    "read_byte": 3,
                    "read_ptr": 2
                },
                "uVar2": {
                    "byte_value": 4,
                    "result": 23,
                    "return_value": 1,
                    "temp": 2
                }
            },
            "called": [
                "__uflow"
            ],
            "calling": [
                "FUN_00102b11"
            ],
            "code": "\nuint read_byte_from_file_0010290e(file *file,long position,uint *remaining_bytes,int *read_count)\n\n{\n  byte *byte_pointer;\n  uint result;\n  \n  if (*remaining_bytes != 0) {\n    result = *remaining_bytes - 1;\n    *remaining_bytes = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *read_count = *read_count + 1;\n  byte_pointer = (byte *)file->_IO_read_ptr;\n  if (file->_IO_read_end <= byte_pointer) {\n    result = __uflow(file);\n    return result;\n  }\n  file->_IO_read_ptr = (char *)(byte_pointer + 1);\n  return (uint)*byte_pointer;\n}\n\n",
            "current_name": "read_byte_from_file_0010290e",
            "entrypoint": "0x0010290e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010290e": "read_byte_from_file_0010290e",
                "_IO_FILE": "file",
                "__uflow": "flow_happened",
                "param_1": "file",
                "param_2": "position",
                "param_3": "remaining_bytes",
                "param_4": "read_count",
                "pbVar1": "byte_pointer",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010293a": {
            "additional_data": {
                "DAT_00108350": {
                    "display_type": 1,
                    "unicode_display_type": 2
                },
                "FUN_0010293a": {
                    "decode_and_display_unicode": 2,
                    "display_unicode": 17,
                    "display_unicode_character": 4,
                    "display_unicode_characters": 1,
                    "display_unicode_string": 2,
                    "print_unicode": 3,
                    "print_unicode_character": 1,
                    "print_unicode_value": 1
                },
                "_stderr": {
                    "standard_error": 4,
                    "stderr": 1
                },
                "_stdout": {
                    "standard_output": 4,
                    "stdout": 1
                },
                "bVar1": {
                    "byte_value": 2,
                    "character_flag": 2,
                    "character_mask": 1,
                    "first_byte": 5,
                    "first_char": 4,
                    "first_char_mask": 1,
                    "first_four_bits": 3,
                    "first_nibble": 2,
                    "first_two_bits": 7,
                    "flag": 2,
                    "type_flag": 1,
                    "unicode_char": 1
                },
                "iVar3": {
                    "is_terminal": 20,
                    "is_tty": 9,
                    "terminal_check": 1,
                    "terminal_status": 1
                },
                "param_1": {
                    "character_buffer": 1,
                    "data": 7,
                    "input": 7,
                    "input_buffer": 1,
                    "input_bytes": 1,
                    "input_data": 3,
                    "input_string": 7,
                    "string": 1,
                    "unicode_string": 1
                },
                "pbVar6": {
                    "current_byte": 1,
                    "current_char": 2,
                    "end": 1,
                    "end_address": 1,
                    "end_byte": 1,
                    "end_character": 1,
                    "end_data": 1,
                    "end_of_buffer": 1,
                    "end_of_input_buffer": 1,
                    "end_of_input_string": 1,
                    "end_of_string": 2,
                    "end_pointer": 5,
                    "end_ptr": 8,
                    "input_string_copy": 1,
                    "next_byte": 1,
                    "ptr": 1,
                    "string_end": 1,
                    "unicode_ptr": 1
                },
                "uVar2": {
                    "encoded_byte1": 1,
                    "first_byte": 1,
                    "first_char_code": 1,
                    "second_byte": 17,
                    "second_byte_value": 1,
                    "second_char": 6,
                    "second_character": 2,
                    "unicode_char1": 1,
                    "unicode_start": 1
                },
                "uVar4": {
                    "byte_count": 1,
                    "bytes_read": 1,
                    "display_length": 3,
                    "display_type": 4,
                    "length": 1,
                    "offset": 5,
                    "output_length": 3,
                    "output_size": 8,
                    "return_value": 1,
                    "size": 1,
                    "unicode_display_type": 1,
                    "unicode_length": 2
                },
                "uVar5": {
                    "encoded_byte0": 1,
                    "first_byte": 14,
                    "first_byte_copy": 1,
                    "first_byte_value": 1,
                    "first_char": 3,
                    "first_character": 2,
                    "second_byte": 1,
                    "second_char_code": 1,
                    "third_byte": 3,
                    "third_char": 2,
                    "unicode_char2": 1,
                    "unicode_end": 1
                }
            },
            "called": [
                "isatty",
                "fwrite",
                "printf",
                "putc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\n\n\nuint display_unicode_character_0010293a(byte *input)\n\n{\n  byte first_two_bits;\n  uint second_byte;\n  int is_terminal;\n  uint output_size;\n  uint first_byte;\n  byte *end_ptr;\n  \n  output_size = 2;\n  first_two_bits = *input & 0x30;\n  if ((first_two_bits != 0x10) && (output_size = 3, first_two_bits != 0x20)) {\n    output_size = (-(uint)(first_two_bits == 0) & 0xfffffffe) + 4;\n  }\n  if (DAT_00108350 == 3) {\n    end_ptr = input + output_size;\n    putc(0x3c,standard_output);\n    printf(\"0x\");\n    do {\n      first_two_bits = *input;\n      input = input + 1;\n      printf(\"%02x\",(ulong)first_two_bits);\n    } while (end_ptr != input);\n    putc(0x3e,standard_output);\n    return output_size;\n  }\n  if (DAT_00108350 < 4) {\n    if (DAT_00108350 == 1) {\n      printf(\"%.1s\",input);\n      return output_size;\n    }\n    if (DAT_00108350 == 2) {\nLAB_001029cd:\n      second_byte = (uint)input[1];\n      first_byte = (uint)*input;\n      if (output_size == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((first_byte & 0xf) << 4 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | input[2] & 0x3f));\n      }\n      else if (output_size == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((first_byte & 7) << 6 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | (int)(uint)input[2] >> 2 & 0xfU),\n               (ulong)((input[2] & 3) << 6 | input[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*input >> 2 & 7),\n               (ulong)((first_byte & 3) << 6 | input[1] & 0x3f));\n      }\n      if (DAT_00108350 != 4) {\n        return output_size;\n      }\n      is_terminal = isatty(1);\n      if (is_terminal == 0) {\n        return output_size;\n      }\n      printf(\"\\x1b[0m\");\n      return output_size;\n    }\n  }\n  else if (DAT_00108350 == 4) {\n    is_terminal = isatty(1);\n    if (is_terminal != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,standard_error);\n  return output_size;\n}\n\n",
            "current_name": "display_unicode_character_0010293a",
            "entrypoint": "0x0010293a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010293a": "display_unicode_character_0010293a",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar1": "first_two_bits",
                "iVar3": "is_terminal",
                "param_1": "input",
                "pbVar6": "end_ptr",
                "uVar2": "second_byte",
                "uVar4": "output_size",
                "uVar5": "first_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102b11": {
            "additional_data": {
                "FUN_00102b11": {
                    "decode_and_print": 3,
                    "decode_and_print_data": 1,
                    "decode_and_print_file": 1,
                    "decode_data": 2,
                    "decompress_data": 1,
                    "parse_and_print_tokens": 1,
                    "parse_data": 1,
                    "process_binary_data": 1,
                    "process_data": 13,
                    "process_file": 4,
                    "process_file_data": 1,
                    "reverse_and_print_text": 1
                },
                "iVar4": {
                    "byte3": 3,
                    "byte4": 2,
                    "index": 3,
                    "int1": 1,
                    "int_value": 1,
                    "read_byte_result": 1,
                    "read_result": 4,
                    "read_result2": 1,
                    "result": 5,
                    "return_val": 1,
                    "temp4": 1,
                    "temp_var": 2,
                    "temp_var4": 1,
                    "temp_var_4": 1
                },
                "local_39": {
                    "byte11": 3,
                    "byte4": 6,
                    "byte4_read": 1,
                    "byte9": 1,
                    "byte_4": 2,
                    "byte_d": 1,
                    "byte_f": 1,
                    "byte_val_6": 1,
                    "byte_value11": 1,
                    "byte_value8": 1,
                    "byte_value9": 1,
                    "current_byte_7": 1,
                    "fifth_byte": 1,
                    "forth_byte": 1,
                    "fourth_byte": 3,
                    "local_variable7": 1,
                    "temp17": 1,
                    "unicode_byte": 1,
                    "unicode_byte4": 1,
                    "utf_code4": 1
                },
                "local_3a": {
                    "byte10": 3,
                    "byte3": 6,
                    "byte3_read": 1,
                    "byte8": 1,
                    "byte_3": 2,
                    "byte_c": 1,
                    "byte_e": 1,
                    "byte_val_5": 1,
                    "byte_value10": 1,
                    "byte_value7": 1,
                    "byte_value8": 1,
                    "current_byte_6": 1,
                    "fourth_byte": 2,
                    "local_variable6": 1,
                    "temp16": 1,
                    "third_byte": 4,
                    "unicode_byte3": 1,
                    "utf_code3": 1
                },
                "local_3b": {
                    "byte2": 6,
                    "byte2_read": 1,
                    "byte7": 1,
                    "byte9": 3,
                    "byte_2": 2,
                    "byte_b": 1,
                    "byte_d": 1,
                    "byte_val_4": 1,
                    "byte_value6": 1,
                    "byte_value7": 1,
                    "byte_value9": 1,
                    "current_byte_5": 1,
                    "local_variable5": 1,
                    "second_byte": 4,
                    "temp15": 1,
                    "third_byte": 2,
                    "unicode_byte2": 1,
                    "utf_code2": 1
                },
                "local_3c": {
                    "byte1": 6,
                    "byte1_read": 1,
                    "byte6": 1,
                    "byte8": 3,
                    "byte_1": 2,
                    "byte_a": 1,
                    "byte_c": 1,
                    "byte_val_3": 1,
                    "byte_value5": 1,
                    "byte_value6": 1,
                    "byte_value8": 1,
                    "current_byte_4": 1,
                    "first_byte": 4,
                    "local_variable4": 1,
                    "second_byte": 2,
                    "temp14": 1,
                    "unicode_byte1": 1,
                    "utf_code1": 1
                },
                "local_40": {
                    "buffer_index": 1,
                    "buffer_index_temp": 1,
                    "byte_array_length": 1,
                    "byte_count": 2,
                    "bytes_read": 6,
                    "current_index": 1,
                    "file_offset": 2,
                    "file_pos": 1,
                    "file_size": 2,
                    "local_offset": 1,
                    "local_variable3": 1,
                    "read_buffer_size": 3,
                    "read_count": 2,
                    "read_index": 1,
                    "read_size": 2,
                    "temp13": 1,
                    "uint1": 1,
                    "uint_value2": 1
                },
                "local_4c": {
                    "buffer": 1,
                    "buffer_info": 1,
                    "byte_array": 1,
                    "file_data": 1,
                    "file_position": 1,
                    "file_ptr": 1,
                    "input_index": 1,
                    "local_array": 1,
                    "local_counter": 1,
                    "local_variable2": 1,
                    "read_buffer": 1,
                    "read_buffer_state": 1,
                    "read_bytes": 3,
                    "read_count": 1,
                    "read_index": 1,
                    "read_params": 2,
                    "read_result": 3,
                    "read_result_buffer": 2,
                    "read_size": 1,
                    "read_status": 1,
                    "status_arr": 1,
                    "temp12": 1,
                    "uint_array": 2
                },
                "local_80": {
                    "filename_offset": 1,
                    "first_decoded_index": 1,
                    "last_character_index": 1,
                    "last_decoded_index": 1,
                    "last_index": 4,
                    "last_newline_offset": 1,
                    "last_non_ascii_offset": 1,
                    "last_non_unicode_index": 1,
                    "last_offset": 3,
                    "last_output_index": 1,
                    "last_pos": 1,
                    "last_special_byte_offset": 1,
                    "last_token_index": 1,
                    "last_valid_offset": 1,
                    "local_variable1": 1,
                    "offset": 3,
                    "output_offset": 1,
                    "special_byte_offset": 1,
                    "start_offset": 2,
                    "temp11": 1,
                    "ulong2": 1,
                    "ulong_value2": 1
                },
                "param_1": {
                    "arg1": 7,
                    "argument1": 1,
                    "file": 2,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "input_buffer": 2,
                    "input_file": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_file": 2,
                    "output_stream": 5,
                    "param": 1,
                    "param1": 2,
                    "param_1": 2,
                    "parameter1": 1
                },
                "param_2": {
                    "arg2": 7,
                    "argument2": 1,
                    "base_address": 1,
                    "base_offset": 1,
                    "file_offset": 7,
                    "input_offset": 3,
                    "offset": 8,
                    "param2": 2,
                    "parameter2": 1
                },
                "param_3": {
                    "arg3": 7,
                    "argument3": 1,
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "byte_buffer": 1,
                    "file": 1,
                    "file_data": 1,
                    "file_ptr": 1,
                    "input_file": 7,
                    "input_stream": 5,
                    "param3": 2,
                    "parameter3": 1,
                    "read_file_ptr": 1,
                    "read_ptr": 1
                },
                "param_4": {
                    "arg4": 7,
                    "argument4": 1,
                    "buffer": 4,
                    "buffer_size": 3,
                    "file_buffer": 1,
                    "file_offset": 1,
                    "file_size": 5,
                    "input_file_offset": 1,
                    "input_file_size": 1,
                    "offset": 1,
                    "param4": 2,
                    "parameter4": 1,
                    "position": 1,
                    "read_offset": 2
                },
                "param_5": {
                    "arg5": 7,
                    "argument5": 1,
                    "block_size": 1,
                    "buffer_size": 9,
                    "bytes_read": 1,
                    "count": 1,
                    "length": 1,
                    "limit": 1,
                    "max_chars": 1,
                    "max_count": 1,
                    "max_iterations": 2,
                    "param5": 2,
                    "parameter5": 1,
                    "read_size": 2
                },
                "param_6": {
                    "arg6": 7,
                    "argument6": 1,
                    "decoded_data": 1,
                    "decoded_data_buffer": 1,
                    "output_buffer": 18,
                    "param6": 1,
                    "parameter6": 1,
                    "write_ptr": 1
                },
                "uVar1": {
                    "byte1": 8,
                    "byte_val": 2,
                    "byte_value": 9,
                    "byte_value1": 2,
                    "current_byte": 1,
                    "temp1": 1,
                    "temp_byte1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "value": 1
                },
                "uVar10": {
                    "byte7": 2,
                    "byte_val2": 1,
                    "byte_value": 3,
                    "byte_value4": 1,
                    "byte_value7": 2,
                    "character": 1,
                    "current_byte": 7,
                    "current_byte_as_char": 2,
                    "current_char": 1,
                    "current_character": 1,
                    "current_value": 1,
                    "decoded_byte": 1,
                    "first_byte_value": 1,
                    "new_byte": 1,
                    "next_byte_value_as_char": 1,
                    "special_byte": 1,
                    "temp10": 1,
                    "temp_var10": 1,
                    "temp_var_10": 1
                },
                "uVar2": {
                    "byte": 1,
                    "byte1": 3,
                    "byte2": 7,
                    "byte_read": 1,
                    "byte_result": 1,
                    "byte_value": 1,
                    "byte_value2": 3,
                    "char_code": 1,
                    "current_byte": 6,
                    "current_byte_2": 1,
                    "read_result": 1,
                    "status": 1,
                    "temp2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1
                },
                "uVar3": {
                    "byte2": 4,
                    "byte3": 7,
                    "byte_value2": 1,
                    "byte_value3": 3,
                    "current_byte_3": 1,
                    "extra_byte_read": 1,
                    "next_byte": 3,
                    "next_byte3": 1,
                    "read_result": 1,
                    "second_byte": 2,
                    "temp3": 1,
                    "temp_byte2": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1
                },
                "uVar5": {
                    "buffer_count": 1,
                    "buffer_index": 1,
                    "byte4": 4,
                    "byte_value4": 2,
                    "count": 1,
                    "counter": 1,
                    "current_byte": 1,
                    "current_index": 3,
                    "current_offset": 1,
                    "current_output_index": 1,
                    "decoded_count": 1,
                    "index": 3,
                    "iteration": 1,
                    "num_bytes_read": 1,
                    "output_index_copy": 1,
                    "previous_byte": 1,
                    "read_byte": 1,
                    "read_byte_result": 1,
                    "temp5": 1,
                    "temp_var5": 1,
                    "temp_var_5": 1,
                    "u_var5": 1
                },
                "uVar6": {
                    "buffer_offset": 1,
                    "byte5": 1,
                    "byte_index": 1,
                    "bytes_written": 1,
                    "count": 1,
                    "current_index": 1,
                    "current_input_index": 1,
                    "decoded_index": 1,
                    "index": 3,
                    "output_buffer_index": 1,
                    "output_index": 10,
                    "output_offset": 1,
                    "read_pos": 1,
                    "temp6": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "ulong1": 1,
                    "ulong_value1": 1
                },
                "uVar7": {
                    "byte2": 1,
                    "byte2_1": 1,
                    "byte4": 2,
                    "byte5": 2,
                    "byte6": 1,
                    "byte8": 1,
                    "byte_a": 1,
                    "byte_part1": 1,
                    "byte_val_1": 1,
                    "byte_value2": 2,
                    "byte_value3": 1,
                    "byte_value4": 1,
                    "byte_value5": 2,
                    "current_byte_high": 1,
                    "next_byte": 1,
                    "next_byte1": 1,
                    "next_byte_value": 1,
                    "second_byte": 1,
                    "second_byte_value": 1,
                    "second_value": 1,
                    "temp7": 1,
                    "temp_byte3": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1
                },
                "uVar8": {
                    "byte2_2": 1,
                    "byte3": 1,
                    "byte5": 2,
                    "byte6": 2,
                    "byte7": 1,
                    "byte9": 1,
                    "byte_b": 1,
                    "byte_part2": 1,
                    "byte_val_2": 1,
                    "byte_value3": 2,
                    "byte_value4": 1,
                    "byte_value5": 1,
                    "byte_value6": 2,
                    "current_byte_low": 1,
                    "next_byte2": 1,
                    "next_byte_2": 1,
                    "next_next_byte_value": 1,
                    "temp8": 1,
                    "temp_byte4": 1,
                    "temp_var8": 1,
                    "temp_var_8": 1,
                    "third_byte": 1,
                    "third_byte_value": 1,
                    "third_value": 1
                },
                "uVar9": {
                    "bit_count": 1,
                    "byte_count": 1,
                    "count": 5,
                    "counter": 9,
                    "data_count": 1,
                    "index": 1,
                    "iteration_count": 2,
                    "num_bytes": 1,
                    "num_bytes_decoded": 1,
                    "num_chars": 1,
                    "output_buffer_count": 1,
                    "temp9": 1,
                    "temp_var9": 1,
                    "temp_var_9": 1,
                    "token_count": 1,
                    "uint1": 1,
                    "uint_value1": 1
                }
            },
            "called": [
                "fputs",
                "FUN_00103890",
                "FUN_0010293a",
                "FUN_00102b11",
                "FUN_0010290e",
                "putc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\n\n\nvoid process_file_data_00102b11(undefined8 arg1,long offset,undefined8 arg3,long arg4,uint buffer_size,\n                 long output_buffer)\n\n{\n  undefined byte_value;\n  uint byte2;\n  uint byte3;\n  int result;\n  uint byte4;\n  ulong output_index;\n  undefined byte4;\n  undefined byte6;\n  uint counter;\n  undefined current_byte;\n  ulong last_index;\n  uint read_result [3];\n  uint bytes_read;\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  \n  counter = 0;\n  bytes_read = 0;\n  last_index = 0;\n  output_index = 0;\n  read_result[0] = buffer_size;\n  byte2 = 0;\n  while (byte4 = (uint)output_index, counter < DAT_00108374) {\n    byte2 = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n    if (byte2 == 0xffffffff) break;\n    if (byte2 < 0x100) {\n      current_byte = (undefined)byte2;\n      if (byte2 == 9) {\n        if (counter == 0) {\n          last_index = (ulong)(bytes_read - 1);\n        }\nLAB_00102c09:\n        counter = counter + 1;\n        *(undefined *)(output_buffer + output_index) = current_byte;\n        output_index = (ulong)(byte4 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)byte2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (counter == 0) {\n            last_index = (ulong)(bytes_read - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (counter == 0) {\n            last_index = (ulong)(bytes_read - 1);\n          }\n          if ((int)byte2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)byte2 < 0xc0) goto LAB_00102b96;\n        byte3 = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n        if (byte3 == 0xffffffff) {\nLAB_00102dee:\n          byte2 = 0xffffffff;\n          break;\n        }\n        byte4 = (undefined)byte3;\n        if ((byte3 & 0xc0) == 0x80) {\n          if ((byte2 & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            counter = counter + 1;\n            *(undefined *)(output_buffer + output_index) = current_byte;\n            *(undefined *)(output_buffer + (ulong)(byte4 + 1)) = byte4;\n            output_index = (ulong)(byte4 + 2);\n            byte2 = byte3;\n          }\n          else {\n            byte3 = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n            if (byte3 == 0xffffffff) goto LAB_00102dee;\n            byte6 = (undefined)byte3;\n            if ((byte3 & 0xc0) == 0x80) {\n              if ((byte2 & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                counter = counter + 1;\n                *(undefined *)(output_buffer + output_index) = current_byte;\n                output_index = (ulong)(byte4 + 3);\n                *(undefined *)(output_buffer + (ulong)(byte4 + 1)) = byte4;\n                *(undefined *)(output_buffer + (ulong)(byte4 + 2)) = byte6;\n                byte2 = byte3;\n              }\n              else {\n                byte2 = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n                if (byte2 == 0xffffffff) goto LAB_00102dee;\n                byte_value = (undefined)byte2;\n                if ((byte2 & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(arg4 + (ulong)read_result[0]) = byte_value;\n                    *(undefined *)(arg4 + (ulong)(read_result[0] + 1)) = byte4;\n                    *(undefined *)(arg4 + (ulong)(read_result[0] + 2)) = byte6;\n                    goto LAB_00102db9;\n                  }\n                  counter = counter + 1;\n                  *(undefined *)(output_buffer + output_index) = current_byte;\n                  *(undefined *)(output_buffer + (ulong)(byte4 + 1)) = byte4;\n                  output_index = (ulong)(byte4 + 4);\n                  *(undefined *)(output_buffer + (ulong)(byte4 + 2)) = byte6;\n                  *(undefined *)(output_buffer + (ulong)(byte4 + 3)) = byte_value;\n                }\n                else {\n                  *(undefined *)(arg4 + (ulong)read_result[0]) = byte_value;\n                  *(undefined *)(arg4 + (ulong)(read_result[0] + 1)) = byte6;\n                  *(undefined *)(arg4 + (ulong)(read_result[0] + 2)) = byte4;\nLAB_00102db9:\n                  read_result[0] = read_result[0] + 3;\n                  output_index = 0;\n                  counter = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              output_index = 0;\n              counter = 0;\n              *(undefined *)(arg4 + (ulong)read_result[0]) = byte6;\n              *(undefined *)(arg4 + (ulong)(read_result[0] + 1)) = byte4;\n              read_result[0] = read_result[0] + 2;\n              byte2 = byte3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          counter = 0;\n          *(undefined *)(arg4 + (ulong)read_result[0]) = byte4;\n          output_index = 0;\n          read_result[0] = read_result[0] + 1;\n          byte2 = byte3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      counter = 0;\n      output_index = 0;\n    }\n  }\n  if (counter < DAT_00108374) {\n    if (byte2 != 0xffffffff) {\nLAB_0010308d:\n      process_file_data_00102b11(arg1,(ulong)bytes_read + offset,arg3,arg4,read_result[0],output_buffer);\n    }\n  }\n  else {\n    byte2 = 0;\n    print_if_not_empty_00103890(arg1,last_index + offset);\n    while (byte2 < byte4) {\n      output_index = (ulong)byte2;\n      if (*(byte *)(output_index + output_buffer) < 0x7f) {\n        byte2 = byte2 + 1;\n        putc((uint)*(byte *)(output_index + output_buffer),_stdout);\n      }\n      else {\n        result = display_unicode_character_0010293a();\n        byte2 = byte2 + result;\n      }\n    }\n    while( true ) {\n      byte2 = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n      if (byte2 == 0xffffffff) break;\n      if (0xff < byte2) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (byte2 == 9) {\nLAB_00102ed4:\n        putc(byte2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)byte2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)byte2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)byte2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)byte2 < 0xc0) goto LAB_00103049;\n        byte1 = (byte)byte2;\n        result = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n        if (result == -1) break;\n        byte2 = (byte)result;\n        if ((byte2 & 0xc0) != 0x80) {\nLAB_00102f32:\n          output_index = (ulong)read_result[0];\n          read_result[0] = read_result[0] + 1;\n          *(byte *)(arg4 + output_index) = byte2;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(DAT_00108358,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((byte1 & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        result = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n        if (result == -1) break;\n        byte3 = (byte)result;\n        if ((byte3 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(arg4 + (ulong)read_result[0]) = byte3;\n          byte2 = read_result[0] + 1;\n          read_result[0] = read_result[0] + 2;\nLAB_00102ff2:\n          *(byte *)(arg4 + (ulong)byte2) = byte2;\n          goto joined_r0x00102f51;\n        }\n        if ((byte1 & 0x10) != 0) {\n          result = read_byte_from_file_0010290e(arg3,arg4,read_result,&bytes_read);\n          if (result != -1) {\n            byte4 = (byte)result;\n            if (((byte4 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(arg4 + (ulong)read_result[0]) = byte4;\n            *(byte *)(arg4 + (ulong)(read_result[0] + 1)) = byte3;\n            byte2 = read_result[0] + 2;\n            read_result[0] = read_result[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        display_unicode_character_0010293a(&byte1);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_file_data_00102b11",
            "entrypoint": "0x00102b11",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102b11": "process_file_data_00102b11",
                "iVar4": "result",
                "local_39": "byte4",
                "local_3a": "byte3",
                "local_3b": "byte2",
                "local_3c": "byte1",
                "local_40": "bytes_read",
                "local_4c": "read_result",
                "local_80": "last_index",
                "param_1": "arg1",
                "param_2": "offset",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "buffer_size",
                "param_6": "output_buffer",
                "uVar1": "byte_value",
                "uVar10": "current_byte",
                "uVar2": "byte2",
                "uVar3": "byte3",
                "uVar5": "byte4",
                "uVar6": "output_index",
                "uVar7": "byte4",
                "uVar8": "byte6",
                "uVar9": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030c0": {
            "additional_data": {
                "FUN_001030c0": {
                    "print_string_analysis": 1,
                    "print_string_info": 2,
                    "print_string_information": 2,
                    "print_string_options": 3,
                    "print_string_usage": 1,
                    "print_strings": 4,
                    "print_strings_help_and_exit": 1,
                    "print_strings_usage": 11,
                    "print_strings_usage_info": 1,
                    "print_usage": 4,
                    "print_usage_info": 1
                },
                "__ptr": {
                    "bfd_targets": 1,
                    "ptr_list": 1,
                    "target_list": 29
                },
                "bfd_target_list": {
                    "get_target_list": 1
                },
                "dcgettext": {
                    "get_message": 1,
                    "get_translated_string": 1,
                    "localized_get_text": 1
                },
                "exit": {
                    "exit_program": 3,
                    "terminate": 1,
                    "terminate_program": 1
                },
                "fprintf": {
                    "print": 1,
                    "print_formatted": 2,
                    "write_to_file": 1
                },
                "fputc": {
                    "put_char": 1,
                    "put_character": 2,
                    "write_char": 1
                },
                "free": {
                    "dealloc": 1,
                    "deallocate_memory": 1,
                    "free_memory": 1,
                    "release_memory": 1
                },
                "lVar1": {
                    "default_language": 1,
                    "default_message": 1,
                    "default_target": 4,
                    "default_target_format": 1,
                    "helper_var": 1,
                    "lang_var1": 2,
                    "language_code": 4,
                    "language_id": 1,
                    "language_variable": 1,
                    "message": 1,
                    "supported_target": 2,
                    "supported_targets": 2,
                    "target": 3,
                    "target_name": 5,
                    "target_var": 1,
                    "translation_id": 1
                },
                "param_1": {
                    "file": 4,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "output_file": 24
                },
                "param_2": {
                    "exit_code": 30,
                    "exit_status": 1
                },
                "pcVar2": {
                    "locale_string": 1,
                    "localized_string": 6,
                    "message": 12,
                    "message_string": 1,
                    "print_string": 1,
                    "str_ptr": 1,
                    "string": 3,
                    "text": 2,
                    "translated_string": 3,
                    "translation": 1
                },
                "plVar3": {
                    "current_target": 9,
                    "ptr": 5,
                    "ptr_list_iter": 1,
                    "ptr_target": 1,
                    "ptr_to_list": 1,
                    "target": 5,
                    "target_iterator": 1,
                    "target_list_pointer": 1,
                    "target_list_ptr": 2,
                    "target_pointer": 2,
                    "target_ptr": 3
                }
            },
            "called": [
                "free",
                "fprintf",
                "bfd_target_list",
                "fputc",
                "exit",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid print_strings_usage_info_001030c0(FILE *output_file,int exit_code)\n\n{\n  long target_name;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  target_name = DAT_00108378;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(output_file,message,target_name);\n  message = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  target_name = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target_name);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    target_name = *current_target;\n    current_target = current_target + 1;\n    if (target_name == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_strings_usage_info_001030c0",
            "entrypoint": "0x001030c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030c0": "print_strings_usage_info_001030c0",
                "__ptr": "target_list",
                "bfd_target_list": "get_target_list",
                "dcgettext": "get_message",
                "exit": "exit_program",
                "fprintf": "print_formatted",
                "fputc": "put_character",
                "free": "release_memory",
                "lVar1": "target_name",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103240": {
            "additional_data": {
                "FUN_00103240": {
                    "print_formatted_data": 8,
                    "print_formatted_input": 1,
                    "print_formatted_message": 1,
                    "print_formatted_output": 11,
                    "print_formatted_unicode_data": 1,
                    "print_formatted_value": 3,
                    "print_unicode": 1,
                    "print_unicode_buffer": 2,
                    "print_unicode_characters": 1,
                    "print_unicode_data": 1,
                    "print_unicode_output": 1
                },
                "__ptr": {
                    "allocated_buffer": 1,
                    "allocated_memory": 1,
                    "buffer_pointer": 1,
                    "dynamic_buffer": 3,
                    "dynamic_memory": 2,
                    "dynamic_memory_pointer": 1,
                    "dynamic_memory_ptr": 1,
                    "formatted_buffer": 1,
                    "memory_ptr": 1,
                    "ptr": 7,
                    "temp_pointer": 7,
                    "temp_ptr": 4,
                    "void_pointer": 1
                },
                "__s": {
                    "char_pointer": 1,
                    "format_buffer": 1,
                    "formatted_data": 2,
                    "formatted_output": 6,
                    "formatted_string": 7,
                    "output_buffer": 1,
                    "output_str": 1,
                    "output_string": 9,
                    "str": 2,
                    "string": 1
                },
                "_stderr": {
                    "standard_error": 1
                },
                "_stdout": {
                    "standard_output": 1
                },
                "bVar12": {
                    "bool_value": 1,
                    "bool_var": 3,
                    "continue_loop": 1,
                    "continue_processing": 1,
                    "flag": 3,
                    "has_next_sequence": 1,
                    "is_buffer_overflow": 1,
                    "is_byte_sequence": 1,
                    "is_continue": 1,
                    "is_end_of_format": 1,
                    "is_formatted": 1,
                    "is_invalid": 1,
                    "is_less": 2,
                    "is_less_than_buffer_len": 1,
                    "is_less_than_data_size": 1,
                    "is_looping": 1,
                    "is_remaining": 1,
                    "is_sequence_complete": 1,
                    "is_sequence_continued": 1,
                    "is_valid_byte_sequence": 1,
                    "is_valid_sequence": 1,
                    "is_valid_utf8": 1,
                    "is_whitespace_detected": 1,
                    "loop_flag": 1,
                    "temp_bool": 1,
                    "valid_sequence": 1
                },
                "bVar2": {
                    "byte_value": 4,
                    "byte_var": 2,
                    "current_byte": 4,
                    "current_byte_value": 1,
                    "current_char": 14,
                    "current_character": 4
                },
                "cVar3": {
                    "additional_flag": 1,
                    "char_value": 1,
                    "char_var": 3,
                    "enable_formatting": 1,
                    "has_formatting": 1,
                    "is_formatted": 1,
                    "is_formatted_output": 1,
                    "is_signed": 1,
                    "mode": 1,
                    "option_flag": 1,
                    "output_format": 1,
                    "print_char": 1,
                    "print_flag": 1,
                    "print_format": 2,
                    "print_mode": 1,
                    "print_option": 1,
                    "print_prefix": 1,
                    "print_separator": 3,
                    "print_string": 1,
                    "print_switch": 1,
                    "print_white_space": 1,
                    "should_print_prompt": 1,
                    "use_formatted_value": 1,
                    "use_input_format": 1
                },
                "iVar6": {
                    "argument_type": 1,
                    "check_result": 2,
                    "code_version": 1,
                    "data_type": 1,
                    "display_option": 1,
                    "flag": 1,
                    "format": 1,
                    "format_type": 1,
                    "function_id": 1,
                    "implementation_option": 1,
                    "implementation_variant": 1,
                    "int_value": 1,
                    "int_var": 3,
                    "is_unicode": 1,
                    "option": 1,
                    "output_option": 1,
                    "output_type": 1,
                    "print_format": 1,
                    "print_mode": 2,
                    "print_option": 3,
                    "print_type": 1,
                    "processing_option": 1,
                    "stream_mode": 1,
                    "table_index": 1,
                    "temp_int": 1
                },
                "lVar10": {
                    "data_length": 1,
                    "temp_index": 1,
                    "temp_var2": 1
                },
                "lVar4": {
                    "current_data": 5,
                    "current_length": 1,
                    "current_offset": 1,
                    "current_pos": 1,
                    "current_size": 1,
                    "current_value": 1,
                    "data": 1,
                    "data_length": 6,
                    "data_pointer": 2,
                    "data_read": 1,
                    "data_size": 2,
                    "input_value": 1,
                    "last_position": 1,
                    "length_var": 1,
                    "long_var": 2,
                    "remaining_bytes": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "temp_var1": 1
                },
                "local_3d": {
                    "byte_buffer": 1,
                    "byte_sequence": 1,
                    "byte_sequence_buffer": 1,
                    "dummy_data": 1,
                    "formatting_options": 1,
                    "input_array": 1,
                    "local_arr": 1,
                    "local_buffer_array2": 1,
                    "local_undefined_array": 1,
                    "reserved_array": 1,
                    "reserved_buffer": 1,
                    "temp_buffer": 4,
                    "temp_buffer2": 1,
                    "temp_data": 2,
                    "temporary_data": 1,
                    "undefined_array": 1,
                    "unknown_data": 1,
                    "unused_array": 1,
                    "unused_buffer": 1,
                    "unused_bytes": 1,
                    "unused_var": 1
                },
                "local_50": {
                    "buffer_array": 1,
                    "count_buffer": 1,
                    "current_buffer_size": 1,
                    "current_data": 1,
                    "current_data_buffer": 1,
                    "current_size": 1,
                    "current_values": 1,
                    "data_and_buffer_size": 1,
                    "data_buffer": 2,
                    "data_pointer": 1,
                    "data_pointer_copy": 1,
                    "data_size": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_state": 1,
                    "local_buffer": 1,
                    "local_buffer_array": 1,
                    "local_long_array": 1,
                    "local_var4": 1,
                    "params_array": 1,
                    "read_size": 1,
                    "remaining_data": 2,
                    "size_array": 1,
                    "size_param": 1,
                    "temp_array": 1,
                    "temp_buffer": 1
                },
                "local_54": {
                    "buffer_index": 1,
                    "current_buffer_size": 3,
                    "current_data_length": 1,
                    "current_flags": 1,
                    "current_format_option": 1,
                    "current_format_type": 1,
                    "current_index": 2,
                    "current_input_length": 1,
                    "current_length": 1,
                    "current_option": 2,
                    "current_size": 1,
                    "data_count": 1,
                    "data_length": 1,
                    "input_format": 1,
                    "input_length": 1,
                    "input_switch": 1,
                    "length_data": 1,
                    "local_has_output": 1,
                    "local_int_var": 1,
                    "local_length": 1,
                    "local_var3": 1,
                    "print_newline_copy": 1,
                    "remaining_count": 1,
                    "temp_buffer_size": 1
                },
                "local_60": {
                    "buffer_pointer_copy": 1,
                    "byte_pointer": 1,
                    "current_buffer": 4,
                    "current_buffer_pointer": 1,
                    "current_buffer_ptr": 1,
                    "current_data": 2,
                    "current_input": 1,
                    "current_input_buffer": 1,
                    "current_output": 1,
                    "current_output_buffer": 1,
                    "current_position": 1,
                    "current_stream": 1,
                    "data_pointer": 3,
                    "input_buffer": 1,
                    "input_data": 1,
                    "local_byte_pointer": 1,
                    "local_data": 1,
                    "local_output": 1,
                    "local_var2": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "temp_buffer_ptr": 1
                },
                "local_80": {
                    "buffer_start": 1,
                    "current_address": 1,
                    "current_buffer": 1,
                    "current_data": 1,
                    "current_data_pointer": 1,
                    "current_output_buffer": 1,
                    "current_position": 1,
                    "current_ptr": 1,
                    "data_start": 1,
                    "formatted_buffer": 1,
                    "formatted_data": 2,
                    "formatted_output": 1,
                    "local_buffer": 1,
                    "local_var": 1,
                    "local_var1": 1,
                    "output_buffer": 2,
                    "output_offset": 2,
                    "output_position": 1,
                    "output_ptr": 1,
                    "output_string_pointer": 1,
                    "start_index_output": 1,
                    "start_of_data": 1,
                    "start_pos": 2,
                    "start_position": 1
                },
                "param_1": {
                    "buffer": 1,
                    "buffer_name": 1,
                    "data_label": 2,
                    "format": 1,
                    "format_specifier": 3,
                    "format_string": 4,
                    "input_string": 3,
                    "label": 2,
                    "message": 8,
                    "param1": 2,
                    "param_str": 1,
                    "prefix": 1,
                    "prefix_message": 1,
                    "prompt": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data": 3,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_stream": 4,
                    "data_stream_buffer": 1,
                    "input_buffer": 1,
                    "input_data": 3,
                    "input_stream": 2,
                    "param2": 2,
                    "stream": 10,
                    "stream_param": 1
                },
                "param_3": {
                    "buffer": 5,
                    "buffer_size": 15,
                    "buffer_size_param": 1,
                    "count": 1,
                    "data_length": 1,
                    "end_of_data": 1,
                    "length": 1,
                    "param3": 2,
                    "size": 3,
                    "unicode_buffer": 1
                },
                "param_4": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "count": 1,
                    "flags": 2,
                    "format": 1,
                    "format_option": 2,
                    "format_switch": 1,
                    "format_type": 1,
                    "has_label": 1,
                    "has_output": 1,
                    "is_formatted": 1,
                    "is_output": 1,
                    "is_stream": 1,
                    "is_string": 1,
                    "is_unicode": 1,
                    "length": 3,
                    "newline": 1,
                    "option": 1,
                    "output_format": 1,
                    "output_mode": 2,
                    "param4": 2,
                    "print_mode": 1,
                    "print_newline": 1,
                    "stream_buffer_param": 1
                },
                "param_5": {
                    "buffer": 7,
                    "data": 5,
                    "data_buffer_param": 1,
                    "input_data": 1,
                    "output_buffer": 10,
                    "param5": 2,
                    "unicode_buffer": 4,
                    "unicode_data": 1
                },
                "pbVar1": {
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "byte_pointer": 3,
                    "byte_ptr": 1,
                    "current_byte": 21,
                    "current_byte_ptr": 1,
                    "current_char": 1
                },
                "uVar10": {
                    "buffer_index": 1,
                    "byte_index": 1,
                    "current_index": 4,
                    "current_index2": 1,
                    "data_buffer_index": 1,
                    "data_index": 1,
                    "index": 4,
                    "next_index": 1,
                    "next_position": 1,
                    "position": 1,
                    "read_bytes": 1,
                    "temp_index": 4,
                    "temp_u_int2": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "ulong_var3": 3,
                    "unsigned_var4": 1
                },
                "uVar11": {
                    "argument_count": 1,
                    "byte_sequence_count": 1,
                    "char_count": 1,
                    "char_counter": 3,
                    "consecutive_tabs": 1,
                    "consecutive_whitespace_count": 1,
                    "count": 3,
                    "count_index": 1,
                    "counter": 4,
                    "format_index": 1,
                    "formatted_index": 1,
                    "iteration_count": 1,
                    "non_printable_count": 1,
                    "sequence_count": 5,
                    "temp_flag": 1,
                    "temp_length": 1,
                    "uint_var3": 3,
                    "unsigned_var5": 1
                },
                "uVar5": {
                    "byte_check": 1,
                    "byte_count": 4,
                    "byte_result": 1,
                    "byte_sequence_index": 1,
                    "byte_sequence_length": 7,
                    "byte_sequence_result": 1,
                    "byte_sequence_size": 1,
                    "byte_size": 1,
                    "character_code": 1,
                    "result": 2,
                    "sequence_length": 5,
                    "temp_u_int": 1,
                    "uint_var": 3,
                    "unsigned_var": 1,
                    "value": 1
                },
                "uVar7": {
                    "buffer_position": 1,
                    "byte_counter": 1,
                    "byte_value": 1,
                    "count": 1,
                    "current_char_index": 1,
                    "current_index": 7,
                    "data_index": 2,
                    "data_length": 1,
                    "data_value": 1,
                    "index": 3,
                    "loop_index": 1,
                    "offset": 1,
                    "read_bytes": 1,
                    "read_data": 1,
                    "read_result": 2,
                    "read_value": 2,
                    "ulong_var": 2,
                    "ulong_var1": 1,
                    "unsigned_var1": 1
                },
                "uVar8": {
                    "buffer_length": 9,
                    "buffer_size": 3,
                    "data_length": 1,
                    "data_remaining": 1,
                    "data_size": 2,
                    "length": 3,
                    "remaining_length": 3,
                    "remaining_size": 2,
                    "size": 1,
                    "string_size": 1,
                    "total_length": 1,
                    "ulong_var2": 3,
                    "unsigned_var2": 1
                },
                "uVar9": {
                    "buffer_len": 1,
                    "buffer_length": 1,
                    "buffer_size": 3,
                    "current_length": 2,
                    "current_size": 1,
                    "current_value": 2,
                    "data_length": 1,
                    "format_buffer_index": 1,
                    "formatted_length": 3,
                    "formatted_size": 2,
                    "index": 1,
                    "output_index": 1,
                    "output_size": 1,
                    "output_string_length": 2,
                    "remaining_bytes": 1,
                    "string_len": 1,
                    "string_length": 1,
                    "temp_length": 1,
                    "temp_value": 1,
                    "uint_var2": 3,
                    "unsigned_var3": 1
                }
            },
            "called": [
                "xmalloc",
                "fputs",
                "FUN_001028b2",
                "free",
                "fwrite",
                "FUN_00103890",
                "FUN_0010293a",
                "FUN_00102b11",
                "putc"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid print_formatted_unicode_data_00103240(long message,long stream,long buffer_size,int length,byte *output_buffer)\n\n{\n  byte *current_byte;\n  byte current_char;\n  char char_var;\n  long data_length;\n  uint byte_sequence_length;\n  int int_var;\n  void *ptr;\n  char *output_string;\n  ulong current_index;\n  ulong buffer_length;\n  uint buffer_size;\n  ulong temp_index;\n  uint sequence_count;\n  bool flag;\n  long output_buffer;\n  byte *current_buffer;\n  int current_buffer_size;\n  long data_buffer [2];\n  undefined temp_buffer [13];\n  \n  current_buffer = output_buffer;\n  current_buffer_size = length;\n  data_buffer[0] = buffer_size;\n  if (DAT_00108350 == 0) {\n    output_string = (char *)xmalloc(DAT_00108374 + 1);\n    do {\n      while (data_length = data_buffer[0], buffer_length = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          printf(\"%s: \",message);\n        }\n        if (DAT_00108372 == '\\0') {\n          output_string[buffer_length] = '\\0';\n          fputs(output_string,standard_output);\n        }\n        else {\n          print_formatted_value_0010286f(data_length);\n          output_string[buffer_length] = '\\0';\n          fputs(output_string,standard_output);\n        }\n        while (buffer_length = read_data_and_convert_to_unsigned_long_00103520(stream,data_buffer,&current_buffer_size,&current_buffer),\n              buffer_length != 0xffffffffffffffff) {\n          if (0xff < buffer_length) {\nLAB_0010348e:\n            update_data_and_pointer_00103810(buffer_length,data_buffer,&current_buffer_size,&current_buffer);\n            break;\n          }\n          if (buffer_length == 9) {\nLAB_00102438:\n            putc((int)buffer_length,standard_output);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + buffer_length * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)buffer_length < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + buffer_length * 2) & 0x40) == 0))))\n              goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)buffer_length,standard_output);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,standard_output);\n        }\n        else {\n          fputs(DAT_00108358,standard_output);\n        }\n      }\n      current_index = read_data_and_convert_to_unsigned_long_00103520(stream,data_buffer,&current_buffer_size,&current_buffer);\n      buffer_size = DAT_00108374;\n      if (current_index == 0xffffffffffffffff) goto LAB_001034be;\n      if (current_index < 0x100) {\n        if (current_index == 9) {\nLAB_001023f5:\n          *output_string = (char)current_index;\n          if (buffer_size < 2) {\n            print_formatted_output_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + current_index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + current_index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *output_string = (char)current_index;\n          if (buffer_size < 2) {\n            buffer_length = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        current_index = read_data_and_convert_to_unsigned_long_00103520(stream,data_buffer,&current_buffer_size,&current_buffer);\n        buffer_size = DAT_00108374;\n        if (current_index == 0xffffffffffffffff) goto LAB_001034be;\n        if (current_index < 0x100) {\n          if (current_index == 9) {\nLAB_001023bb:\n            output_string[1] = (char)current_index;\n            if (buffer_size < 3) {\n              print_formatted_input_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + current_index * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + current_index * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            output_string[1] = (char)current_index;\n            if (buffer_size < 3) {\n              buffer_length = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          current_index = read_data_and_convert_to_unsigned_long_00103520(stream,data_buffer,&current_buffer_size,&current_buffer);\n          buffer_size = DAT_00108374;\n          if (current_index == 0xffffffffffffffff) {\nLAB_001034be:\n            free(output_string);\n            return;\n          }\n          if (current_index < 0x100) {\n            if (current_index == 9) {\nLAB_00102381:\n              output_string[2] = (char)current_index;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + current_index * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)current_index < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + current_index * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              output_string[2] = (char)current_index;\n            }\n            if (buffer_size < 4) {\n              buffer_length = 3;\n            }\n            else {\n              temp_index = 3;\n              do {\n                current_index = read_data_and_convert_to_unsigned_long_00103520(stream,data_buffer,&current_buffer_size,&current_buffer);\n                if (current_index == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < current_index) goto code_r0x001034d5;\n                if (((current_index != 9) && ((*(ushort *)(&_sch_istable + current_index * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)current_index < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + current_index * 2) & 0x40) == 0) {\n                    process_input_data_001034d5();\n                    return;\n                  }\n                }\n                buffer_size = (int)temp_index + 1;\n                buffer_length = (ulong)buffer_size;\n                flag = buffer_size < DAT_00108374;\n                output_string[temp_index] = (char)current_index;\n                temp_index = buffer_length;\n              } while (flag);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      update_data_and_pointer_00103810(current_index,data_buffer,&current_buffer_size,&current_buffer);\n    } while( true );\n  }\n  if (output_buffer != (byte *)0x0) {\n    buffer_length = (ulong)length;\n    output_buffer = buffer_size;\n    if (message != 0) {\nLAB_0010249c:\n      buffer_size = DAT_00108374;\n      char_var = DAT_00108373;\n      int_var = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (buffer_length != 0) {\n          current_index = 0;\n          sequence_count = 0;\n          temp_index = 0;\n          do {\n            while( true ) {\n              current_char = output_buffer[temp_index];\n              if (current_char != 9) break;\nLAB_0010252e:\n              byte_sequence_length = 1;\nLAB_00102533:\n              if (sequence_count == 0) {\n                current_index = temp_index;\n              }\n              sequence_count = sequence_count + 1;\n              if (buffer_size <= sequence_count) goto LAB_001026a9;\n              temp_index = temp_index + byte_sequence_length;\n              if (buffer_length <= temp_index) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x10) != 0) {\n              if (0x7e < current_char) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < current_char) {\nLAB_0010264e:\n              if ((current_char < 0xc0) ||\n                 (byte_sequence_length = check_byte_sequence_001028b2(output_buffer + temp_index,buffer_length - temp_index), byte_sequence_length == 0))\n              goto LAB_0010269a;\n              if (int_var == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((char_var != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x40) != 0)) &&\n               (current_char != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            byte_sequence_length = 1;\nLAB_00102688:\n            temp_index = temp_index + byte_sequence_length;\n            if (buffer_length <= temp_index) goto LAB_001026a1;\n            sequence_count = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,standard_error);\n  }\n  if (stream != 0) {\n    if (message != 0) {\nLAB_0010255f:\n      data_length = data_buffer[0];\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        ptr = (void *)xmalloc(DAT_00108374 * 4 + 1);\n        process_file_data_00102b11(message,data_length,stream,temp_buffer,0,ptr);\n        free(ptr);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,standard_error);\n  }\n  return;\nLAB_001026a1:\n  if (buffer_size != 0) {\nLAB_00102551:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_if_not_empty_00103890(message,output_buffer + current_index);\n  for (; current_byte = output_buffer + current_index, current_index < buffer_length; current_index = current_index + buffer_size) {\n    current_char = *current_byte;\n    if (current_char == 9) {\nLAB_00102708:\n      putc((uint)current_char,standard_output);\n      buffer_size = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (current_char < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)current_char * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (current_char < 0x7f) goto LAB_00102708;\n      }\n      int_var = check_byte_sequence_001028b2(current_byte,buffer_length - current_index);\n      if ((int_var == 0) || (DAT_00108350 == 5)) break;\n      buffer_size = display_unicode_character_0010293a(current_byte);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,standard_output);\n  }\n  else {\n    fputs(DAT_00108358,standard_output);\n  }\n  output_buffer = output_buffer + current_index;\n  buffer_length = buffer_length - current_index;\n  output_buffer = current_byte;\n  goto LAB_0010249c;\n}\n\n",
            "current_name": "print_formatted_unicode_data_00103240",
            "entrypoint": "0x00103240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103240": "print_formatted_unicode_data_00103240",
                "__ptr": "ptr",
                "__s": "output_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "bVar12": "flag",
                "bVar2": "current_char",
                "cVar3": "char_var",
                "iVar6": "int_var",
                "lVar4": "data_length",
                "local_3d": "temp_buffer",
                "local_50": "data_buffer",
                "local_54": "current_buffer_size",
                "local_60": "current_buffer",
                "local_80": "output_buffer",
                "param_1": "message",
                "param_2": "stream",
                "param_3": "buffer_size",
                "param_4": "length",
                "param_5": "output_buffer",
                "pbVar1": "current_byte",
                "uVar10": "temp_index",
                "uVar11": "sequence_count",
                "uVar5": "byte_sequence_length",
                "uVar7": "current_index",
                "uVar8": "buffer_length",
                "uVar9": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034d5": {
            "additional_data": {
                "DAT_00108358": {
                    "custom_output_string": 1,
                    "custom_string": 1,
                    "ending_message": 1,
                    "new_line_string": 1
                },
                "DAT_00108360": {
                    "character_type": 2,
                    "s_check": 1
                },
                "DAT_00108371": {
                    "enable_input_prompt": 1,
                    "is_input_string_enabled": 1,
                    "print_header_enabled": 1,
                    "should_print_prompt": 1
                },
                "DAT_00108372": {
                    "enable_formatted_value": 1,
                    "is_formatted": 1,
                    "is_formatted_value_enabled": 1,
                    "print_value_enabled": 1
                },
                "DAT_00108373": {
                    "enable_extra_validation": 1,
                    "extended_characters_enabled": 1,
                    "is_character_table_enabled": 1,
                    "is_printable": 1
                },
                "DAT_00108374": {
                    "input_length": 1,
                    "max_buffer_size": 1,
                    "maximum_values": 1
                },
                "FUN_001034d5": {
                    "print_formatted_output": 1,
                    "process_data": 17,
                    "process_input": 12,
                    "process_input_data": 1
                },
                "_sch_istable": {
                    "char_table": 2,
                    "character_table": 7,
                    "istable": 1
                },
                "_stdout": {
                    "output_stream": 3,
                    "standard_output": 4,
                    "stdout": 2
                },
                "bVar5": {
                    "condition": 2,
                    "continue_loop": 4,
                    "continue_processing": 1,
                    "has_next": 1,
                    "is_counter_less_than_max": 1,
                    "is_counter_less_than_num_inputs": 1,
                    "is_less": 5,
                    "is_less_than": 1,
                    "is_less_than_buffer_size": 1,
                    "is_less_than_counter": 1,
                    "is_less_than_num_bytes": 1,
                    "is_less_than_size": 1,
                    "is_smaller": 1,
                    "is_valid": 6
                },
                "fputc": {
                    "write_character": 1
                },
                "fputs": {
                    "print_string": 1,
                    "write": 1,
                    "write_string": 4,
                    "write_string_to_stream": 1,
                    "write_to_stdout": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "in_stack_00000010": {
                    "filename": 2,
                    "format_string": 4,
                    "formatted_output_header": 1,
                    "function_name": 1,
                    "input_label": 1,
                    "input_prompt": 1,
                    "input_string": 12,
                    "message": 2,
                    "prefix": 1,
                    "prompt": 3,
                    "prompt_message": 2,
                    "prompt_text": 1
                },
                "in_stack_00000038": {
                    "format": 1,
                    "format_specifier": 1,
                    "format_value": 1,
                    "formatted_value": 20,
                    "input_value": 1,
                    "output_format": 2,
                    "suffix": 1,
                    "value": 4
                },
                "print_formatted_input_00103510": {
                    "print_formatted_input": 7
                },
                "print_formatted_output_001034fa": {
                    "print_formatted_output": 7
                },
                "print_formatted_value_0010286f": {
                    "print_formatted_value": 7
                },
                "printf": {
                    "output_to_stdout": 1,
                    "print": 1,
                    "print_formatted_string": 4,
                    "print_string": 1
                },
                "putc": {
                    "print_character": 1,
                    "put_character": 1,
                    "write_char": 2,
                    "write_character": 1,
                    "write_to_stream": 1
                },
                "putch": {
                    "write_character": 1
                },
                "read_data_and_convert_to_unsigned_long_00103520": {
                    "read_and_convert_data_to_ulong": 1,
                    "read_and_convert_to_unsigned_long": 4,
                    "read_data": 1,
                    "read_data_and_convert_to_unsigned_long": 1
                },
                "stdin": {
                    "standard_input": 1
                },
                "stdout": {
                    "standard_output": 1
                },
                "uVar1": {
                    "ch": 1,
                    "data": 12,
                    "data_1": 1,
                    "data_size": 2,
                    "data_value": 4,
                    "data_value1": 1,
                    "input": 1,
                    "input_char": 1,
                    "input_value1": 1,
                    "read_value": 1,
                    "value": 2,
                    "value1": 3
                },
                "uVar2": {
                    "byte": 1,
                    "ch2": 1,
                    "converted_data": 1,
                    "current_byte": 1,
                    "data": 3,
                    "data2": 4,
                    "data_2": 1,
                    "data_value": 2,
                    "data_value2": 1,
                    "input_value2": 1,
                    "next_data_value": 1,
                    "next_value": 2,
                    "read_data": 1,
                    "read_result": 1,
                    "read_value": 1,
                    "second_data_value": 1,
                    "temp_data": 1,
                    "temp_value": 2,
                    "value": 1,
                    "value2": 3
                },
                "uVar3": {
                    "buffer_size": 4,
                    "count": 5,
                    "counter": 6,
                    "data_count": 1,
                    "data_length": 4,
                    "data_size": 1,
                    "input_length": 1,
                    "length": 1,
                    "loop_count": 1,
                    "max_length": 1,
                    "num_bytes": 1,
                    "num_data_values": 1,
                    "num_inputs": 1,
                    "num_values": 1,
                    "remaining_size": 1
                },
                "uVar4": {
                    "counter": 5,
                    "counter2": 3,
                    "i": 1,
                    "index": 21
                },
                "unaff_R14": {
                    "buffer": 1,
                    "output": 4,
                    "output_buffer": 17,
                    "output_data": 1,
                    "output_string": 7,
                    "result_string": 1
                },
                "update_data_and_pointer_00103810": {
                    "update_data_and_pointer": 7
                }
            },
            "called": [
                "FUN_00103810"
            ],
            "calling": [
                "FUN_0010259a",
                "FUN_00102330"
            ],
            "code": "\n\n\nvoid process_input_data_001034d5(void)\n\n{\n  ulong data;\n  ulong data2;\n  uint counter;\n  ulong index;\n  char *output_buffer;\n  bool is_valid;\n  undefined8 input_string;\n  undefined8 formatted_value;\n  \ncode_r0x001034d5:\n  update_data_and_pointer();\n  do {\n    data = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      data = read_and_convert_to_unsigned_long();\n      counter = DAT_00108374;\n      if (data == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < data) goto code_r0x001034d5;\n      if (data == 9) {\nLAB_001023f5:\n        *output_buffer = (char)data;\n        if (counter < 2) {\n          print_formatted_output();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + data * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)data)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + data * 2) & 0x40) != 0))))\n          goto LAB_001023f5;\n          goto code_r0x001034d5;\n        }\n        *output_buffer = (char)data;\n        if (counter < 2) {\n          data = 1;\n          goto joined_r0x001034ef;\n        }\n      }\n      data = read_and_convert_to_unsigned_long();\n      counter = DAT_00108374;\n      if (data == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < data) goto code_r0x001034d5;\n      if (data == 9) {\nLAB_001023bb:\n        output_buffer[1] = (char)data;\n        if (counter < 3) {\n          print_formatted_input();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&character_table + data * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)data)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + data * 2) & 0x40) != 0))))\n          goto LAB_001023bb;\n          goto code_r0x001034d5;\n        }\n        output_buffer[1] = (char)data;\n        if (counter < 3) {\n          data = 2;\n          goto joined_r0x001034ef;\n        }\n      }\n      data = read_and_convert_to_unsigned_long();\n      counter = DAT_00108374;\n      if (data == 0xffffffffffffffff) {\nLAB_001034be:\n        free(output_buffer);\n        return;\n      }\n      if (0xff < data) goto code_r0x001034d5;\n      if (data == 9) {\nLAB_00102381:\n        output_buffer[2] = (char)data;\n      }\n      else {\n        if ((*(ushort *)(&character_table + data * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)data)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&character_table + data * 2) & 0x40) != 0))))\n          goto LAB_00102381;\n          goto code_r0x001034d5;\n        }\n        output_buffer[2] = (char)data;\n      }\n      if (counter < 4) {\n        data = 3;\n      }\n      else {\n        index = 3;\n        do {\n          data2 = read_and_convert_to_unsigned_long();\n          if (data2 == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < data2) goto code_r0x001034d5;\n          if (((data2 != 9) && ((*(ushort *)(&character_table + data2 * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)data2 < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n            if ((*(ushort *)(&character_table + data2 * 2) & 0x40) == 0) {\n              process_input_data_001034d5();\n              return;\n            }\n          }\n          counter = (int)index + 1;\n          data = (ulong)counter;\n          is_valid = counter < DAT_00108374;\n          output_buffer[index] = (char)data2;\n          index = data;\n        } while (is_valid);\n      }\n    }\njoined_r0x001034ef:\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",input_string);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_buffer[data] = '\\0';\n      fputs(output_buffer,standard_output);\n    }\n    else {\n      print_formatted_value(formatted_value);\n      output_buffer[data] = '\\0';\n      fputs(output_buffer,standard_output);\n    }\n    while (data = read_and_convert_to_unsigned_long(), data != 0xffffffffffffffff) {\n      if (0xff < data) {\nLAB_0010348e:\n        update_data_and_pointer();\n        break;\n      }\n      if (data == 9) {\nLAB_00102438:\n        putc((int)data,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + data * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)data < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + data * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)data,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_input_data_001034d5",
            "entrypoint": "0x001034d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034d5": "process_input_data_001034d5",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "is_valid",
                "fputs": "write_string",
                "free": "deallocate_memory",
                "in_stack_00000010": "input_string",
                "in_stack_00000038": "formatted_value",
                "print_formatted_input_00103510": "print_formatted_input",
                "print_formatted_output_001034fa": "print_formatted_output",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print_formatted_string",
                "putc": "write_char",
                "read_data_and_convert_to_unsigned_long_00103520": "read_and_convert_to_unsigned_long",
                "stdout": "standard_output",
                "uVar1": "data",
                "uVar2": "data2",
                "uVar3": "counter",
                "uVar4": "index",
                "unaff_R14": "output_buffer",
                "update_data_and_pointer_00103810": "update_data_and_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001034fa": {
            "additional_data": {
                "DAT_00108358": {
                    "end_of_string": 1,
                    "new_line_string": 1
                },
                "DAT_00108360": {
                    "data_type": 1,
                    "is_numeric": 1
                },
                "DAT_00108371": {
                    "is_prompt": 1,
                    "print_flag": 1,
                    "should_print_text": 1
                },
                "DAT_00108372": {
                    "is_post_output_data": 1,
                    "should_format_text": 1,
                    "use_new_line": 1
                },
                "DAT_00108373": {
                    "is_alphanumeric": 1,
                    "should_print_special_char": 1
                },
                "DAT_00108374": {
                    "file_size": 1,
                    "post_output_data_size": 1
                },
                "FUN_001034fa": {
                    "print_data": 1,
                    "print_decompiled_code": 2,
                    "print_formatted_data": 1,
                    "print_formatted_output": 13,
                    "print_formatted_string": 8,
                    "print_formatted_text": 5,
                    "print_strings_with_conditions": 1
                },
                "LAB_00102381": {
                    "tab_character_label4": 1
                },
                "LAB_001023bb": {
                    "tab_character_label3": 1
                },
                "LAB_001023f5": {
                    "tab_character_label2": 1
                },
                "LAB_00102438": {
                    "tab_character_label": 1
                },
                "LAB_0010348e": {
                    "invalid_character_label": 1
                },
                "LAB_001034be": {
                    "free_memory_label": 1
                },
                "_sch_istable": {
                    "character_table": 4
                },
                "_stdout": {
                    "output_stream": 2,
                    "standard_output": 3,
                    "stdout": 1
                },
                "bVar5": {
                    "condition": 1,
                    "flag": 3,
                    "has_separator": 1,
                    "is_condition_true": 2,
                    "is_end": 2,
                    "is_end_of_output": 1,
                    "is_end_of_string": 1,
                    "is_end_reached": 1,
                    "is_exit": 1,
                    "is_flag_set": 1,
                    "is_invalid": 2,
                    "is_less": 2,
                    "is_less_than": 1,
                    "is_non_printable": 2,
                    "is_overflow": 1,
                    "is_special_character": 2,
                    "is_true": 2,
                    "is_valid_character": 1,
                    "reached_end": 1
                },
                "code_r0x001034d5": {
                    "invalid_character_label2": 1
                },
                "code_r0x001034fa": {
                    "print_formatted_string_loop": 2,
                    "start_label": 1
                },
                "fclose": {
                    "close_output_stream": 1
                },
                "fgets": {
                    "read_input_string": 1
                },
                "fputs": {
                    "put_string": 1,
                    "write_string": 1
                },
                "free": {
                    "free_memory": 2
                },
                "getchar": {
                    "get_character": 1
                },
                "in_stack_00000010": {
                    "file_indicator": 1,
                    "identifier_string": 1,
                    "input_string": 1,
                    "label": 4,
                    "label_string": 1,
                    "message": 1,
                    "output_identifier": 1,
                    "output_message": 1,
                    "prefix": 1,
                    "prompt": 12,
                    "prompt_message": 1,
                    "prompt_string": 2,
                    "prompt_text": 1,
                    "text": 2
                },
                "in_stack_00000038": {
                    "additional_data": 1,
                    "additional_input": 1,
                    "additional_text": 1,
                    "data": 2,
                    "delimiter": 2,
                    "delimiter_string": 1,
                    "extra_format_string": 1,
                    "file": 1,
                    "format_argument": 1,
                    "format_specifier2": 1,
                    "input_buffer": 1,
                    "input_message": 1,
                    "input_string": 1,
                    "loop_variable": 1,
                    "next_format_string": 1,
                    "output_end": 1,
                    "output_mode": 1,
                    "post_output_data": 1,
                    "prompt_string": 1,
                    "second_file_descriptor": 1,
                    "second_file_indicator": 1,
                    "second_format_string": 1,
                    "second_label_string": 1,
                    "separator": 2,
                    "separator_string": 1,
                    "suffix": 1
                },
                "joined_r0x0010341b": {
                    "continue_print_loop": 1,
                    "loop_label1": 1,
                    "outer_loop": 1
                },
                "printf": {
                    "print": 1,
                    "print_formatted_string": 1
                },
                "putc": {
                    "put_character": 1,
                    "write_character": 1
                },
                "putchar": {
                    "put_character": 1
                },
                "strlen": {
                    "get_string_length": 2
                },
                "uVar1": {
                    "ch": 2,
                    "char_code": 6,
                    "char_value": 4,
                    "character": 14,
                    "key": 1
                },
                "uVar2": {
                    "buffer_size": 1,
                    "count": 8,
                    "counter": 3,
                    "file_indicator_copy": 1,
                    "format_character": 1,
                    "format_specifier_count": 1,
                    "index": 4,
                    "length": 1,
                    "loop_count": 1,
                    "num_chars": 2,
                    "output_buffer_index": 1,
                    "output_length": 1,
                    "position": 1,
                    "size": 1
                },
                "uVar3": {
                    "buffer_index": 2,
                    "count": 3,
                    "i": 1,
                    "index": 17,
                    "index2": 1,
                    "loop_index": 2,
                    "output_index": 1
                },
                "uVar4": {
                    "buffer_index": 1,
                    "buffer_length": 1,
                    "count": 5,
                    "counter": 2,
                    "current_index": 1,
                    "current_state": 1,
                    "flag": 2,
                    "index": 6,
                    "index2": 2,
                    "is_end_of_input": 1,
                    "loop_counter": 1,
                    "output_length": 1,
                    "position": 2,
                    "value": 1
                },
                "unaff_R14": {
                    "buffer": 3,
                    "formatted_text": 2,
                    "output_buffer": 12,
                    "output_string": 13,
                    "str_buffer": 1
                },
                "unaff_R15": {
                    "file": 1,
                    "file_descriptor": 1,
                    "file_ptr": 1,
                    "format_specifier": 2,
                    "format_string": 20,
                    "formatted_string": 1,
                    "input_string": 1,
                    "message": 1,
                    "output_length": 1,
                    "output_stream": 1,
                    "print_enable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_output_001034fa(void)\n\n{\n  ulong character;\n  uint count;\n  ulong index;\n  ulong index;\n  char *outfputs;\n  undefined8 format_string;\n  bool flag;\n  undefined8 prompt;\n  undefined8 delimiter;\n  \nprintf_formatted_string_loop:\n  index = 1;\ncontinue_printf_loop:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      outfputs[index] = '\\0';\n      fputs(outfputs,standard_output);\n    }\n    else {\n      FUN_0010286f(format_string);\n      outfputs[index] = '\\0';\n      fputs(outfputs,standard_output);\n    }\n    while (index = read_data_and_convert_to_unsigned_long_00103520(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\ninvalid_character_label:\n        update_data_and_pointer_00103810();\n        break;\n      }\n      if (index == 9) {\ntab_character_label:\n        putc((int)index,standard_output);\n      }\n      else {\n        if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n          goto invalid_character_label;\n          goto tab_character_label;\n        }\n        putc((int)index,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n    while (index = (ulong)DAT_00108374, format_string = delimiter, DAT_00108374 != 0) {\n      index = read_data_and_convert_to_unsigned_long_00103520();\n      count = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto free_memory_label;\n      if (index < 0x100) {\n        if (index == 9) {\ntab_character_label2:\n          *outfputs = (char)index;\n          if (count < 2) {\n            print_formatted_output_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto invalid_character_label2;\n            goto tab_character_label2;\n          }\n          *outfputs = (char)index;\n          if (count < 2) goto printf_formatted_string_loop;\n        }\n        index = read_data_and_convert_to_unsigned_long_00103520();\n        count = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto free_memory_label;\n        if (0xff < index) goto invalid_character_label2;\n        if (index == 9) {\ntab_character_label3:\n          outfputs[1] = (char)index;\n          if (count < 3) {\n            print_formatted_input_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto invalid_character_label2;\n            goto tab_character_label3;\n          }\n          outfputs[1] = (char)index;\n          if (count < 3) {\n            index = 2;\n            break;\n          }\n        }\n        index = read_data_and_convert_to_unsigned_long_00103520();\n        count = DAT_00108374;\n        if (index == 0xffffffffffffffff) {\nfree_memory_label:\n          free_memory(outfputs);\n          return;\n        }\n        if (0xff < index) goto invalid_character_label2;\n        if (index == 9) {\ntab_character_label4:\n          outfputs[2] = (char)index;\n        }\n        else {\n          if ((*(ushort *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&character_table + index * 2) & 0x40) == 0))))\n            goto invalid_character_label2;\n            goto tab_character_label4;\n          }\n          outfputs[2] = (char)index;\n        }\n        if (3 < count) {\n          index = 3;\n          do {\n            character = read_data_and_convert_to_unsigned_long_00103520();\n            if (character == 0xffffffffffffffff) goto free_memory_label;\n            if (0xff < character) goto invalid_character_label2;\n            if (((character != 9) && ((*(ushort *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto invalid_character_label2;\n              if ((*(ushort *)(&character_table + character * 2) & 0x40) == 0) {\n                process_input_data_001034d5();\n                return;\n              }\n            }\n            count = (int)index + 1;\n            index = (ulong)count;\n            flag = DAT_00108374 <= count;\n            outfputs[index] = (char)character;\n            index = index;\n            if (flag) goto continue_printf_loop;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\ninvalid_character_label2:\n      update_data_and_pointer_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_output_001034fa",
            "entrypoint": "0x001034fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001034fa": "print_formatted_output_001034fa",
                "LAB_00102381": "tab_character_label4",
                "LAB_001023bb": "tab_character_label3",
                "LAB_001023f5": "tab_character_label2",
                "LAB_00102438": "tab_character_label",
                "LAB_0010348e": "invalid_character_label",
                "LAB_001034be": "free_memory_label",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "flag",
                "code_r0x001034d5": "invalid_character_label2",
                "code_r0x001034fa": "print_formatted_string_loop",
                "fputs": "put_string",
                "free": "free_memory",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "delimiter",
                "joined_r0x0010341b": "continue_print_loop",
                "printf": "print",
                "putc": "write_character",
                "uVar1": "character",
                "uVar2": "count",
                "uVar3": "index",
                "uVar4": "index",
                "unaff_R14": "output_string",
                "unaff_R15": "format_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103510": {
            "additional_data": {
                "DAT_00108358": {
                    "end_of_line": 1,
                    "end_of_line_string": 1,
                    "end_of_string": 1,
                    "output_string": 1
                },
                "DAT_00108360": {
                    "char_type": 1,
                    "identifier": 1,
                    "is_string_uppercase": 1,
                    "type_flag": 1
                },
                "DAT_00108371": {
                    "has_label": 1,
                    "is_prompt_enabled": 1,
                    "print_prompt": 1,
                    "should_print_input": 1
                },
                "DAT_00108372": {
                    "has_newline": 1,
                    "is_formatted_output_enabled": 1,
                    "should_filter_chars": 1,
                    "use_format_options": 1
                },
                "DAT_00108373": {
                    "check_flag": 1,
                    "is_whitespace_enabled": 1,
                    "should_check_table": 1,
                    "use_istable": 1
                },
                "DAT_00108374": {
                    "buffer_size": 1,
                    "end_of_output": 1,
                    "remaining_input_chars": 1
                },
                "FUN_0010286f": {
                    "handle_uppercase_string": 1
                },
                "FUN_00103510": {
                    "print_and_filter_chars": 1,
                    "print_decompiled_code": 1,
                    "print_decompiled_function": 1,
                    "print_formatted_data": 2,
                    "print_formatted_input": 1,
                    "print_formatted_output": 9,
                    "print_formatted_string": 7,
                    "print_formatted_text": 4,
                    "print_reverse_string": 1,
                    "print_string": 2,
                    "print_string_and_characters": 1,
                    "print_string_with_formatting": 1
                },
                "FUN_00103520": {
                    "get_input_char": 1
                },
                "FUN_00103810": {
                    "cleanup_memory": 1
                },
                "LAB_00102381": {
                    "handle_tab_char": 1,
                    "tab_character3": 1,
                    "third_character": 1
                },
                "LAB_001023bb": {
                    "handle_tab_char": 1,
                    "second_character": 1,
                    "tab_character2": 1
                },
                "LAB_001023f5": {
                    "handle_tab_char": 1,
                    "tab_character1": 1,
                    "tab_character_loop": 1
                },
                "LAB_00102438": {
                    "handle_tab_char": 1,
                    "tab_character": 2
                },
                "LAB_0010341b": {
                    "loop_start": 1
                },
                "LAB_0010348e": {
                    "end_loop": 1,
                    "handle_invalid_char": 1,
                    "invalid_character": 1
                },
                "LAB_001034be": {
                    "cleanup_and_exit": 1,
                    "cleanup_and_return": 1,
                    "end_function": 1
                },
                "LAB_001034d5": {
                    "error_handler": 1,
                    "handle_invalid_char": 1
                },
                "_sch_istable": {
                    "char_table": 2,
                    "character_table": 10
                },
                "_stdout": {
                    "output_file": 1,
                    "output_stream": 4,
                    "standard_output": 5,
                    "stdout": 1
                },
                "bVar5": {
                    "condition": 2,
                    "continue_loop": 2,
                    "flag": 4,
                    "is_char_valid": 1,
                    "is_end": 5,
                    "is_end_of_buffer": 2,
                    "is_end_of_file": 1,
                    "is_invalid": 1,
                    "is_less_than": 2,
                    "is_output_buffer_full": 1,
                    "is_output_string_truncated": 1,
                    "is_true": 1,
                    "is_valid": 3,
                    "is_valid_character": 1,
                    "needs_break": 1,
                    "should_continue": 1
                },
                "char": {
                    "char_value": 1
                },
                "code_r0x001034d5": {
                    "end": 1
                },
                "code_r0x00103510": {
                    "part2": 1,
                    "print_formatted_output_recursive": 1,
                    "print_formatted_string_loop": 1,
                    "print_formatted_text_loop": 1,
                    "print_output": 1,
                    "start": 1
                },
                "fputs": {
                    "print_string": 1,
                    "write_string": 2
                },
                "free": {
                    "release_memory": 3
                },
                "getchar": {
                    "read_character": 1
                },
                "in_stack_00000010": {
                    "filename": 1,
                    "format_specifier": 1,
                    "header_string": 1,
                    "input_string": 4,
                    "label": 4,
                    "message": 1,
                    "optional_prefix": 1,
                    "prefix": 5,
                    "prompt": 5,
                    "prompt_message": 2,
                    "prompt_string": 3,
                    "prompt_text": 2,
                    "title": 1
                },
                "in_stack_00000038": {
                    "additional_label": 1,
                    "additional_option": 1,
                    "arg2": 1,
                    "delimiter": 2,
                    "delimiter_string": 2,
                    "extra_data": 1,
                    "extra_message": 1,
                    "format_arg": 1,
                    "format_specifier_copy": 1,
                    "input_flag": 1,
                    "input_specifier": 1,
                    "input_string2": 1,
                    "next_input_string": 1,
                    "optional_suffix": 1,
                    "param": 1,
                    "print_flag2": 1,
                    "prompt_enabled": 1,
                    "separator_message": 1,
                    "separator_string": 2,
                    "stack_value": 1,
                    "string_to_print": 1,
                    "suffix": 5,
                    "text": 1,
                    "unused_parameter": 1
                },
                "int": {
                    "integer_value": 1
                },
                "joined_r0x0010341b": {
                    "loop_continue": 1,
                    "loop_label": 1,
                    "part1": 1,
                    "print_formatted_text_loop_repeat": 1
                },
                "labs": {
                    "absolute_value": 1
                },
                "printf": {
                    "print_formatted_output": 1,
                    "print_string": 2
                },
                "putc": {
                    "print_character": 1,
                    "write_char": 1,
                    "write_character": 1
                },
                "putchar": {
                    "print_character": 1
                },
                "sizeof_variant_1": {
                    "variant_size": 1
                },
                "stdoutput": {
                    "standard_output": 1
                },
                "uVar1": {
                    "byte_value": 2,
                    "c": 1,
                    "ch": 2,
                    "char_code": 5,
                    "char_val": 1,
                    "char_value": 3,
                    "character": 9,
                    "current_char": 3,
                    "input_char": 1,
                    "value1": 1
                },
                "uVar2": {
                    "array_length": 1,
                    "buffer_index": 1,
                    "buffer_length": 2,
                    "buffer_size": 2,
                    "char_count": 1,
                    "count": 1,
                    "counter": 1,
                    "current_index": 1,
                    "data_size": 1,
                    "delimiter_count": 1,
                    "format_length": 1,
                    "i": 1,
                    "index": 2,
                    "length": 2,
                    "loop_counter": 2,
                    "loop_counter3": 1,
                    "loop_index": 1,
                    "max_output_string_length": 1,
                    "num_characters": 1,
                    "num_chars": 1,
                    "output_buffer_length": 1,
                    "remaining_chars": 1,
                    "value2": 1
                },
                "uVar3": {
                    "buffer_index": 1,
                    "char_index": 1,
                    "counter": 1,
                    "current_index": 2,
                    "i": 2,
                    "index": 13,
                    "loop_counter2": 1,
                    "output_index": 3,
                    "output_length": 1,
                    "output_string_length": 1,
                    "position": 1,
                    "value3": 1
                },
                "uVar4": {
                    "count": 4,
                    "counter": 2,
                    "current_index": 1,
                    "index": 5,
                    "j": 1,
                    "length": 1,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "loop_index": 1,
                    "output_index": 1,
                    "output_string_index": 1,
                    "state": 3,
                    "status": 1,
                    "string_index": 1,
                    "value": 2,
                    "value4": 1
                },
                "uchar": {
                    "unsigned_char_value": 1
                },
                "unaff_R14": {
                    "buffer": 4,
                    "formatted_string": 2,
                    "formatted_text": 2,
                    "output_array": 1,
                    "output_buffer": 6,
                    "output_string": 12,
                    "str_buffer": 1,
                    "string_buffer": 3
                },
                "unaff_R15": {
                    "arg": 1,
                    "argument": 1,
                    "format": 1,
                    "format_options": 1,
                    "format_specifier": 4,
                    "format_string": 16,
                    "input_string": 2,
                    "option": 1,
                    "output_file": 2,
                    "print_flag": 2
                },
                "ushort": {
                    "unsigned_short_value": 1
                },
                "void": {
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid print_formatted_input_00103510(void)\n\n{\n  ulong character;\n  uinteger_value index;\n  ulong index;\n  ulong index;\n  char_value *output_string;\n  undefined8 format_string;\n  bool is_end;\n  undefined8 prefix;\n  undefined8 suffix;\n  \nprint_formatted_string_loop:\n  index = 2;\nloop_continue:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prefix);\n    }\n    if (DAT_00108372 == '\\0') {\n      output_string[index] = '\\0';\n      fputs(output_string,standard_output);\n    }\n    else {\n      FUN_0010286f(format_string);\n      output_string[index] = '\\0';\n      fputs(output_string,standard_output);\n    }\n    while (index = read_data_and_convert_to_unsigned_long_00103520(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\ninvalid_character:\n        update_data_and_pointer_00103810();\n        break;\n      }\n      if (index == 9) {\ntab_character:\n        putc((integer_value)index,standard_output);\n      }\n      else {\n        if ((*(unsigned_short_value *)(&character_table + index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(unsigned_short_value *)(&character_table + index * 2) & 0x40) == 0))))\n          goto invalid_character;\n          goto tab_character;\n        }\n        putc((integer_value)index,standard_output);\n      }\n    }\n    if (DAT_00108358 == (char_value *)0x0) {\n      putc(10,standard_output);\n    }\n    else {\n      fputs(DAT_00108358,standard_output);\n    }\n    while (index = (ulong)DAT_00108374, format_string = suffix, DAT_00108374 != 0) {\n      index = read_data_and_convert_to_unsigned_long_00103520();\n      index = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto cleanup_and_return;\n      if (index < 0x100) {\n        if (index == 9) {\ntab_character_loop:\n          *output_string = (char_value)index;\n          if (index < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(unsigned_short_value *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(unsigned_short_value *)(&character_table + index * 2) & 0x40) == 0))))\n            goto end;\n            goto tab_character_loop;\n          }\n          *output_string = (char_value)index;\n          if (index < 2) {\n            index = 1;\n            break;\n          }\n        }\n        index = read_data_and_convert_to_unsigned_long_00103520();\n        index = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto cleanup_and_return;\n        if (0xff < index) goto end;\n        if (index == 9) {\nsecond_character:\n          output_string[1] = (char_value)index;\n          if (index < 3) {\n            print_formatted_input_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(unsigned_short_value *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(unsigned_short_value *)(&character_table + index * 2) & 0x40) == 0))))\n            goto end;\n            goto second_character;\n          }\n          output_string[1] = (char_value)index;\n          if (index < 3) goto print_formatted_string_loop;\n        }\n        index = read_data_and_convert_to_unsigned_long_00103520();\n        index = DAT_00108374;\n        if (index == 0xffffffffffffffff) {\ncleanup_and_return:\n          free(output_string);\n          return;\n        }\n        if (0xff < index) goto end;\n        if (index == 9) {\nhandle_tab_char:\n          output_string[2] = (char_value)index;\n        }\n        else {\n          if ((*(unsigned_short_value *)(&character_table + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(unsigned_short_value *)(&character_table + index * 2) & 0x40) == 0))))\n            goto end;\n            goto handle_tab_char;\n          }\n          output_string[2] = (char_value)index;\n        }\n        if (3 < index) {\n          index = 3;\n          do {\n            character = read_data_and_convert_to_unsigned_long_00103520();\n            if (character == 0xffffffffffffffff) goto cleanup_and_return;\n            if (0xff < character) goto end;\n            if (((character != 9) && ((*(unsigned_short_value *)(&character_table + character * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)character < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto end;\n              if ((*(unsigned_short_value *)(&character_table + character * 2) & 0x40) == 0) {\n                process_input_data_001034d5();\n                return;\n              }\n            }\n            index = (integer_value)index + 1;\n            index = (ulong)index;\n            is_end = DAT_00108374 <= index;\n            output_string[index] = (char_value)character;\n            index = index;\n            if (is_end) goto loop_continue;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\nend:\n      update_data_and_pointer_00103810();\n    }\n  } while( true );\n}\n\n",
            "current_name": "print_formatted_input_00103510",
            "entrypoint": "0x00103510",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103510": "print_formatted_input_00103510",
                "LAB_00102381": "handle_tab_char",
                "LAB_001023bb": "second_character",
                "LAB_001023f5": "tab_character_loop",
                "LAB_00102438": "tab_character",
                "LAB_0010348e": "invalid_character",
                "LAB_001034be": "cleanup_and_return",
                "_sch_istable": "character_table",
                "_stdout": "standard_output",
                "bVar5": "is_end",
                "char": "char_value",
                "code_r0x001034d5": "end",
                "code_r0x00103510": "print_formatted_string_loop",
                "fputs": "write_string",
                "free": "release_memory",
                "in_stack_00000010": "prefix",
                "in_stack_00000038": "suffix",
                "int": "integer_value",
                "joined_r0x0010341b": "loop_continue",
                "printf": "print_string",
                "putc": "write_char",
                "uVar1": "character",
                "uVar2": "index",
                "uVar3": "index",
                "uVar4": "index",
                "unaff_R14": "output_string",
                "unaff_R15": "format_string",
                "ushort": "unsigned_short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103520": {
            "additional_data": {
                "DAT_0010834c": {
                    "total_iterations": 1
                },
                "DAT_00108360": {
                    "conversion_mode": 1
                },
                "FUN_00103520": {
                    "decode_and_read_data": 1,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "extract_data_from_io_file": 1,
                    "parse_data": 1,
                    "read_and_combine_bytes": 1,
                    "read_and_convert_bytes": 2,
                    "read_and_convert_data": 2,
                    "read_and_process_data": 1,
                    "read_and_reverse_data": 1,
                    "read_bytes": 3,
                    "read_bytes_from_file": 2,
                    "read_data": 9,
                    "read_data_and_convert_to_unsigned_long": 1
                },
                "_IO_FILE": {
                    "file": 2,
                    "file_descriptor": 1,
                    "file_ptr": 1
                },
                "__uflow": {
                    "read_next_byte": 1
                },
                "bVar1": {
                    "byte": 2,
                    "byte_val": 3,
                    "byte_value": 17,
                    "current_byte": 4,
                    "data_byte": 1
                },
                "iVar6": {
                    "count": 1,
                    "counter": 8,
                    "i": 1,
                    "index": 1,
                    "iteration": 3,
                    "iterator": 1,
                    "loop_count": 2,
                    "loop_counter": 6,
                    "num_iterations": 1,
                    "remaining": 1,
                    "temp_2": 1,
                    "temp_count": 1,
                    "temp_var2": 1
                },
                "iVar7": {
                    "data_length": 2,
                    "expected_bytes": 1,
                    "expected_count": 1,
                    "expected_num_bytes": 2,
                    "length": 1,
                    "limit": 1,
                    "loop_limit": 1,
                    "max_counter": 1,
                    "max_iteration": 1,
                    "num_bytes_expected": 1,
                    "num_bytes_to_read": 1,
                    "required_bytes": 3,
                    "target_count": 1,
                    "total_bytes": 4,
                    "total_bytes_count": 1,
                    "total_count": 3,
                    "total_iterations": 3
                },
                "param_1": {
                    "file": 28,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "input_file": 1
                },
                "param_2": {
                    "byte_count": 3,
                    "count": 7,
                    "counter": 1,
                    "data_length": 1,
                    "decoded_data_length": 1,
                    "length": 1,
                    "num": 1,
                    "num_bytes_read": 7,
                    "num_read": 2,
                    "offset": 1,
                    "output_count": 1,
                    "read_count": 2,
                    "total_bytes": 1,
                    "total_read": 2
                },
                "param_3": {
                    "byte_remaining": 1,
                    "count": 2,
                    "input_count": 1,
                    "length": 1,
                    "num_bytes_remaining": 5,
                    "num_bytes_to_read": 2,
                    "remaining": 9,
                    "remaining_bytes": 4,
                    "remaining_count": 5,
                    "remaining_data_count": 1
                },
                "param_4": {
                    "buffer": 16,
                    "byte_data": 1,
                    "bytes": 1,
                    "data": 9,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_buffer": 1
                },
                "pbVar2": {
                    "byte_pointer": 5,
                    "byte_ptr": 6,
                    "current_byte": 6,
                    "current_byte_ptr": 2,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "data_ptr": 1,
                    "ptr": 4,
                    "read_ptr": 1
                },
                "reverse_bits_00102771": {
                    "reverse_bits": 1
                },
                "uVar3": {
                    "byte_count": 1,
                    "byte_value": 1,
                    "flow_result": 4,
                    "flow_ret_val": 1,
                    "flow_val": 1,
                    "read_result": 7,
                    "read_value": 1,
                    "result": 7,
                    "temp": 2,
                    "uflow_result": 3
                },
                "uVar4": {
                    "byte_result": 2,
                    "byte_value": 2,
                    "byte_value2": 1,
                    "byte_variable": 1,
                    "converted_byte": 2,
                    "current_value": 1,
                    "flow_byte": 1,
                    "result_byte": 1,
                    "temp": 3,
                    "temp2": 1,
                    "temp_1": 1,
                    "temp_val": 2,
                    "temp_value": 9,
                    "temp_var": 1
                },
                "uVar5": {
                    "combined_value": 1,
                    "converted_data": 2,
                    "converted_value": 2,
                    "data": 1,
                    "data_value": 1,
                    "decoded_data": 1,
                    "final_val": 1,
                    "final_value": 2,
                    "result": 16,
                    "value": 1
                }
            },
            "called": [
                "__uflow",
                "FUN_00102771"
            ],
            "calling": [
                "FUN_0010259a"
            ],
            "code": "\nulong read_data_and_convert_to_unsigned_long_00103520(file *file,long *num_bytes_read,int *remaining,byte **buffer)\n\n{\n  byte byte_value;\n  byte *byte_ptr;\n  uint result;\n  ulong temp_value;\n  ulong result;\n  int counter;\n  int total_bytes;\n  \n  total_bytes = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    result = 0;\n    if (DAT_00108360 == 'L') {\n      result = reverse_bits();\n      return result;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (file *)0x0) {\n    result = 0;\n    counter = 0;\n    do {\n      if (*remaining == 0) {\n        return 0xffffffffffffffff;\n      }\n      counter = counter + 1;\n      *remaining = *remaining + -1;\n      byte_ptr = *buffer;\n      *buffer = byte_ptr + 1;\n      byte_value = *byte_ptr;\n      *num_bytes_read = *num_bytes_read + 1;\n      result = result << 8 | (ulong)byte_value;\n    } while (counter != total_bytes);\n  }\n  else if (*remaining == 0) {\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= byte_ptr) {\n      result = __uflow(file);\n      result = (ulong)(result & 0xff);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(byte_ptr + 1);\n    result = (ulong)*byte_ptr;\n    *num_bytes_read = *num_bytes_read + 1;\n    counter = 0;\n    if (total_bytes == 1) goto LAB_00103610;\nLAB_00103574:\n    byte_ptr = (byte *)file->_IO_read_ptr;\n    if (byte_ptr < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(byte_ptr + 1);\n      byte_value = *byte_ptr;\n      *num_bytes_read = *num_bytes_read + 1;\n      result = result << 8 | (ulong)byte_value;\n      if (DAT_0010834c < 3) goto LAB_00103610;\nLAB_001035a1:\n      byte_ptr = (byte *)file->_IO_read_ptr;\n      if (byte_ptr < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(byte_ptr + 1);\n        byte_value = *byte_ptr;\n        *num_bytes_read = *num_bytes_read + 1;\n        result = result << 8 | (ulong)byte_value;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n      }\n      else {\n        result = __uflow(file);\n        if (result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        temp_value = (ulong)(result & 0xff);\nLAB_00103717:\n        *num_bytes_read = *num_bytes_read + 1;\n        result = result << 8 | temp_value;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n        counter = *remaining;\n      }\n      total_bytes = 3;\n      while( true ) {\n        if (counter == 0) {\n          while (byte_ptr = (byte *)file->_IO_read_ptr, byte_ptr < file->_IO_read_end) {\n            total_bytes = total_bytes + 1;\n            file->_IO_read_ptr = (char *)(byte_ptr + 1);\n            byte_value = *byte_ptr;\n            *num_bytes_read = *num_bytes_read + 1;\n            result = result << 8 | (ulong)byte_value;\n            if (DAT_0010834c <= total_bytes) goto LAB_00103610;\n          }\n          result = __uflow(file);\n          if (result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          temp_value = (ulong)(result & 0xff);\n        }\n        else {\n          byte_ptr = *buffer;\n          *remaining = counter + -1;\n          *buffer = byte_ptr + 1;\n          temp_value = (ulong)*byte_ptr;\n        }\n        *num_bytes_read = *num_bytes_read + 1;\n        total_bytes = total_bytes + 1;\n        result = result << 8 | temp_value;\n        if (DAT_0010834c <= total_bytes) break;\n        counter = *remaining;\n      }\n    }\n    else {\n      result = __uflow(file);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      temp_value = (ulong)(result & 0xff);\nLAB_001036dd:\n      *num_bytes_read = *num_bytes_read + 1;\n      result = result << 8 | temp_value;\n      if (2 < DAT_0010834c) {\n        counter = *remaining;\n        if (counter == 0) goto LAB_001035a1;\n        byte_ptr = *buffer;\n        *remaining = counter + -1;\n        *buffer = byte_ptr + 1;\n        temp_value = (ulong)*byte_ptr;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    byte_ptr = *buffer;\n    *remaining = *remaining + -1;\n    *buffer = byte_ptr + 1;\n    result = (ulong)*byte_ptr;\nLAB_001036aa:\n    *num_bytes_read = *num_bytes_read + 1;\n    if (1 < DAT_0010834c) {\n      counter = *remaining;\n      if (counter == 0) goto LAB_00103574;\n      byte_ptr = *buffer;\n      *remaining = counter + -1;\n      *buffer = byte_ptr + 1;\n      temp_value = (ulong)*byte_ptr;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (DAT_00108360 == 'L') {\n    result = reverse_bits();\n    return result;\n  }\nLAB_0010361f:\n  if (DAT_00108360 == 'l') {\n    result = result >> 8 & 0xff | (result & 0xff) << 8;\n  }\n  return result;\n}\n\n",
            "current_name": "read_data_and_convert_to_unsigned_long_00103520",
            "entrypoint": "0x00103520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103520": "read_data_and_convert_to_unsigned_long_00103520",
                "_IO_FILE": "file",
                "__uflow": "read_next_byte",
                "bVar1": "byte_value",
                "iVar6": "counter",
                "iVar7": "total_bytes",
                "param_1": "file",
                "param_2": "num_bytes_read",
                "param_3": "remaining",
                "param_4": "buffer",
                "pbVar2": "byte_ptr",
                "reverse_bits_00102771": "reverse_bits",
                "uVar3": "result",
                "uVar4": "temp_value",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103810": {
            "additional_data": {
                "DAT_00108348": {
                    "result": 1,
                    "updated_value": 1
                },
                "DAT_0010834c": {
                    "count_value": 1,
                    "limit": 1,
                    "num_elements": 1
                },
                "DAT_00108360": {
                    "control_char": 1,
                    "flag": 1,
                    "value_char": 1
                },
                "FUN_00103810": {
                    "adjust_data": 1,
                    "adjust_pointer_and_counter": 1,
                    "calculate_adjustment": 1,
                    "calculate_and_update_parameters": 1,
                    "calculate_new_values": 3,
                    "calculate_value": 1,
                    "calculate_value_and_update_pointers": 1,
                    "compute_offsets": 1,
                    "compute_updated_data": 1,
                    "update_data": 7,
                    "update_data_and_pointer": 2,
                    "update_param_and_var": 2,
                    "update_param_data": 1,
                    "update_parameter": 1,
                    "update_parameters_and_variables": 1,
                    "update_pointer_and_data": 2,
                    "update_values": 3
                },
                "_DAT_00108349": {
                    "result_short": 1,
                    "shifted_value": 1,
                    "updated_value_short": 1
                },
                "iVar1": {
                    "check_value": 1,
                    "count": 1,
                    "count_value": 1,
                    "counter_value": 9,
                    "current": 1,
                    "current_flag": 1,
                    "current_value": 1,
                    "data_ptr2_value": 1,
                    "existing_counter_value": 1,
                    "existing_offset": 1,
                    "flag_value": 2,
                    "param2_value": 1,
                    "param_3_value": 1,
                    "pointer2_value": 1,
                    "temp_2": 1,
                    "temp_counter": 3,
                    "temp_var1": 2,
                    "temp_variable1": 1
                },
                "iVar3": {
                    "adjusted_count": 1,
                    "adjusted_offset": 1,
                    "count_minus_one": 1,
                    "counter_minus_one": 1,
                    "decremented_counter": 1,
                    "new_count": 1,
                    "new_counter": 1,
                    "old_counter_value": 1,
                    "param2_value_minus_1": 1,
                    "prev": 1,
                    "previous_counter": 1,
                    "previous_counter_value": 1,
                    "temp_1": 1,
                    "temp_counter2": 1,
                    "temp_value": 1,
                    "temp_var3": 2,
                    "temp_variable2": 1,
                    "updated_counter": 4,
                    "updated_counter_value": 2,
                    "updated_data_ptr2_value": 1,
                    "updated_flag": 3,
                    "updated_param_3_value": 1,
                    "updated_pointer2_value": 1
                },
                "initialize_pointer_and_data_0010282b": {
                    "initialize_pointer_and_data": 3
                },
                "lVar2": {
                    "constant_value": 7,
                    "count": 1,
                    "counter_offset": 1,
                    "data": 2,
                    "data_length": 1,
                    "data_size": 4,
                    "data_value": 2,
                    "last_value": 1,
                    "length": 1,
                    "lower_limit": 1,
                    "original_data_value": 1,
                    "param2_value_minus_1_cast": 1,
                    "param_1_value": 1,
                    "previous_count": 1,
                    "temp_3": 1,
                    "temp_var2": 2
                },
                "param_1": {
                    "initial_value": 1,
                    "input": 2,
                    "input_data": 1,
                    "input_value": 8,
                    "new_data": 1,
                    "new_param1": 1,
                    "new_value": 6,
                    "param": 1,
                    "param_value": 1,
                    "value": 7,
                    "value_to_update": 1
                },
                "param_2": {
                    "address_of_param_2": 1,
                    "data_pointer": 4,
                    "data_ptr": 6,
                    "data_ptr_1": 1,
                    "offset": 1,
                    "original_data": 1,
                    "output_value": 2,
                    "output_value1": 1,
                    "param2": 1,
                    "param_ptr1": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "previous_value": 1,
                    "ptr": 1,
                    "ptr_value": 1,
                    "result": 1,
                    "result1": 1,
                    "result_1": 2,
                    "updated_pointer": 1,
                    "value1": 1
                },
                "param_3": {
                    "address_of_param_3": 1,
                    "count": 2,
                    "count_ptr": 1,
                    "counter": 10,
                    "counter_ptr": 3,
                    "data_ptr_2": 1,
                    "flag": 2,
                    "flag_ptr": 1,
                    "offset": 1,
                    "output_value2": 1,
                    "param3": 1,
                    "param_ptr2": 1,
                    "pointer2": 1,
                    "result2": 1,
                    "result_2": 2,
                    "value2": 1
                },
                "param_4": {
                    "address_of_param_4": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr_3": 1,
                    "output_ptr": 1,
                    "output_value3": 1,
                    "param4": 1,
                    "param_ptr3": 1,
                    "pointer": 2,
                    "pointer3": 1,
                    "pointer_to_data": 2,
                    "pointer_to_data_array": 1,
                    "result": 2,
                    "result3": 1,
                    "result_3": 2,
                    "result_pointer": 3,
                    "result_ptr": 6,
                    "temp_pointer": 1,
                    "value3": 1
                }
            },
            "called": [
                "FUN_0010282b",
                "FUN_001027e2"
            ],
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "code": "\n\n\nvoid update_data_and_pointer_00103810(undefined8 input_value,long *data_ptr,int *counter,long *result_ptr)\n\n{\n  int counter_value;\n  long constant_value;\n  int updated_counter;\n  \n  constant_value = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  updated_counter = DAT_0010834c + -1;\n  *data_ptr = *data_ptr - (long)updated_counter;\n  counter_value = *counter;\n  if (counter_value == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)input_value;\n          *counter = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)input_value << 8 | (ushort)input_value >> 8;\n            DAT_00108348 = (undefined)((ulong)input_value >> 0x10);\n            *counter = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            initialize_pointer_and_data();\n            return;\n          }\n        }\n      }\n      *result_ptr = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)input_value >> 8);\n    *counter = 1;\n    *result_ptr = (long)&DAT_00108348;\n  }\n  else {\n    *result_ptr = *result_ptr + (1 - constant_value);\n    *counter = updated_counter + counter_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_and_pointer_00103810",
            "entrypoint": "0x00103810",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103810": "update_data_and_pointer_00103810",
                "iVar1": "counter_value",
                "iVar3": "updated_counter",
                "initialize_pointer_and_data_0010282b": "initialize_pointer_and_data",
                "lVar2": "constant_value",
                "param_1": "input_value",
                "param_2": "data_ptr",
                "param_3": "counter",
                "param_4": "result_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103890": {
            "additional_data": {
                "FUN_00103890": {
                    "print_conditionally_formatted_value": 1,
                    "print_formatted_value": 2,
                    "print_function": 1,
                    "print_if_condition_true": 1,
                    "print_if_debug": 2,
                    "print_if_enabled": 3,
                    "print_if_flag_enabled": 1,
                    "print_if_flag_set": 3,
                    "print_if_needed": 2,
                    "print_if_nonzero": 1,
                    "print_if_not_empty": 6,
                    "print_if_not_null": 1,
                    "print_if_verbose": 2,
                    "print_message_if_enabled": 1,
                    "print_message_if_logging_enabled": 1,
                    "print_optional_value": 1,
                    "print_param_and_value": 1,
                    "print_value_if_enabled": 1
                },
                "param_1": {
                    "formatted_string": 1,
                    "label": 2,
                    "message": 27,
                    "string": 1
                },
                "param_2": {
                    "value": 29,
                    "value_to_print": 2
                },
                "print_formatted_value_0010286f": {
                    "print_formatted_value": 4,
                    "print_value_with_format": 1
                },
                "printf": {
                    "print": 1,
                    "print_message": 1,
                    "print_with_prefix": 1
                }
            },
            "called": [
                "FUN_00102853"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "code": "\nvoid print_if_not_empty_00103890(undefined8 message,undefined8 value)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  printf_formatted_value(value);\n  return;\n}\n\n",
            "current_name": "print_if_not_empty_00103890",
            "entrypoint": "0x00103890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103890": "print_if_not_empty_00103890",
                "param_1": "message",
                "param_2": "value",
                "print_formatted_value_0010286f": "print_formatted_value",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001038b0": {
            "additional_data": {
                "10": {
                    "newline": 1
                },
                "FUN_001038b0": {
                    "print_error": 1,
                    "print_error_message": 29,
                    "print_formatted_message": 1
                },
                "__gnuc_va_list": {
                    "va_list": 1
                },
                "_stderr": {
                    "": 1,
                    "error_file": 1,
                    "error_output": 1,
                    "error_stream": 2,
                    "standard_error": 14,
                    "stderr": 3,
                    "stderr_stream": 2
                },
                "_stdout": {
                    "": 1,
                    "output_file": 1,
                    "standard_output": 15,
                    "stdout": 3,
                    "stdout_stream": 2
                },
                "fflush": {
                    "clear_output_buffer": 1,
                    "flush_output": 1,
                    "flush_output_buffer": 1,
                    "flush_standard_output": 1
                },
                "fprintf": {
                    "format_and_print_error": 1,
                    "format_error_message": 1,
                    "print_formatted": 3
                },
                "fwrite": {
                    "write_formatted": 1
                },
                "param_1": {
                    "error_message": 16,
                    "format_string": 3,
                    "message": 10,
                    "message_format": 2
                },
                "param_2": {
                    "args": 19,
                    "argument_list": 1,
                    "arguments": 8,
                    "format_arguments": 1,
                    "var_args": 1,
                    "variable_arguments": 1
                },
                "param_3": {
                    "format": 1
                },
                "putc": {
                    "": 1,
                    "print_new_line": 1,
                    "put_character": 5,
                    "write_character": 3,
                    "write_character_to_error": 1,
                    "write_to_standard_error": 1
                },
                "vfprintf": {
                    "format_and_print": 1,
                    "print_formatted_arguments": 1
                }
            },
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "calling": [
                "FUN_00104a60",
                "FUN_00103910"
            ],
            "code": "\n\n\nvoid print_error_message_001038b0(char *error_message,va_list args)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_00108378);\n  vfprintf(standard_error,error_message,args);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_001038b0",
            "entrypoint": "0x001038b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001038b0": "print_error_message_001038b0",
                "__gnuc_va_list": "va_list",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "fprintf": "print_formatted",
                "param_1": "error_message",
                "param_2": "args",
                "putc": "put_character",
                "vfprintf": "format_and_print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103910": {
            "additional_data": {
                "FUN_00103910": {
                    "print_error": 4,
                    "print_error_message": 26,
                    "print_error_message_with_params": 1
                },
                "in_AL": {
                    "boolean_flag": 1,
                    "call_flag": 1,
                    "check_input": 1,
                    "condition": 4,
                    "condition_flag": 1,
                    "enable_printing": 1,
                    "flag": 9,
                    "flag_condition": 1,
                    "is_enabled": 1,
                    "is_error": 5,
                    "is_error_on": 1,
                    "should_print_error": 1,
                    "some_flag": 1,
                    "status": 1
                },
                "local_18": {
                    "arg8_copy": 1,
                    "error8": 1,
                    "error_code8": 2,
                    "error_code8_out": 1,
                    "error_param_8": 1,
                    "local13": 1,
                    "local8": 1,
                    "local_arg8": 1,
                    "local_error_code8": 1,
                    "local_flag8": 1,
                    "local_param8": 3,
                    "local_variable_12": 1,
                    "message_arg8": 1,
                    "param8": 3,
                    "param8_copy": 6,
                    "param_8": 2,
                    "param_8_copy": 2
                },
                "local_28": {
                    "arg7_copy": 1,
                    "error7": 1,
                    "error_code7": 2,
                    "error_code7_out": 1,
                    "error_param_7": 1,
                    "local12": 1,
                    "local7": 1,
                    "local_arg7": 1,
                    "local_error_code7": 1,
                    "local_flag7": 1,
                    "local_param7": 3,
                    "local_variable_11": 1,
                    "message_arg7": 1,
                    "param7": 3,
                    "param7_copy": 6,
                    "param_7": 2,
                    "param_7_copy": 2
                },
                "local_38": {
                    "arg6_copy": 1,
                    "error6": 1,
                    "error_code6": 2,
                    "error_code6_out": 1,
                    "error_param_6": 1,
                    "local11": 1,
                    "local6": 1,
                    "local_arg6": 1,
                    "local_error_code6": 1,
                    "local_flag6": 1,
                    "local_param6": 3,
                    "local_variable_10": 1,
                    "message_arg6": 1,
                    "param6": 3,
                    "param6_copy": 6,
                    "param_6": 2,
                    "param_6_copy": 2
                },
                "local_48": {
                    "arg5_copy": 1,
                    "error5": 1,
                    "error_code5": 2,
                    "error_code5_out": 1,
                    "error_param_5": 1,
                    "local10": 1,
                    "local5": 1,
                    "local_arg5": 1,
                    "local_error_code5": 1,
                    "local_flag5": 1,
                    "local_param5": 3,
                    "local_variable_9": 1,
                    "message_arg5": 1,
                    "param5": 3,
                    "param5_copy": 6,
                    "param_5": 2,
                    "param_5_copy": 2
                },
                "local_58": {
                    "arg4_copy": 1,
                    "error4": 1,
                    "error_code4": 2,
                    "error_code4_out": 1,
                    "error_param_4": 1,
                    "local4": 1,
                    "local9": 1,
                    "local_arg4": 1,
                    "local_error_code4": 1,
                    "local_flag4": 1,
                    "local_param4": 3,
                    "local_variable_8": 1,
                    "message_arg4": 1,
                    "param4": 3,
                    "param4_copy": 6,
                    "param_4": 2,
                    "param_4_copy": 2
                },
                "local_68": {
                    "arg3_copy": 1,
                    "error3": 1,
                    "error_code3": 2,
                    "error_code3_out": 1,
                    "error_param_3": 1,
                    "error_severity": 1,
                    "local3": 2,
                    "local_arg3": 1,
                    "local_error_code3": 1,
                    "local_flag3": 1,
                    "local_param3": 3,
                    "local_variable_7": 1,
                    "message_arg3": 1,
                    "param3": 2,
                    "param3_copy": 6,
                    "param_3": 2,
                    "param_3_copy": 2
                },
                "local_78": {
                    "arg2_copy": 1,
                    "error2": 1,
                    "error_code2": 2,
                    "error_code2_out": 1,
                    "error_code_copy": 1,
                    "error_param_2": 1,
                    "error_type": 1,
                    "local2": 2,
                    "local_arg2": 1,
                    "local_error_code2": 1,
                    "local_flag2": 1,
                    "local_param2": 3,
                    "local_variable_6": 1,
                    "message_arg2": 1,
                    "param2": 2,
                    "param2_copy": 6,
                    "param_2": 2,
                    "param_2_copy": 1
                },
                "local_88": {
                    "error1": 1,
                    "error_code": 4,
                    "error_code1": 2,
                    "error_code1_out": 1,
                    "error_code_copy": 7,
                    "error_param_1": 1,
                    "error_type_copy": 1,
                    "local1": 2,
                    "local_arg1": 1,
                    "local_error_code": 3,
                    "local_error_code1": 1,
                    "local_flag1": 1,
                    "local_variable_5": 1,
                    "message_arg1": 1,
                    "param_1": 1,
                    "param_1_copy": 1
                },
                "local_90": {
                    "arg14_copy": 1,
                    "buffer5_ptr": 1,
                    "data6": 1,
                    "local14": 2,
                    "local8": 1,
                    "local_param14": 2,
                    "local_param5": 1,
                    "local_param_14": 1,
                    "param14": 6,
                    "param14_copy": 5,
                    "param_14": 4,
                    "param_14_copy": 2,
                    "temp14": 1,
                    "unused_param5": 1,
                    "value5": 1,
                    "value5_copy": 1
                },
                "local_98": {
                    "arg13_copy": 1,
                    "buffer4_ptr": 1,
                    "data5": 1,
                    "local13": 2,
                    "local7": 1,
                    "local_param13": 2,
                    "local_param4": 1,
                    "local_param_13": 1,
                    "param13": 6,
                    "param13_copy": 5,
                    "param_13": 4,
                    "param_13_copy": 2,
                    "temp13": 1,
                    "unused_param4": 1,
                    "value4": 1,
                    "value4_copy": 1
                },
                "local_a0": {
                    "arg12_copy": 1,
                    "buffer3_ptr": 1,
                    "data4": 1,
                    "local12": 2,
                    "local6": 1,
                    "local_param12": 2,
                    "local_param3": 1,
                    "local_param_12": 1,
                    "param12": 6,
                    "param12_copy": 5,
                    "param_12": 4,
                    "param_12_copy": 2,
                    "temp12": 1,
                    "unused_param3": 1,
                    "value3": 1,
                    "value3_copy": 1
                },
                "local_a8": {
                    "arg11_copy": 1,
                    "buffer2_ptr": 1,
                    "data3": 1,
                    "local11": 2,
                    "local5": 1,
                    "local_param11": 2,
                    "local_param2": 1,
                    "local_param_11": 1,
                    "param11": 6,
                    "param11_copy": 5,
                    "param_11": 4,
                    "param_11_copy": 2,
                    "temp11": 1,
                    "unused_param2": 1,
                    "value2": 1,
                    "value2_copy": 1
                },
                "local_b0": {
                    "arg10_copy": 1,
                    "buffer1_ptr": 1,
                    "data2": 1,
                    "local10": 2,
                    "local4": 1,
                    "local_param1": 1,
                    "local_param10": 2,
                    "local_param_10": 1,
                    "param10": 6,
                    "param10_copy": 5,
                    "param_10": 4,
                    "param_10_copy": 2,
                    "temp10": 1,
                    "unused_param1": 1,
                    "value1": 1,
                    "value1_copy": 1
                },
                "local_b8": {
                    "array_data": 1,
                    "buffer": 3,
                    "data_buffer": 1,
                    "error_buffer": 3,
                    "error_message": 2,
                    "error_string": 1,
                    "initialized_array": 1,
                    "local_array": 5,
                    "local_buffer": 6,
                    "local_char_array": 1,
                    "local_data": 1,
                    "message_buffer": 1,
                    "stack_buffer": 1,
                    "temp_buffer": 2,
                    "unused_buffer": 1
                },
                "local_c8": {
                    "array": 2,
                    "buffer": 4,
                    "buffer_ptr": 1,
                    "local_array": 2,
                    "local_b8_pointer": 1,
                    "local_buffer": 11,
                    "local_pointer": 1,
                    "local_variable_4": 1,
                    "local_variable_pointer": 1,
                    "pointer2": 2,
                    "pointer_2": 1,
                    "pointer_to_buffer": 1,
                    "pointer_to_local_buffer": 1,
                    "string_buffer": 1
                },
                "local_d0": {
                    "buffer": 7,
                    "buffer_pointer": 1,
                    "buffer_ptr": 4,
                    "local_array_pointer": 1,
                    "local_buffer": 1,
                    "local_variable_3": 1,
                    "message": 1,
                    "pointer1": 3,
                    "pointer_1": 1,
                    "pointer_to_args": 1,
                    "pointer_to_buffer_size": 1,
                    "pointer_to_stack": 1,
                    "stack_pointer": 6,
                    "stack_ptr": 1
                },
                "local_d4": {
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "constant": 2,
                    "constant_0x30": 1,
                    "error_length": 1,
                    "length": 1,
                    "local_b8_size": 1,
                    "local_var1": 1,
                    "local_variable": 1,
                    "local_variable1": 1,
                    "local_variable_2": 1,
                    "local_variable_size": 1,
                    "offset": 3,
                    "param_15": 1,
                    "size": 1,
                    "string_length": 1
                },
                "local_d8": {
                    "array_size": 1,
                    "buffer_size": 9,
                    "error_code_length": 1,
                    "error_code_ptr": 1,
                    "error_message_length": 1,
                    "length": 3,
                    "local_array_size": 1,
                    "local_size": 1,
                    "local_variable_1": 1,
                    "num_args": 1,
                    "size": 9,
                    "stack_size": 1
                },
                "param_1": {
                    "arg1": 1,
                    "error1": 1,
                    "error_code": 23,
                    "error_code1": 3,
                    "error_param_1": 1,
                    "error_type": 1,
                    "message_arg1": 1
                },
                "param_10": {
                    "arg9": 1,
                    "buffer1": 1,
                    "data1": 1,
                    "error_data2": 1,
                    "error_param1": 1,
                    "param10": 15,
                    "param_10": 7,
                    "unused_param1": 1,
                    "value1": 2
                },
                "param_11": {
                    "arg10": 1,
                    "buffer2": 1,
                    "data2": 1,
                    "error_data3": 1,
                    "error_param2": 1,
                    "param11": 15,
                    "param_11": 7,
                    "unused_param2": 1,
                    "value2": 2
                },
                "param_12": {
                    "arg11": 1,
                    "buffer3": 1,
                    "data3": 1,
                    "error_data4": 1,
                    "error_param3": 1,
                    "param12": 15,
                    "param_12": 7,
                    "unused_param3": 1,
                    "value3": 2
                },
                "param_13": {
                    "arg12": 1,
                    "buffer4": 1,
                    "data4": 1,
                    "error_data5": 1,
                    "error_param4": 1,
                    "param13": 15,
                    "param_13": 7,
                    "unused_param4": 1,
                    "value4": 2
                },
                "param_14": {
                    "arg13": 1,
                    "buffer5": 1,
                    "data5": 1,
                    "error_data6": 1,
                    "error_param5": 1,
                    "param14": 15,
                    "param_14": 7,
                    "unused_param5": 1,
                    "value5": 2
                },
                "param_2": {
                    "arg2": 3,
                    "error2": 1,
                    "error_code": 1,
                    "error_code2": 3,
                    "error_message1": 1,
                    "error_param_2": 1,
                    "error_type": 1,
                    "flag1": 1,
                    "message_arg2": 1,
                    "param2": 14,
                    "param_2": 4
                },
                "param_3": {
                    "arg3": 3,
                    "error3": 1,
                    "error_code3": 3,
                    "error_message2": 1,
                    "error_param_3": 1,
                    "error_severity": 1,
                    "flag2": 1,
                    "message_arg3": 1,
                    "param3": 14,
                    "param_3": 5
                },
                "param_4": {
                    "arg4": 3,
                    "error4": 1,
                    "error_code4": 3,
                    "error_message3": 1,
                    "error_param_4": 1,
                    "flag3": 1,
                    "message_arg4": 1,
                    "param4": 15,
                    "param_4": 5
                },
                "param_5": {
                    "arg5": 3,
                    "error5": 1,
                    "error_code5": 3,
                    "error_message4": 1,
                    "error_param_5": 1,
                    "flag4": 1,
                    "message_arg5": 1,
                    "param5": 15,
                    "param_5": 5
                },
                "param_6": {
                    "arg6": 3,
                    "error6": 1,
                    "error_code6": 3,
                    "error_message5": 1,
                    "error_param_6": 1,
                    "flag5": 1,
                    "message_arg6": 1,
                    "param6": 15,
                    "param_6": 5
                },
                "param_7": {
                    "arg7": 3,
                    "error7": 1,
                    "error_code7": 3,
                    "error_message6": 1,
                    "error_param_7": 1,
                    "flag6": 1,
                    "message_arg7": 1,
                    "param7": 15,
                    "param_7": 5
                },
                "param_8": {
                    "arg8": 3,
                    "error8": 1,
                    "error_code8": 3,
                    "error_message7": 1,
                    "error_param_8": 1,
                    "flag7": 1,
                    "message_arg8": 1,
                    "param8": 15,
                    "param_8": 5
                },
                "param_9": {
                    "error_code": 1,
                    "error_data1": 1,
                    "error_message": 17,
                    "message": 3,
                    "output_buffer": 1,
                    "param9": 6,
                    "param_9": 1
                }
            },
            "called": [
                "FUN_001038b0"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid print_error_message_with_params_00103910(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  offset = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  print_error_message_001038b0(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_message_with_params_00103910",
            "entrypoint": "0x00103910",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103910": "print_error_message_with_params_00103910",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14",
                "local_98": "param13",
                "local_a0": "param12",
                "local_a8": "param11",
                "local_b0": "param10",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "offset",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001039e0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_001039e0",
            "entrypoint": "0x001039e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103a10": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00103a10",
            "entrypoint": "0x00103a10",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00103aa0": {
            "additional_data": {
                "DAT_00108358": {
                    "ptr_flag8": 1
                },
                "DAT_00108360": {
                    "char_flag7": 1
                },
                "DAT_00108368": {
                    "ptr_flag6": 1
                },
                "DAT_00108370": {
                    "flag5": 1
                },
                "DAT_00108371": {
                    "flag4": 1
                },
                "DAT_00108372": {
                    "flag2": 1
                },
                "DAT_00108373": {
                    "flag1": 1
                },
                "DAT_00108374": {
                    "flag3": 1
                },
                "DAT_00108378": {
                    "program_name": 1
                },
                "FUN_00103aa0": {
                    "decompile_and_improve": 1,
                    "decompiled_func": 1,
                    "extract_and_print_strings": 1,
                    "extract_strings": 1,
                    "extract_strings_from_file": 3,
                    "improved_extract_strings": 1,
                    "improved_string_extractor": 1,
                    "parse_input_files": 2,
                    "parse_strings": 1,
                    "parse_strings_from_file": 1,
                    "print_strings_usage_info": 1,
                    "process_files": 2,
                    "read_and_print_strings": 1,
                    "read_strings_from_file": 2,
                    "string_processing_function": 1
                },
                "__ptr": {
                    "buffer": 2,
                    "buffer1": 1,
                    "buffer_pointer": 1,
                    "byte_pointer2": 5,
                    "byte_pointer_2": 2,
                    "byte_ptr": 2,
                    "byte_ptr2": 3,
                    "byte_ptr_2": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr2": 3,
                    "ptr_byte": 1,
                    "ptr_byte2": 2,
                    "str_ptr": 1,
                    "string": 1,
                    "string_buffer": 1,
                    "text_buffer": 1
                },
                "__src": {
                    "long_pointer1": 1,
                    "long_pointer2": 3,
                    "long_pointer_2": 2,
                    "long_ptr2": 1,
                    "long_ptr_2": 1,
                    "long_src_ptr": 1,
                    "old_strings": 1,
                    "ptr_long2": 1,
                    "source": 4,
                    "source_array": 1,
                    "source_pointer": 3,
                    "source_ptr": 2,
                    "src_array": 1,
                    "src_ptr": 3,
                    "src_var": 2,
                    "strings": 1,
                    "strings_array": 1
                },
                "__stream": {
                    "_stream": 1,
                    "file": 3,
                    "file_pointer": 1,
                    "file_pointer1": 1,
                    "file_stream": 19,
                    "file_stream1": 2,
                    "file_stream_1": 1,
                    "input_file": 1,
                    "stream": 1
                },
                "__stream_00": {
                    "_stream2": 1,
                    "file": 1,
                    "file2": 2,
                    "file_pointer2": 1,
                    "file_pointer_00": 1,
                    "file_stream": 1,
                    "file_stream2": 14,
                    "file_stream_00": 2,
                    "file_stream_2": 4,
                    "stream": 1,
                    "stream_2": 1,
                    "temp_stream": 1
                },
                "bVar2": {
                    "byte1": 2,
                    "byte_val": 1,
                    "byte_var": 3,
                    "byte_var1": 5,
                    "byte_var2": 10,
                    "byte_var_2": 3,
                    "current_char": 2,
                    "flag1": 1,
                    "var2": 2,
                    "var_byte1": 1
                },
                "bVar25": {
                    "bool1": 2,
                    "bool_val1": 1,
                    "bool_var": 3,
                    "bool_var1": 9,
                    "bool_var25": 4,
                    "bool_var_1": 1,
                    "bool_var_25": 1,
                    "escape": 1,
                    "in_escape_sequence": 2,
                    "var25": 1,
                    "var_bool1": 1
                },
                "bVar27": {
                    "bool2": 2,
                    "bool_val2": 1,
                    "bool_var2": 10,
                    "bool_var27": 4,
                    "bool_var3": 1,
                    "bool_var_2": 1,
                    "bool_var_27": 1,
                    "double_quote": 1,
                    "in_single_quotes": 2,
                    "is_escaping": 1,
                    "var27": 1,
                    "var_bool2": 1
                },
                "bVar28": {
                    "bool3": 2,
                    "bool_val3": 1,
                    "bool_var28": 4,
                    "bool_var3": 10,
                    "bool_var4": 1,
                    "bool_var_28": 1,
                    "bool_var_3": 1,
                    "in_double_quotes": 2,
                    "is_quoted": 1,
                    "single_quote": 1,
                    "var28": 1,
                    "var_bool3": 1
                },
                "bVar3": {
                    "byte2": 2,
                    "byte_val2": 1,
                    "byte_var1": 1,
                    "byte_var2": 8,
                    "byte_var3": 9,
                    "byte_var_3": 3,
                    "flag2": 1,
                    "next_char": 2,
                    "var3": 2,
                    "var_byte2": 1
                },
                "bfd_set_error_program_name": {
                    "bfd_set_error_prog_name": 1,
                    "hdr_set_error_program_name": 1,
                    "set_error_program_name": 1
                },
                "bindtextdomain": {
                    "bind_text_domain": 2,
                    "set_domain": 1
                },
                "cVar4": {
                    "category": 1,
                    "char1": 3,
                    "char_val": 1,
                    "char_var": 12,
                    "char_var1": 1,
                    "char_var4": 7,
                    "char_var_4": 1,
                    "mode": 1,
                    "var4": 2,
                    "var_char1": 1
                },
                "dcgettext": {
                    "domain_get_text": 1
                },
                "exit": {
                    "exit_program": 1
                },
                "fVar5": {
                    "float_var5": 1
                },
                "fclose": {
                    "file_close": 2
                },
                "ferror": {
                    "file_error": 2
                },
                "fopen": {
                    "file_open": 1,
                    "open_file": 1
                },
                "fprintf": {
                    "file_printf": 1
                },
                "fread": {
                    "file_read": 2
                },
                "free": {
                    "free_memory": 1
                },
                "fseek": {
                    "file_seek": 2
                },
                "ftell": {
                    "file_tell": 2
                },
                "halt_baddata": {
                    "halt_bad_data": 1
                },
                "iVar5": {
                    "count": 1,
                    "counter": 1,
                    "index": 10,
                    "index_var": 3,
                    "index_var1": 1,
                    "index_var_5": 1,
                    "int_var": 6,
                    "int_var1": 1,
                    "int_var5": 2,
                    "result": 1,
                    "var5": 2,
                    "var_int1": 1
                },
                "iVar6": {
                    "int_var6": 1
                },
                "iVar7": {
                    "current_index": 1,
                    "i_var": 2,
                    "index": 2,
                    "index2": 1,
                    "index_var": 1,
                    "index_var2": 1,
                    "index_var_7": 1,
                    "int_var": 3,
                    "int_var2": 1,
                    "int_var7": 2,
                    "int_var_2": 1,
                    "iteration": 1,
                    "loop_counter2": 1,
                    "loop_index": 2,
                    "loop_index1": 1,
                    "loop_var": 5,
                    "temp2": 1,
                    "var7": 2,
                    "var_int2": 1
                },
                "lVar11": {
                    "current_string": 1,
                    "len": 1,
                    "length": 2,
                    "long_val1": 1,
                    "long_var": 6,
                    "long_var1": 9,
                    "long_var11": 4,
                    "long_var_1": 1,
                    "long_var_11": 1,
                    "str_len": 1,
                    "temp4": 1,
                    "text_length": 1,
                    "var11": 1,
                    "var_long1": 1
                },
                "lVar22": {
                    "array_index": 1,
                    "long_val2": 1,
                    "long_var2": 8,
                    "long_var22": 4,
                    "long_var_2": 3,
                    "long_var_22": 1,
                    "return_value": 1,
                    "temp8": 1,
                    "var22": 1
                },
                "local_110": {
                    "current_file_index": 1,
                    "current_string_index": 1,
                    "index3": 1,
                    "index_var": 1,
                    "local_counter": 1,
                    "local_long": 2,
                    "local_long1": 1,
                    "local_long2": 1,
                    "local_long_var": 3,
                    "local_long_var2": 1,
                    "local_val4": 1,
                    "local_var110": 2,
                    "local_var3": 1,
                    "long_var110": 2,
                    "long_var2": 1,
                    "long_var3": 3,
                    "long_var_110": 1,
                    "long_var_4": 1,
                    "num_strings": 1,
                    "src_index": 1,
                    "strings_index": 1,
                    "var32": 1,
                    "var_long3": 1
                },
                "local_118": {
                    "bytes_to_read": 1,
                    "current_file_size": 1,
                    "length_var": 1,
                    "local_size": 2,
                    "local_size2": 1,
                    "local_size_var": 4,
                    "local_size_var1": 1,
                    "local_val3": 1,
                    "local_var118": 2,
                    "local_var2": 1,
                    "size3": 1,
                    "size_t_var_118": 1,
                    "size_var118": 2,
                    "size_var3": 3,
                    "size_var4": 1,
                    "size_var_3": 1,
                    "string_size": 1,
                    "total_bytes": 1,
                    "total_length": 1,
                    "var31": 1
                },
                "local_120": {
                    "count_var": 1,
                    "local_size": 1,
                    "local_u_long_var": 1,
                    "local_ulong": 3,
                    "local_ulong1": 2,
                    "local_ulong1_var": 1,
                    "local_ulong_var": 1,
                    "local_val2": 1,
                    "local_var1": 1,
                    "local_var120": 2,
                    "max_file_size": 2,
                    "max_files": 2,
                    "max_string_length": 1,
                    "max_strings": 1,
                    "size_var3": 1,
                    "ulong_var120": 2,
                    "ulong_var2": 2,
                    "ulong_var4": 1,
                    "ulong_var_120": 1,
                    "ulong_var_3": 1,
                    "var30": 1,
                    "var_u_long4": 1
                },
                "local_128": {
                    "buffer": 1,
                    "buffer2": 1,
                    "byte_array1": 3,
                    "byte_pointer5": 1,
                    "byte_pointer_128": 1,
                    "byte_ptr4": 1,
                    "byte_ptr_5": 1,
                    "byte_var_ptr": 1,
                    "file_buffer": 1,
                    "file_content": 2,
                    "local_buffer": 1,
                    "local_byte_pointer": 4,
                    "local_byte_ptr": 2,
                    "local_ptr128": 1,
                    "local_ptr2": 2,
                    "local_ptr3": 2,
                    "local_var128": 1,
                    "ptr13": 1,
                    "ptr_byte4": 2,
                    "text_buffer": 1
                },
                "local_138": {
                    "binary_mode_option": 1,
                    "local_long1": 1,
                    "local_long_pointer2": 1,
                    "local_long_pointer_2": 1,
                    "local_long_ptr2": 1,
                    "local_long_var": 1,
                    "local_ptr2": 2,
                    "local_ulong_var": 1,
                    "local_val1": 1,
                    "local_var": 1,
                    "local_var1": 1,
                    "local_var138": 2,
                    "long_var138": 1,
                    "long_var2": 2,
                    "long_var_3": 1,
                    "long_var_ptr": 1,
                    "optarg_ptr": 1,
                    "option_argument": 1,
                    "section_name": 1,
                    "target_arch": 1,
                    "target_charset": 1,
                    "uint64_var2": 1,
                    "ulong_var1": 1,
                    "ulong_var138": 1,
                    "undefined8_var_138": 1,
                    "var29": 1,
                    "var_long2": 1
                },
                "local_140": {
                    "address_array": 1,
                    "current_index_list": 1,
                    "file_list_index": 1,
                    "file_locations": 1,
                    "files_arr": 1,
                    "files_to_process": 1,
                    "index_array1": 1,
                    "index_ptr": 1,
                    "local_long_pointer": 2,
                    "local_long_ptr": 1,
                    "local_param_pointer": 1,
                    "local_param_ptr": 1,
                    "local_pl_var": 1,
                    "local_pointer1": 1,
                    "local_ptr": 4,
                    "local_ptr1": 1,
                    "local_ptr140": 1,
                    "long_array1": 1,
                    "long_pointer4": 1,
                    "long_pointer6": 1,
                    "long_pointer_6": 1,
                    "long_ptr_6": 1,
                    "loop_index3": 1,
                    "ptr12": 1,
                    "ptr_long5": 2
                },
                "local_c8": {
                    "file_info": 2,
                    "file_stat": 2,
                    "file_stats": 1,
                    "file_status": 1,
                    "local_stat": 9,
                    "local_stat_val": 1,
                    "local_stat_var": 2,
                    "local_varc8": 1,
                    "stat1": 1,
                    "stat_struct": 4,
                    "stat_struct1": 1,
                    "stat_var": 3,
                    "stat_var_c8": 1,
                    "var35": 1
                },
                "local_d0": {
                    "data_buffer": 1,
                    "local_ptr2": 1,
                    "local_ptr3": 1,
                    "local_ptr4": 2,
                    "local_ptr5": 1,
                    "local_ptrd0": 1,
                    "local_var_d0": 1,
                    "local_void_pointer": 4,
                    "local_void_ptr": 2,
                    "ptr_void": 1,
                    "ptr_void1": 1,
                    "section_data": 5,
                    "var34": 1,
                    "void_pointer": 2,
                    "void_pointer1": 2,
                    "void_pointer_d0": 1,
                    "void_ptr": 3
                },
                "local_d8": {
                    "char_array1": 2,
                    "char_pointer3": 2,
                    "char_pointer_d8": 1,
                    "char_ptr1": 1,
                    "char_ptr_3": 1,
                    "char_var_ptr": 1,
                    "error_message": 2,
                    "error_msg": 2,
                    "local_char_pointer": 3,
                    "local_char_ptr1": 1,
                    "local_char_var": 1,
                    "local_message2": 1,
                    "local_ptr3": 1,
                    "local_ptr4": 1,
                    "local_ptrd8": 1,
                    "local_str_val": 1,
                    "local_string": 1,
                    "local_string_var": 1,
                    "local_var_d8": 1,
                    "msg_buffer": 1,
                    "ptr_char3": 1,
                    "reason": 1,
                    "str3": 1,
                    "var33": 1
                },
                "memcpy": {
                    "copy_memory": 1
                },
                "memmove": {
                    "move_memory": 1
                },
                "param_1": {
                    "argc": 30,
                    "file_count": 1
                },
                "param_2": {
                    "argv": 30,
                    "files": 1
                },
                "pbVar1": {
                    "byte_pointer1": 10,
                    "byte_pointer_1": 2,
                    "byte_ptr": 1,
                    "byte_ptr1": 3,
                    "byte_ptr_1": 1,
                    "current_byte": 2,
                    "ptr1": 8,
                    "ptr_byte1": 3
                },
                "pbVar19": {
                    "byte_pointer19": 1,
                    "byte_pointer2": 2,
                    "byte_pointer3": 3,
                    "byte_pointer_3": 2,
                    "byte_ptr3": 2,
                    "byte_ptr_3": 1,
                    "input_string": 1,
                    "ptr19": 1,
                    "ptr2": 1,
                    "ptr3": 3,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr_byte2": 1,
                    "ptr_byte3": 2
                },
                "pbVar23": {
                    "byte_pointer23": 1,
                    "byte_pointer3": 2,
                    "byte_pointer4": 3,
                    "byte_pointer_4": 2,
                    "byte_ptr2": 2,
                    "byte_ptr3": 1,
                    "byte_ptr_4": 1,
                    "current_byte_pointer": 1,
                    "ptr23": 1,
                    "ptr4": 2,
                    "ptr7": 1,
                    "ptr9": 1,
                    "ptr_byte3": 1,
                    "ptr_byte4": 1,
                    "temp_byte_ptr": 1
                },
                "pcVar20": {
                    "char_pointer": 3,
                    "char_pointer1": 2,
                    "char_pointer_1": 1,
                    "char_ptr2": 1,
                    "char_ptr_1": 1,
                    "file_path": 1,
                    "filename": 1,
                    "input_file": 1,
                    "path1": 1,
                    "ptr20": 1,
                    "ptr_char1": 2,
                    "str1": 1,
                    "str_var": 1,
                    "str_var20": 1,
                    "string": 1,
                    "string_pointer": 1,
                    "string_var": 2,
                    "var20": 1
                },
                "pcVar24": {
                    "char_pointer2": 4,
                    "char_pointer_2": 2,
                    "char_ptr": 1,
                    "char_ptr_2": 1,
                    "char_var2": 1,
                    "message": 1,
                    "message1": 1,
                    "message_var": 1,
                    "ptr24": 1,
                    "ptr_char2": 2,
                    "str2": 1,
                    "str_var": 1,
                    "str_var2": 1,
                    "str_var24": 1,
                    "string2": 1,
                    "string_pointer2": 1,
                    "string_var2": 2,
                    "var24": 1,
                    "warning_message": 1
                },
                "piVar15": {
                    "err_num": 1,
                    "errno": 1,
                    "errno_location": 1,
                    "errno_ptr": 2,
                    "int_pointer": 6,
                    "int_pointer1": 2,
                    "int_pointer_1": 1,
                    "int_ptr": 5,
                    "int_ptr15": 2,
                    "int_ptr_1": 1,
                    "integer_pointer1": 1,
                    "pointer_var": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr_index_var": 1,
                    "ptr_int1": 2,
                    "ptr_int_var": 1
                },
                "plVar12": {
                    "args_pointer": 1,
                    "current_file": 1,
                    "file_list": 1,
                    "file_names": 1,
                    "file_pointer1": 1,
                    "long_array1": 1,
                    "long_pointer": 2,
                    "long_pointer1": 3,
                    "long_pointer_1": 2,
                    "long_ptr": 1,
                    "long_ptr1": 1,
                    "long_ptr12": 1,
                    "long_ptr_1": 1,
                    "new_strings": 1,
                    "param": 1,
                    "param2_pointer": 1,
                    "param2_var": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "pl_var": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_long1": 3,
                    "str_array": 1,
                    "tmp_ptr": 1
                },
                "plVar16": {
                    "arguments": 1,
                    "file_list": 1,
                    "file_names_arr": 1,
                    "file_paths_ptr": 1,
                    "file_pointer2": 1,
                    "files_ptr": 1,
                    "long_array2": 1,
                    "long_pointer3": 2,
                    "long_pointer_3": 2,
                    "long_ptr2": 1,
                    "long_ptr_3": 1,
                    "new_strings": 1,
                    "param2_pointer": 1,
                    "param2_ptr": 2,
                    "param_2": 1,
                    "param_pointer": 1,
                    "param_pointer2": 1,
                    "param_ptr": 1,
                    "param_ptr2": 1,
                    "pl_var2": 1,
                    "ptr4": 1,
                    "ptr5": 1,
                    "ptr_long2": 2,
                    "ptr_long3": 1
                },
                "plVar18": {
                    "current_string_pointer": 1,
                    "files_ptr2": 1,
                    "long_pointer2": 1,
                    "long_pointer3": 1,
                    "long_pointer4": 1,
                    "long_pointer_4": 2,
                    "long_ptr": 1,
                    "long_ptr3": 1,
                    "long_ptr_4": 1,
                    "param18_ptr": 1,
                    "param3_ptr": 1,
                    "param_pointer2": 1,
                    "param_pointer3": 1,
                    "param_var": 1,
                    "pointer_var_2": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr_long3": 2,
                    "ptr_long4": 1
                },
                "ppuVar21": {
                    "address_pointer": 1,
                    "optind": 1,
                    "pointer_pointer": 1,
                    "pointer_ptr_var": 1,
                    "pptr": 1,
                    "ppu_var": 1,
                    "ptr8": 1,
                    "ptr_ptr": 1,
                    "ptr_ptr21": 1,
                    "ptr_ptr_uint_var": 1,
                    "ptr_ptr_void": 1,
                    "undefined_pointer": 1,
                    "undefined_pointer1": 1,
                    "undefined_pointer21": 1,
                    "undefined_pointer_1": 1,
                    "undefined_pointer_pointer": 2,
                    "undefined_ptr": 1,
                    "undefined_ptr_ptr": 1,
                    "void_pointer_pointer1": 1
                },
                "print_and_exit_on_error_00104a60": {
                    "print_and_exit_on_error": 1
                },
                "print_error_message_001038b0": {
                    "print_error_message": 1
                },
                "print_formatted_unicode_data_00103240": {
                    "print_formatted_unicode_data": 1
                },
                "print_strings_usage_info_001030c0": {
                    "print_strings_usage_info": 1
                },
                "puVar26": {
                    "file_format": 1,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "pointer_var_3": 1,
                    "ptr11": 1,
                    "ptr_data": 1,
                    "ptr_u_int8": 1,
                    "ptr_ulong_var2": 1,
                    "ptr_var26": 1,
                    "pu_var": 1,
                    "section_pointer": 1,
                    "u_var_ptr": 1,
                    "uint64_pointer1": 1,
                    "uint64_ptr_1": 1,
                    "ulong_pointer": 2,
                    "ulong_pointer1": 1,
                    "ulong_ptr": 1,
                    "ulong_var26": 1,
                    "undefined8_pointer": 1,
                    "undefined8_pointer_1": 1,
                    "undefined8_ptr": 1,
                    "undefined_pointer2": 1,
                    "undefined_var1": 1,
                    "undefined_var4": 1,
                    "uninit_pointer": 1
                },
                "sVar10": {
                    "bytes_read": 4,
                    "length2": 1,
                    "read_size": 1,
                    "size2": 6,
                    "size_val2": 1,
                    "size_var10": 4,
                    "size_var2": 11,
                    "size_var_10": 1,
                    "size_var_2": 2
                },
                "sVar9": {
                    "file_size": 5,
                    "length1": 1,
                    "size1": 6,
                    "size_val1": 1,
                    "size_var": 1,
                    "size_var1": 10,
                    "size_var9": 4,
                    "size_var_1": 2,
                    "size_var_9": 1
                },
                "setlocale": {
                    "set_locale": 1
                },
                "stat": {
                    "get_file_info": 1
                },
                "strcat": {
                    "concatenate_strings": 1
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "strcpy": {
                    "copy_string": 1
                },
                "strdup": {
                    "duplicate_string": 1
                },
                "strlen": {
                    "string_length": 1
                },
                "textdomain": {
                    "set_text_domain": 1,
                    "text_domain": 2
                },
                "uVar13": {
                    "file_index": 1,
                    "flags": 1,
                    "min_length": 1,
                    "num_files": 1,
                    "temp5": 1,
                    "tmp_u_var": 1,
                    "ulong_val": 1,
                    "ulong_var": 15,
                    "ulong_var1": 2,
                    "ulong_var13": 4,
                    "ulong_var_13": 1,
                    "var13": 1,
                    "var_u_long1": 1
                },
                "uVar14": {
                    "errmsg": 1,
                    "error_message": 1,
                    "error_text_var": 1,
                    "message": 3,
                    "temp6": 1,
                    "temp_var1": 1,
                    "u_var14": 1,
                    "u_var2": 2,
                    "uint64_var": 1,
                    "uint64_var1": 1,
                    "uint_var2": 1,
                    "ulong_var14": 3,
                    "ulong_var2": 5,
                    "ulong_var_2": 1,
                    "undefined8_var": 2,
                    "undefined8_var_14": 1,
                    "undefined_var14": 1,
                    "undefined_var2": 1,
                    "var14": 1,
                    "var_u_long2": 1
                },
                "uVar17": {
                    "error_text_var_2": 1,
                    "format_string": 1,
                    "message": 1,
                    "temp7": 1,
                    "u_var3": 2,
                    "uint64_var_2": 1,
                    "uint_var3": 1,
                    "ulong_var17": 3,
                    "ulong_var3": 3,
                    "ulong_var_3": 1,
                    "undefined8_var_17": 1,
                    "undefined8_var_2": 1,
                    "undefined_var17": 1,
                    "undefined_var3": 1,
                    "var17": 1,
                    "var_u_long3": 1
                },
                "uVar6": {
                    "count": 4,
                    "counter": 1,
                    "index": 1,
                    "loop_counter": 1,
                    "loop_var1": 1,
                    "num_files": 1,
                    "remaining_args": 1,
                    "temp1": 1,
                    "temp_var": 1,
                    "u_val": 1,
                    "uint_var": 9,
                    "uint_var1": 1,
                    "uint_var6": 2,
                    "uint_var_6": 1,
                    "unsigned_var": 1,
                    "var6": 2,
                    "var_u_int1": 1
                },
                "uVar8": {
                    "bfd_error": 1,
                    "error": 3,
                    "error_var": 1,
                    "result_var1": 1,
                    "temp3": 1,
                    "temporary_var": 1,
                    "u_var": 2,
                    "uint_var": 1,
                    "uint_var2": 6,
                    "uint_var8": 3,
                    "uint_var_2": 2,
                    "undefined4_var": 2,
                    "undefined4_var_8": 1,
                    "undefined_var": 1,
                    "var8": 2,
                    "var_u_int2": 1
                },
                "unaff_R12": {
                    "bool_var2": 1,
                    "current_arg": 1,
                    "file_locations": 1,
                    "long_pointer3": 1,
                    "long_pointer5": 1,
                    "long_pointer_5": 1,
                    "long_ptr4": 1,
                    "long_ptr_5": 1,
                    "loop_index2": 1,
                    "pointer_unaff_r12": 1,
                    "ptr10": 1,
                    "ptr_long4": 2,
                    "unaff_r12": 2,
                    "unaff_r12_var": 1,
                    "unaff_var": 2,
                    "unaff_var1": 1,
                    "unaff_var12": 1,
                    "unaff_var_r12": 1,
                    "unaffected_long_pointer": 1,
                    "unaffected_reg": 1,
                    "unaffected_reg12": 1,
                    "unaffected_var": 1,
                    "unaffigned_r12": 1
                },
                "xexit": {
                    "program_exit": 1
                },
                "xmalloc": {
                    "xmalloc": 1
                },
                "xmalloc_set_program_name": {
                    "program_name_setter": 1,
                    "set_program_name": 1,
                    "xmalloc_set_prog_name": 1
                },
                "xrealloc": {
                    "xrealloc": 1
                },
                "xstrdup": {
                    "xstrdup": 1
                }
            },
            "called": [
                "fflush",
                "bfd_check_format",
                "FUN_00103240",
                "dcgettext",
                "bfd_openr",
                "textdomain",
                "bfd_close",
                "ferror",
                "xrealloc",
                "setlocale",
                "stat",
                "ftell",
                "printf",
                "strerror",
                "bindtextdomain",
                "fopen",
                "bfd_set_error_program_name",
                "memmove",
                "bfd_errmsg",
                "fprintf",
                "free",
                "FUN_001030c0",
                "strtoul",
                "memcpy",
                "exit",
                "strlen",
                "bfd_malloc_and_get_section",
                "bfd_set_default_target",
                "getopt_long",
                "xmalloc_set_program_name",
                "FUN_00103910",
                "xmalloc",
                "bfd_get_error",
                "perror",
                "strcmp",
                "xstrdup",
                "xexit",
                "FUN_00104a60",
                "__errno_location",
                "bfd_init",
                "fseek",
                "fread",
                "fclose"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\n\nFILE * extract_strings_from_file_00103aa0(int argc,long *argv)\n\n{\n  byte *byte_pointer1;\n  byte byte_var2;\n  byte byte_var3;\n  char char_var;\n  int index;\n  uint uint_var;\n  int loop_var;\n  undefined4 uint_var2;\n  FILE *file_stream;\n  size_t size_var1;\n  size_t size_var2;\n  byte *byte_pointer2;\n  long long_var1;\n  long *ptr_long1;\n  ulong ulong_var;\n  long *source;\n  undefined8 ulong_var2;\n  FILE *file_stream2;\n  int *int_pointer;\n  long *long_pointer_3;\n  undefined8 ulong_var3;\n  long *long_pointer_4;\n  byte *byte_pointer3;\n  char *char_pointer;\n  undefined **undefined_pointer_pointer;\n  long long_var2;\n  byte *byte_pointer4;\n  char *char_pointer2;\n  bool bool_var1;\n  long *unaff_r12;\n  undefined8 *ulong_pointer;\n  bool bool_var2;\n  bool bool_var3;\n  long *local_ptr;\n  undefined8 long_var2;\n  undefined8 local_byte_pointer;\n  ulong local_ulong;\n  size_t local_size_var;\n  long local_long_var;\n  char *local_char_pointer;\n  void *section_data;\n  get_file_info local_stat;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00108378 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00108378);\n  long_pointer_3 = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  local_ulong = 2000;\n  unaff_r12 = (long *)0x1;\n  long_var2 = (long *)0x0;\n  ptr_long1 = argv;\n  do {\n    loop_var = (int)unaff_r12;\n    undefined_pointer_pointer = (undefined **)(long)loop_var;\n    local_ptr = (long *)((long)undefined_pointer_pointer * 8);\n    long_pointer_3 = ptr_long1;\n    if (*(char *)ptr_long1[(long)undefined_pointer_pointer] == '@') {\n      uint_var = (int)local_ulong - 1;\n      local_ulong = (ulong)uint_var;\n      if (uint_var == 0) {\n        long_var1 = *ptr_long1;\n        char_pointer = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      char_pointer = (char *)ptr_long1[(long)undefined_pointer_pointer] + 1;\n      index = get_file_info(char_pointer,&local_stat);\n      if (-1 < index) {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) {\n          do {\n            long_var1 = *ptr_long1;\n            char_pointer = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(_stderr,char_pointer,long_var1);\n            xexit(1);\n          } while( true );\n        }\n        file_stream = fopen(char_pointer,\"r\");\n        if (file_stream != (FILE *)0x0) {\n          index = fseek(file_stream,0,2);\n          if (((index != -1) && (size_var1 = ftell(file_stream), size_var1 != 0xffffffffffffffff)) &&\n             (index = fseek(file_stream,0,0), index != -1)) {\n            local_byte_pointer = (byte *)xmalloc(size_var1 + 1);\n            size_var2 = fread(local_byte_pointer,1,size_var1,file_stream);\n            if ((size_var1 == size_var2) || (index = ferror(file_stream), index == 0)) {\n              local_byte_pointer[size_var2] = 0;\n              byte_var3 = *local_byte_pointer;\n              byte_pointer3 = local_byte_pointer;\n              while( true ) {\n                if (byte_var3 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)byte_var3 * 2] & 0x40) == 0) break;\n                byte_var3 = byte_pointer3[1];\n                byte_pointer3 = byte_pointer3 + 1;\n              }\n              size_var1 = strlen((char *)local_byte_pointer);\n              byte_pointer2 = (byte *)xmalloc(size_var1 + 1);\n              source = (long *)0x0;\n              index = 0;\n              local_long_var = 0;\n              bool_var1 = false;\n              bool_var3 = false;\n              bool_var2 = false;\n              byte_pointer3 = local_byte_pointer;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_pointer3 * 2] & 0x40) != 0) {\n                  byte_pointer3 = byte_pointer3 + 1;\n                }\n                if ((index == 0) || (index + -1 <= (int)local_long_var)) {\n                  if (source == (long *)0x0) {\n                    index = 8;\n                    source = (long *)xmalloc(0x40);\n                    long_pointer_4 = source + local_long_var;\n                    *long_pointer_4 = 0;\n                  }\n                  else {\n                    index = index * 2;\n                    source = (long *)xrealloc(source,(long)index << 3);\n                    long_pointer_4 = source + local_long_var;\n                    *long_pointer_4 = 0;\n                  }\n                }\n                else {\n                  long_pointer_4 = source + local_long_var;\n                }\n                byte_var3 = *byte_pointer3;\n                byte_pointer4 = byte_pointer2;\n                while (byte_var3 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var3 * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                      bool_var2 = false;\n                      bool_var1 = false;\n                      bool_var3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!bool_var2) break;\n                    byte_pointer3 = byte_pointer3 + 1;\n                    *byte_pointer4 = byte_var3;\n                    byte_pointer4 = byte_pointer4 + 1;\n                    bool_var2 = false;\n                    byte_var3 = *byte_pointer3;\n                    if (byte_var3 == 0) goto LAB_00103d4f;\n                  }\n                  if (byte_var3 == 0x5c) {\n                    bool_var2 = true;\n                  }\n                  else if (bool_var3) {\n                    if (byte_var3 == 0x27) {\n                      bool_var3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *byte_pointer4 = byte_var3;\n                      byte_pointer4 = byte_pointer4 + 1;\n                    }\n                  }\n                  else if (bool_var1) {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = false;\n                  }\n                  else if (byte_var3 == 0x27) {\n                    bool_var3 = true;\n                  }\n                  else {\n                    if (byte_var3 != 0x22) goto LAB_00103ec8;\n                    bool_var1 = true;\n                  }\n                  byte_pointer1 = byte_pointer3 + 1;\n                  byte_pointer3 = byte_pointer3 + 1;\n                  byte_var3 = *byte_pointer1;\n                }\nLAB_00103d4f:\n                *byte_pointer4 = 0;\n                long_var1 = xduplicate_string(byte_pointer2);\n                *long_pointer_4 = long_var1;\n                source[local_long_var + 1] = 0;\n                byte_var3 = *byte_pointer3;\n                byte_var2 = (&_sch_istable)[(ulong)byte_var3 * 2];\n                while ((byte_var2 & 0x40) != 0) {\n                  byte_var3 = byte_pointer3[1];\n                  byte_pointer3 = byte_pointer3 + 1;\n                  byte_var2 = (&_sch_istable)[(ulong)byte_var3 * 2];\n                }\n                local_long_var = local_long_var + 1;\n                if (byte_var3 == 0) {\n                  free_memory(byte_pointer2);\n                  if (ptr_long1 == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free_memory(local_byte_pointer);\n          }\n          fclose(file_stream);\n        }\n      }\n    }\n    if (argc <= loop_var + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      file_stream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      undefined_pointer_pointer = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      char_pointer = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        loop_var = (int)unaff_r12;\n        index = getopt_long(argc,long_pointer_3,char_pointer);\n        if (index == -1) break;\n        ptr_long1 = (long *)char_pointer;\n        switch(index) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          print_strings_usage_info(_stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          unaff_r12 = (long *)&optarg;\n          DAT_00108368 = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          unaff_r12 = _optarg;\n          loop_var = strcmp((char *)_optarg,\"default\");\n          if ((loop_var == 0) || (loop_var = strcmp((char *)unaff_r12,\"d\"), loop_var == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            loop_var = strcmp((char *)unaff_r12,\"locale\");\n            if ((loop_var == 0) || (loop_var = strcmp((char *)unaff_r12,\"l\"), loop_var == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              loop_var = strcmp((char *)unaff_r12,\"escape\");\n              if ((loop_var == 0) || (loop_var = strcmp((char *)unaff_r12,\"e\"), loop_var == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                loop_var = strcmp((char *)unaff_r12,\"invalid\");\n                if ((loop_var == 0) || (loop_var = strcmp((char *)unaff_r12,\"i\"), loop_var == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  loop_var = strcmp((char *)unaff_r12,\"hex\");\n                  if ((loop_var == 0) || (loop_var = strcmp((char *)unaff_r12,\"x\"), loop_var == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    loop_var = strcmp((char *)unaff_r12,\"highlight\");\n                    if ((loop_var != 0) && (loop_var = strcmp((char *)unaff_r12,\"h\"), loop_var != 0)) {\n                      ulong_var2 = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      print_and_exit_on_error(ulong_var2);\n                      print_error_message();\n                      xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_bad_data();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          char_pointer = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(char_pointer);\n          char_pointer = (char *)dcgettext(0,\n                                      \"This program is free_memory software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(char_pointer);\n                    \n          exit_program(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          unaff_r12 = (long *)&optarg;\n          loop_var = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)_optarg;\n          index = getopt_long(argc,long_pointer_3,char_pointer);\n          if (index == -1) goto LAB_0010407f;\n          switch(index) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)_optarg;\n            index = getopt_long(argc,long_pointer_3,char_pointer);\n            if (index == -1) goto LAB_0010407f;\n            switch(index) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          file_stream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          unaff_r12 = (long *)&optarg;\n          ulong_var = strtoul((char *)_optarg,&local_char_pointer,0);\n          DAT_00108374 = (int)ulong_var;\n          if ((local_char_pointer != (char *)0x0) && (ptr_long1 = _optarg, *local_char_pointer != '\\0')) {\nLAB_001042e6:\n            ulong_var2 = dcgettext(0,\"invalid integer argument %s\",5);\n            print_and_exit_on_error(ulong_var2,ptr_long1);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          unaff_r12 = (long *)&optarg;\n          DAT_00108358 = _optarg;\n          char_pointer = (char *)ptr_long1;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          unaff_r12 = (long *)&optarg;\n          loop_var = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          char_var = *(char *)_optarg;\n          if (char_var == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (char_var == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (char_var != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)file_stream != 0) {\nLAB_001044f5:\n        char_pointer = (char *)(long_pointer_3 + (long)(int)file_stream + -1);\n        ulong_var = strtoul((char *)(*(long *)char_pointer + 1),&local_char_pointer,0);\n        DAT_00108374 = (int)ulong_var;\n        if ((local_char_pointer != (char *)0x0) && (*local_char_pointer != '\\0')) {\n          ptr_long1 = (long *)(*(long *)char_pointer + 1);\n          goto LAB_001042e6;\n        }\n      }\n      loop_var = (int)unaff_r12;\n      if (DAT_00108374 == 0) {\n        ulong_var2 = dcgettext(0,\"invalid minimum string length %d\",5);\n        print_and_exit_on_error(ulong_var2,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      ulong_var = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((ulong_var & 0x2000000020000) == 0) {\n        if ((ulong_var & 0x401) == 0) {\n          if ((ulong_var & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      loop_var = bfd_init();\n      if (loop_var == 0x118) {\n        char_pointer = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)uint_var != '\\0') {\n          undefined_pointer_pointer = (undefined **)&optind;\n          if (argc <= (int)_optind) {\n            DAT_00108370 = 0;\n            print_formatted_unicode_data(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          ulong_var = 0;\n          file_stream = (FILE *)0x0;\n          ptr_long1 = (long *)(ulong)uint_var;\n          uint_var = _optind;\n          local_ptr = long_pointer_3;\n          goto LAB_001043b8;\n        }\n        uint_var2 = bfd_get_error();\n        undefined_pointer_pointer = (undefined **)bfd_errmsg(uint_var2);\n        ulong_var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        print_and_exit_on_error(ulong_var2,\"x86_64-pc-linux-gnu\",undefined_pointer_pointer);\n      }\n      ulong_var2 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      print_and_exit_on_error(ulong_var2);\n      ptr_long1 = long_pointer_3;\nLAB_0010462b:\n      char_pointer2 = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      ulong_var2 = dcgettext(0,char_pointer2,5);\n      print_error_message_with_params_00103910(ulong_var2,char_pointer);\n      uint_var = 0;\n      do {\n        while( true ) {\n          ulong_var = (ulong)ptr_long1 & 0xffffffff;\n          file_stream = (FILE *)(ulong)((uint)file_stream | (uint_var ^ 1) & 0xff);\n          while( true ) {\n            loop_var = (int)ulong_var;\n            uint_var = *(uint *)undefined_pointer_pointer + 1;\n            *(uint *)undefined_pointer_pointer = uint_var;\n            if (argc <= (int)uint_var) {\n              long_pointer_3 = ptr_long1;\n              if ((char)ulong_var != '\\0') {\n                return file_stream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            char_pointer = (char *)local_ptr[(int)uint_var];\n            loop_var = strcmp(char_pointer,\"-\");\n            if (loop_var != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          loop_var = get_file_info(char_pointer,&local_stat);\n          if (loop_var < 0) break;\n          if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (long_pointer_3 = (long *)bfd_openr(char_pointer,DAT_00108368), long_pointer_3 == (long *)0x0)) {\nLAB_00104416:\n            file_stream2 = fopen(char_pointer,\"r\");\n            if (file_stream2 != (FILE *)0x0) {\n              print_formatted_unicode_data(char_pointer,file_stream2,0,0,0);\n              loop_var = fclose(file_stream2);\n              if (loop_var != -1) goto LAB_00104454;\n            }\n            fprintf(_stderr,\"%s: \",DAT_00108378);\n            perror(char_pointer);\n            uint_var = 0;\n          }\n          else {\n            char_var = bfd_check_format(long_pointer_3,1);\n            if (char_var == '\\0') {\n              bfd_close();\n              long_var2 = long_pointer_3;\n              goto LAB_00104416;\n            }\n            ulong_pointer = (undefined8 *)long_pointer_3[0x12];\n            long_var2 = (long *)((ulong)long_pointer_3 & 0xffffffffffffff00);\n            local_byte_pointer = (byte *)CONCAT44(local_byte_pointer._4_4_,argc);\n            for (; ulong_pointer != (undefined8 *)0x0; ulong_pointer = (undefined8 *)ulong_pointer[1]) {\n              char_var = (char)long_var2;\n              if (((*(uint *)((long)ulong_pointer + 0x24) & 0x103) == 0x103) &&\n                 (local_ulong = ulong_pointer[8], local_ulong != 0)) {\n                char_var = bfd_malloc_and_get_section(long_pointer_3,ulong_pointer,&section_data);\n                if (char_var == '\\0') {\n                  uint_var2 = bfd_get_error();\n                  local_ulong = bfd_errmsg(uint_var2);\n                  ulong_var2 = *ulong_pointer;\n                  ulong_var3 = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  print_error_message_with_params_00103910(ulong_var3,char_pointer,ulong_var2);\n                  char_var = (char)long_var2;\n                }\n                else {\n                  print_formatted_unicode_data(char_pointer,0,ulong_pointer[0x10],local_ulong,section_data);\n                  free_memory(section_data);\n                }\n              }\n              long_var2 = (long *)CONCAT71(long_var2._1_7_,char_var);\n            }\n            ptr_long1 = (long *)((ulong)ptr_long1 & 0xff);\n            char_var = bfd_close(long_pointer_3);\n            if (char_var == '\\0') {\n              loop_var = bfd_get_error();\n              if (loop_var == 0) {\n                ulong_var2 = dcgettext(0,\"cause of error unknown\",5);\n                fflush(_stdout);\n              }\n              else {\n                ulong_var2 = bfd_errmsg();\n                fflush(_stdout);\n              }\n              fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00108378,char_pointer,ulong_var2);\n              goto LAB_00104416;\n            }\n            bool_var3 = (char)long_var2 == '\\0';\n            if (bool_var3) goto LAB_00104416;\nLAB_00104454:\n            uint_var = (uint)ptr_long1;\n          }\n        }\n        int_pointer = __errno_location();\n        char_pointer2 = \"\\'%s\\': No such file\";\n        if (*int_pointer == 2) goto LAB_00104637;\n        char_pointer2 = strerror(*int_pointer);\n        ulong_var2 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_with_params_00103910(ulong_var2,char_pointer,char_pointer2);\n        uint_var = 0;\n      } while( true );\n    }\n    uint_var = loop_var + 1;\n    long_var2 = unaff_r12;\nLAB_00103eac:\n    unaff_r12 = (long *)(ulong)uint_var;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  print_strings_usage_info(_stderr);\nLAB_001040fd:\n  source = (long *)xmalloc(8);\n  *source = 0;\n  if (long_pointer_3 == argv) {\nLAB_0010411e:\n    if (*long_pointer_3 == 0) {\n      index = 0;\n    }\n    else {\n      long_var1 = 1;\n      do {\n        index = (int)long_var1;\n        ptr_long1 = long_pointer_3 + long_var1;\n        long_var1 = long_var1 + 1;\n      } while (*ptr_long1 != 0);\n    }\n    long_var2 = 0;\n    ptr_long1 = (long *)xmalloc((long)(index + 1) << 3);\n    long_var1 = *long_pointer_3;\n    while (long_var1 != 0) {\n      ulong_var2 = xduplicate_string();\n      *(undefined8 *)((long)ptr_long1 + long_var2) = ulong_var2;\n      long_var2 = long_var2 + 8;\n      long_var1 = *(long *)((long)long_pointer_3 + long_var2);\n    }\n    *(undefined8 *)((long)ptr_long1 + long_var2) = 0;\nLAB_00103dea:\n    long_pointer_3 = ptr_long1;\n    if (*source != 0) {\n      long_var1 = 0;\n      do {\n        long_var1 = long_var1 + 1;\n      } while (source[long_var1] != 0);\n      local_size_var = long_var1 * 8;\n      index = argc;\n      goto LAB_00103e18;\n    }\n  }\n  long_var1 = 0;\n  local_size_var = 0;\n  index = argc;\nLAB_00103e18:\n  free_memory((void *)long_pointer_3[(long)undefined_pointer_pointer]);\n  ptr_long1 = (long *)xrealloc(long_pointer_3,(long_var1 + 1 + (long)index) * 8);\n  argc = index + -1 + (int)long_var1;\n  memmove(ptr_long1 + (long)((long)undefined_pointer_pointer + long_var1),(void *)((long)(ptr_long1 + 1) + (long)local_ptr),\n          (long)(index - loop_var) << 3);\n  memcpy((void *)((long)ptr_long1 + (long)local_ptr),source,local_size_var);\n  free_memory(source);\n  free_memory(local_byte_pointer);\n  fclose(file_stream);\n  uint_var = (int)long_var2 + 1;\n  unaff_r12 = local_ptr;\n  long_pointer_3 = ptr_long1;\n  local_ptr = source;\n  if ((int)uint_var < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "current_name": "extract_strings_from_file_00103aa0",
            "entrypoint": "0x00103aa0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103aa0": "extract_strings_from_file_00103aa0",
                "__ptr": "byte_pointer2",
                "__src": "source",
                "__stream": "file_stream",
                "__stream_00": "file_stream2",
                "bVar2": "byte_var2",
                "bVar25": "bool_var1",
                "bVar27": "bool_var2",
                "bVar28": "bool_var3",
                "bVar3": "byte_var3",
                "bfd_set_error_program_name": "hdr_set_error_program_name",
                "bindtextdomain": "bind_text_domain",
                "cVar4": "char_var",
                "dcgettext": "domain_get_text",
                "exit": "exit_program",
                "fclose": "file_close",
                "ferror": "file_error",
                "fopen": "file_open",
                "fprintf": "file_printf",
                "fread": "file_read",
                "free": "free_memory",
                "fseek": "file_seek",
                "ftell": "file_tell",
                "halt_baddata": "halt_bad_data",
                "iVar5": "index",
                "iVar7": "loop_var",
                "lVar11": "long_var1",
                "lVar22": "long_var2",
                "local_110": "local_long_var",
                "local_118": "local_size_var",
                "local_120": "local_ulong",
                "local_128": "local_byte_pointer",
                "local_138": "long_var2",
                "local_140": "local_ptr",
                "local_c8": "local_stat",
                "local_d0": "section_data",
                "local_d8": "local_char_pointer",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_pointer1",
                "pbVar19": "byte_pointer3",
                "pbVar23": "byte_pointer4",
                "pcVar20": "char_pointer",
                "pcVar24": "char_pointer2",
                "piVar15": "int_pointer",
                "plVar12": "ptr_long1",
                "plVar16": "long_pointer_3",
                "plVar18": "long_pointer_4",
                "ppuVar21": "undefined_pointer_pointer",
                "print_and_exit_on_error_00104a60": "print_and_exit_on_error",
                "print_error_message_001038b0": "print_error_message",
                "print_formatted_unicode_data_00103240": "print_formatted_unicode_data",
                "print_strings_usage_info_001030c0": "print_strings_usage_info",
                "puVar26": "ulong_pointer",
                "sVar10": "size_var2",
                "sVar9": "size_var1",
                "setlocale": "set_locale",
                "stat": "get_file_info",
                "strcmp": "compare_strings",
                "strdup": "duplicate_string",
                "strlen": "string_length",
                "textdomain": "text_domain",
                "uVar13": "ulong_var",
                "uVar14": "ulong_var2",
                "uVar17": "ulong_var3",
                "uVar6": "uint_var",
                "uVar8": "uint_var2",
                "unaff_R12": "unaff_r12",
                "xexit": "program_exit",
                "xmalloc_set_program_name": "set_program_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a60": {
            "additional_data": {
                "FUN_00104a60": {
                    "execute_and_exit": 1,
                    "handle_error": 3,
                    "handle_error_and_exit": 3,
                    "print_and_exit": 2,
                    "print_and_exit_on_error": 2,
                    "print_error_and_exit": 10,
                    "print_error_and_halt": 4,
                    "print_error_message_and_exit": 1,
                    "print_error_message_and_halt": 1,
                    "process_error_message": 1,
                    "reverse_and_print_error": 1,
                    "validate_and_print_error": 1
                },
                "halt_baddata": {
                    "halt_execution": 1
                },
                "in_AL": {
                    "check_condition": 1,
                    "check_flag": 2,
                    "condition": 7,
                    "condition_check": 1,
                    "condition_result": 1,
                    "flag": 9,
                    "has_error": 1,
                    "is_error": 2,
                    "is_error_flag": 1
                },
                "local_18": {
                    "arg8": 1,
                    "copy_of_param_8": 1,
                    "err_msg_8_copy": 1,
                    "error8": 1,
                    "error_code_8_copy": 2,
                    "error_msg_8": 1,
                    "error_msg_8_copy": 1,
                    "input_8_new": 1,
                    "local_18": 2,
                    "local_error_code_8": 1,
                    "local_param8": 1,
                    "local_param_8": 1,
                    "param8": 1,
                    "param8_copy": 7,
                    "param_8": 3,
                    "param_8_copy": 6
                },
                "local_28": {
                    "arg7": 1,
                    "copy_of_param_7": 1,
                    "err_msg_7_copy": 1,
                    "error7": 1,
                    "error_code_7_copy": 2,
                    "error_msg_7": 1,
                    "error_msg_7_copy": 1,
                    "input_7_new": 1,
                    "local_28": 2,
                    "local_error_code_7": 1,
                    "local_param7": 1,
                    "local_param_7": 1,
                    "param7": 1,
                    "param7_copy": 7,
                    "param_7": 3,
                    "param_7_copy": 6
                },
                "local_38": {
                    "arg6": 1,
                    "copy_of_param_6": 1,
                    "err_msg_6_copy": 1,
                    "error6": 1,
                    "error_code_6_copy": 2,
                    "error_msg_6": 1,
                    "error_msg_6_copy": 1,
                    "input_6_new": 1,
                    "local_38": 2,
                    "local_error_code_6": 1,
                    "local_param6": 1,
                    "local_param_6": 1,
                    "param6": 1,
                    "param6_copy": 7,
                    "param_6": 3,
                    "param_6_copy": 6
                },
                "local_48": {
                    "arg5": 1,
                    "copy_of_param_5": 1,
                    "err_msg_5_copy": 1,
                    "error5": 1,
                    "error_code_5_copy": 2,
                    "error_msg_5": 1,
                    "error_msg_5_copy": 1,
                    "input_5_new": 1,
                    "local_48": 2,
                    "local_error_code_5": 1,
                    "local_param5": 1,
                    "local_param_5": 1,
                    "param5": 1,
                    "param5_copy": 7,
                    "param_5": 3,
                    "param_5_copy": 6
                },
                "local_58": {
                    "arg4": 1,
                    "copy_of_param_4": 1,
                    "err_msg_4_copy": 1,
                    "error4": 1,
                    "error_code_4_copy": 2,
                    "error_msg_4": 1,
                    "error_msg_4_copy": 1,
                    "input_4_new": 1,
                    "local_58": 2,
                    "local_error_code_4": 1,
                    "local_param4": 1,
                    "local_param_4": 1,
                    "param4": 1,
                    "param4_copy": 7,
                    "param_4": 3,
                    "param_4_copy": 6
                },
                "local_68": {
                    "arg3": 1,
                    "copy_of_param_3": 1,
                    "err_msg_3_copy": 1,
                    "error3": 1,
                    "error_code_3_copy": 2,
                    "error_msg_3": 1,
                    "error_msg_3_copy": 1,
                    "input_3_new": 1,
                    "local_68": 2,
                    "local_error_code_3": 1,
                    "local_param3": 1,
                    "local_param_3": 1,
                    "param3": 1,
                    "param3_copy": 7,
                    "param_3": 3,
                    "param_3_copy": 6
                },
                "local_78": {
                    "arg2": 1,
                    "copy_of_param_2": 1,
                    "err_msg_2_copy": 1,
                    "error2": 1,
                    "error_code_2_copy": 2,
                    "error_msg_2": 1,
                    "error_msg_2_copy": 1,
                    "input_2_new": 1,
                    "local_78": 2,
                    "local_error_code_2": 1,
                    "local_param2": 1,
                    "local_param_2": 1,
                    "param2": 1,
                    "param2_copy": 7,
                    "param_2": 3,
                    "param_2_copy": 6
                },
                "local_88": {
                    "arg1": 1,
                    "copy_of_param_1": 1,
                    "err_msg_1_copy": 1,
                    "error1": 1,
                    "error_code": 1,
                    "error_code_1_copy": 2,
                    "error_code_copy": 5,
                    "error_msg_1": 1,
                    "error_msg_1_copy": 1,
                    "input_1_new": 1,
                    "local_88": 2,
                    "local_error_code_1": 1,
                    "local_param1": 1,
                    "local_param_1": 1,
                    "param1": 1,
                    "param1_copy": 2,
                    "param_1": 2,
                    "param_1_copy": 6
                },
                "local_90": {
                    "data_5": 1,
                    "local_param_14": 1,
                    "local_pointer_5": 1,
                    "param14": 2,
                    "param14_copy": 7,
                    "param6": 1,
                    "param_14": 6,
                    "param_14_copy": 10,
                    "value_10": 1,
                    "value_5_copy": 1
                },
                "local_98": {
                    "data_4": 1,
                    "local_param_13": 1,
                    "local_pointer_4": 1,
                    "param13": 2,
                    "param13_copy": 7,
                    "param5": 1,
                    "param_13": 6,
                    "param_13_copy": 10,
                    "value_4_copy": 1,
                    "value_9": 1
                },
                "local_a0": {
                    "data_3": 1,
                    "local_param_12": 1,
                    "local_pointer_3": 1,
                    "param12": 2,
                    "param12_copy": 7,
                    "param4": 1,
                    "param_12": 6,
                    "param_12_copy": 10,
                    "value_3_copy": 1,
                    "value_8": 1
                },
                "local_a8": {
                    "data_2": 1,
                    "local_param_11": 1,
                    "local_pointer_2": 1,
                    "param11": 2,
                    "param11_copy": 7,
                    "param3": 1,
                    "param_11": 6,
                    "param_11_copy": 10,
                    "value_2_copy": 1,
                    "value_7": 1
                },
                "local_b0": {
                    "data_1": 1,
                    "local_param_10": 1,
                    "local_pointer_1": 1,
                    "param10": 2,
                    "param10_copy": 7,
                    "param2": 1,
                    "param_10": 6,
                    "param_10_copy": 10,
                    "value_1_copy": 1,
                    "value_6": 1
                },
                "local_b8": {
                    "buffer": 2,
                    "data_buffer": 2,
                    "error_buffer": 3,
                    "error_message": 2,
                    "error_message_buffer": 1,
                    "error_msg": 1,
                    "error_string": 1,
                    "local_array": 1,
                    "local_b8": 1,
                    "local_buffer": 6,
                    "local_buffer_copy": 1,
                    "local_data": 1,
                    "local_variable_1": 1,
                    "stack_buffer": 3,
                    "temp_buffer": 1,
                    "temporary_buffer": 2
                },
                "local_c8": {
                    "buffer": 4,
                    "destination_buffer": 1,
                    "local_array": 1,
                    "local_buffer": 19,
                    "local_c8": 1,
                    "local_pointer_2": 1,
                    "local_var3": 1,
                    "local_variable_2": 1,
                    "local_variable_pointer2": 1
                },
                "local_d0": {
                    "array_ptr": 1,
                    "buffer": 8,
                    "buffer_addr": 1,
                    "buffer_address": 2,
                    "buffer_pointer": 5,
                    "buffer_ptr": 2,
                    "buffer_start": 1,
                    "local_buffer": 1,
                    "local_pointer_1": 1,
                    "local_var2": 1,
                    "local_variable_pointer": 1,
                    "pointer_to_stack": 1,
                    "source_buffer": 1,
                    "stack_pointer": 1,
                    "stack_ptr": 3
                },
                "local_d4": {
                    "array_size": 1,
                    "buffer_length": 5,
                    "buffer_size": 4,
                    "bytes_to_copy": 1,
                    "constant_0x30": 1,
                    "copy_size": 1,
                    "local_buffer_size": 2,
                    "local_d4": 2,
                    "local_var": 1,
                    "local_var1": 1,
                    "local_variable_2": 1,
                    "local_variable_size": 1,
                    "loop_counter": 1,
                    "max_length": 1,
                    "message_length": 1,
                    "offset": 2,
                    "size2": 1
                },
                "local_d8": {
                    "array_size": 2,
                    "buffer_length": 1,
                    "buffer_size": 17,
                    "bytes_to_read": 1,
                    "error_code_size": 1,
                    "length": 2,
                    "local_variable_1": 1,
                    "size": 2,
                    "stack_size": 4
                },
                "param_1": {
                    "err_msg_1": 1,
                    "error1": 1,
                    "error_code": 22,
                    "error_code_1": 3,
                    "error_msg_1": 2,
                    "input_1": 1
                },
                "param_10": {
                    "data_1": 1,
                    "err_code_1": 1,
                    "param10": 8,
                    "param2": 1,
                    "param_1": 1,
                    "param_10": 14,
                    "pointer_1": 1,
                    "value_1": 2
                },
                "param_11": {
                    "data_2": 1,
                    "err_code_2": 1,
                    "param11": 8,
                    "param3": 1,
                    "param_11": 14,
                    "param_2": 1,
                    "pointer_2": 1,
                    "value_2": 2
                },
                "param_12": {
                    "data_3": 1,
                    "err_code_3": 1,
                    "param12": 8,
                    "param4": 1,
                    "param_12": 14,
                    "param_3": 1,
                    "pointer_3": 1,
                    "value_3": 2
                },
                "param_13": {
                    "data_4": 1,
                    "err_code_4": 1,
                    "param13": 8,
                    "param5": 1,
                    "param_13": 14,
                    "param_4": 1,
                    "pointer_4": 1,
                    "value_4": 2
                },
                "param_14": {
                    "data_5": 1,
                    "err_code_5": 1,
                    "param14": 8,
                    "param6": 1,
                    "param_14": 14,
                    "param_5": 1,
                    "pointer_5": 1,
                    "value_5": 2
                },
                "param_2": {
                    "arg1": 1,
                    "err_msg_2": 1,
                    "error2": 1,
                    "error_code_2": 3,
                    "error_msg_2": 2,
                    "input_2": 1,
                    "param2": 9,
                    "param_2": 11
                },
                "param_3": {
                    "arg2": 1,
                    "err_msg_3": 1,
                    "error3": 1,
                    "error_code_3": 3,
                    "error_msg_3": 2,
                    "input_3": 1,
                    "param3": 9,
                    "param_3": 11
                },
                "param_4": {
                    "arg3": 1,
                    "err_msg_4": 1,
                    "error4": 1,
                    "error_code_4": 3,
                    "error_msg_4": 2,
                    "input_4": 1,
                    "param4": 9,
                    "param_4": 11
                },
                "param_5": {
                    "arg4": 1,
                    "err_msg_5": 1,
                    "error5": 1,
                    "error_code_5": 3,
                    "error_msg_5": 2,
                    "input_5": 1,
                    "param5": 9,
                    "param_5": 11
                },
                "param_6": {
                    "arg5": 1,
                    "err_msg_6": 1,
                    "error6": 1,
                    "error_code_6": 3,
                    "error_msg_6": 2,
                    "input_6": 1,
                    "param6": 9,
                    "param_6": 11
                },
                "param_7": {
                    "arg6": 1,
                    "err_msg_7": 1,
                    "error7": 1,
                    "error_code_7": 3,
                    "error_msg_7": 2,
                    "input_7": 1,
                    "param7": 9,
                    "param_7": 11
                },
                "param_8": {
                    "arg7": 1,
                    "err_msg_8": 1,
                    "error8": 1,
                    "error_code_8": 3,
                    "error_msg_8": 2,
                    "input_8": 1,
                    "param8": 9,
                    "param_8": 11
                },
                "param_9": {
                    "code_address": 1,
                    "data_ptr": 1,
                    "err_msg_ptr": 1,
                    "error_message": 17,
                    "error_msg": 1,
                    "message": 2,
                    "param1": 1,
                    "param_9": 3,
                    "param_err_msg": 1,
                    "print_function": 1
                },
                "print_error_message_001038b0": {
                    "print_error_message": 1
                },
                "xexit": {
                    "exit_program": 1
                }
            },
            "called": [
                "FUN_001038b0",
                "xexit"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid print_and_exit_on_error_00104a60(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    param_1_copy = error_code;\n    param2_copy = param_2;\n    param3_copy = param_3;\n    param4_copy = param_4;\n    param5_copy = param_5;\n    param6_copy = param_6;\n    param7_copy = param_7;\n    param8_copy = param_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  buffer_length = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message(error_message,&buffer_size);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_execution();\n}\n\n",
            "current_name": "print_and_exit_on_error_00104a60",
            "entrypoint": "0x00104a60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a60": "print_and_exit_on_error_00104a60",
                "halt_baddata": "halt_execution",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "param_1_copy",
                "local_90": "param_14_copy",
                "local_98": "param_13_copy",
                "local_a0": "param_12_copy",
                "local_a8": "param_11_copy",
                "local_b0": "param_10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_length",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_9": "error_message",
                "print_error_message_001038b0": "print_error_message",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00104af4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_001039e0",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  FUNC_001039e0();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00103a50",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00103a10"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103a10();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00103a90",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__uflow": {
            "called": [
                "__uflow"
            ],
            "calling": [
                "FUN_00103520",
                "FUN_0010290e"
            ],
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "current_name": "__uflow",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00103aa0"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(extract_strings_from_file_00103aa0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x001039b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_001030c0"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00102b11",
                "FUN_0010259a"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001030c0",
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_0010293a"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_0010293a"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "perror": {
            "called": [
                "perror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "perror",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00102853",
                "FUN_0010293a",
                "FUN_0010259a",
                "FUN_00103aa0",
                "FUN_0010286f"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001038b0",
                "FUN_00103240",
                "FUN_0010293a",
                "FUN_00102b11",
                "FUN_0010259a"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001038b0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00104a60",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00103aa0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_00102771",
            "FUN_001027e2",
            "FUN_0010282b",
            "FUN_0010286f",
            "FUN_001028b2",
            "FUN_0010290e",
            "FUN_0010293a",
            "FUN_001030c0",
            "FUN_001034fa",
            "FUN_00103510",
            "FUN_001038b0"
        ],
        [
            "FUN_00102853",
            "FUN_00103520",
            "FUN_00103810",
            "FUN_00103890",
            "FUN_00103910",
            "FUN_00104a60"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_00102330",
            "FUN_0010259a",
            "FUN_00103240"
        ],
        [
            "FUN_00103aa0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 152573
}