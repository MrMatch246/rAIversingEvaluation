{
    "functions": {
        "FUN_00102020": {
            "additional_data": {
                "0x0": {
                    "function_address": 1,
                    "target_address": 1
                },
                "FUN_00102020": {
                    "call_indirect_function": 1,
                    "call_indirect_jump": 1,
                    "execute_binary_function": 1,
                    "execute_code_at_address": 1,
                    "execute_function": 3,
                    "execute_function_at_address": 2,
                    "execute_indirect_call": 5,
                    "execute_indirect_function": 5,
                    "execute_indirect_function_call": 1,
                    "execute_indirect_jump": 10,
                    "trigger_function": 1
                },
                "PTR_FUN_00102020": {
                    "jump_table_pointer": 1
                },
                "PTR_undefined": {
                    "call_address": 1,
                    "indirect_function_pointer": 1
                },
                "code": {
                    "binary_function": 1,
                    "function_pointer": 2,
                    "function_to_execute": 2,
                    "indirect_function": 2
                },
                "undefined": {
                    "address": 1,
                    "function_address": 1,
                    "function_pointer": 2,
                    "indirect_address": 1,
                    "indirect_jump_address": 1,
                    "pointer": 1,
                    "target_address": 2
                },
                "void": {
                    "": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_function_call_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(indirect_function *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_function_call_00102020",
            "entrypoint": "0x00102020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102020": "execute_indirect_function_call_00102020",
                "code": "indirect_function",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001025a0": {
            "additional_data": {
                "FUN_001025a0": {
                    "file_error_handler": 1,
                    "find_file": 1,
                    "handle_error": 1,
                    "handle_file_error": 5,
                    "handle_file_errors": 1,
                    "handle_file_not_found_error": 1,
                    "print_error_for_file": 1,
                    "print_error_if_file_missing": 1,
                    "print_error_if_file_not_found": 4,
                    "print_error_if_no_such_file": 1,
                    "print_error_message": 1,
                    "print_error_or_warning": 1,
                    "print_error_with_reason": 1,
                    "print_file_error": 8,
                    "print_file_error_message": 2,
                    "process_file_error": 1
                },
                "__errno_location": {
                    "get_errno_location": 1
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_localized_message": 2
                },
                "piVar1": {
                    "err_ptr": 1,
                    "errno_address": 1,
                    "errno_location": 3,
                    "errno_location_ptr": 2,
                    "errno_ptr": 15,
                    "errno_value": 1,
                    "error_code": 2,
                    "error_location": 1,
                    "error_location_ptr": 1,
                    "error_ptr": 2
                },
                "print_error_with_formatted_message_00107920": {
                    "print_error": 1,
                    "print_error_message": 3,
                    "print_error_with_message": 2,
                    "print_formatted_error": 1,
                    "print_formatted_error_message": 2
                },
                "strerror": {
                    "get_error_string": 2
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 27,
                    "error_msg": 1,
                    "message": 1
                }
            },
            "called": [
                "FUN_00107920",
                "strerror",
                "dcgettext",
                "__errno_location"
            ],
            "calling": [
                "FUN_001052a0"
            ],
            "code": "\nundefined8 print_error_if_file_not_found_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "print_error_if_file_not_found_001025a0",
            "entrypoint": "0x001025a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001025a0": "print_error_if_file_not_found_001025a0",
                "__errno_location": "get_errno_location",
                "dcgettext": "get_localized_message",
                "piVar1": "errno_ptr",
                "print_error_with_formatted_message_00107920": "print_error_message",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010266f": {
            "additional_data": {
                "FUN_0010266f": {
                    "print_supported_targets": 30,
                    "print_target_info": 1
                },
                "__ptr": {
                    "target_list": 29
                },
                "dcgettext": {
                    "get_translated_text": 1
                },
                "fprintf": {
                    "write_to_output": 1
                },
                "fputc": {
                    "write_character": 1
                },
                "free": {
                    "release_memory": 1
                },
                "lVar1": {
                    "current_item": 1,
                    "current_target": 9,
                    "current_target_id": 1,
                    "current_target_value": 7,
                    "target": 4,
                    "target_id": 4,
                    "target_name": 1,
                    "target_pointer": 1,
                    "target_value": 1
                },
                "param_1": {
                    "target": 24,
                    "target_name": 4,
                    "target_number": 1
                },
                "param_2": {
                    "file": 1,
                    "output": 1,
                    "output_file": 27
                },
                "pcVar2": {
                    "error_msg": 1,
                    "format_string": 1,
                    "message": 16,
                    "target_intro": 1,
                    "target_message": 1,
                    "target_prefix": 1,
                    "target_string": 2,
                    "target_text": 1,
                    "text": 5
                },
                "plVar3": {
                    "current_ptr": 1,
                    "current_target": 17,
                    "current_target_ptr": 2,
                    "list_pointer": 1,
                    "ptr": 4,
                    "target_ptr": 4
                }
            },
            "called": [
                "free",
                "fprintf",
                "fputc",
                "bfd_target_list",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "code": "\nvoid print_supported_targets_0010266f(long target,FILE *output_file)\n\n{\n  long current_target;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target = *current_target;\n    current_target = current_target + 1;\n    if (current_target == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_0010266f",
            "entrypoint": "0x0010266f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "__ptr": "target_list",
                "dcgettext": "get_translated_text",
                "fprintf": "write_to_output",
                "fputc": "write_character",
                "free": "release_memory",
                "lVar1": "current_target",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102710": {
            "additional_data": {
                "DAT_0010d5f0": {
                    "extracted_archive": 1,
                    "extracted_handle": 1,
                    "extracted_library": 2,
                    "format_variable": 1,
                    "input_file": 1,
                    "library": 1
                },
                "DAT_0010d5f8": {
                    "conversion_flag": 1,
                    "existing_library": 1,
                    "is_normal_format": 1,
                    "thin_library_flag": 1
                },
                "DAT_0010d610": {
                    "format_variable2": 1,
                    "thin_library_conversion": 1
                },
                "DAT_0010d618": {
                    "address": 1,
                    "buf2": 1,
                    "created_handle": 1,
                    "other_unrelated_data": 1,
                    "output_file_return_address": 1,
                    "temporary_archive_file": 1
                },
                "DAT_0010d64c": {
                    "archived_file_format": 1,
                    "archived_flag": 1,
                    "format_check_mode": 1,
                    "format_variable6": 1,
                    "other_related_data": 1
                },
                "DBG_0010d620": {
                    "format_variable3": 1
                },
                "DBG_0010d624": {
                    "format_variable4": 1
                },
                "DBG_0010d628": {
                    "format_variable5": 1
                },
                "FUN_00102710": {
                    "analyze_binary": 1,
                    "decompile_binary": 2,
                    "extract_and_convert_archived_files": 2,
                    "extract_and_convert_archives": 1,
                    "extract_archived_files": 12,
                    "find_matching_files": 1,
                    "initialize_bfd": 1,
                    "load_bfd_files": 1,
                    "load_object_from_binary": 1,
                    "open_and_check_bfd_format": 1,
                    "open_and_convert_bfd_files": 1,
                    "open_and_convert_binary": 1,
                    "open_and_convert_library": 2,
                    "parse_archived_files": 1,
                    "parse_object_files": 1,
                    "read_object_files": 1
                },
                "LAB_00102812": {
                    "conversion_error": 1
                },
                "LAB_00102826": {
                    "create_handle": 1
                },
                "_DAT_0010d610": {
                    "conversion_flag": 1,
                    "create_flag": 1,
                    "is_conversion_needed": 1,
                    "thin_flag": 1
                },
                "bVar3": {
                    "bit_flag": 1,
                    "check_bit": 1,
                    "conversion_flag": 3,
                    "convert_flag": 2,
                    "convert_status": 1,
                    "is_thin_archive": 1,
                    "is_thin_format": 3,
                    "is_thin_library": 6,
                    "thin_conversion_flag": 3,
                    "thin_format_check": 1,
                    "thin_library": 3,
                    "thin_library_conversion_flag": 2,
                    "thin_library_flag": 4
                },
                "bfd_check_format": {
                    "check_file_format": 2,
                    "check_format": 1
                },
                "bfd_check_format_matches": {
                    "check_format_matches": 1,
                    "check_matching_formats": 1
                },
                "bfd_close": {
                    "close_bfd": 1,
                    "close_file": 2
                },
                "bfd_get_error": {
                    "get_bfd_error": 2,
                    "get_error_code": 1
                },
                "bfd_openr": {
                    "open_for_reading": 1,
                    "open_input_file": 1,
                    "open_read_bfd": 1
                },
                "bfd_openr_next_archived_file": {
                    "get_next_archived_file": 1,
                    "open_next_archived_file": 3
                },
                "bfd_openw": {
                    "open_for_writing": 1,
                    "open_output_file": 1,
                    "open_write_bfd": 1
                },
                "bfd_set_format": {
                    "set_file_format": 1,
                    "set_format": 1
                },
                "cVar2": {
                    "check_format_result": 1,
                    "check_result": 3,
                    "format_check": 3,
                    "format_check_result": 16,
                    "format_flag": 1,
                    "format_match": 1,
                    "format_status": 1,
                    "format_valid": 4,
                    "is_valid_format": 1
                },
                "dcgettext": {
                    "get_formatted_error_message": 1,
                    "get_formatted_message": 1,
                    "get_message_translation": 1,
                    "get_text": 1
                },
                "iVar4": {
                    "bfd_err": 1,
                    "bfd_error": 4,
                    "bfd_error_code": 3,
                    "error": 2,
                    "error_code": 19,
                    "error_flag": 1,
                    "error_number": 1
                },
                "in_stack_00000008": {
                    "additional_info": 1,
                    "archive_path": 1,
                    "error_arg": 1,
                    "error_handle": 1,
                    "file_filter": 1,
                    "formatted_message": 1,
                    "initial_arch": 1,
                    "matching_format": 2,
                    "matching_formats": 3,
                    "matching_formats_stack_data": 1,
                    "output_file_format": 1,
                    "parameter_in_stack_00000008": 1,
                    "stack_argument": 3,
                    "stack_data": 2,
                    "stack_param": 2,
                    "stack_parameter": 2,
                    "stack_value": 1,
                    "stack_var": 1,
                    "stack_variable2": 1
                },
                "lVar1": {
                    "archived_file_handle": 1
                },
                "lVar5": {
                    "archive_handle": 1,
                    "archived_file": 4,
                    "bfd_file": 1,
                    "bfd_file_handle": 3,
                    "bfd_handle": 5,
                    "binary_file_descriptor": 1,
                    "descriptor": 1,
                    "file_descriptor": 10,
                    "file_handle": 3,
                    "file_pointer": 1,
                    "input_bfd": 1
                },
                "plVar1": {
                    "archived_file": 1,
                    "archived_file_handle": 2,
                    "archived_file_pointer": 1,
                    "archived_file_ptr": 3,
                    "archived_files": 3,
                    "archived_files_pointer": 1,
                    "archived_files_ptr": 2,
                    "current_file": 2,
                    "current_file_pointer": 1,
                    "file_handle_ptr": 1,
                    "file_handles": 1,
                    "file_list_ptr": 1,
                    "file_pointer": 2,
                    "next_archive_file": 1,
                    "next_file_ptr": 2,
                    "pointer1": 1
                },
                "print_bfd_error_message_00107c20": {
                    "print_bfd_error": 1,
                    "print_bfd_error_message": 2,
                    "print_bfd_error_msg": 1
                },
                "print_error_message_and_exit_00107c10": {
                    "print_error_and_exit": 2,
                    "print_error_message_and_exit": 1,
                    "print_error_msg_and_exit": 1
                },
                "print_error_with_formatted_message_00107920": {
                    "print_error_with_formatted_message": 3
                },
                "print_formatted_error_message_and_exit_00107690": {
                    "print_formatted_error_and_exit": 2,
                    "print_formatted_error_message_and_exit": 1,
                    "print_formatted_error_msg_and_exit": 1
                },
                "print_matching_formats_00103bd1": {
                    "print_matching_formats": 4
                },
                "puVar8": {
                    "archive_handle": 1,
                    "bfd": 1,
                    "bfd_file": 1,
                    "bfd_handle": 1,
                    "bfd_output_handle": 1,
                    "bfd_write_handle": 1,
                    "new_archive_handle": 1,
                    "output_bfd": 4,
                    "output_bfd_handle": 2,
                    "output_bfd_ptr": 1,
                    "output_file": 5,
                    "output_file_descriptor": 4,
                    "output_file_handle": 1,
                    "output_file_ptr": 1,
                    "output_format": 1,
                    "write_bfd_ptr": 1,
                    "write_file_handle": 2,
                    "write_handle": 2
                },
                "uVar6": {
                    "error_message": 20,
                    "error_message1": 1,
                    "error_msg": 3,
                    "error_string": 1,
                    "formatted_message": 1
                },
                "uVar7": {
                    "context_message": 1,
                    "error_format": 2,
                    "error_message": 3,
                    "error_message2": 1,
                    "error_message_format": 1,
                    "error_msg": 1,
                    "error_msg2": 1,
                    "format_description": 1,
                    "format_message": 1,
                    "formatted_error_message": 2,
                    "formatted_message": 3,
                    "library_name": 8,
                    "message_string": 1
                },
                "unaff_RBP": {
                    "additional_data": 1,
                    "additional_parameter": 1,
                    "archive_file": 1,
                    "archive_name": 1,
                    "argument": 1,
                    "buf1": 1,
                    "dat_value": 1,
                    "default_bfd": 1,
                    "default_output": 1,
                    "initial_operand": 1,
                    "matching_formats_data": 1,
                    "parameter_unaff_rbp": 1,
                    "reserved_register": 1,
                    "return_address": 6,
                    "return_value": 1,
                    "source_bfd_handle": 1,
                    "stack_argument": 1,
                    "stack_variable": 1,
                    "unaffixed_rbp": 1,
                    "unused_parameter": 1
                },
                "xexit": {
                    "exit": 1,
                    "exit_program": 3
                }
            },
            "called": [
                "bfd_openr",
                "bfd_close",
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00105300"
            ],
            "code": "\n\n\nundefined8 * extract_and_convert_archived_files_00102710(void)\n\n{\n  long *archived_file_ptr;\n  char format_check_result;\n  byte is_thin_library;\n  int error_code;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_file;\n  undefined8 return_address;\n  undefined8 stack_argument;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_check_result = bfd_check_format(file_descriptor,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  output_file = (undefined8 *)bfd_openw();\n  if (((output_file != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_file,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(output_file), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto create_handle;\n    goto LAB_001053b7;\n  }\n  print_error_and_exit();\n  do {\n    is_thin_library = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        library_name = *output_file;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_formatted_error_and_exit(error_message,library_name);\n        goto conversion_error;\n      }\n    }\n    else if (is_thin_library == 0) {\n      library_name = *output_file;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_formatted_error_and_exit(error_message,library_name);\nLAB_001027cb:\n      print_bfd_error_message();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nconversion_error:\n        print_matching_formats(stack_argument);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = output_file + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_file,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_file,file_descriptor)) {\n        *archived_file_ptr = file_descriptor;\n        archived_file_ptr = (long *)(file_descriptor + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file;\n      }\n      do {\n        print_error_and_exit();\ncreate_handle:\n        library_name = dcgettext(0,\"creating %s\",5);\n        print_error_with_formatted_message(library_name);\nLAB_001053b7:\n        DAT_0010d618 = return_address;\n        output_file = (undefined8 *)bfd_openr();\n      } while (output_file == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_file,2,&stack0x00000008);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_file,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "current_name": "extract_and_convert_archived_files_00102710",
            "entrypoint": "0x00102710",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102710": "extract_and_convert_archived_files_00102710",
                "LAB_00102812": "conversion_error",
                "LAB_00102826": "create_handle",
                "bVar3": "is_thin_library",
                "bfd_check_format": "check_file_format",
                "bfd_check_format_matches": "check_matching_formats",
                "bfd_close": "close_file",
                "bfd_get_error": "get_bfd_error",
                "bfd_openr": "open_input_file",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_openw": "open_for_writing",
                "bfd_set_format": "set_format",
                "cVar2": "format_check_result",
                "dcgettext": "get_message_translation",
                "iVar4": "error_code",
                "in_stack_00000008": "stack_argument",
                "lVar1": "archived_file_handle",
                "lVar5": "file_descriptor",
                "plVar1": "archived_file_ptr",
                "print_bfd_error_message_00107c20": "print_bfd_error_message",
                "print_error_message_and_exit_00107c10": "print_error_and_exit",
                "print_error_with_formatted_message_00107920": "print_error_with_formatted_message",
                "print_formatted_error_message_and_exit_00107690": "print_formatted_error_and_exit",
                "print_matching_formats_00103bd1": "print_matching_formats",
                "puVar8": "output_file",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "unaff_RBP": "return_address",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010284b": {
            "additional_data": {
                "FUN_0010284b": {
                    "get_constant_value": 1,
                    "get_default_value": 2,
                    "get_num": 1,
                    "get_one": 13,
                    "get_return_value": 8,
                    "get_status": 1,
                    "get_true": 1,
                    "get_true_value": 1,
                    "initialize": 3
                },
                "r": {
                    "result": 1
                },
                "ret": {
                    "result": 1
                },
                "return": {
                    "result": 5
                },
                "undefined8": {
                    "int": 2,
                    "status": 1,
                    "uint64_t": 10,
                    "unsigned_long": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00107650"
            ],
            "code": "\nuint64_t get_one_0010284b(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_0010284b",
            "entrypoint": "0x0010284b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "r": "result",
                "ret": "result",
                "return": "result",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010285f": {
            "additional_data": {
                "DAT_0010d634": {
                    "check_condition": 1,
                    "check_flag": 1,
                    "flag": 3,
                    "is_exact_match": 1,
                    "is_extraction_enabled": 1,
                    "some_condition": 1,
                    "some_flag": 1
                },
                "FUN_0010285f": {
                    "print_archive_entry_error": 3,
                    "print_archive_entry_not_found": 7,
                    "print_archive_entry_not_found_error": 3,
                    "print_entry_in_archive": 1,
                    "print_entry_not_found": 1,
                    "print_entry_not_found_error": 2,
                    "print_entry_not_found_message": 1,
                    "print_error_message": 6,
                    "print_error_message_if_entry_not_found": 1,
                    "print_missing_archive_entry": 1,
                    "print_missing_entries": 4,
                    "print_missing_entry_error": 1
                },
                "LAB_0010553e": {
                    "end_label": 1,
                    "loop_end": 2,
                    "loop_entry_point": 1,
                    "loop_start": 1
                },
                "STACK_VARIABLE": {
                    "stack_variable": 1
                },
                "_DAT_0010d630": {
                    "max_count": 1,
                    "max_extracted_count": 1,
                    "max_extracted_entry_count": 1,
                    "max_iterations": 1,
                    "max_matches": 2,
                    "max_matching_count": 1,
                    "max_printed_entries": 1,
                    "maximum_matching_entries_count": 1
                },
                "__format": {
                    "error_format_string": 1,
                    "error_message": 8,
                    "error_message_format": 7,
                    "error_msg_format": 1,
                    "format_string": 12,
                    "message_format": 2
                },
                "_stderr": {
                    "error_output": 2,
                    "error_stream": 1,
                    "standard_error": 4,
                    "standard_error_stream": 1,
                    "stderr": 1
                },
                "code_r0x0010285f": {
                    "continue_loop": 1,
                    "continue_printing_missing_entries": 1,
                    "loop_code": 1,
                    "loop_start": 1,
                    "print_entry_not_found_error_loop": 1,
                    "print_error_message": 1,
                    "print_error_message_loop": 1,
                    "start_label": 1
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_localized_text": 3,
                    "get_translated_message": 1,
                    "get_translated_string": 1,
                    "get_translation": 2
                },
                "extract_and_copy_substring_00105830": {
                    "extract_and_copy_substring": 6,
                    "extract_substring": 2,
                    "extract_substring_and_copy": 1
                },
                "filename_cmp": {
                    "compare_filename": 3,
                    "compare_filenames": 6
                },
                "fprintf": {
                    "print_error": 1,
                    "print_error_message": 3,
                    "print_formatted_error": 1,
                    "print_formatted_message": 1,
                    "print_formatted_text": 1,
                    "print_to_stderr": 2
                },
                "iStack000000000000000c": {
                    "count": 2,
                    "counter": 4,
                    "counter2": 1,
                    "entry_count": 1,
                    "entry_counter": 2,
                    "entry_index": 1,
                    "entry_print_counter": 1,
                    "extracted_count": 1,
                    "extracted_entry_count": 1,
                    "file_count": 1,
                    "iteration_counter": 1,
                    "match_count": 1,
                    "matched_entries_count": 1,
                    "matching_count": 2,
                    "matching_entries_count": 2,
                    "matching_entries_counter": 1,
                    "matching_entry_count": 1,
                    "num_matches": 4,
                    "num_printed_entries": 1,
                    "substring_count": 1
                },
                "iVar1": {
                    "cmp_result": 1,
                    "comparison_result": 3,
                    "filename_comparison_result": 1
                },
                "lVar2": {
                    "current_entry": 4,
                    "current_filename": 2,
                    "entry": 1,
                    "entry_name": 1,
                    "entry_pointer": 1,
                    "entry_size": 1,
                    "entry_value": 1,
                    "extracted_filename": 1,
                    "extracted_string": 1,
                    "extracted_substring": 2,
                    "file_path": 1,
                    "substring": 9,
                    "substring_length": 1,
                    "substring_ptr": 2,
                    "substring_result": 3
                },
                "plVar3": {
                    "alt_ptr": 1,
                    "current_archive_entry": 1,
                    "default_entry": 1,
                    "default_entry_ptr": 1,
                    "default_name": 1,
                    "entry_pointer": 1,
                    "entry_ptr": 1,
                    "extracted_file": 1,
                    "fallback": 1,
                    "fallback_entry_pointer": 1,
                    "filename": 1,
                    "next_entry": 8,
                    "next_filename": 1,
                    "ptr_to_extracted_substring": 1,
                    "string_ptr": 1,
                    "substring": 1,
                    "substring_ptr": 2,
                    "substring_ptr2": 1,
                    "target_entry": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "tmp_pointer": 1
                },
                "plVar5": {
                    "archive_entry": 1,
                    "current_entry": 11,
                    "current_entry_pointer": 2,
                    "current_entry_ptr": 7,
                    "current_node": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "entry": 2,
                    "entry_list": 1,
                    "entry_pointer": 2,
                    "entry_ptr": 1,
                    "next_entry": 1
                },
                "stack0x00000010": {
                    "callback_function_data": 1,
                    "stack_buffer": 1,
                    "stack_data": 1
                },
                "uVar4": {
                    "current_entry": 7,
                    "current_entry_name": 1,
                    "current_format": 1,
                    "entry": 9,
                    "entry_name": 11,
                    "entry_name_to_print": 1,
                    "entry_string": 1
                },
                "unaff_R12": {
                    "archive": 10,
                    "archive_address": 1,
                    "archive_base_address": 2,
                    "archive_data": 1,
                    "archive_pointer": 4,
                    "archive_ptr": 10,
                    "base_pointer": 1,
                    "extracted_data": 1,
                    "unaff_r12": 1
                },
                "unaff_R13D": {
                    "archive_entries_count": 1,
                    "counter": 1,
                    "entry_count": 7,
                    "num_entries": 7,
                    "num_formats": 1,
                    "number_of_entries": 1,
                    "remaining_entries": 12,
                    "remaining_iteration_count": 1
                },
                "unaff_R14": {
                    "archive_entries": 2,
                    "current_argument": 1,
                    "entries_iterator": 1,
                    "entry_array": 1,
                    "entry_list": 5,
                    "entry_names": 11,
                    "entry_pointer": 3,
                    "entry_pointers": 2,
                    "entry_ptr": 3,
                    "entry_ptrs": 1,
                    "format_strings": 1
                },
                "unaff_RBP": {
                    "callback": 7,
                    "callback_func": 5,
                    "callback_function": 8,
                    "execute_callback": 1,
                    "exit": 1,
                    "function_pointer": 5,
                    "function_ptr": 1,
                    "next_function": 1,
                    "print_next_entry": 1
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105480"
            ],
            "code": "\n\n\nvoid print_archive_entry_not_found_error_0010285f(void)\n\n{\n  int comparison_result;\n  char *format_string;\n  long substring;\n  long *next_entry;\n  undefined8 entry_name;\n  long *current_entry;\n  code *callback_function;\n  long archive;\n  int remaining_entries;\n  undefined8 *entry_names;\n  int counter;\n  \ncontinue_printing_missing_entries:\n  entry_name = *entry_names;\n  format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(standard_error,format_string,entry_name);\nloop_end:\n  entry_names = entry_names + 1;\n  remaining_entries = remaining_entries + -1;\n  if (remaining_entries == 0) {\n    return;\n  }\n  current_entry = *(long **)(archive + 0xf0);\n  counter = 0;\n  do {\n    if (current_entry == (long *)0x0) goto continue_printing_missing_entries;\n    if (*(int *)((long)current_entry + 0xac) == 0) {\n      substring = *current_entry;\n      if (substring == 0) {\n        next_entry = (long *)current_entry[0x1d];\n        if ((long *)current_entry[0x1d] == (long *)0x0) {\n          next_entry = current_entry;\n        }\n        (**(code **)(next_entry[1] + 0x1e8))(current_entry,&stack_buffer);\n      }\n      else if (((*(byte *)(archive + 0x49) & 0x10) == 0) || (substring = extract_and_copy_substring(), substring != 0))\n      {\n        entry_name = extract_and_copy_substring(*entry_names);\n        comparison_result = filename_cmp(entry_name,substring);\n        if ((comparison_result == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (counter = counter + 1,\n            counter == _DAT_0010d630)))) break;\n      }\n    }\n    current_entry = (long *)current_entry[0x1e];\n  } while( true );\n  (*callback_function)();\n  *(undefined4 *)((long)current_entry + 0xac) = 1;\n  goto loop_end;\n}\n\n",
            "current_name": "print_archive_entry_not_found_error_0010285f",
            "entrypoint": "0x0010285f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_error_0010285f",
                "LAB_0010553e": "loop_end",
                "__format": "format_string",
                "_stderr": "standard_error",
                "code_r0x0010285f": "continue_printing_missing_entries",
                "dcgettext": "get_localized_text",
                "extract_and_copy_substring_00105830": "extract_and_copy_substring",
                "filename_cmp": "compare_filenames",
                "fprintf": "print_error_message",
                "iStack000000000000000c": "counter",
                "iVar1": "comparison_result",
                "lVar2": "substring",
                "plVar3": "next_entry",
                "plVar5": "current_entry",
                "stack0x00000010": "stack_buffer",
                "uVar4": "entry_name",
                "unaff_R12": "archive",
                "unaff_R13D": "remaining_entries",
                "unaff_R14": "entry_names",
                "unaff_RBP": "callback_function"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001028ed": {
            "additional_data": {
                "FUN_001028ed": {
                    "find_and_process_files": 1,
                    "find_error_files": 1,
                    "find_last_occurrence_and_print": 1,
                    "find_matching_file": 2,
                    "print_error_message_or_exit": 1,
                    "process_and_print_archives": 1,
                    "process_file_and_exit": 1,
                    "process_files": 8
                },
                "__s": {
                    "basename2": 1,
                    "basename_1": 1,
                    "basename_filename": 1,
                    "basename_var_1": 1,
                    "char_array_s": 1,
                    "char_pointer_s": 1,
                    "char_ptr3": 1,
                    "char_ptr_s": 1,
                    "char_ptr_var_3": 1,
                    "char_ptr_var_s": 2,
                    "char_var_3": 1,
                    "file_name": 1,
                    "filename": 1,
                    "str1": 2,
                    "str_var_1": 1,
                    "string1": 8,
                    "string_1": 1,
                    "string_s": 1,
                    "string_var": 1,
                    "string_var1": 2,
                    "string_var_1": 1
                },
                "__s_00": {
                    "basename": 1,
                    "basename3": 1,
                    "basename_2": 1,
                    "basename_current_file": 1,
                    "basename_var_2": 1,
                    "char_array_s_00": 1,
                    "char_pointer_s00": 1,
                    "char_ptr4": 1,
                    "char_ptr_s00": 1,
                    "char_ptr_var_4": 1,
                    "char_ptr_var_s_00": 2,
                    "char_var_4": 1,
                    "file_name_2": 1,
                    "str2": 2,
                    "str_var_2": 1,
                    "string2": 8,
                    "string_2": 1,
                    "string_s_00": 1,
                    "string_var2": 3,
                    "string_var_2": 1
                },
                "bVar16": {
                    "bool1": 1,
                    "bool_value": 2,
                    "bool_var": 9,
                    "bool_var1": 1,
                    "bool_var16": 9,
                    "bool_var_1": 1,
                    "bool_variable_2": 1,
                    "boolean_variable": 1,
                    "byte_var16": 5,
                    "byte_var_2": 1
                },
                "bVar17": {
                    "byte2": 1,
                    "byte_value2": 1,
                    "byte_value_2": 1,
                    "byte_var": 2,
                    "byte_var17": 14,
                    "byte_var2": 2,
                    "byte_var3": 1,
                    "byte_var_1": 1,
                    "byte_var_2": 5,
                    "byte_var_3": 1,
                    "byte_variable": 2
                },
                "bVar2": {
                    "bool_variable": 1,
                    "byte1": 1,
                    "byte_value": 2,
                    "byte_var": 8,
                    "byte_var2": 16,
                    "byte_var_1": 2,
                    "undefined_variable_2": 1
                },
                "iVar3": {
                    "compare_result": 1,
                    "comparison_result": 2,
                    "index": 1,
                    "index_var": 2,
                    "int1": 1,
                    "int_value": 1,
                    "int_var": 7,
                    "int_var3": 11,
                    "int_var_1": 1,
                    "integer_var3": 2,
                    "integer_var_1": 1,
                    "iteration_index": 1
                },
                "in_stack_00000078": {
                    "in_stack78": 1,
                    "in_stack_var00000078": 1,
                    "in_stack_var_00000078": 1,
                    "int_stack_var1": 1,
                    "local_var1": 1,
                    "long4": 1,
                    "long_on_stack_var_1": 1,
                    "long_stack_var78": 1,
                    "long_var_in_stack_00000078": 1,
                    "stack_00000078": 1,
                    "stack_address_1": 1,
                    "stack_value1": 1,
                    "stack_var1": 9,
                    "stack_var_1": 3,
                    "stack_var_78": 1,
                    "stack_variable_1": 1,
                    "unaffected_in_stack_00000078": 1,
                    "unused_stack_var_1": 1,
                    "var1": 2,
                    "var_1": 1
                },
                "in_stack_00000108": {
                    "in_stack108": 1,
                    "in_stack_var00000108": 1,
                    "in_stack_var_00000108": 1,
                    "int_stack_var2": 1,
                    "local_var2": 1,
                    "long5": 1,
                    "long_on_stack_var_2": 1,
                    "long_stack_var108": 1,
                    "long_var_in_stack_00000108": 1,
                    "stack_00000108": 1,
                    "stack_address_2": 1,
                    "stack_value2": 1,
                    "stack_var2": 9,
                    "stack_var_108": 1,
                    "stack_var_2": 3,
                    "stack_variable_2": 1,
                    "unaffected_in_stack_00000108": 1,
                    "unused_stack_var_2": 1,
                    "var2": 2,
                    "var_2": 1
                },
                "lVar10": {
                    "current_archive_entry": 1,
                    "current_file": 1,
                    "current_pointer": 1,
                    "current_var": 1,
                    "data_ptr": 1,
                    "file_address": 1,
                    "file_pointer": 1,
                    "long1": 1,
                    "long_value1": 1,
                    "long_var": 2,
                    "long_var1": 3,
                    "long_var10": 12,
                    "long_var_1": 5
                },
                "lVar11": {
                    "file_pointer_2": 1,
                    "last_pointer": 1,
                    "long2": 1,
                    "long_value2": 1,
                    "long_var11": 12,
                    "long_var2": 5,
                    "long_var_2": 5,
                    "previous_archive_entry": 1,
                    "previous_file": 1,
                    "previous_var": 1,
                    "temp_data_ptr": 1,
                    "temp_file_address": 1
                },
                "param_1": {
                    "error_message": 6,
                    "file": 1,
                    "file_list": 3,
                    "file_path": 3,
                    "file_paths": 1,
                    "filename": 4,
                    "input": 1,
                    "input_data": 1,
                    "input_dir": 1,
                    "input_file": 1,
                    "input_filename": 1,
                    "input_param": 3,
                    "input_parameter": 2,
                    "original_param": 1,
                    "param1": 1,
                    "param_1": 1
                },
                "param_2": {
                    "bfd": 1,
                    "file_count": 2,
                    "file_descriptor": 4,
                    "file_handle": 3,
                    "file_length": 1,
                    "file_mode": 1,
                    "file_pointer": 1,
                    "file_size": 11,
                    "flags": 3,
                    "length": 1,
                    "num_files": 2,
                    "param2": 1
                },
                "param_7": {
                    "archive_list": 1,
                    "arguments": 1,
                    "argv": 1,
                    "char_double_ptr_param_7": 1,
                    "char_ptr_ptr6": 1,
                    "char_ptr_ptr_var6": 1,
                    "char_ptr_ptr_var_6": 1,
                    "file_array_3": 1,
                    "file_list": 2,
                    "filename_array": 1,
                    "filename_list": 1,
                    "input_param_7": 1,
                    "input_parameters": 2,
                    "input_params": 1,
                    "output_files": 3,
                    "param7": 1,
                    "param_7": 2,
                    "param_array": 1,
                    "param_list": 1,
                    "param_ptr": 1,
                    "param_var7": 1,
                    "parameter7": 1,
                    "parameter_7": 2,
                    "pointer_param7": 1,
                    "string_pointer_param7": 1
                },
                "param_9": {
                    "arguments2": 1,
                    "error_flag": 1,
                    "error_type": 1,
                    "formatted_output": 1,
                    "input_parameters2": 1,
                    "new_param9": 1,
                    "output": 1,
                    "output_data": 1,
                    "output_param": 2,
                    "output_parameters": 1,
                    "param9": 1,
                    "param_9": 1,
                    "param_struct": 1,
                    "param_var": 2,
                    "param_var9": 1,
                    "parameter9": 1,
                    "parameter_9": 1,
                    "result": 4,
                    "return_struct": 1,
                    "return_value": 2,
                    "status": 1,
                    "undefined8_3": 1,
                    "undefined8_var_param_9": 1,
                    "undefined_long_var_1": 1,
                    "undefined_var_param_9": 1
                },
                "pcVar6": {
                    "char_pointer1": 1,
                    "char_pointer6": 1,
                    "char_pointer_var6": 2,
                    "char_ptr": 1,
                    "char_ptr1": 1,
                    "char_ptr6": 1,
                    "char_ptr_1": 1,
                    "char_ptr_var": 1,
                    "char_ptr_var6": 4,
                    "char_ptr_var_1": 2,
                    "char_var1": 1,
                    "char_var6": 3,
                    "char_var_1": 1,
                    "current_file": 2,
                    "current_filename": 1,
                    "file_name_var1": 1,
                    "file_pointer": 1,
                    "filename_1": 1,
                    "filename_var_1": 1,
                    "pointer_char_var6": 1,
                    "pointer_to_char_var_1": 1,
                    "string_var6": 1,
                    "string_variable1": 1
                },
                "pcVar7": {
                    "basename1": 1,
                    "basename_var": 1,
                    "char_pointer2": 1,
                    "char_pointer7": 1,
                    "char_pointer_var7": 2,
                    "char_ptr2": 2,
                    "char_ptr7": 1,
                    "char_ptr_2": 1,
                    "char_ptr_var2": 1,
                    "char_ptr_var7": 4,
                    "char_ptr_var_2": 2,
                    "char_var2": 1,
                    "char_var7": 3,
                    "char_var_2": 1,
                    "file_name_var2": 1,
                    "file_pointer_2": 1,
                    "filename_2": 1,
                    "filename_var_2": 1,
                    "pointer_char_var7": 1,
                    "pointer_to_char_var_2": 1,
                    "string_var7": 1,
                    "string_variable2": 1,
                    "sub_filename": 1
                },
                "piVar5": {
                    "errno_location": 1,
                    "errno_ptr": 2,
                    "errno_var": 1,
                    "error_code_pointer": 1,
                    "error_number": 1,
                    "int_pointer": 2,
                    "int_pointer5": 1,
                    "int_pointer_var5": 3,
                    "int_ptr": 5,
                    "int_ptr5": 1,
                    "int_ptr_var": 2,
                    "int_ptr_var5": 4,
                    "int_ptr_var_1": 1,
                    "pointer_i_var5": 1,
                    "pointer_to_integer_var_1": 1,
                    "pointer_var5": 4
                },
                "ppcVar14": {
                    "char_double_ptr_var_ppc_var14": 1,
                    "char_pointer_pointer1": 1,
                    "char_pointer_pointer14": 1,
                    "char_pointer_pointer2": 1,
                    "char_pointer_pointer_var14": 3,
                    "char_ptr_ptr14": 1,
                    "char_ptr_ptr2": 3,
                    "char_ptr_ptr_1": 1,
                    "char_ptr_ptr_var14": 2,
                    "char_ptr_ptr_var2": 2,
                    "char_ptr_ptr_var_1": 1,
                    "char_ptr_ptr_var_2": 1,
                    "current_archive_entry_pointer": 1,
                    "current_file": 1,
                    "current_file_ptr": 1,
                    "double_ptr_var14": 1,
                    "file_array": 1,
                    "pointer_pointer1": 1,
                    "pointer_pointer_char_var14": 1,
                    "pointer_pointer_var14": 1,
                    "pointer_to_archive_filename": 1,
                    "pointer_to_pointer_to_char_var_2": 1,
                    "pointer_to_pointer_var14": 1,
                    "unaffected_char_ptr_ptr_var14": 1
                },
                "ppcVar15": {
                    "char_double_ptr_var_ppc_var15": 1,
                    "char_pointer_pointer15": 1,
                    "char_pointer_pointer2": 1,
                    "char_pointer_pointer3": 1,
                    "char_pointer_pointer_var15": 3,
                    "char_ptr_ptr15": 1,
                    "char_ptr_ptr5": 3,
                    "char_ptr_ptr_2": 1,
                    "char_ptr_ptr_var15": 2,
                    "char_ptr_ptr_var3": 1,
                    "char_ptr_ptr_var5": 1,
                    "char_ptr_ptr_var_4": 1,
                    "char_ptr_ptr_var_5": 1,
                    "current_file_ptr": 1,
                    "double_ptr_var15": 1,
                    "file_array_2": 1,
                    "pointer_pointer2": 1,
                    "pointer_pointer_char_var15": 1,
                    "pointer_pointer_var15": 1,
                    "pointer_to_next_archive_filename": 1,
                    "pointer_to_pointer_to_char_var_3": 1,
                    "pointer_to_pointer_var15": 1,
                    "previous_archive_entry_pointer": 1,
                    "previous_file_ptr": 1,
                    "unaffected_char_ptr_ptr_var15": 1
                },
                "ppcVar8": {
                    "char_double_ptr_var8": 1,
                    "char_pointer_pointer": 1,
                    "char_pointer_pointer1": 1,
                    "char_pointer_pointer8": 1,
                    "char_pointer_pointer_var8": 3,
                    "char_ptr_ptr": 3,
                    "char_ptr_ptr1": 2,
                    "char_ptr_ptr8": 1,
                    "char_ptr_ptr_var": 2,
                    "char_ptr_ptr_var1": 1,
                    "char_ptr_ptr_var8": 3,
                    "char_ptr_ptr_var_1": 1,
                    "double_ptr_var8": 1,
                    "file_list_ptr": 1,
                    "filename_ptr": 1,
                    "pointer_pointer": 1,
                    "pointer_pointer_char_var8": 1,
                    "pointer_pointer_var8": 1,
                    "pointer_to_filename_var": 1,
                    "pointer_to_pointer_to_char_var_1": 1,
                    "pointer_to_pointer_var8": 1,
                    "sub_filename_pointer": 1,
                    "temp_pointer": 1
                },
                "sVar4": {
                    "size": 5,
                    "size_t_var4": 2,
                    "size_value": 1,
                    "size_var": 8,
                    "size_var4": 10,
                    "size_var_1": 2,
                    "string_length": 3
                },
                "stack0x000000b0": {
                    "stack_var": 1
                },
                "uVar1": {
                    "undefined1": 1,
                    "undefined_value": 2,
                    "undefined_var": 7,
                    "undefined_var1": 16,
                    "undefined_var_1": 3,
                    "undefined_variable": 1,
                    "undefined_variable_1": 1
                },
                "uVar12": {
                    "data_var": 1,
                    "global_variable": 1,
                    "long_value3": 1,
                    "message_str": 1,
                    "new_var": 1,
                    "temp_value": 1,
                    "temporary_variable_1": 1,
                    "undefined8_2": 1,
                    "undefined_var12": 14,
                    "undefined_var3": 3,
                    "undefined_var_3": 4,
                    "var12": 1
                },
                "uVar13": {
                    "temporary_variable_2": 1,
                    "ulong1": 1,
                    "ulong_value": 3,
                    "ulong_var": 8,
                    "ulong_var1": 2,
                    "ulong_var13": 14,
                    "ulong_var_1": 2
                },
                "uVar9": {
                    "extracted_filename": 1,
                    "return_val": 1,
                    "return_value": 3,
                    "undefined8_1": 1,
                    "undefined_var2": 3,
                    "undefined_var9": 15,
                    "undefined_var_2": 5,
                    "updated_value": 1,
                    "updated_var": 1
                },
                "unaff_R12": {
                    "archive_entry_list_end": 1,
                    "archive_filename_ptr": 1,
                    "char_double_ptr_var_unaff_r12": 1,
                    "char_pointer12": 1,
                    "char_ptr_ptr4": 3,
                    "char_ptr_ptr_var4": 1,
                    "char_ptr_ptr_var_3": 1,
                    "char_ptr_ptr_var_4": 1,
                    "char_ptr_ptr_var_r12": 1,
                    "current_file_ptr": 1,
                    "double_ptr_array": 1,
                    "file_list_ptr": 1,
                    "file_ptr_list_ptr": 1,
                    "pointer_r12": 3,
                    "r12_var": 1,
                    "register_r12": 3,
                    "register_var3": 1,
                    "register_var_pointer2": 1,
                    "temp_pointer_2": 1,
                    "unaffected_r12": 5
                },
                "unaff_R13D": {
                    "comparison_type": 1,
                    "comparison_value": 1,
                    "count": 1,
                    "file_cases": 1,
                    "file_type": 1,
                    "flag_var": 1,
                    "r13_d_var": 1,
                    "register_r13_d": 3,
                    "register_var3": 1,
                    "register_var4": 1,
                    "uint1": 1,
                    "uint_value": 1,
                    "uint_var": 6,
                    "uint_var13_d": 1,
                    "uint_var_1": 1,
                    "uint_var_r13_d": 1,
                    "uint_var_unaff_r13_d": 1,
                    "unaffected_r13_d": 4,
                    "unaffected_uint_r13_d": 1,
                    "unsigned_int_r13_d": 1
                },
                "unaff_R14": {
                    "archive_file_ptr": 1,
                    "archive_list_pointer": 1,
                    "base_address": 1,
                    "current_archive": 1,
                    "current_archive_ptr": 1,
                    "file_list_ptr_2": 1,
                    "long3": 1,
                    "long_value14": 1,
                    "long_var14": 2,
                    "long_var3": 3,
                    "long_var_3": 2,
                    "long_var_r14": 1,
                    "long_var_unaff_r14": 1,
                    "pointer_r14": 1,
                    "r14_var": 1,
                    "register_r14": 3,
                    "register_var4": 1,
                    "register_var5": 1,
                    "starting_pointer": 1,
                    "unaffected_r14": 5
                },
                "unaff_R1E": {
                    "unused_variable": 1
                },
                "unaff_RBP": {
                    "archive_entry_list_pointer": 1,
                    "archive_files": 1,
                    "char_double_ptr_var_unaff_rbp": 1,
                    "char_pointer_bp": 1,
                    "char_ptr_ptr3": 3,
                    "char_ptr_ptr_var3": 1,
                    "char_ptr_ptr_var_2": 1,
                    "char_ptr_ptr_var_3": 1,
                    "char_ptr_ptr_var_rbp": 1,
                    "file_array_pointer": 1,
                    "file_ptr_list": 2,
                    "pointer_array": 1,
                    "pointer_rbp": 3,
                    "pointer_to_filename": 1,
                    "rbp_var": 1,
                    "register_bp": 3,
                    "register_var2": 1,
                    "register_var_pointer": 1,
                    "unaffected_rbp": 5
                },
                "unaff_RBX": {
                    "buffer_ptr": 1,
                    "char_pointer_bx": 1,
                    "char_ptr_var3": 1,
                    "char_ptr_var_5": 1,
                    "char_ptr_var_rbx": 1,
                    "char_ptr_var_unaff_rbx": 1,
                    "current_file": 2,
                    "current_filename": 2,
                    "file_name_ptr": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "filename_buffer": 1,
                    "filename_ptr": 1,
                    "input_file": 1,
                    "pointer_rbx": 3,
                    "rbx_var": 1,
                    "register_bx": 3,
                    "register_var": 1,
                    "register_var1": 1,
                    "unaffected_rbx": 4,
                    "value1": 1
                }
            },
            "called": [
                "FUN_00105870",
                "bfd_openr",
                "FUN_001028ed",
                "FUN_00105ae0",
                "lbasename",
                "FUN_00107c10",
                "FUN_00103172",
                "FUN_00105af0",
                "FUN_00107690",
                "strlen",
                "FUN_00102943",
                "FUN_00105830",
                "xmalloc",
                "filename_cmp",
                "dcgettext",
                "stat",
                "__errno_location",
                "FUN_001058b0"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\n\n\nundefined8 find_and_process_files_001028ed(undefined8 error_message,long file_size)\n\n{\n  undefined undefined_var1;\n  byte byte_var2;\n  int int_var3;\n  size_t size_var4;\n  int *int_ptr;\n  char *char_ptr_var6;\n  char *char_ptr_var7;\n  char **char_ptr_ptr_var8;\n  undefined8 undefined_var9;\n  long long_var10;\n  char *string1;\n  char *string2;\n  long long_var11;\n  undefined8 undefined_var12;\n  ulong ulong_var13;\n  char *unaffected_rbx;\n  char **char_pointer_pointer_var14;\n  char **unaffected_rbp;\n  char **unaffected_r12;\n  uint uint_var;\n  char **char_pointer_pointer_var15;\n  long unaffected_r14;\n  bool bool_var;\n  byte byte_var17;\n  char **output_files;\n  undefined8 result;\n  long stack_var1;\n  long stack_var2;\n  \n  byte_var17 = 0;\ncode_r0x001028ed:\n  print_error_message_and_exit_00107c10(unaffected_rbx,file_size);\nLAB_001028f5:\n  undefined_var12 = DAT_0010d638;\n  if (uint_var != 3) {\n    while( true ) {\n      if ((undefined8 *)*unaffected_r12 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var3 = filename_cmp(*(undefined8 *)*unaffected_r12,undefined_var12);\n      if (int_var3 == 0) break;\n      unaffected_r12 = (char **)(*unaffected_r12 + 0xf0);\n    }\n    if (uint_var != 2) goto LAB_0010571f;\n    unaffected_r12 = (char **)(*unaffected_r12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var10 = *(long *)(unaffected_r14 + 0xf0);\n  if (*(long *)(unaffected_r14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var11 = long_var10;\n    long_var10 = *(long *)(long_var11 + 0xf0);\n  } while (long_var10 != 0);\n  unaffected_r12 = (char **)(long_var11 + 0xf0);\n  unaffected_rbx = *unaffected_rbp;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var1 = DAT_0010d5f8;\n  uint_var = (uint)(DAT_0010d60c != 0);\n  file_size = bfd_openr(unaffected_rbx,DAT_0010d5f0);\n  if (file_size != 0) {\n    unaffected_rbp = unaffected_rbp + 1;\n    byte_var2 = process_archived_files_00105af0(unaffected_r12,file_size,uint_var,undefined_var1);\n    result._6_1_ = result._6_1_ | byte_var2;\n    char_ptr_var6 = *unaffected_rbp;\n    do {\n      if (char_ptr_var6 == (char *)0x0) {\n        if (result._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var12 = process_archive_file_001058b0();\n        return undefined_var12;\n      }\n      char_pointer_pointer_var14 = *(char ***)(unaffected_r14 + 0xf0);\n      unaffected_r12 = output_files;\n      if (result._7_1_ == '\\0') {\n        char_pointer_pointer_var15 = output_files;\n        if (char_pointer_pointer_var14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              string1 = (char *)lbasename(*char_pointer_pointer_var14);\n              char_ptr_var7 = string1;\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string1);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(unaffected_r14 + 8) + 0x1e);\n                if (ulong_var13 < size_var4) {\n                  char_ptr_var7 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(unaffected_r14 + 8);\n                  char_ptr_var6 = char_ptr_var7;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr_var6 = *string1;\n                    string1 = string1 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr_var6 = char_ptr_var6 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr_var7[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                char_ptr_var6 = *unaffected_rbp;\n                string1 = char_ptr_var7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_ptr_var6 = *unaffected_rbp;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string2 = (char *)lbasename(char_ptr_var6);\n              if (DAT_0010d5fa != '\\0') {\n                size_var4 = strlen(string2);\n                ulong_var13 = (ulong)*(byte *)(*(long *)(unaffected_r14 + 8) + 0x1e);\n                char_ptr_var6 = string2;\n                string1 = char_ptr_var7;\n                if (ulong_var13 < size_var4) {\n                  char_ptr_var6 = (char *)xmalloc(ulong_var13 + 1);\n                  long_var10 = *(long *)(unaffected_r14 + 8);\n                  char_ptr_var7 = char_ptr_var6;\n                  for (ulong_var13 = (ulong)*(byte *)(long_var10 + 0x1e); ulong_var13 != 0; ulong_var13 = ulong_var13 - 1) {\n                    *char_ptr_var7 = *string2;\n                    string2 = string2 + (ulong)byte_var17 * -2 + 1;\n                    char_ptr_var7 = char_ptr_var7 + (ulong)byte_var17 * -2 + 1;\n                  }\n                  char_ptr_var6[*(byte *)(long_var10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var3 = filename_cmp(string2,char_ptr_var7);\n            }\n            else {\n              char_ptr_var6 = *unaffected_rbp;\n              string1 = *char_pointer_pointer_var14;\nLAB_00102980:\n              int_var3 = filename_cmp(char_ptr_var6,string1);\n            }\n            if ((int_var3 == 0) && (char_pointer_pointer_var14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var3 = stat(*unaffected_rbp,(stat *)&stack_var);\n                if (int_var3 != 0) {\n                  int_ptr = __errno_location();\n                  if (*int_ptr != 2) {\n                    print_error_message_and_exit_00107c10(*unaffected_rbp);\nLAB_00102b7e:\n                    char_ptr_var6 = *char_pointer_pointer_var14;\n                    undefined_var12 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_formatted_error_message_and_exit_00107690(undefined_var12,char_ptr_var6);\n                    free(unaffected_rbp);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr_var8 = (char **)char_pointer_pointer_var14[0x1d];\n                if ((char **)char_pointer_pointer_var14[0x1d] == (char **)0x0) {\n                  char_ptr_ptr_var8 = char_pointer_pointer_var14;\n                }\n                int_var3 = (**(code **)(char_ptr_ptr_var8[1] + 0x1e8))(char_pointer_pointer_var14,&stack0x00000020);\n                if (int_var3 != 0) goto LAB_00102b7e;\n                if (stack_var2 <= stack_var1) goto LAB_0010577e;\n              }\n              undefined_var12 = find_last_occurrence_00105870(output_files,2,*char_pointer_pointer_var14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_ptr_var6 = *unaffected_rbp;\n                bool_var = DAT_0010d60c != 0;\n                long_var10 = bfd_openr(char_ptr_var6,DAT_0010d5f0);\n                if (long_var10 == 0) {\n                  print_error_message_and_exit_00107c10(char_ptr_var6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var2 = print_and_update_data_00103172(undefined_var12,long_var10,bool_var);\n              }\n              else {\n                undefined_var9 = extract_and_copy_substring_00105830(*unaffected_rbp);\n                int_var3 = filename_cmp(undefined_var9,\"__.LIBDEP\");\n                if (int_var3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var2 = print_and_update_data_00103172(undefined_var12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var2 != 0) {\n                *char_pointer_pointer_var15 = *(char **)(*char_pointer_pointer_var15 + 0xf0);\n                result._6_1_ = byte_var2;\n              }\n              goto LAB_0010577e;\n            }\n            char_pointer_pointer_var15 = char_pointer_pointer_var14 + 0x1e;\n            char_pointer_pointer_var14 = (char **)char_pointer_pointer_var14[0x1e];\n          } while (char_pointer_pointer_var14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_var = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var10 = *(long *)(unaffected_r14 + 0xf0);\n        if (*(long *)(unaffected_r14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaffected_rbx = *unaffected_rbp;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var12 = extract_and_copy_substring_00105830(unaffected_rbx);\n      int_var3 = filename_cmp(undefined_var12,\"__.LIBDEP\");\n      if (int_var3 != 0) goto code_r0x0010574f;\n      byte_var2 = process_archived_files_00105ae0(unaffected_r12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      result._6_1_ = byte_var2 | result._6_1_;\nLAB_0010577e:\n      unaffected_rbp = unaffected_rbp + 1;\n      char_ptr_var6 = *unaffected_rbp;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaffected_rbx = *unaffected_rbp;\n  goto LAB_00105698;\n}\n\n",
            "current_name": "find_and_process_files_001028ed",
            "entrypoint": "0x001028ed",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001028ed": "find_and_process_files_001028ed",
                "__s": "string1",
                "__s_00": "string2",
                "bVar16": "bool_var",
                "bVar17": "byte_var17",
                "bVar2": "byte_var2",
                "iVar3": "int_var3",
                "in_stack_00000078": "stack_var1",
                "in_stack_00000108": "stack_var2",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "param_1": "error_message",
                "param_2": "file_size",
                "param_7": "output_files",
                "param_9": "result",
                "pcVar6": "char_ptr_var6",
                "pcVar7": "char_ptr_var7",
                "piVar5": "int_ptr",
                "ppcVar14": "char_pointer_pointer_var14",
                "ppcVar15": "char_pointer_pointer_var15",
                "ppcVar8": "char_ptr_ptr_var8",
                "sVar4": "size_var4",
                "stack0x000000b0": "stack_var",
                "uVar1": "undefined_var1",
                "uVar12": "undefined_var12",
                "uVar13": "ulong_var13",
                "uVar9": "undefined_var9",
                "unaff_R12": "unaffected_r12",
                "unaff_R13D": "uint_var",
                "unaff_R14": "unaffected_r14",
                "unaff_RBP": "unaffected_rbp",
                "unaff_RBX": "unaffected_rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102943": {
            "additional_data": {
                "DAT_0010d618": {
                    "count": 1,
                    "counter": 10,
                    "data": 2,
                    "data_counter": 7,
                    "data_flag": 1,
                    "data_initialized": 2,
                    "data_value": 3,
                    "data_variable": 1
                },
                "FUN_00102943": {
                    "initialize_counter": 7,
                    "initialize_data": 18,
                    "reset_counter": 4,
                    "reset_data": 1,
                    "reset_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "code": "\nvoid initialize_data_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_00102943",
            "entrypoint": "0x00102943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102ba1": {
            "additional_data": {
                "FUN_00102ba1": {
                    "deallocate_memory": 8,
                    "deallocate_memory_and_shift_retaddr": 1,
                    "free_and_return": 3,
                    "free_and_return_address": 2,
                    "free_and_return_null": 1,
                    "free_and_return_zero": 1,
                    "free_and_shift": 2,
                    "free_memory": 2,
                    "free_memory_and_convert_to_au_var1": 1,
                    "free_memory_and_return": 5,
                    "free_memory_and_return_address": 2,
                    "free_memory_and_shift": 1,
                    "free_pointer_and_return": 1,
                    "release_memory": 1
                },
                "auVar1": {
                    "modified_retaddr": 1,
                    "result": 3,
                    "return_data": 1,
                    "return_value": 2,
                    "updated_vars": 1
                },
                "unaff_RBP": {
                    "allocated_memory": 1,
                    "memory_address": 6,
                    "memory_block": 6,
                    "memory_block_address": 1,
                    "memory_block_pointer": 1,
                    "memory_block_to_deallocate": 1,
                    "memory_pointer": 2,
                    "memory_to_free": 1,
                    "pointer_to_deallocated_memory": 1,
                    "pointer_to_free": 3,
                    "pointer_to_free_memory": 1,
                    "ptr_memory": 1,
                    "ptr_to_be_freed": 2,
                    "ptr_to_free_memory": 2,
                    "ptr_to_memory": 1
                },
                "unaff_retaddr": {
                    "address": 1,
                    "original_retaddr": 1,
                    "return_address": 28
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\nundefined  [16] free_memory_and_return_address_00102ba1(void)\n\n{\n  undefined result [16];\n  void *memory_block;\n  ulong return_address;\n  \n  free(memory_block);\n  result._8_8_ = 0;\n  result._0_8_ = return_address;\n  return result << 0x40;\n}\n\n",
            "current_name": "free_memory_and_return_address_00102ba1",
            "entrypoint": "0x00102ba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102ba1": "free_memory_and_return_address_00102ba1",
                "auVar1": "result",
                "unaff_RBP": "memory_block",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102bb0": {
            "additional_data": {
                "FUN_00102bb0": {
                    "copy_and_null_terminate_string": 1,
                    "copy_string": 1,
                    "copy_string_subset": 1,
                    "copy_string_to_buffer": 1,
                    "copy_string_with_limit": 3,
                    "extract_substring": 1,
                    "reverse_and_copy_string": 1,
                    "reverse_string": 21,
                    "transform_string": 1
                },
                "auVar7": {
                    "result": 2,
                    "result_struct": 1,
                    "return_array": 1,
                    "return_object": 1,
                    "return_struct": 1,
                    "return_val": 2,
                    "return_value": 20
                },
                "bVar6": {
                    "byte_var": 1,
                    "copy_direction": 1,
                    "flag": 2,
                    "increment": 1,
                    "is_backwards": 2,
                    "is_end_of_string": 1,
                    "is_negative": 9,
                    "is_positive": 1,
                    "is_reverse": 2,
                    "is_reverse_complete": 1,
                    "is_reversed": 7,
                    "reverse_flag": 1
                },
                "in_RAX": {
                    "input_string": 24,
                    "source_string": 4,
                    "str": 1,
                    "string": 2
                },
                "lVar1": {
                    "base_address": 1,
                    "input_string_address": 1,
                    "source_ptr": 1
                },
                "puVar3": {
                    "copied_string": 5,
                    "destination_buffer": 1,
                    "destination_string": 1,
                    "new_string": 2,
                    "output_string": 2,
                    "result_ptr": 1,
                    "reversed_str": 1,
                    "reversed_string": 16
                },
                "puVar5": {
                    "copied_pointer": 1,
                    "copied_ptr": 1,
                    "current_char": 4,
                    "current_char_reversed_string": 1,
                    "dest_ptr": 2,
                    "destination": 1,
                    "destination_pointer": 3,
                    "destination_ptr": 2,
                    "new_string_current": 1,
                    "result_index": 1,
                    "reversed_char": 1,
                    "reversed_char_ptr": 1,
                    "reversed_str_ptr": 1,
                    "reversed_string_pointer": 4,
                    "reversed_string_ptr": 4,
                    "temp_string": 1
                },
                "sVar2": {
                    "input_length": 9,
                    "input_string_length": 1,
                    "source_length": 3,
                    "str_length": 1,
                    "string_length": 15
                },
                "uVar4": {
                    "copy_length": 1,
                    "limit": 4,
                    "max_characters": 1,
                    "max_copy_length": 1,
                    "max_length": 15,
                    "max_reverse_length": 1,
                    "max_source_length": 1,
                    "max_string_length": 3,
                    "max_substr_length": 1,
                    "subset_length": 1
                },
                "unaff_RBP": {
                    "base_pointer": 13,
                    "base_ptr": 1,
                    "frame_pointer": 4,
                    "frame_ptr": 2,
                    "function_frame": 1,
                    "stack_base": 1,
                    "stack_base_pointer": 2,
                    "stack_base_ptr": 1,
                    "stack_frame": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1,
                    "unaff_rbp": 1
                },
                "unaff_RBX": {
                    "current_char": 11,
                    "current_char_ptr": 1,
                    "dest_string": 1,
                    "original_string": 2,
                    "source": 3,
                    "source_pointer": 4,
                    "source_ptr": 6
                },
                "unaff_retaddr": {
                    "return_address": 16
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "strlen",
                "xmalloc"
            ],
            "calling": [
                "FUN_00105830"
            ],
            "code": "\nundefined  [16] reverse_and_copy_string_00102bb0(void)\n\n{\n  long base_address;\n  char *input_string;\n  size_t string_length;\n  undefined *reversed_string;\n  ulong max_length;\n  undefined *current_char;\n  long base_pointer;\n  undefined *reversed_string_pointer;\n  byte is_negative;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  is_negative = 0;\n  string_length = strlen(input_string);\n  max_length = (ulong)*(byte *)(*(long *)(base_pointer + 8) + 0x1e);\n  reversed_string = current_char;\n  if (max_length < string_length) {\n    reversed_string = (undefined *)xmalloc(max_length + 1);\n    base_address = *(long *)(base_pointer + 8);\n    reversed_string_pointer = reversed_string;\n    for (max_length = (ulong)*(byte *)(base_address + 0x1e); max_length != 0; max_length = max_length - 1) {\n      *reversed_string_pointer = *current_char;\n      current_char = current_char + (ulong)is_negative * -2 + 1;\n      reversed_string_pointer = reversed_string_pointer + (ulong)is_negative * -2 + 1;\n    }\n    reversed_string[*(byte *)(base_address + 0x1e)] = 0;\n  }\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = reversed_string;\n  return return_value;\n}\n\n",
            "current_name": "reverse_and_copy_string_00102bb0",
            "entrypoint": "0x00102bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102bb0": "reverse_and_copy_string_00102bb0",
                "auVar7": "return_value",
                "bVar6": "is_negative",
                "in_RAX": "input_string",
                "lVar1": "base_address",
                "puVar3": "reversed_string",
                "puVar5": "reversed_string_pointer",
                "sVar2": "string_length",
                "uVar4": "max_length",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "current_char",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102bf5": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "file_handle": 1,
                    "file_pointer": 4,
                    "file_ptr": 2,
                    "file_to_close": 2
                },
                "DAT_0010d5e0": {
                    "cache_enabled": 2,
                    "cache_flag": 1,
                    "cache_initialized": 1,
                    "cache_is_initialized": 1,
                    "cache_open": 1,
                    "cache_status": 1,
                    "flag": 1,
                    "should_close_cache": 1
                },
                "DAT_0010d618": {
                    "file_path": 4,
                    "file_to_remove": 2,
                    "file_to_unlink": 1
                },
                "FILE": {
                    "file": 1
                },
                "FUN_00102bf5": {
                    "clean_up_and_close": 1,
                    "cleanup": 2,
                    "cleanup_and_close": 2,
                    "cleanup_and_close_file": 1,
                    "cleanup_and_close_files": 1,
                    "cleanup_and_finalize": 1,
                    "cleanup_cache": 1,
                    "cleanup_function": 2,
                    "cleanup_resources": 6,
                    "close_and_delete_files": 1,
                    "close_and_remove_cache_files": 2,
                    "close_and_remove_file": 1,
                    "close_cache_and_file": 2,
                    "close_file_and_delete": 2,
                    "close_file_and_remove": 2,
                    "close_file_and_unlink": 4
                },
                "bfd_cache_close": {
                    "": 1,
                    "close_bfd_cache": 1,
                    "close_cache": 2
                },
                "cachePtr": {
                    "cache": 1
                },
                "cleanup_function": {
                    "cleanup_files": 1
                },
                "close_cache": {
                    "close_bfd_cache": 1
                },
                "close_file": {
                    "close_file": 1
                },
                "fclose": {
                    "": 1,
                    "close_file": 11
                },
                "filePtr": {
                    "file": 1
                },
                "file_descriptor": {
                    "file_to_close": 1
                },
                "file_path": {
                    "file_to_remove": 1
                },
                "file_stream_pointer": {
                    "file_stream": 1
                },
                "unlink_if_ordinary": {
                    "": 1,
                    "clear_file": 1,
                    "delete_file": 5,
                    "delete_file_if_regular": 1,
                    "delete_if_ordinary": 1,
                    "remove_file": 17,
                    "unlink_ordinary_file": 1
                }
            },
            "called": [
                "fclose",
                "unlink_if_ordinary",
                "bfd_cache_close"
            ],
            "calling": [
                "FUN_00107730"
            ],
            "code": "\nvoid cleanup_resources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (file *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "current_name": "cleanup_resources_00102bf5",
            "entrypoint": "0x00102bf5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "close_cache",
                "fclose": "close_file",
                "unlink_if_ordinary": "remove_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102c25": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "archive_file": 1,
                    "extracted_file": 1,
                    "file_descriptor": 1,
                    "file_pointer": 1,
                    "file_pointer2": 1,
                    "file_ptr": 2,
                    "file_stream": 1,
                    "output_file": 1
                },
                "DAT_0010d600": {
                    "modification_flag": 1
                },
                "DAT_0010d618": {
                    "archive_file": 1,
                    "archive_member": 2,
                    "file_name": 2,
                    "file_path": 2,
                    "filename": 1
                },
                "DAT_0010d638": {
                    "default_error_message": 2,
                    "filename": 1,
                    "stat_error_message": 2,
                    "unknown_identifier": 1
                },
                "FUN_00102c25": {
                    "extract_and_modify_archive": 1,
                    "extract_and_modify_archive_member": 8,
                    "extract_and_modify_file": 5,
                    "extract_and_process_archive": 1,
                    "extract_and_process_archive_member": 1,
                    "extract_and_save_archive_member": 4,
                    "extract_and_set_file_permissions": 1,
                    "extract_and_store_archive_contents": 1,
                    "extract_and_write_archive_member": 1,
                    "extract_archive": 1,
                    "extract_archive_member": 4,
                    "extract_archive_member_to_file": 1,
                    "extract_data_from_archive": 1,
                    "extract_file_from_archive": 1
                },
                "_DAT_0010d600": {
                    "file_modification_time": 1,
                    "modification_flag": 4,
                    "modification_time_flag": 1,
                    "modify_file_permission_flag": 1,
                    "should_modify_time": 1
                },
                "__n": {
                    "buffer_size": 1,
                    "bytes_read": 25,
                    "chunk_size": 1,
                    "num_bytes": 1,
                    "read_bytes": 2,
                    "read_size": 1
                },
                "__ptr": {
                    "archive_buffer": 1,
                    "buffer": 17,
                    "buffer_pointer": 3,
                    "buffer_ptr": 9,
                    "file_buffer": 1
                },
                "bfd_bread": {
                    "read_from_buffer": 1
                },
                "bfd_seek": {
                    "seek_to_offset": 1
                },
                "chmod": {
                    "change_file_mode": 1
                },
                "dcgettext": {
                    "get_localized_error_message": 1
                },
                "extract_archive_member_to_file_00105a20": {
                    "extract_member_to_file": 1
                },
                "fclose": {
                    "close_file": 1
                },
                "free": {
                    "free_memory": 1
                },
                "fwrite": {
                    "write_to_file": 1
                },
                "iVar1": {
                    "cmp_result": 1,
                    "comparison_result": 13,
                    "filename_cmp_result": 2,
                    "filename_comparison": 2,
                    "filename_comparison_result": 8,
                    "result": 1
                },
                "iVar2": {
                    "archive_result": 1,
                    "error": 1,
                    "error_code": 6,
                    "error_condition": 1,
                    "function_result": 1,
                    "internal_stat_error": 2,
                    "primary_error": 1,
                    "result": 3,
                    "result_code": 1,
                    "return_value": 2,
                    "stat_error": 6,
                    "stat_error_code": 2,
                    "stat_result": 1,
                    "status": 2
                },
                "lVar7": {
                    "iteration_counter": 1,
                    "loop_count": 2,
                    "loop_counter": 22,
                    "loop_index": 3,
                    "loop_variable": 1,
                    "outer_loop_counter": 1
                },
                "param_11": {
                    "file_mode": 3,
                    "file_permission": 4,
                    "file_permissions": 11,
                    "mode": 4,
                    "new_file_permissions": 2,
                    "output_mode": 1,
                    "param_mode": 1,
                    "permission": 1,
                    "permission_mode": 1,
                    "permissions": 1
                },
                "param_12": {
                    "archive_member_size": 6,
                    "archive_size": 6,
                    "data_size": 1,
                    "file_size": 12,
                    "filesize": 1,
                    "input_size": 1,
                    "param_filesize": 1,
                    "size": 3
                },
                "param_7": {
                    "array": 1,
                    "array_of_indices": 1,
                    "error_code": 1,
                    "error_codes": 3,
                    "filename_array": 1,
                    "filesystem_permissions": 1,
                    "flags": 3,
                    "options": 3,
                    "output_permissions": 1,
                    "param_7": 1,
                    "param_array": 6,
                    "param_err": 1,
                    "param_error_codes": 1,
                    "param_error_msgs": 1,
                    "param_errors": 1,
                    "param_licenses": 1,
                    "parameter7": 1,
                    "parameters": 1,
                    "permissions_array": 1,
                    "ptr_flags": 1
                },
                "pcVar4": {
                    "errno_string": 1,
                    "error_description": 2,
                    "error_message": 15,
                    "error_message_string": 1,
                    "error_string": 11,
                    "errstr": 1
                },
                "piVar3": {
                    "errno_loc": 1,
                    "errno_location": 13,
                    "errno_location_ptr": 1,
                    "errno_pointer": 2,
                    "errno_ptr": 4,
                    "errno_value": 1,
                    "errnum_ptr": 1,
                    "error_location": 2,
                    "error_number": 6
                },
                "plVar8": {
                    "current_entry": 1,
                    "current_file": 2,
                    "current_location": 1,
                    "current_member": 4,
                    "current_member_info": 1,
                    "current_member_ptr": 2,
                    "current_pointer": 4,
                    "current_position": 1,
                    "current_ptr": 1,
                    "current_ptr_to_archive": 1,
                    "entry": 1,
                    "file_info_1": 1,
                    "file_pointer": 5,
                    "file_ptr": 3,
                    "found_archive_member": 1,
                    "ptr_to_long": 1,
                    "result_ptr": 1
                },
                "pplVar6": {
                    "arch_member": 1,
                    "arch_member_ptr": 1,
                    "archive": 1,
                    "archive_data": 1,
                    "archive_directory_ptr": 1,
                    "archive_entry": 1,
                    "archive_info": 3,
                    "archive_location": 1,
                    "archive_member_list": 2,
                    "archive_member_pointer": 1,
                    "archive_pointer": 4,
                    "archive_ptr": 2,
                    "archive_ptr_ptr": 1,
                    "buffer": 1,
                    "current_archive": 1,
                    "file_data_pointer": 1,
                    "file_information": 1,
                    "file_properties": 1,
                    "function_pointers_ptr": 1,
                    "function_ptr_array": 1,
                    "ptr_to_archive": 1,
                    "ptr_to_archive_member": 1,
                    "ptr_to_long": 1
                },
                "print_formatted_error_message_and_exit_00107690": {
                    "print_formatted_error_message_and_exit": 1
                },
                "puVar9": {
                    "array_pointer": 1,
                    "current_permission": 1,
                    "error_code_pointer": 2,
                    "formatting_ptr": 1,
                    "initialized_ptr": 1,
                    "param_7_iterator": 2,
                    "param_7_ptr": 1,
                    "param_array_iterator": 1,
                    "param_array_ptr": 2,
                    "param_error_msgs_iterator": 1,
                    "param_iterator": 1,
                    "param_pointer": 3,
                    "param_ptr": 4,
                    "parameter_pointer": 2,
                    "parameter_ptr": 1,
                    "pointer_to_zero_array": 1,
                    "ptr": 1,
                    "ptr_to_array_element": 1,
                    "ptr_to_options": 1,
                    "ptr_variable": 1
                },
                "sVar11": {
                    "block_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "bytes_remaining": 1,
                    "bytes_to_copy": 1,
                    "bytes_to_process": 4,
                    "bytes_to_read": 12,
                    "bytes_to_write": 1,
                    "bytes_written": 1,
                    "chunk_size": 1,
                    "copy_size": 1,
                    "processed_size": 1,
                    "remaining_bytes": 1,
                    "write_length": 1,
                    "write_size": 2
                },
                "set_file_modification_time_00107c80": {
                    "set_modification_time": 1
                },
                "uVar10": {
                    "bytes_copied": 1,
                    "bytes_processed": 13,
                    "bytes_read": 5,
                    "bytes_written": 8,
                    "read_total": 1,
                    "total_bytes_read": 2
                },
                "uVar5": {
                    "error_format": 1,
                    "error_label": 1,
                    "error_message": 13,
                    "error_message_id": 1,
                    "error_message_language": 1,
                    "error_string": 4,
                    "error_text": 3,
                    "gettext_result": 1,
                    "gettext_string": 1,
                    "localized_error_message": 1,
                    "msg": 1,
                    "translated_error": 2,
                    "translated_message": 1
                },
                "unaff_RBX": {
                    "archive": 1,
                    "archive_data": 1,
                    "archive_entry": 1,
                    "archive_info": 1,
                    "archive_member": 4,
                    "archive_member_info": 1,
                    "archive_member_ptr": 2,
                    "archive_pointer": 1,
                    "archive_pointer2": 1,
                    "arguments_array": 1,
                    "data_array": 1,
                    "file_directory_ptr": 1,
                    "file_info": 1,
                    "file_info_2": 1,
                    "file_information": 1,
                    "file_list_ptr": 1,
                    "file_pointer": 1,
                    "function_arguments": 1,
                    "input": 1,
                    "selected_archive_member": 1,
                    "unaff_ptr": 1,
                    "unaff_rb_ptr": 1,
                    "unaff_var": 1
                }
            },
            "called": [
                "FUN_00107c80",
                "bfd_bread",
                "free",
                "bfd_seek",
                "FUN_00107690",
                "FUN_00105a20",
                "fclose",
                "chmod",
                "strerror",
                "fwrite",
                "xmalloc",
                "dcgettext",
                "__errno_location"
            ],
            "calling": [
                "FUN_00107740"
            ],
            "code": "\n\n\nlong * extract_and_modify_archive_member_00102c25(void)\n\n{\n  int comparison_result;\n  int error_code;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  long **archive_pointer;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **archive_member;\n  long *file_pointer;\n  undefined4 *param_ptr;\n  ulong bytes_processed;\n  size_t bytes_to_read;\n  undefined4 *param_array;\n  __mode_t file_permissions;\n  ulong file_size;\n  \n  param_ptr = param_array;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *param_ptr = 0;\n    param_ptr = param_ptr + 1;\n  }\n  archive_pointer = (long **)archive_member[0x1d];\n  if ((long **)archive_member[0x1d] == (long **)0x0) {\n    archive_pointer = archive_member;\n  }\n  error_code = (*(code *)archive_pointer[1][0x3d])();\n  if (error_code != 0) {\n    file_pointer = *archive_member;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_formatted_error_message_and_exit(error_message,file_pointer);\n    error_message = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *file_pointer != 0; file_pointer = (long *)(*file_pointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*file_pointer != (undefined8 *)0x0; file_pointer = (long *)(*file_pointer + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*file_pointer,error_message);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return file_pointer;\n          }\n          return (long *)(*file_pointer + 0xf0);\n        }\n      }\n    }\n    return file_pointer;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_member_to_file(*archive_member);\n  }\n  else {\n    bytes_processed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = file_size - bytes_processed;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive_member = (long **)*archive_member[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        print_formatted_error_message_and_exit(error_message,archive_member);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_member_to_file(*archive_member);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_formatted_error_message_and_exit(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_processed = bytes_processed + bytes_read;\n    } while (bytes_processed < file_size);\n    free_memory(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    set_modification_time(error_message,param_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "current_name": "extract_and_modify_archive_member_00102c25",
            "entrypoint": "0x00102c25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102c25": "extract_and_modify_archive_member_00102c25",
                "__n": "bytes_read",
                "__ptr": "buffer",
                "bfd_bread": "read_from_buffer",
                "bfd_seek": "seek_to_offset",
                "chmod": "change_file_mode",
                "dcgettext": "get_localized_error_message",
                "extract_archive_member_to_file_00105a20": "extract_member_to_file",
                "fclose": "close_file",
                "free": "free_memory",
                "fwrite": "write_to_file",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "lVar7": "loop_counter",
                "param_11": "file_permissions",
                "param_12": "file_size",
                "param_7": "param_array",
                "pcVar4": "error_message",
                "piVar3": "errno_location",
                "plVar8": "file_pointer",
                "pplVar6": "archive_pointer",
                "print_formatted_error_message_and_exit_00107690": "print_formatted_error_message_and_exit",
                "puVar9": "param_ptr",
                "sVar11": "bytes_to_read",
                "set_file_modification_time_00107c80": "set_modification_time",
                "uVar10": "bytes_processed",
                "uVar5": "error_message",
                "unaff_RBX": "archive_member"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102cd9": {
            "additional_data": {
                "FUN_00102cd9": {
                    "find_file_in_directory": 1,
                    "find_file_offset": 1,
                    "find_filename": 1,
                    "find_matching_address": 8,
                    "find_matching_entry": 9,
                    "find_matching_file": 5,
                    "find_matching_file_entry": 1,
                    "find_matching_file_info": 1,
                    "find_matching_pointer": 3,
                    "find_matching_value": 1
                },
                "iVar1": {
                    "cmp_result": 2,
                    "comparison_result": 19,
                    "filename_comparison": 1
                },
                "in_EAX": {
                    "comparison": 1,
                    "comparison_type": 1,
                    "comparison_value": 7,
                    "condition": 1,
                    "count": 1,
                    "counter": 1,
                    "eax_value": 1,
                    "execution_mode": 1,
                    "file_count": 2,
                    "file_type": 1,
                    "input": 2,
                    "input_param": 1,
                    "input_value": 3,
                    "loop_count": 1,
                    "mode": 1,
                    "param1": 2,
                    "parameter1": 1,
                    "parameter_1": 1,
                    "parameter_flag": 1,
                    "search_mode": 1
                },
                "param_7": {
                    "comparison_address": 3,
                    "comparison_string": 1,
                    "comparison_value": 1,
                    "filename": 1,
                    "filename_to_find": 1,
                    "search_file": 1,
                    "search_filename": 3,
                    "search_value": 4,
                    "target": 2,
                    "target_address": 3,
                    "target_file_name": 1,
                    "target_filename": 10
                },
                "unaff_RBX": {
                    "address_list": 1,
                    "address_pointer": 3,
                    "addresses": 1,
                    "array_ptr": 1,
                    "current_address": 3,
                    "current_entry": 4,
                    "current_pointer": 4,
                    "entries": 1,
                    "entry_list": 1,
                    "entry_pointer": 2,
                    "entry_ptr": 1,
                    "file_entry": 1,
                    "file_info_list": 1,
                    "file_list": 3,
                    "file_offset": 1,
                    "file_pointer": 1,
                    "files_array": 1,
                    "pointer_array": 1
                }
            },
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105870"
            ],
            "code": "\nlong * find_matching_file_entry_00102cd9(void)\n\n{\n  int comparison_value;\n  int comparison_result;\n  long *current_pointer;\n  undefined8 target_filename;\n  \n  target_filename = DAT_0010d638;\n  if (comparison_value == 3) {\n    for (; *current_pointer != 0; current_pointer = (long *)(*current_pointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*current_pointer != (undefined8 *)0x0; current_pointer = (long *)(*current_pointer + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*current_pointer,target_filename);\n      if (comparison_result == 0) {\n        if (comparison_value != 2) {\n          return current_pointer;\n        }\n        return (long *)(*current_pointer + 0xf0);\n      }\n    }\n  }\n  return current_pointer;\n}\n\n",
            "current_name": "find_matching_file_entry_00102cd9",
            "entrypoint": "0x00102cd9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102cd9": "find_matching_file_entry_00102cd9",
                "iVar1": "comparison_result",
                "in_EAX": "comparison_value",
                "param_7": "target_filename",
                "unaff_RBX": "current_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d2f": {
            "additional_data": {
                "DAT_0010d5e0": {
                    "data_var2": 1,
                    "error_flag": 1,
                    "var1": 1
                },
                "DAT_0010d5f8": {
                    "data_var1": 1,
                    "is_archive_head": 1,
                    "is_corrupt": 1
                },
                "DAT_0010d618": {
                    "data_var3": 1,
                    "error_flag": 1,
                    "var2": 1
                },
                "FUN_00102d2f": {
                    "format_and_print_file_info": 1,
                    "print_and_close_file": 1,
                    "print_and_exit": 2,
                    "print_and_exit_on_error": 1,
                    "print_archive_content_info": 1,
                    "print_archive_info": 1,
                    "print_archived_file_info": 1,
                    "print_file_details": 1,
                    "print_file_info": 12,
                    "print_file_information": 6,
                    "print_file_metadata": 2,
                    "print_file_statistics": 1
                },
                "__format": {
                    "error_message_format": 2,
                    "error_msg_format": 1,
                    "format_string": 1,
                    "message_format": 1,
                    "time_data_corrupt": 1,
                    "time_data_corrupt_message": 1,
                    "time_data_error_message": 1,
                    "time_data_format": 1,
                    "time_error_message": 7,
                    "time_format": 2
                },
                "bVar1": {
                    "error": 1,
                    "error_byte": 1,
                    "error_flag": 1,
                    "error_message": 4,
                    "error_message_value": 1,
                    "exit_status": 1
                },
                "bfd_close": {
                    "close": 1
                },
                "bfd_set_archive_head": {
                    "set_archive_head": 1
                },
                "cStack0000000000000016": {
                    "char1": 1,
                    "executable_flag": 1,
                    "file_owner_read": 1,
                    "file_owner_read_permission": 1,
                    "file_permission2": 1,
                    "file_permission_char1": 2,
                    "file_permission_user_read": 1,
                    "has_read_permission": 2,
                    "has_read_permissions": 1,
                    "has_set_uid": 1,
                    "has_uid_bit": 1,
                    "is_executable": 3,
                    "is_readable": 2,
                    "permission1": 2,
                    "permission_bit1": 1,
                    "permission_char1": 2,
                    "read_permission": 2,
                    "second_character": 1,
                    "setuid_permission": 1
                },
                "cStack0000000000000017": {
                    "char2": 1,
                    "file_owner_write": 1,
                    "file_owner_write_permission": 1,
                    "file_permission3": 1,
                    "file_permission_char2": 2,
                    "file_permission_user_write": 1,
                    "has_gid_bit": 1,
                    "has_set_gid": 1,
                    "has_write_permission": 2,
                    "has_write_permissions": 1,
                    "is_writable": 5,
                    "permission2": 2,
                    "permission_bit2": 1,
                    "permission_char2": 2,
                    "setgid_permission": 1,
                    "third_character": 1,
                    "writable_flag": 1,
                    "write_permission": 2
                },
                "cStack0000000000000019": {
                    "char4": 1,
                    "executable_flag_owner": 1,
                    "fifth_character": 1,
                    "file_group_read": 1,
                    "file_group_read_permission": 1,
                    "file_permission5": 1,
                    "file_permission_char4": 2,
                    "file_permission_group_read": 1,
                    "has_owner_read_permission": 1,
                    "has_read_permission": 1,
                    "has_read_permission2": 1,
                    "has_read_permissions_group": 1,
                    "is_archive": 1,
                    "is_executable_by_group": 1,
                    "is_readable": 1,
                    "is_readable_by_owner": 1,
                    "is_set_uid": 1,
                    "permission4": 2,
                    "permission_bit4": 1,
                    "permission_char4": 2,
                    "read_permission": 1,
                    "setuid_permission": 1,
                    "world_read_permission": 1
                },
                "cStack000000000000001a": {
                    "char5": 1,
                    "file_group_write": 1,
                    "file_group_write_permission": 1,
                    "file_permission6": 1,
                    "file_permission_char5": 2,
                    "file_permission_group_write": 1,
                    "has_owner_write_permission": 1,
                    "has_write_permission": 1,
                    "has_write_permission2": 1,
                    "has_write_permissions_group": 1,
                    "is_set_gid": 1,
                    "is_symbolic_link": 1,
                    "is_writable": 1,
                    "is_writable_by_group": 1,
                    "is_writable_by_owner": 1,
                    "permission5": 2,
                    "permission_bit5": 1,
                    "permission_char5": 2,
                    "setgid_permission": 1,
                    "sixth_character": 1,
                    "world_write_permission": 1,
                    "writable_flag_owner": 1,
                    "write_permission": 1
                },
                "cStack000000000000001b": {
                    "char6": 1,
                    "execute_permission": 1,
                    "file_group_execute": 1,
                    "file_group_execute_permission": 1,
                    "file_permission7": 1,
                    "file_permission_char6": 2,
                    "file_permission_group_execute": 1,
                    "has_execute_permission": 1,
                    "has_execute_permission2": 1,
                    "has_execute_permissions_group": 1,
                    "has_owner_execute_permission": 1,
                    "is_executable": 1,
                    "is_executable_by_owner": 1,
                    "is_readable_by_group": 1,
                    "is_setuid": 1,
                    "is_sticky": 1,
                    "is_subdir": 1,
                    "permission6": 2,
                    "permission_bit6": 1,
                    "permission_char6": 2,
                    "readable_flag_owner": 1,
                    "seventh_character": 1,
                    "sticky_permission": 1,
                    "world_execute_permission": 1
                },
                "cStack000000000000001c": {
                    "char7": 1,
                    "eighth_character": 1,
                    "executable_flag_group": 1,
                    "file_other_read": 1,
                    "file_other_read_permission": 1,
                    "file_permission8": 1,
                    "file_permission_char7": 2,
                    "file_permission_other_read": 1,
                    "group_read_permission": 1,
                    "has_group_read_permission": 1,
                    "has_read_owner_permission": 1,
                    "has_read_permission3": 1,
                    "has_read_permissions_others": 1,
                    "is_executable_by_others": 1,
                    "is_owner_readable": 1,
                    "is_readable": 1,
                    "is_readable_by_group": 1,
                    "is_setuid": 1,
                    "permission7": 2,
                    "permission_bit7": 1,
                    "permission_char7": 2,
                    "read_permission": 1
                },
                "cStack000000000000001d": {
                    "char8": 1,
                    "file_other_write": 1,
                    "file_other_write_permission": 1,
                    "file_permission9": 1,
                    "file_permission_char8": 2,
                    "file_permission_other_write": 1,
                    "group_write_permission": 1,
                    "has_group_write_permission": 1,
                    "has_write_owner_permission": 1,
                    "has_write_permission3": 1,
                    "has_write_permissions_others": 1,
                    "is_owner_writable": 1,
                    "is_setgid": 1,
                    "is_writable": 1,
                    "is_writable_by_group": 1,
                    "is_writable_by_others": 1,
                    "ninth_character": 1,
                    "permission8": 2,
                    "permission_bit8": 1,
                    "permission_char8": 2,
                    "writable_flag_group": 1,
                    "write_permission": 1
                },
                "cStack000000000000001e": {
                    "char9": 1,
                    "execute_permission": 1,
                    "file_other_execute": 1,
                    "file_other_execute_permission": 1,
                    "file_permission10": 1,
                    "file_permission_char9": 2,
                    "file_permission_other_execute": 1,
                    "group_execute_permission": 1,
                    "has_execute_owner_permission": 1,
                    "has_execute_permission3": 1,
                    "has_execute_permissions_others": 1,
                    "has_group_execute_permission": 1,
                    "is_executable": 1,
                    "is_executable_by_group": 1,
                    "is_owner_executable": 1,
                    "is_readable_by_others": 1,
                    "is_setgid": 1,
                    "is_sticky": 1,
                    "permission9": 2,
                    "permission_bit9": 1,
                    "permission_char9": 2,
                    "readable_flag_group": 1,
                    "tenth_character": 1
                },
                "cStack000000000000001f": {
                    "format_specifier": 1,
                    "has_other_permissions": 1,
                    "has_special_permissions": 1,
                    "is_archived": 1,
                    "permission_bit10": 1,
                    "sym_link_flag": 1,
                    "unused_flag": 1
                },
                "cVar2": {
                    "bfd_result": 1,
                    "bfd_set_archive_head_result": 2,
                    "bfd_set_archive_result": 1,
                    "has_archive_head": 1,
                    "result": 4,
                    "set_head_flag": 1
                },
                "copy_and_print_error_message_00105bc0": {
                    "copy_and_print_error": 1
                },
                "dcgettext": {
                    "gettext": 1
                },
                "dup": {
                    "duplicate": 1
                },
                "iVar3": {
                    "copied_and_printed_error_message": 1,
                    "copy_and_print_error_result": 1,
                    "copy_error": 1,
                    "copy_error_flag": 1,
                    "copy_error_status": 1,
                    "copy_result": 2,
                    "error_value": 1,
                    "status": 1
                },
                "in_stack_00000018": {
                    "char3": 1,
                    "execute_permission": 2,
                    "file_owner_execute": 1,
                    "file_owner_execute_permission": 1,
                    "file_permission4": 1,
                    "file_permission_char3": 2,
                    "file_permission_user_execute": 1,
                    "fourth_character": 1,
                    "has_execute_permission": 1,
                    "has_execute_permissions": 1,
                    "has_sticky_bit": 2,
                    "is_executable": 3,
                    "is_readable": 3,
                    "permission3": 2,
                    "permission_bit3": 1,
                    "permission_char3": 2,
                    "readable_flag": 1,
                    "sticky_bit_permission": 1
                },
                "in_stack_00000070": {
                    "block_size": 1,
                    "file_blocks": 1,
                    "file_count": 1,
                    "file_gid": 1,
                    "file_group": 2,
                    "file_links": 1,
                    "file_owner": 1,
                    "file_permissions": 1,
                    "file_size": 4,
                    "file_size2": 1,
                    "file_uid": 1,
                    "group_id": 7,
                    "hard_links": 1,
                    "inode": 2,
                    "num_inodes": 1,
                    "num_links": 1,
                    "number2": 1,
                    "stack_variable3": 1,
                    "var3": 1
                },
                "in_stack_00000080": {
                    "file_last_modification": 1,
                    "file_last_modified": 1,
                    "file_modification_time": 1,
                    "file_size": 12,
                    "file_size3": 1,
                    "last_access_time": 1,
                    "last_accessed": 1,
                    "last_modified_date": 1,
                    "last_modified_time": 1,
                    "number3": 1,
                    "size": 1,
                    "stack_variable4": 1,
                    "time_data": 2,
                    "time_modified": 1,
                    "time_str": 1,
                    "timestamp": 3
                },
                "print_error_message_and_exit_00107c10": {
                    "print_error_and_exit": 1
                },
                "stack0x00000020": {
                    "error_message": 2
                },
                "uStack0000000000000015": {
                    "file_permission": 3,
                    "file_permission1": 1,
                    "file_type": 11,
                    "file_type_char": 3,
                    "file_type_character": 1,
                    "file_type_code": 1,
                    "file_type_flag": 1,
                    "file_type_indicator": 1,
                    "first_character": 1,
                    "permission": 1,
                    "permission_code": 1
                },
                "uStack000000000000001f": {
                    "flag": 3,
                    "flag2": 1,
                    "format_flag": 2,
                    "has_other_permissions": 1,
                    "is_sticky": 1,
                    "padding": 1,
                    "some_flag": 1,
                    "unused_variable": 1,
                    "var1": 1
                },
                "uStack000000000000005c": {
                    "error_code": 1
                },
                "uStack0000000000000060": {
                    "error_message": 1
                },
                "uStack0000000000000064": {
                    "file_size": 1
                },
                "uStack0000000000000068": {
                    "file_attributes": 1,
                    "file_mode": 8,
                    "file_permissions": 13,
                    "file_size": 2,
                    "file_type": 1,
                    "permission_flags": 1,
                    "permission_value": 1,
                    "permissions_mask": 1,
                    "stack_variable1": 1
                },
                "uStack000000000000006c": {
                    "device_id": 1,
                    "file_blocks": 1,
                    "file_links": 3,
                    "file_mode": 1,
                    "file_owner": 2,
                    "file_size": 4,
                    "file_size1": 1,
                    "file_uid": 1,
                    "links_count": 1,
                    "num_blocks": 1,
                    "number1": 1,
                    "number_of_links": 2,
                    "owner_id": 2,
                    "stack_variable2": 1,
                    "subdirectory_count": 1,
                    "user_id": 5,
                    "var2": 1
                },
                "uVar4": {
                    "file_mode": 1,
                    "file_permission": 1,
                    "file_permissions": 4,
                    "file_type": 6,
                    "file_type_mod": 1
                },
                "unaff_R12": {
                    "archive_head": 1,
                    "corrupted_data": 1,
                    "error_code": 1,
                    "file_flags": 1,
                    "file_mode": 2,
                    "file_permission": 1,
                    "file_permission_flags": 1,
                    "file_size": 1,
                    "file_type": 5,
                    "flag1": 1,
                    "flags": 1,
                    "format_flag": 1,
                    "is_archive": 3,
                    "is_compressed": 1,
                    "is_option_set": 1,
                    "is_symbolic_link": 1,
                    "time": 1,
                    "time_data": 4,
                    "time_info": 1,
                    "u_var": 1
                },
                "unaff_R13": {
                    "allocated_memory": 4,
                    "buffer": 4,
                    "data_buffer": 1,
                    "error_message": 5,
                    "file_buffer": 1,
                    "file_content": 1,
                    "file_data": 4,
                    "heap_memory": 1,
                    "heap_ptr1": 1,
                    "malloc_pointer": 1,
                    "malloc_ptr": 2,
                    "memory": 1,
                    "memory_pointer": 1,
                    "temporary_memory": 1,
                    "time_data": 1,
                    "unaff_r13": 1
                },
                "unaff_R14D": {
                    "dup_file_descriptor": 1,
                    "dup_result": 2,
                    "duplicate_error_code": 1,
                    "duplicate_file_descriptor": 1,
                    "duplicated_file_descriptor": 1,
                    "fd": 3,
                    "file_descriptor": 20,
                    "unaff_r14_d": 1
                },
                "unaff_RBP": {
                    "file": 3,
                    "file_handle": 1,
                    "file_output": 1,
                    "file_pointer": 3,
                    "file_ptr": 2,
                    "output_file": 20
                },
                "unaff_RBX": {
                    "arguments": 1,
                    "error_message": 1,
                    "error_messages": 1,
                    "file_arguments": 1,
                    "file_content": 4,
                    "file_data": 3,
                    "file_info": 5,
                    "file_info_array": 1,
                    "file_information": 1,
                    "file_lines": 4,
                    "file_name_ptr": 1,
                    "file_path": 1,
                    "file_paths": 6
                },
                "xexit": {
                    "exit": 1
                }
            },
            "called": [
                "FUN_00102d2f",
                "FUN_00105bc0",
                "bfd_set_archive_head",
                "xexit",
                "free",
                "bfd_close",
                "FUN_00107c10",
                "dup"
            ],
            "calling": [
                "FUN_00102d2f"
            ],
            "code": "\nvoid format_and_print_file_info_00102d2f(void)\n\n{\n  byte error_message;\n  char result;\n  int copy_result;\n  char *time_error_message;\n  uint file_type;\n  char **file_paths;\n  FILE *output_file;\n  long file_type;\n  void *error_message;\n  int file_descriptor;\n  undefined file_type;\n  char is_executable;\n  char is_writable;\n  char is_readable;\n  char permission4;\n  char permission_char5;\n  char file_permission_char6;\n  char permission7;\n  char permission8;\n  char permission9;\n  undefined flag;\n  uint file_permissions;\n  uint user_id;\n  uint group_id;\n  undefined8 file_size;\n  \n  do {\n    error_message = print_error_and_xexit();\n    *(uint *)((long)file_paths + 0x44) = *(uint *)((long)file_paths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(file_type + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)file_paths + 0x49) = error_message | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  duplicate(file_descriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    copy_result = copy_and_print_error();\n    if (copy_result == 0) {\n      free(error_message);\n      free(output_file);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  print_error_and_xexit();\n  time_error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&error_message,time_error_message);\n  file_type = file_permissions & 0xf000;\n  if (file_type == 0x4000) {\n    file_type = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type = 0x73;\n  }\n  else {\n    file_type = 0x70;\n    if (file_type != 0x1000) {\n      file_type = 0x2d;\n    }\n  }\n  is_executable = (-((file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  is_writable = (-((file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  is_readable = (-((file_permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  permission4 = (-((file_permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  permission_char5 = (-((file_permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  file_permission_char6 = (-((file_permissions & 8) == 0) & 0xb5U) + 0x78;\n  permission7 = (-((file_permissions & 4) == 0) & 0xbbU) + 0x72;\n  permission8 = (-((file_permissions & 2) == 0) & 0xb6U) + 0x77;\n  permission9 = (-((file_permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_permissions & 0x800) != 0) {\n    if (is_readable == 'x') {\n      is_readable = 's';\n    }\n    else {\n      is_readable = 'S';\n    }\n  }\n  if ((file_permissions & 0x400) != 0) {\n    if (file_permission_char6 == 'x') {\n      file_permission_char6 = 's';\n    }\n    else {\n      file_permission_char6 = 'S';\n    }\n  }\n  if ((file_permissions & 0x200) != 0) {\n    if (permission9 == 'x') {\n      permission9 = 't';\n    }\n    else {\n      permission9 = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)user_id,\n          (ulong)group_id,file_size,&error_message,(ulong)file_permissions)\n  ;\n  fputs(*file_paths,output_file);\n  if ((char)file_type != '\\0') {\n    if ((*(byte *)((long)file_paths + 0x49) & 0x10) == 0) {\n      if (file_paths[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_paths[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "current_name": "format_and_print_file_info_00102d2f",
            "entrypoint": "0x00102d2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d2f": "format_and_print_file_info_00102d2f",
                "__format": "time_error_message",
                "bVar1": "error_message",
                "bfd_close": "close",
                "bfd_set_archive_head": "set_archive_head",
                "cStack0000000000000016": "is_executable",
                "cStack0000000000000017": "is_writable",
                "cStack0000000000000019": "permission4",
                "cStack000000000000001a": "permission_char5",
                "cStack000000000000001b": "file_permission_char6",
                "cStack000000000000001c": "permission7",
                "cStack000000000000001d": "permission8",
                "cStack000000000000001e": "permission9",
                "cVar2": "result",
                "copy_and_print_error_message_00105bc0": "copy_and_print_error",
                "dcgettext": "gettext",
                "dup": "duplicate",
                "iVar3": "copy_result",
                "in_stack_00000018": "is_readable",
                "in_stack_00000070": "group_id",
                "in_stack_00000080": "file_size",
                "print_error_message_and_exit_00107c10": "print_error_and_exit",
                "stack0x00000020": "error_message",
                "uStack0000000000000015": "file_type",
                "uStack000000000000001f": "flag",
                "uStack0000000000000068": "file_permissions",
                "uStack000000000000006c": "user_id",
                "uVar4": "file_type",
                "unaff_R12": "file_type",
                "unaff_R13": "error_message",
                "unaff_R14D": "file_descriptor",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_paths",
                "xexit": "exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102d8c": {
            "additional_data": {
                "FUN_00102d8c": {
                    "format_and_print": 2,
                    "format_and_print_data": 1,
                    "format_and_print_file_info": 7,
                    "format_and_print_time_data": 1,
                    "output_formatted_time_data": 1,
                    "print_file_details": 1,
                    "print_file_info": 16,
                    "print_file_information": 1
                },
                "__format": {
                    "corrupt_time_data_format": 1,
                    "corrupt_time_format": 2,
                    "corrupted_time_format": 1,
                    "error_format": 1,
                    "error_format_string": 1,
                    "error_message": 5,
                    "error_msg_format": 1,
                    "time_data_corrupt_message": 1,
                    "time_error_message": 4
                },
                "cStack0000000000000016": {
                    "c_read": 1,
                    "char1": 1,
                    "flag1": 2,
                    "flag_16": 1,
                    "has_user_read_permission": 1,
                    "is_readable": 2,
                    "permission_char1": 6,
                    "permission_char4": 1,
                    "permission_owner_read": 1,
                    "permission_r": 1,
                    "read_permission": 3,
                    "readable": 1,
                    "user_execute_flag": 1,
                    "user_read_permission": 1
                },
                "cStack0000000000000017": {
                    "c_write": 1,
                    "char2": 1,
                    "flag2": 2,
                    "flag_17": 1,
                    "has_user_write_permission": 1,
                    "is_writable": 2,
                    "permission_char2": 6,
                    "permission_char3": 1,
                    "permission_owner_write": 1,
                    "permission_w": 1,
                    "user_write_flag": 1,
                    "user_write_permission": 1,
                    "writable": 1,
                    "write_permission": 3
                },
                "cStack0000000000000019": {
                    "c_owner_read": 1,
                    "char4": 1,
                    "char_flag_b": 1,
                    "flag4": 2,
                    "flag_19": 1,
                    "group_read_permission": 1,
                    "has_group_read_permission": 1,
                    "is_setuid": 1,
                    "permission_char2": 1,
                    "permission_char3": 1,
                    "permission_char4": 5,
                    "permission_group_read": 1,
                    "permission_r_user": 1,
                    "read_permission2": 1,
                    "read_permission_group": 1,
                    "setuid": 1
                },
                "cStack000000000000001a": {
                    "c_owner_write": 1,
                    "char5": 1,
                    "flag5": 2,
                    "flag_1a": 1,
                    "group_write_permission": 1,
                    "has_group_write_permission": 1,
                    "is_setgid": 1,
                    "permission_char1": 1,
                    "permission_char4": 1,
                    "permission_char5": 5,
                    "permission_group_write": 1,
                    "permission_w_user": 1,
                    "setgid": 1,
                    "write_permission2": 1,
                    "write_permission_group": 1
                },
                "cStack000000000000001b": {
                    "c_owner_execute": 1,
                    "char6": 1,
                    "char_flag_c": 1,
                    "execute_permission2": 1,
                    "execute_permission_group": 1,
                    "flag6": 1,
                    "flag8": 1,
                    "flag_1b": 1,
                    "group_execute_flag": 1,
                    "group_execute_permission": 1,
                    "has_group_execute_permission": 1,
                    "is_setgid": 1,
                    "is_sticky": 1,
                    "permission_char5": 1,
                    "permission_char6": 6,
                    "permission_group_exec": 1,
                    "permission_x_user": 1,
                    "setuid_permission": 1,
                    "sticky": 1
                },
                "cStack000000000000001c": {
                    "c_group_read": 1,
                    "char7": 1,
                    "char_flag_d": 1,
                    "flag16": 1,
                    "flag7": 1,
                    "flag_1c": 1,
                    "has_other_read_permission": 1,
                    "is_owner_read": 1,
                    "other_read_permission": 1,
                    "owner_read": 1,
                    "permission_char5": 1,
                    "permission_char6": 1,
                    "permission_char7": 5,
                    "permission_other_read": 1,
                    "permission_r_group": 1,
                    "read_permission3": 1,
                    "read_permission_other": 1
                },
                "cStack000000000000001d": {
                    "c_group_write": 1,
                    "char8": 1,
                    "char_flag_e": 1,
                    "flag32": 1,
                    "flag8": 1,
                    "flag_1d": 1,
                    "has_other_write_permission": 1,
                    "is_owner_write": 1,
                    "other_write_permission": 1,
                    "owner_write": 1,
                    "permission_char7": 1,
                    "permission_char8": 6,
                    "permission_other_write": 1,
                    "permission_w_group": 1,
                    "write_permission3": 1,
                    "write_permission_other": 1
                },
                "cStack000000000000001e": {
                    "c_group_execute": 1,
                    "char9": 1,
                    "char_flag_f": 1,
                    "execute_permission3": 1,
                    "execute_permission_other": 1,
                    "flag64": 1,
                    "flag9": 1,
                    "flag_1e": 1,
                    "has_other_execute_permission": 1,
                    "is_owner_execute": 1,
                    "is_sticky": 1,
                    "other_execute_flag": 1,
                    "other_execute_permission": 1,
                    "owner_exec": 1,
                    "permission_char7": 1,
                    "permission_char8": 1,
                    "permission_char9": 5,
                    "permission_other_exec": 1,
                    "permission_x_group": 1,
                    "sticky_permission": 1
                },
                "cStack000000000000001f": {
                    "extra_flag": 1,
                    "flag_1f": 1,
                    "is_null": 1,
                    "should_print_hex": 1
                },
                "fprintf": {
                    "print_formatted_output": 1,
                    "print_to_file": 1,
                    "print_to_output_file": 1
                },
                "fputc": {
                    "write_char_to_file": 2,
                    "write_character": 1
                },
                "fputs": {
                    "write_string_to_file": 1,
                    "write_to_file": 2
                },
                "param_19": {
                    "file_attributes": 2,
                    "file_mode": 9,
                    "file_permission": 1,
                    "file_permission_bits": 1,
                    "file_permissions": 16,
                    "permission": 1,
                    "permissions": 1
                },
                "param_20": {
                    "create_time": 1,
                    "file_permissions": 1,
                    "file_size": 24,
                    "file_size2": 1,
                    "filesize": 1,
                    "param_20": 3
                },
                "param_22": {
                    "address_of_pointer": 1,
                    "file_address": 1,
                    "file_modified_date": 1,
                    "file_modified_time": 2,
                    "file_pointer": 1,
                    "file_size": 2,
                    "file_size3": 1,
                    "file_timestamp": 2,
                    "last_modified": 1,
                    "param_22": 1,
                    "time_stamp": 1,
                    "time_value": 1,
                    "timestamp": 16
                },
                "param_9": {
                    "c_execute": 1,
                    "char3": 1,
                    "char_flag_a": 1,
                    "character9": 1,
                    "executable": 1,
                    "execute_permission": 3,
                    "file_type": 1,
                    "flag3": 1,
                    "flag_9": 1,
                    "has_user_execute_permission": 1,
                    "is_executable": 2,
                    "is_set_x": 1,
                    "permission_char": 1,
                    "permission_char3": 5,
                    "permission_owner_exec": 1,
                    "permission_symbol": 1,
                    "permission_x": 1,
                    "permissions_char": 1,
                    "user_execute_permission": 1,
                    "user_read_flag": 1
                },
                "stack0x00000016": {
                    "buffer1": 1,
                    "file_permissions": 1,
                    "time_format": 1,
                    "time_string": 1
                },
                "stack0x00000020": {
                    "buffer2": 1,
                    "error_message": 2,
                    "formatted_time_data": 1,
                    "time_data": 1,
                    "time_error_message": 1
                },
                "uStack0000000000000015": {
                    "file_indicator": 1,
                    "file_marker": 1,
                    "file_type": 4,
                    "file_type_char": 5,
                    "file_type_character": 2,
                    "file_type_code": 1,
                    "flag_value": 1,
                    "special_permission": 1,
                    "type_char": 1,
                    "type_code": 1
                },
                "uStack000000000000001f": {
                    "flag": 1,
                    "flag10": 1,
                    "format_specifier": 1,
                    "is_created_with_text_editor": 1,
                    "is_executable": 1,
                    "is_null": 1,
                    "is_param800_enabled": 1,
                    "is_set": 1,
                    "is_setuid": 1,
                    "is_symbolic_link": 1,
                    "is_uppercase": 1,
                    "padding": 1,
                    "unused": 1,
                    "unused_flag": 2,
                    "use_alt_output_format": 1,
                    "zero": 1
                },
                "uStack000000000000006c": {
                    "current_time": 1,
                    "data1": 1,
                    "file_id": 1,
                    "file_size": 2,
                    "file_size1": 1,
                    "file_size_in_blocks": 1,
                    "inode_number": 1,
                    "pid": 2,
                    "uid": 2,
                    "unknown_value": 1,
                    "user_id": 3
                },
                "uVar1": {
                    "attribute_flag": 1,
                    "file_type": 7,
                    "file_type_mask": 1,
                    "permission_category": 1,
                    "permission_code": 2,
                    "permission_flag": 1,
                    "upper_byte": 1,
                    "upper_nibble": 1
                },
                "unaff_R12B": {
                    "base_char": 1,
                    "check_flag": 1,
                    "flag": 2,
                    "has_address": 1,
                    "has_prefix": 1,
                    "is_executable": 7,
                    "is_extra_info_enabled": 1,
                    "is_file_binary": 1,
                    "is_hex": 4,
                    "is_hexadecimal": 4,
                    "print_hex_address": 1,
                    "print_hex_flag": 1,
                    "should_print_address": 2,
                    "should_print_hex": 1,
                    "use_hexadecimal": 1
                },
                "unaff_RBP": {
                    "file": 1,
                    "file_handle": 2,
                    "file_output": 1,
                    "file_pointer": 4,
                    "file_ptr": 1,
                    "output_file": 20,
                    "output_file_pointer": 1
                },
                "unaff_RBX": {
                    "error_msg": 1,
                    "file_content": 9,
                    "file_contents": 4,
                    "file_data": 7,
                    "file_info": 4,
                    "file_info_pointer": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "file_paths": 1,
                    "strings": 1
                }
            },
            "called": [
                "sprintf",
                "fputc",
                "fprintf",
                "dcgettext",
                "fputs"
            ],
            "calling": [
                "FUN_001079c0"
            ],
            "code": "\nvoid format_and_print_file_info_00102d8c(void)\n\n{\n  char *error_message;\n  uint file_type;\n  char **file_content;\n  FILE *output_file;\n  char is_executable;\n  undefined file_type_char;\n  char permission_char1;\n  char permission_char2;\n  char permission_char3;\n  char permission_char4;\n  char permission_char5;\n  char permission_char6;\n  char permission_char7;\n  char permission_char8;\n  char permission_char9;\n  undefined unused_flag;\n  uint file_permissions;\n  uint user_id;\n  uint file_size;\n  undefined8 timestamp;\n  \n  error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&error_message,error_message);\n  file_type = file_permissions & 0xf000;\n  if (file_type == 0x4000) {\n    file_type_char = 100;\n  }\n  else if (file_type == 0xa000) {\n    file_type_char = 0x6c;\n  }\n  else if (file_type == 0x6000) {\n    file_type_char = 0x62;\n  }\n  else if (file_type == 0x2000) {\n    file_type_char = 99;\n  }\n  else if (file_type == 0xc000) {\n    file_type_char = 0x73;\n  }\n  else {\n    file_type_char = 0x70;\n    if (file_type != 0x1000) {\n      file_type_char = 0x2d;\n    }\n  }\n  permission_char1 = (-((file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  permission_char2 = (-((file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  permission_char3 = (-((file_permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  permission_char4 = (-((file_permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  permission_char5 = (-((file_permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  permission_char6 = (-((file_permissions & 8) == 0) & 0xb5U) + 0x78;\n  permission_char7 = (-((file_permissions & 4) == 0) & 0xbbU) + 0x72;\n  permission_char8 = (-((file_permissions & 2) == 0) & 0xb6U) + 0x77;\n  permission_char9 = (-((file_permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((file_permissions & 0x800) != 0) {\n    if (permission_char3 == 'x') {\n      permission_char3 = 's';\n    }\n    else {\n      permission_char3 = 'S';\n    }\n  }\n  if ((file_permissions & 0x400) != 0) {\n    if (permission_char6 == 'x') {\n      permission_char6 = 's';\n    }\n    else {\n      permission_char6 = 'S';\n    }\n  }\n  if ((file_permissions & 0x200) != 0) {\n    if (permission_char9 == 'x') {\n      permission_char9 = 't';\n    }\n    else {\n      permission_char9 = 'T';\n    }\n  }\n  unused_flag = 0;\n  fprintf(output_file,\"%s %ld/%ld %6lu %s \",&time_format,(ulong)user_id,\n          (ulong)file_size,timestamp,&error_message,(ulong)file_permissions);\n  fputs(*file_content,output_file);\n  if (is_executable != '\\0') {\n    if ((*(byte *)((long)file_content + 0x49) & 0x10) == 0) {\n      if (file_content[0xb] != (char *)0x0) {\n        fprintf(output_file,\" 0x%lx\");\n      }\n    }\n    else if (file_content[0xc] != (char *)0x0) {\n      fprintf(output_file,\" 0x%lx\");\n    }\n  }\n  fputc(10,output_file);\n  return;\n}\n\n",
            "current_name": "format_and_print_file_info_00102d8c",
            "entrypoint": "0x00102d8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102d8c": "format_and_print_file_info_00102d8c",
                "__format": "error_message",
                "cStack0000000000000016": "permission_char1",
                "cStack0000000000000017": "permission_char2",
                "cStack0000000000000019": "permission_char4",
                "cStack000000000000001a": "permission_char5",
                "cStack000000000000001b": "permission_char6",
                "cStack000000000000001c": "permission_char7",
                "cStack000000000000001d": "permission_char8",
                "cStack000000000000001e": "permission_char9",
                "fprintf": "print_to_file",
                "fputc": "write_char_to_file",
                "fputs": "write_to_file",
                "param_19": "file_permissions",
                "param_20": "file_size",
                "param_22": "timestamp",
                "param_9": "permission_char3",
                "stack0x00000016": "time_format",
                "stack0x00000020": "error_message",
                "uStack0000000000000015": "file_type_char",
                "uStack000000000000001f": "unused_flag",
                "uStack000000000000006c": "user_id",
                "uVar1": "file_type",
                "unaff_R12B": "is_executable",
                "unaff_RBP": "output_file",
                "unaff_RBX": "file_content"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e57": {
            "additional_data": {
                "DAT_0010d618": {
                    "file_name": 2,
                    "filename": 3
                },
                "FUN_00102e57": {
                    "create_file": 1,
                    "create_output_file": 2,
                    "save_to_file": 4,
                    "write_data_to_file": 2,
                    "write_to_file": 22
                },
                "concat": {
                    "concatenate": 1,
                    "concatenate_strings": 5,
                    "generate_file_path": 2,
                    "generate_filename": 1,
                    "get_concatenated_string": 9,
                    "get_file_content": 2,
                    "get_file_name": 1,
                    "get_filename": 1
                },
                "fopen": {
                    "open_file": 5
                },
                "pFVar1": {
                    "file": 7,
                    "file_pointer": 17,
                    "file_ptr": 6,
                    "output_file": 1
                },
                "perror": {
                    "print_error": 4,
                    "print_error_message": 1
                },
                "printf": {
                    "print_filename": 1,
                    "print_message": 3,
                    "print_output": 1
                },
                "xexit": {
                    "exit_program": 6,
                    "exit_with_error": 2
                }
            },
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00105a68"
            ],
            "code": "\nvoid write_data_to_file_00102e57(void)\n\n{\n  FILE *file_pointer;\n  \n  DAT_0010d618 = (char *)get_concatenated_string();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "write_data_to_file_00102e57",
            "entrypoint": "0x00102e57",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e57": "write_data_to_file_00102e57",
                "concat": "get_concatenated_string",
                "fopen": "open_file",
                "pFVar1": "file_pointer",
                "perror": "print_error",
                "printf": "print_message",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102e6f": {
            "additional_data": {
                "DAT_00108260": {
                    "default_path": 1
                },
                "DAT_0010d5e8": {
                    "base_directory": 1,
                    "base_path": 1,
                    "current_path": 1,
                    "parent_directory": 1
                },
                "DAT_0010d60c": {
                    "check_flag": 1,
                    "enable_printing": 1,
                    "flag": 2
                },
                "DAT_0010d618": {
                    "output_path": 3,
                    "output_path_name": 1
                },
                "FUN_00102e6f": {
                    "create_output_file": 2,
                    "extract_and_write_file": 2,
                    "extract_and_write_to_file": 1,
                    "extract_archive_member": 2,
                    "extract_file_from_binary": 1,
                    "extract_file_from_path": 1,
                    "extract_file_path": 4,
                    "find_output_file": 1,
                    "initialize_file_operation": 1,
                    "parse_filepath_and_update_state": 1,
                    "process_archive": 1,
                    "process_archive_member": 1,
                    "process_file_path": 9,
                    "process_output_directory": 1,
                    "process_output_path": 1,
                    "process_output_pathname": 1
                },
                "concat": {
                    "concat_strings": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "in_RAX": {
                    "current_char": 1,
                    "current_char_pointer": 1,
                    "current_path": 3,
                    "file_path": 15,
                    "filepath": 1,
                    "input_path": 4,
                    "path": 6
                },
                "lbasename": {
                    "get_base_name": 1
                },
                "pFVar4": {
                    "file": 6,
                    "file_handle": 2,
                    "file_pointer": 10,
                    "file_ptr": 6,
                    "output_file": 7
                },
                "pcVar1": {
                    "base_dir": 3,
                    "base_directory": 1,
                    "base_path": 11,
                    "current_dir": 2,
                    "current_directory": 3,
                    "current_path": 3,
                    "original_path": 1,
                    "parent_directory": 1,
                    "path": 1,
                    "prefix": 1,
                    "previous_path": 2
                },
                "pcVar6": {
                    "char_ptr": 1,
                    "curr_char": 1,
                    "curr_path": 1,
                    "current_char": 8,
                    "current_dir": 2,
                    "current_filename": 1,
                    "current_path": 5,
                    "current_path_component": 1,
                    "current_segment": 1,
                    "current_token": 1,
                    "file_name": 2,
                    "filename": 2,
                    "next_dir": 1,
                    "pathname": 1,
                    "slash_index": 1,
                    "sub_path": 1,
                    "temp_path": 1
                },
                "pcVar7": {
                    "error_message_format": 1
                },
                "print_error_with_formatted_message_00107920": {
                    "print_error": 1,
                    "print_error_message": 1
                },
                "sVar5": {
                    "base_dir_length": 2,
                    "base_length": 2,
                    "base_path_len": 1,
                    "base_path_length": 4,
                    "current_directory_length": 1,
                    "directory_length": 1,
                    "file_path_length": 1,
                    "length": 8,
                    "parent_directory_length": 1,
                    "path_length": 9,
                    "prefix_len": 1
                },
                "uVar2": {
                    "alternate_path": 1,
                    "alternative_path": 1,
                    "base_filename": 1,
                    "base_name": 12,
                    "basename": 4,
                    "basename_result": 1,
                    "canonical_path": 1,
                    "file_name": 1,
                    "new_path": 1,
                    "normalized_path": 1
                },
                "uVar3": {
                    "error_message": 23,
                    "error_string": 1
                },
                "write_data_to_file_00105a68": {
                    "write_data_to_file": 2
                }
            },
            "called": [
                "FUN_00102e6f",
                "FUN_00107920",
                "lbasename",
                "dcgettext",
                "FUN_00105a68"
            ],
            "calling": [
                "FUN_00102e6f"
            ],
            "code": "\nvoid process_file_path_00102e6f(void)\n\n{\n  char *base_path;\n  char *file_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t path_length;\n  char *current_char;\n  \n  base_path = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (path_length = strlen(DAT_0010d5e8), path_length != 0)) {\n          if (base_path[path_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat_strings(base_path,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat_strings(base_path,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file_pointer = fopen(DAT_0010d618,\"w\");\n        if (file_pointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_char = file_path;\n      if ((*file_path == '.') && (current_char = file_path + 1, file_path[1] == '.')) {\n        current_char = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          base_name = lbasename();\n          base_path = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_message(error_message,base_path,base_name);\n          DAT_0010d618 = (char *)base_name;\n          write_data_to_file();\n          return;\n        }\n      }\n      for (; (file_path = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "process_file_path_00102e6f",
            "entrypoint": "0x00102e6f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102e6f": "process_file_path_00102e6f",
                "concat": "concat_strings",
                "dcgettext": "get_error_message",
                "in_RAX": "file_path",
                "lbasename": "get_base_name",
                "pFVar4": "file_pointer",
                "pcVar1": "base_path",
                "pcVar6": "current_char",
                "print_error_with_formatted_message_00107920": "print_error_message",
                "sVar5": "path_length",
                "uVar2": "base_name",
                "uVar3": "error_message",
                "write_data_to_file_00105a68": "write_data_to_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f08": {
            "additional_data": {
                "FUN_00102f08": {
                    "print_and_assign": 3,
                    "print_and_assign_value": 2,
                    "print_and_assign_values": 3,
                    "print_and_exchange_arrays": 1,
                    "print_and_set_variable": 1,
                    "print_and_store": 1,
                    "print_and_swap": 5,
                    "print_and_swap_data": 1,
                    "print_and_swap_strings": 1,
                    "print_and_swap_values": 1,
                    "print_and_swap_variables": 1,
                    "print_and_transfer_data": 1,
                    "print_and_update_data": 4,
                    "print_and_update_value": 2,
                    "print_and_update_values": 3,
                    "print_and_update_variable": 1
                },
                "unaff_R12": {
                    "address": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "dest_pointer": 1,
                    "dest_ptr": 1,
                    "destination_ptr": 1,
                    "destination_string_ptr": 1,
                    "new_data_ptr": 1,
                    "new_value_ptr": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "pointer_to_value": 1,
                    "ptr_data": 1,
                    "ptr_pointer": 1,
                    "string_ptr2": 1,
                    "swap_pointer": 1,
                    "temp_ptr": 3,
                    "value_pointer": 4,
                    "value_ptr": 4,
                    "variable_ptr": 1
                },
                "unaff_RBX": {
                    "array_pointer": 4,
                    "array_ptr": 3,
                    "data_ptr": 3,
                    "input_string": 1,
                    "input_string_ptr": 1,
                    "message": 2,
                    "message_ptr": 4,
                    "ptr_message": 1,
                    "source_string": 1,
                    "source_string_ptr": 1,
                    "str_pointer": 1,
                    "str_ptr": 1,
                    "string_pointer": 3,
                    "string_ptr": 5
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00105af0"
            ],
            "code": "\nundefined8 print_and_set_variable_00102f08(void)\n\n{\n  undefined8 *string_ptr;\n  undefined8 *value_ptr;\n  \n  printf(\"a - %s\\n\",*string_ptr);\n  string_ptr[0x1e] = *value_ptr;\n  *value_ptr = string_ptr;\n  return 1;\n}\n\n",
            "current_name": "print_and_set_variable_00102f08",
            "entrypoint": "0x00102f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f08": "print_and_set_variable_00102f08",
                "unaff_R12": "value_ptr",
                "unaff_RBX": "string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f1e": {
            "additional_data": {
                "FUN_00102f1e": {
                    "copy_and_delete_file": 1,
                    "copy_and_print_error": 2,
                    "copy_and_print_error_message": 1,
                    "copy_and_remove_file": 2,
                    "copy_and_unlink_file": 4,
                    "copy_file": 3,
                    "copy_file_and_handle_error": 1,
                    "copy_file_and_print_error": 11,
                    "copy_file_and_unlink": 1,
                    "copy_file_with_error_handling": 2,
                    "print_and_delete_file": 1,
                    "print_error_and_unlink_file": 1
                },
                "auVar3": {
                    "result": 1,
                    "return_tuple": 1,
                    "return_value": 7
                },
                "piVar1": {
                    "err_num_ptr": 1,
                    "errno_address": 1,
                    "errno_location": 3,
                    "errno_location_pointer": 1,
                    "errno_pointer": 4,
                    "errno_ptr": 2,
                    "error_code": 1,
                    "error_code_ptr": 1,
                    "error_location": 5,
                    "error_number_ptr": 1,
                    "error_pointer": 1
                },
                "uVar2": {
                    "err_message": 1,
                    "err_msg_id": 1,
                    "error_message": 14,
                    "error_string": 1,
                    "gettext_result": 1,
                    "message": 1
                },
                "unaff_R12": {
                    "file_name": 3,
                    "file_path": 24,
                    "filename": 2,
                    "source_file_path": 1
                },
                "unaff_RBP": {
                    "buffer_size": 1,
                    "error_code": 3,
                    "file_length": 1,
                    "file_permissions": 1,
                    "file_size": 22,
                    "return_rbp": 1,
                    "return_value": 1
                },
                "unaff_retaddr": {
                    "return_address": 24
                }
            },
            "called": [
                "FUN_00107920",
                "strerror",
                "unlink",
                "__errno_location",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105bc0"
            ],
            "code": "\nundefined  [16] copy_file_and_print_error_00102f1e(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_with_formatted_message_00107920(error_message);\n  unlink(file_path);\n  return_value._0_8_ = file_size & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "current_name": "copy_file_and_print_error_00102f1e",
            "entrypoint": "0x00102f1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f1e": "copy_file_and_print_error_00102f1e",
                "auVar3": "return_value",
                "piVar1": "error_location",
                "uVar2": "error_message",
                "unaff_R12": "file_path",
                "unaff_RBP": "file_size",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f55": {
            "additional_data": {
                "FUN_00102f55": {
                    "close_and_return_error": 2,
                    "close_and_return_error_code": 1,
                    "close_and_set_errno": 3,
                    "close_and_set_error": 4,
                    "close_file": 2,
                    "close_file_and_return_error": 4,
                    "close_file_and_set_errno": 5,
                    "close_file_and_set_error": 5,
                    "close_file_and_set_error_code": 2,
                    "close_file_and_set_last_error": 1,
                    "close_file_handle": 1,
                    "close_file_with_error_handling": 1
                },
                "iVar1": {
                    "errno_value": 2,
                    "error_code": 1,
                    "original_errno": 1,
                    "original_error": 1,
                    "previous_errno": 1,
                    "previous_error": 2,
                    "previous_error_code": 1,
                    "saved_error_code": 1
                },
                "piVar2": {
                    "errno_location": 1,
                    "errno_pointer": 3,
                    "errno_ptr": 2,
                    "error_code_pointer": 1,
                    "error_location_ptr": 1,
                    "error_pointer": 4,
                    "error_var": 1
                },
                "unaff_R12D": {
                    "fd": 2,
                    "file_descriptor": 27,
                    "file_handle": 1,
                    "socket_descriptor": 1
                }
            },
            "called": [
                "close",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\nundefined8 close_file_and_set_error_code_00102f55(void)\n\n{\n  int previous_error;\n  int *error_pointer;\n  int file_descriptor;\n  \n  error_pointer = __errno_location();\n  previous_error = *error_pointer;\n  close(file_descriptor);\n  *error_pointer = previous_error;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_and_set_error_code_00102f55",
            "entrypoint": "0x00102f55",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f55": "close_file_and_set_error_code_00102f55",
                "iVar1": "previous_error",
                "piVar2": "error_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102f96": {
            "additional_data": {
                "FUN_00102f96": {
                    "print_error": 8,
                    "print_error_details": 1,
                    "print_error_info": 2,
                    "print_error_information": 1,
                    "print_error_message": 19
                },
                "uVar1": {
                    "error_message": 20,
                    "error_string": 3,
                    "error_text": 1,
                    "localized_error_message": 1
                },
                "unaff_RBX": {
                    "error_code": 16,
                    "error_flag": 10,
                    "error_status": 1,
                    "error_type": 1,
                    "flag": 1,
                    "has_error": 1,
                    "status": 1
                },
                "unaff_retaddr": {
                    "error_addr": 1,
                    "return_address": 30
                }
            },
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107c20"
            ],
            "code": "\n\n\nvoid print_error_message_00102f96(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_00102f96",
            "entrypoint": "0x00102f96",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00102fd7": {
            "additional_data": {
                "FUN_00102fd7": {
                    "print_error_and_exit": 1,
                    "print_error_and_set_time": 2,
                    "print_error_cannot_set_time": 14,
                    "print_error_if_time_set_fails": 1,
                    "print_error_if_time_setting_fails": 1,
                    "print_error_when_setting_time": 2,
                    "print_error_with_formatted_message": 1,
                    "print_error_with_set_time": 1,
                    "print_error_with_time": 2,
                    "print_error_with_time_failure": 1,
                    "print_error_with_time_setting": 2,
                    "print_time_error": 1,
                    "print_time_error_message": 1,
                    "print_time_setting_error": 1
                },
                "__errno_location": {
                    "get_errno_ptr": 1,
                    "get_error_number": 1
                },
                "dcgettext": {
                    "get_formatted_error_message": 1,
                    "get_formatted_message": 2
                },
                "piVar1": {
                    "errno": 1,
                    "errno_location": 2,
                    "errno_location_ptr": 5,
                    "errno_ptr": 10,
                    "error_location": 5,
                    "error_location_pointer": 1,
                    "error_location_ptr": 2,
                    "error_number": 1,
                    "error_pointer": 1,
                    "error_ptr": 1
                },
                "print_error_with_formatted_message_00107920": {
                    "print_error_with_message": 1
                },
                "strerror": {
                    "get_error_message": 1,
                    "get_error_string": 2
                },
                "uVar2": {
                    "error_formatted_message": 1,
                    "error_message": 25,
                    "error_msg": 1,
                    "formatted_error_message": 1,
                    "formatted_message": 2,
                    "formatted_message_ptr": 1
                }
            },
            "called": [
                "FUN_00107920",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107c80"
            ],
            "code": "\nvoid print_error_cannot_set_time_00102fd7(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_with_message(error_message);\n  return;\n}\n\n",
            "current_name": "print_error_cannot_set_time_00102fd7",
            "entrypoint": "0x00102fd7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00102fd7": "print_error_cannot_set_time_00102fd7",
                "__errno_location": "get_errno_ptr",
                "dcgettext": "get_formatted_message",
                "piVar1": "errno_ptr",
                "print_error_with_formatted_message_00107920": "print_error_with_message",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010300e": {
            "additional_data": {
                "DAT_0010a240": {
                    "lookup_table7": 1
                },
                "DAT_0010a440": {
                    "lookup_table4": 1
                },
                "DAT_0010a640": {
                    "lookup_table3": 1
                },
                "DAT_0010a7c0": {
                    "lookup_table6": 1
                },
                "DAT_0010a800": {
                    "lookup_table5": 1
                },
                "DAT_0010a980": {
                    "lookup_table2": 1
                },
                "DAT_0010ab00": {
                    "lookup_table1": 1
                },
                "DAT_0010d5b0": {
                    "end_pointer": 1
                },
                "DAT_0010d5b8": {
                    "final_array_pointer": 1
                },
                "DAT_0010d5c0": {
                    "final_index": 1
                },
                "DAT_0010d5c8": {
                    "input_array": 1
                },
                "DAT_0010d5d0": {
                    "initial_variable": 1,
                    "input_size": 1
                },
                "FUN_0010300e": {
                    "decode": 1,
                    "find_and_update_value": 1,
                    "find_descriptive_data": 1,
                    "find_match": 1,
                    "find_matched_index": 1,
                    "find_matching": 1,
                    "find_matching_index": 2,
                    "find_matching_indexes": 1,
                    "find_matching_indices": 1,
                    "find_matching_pattern": 1,
                    "find_matching_sequence": 2,
                    "find_matching_value": 4,
                    "find_matching_value_indices": 1,
                    "find_matching_values": 2,
                    "find_target_bytes": 1,
                    "identify_pattern": 1,
                    "reverse_and_store": 1,
                    "reverse_and_store_data": 2,
                    "reverse_and_update_data": 1
                },
                "bVar1": {
                    "found": 1,
                    "found_flag": 1,
                    "found_match": 10,
                    "found_matching_value": 1,
                    "found_target": 1,
                    "found_variable": 1,
                    "has_match": 6,
                    "has_matching_sequence": 1,
                    "has_matching_value": 1,
                    "is_match_found": 4,
                    "is_matched": 1,
                    "is_true": 1,
                    "matching_found": 1,
                    "pattern_found": 1
                },
                "bVar4": {
                    "adjusted_value": 1,
                    "byte_flag": 1,
                    "byte_multiplier": 1,
                    "calculated_value": 2,
                    "check_value": 1,
                    "computed_byte": 1,
                    "index_modifier": 1,
                    "key": 1,
                    "lookup_index": 1,
                    "lookup_result": 4,
                    "lookup_value": 3,
                    "mapping_value": 2,
                    "matching_index": 1,
                    "offset": 4,
                    "offset_value": 1,
                    "pattern_value": 1,
                    "sequence_byte": 1,
                    "sequence_len": 1,
                    "translation": 1,
                    "updated_byte_value": 1,
                    "value_to_check": 1
                },
                "iVar2": {
                    "counter": 1,
                    "current_index": 24,
                    "current_pattern": 1,
                    "current_value": 2,
                    "index": 2,
                    "next_variable": 1
                },
                "in_R10D": {
                    "current_variable": 1,
                    "first_matched_pattern": 1,
                    "found_index": 3,
                    "input_int": 1,
                    "match_index": 2,
                    "matched_index": 3,
                    "matching_counter": 1,
                    "matching_index": 12,
                    "matching_sequence_index": 1,
                    "matching_value": 2,
                    "matching_value_index": 1,
                    "pattern_index": 1,
                    "target_index": 1,
                    "updated_index": 1
                },
                "in_R9": {
                    "current_byte_pointer": 1,
                    "first_matched_byte": 1,
                    "found_array_pointer": 1,
                    "found_byte": 2,
                    "input_byte_pointer": 1,
                    "match_pointer": 1,
                    "match_ptr": 1,
                    "matched_byte": 1,
                    "matched_byte_ptr": 2,
                    "matching_byte": 8,
                    "matching_byte_pointer": 5,
                    "matching_data": 1,
                    "matching_pointer": 1,
                    "matching_sequence_ptr": 1,
                    "matching_value_pointer": 1,
                    "pattern_location": 1,
                    "target_byte": 1,
                    "updated_byte_pointer": 1
                },
                "lVar3": {
                    "calculate_offset": 1,
                    "calculated_index": 10,
                    "calculation_result": 1,
                    "computed_index": 3,
                    "new_index": 3,
                    "new_pattern_index": 1,
                    "next_index": 4,
                    "offset": 2,
                    "result": 1,
                    "sequence_offset": 1,
                    "updated_index": 3,
                    "updated_index_calculated": 1
                },
                "pbVar5": {
                    "array_pointer": 1,
                    "byte_array_ptr": 1,
                    "byte_pointer": 7,
                    "current_byte": 17,
                    "current_byte_ptr": 1,
                    "current_pointer": 2,
                    "pattern_pointer": 1,
                    "sequence_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid find_matching_value_indices_0010300e(void)\n\n{\n  bool found_match;\n  int current_index;\n  long calculated_index;\n  byte lookup_result;\n  byte *current_byte;\n  byte *matching_byte;\n  int matching_index;\n  \n  found_match = false;\n  current_index = DAT_0010d5d0;\n  for (current_byte = DAT_0010d5c8; current_byte < DAT_0010d5b0; current_byte = current_byte + 1) {\n    lookup_result = 1;\n    if (*current_byte != 0) {\n      lookup_result = (&DAT_0010ab00)[*current_byte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)current_index * 2) != 0) {\n      found_match = true;\n      matching_byte = current_byte;\n      matching_index = current_index;\n    }\n    while( true ) {\n      calculated_index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)current_index * 2) + (uint)lookup_result);\n      if (*(short *)(&DAT_0010a440 + calculated_index * 2) == current_index) break;\n      current_index = (int)*(short *)(&DAT_0010a800 + (long)current_index * 2);\n      if (0xb0 < current_index) {\n        lookup_result = (&DAT_0010a7c0)[(int)(uint)lookup_result];\n      }\n    }\n    current_index = (int)*(short *)(&DAT_0010a240 + calculated_index * 2);\n  }\n  if (found_match) {\n    DAT_0010d5b8 = matching_byte;\n    DAT_0010d5c0 = matching_index;\n  }\n  return;\n}\n\n",
            "current_name": "find_matching_value_indices_0010300e",
            "entrypoint": "0x0010300e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010300e": "find_matching_value_indices_0010300e",
                "bVar1": "found_match",
                "bVar4": "lookup_result",
                "iVar2": "current_index",
                "in_R10D": "matching_index",
                "in_R9": "matching_byte",
                "lVar3": "calculated_index",
                "pbVar5": "current_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001030ed": {
            "additional_data": {
                "DAT_0010d588": {
                    "data_value2": 1,
                    "data_value4": 1,
                    "data_value5": 1,
                    "element_value": 1,
                    "extracted_data4": 1,
                    "extracted_value5": 1,
                    "extracted_value_after_deref": 1,
                    "first_byte_value": 1,
                    "first_char": 1,
                    "first_character": 1,
                    "first_data": 1,
                    "first_data_value": 4,
                    "first_element": 1,
                    "first_element_value": 1,
                    "first_value": 1,
                    "info_value": 1,
                    "initial_value": 1,
                    "second_value": 2,
                    "value": 1,
                    "value2": 1,
                    "variable5": 1
                },
                "DAT_0010d590": {
                    "data_pointer": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "data_value3": 1,
                    "data_value4": 1,
                    "extracted_data": 1,
                    "extracted_data3": 1,
                    "extracted_value4": 1,
                    "first_data": 1,
                    "first_element": 1,
                    "first_value": 10,
                    "pointer_to_value": 1,
                    "pointer_value": 1,
                    "value": 1,
                    "value1": 1,
                    "variable4": 1
                },
                "DAT_0010d598": {
                    "data_field1": 1,
                    "data_value": 3,
                    "data_value1": 2,
                    "extracted_data1": 1,
                    "extracted_value": 13,
                    "extracted_value1": 1,
                    "info_value": 1,
                    "result": 2,
                    "variable1": 1
                },
                "DAT_0010d5a0": {
                    "data_index": 2,
                    "data_offset": 1,
                    "data_offset_multiplier": 1,
                    "index": 14,
                    "offset": 7
                },
                "DAT_0010d5a8": {
                    "address": 1,
                    "base_address": 7,
                    "base_data_address": 1,
                    "data_address": 1,
                    "data_array": 2,
                    "data_array_address": 1,
                    "data_base_address": 2,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "data_start": 1,
                    "global_data_pointer": 1,
                    "pointer": 1,
                    "pointer_array": 1,
                    "ptr_a": 1,
                    "ptr_array": 1
                },
                "DAT_0010d5b0": {
                    "data": 4,
                    "data_array": 1,
                    "data_field2": 1,
                    "data_pointer": 2,
                    "data_pointer_element": 1,
                    "data_value2": 2,
                    "extracted_data2": 1,
                    "extracted_pointer": 2,
                    "extracted_ptr": 1,
                    "extracted_value2": 1,
                    "info_pointer": 1,
                    "pointer": 1,
                    "pointer_to_data": 1,
                    "pointer_to_value": 1,
                    "pointer_value": 1,
                    "string_pointer": 2,
                    "string_ptr": 1,
                    "variable2": 1
                },
                "DAT_0010d5c8": {
                    "copied_data": 1,
                    "copied_data_pointer": 1,
                    "copied_string": 1,
                    "copy_of_pointer_to_data": 1,
                    "current_data": 2,
                    "current_data_pointer": 1,
                    "current_pointer": 1,
                    "data_field3": 1,
                    "data_value3": 1,
                    "extracted_value3": 1,
                    "new_string_pointer": 1,
                    "processed_data": 2,
                    "result_ptr": 1,
                    "saved_pointer": 1,
                    "updated_data": 1,
                    "updated_data_value2": 1,
                    "updated_info_pointer": 1,
                    "updated_pointer": 1,
                    "value": 1,
                    "variable3": 1
                },
                "FUN_001030ed": {
                    "extract_and_initialize_data": 1,
                    "extract_data": 14,
                    "extract_data_from_binary": 8,
                    "extract_function_data": 3,
                    "extract_information": 2,
                    "initialize_data": 3
                },
                "puVar1": {
                    "data_pointer": 21,
                    "data_ptr": 2,
                    "extracted_data": 1,
                    "function_data": 1,
                    "function_data_pointer": 1,
                    "function_data_ptr": 1,
                    "pointer": 2,
                    "pointer_to_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "code": "\nvoid extract_data_from_binary_001030ed(void)\n\n{\n  undefined8 *data_pointer;\n  \n  data_pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)data_pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)data_pointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *data_pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "current_name": "extract_data_from_binary_001030ed",
            "entrypoint": "0x001030ed",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010312d": {
            "additional_data": {
                "0xf0": {
                    "data_offset": 1
                },
                "0xf8": {
                    "next_offset": 1
                },
                "FUN_0010312d": {
                    "copy_and_link_objects": 1,
                    "copy_and_swap_values": 3,
                    "copy_data": 21,
                    "copy_data_and_link": 1,
                    "copy_function_data": 1,
                    "copy_value_and_link": 1,
                    "update_data": 1,
                    "update_pointer": 1,
                    "update_pointers": 1
                },
                "lVar1": {
                    "temp": 10,
                    "temp_addr": 1,
                    "temp_address": 3,
                    "temp_pointer": 1,
                    "temp_var": 8,
                    "temp_variable": 2
                },
                "param_1": {
                    "data_a": 1,
                    "dest": 1,
                    "dest_addr": 1,
                    "destination": 5,
                    "destination_address": 1,
                    "pointer1": 1,
                    "source": 12,
                    "source_address": 2,
                    "source_data": 2,
                    "source_object": 1,
                    "source_pointer": 3,
                    "target_address": 1
                },
                "param_2": {
                    "data_b": 1,
                    "destination": 12,
                    "destination_address": 2,
                    "destination_data": 2,
                    "destination_object": 1,
                    "destination_pointer": 3,
                    "pointer2": 1,
                    "source": 5,
                    "source_address": 2,
                    "src": 1,
                    "src_addr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid copy_function_data_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "current_name": "copy_function_data_0010312d",
            "entrypoint": "0x0010312d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010312d": "copy_function_data_0010312d",
                "lVar1": "temp",
                "param_1": "source",
                "param_2": "destination"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010315d": {
            "additional_data": {
                "FUN_0010315d": {
                    "check_and_exit": 1,
                    "check_and_exit_if_flag_zero": 1,
                    "check_and_exit_if_not_initialized": 1,
                    "check_and_exit_if_zero": 15,
                    "check_and_exit_on_error": 2,
                    "check_exit_condition": 1,
                    "check_exit_status": 4,
                    "check_if_initialization_complete": 1,
                    "check_if_initialized": 1,
                    "check_zero_exit": 1,
                    "exit_if_variable_zero": 1,
                    "handle_exit_if_zero": 1,
                    "handle_zero_global_value": 1
                },
                "_DAT_0010d608": {
                    "": 1,
                    "data_flag": 3,
                    "error_code": 8,
                    "exit_code": 2,
                    "exit_flag": 1,
                    "exit_status": 4,
                    "flag": 2,
                    "global_value": 1,
                    "is_initialized": 1,
                    "some_condition": 1,
                    "some_flag": 1,
                    "variable": 1,
                    "variable1": 1
                },
                "xexit": {
                    "": 1,
                    "exit": 1,
                    "exit_function": 1,
                    "exit_program": 1,
                    "exit_with_error": 1,
                    "exit_with_error_code": 1
                }
            },
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid check_and_exit_if_flag_zero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_exit_if_flag_zero_0010315d",
            "entrypoint": "0x0010315d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_flag_zero_0010315d"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103172": {
            "additional_data": {
                "FUN_00103172": {
                    "copy_and_print": 1,
                    "copy_and_print_string": 3,
                    "copy_and_print_value": 1,
                    "copy_data": 1,
                    "copy_data_and_print": 1,
                    "copy_string_and_print": 1,
                    "copy_string_with_condition": 1,
                    "copy_value_and_print": 1,
                    "extract_and_print": 1,
                    "print_and_assign": 2,
                    "print_and_store_data": 1,
                    "print_and_store_value": 2,
                    "print_and_update": 5,
                    "print_and_update_data": 2,
                    "print_and_update_value": 1,
                    "process_data": 2,
                    "reverse_and_copy_string": 1,
                    "reverse_and_update": 2,
                    "update_param_and_return": 1,
                    "update_param_and_return_value": 1
                },
                "auVar2": {
                    "auxiliary_data": 1,
                    "modified_data": 2,
                    "modified_value": 1,
                    "new_array": 1,
                    "new_data": 3,
                    "new_return_value": 1,
                    "new_value": 1,
                    "output_value": 1,
                    "result": 6,
                    "result_array": 3,
                    "temp": 1,
                    "temp_array": 3,
                    "temp_buffer": 1,
                    "updated_data": 3,
                    "updated_value": 1,
                    "updated_values": 1
                },
                "param_1": {
                    "data_ptr": 6,
                    "input_ptr": 3,
                    "new_param": 1,
                    "old_param": 1,
                    "source": 7,
                    "source_pointer": 1,
                    "source_ptr": 6,
                    "source_string": 3,
                    "source_value": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "data_array": 1,
                    "dest": 1,
                    "dest_ptr": 1,
                    "destination": 6,
                    "destination_pointer": 1,
                    "destination_ptr": 3,
                    "destination_string": 3,
                    "new_param": 1,
                    "output_ptr": 2,
                    "string_ptr": 6,
                    "strings_ptr": 2,
                    "target_array": 1,
                    "target_ptr": 2
                },
                "param_3": {
                    "condition": 2,
                    "enable_print": 1,
                    "flag": 7,
                    "is_print_enabled": 1,
                    "is_reverse": 1,
                    "print_flag": 1,
                    "should_print": 15,
                    "should_print_flag": 2
                },
                "param_4": {
                    "additional_data": 6,
                    "additional_param": 1,
                    "additional_value": 2,
                    "data": 3,
                    "extra_data": 1,
                    "new_value": 4,
                    "param": 1,
                    "parameter": 1,
                    "update_value": 1,
                    "value": 8,
                    "value_to_save": 1,
                    "value_to_store": 1
                },
                "printf": {
                    "print": 1,
                    "print_string": 1
                },
                "uVar1": {
                    "data": 2,
                    "data_value": 2,
                    "input_value": 1,
                    "old_data": 1,
                    "old_param_value": 1,
                    "old_value": 4,
                    "source_data": 1,
                    "source_string_copy": 1,
                    "source_value": 7,
                    "temp": 3,
                    "temp_value": 3,
                    "value": 4
                }
            },
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\nundefined  [16]\nprint_and_update_data_00103172(undefined8 *source,undefined8 *string_ptr,char should_printf,undefined8 value)\n\n{\n  undefined8 source_value;\n  undefined result [16];\n  \n  if (should_printf != '\\0') {\n    printf(\"r - %s\\n\",*string_ptr);\n  }\n  source_value = *source;\n  string_ptr[0x1e] = source_value;\n  result._1_7_ = (undefined7)((ulong)source_value >> 8);\n  result[0] = 1;\n  *source = string_ptr;\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "current_name": "print_and_update_data_00103172",
            "entrypoint": "0x00103172",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103172": "print_and_update_data_00103172",
                "auVar2": "result",
                "param_1": "source",
                "param_2": "string_ptr",
                "param_3": "should_print",
                "param_4": "value",
                "printf": "print",
                "uVar1": "source_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001031a5": {
            "additional_data": {
                "FUN_001031a5": {
                    "display_syntax_error": 1,
                    "print_archive_script_error": 4,
                    "print_archive_script_syntax_error": 4,
                    "print_error_message": 2,
                    "print_syntax_error": 15,
                    "print_syntax_error_line": 2,
                    "print_syntax_error_message": 2
                },
                "__format": {
                    "error_format": 6,
                    "error_format_string": 2,
                    "error_message": 3,
                    "error_message_format": 13,
                    "format_string": 7
                },
                "uVar1": {
                    "incremented_index": 1,
                    "line_count": 1,
                    "line_number": 28
                }
            },
            "called": [
                "printf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid print_archive_script_syntax_error_001031a5(void)\n\n{\n  uint line_number;\n  char *error_message_format;\n  \n  line_number = DAT_0010d554 + 1;\n  error_message_format = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(error_message_format,(ulong)line_number);\n  return;\n}\n\n",
            "current_name": "print_archive_script_syntax_error_001031a5",
            "entrypoint": "0x001031a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001031a5": "print_archive_script_syntax_error_001031a5",
                "__format": "error_message_format",
                "uVar1": "line_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001031cf": {
            "additional_data": {
                "DAT_0010d5a0": {
                    "constant2": 3,
                    "dat_0010d5a0": 1,
                    "dat_2": 1,
                    "data_index": 2,
                    "data_offset": 1,
                    "data_var3": 1,
                    "file_index": 1,
                    "file_pointer_data_index": 1,
                    "global_data2": 1,
                    "global_variable_2": 1,
                    "offset": 1
                },
                "DAT_0010d5a8": {
                    "constant1": 3,
                    "dat_0010d5a8": 1,
                    "dat_1": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_var2": 1,
                    "data_variable": 1,
                    "file_base_address": 1,
                    "file_pointer_data_size": 1,
                    "global_data1": 1,
                    "global_variable_1": 1,
                    "some_data": 1
                },
                "FILE": {
                    "file": 2
                },
                "FUN_001031cf": {
                    "extract_and_check_file": 1,
                    "extract_data_from_binary": 3,
                    "extract_data_from_file": 1,
                    "extract_file_data": 1,
                    "extracted_data_from_binary": 1,
                    "handle_file_operations": 1,
                    "initialize_file": 20,
                    "initialize_file_io": 1,
                    "initialize_file_pointer": 2
                },
                "_DAT_00000000": {
                    "file": 2,
                    "file_pointer": 1,
                    "file_pointer_value": 1,
                    "file_ptr": 1,
                    "flag2": 1,
                    "flag_var2": 1,
                    "global_file_pointer": 2,
                    "global_var2": 1,
                    "output_file": 1,
                    "static_variable_2": 1
                },
                "_DAT_00000034": {
                    "file_error_flag": 1,
                    "file_status": 1,
                    "flag": 4,
                    "flag1": 1,
                    "flag_var1": 1,
                    "global_flag": 1,
                    "global_flag1": 1,
                    "global_var1": 1,
                    "static_variable_1": 1
                },
                "extract_data_from_binary_001030ed": {
                    "extract_data": 4,
                    "extract_data_from_binary": 8
                },
                "fileno": {
                    "get_fd": 1
                },
                "iVar1": {
                    "err_code": 1,
                    "err_val": 1,
                    "errno": 2,
                    "errno_value": 13,
                    "error": 6,
                    "error_code": 3,
                    "error_num": 1,
                    "error_value": 2,
                    "previous_error_code": 1
                },
                "iVar3": {
                    "fd": 1,
                    "file_descriptor": 15,
                    "file_number": 8,
                    "fileno_result": 1,
                    "is_terminal": 1,
                    "is_terminal_value": 1,
                    "tty_check_result": 1
                },
                "initializeFile": {
                    "initialize_file": 1
                },
                "int": {
                    "int": 1
                },
                "isatty": {
                    "is_terminal": 1
                },
                "lVar5": {
                    "constant": 1,
                    "constant_value": 2,
                    "dat_0010d5a8": 2,
                    "data": 2,
                    "data_address": 4,
                    "data_location": 1,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_var": 1,
                    "data_variable": 1,
                    "file_array": 1,
                    "file_array_ptr": 1,
                    "file_count": 1,
                    "file_counter": 1,
                    "file_data_ptr": 1,
                    "file_descriptor_array": 1,
                    "file_info": 1,
                    "file_location": 1,
                    "file_pointer_data": 1,
                    "global_var": 2,
                    "some_data": 1
                },
                "long": {
                    "long": 1
                },
                "param_1": {
                    "config_file": 1,
                    "file_descriptor": 1,
                    "file_pointer": 8,
                    "file_pointer_ptr": 1,
                    "file_ptr": 8,
                    "input_file_ptr": 1,
                    "output_file": 10,
                    "output_file_ptr": 1
                },
                "param_2": {
                    "file_pointer": 1,
                    "input_file": 23,
                    "input_file_pointer": 1,
                    "input_file_ptr": 1,
                    "main_file": 1,
                    "output_file_ptr": 1,
                    "source_file": 2,
                    "target_file": 1
                },
                "param_3": {
                    "input1": 1,
                    "param3": 13,
                    "param_3": 15,
                    "parameter_3": 1,
                    "unknown_param3": 1
                },
                "param_4": {
                    "input2": 1,
                    "param4": 13,
                    "param_4": 15,
                    "parameter_4": 1,
                    "unknown_param4": 1
                },
                "param_5": {
                    "param5": 13,
                    "param_5": 14,
                    "parameter_5": 1,
                    "result": 1,
                    "return_value": 1,
                    "unknown_param5": 1
                },
                "piVar4": {
                    "err_num": 1,
                    "errno_loc": 1,
                    "errno_location": 3,
                    "errno_location_ptr": 1,
                    "errno_pointer": 2,
                    "errno_ptr": 11,
                    "error_code": 1,
                    "error_location": 7,
                    "error_pointer": 1,
                    "error_ptr": 2,
                    "pointer_to_errno": 1
                },
                "uVar2": {
                    "is_interactive": 2,
                    "is_terminal": 17,
                    "is_terminal_flag": 1,
                    "is_terminal_result": 1,
                    "is_tty": 6,
                    "result": 1
                },
                "uint": {
                    "uint": 1,
                    "unsigned_int": 1
                },
                "undefined": {
                    "undefined": 1
                },
                "undefined4": {
                    "undefined4": 1
                },
                "undefined8": {
                    "undefined8": 1
                }
            },
            "called": [
                "fileno",
                "FUN_001030ed",
                "isatty",
                "__errno_location"
            ],
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "code": "\n\n\nundefined8\ninitialize_file_pointer_001031cf(file **output_file,file *input_file,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errno_value;\n  uint isatty;\n  int file_descriptor;\n  int *errno_ptr;\n  long data_address;\n  \n  errno_ptr = __errno_location();\n  data_address = DAT_0010d5a8;\n  errno_value = *errno_ptr;\n  if (output_file == (file **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = input_file;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (output_file == *(file ***)(data_address + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)output_file + 0x1c) = 0;\n    *(undefined *)&output_file[1]->_flags = 0;\n    *(undefined *)((long)&output_file[1]->_flags + 1) = 0;\n    *(undefined4 *)(output_file + 5) = 1;\n    output_file[2] = output_file[1];\n    *(undefined4 *)(output_file + 7) = 0;\n    if (data_address != 0) {\n      if (output_file == *(file ***)(data_address + DAT_0010d5a0 * 8)) {\n        extract_data_from_binary();\n      }\n      *output_file = input_file;\n      *(undefined4 *)((long)output_file + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *output_file = input_file;\n    *(undefined4 *)((long)output_file + 0x34) = 1;\n  }\n  *(undefined8 *)((long)output_file + 0x2c) = 1;\nLAB_0010327b:\n  is_terminal = 0;\n  if (input_file != (file *)0x0) {\n    file_descriptor = fileno(input_file);\n    file_descriptor = is_terminal(file_descriptor);\n    is_terminal = (uint)(0 < file_descriptor);\n  }\n  *(uint *)((long)output_file + 0x24) = is_terminal;\n  *errno_ptr = errno_value;\n  return param_5;\n}\n\n",
            "current_name": "initialize_file_pointer_001031cf",
            "entrypoint": "0x001031cf",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_001031cf": "initialize_file_pointer_001031cf",
                "extract_data_from_binary_001030ed": "extract_data_from_binary",
                "fileno": "get_fd",
                "iVar1": "errno_value",
                "iVar3": "file_descriptor",
                "isatty": "is_terminal",
                "lVar5": "data_address",
                "param_1": "output_file",
                "param_2": "input_file",
                "piVar4": "errno_ptr",
                "uVar2": "is_terminal"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001032a8": {
            "additional_data": {
                "FUN_001032a8": {
                    "archive_entry_search": 1,
                    "extract_archive_entries": 2,
                    "extract_entries_from_archive": 6,
                    "perform_archive_operation": 1,
                    "process_archive": 6,
                    "process_archive_entries": 11,
                    "process_entries": 2,
                    "process_entries_from_binary": 1
                },
                "__format": {
                    "error_format": 4,
                    "error_message": 7,
                    "error_message_format": 9,
                    "error_msg_format": 1,
                    "format_string": 9,
                    "message_format": 1
                },
                "bVar3": {
                    "entry_found": 18,
                    "found_entry": 9,
                    "has_found_entry": 1,
                    "has_matched_entry": 1,
                    "is_entry_found": 2
                },
                "iVar5": {
                    "cmp_result": 2,
                    "compare_result": 1,
                    "comparison_result": 23,
                    "filename_comparison": 2,
                    "filename_comparison_result": 3
                },
                "lVar1": {
                    "current_entry": 3,
                    "entry": 1,
                    "next_entry": 23,
                    "next_entry_address": 1,
                    "next_entry_offset": 1,
                    "next_entry_pointer": 1,
                    "next_entry_ptr": 1
                },
                "lVar7": {
                    "current_archive_entry": 1,
                    "current_entry": 9,
                    "current_entry_address": 7,
                    "current_entry_array": 1,
                    "current_entry_in_archive": 3,
                    "current_entry_offset": 3,
                    "current_entry_pointer": 1,
                    "current_entry_ptr": 1,
                    "current_node_address": 1,
                    "entry_address": 1,
                    "entry_ptr": 1,
                    "first_entry": 1,
                    "last_entry_address": 1
                },
                "param_1": {
                    "archive": 10,
                    "archive_array": 1,
                    "archive_contents": 1,
                    "archive_data": 5,
                    "archive_entries": 7,
                    "archive_entries_list": 1,
                    "archive_entries_ptr": 1,
                    "entries": 1,
                    "entry_list": 2,
                    "entry_table": 1,
                    "file_array": 1
                },
                "param_2": {
                    "callback": 6,
                    "callback_fn": 1,
                    "callback_func": 1,
                    "callback_func_ptr": 1,
                    "callback_function": 6,
                    "entry_callback": 2,
                    "entry_function": 1,
                    "extract_callback": 1,
                    "extract_entry_func": 1,
                    "extract_function": 2,
                    "operation": 1,
                    "process_entry": 3,
                    "process_entry_callback": 5
                },
                "param_3": {
                    "archive_entries": 2,
                    "entries": 1,
                    "entry_array": 2,
                    "entry_list": 3,
                    "entry_names": 17,
                    "entry_names_ptr": 1,
                    "file_names": 1,
                    "filename_list": 1,
                    "filenames": 1,
                    "requested_entries": 2
                },
                "param_4": {
                    "result": 11,
                    "return_value": 20
                },
                "plVar4": {
                    "current_entry": 15,
                    "current_entry_next": 1,
                    "current_entry_pointer": 1,
                    "current_entry_ptr": 7,
                    "current_file": 1,
                    "current_node": 1,
                    "entry_ptr": 1,
                    "next_entry": 3,
                    "next_entry_ptr": 1
                },
                "plVar6": {
                    "current_entry": 2,
                    "current_entry_address": 1,
                    "current_entry_ptr": 1,
                    "next_entry": 9,
                    "next_entry_array": 1,
                    "next_entry_in_archive": 3,
                    "next_entry_in_chain": 1,
                    "next_entry_iterator": 1,
                    "next_entry_pointer": 1,
                    "next_entry_ptr": 7,
                    "next_file": 1,
                    "next_node": 1,
                    "previous_entry": 1,
                    "previous_entry_ptr": 1
                },
                "plVar8": {
                    "current_entry_iterator": 1,
                    "prev_entry_ptr": 1,
                    "previous_entry": 13,
                    "previous_entry_address": 1,
                    "previous_entry_in_archive": 2,
                    "previous_entry_next": 1,
                    "previous_entry_pointer": 2,
                    "previous_entry_ptr": 6,
                    "previous_file": 1,
                    "previous_node": 1,
                    "prior_entry_ptr": 1
                },
                "uVar2": {
                    "current_entry": 10,
                    "current_entry_name": 5,
                    "current_name": 1,
                    "entry": 2,
                    "entry_name": 7,
                    "file_name": 1,
                    "filename": 5
                }
            },
            "called": [
                "fprintf",
                "filename_cmp",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nundefined8 process_archive_entries_001032a8(long *archive,code *callback,undefined8 *entry_names,undefined8 return_value)\n\n{\n  long next_entry;\n  undefined8 current_entry;\n  bool entry_found;\n  long *current_entry;\n  int comparison_result;\n  char *error_message_format;\n  long *next_entry;\n  long current_entry;\n  long *previous_entry;\n  \n  current_entry = archive[0x1e];\n  if (entry_names == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*callback)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_entry = (long *)archive[0x1e];\n      previous_entry = archive;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          comparison_result = filename_cmp(*entry_names);\n          if (comparison_result == 0) {\n            entry_found = true;\n            (*callback)(next_entry,previous_entry);\n          }\n        }\n        previous_entry = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!entry_found) {\n        current_entry = *entry_names;\n        error_message_format = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,error_message_format,current_entry);\n      }\n      entry_names = (undefined8 *)entry_names[1];\n    } while (entry_names != (undefined8 *)0x0);\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_archive_entries_001032a8",
            "entrypoint": "0x001032a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "__format": "error_message_format",
                "bVar3": "entry_found",
                "iVar5": "comparison_result",
                "lVar1": "next_entry",
                "lVar7": "current_entry",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entry_names",
                "param_4": "return_value",
                "plVar4": "current_entry",
                "plVar6": "next_entry",
                "plVar8": "previous_entry",
                "uVar2": "current_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010336b": {
            "additional_data": {
                "FUN_0010336b": {
                    "print_emulation_options": 31
                },
                "param_1": {
                    "file": 4,
                    "file_pointer": 1,
                    "file_stream": 2,
                    "output_file": 23,
                    "output_stream": 1
                },
                "pcVar1": {
                    "emulation_option": 3,
                    "emulation_option_line": 1,
                    "emulation_option_text": 4,
                    "emulation_options": 4,
                    "emulation_options_msg": 1,
                    "emulation_options_string": 1,
                    "emulation_options_text": 2,
                    "emulation_string": 3,
                    "emulation_text": 2,
                    "message": 2,
                    "option_string": 3,
                    "option_text": 2,
                    "options_string": 1,
                    "options_text": 1,
                    "translation": 1
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010342d"
            ],
            "code": "\nvoid print_emulation_options_0010336b(FILE *output_file)\n\n{\n  char *emulation_options;\n  \n  emulation_options = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(output_file,emulation_options);\n  emulation_options = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(output_file,emulation_options);\n  return;\n}\n\n",
            "current_name": "print_emulation_options_0010336b",
            "entrypoint": "0x0010336b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "output_file",
                "pcVar1": "emulation_options"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001033b0": {
            "additional_data": {
                "FUN_001033b0": {
                    "log_and_exit": 1,
                    "print_and_exit": 4,
                    "print_error_and_exit": 2,
                    "print_error_message_and_exit": 24
                },
                "_stderr": {
                    "standard_error_stream": 1
                },
                "param_1": {
                    "error_message": 27,
                    "message": 4
                }
            },
            "called": [
                "exit",
                "fprintf"
            ],
            "calling": [
                "FUN_00103df9",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid print_error_message_and_exit_001033b0(undefined8 error_message)\n\n{\n  fprintf(standard_error_stream,\"%s\\n\",error_message);\n                    \n  exit(2);\n}\n\n",
            "current_name": "print_error_message_and_exit_001033b0",
            "entrypoint": "0x001033b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "_stderr": "standard_error_stream",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001033d6": {
            "additional_data": {
                "FUN_001033d6": {
                    "create_and_initialize_buffer": 1,
                    "create_buffer": 25,
                    "create_buffer_from_memory": 1,
                    "create_buffer_from_params": 1,
                    "create_file_buffer": 1,
                    "create_yy_buffer": 1,
                    "yy_create_buffer": 1
                },
                "auVar3": {
                    "output": 1,
                    "result": 16,
                    "result_arr": 1,
                    "return_value": 4
                },
                "initialize_file_pointer_001031cf": {
                    "initialize_file_pointer": 1
                },
                "malloc": {
                    "allocate_memory": 1
                },
                "param_1": {
                    "arg1": 2,
                    "buffer_size": 1,
                    "file": 1,
                    "file_data": 1,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "file_path": 1,
                    "file_pointer": 2,
                    "input_file": 1,
                    "input_param": 2,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "param1": 8,
                    "param_buffer_size": 1,
                    "pointer_to_first_parameter": 1,
                    "size": 1,
                    "source_data": 1,
                    "source_file": 1,
                    "unspecified_param1": 1
                },
                "param_2": {
                    "alignment": 1,
                    "arg2": 1,
                    "buffer_size": 1,
                    "dest_data": 1,
                    "destination_file": 1,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "length_param": 1,
                    "output_file": 1,
                    "output_param": 1,
                    "param2": 9,
                    "param_2": 3,
                    "param_unknown": 1,
                    "size": 1,
                    "unspecified_param2": 1,
                    "unused_param": 1
                },
                "param_3": {
                    "arg3": 1,
                    "capacity": 1,
                    "config_param": 1,
                    "flag_param": 1,
                    "input_param3": 2,
                    "input_param_3": 1,
                    "memory_size": 1,
                    "mode": 1,
                    "param3": 9,
                    "param_3": 3,
                    "param_unknown": 1,
                    "size_of_dest": 1,
                    "source": 1,
                    "unknown_value": 1,
                    "unspecified_param3": 1,
                    "unused_param2": 1
                },
                "param_4": {
                    "arg4": 2,
                    "buffer_size": 4,
                    "counter": 1,
                    "data": 2,
                    "file_pointer": 2,
                    "initial_value": 1,
                    "input_param4": 2,
                    "input_param_4": 1,
                    "param4": 9,
                    "param_file_pointer": 1,
                    "pointer_param": 1,
                    "status_param": 1,
                    "unspecified_param4": 1,
                    "user_data": 1,
                    "user_input": 1
                },
                "print_error_message_and_exit_001033b0": {
                    "print_error_message_and_exit": 1
                },
                "pvVar1": {
                    "buffer": 26,
                    "buffer_ptr": 3,
                    "yy_buffer": 1
                },
                "pvVar2": {
                    "allocated_memory": 4,
                    "aux_buffer": 1,
                    "buffer": 1,
                    "buffer2": 2,
                    "buffer_pointer": 2,
                    "data": 3,
                    "data_buffer": 3,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "dynamic_buffer": 1,
                    "dynamic_mem_ptr": 1,
                    "dynamic_memory": 3,
                    "file_buffer": 1,
                    "malloc_result": 1,
                    "pointer": 1,
                    "second_buffer": 1,
                    "sub_buffer": 1,
                    "temp_buffer": 1
                }
            },
            "called": [
                "FUN_001031cf",
                "malloc",
                "FUN_001033b0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nundefined  [16]\ncreate_buffer_from_params_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *allocated_memory;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    allocated_memory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = allocated_memory;\n  } while (allocated_memory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_pointer(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "current_name": "create_buffer_from_params_001033d6",
            "entrypoint": "0x001033d6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001033d6": "create_buffer_from_params_001033d6",
                "auVar3": "result",
                "initialize_file_pointer_001031cf": "initialize_file_pointer",
                "malloc": "allocate_memory",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "print_error_message_and_exit_001033b0": "print_error_message_and_exit",
                "pvVar1": "buffer",
                "pvVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010342d": {
            "additional_data": {
                "DAT_0010d660": {
                    "program_name": 1
                },
                "FUN_0010342d": {
                    "display_usage": 3,
                    "print_archive_options": 2,
                    "print_archive_usage": 3,
                    "print_usage": 21,
                    "print_usage_message": 2
                },
                "__stream": {
                    "error_stream": 1,
                    "file_stream": 1,
                    "output_stream": 24,
                    "stream": 5
                },
                "_stderr": {
                    "standard_error": 2
                },
                "_stdout": {
                    "standard_output": 2
                },
                "dcgettext": {
                    "get_translated_string": 2,
                    "translate_text": 1
                },
                "fprintf": {
                    "write_to_stream": 1
                },
                "param_1": {
                    "display_usage": 1,
                    "is_debug_mode": 1,
                    "is_input_redirected": 1,
                    "is_output_enabled": 1,
                    "is_verbose": 7,
                    "is_verbose_mode": 1,
                    "output_to_file": 4,
                    "output_to_standard": 1,
                    "output_to_stdout": 5,
                    "param": 2,
                    "parameter": 1,
                    "print_to_stdout": 2,
                    "show_errors": 1,
                    "stream_type": 1,
                    "verbosity": 1,
                    "verbosity_level": 1
                },
                "pcVar2": {
                    "error_message": 2,
                    "error_text": 1,
                    "localization_string": 1,
                    "localized_message": 2,
                    "localized_string": 4,
                    "message": 18,
                    "text": 3
                },
                "uVar1": {
                    "app_name": 1,
                    "archive_file_path": 1,
                    "archive_name": 1,
                    "file_name": 1,
                    "format_specifier": 2,
                    "format_specifier1": 1,
                    "format_string": 2,
                    "format_string1": 1,
                    "formatted_string": 1,
                    "message": 2,
                    "option": 1,
                    "usage_string": 1,
                    "version": 6,
                    "version_num": 1,
                    "version_number": 1
                },
                "xexit": {
                    "exit_program": 1
                }
            },
            "called": [
                "FUN_0010266f",
                "xexit",
                "fprintf",
                "FUN_0010336b",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_archive_usage_0010342d(uint is_verbose)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *output_stream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  output_stream = standard_error;\n  if (is_verbose != 0) {\n    output_stream = standard_output;\n  }\n  fprintf(output_stream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(output_stream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  print_emulation_options_0010336b(output_stream);\n  print_supported_targets_0010266f(DAT_0010d660,output_stream);\n  if (is_verbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(is_verbose ^ 1);\n}\n\n",
            "current_name": "print_archive_usage_0010342d",
            "entrypoint": "0x0010342d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010342d": "print_archive_usage_0010342d",
                "__stream": "output_stream",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "dcgettext": "get_translated_string",
                "fprintf": "write_to_stream",
                "param_1": "is_verbose",
                "pcVar2": "message",
                "uVar1": "version",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010394a": {
            "additional_data": {
                "FUN_0010394a": {
                    "print_archive_access_options": 1,
                    "print_archive_index": 2,
                    "print_archive_info": 1,
                    "print_archive_usage": 1,
                    "print_index_usage": 1,
                    "print_usage": 20,
                    "print_usage_and_exit": 3,
                    "print_usage_message": 2
                },
                "__stream": {
                    "output_file": 1,
                    "output_stream": 27,
                    "stream": 3
                },
                "_stderr": {
                    "error_stream": 1,
                    "std_err_stream": 1,
                    "stderr": 1
                },
                "_stdout": {
                    "standard_stream": 1,
                    "std_out_stream": 1,
                    "stdout": 1
                },
                "dcgettext": {
                    "get_localized_string": 1,
                    "get_message": 2
                },
                "param_1": {
                    "archive_flag": 1,
                    "flag": 3,
                    "flags": 1,
                    "is_debug": 2,
                    "is_standard_output": 1,
                    "is_stdout": 1,
                    "is_verbose": 8,
                    "is_zero": 1,
                    "option": 1,
                    "options": 1,
                    "output_to_file": 2,
                    "output_to_stdout": 1,
                    "print_to_stdout": 2,
                    "show_help": 1,
                    "show_usage": 1,
                    "verbosity": 2,
                    "verbosity_level": 2
                },
                "pcVar2": {
                    "format_string": 1,
                    "localized_string": 3,
                    "localized_text": 1,
                    "message": 23,
                    "msg": 1,
                    "msg_ptr": 1,
                    "translated_string": 1
                },
                "print_supported_targets_0010266f": {
                    "print_supported_targets": 4
                },
                "uVar1": {
                    "archive_file_name": 1,
                    "archive_name": 1,
                    "data": 2,
                    "data_address": 1,
                    "data_ptr": 1,
                    "default_archive_name": 1,
                    "default_message": 1,
                    "default_string": 1,
                    "program_name": 11,
                    "usage_message": 1,
                    "usage_statement": 1,
                    "usage_str": 1,
                    "usage_string": 3,
                    "version": 2,
                    "version_string": 2
                },
                "xexit": {
                    "exit_program": 4
                }
            },
            "called": [
                "FUN_0010266f",
                "xexit",
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_usage_and_exit_0010394a(uint is_verbose)\n\n{\n  undefined8 program_name;\n  char *message;\n  FILE *output_stream;\n  \n  program_name = DAT_0010d660;\n  output_stream = stderr;\n  if (is_verbose != 0) {\n    output_stream = stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(output_stream,message,program_name);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(output_stream,message);\n  print_supported_targets(DAT_0010d660,output_stream);\n  if (is_verbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(is_verbose ^ 1);\n}\n\n",
            "current_name": "print_usage_and_exit_0010394a",
            "entrypoint": "0x0010394a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010394a": "print_usage_and_exit_0010394a",
                "__stream": "output_stream",
                "_stderr": "stderr",
                "_stdout": "stdout",
                "dcgettext": "get_message",
                "param_1": "is_verbose",
                "pcVar2": "message",
                "print_supported_targets_0010266f": "print_supported_targets",
                "uVar1": "program_name",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103a78": {
            "additional_data": {
                "DAT_0010d60c": {
                    "internal_stat_error_flag": 1,
                    "print_archive_name": 1
                },
                "FUN_00103a78": {
                    "archive_extraction": 1,
                    "archive_reading_and_printing": 1,
                    "extract_and_print_archive": 11,
                    "extract_and_print_archive_contents": 7,
                    "extract_and_print_archived_contents": 1,
                    "extract_and_print_data": 2,
                    "extract_archive": 1,
                    "extract_archive_contents": 1,
                    "process_archive": 1,
                    "process_file": 1,
                    "read_and_print_archive": 1,
                    "read_archive_file": 1,
                    "reprocess_archive": 1
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "archive_buffer": 1,
                    "buffer": 29
                },
                "_stdout": {
                    "standard_output": 2
                },
                "auStack_b8": {
                    "aux_stack": 1,
                    "auxiliary_buffer": 1,
                    "local_buffer": 4,
                    "stack_array": 1,
                    "stack_buffer": 14,
                    "stack_memory": 1,
                    "temp_buffer": 3,
                    "temp_stack": 3,
                    "temporary_buffer": 2,
                    "temporary_stack_variables": 1
                },
                "iVar1": {
                    "error_code": 2,
                    "result": 17,
                    "return_value": 2,
                    "status": 2
                },
                "local_88": {
                    "archive_size": 3,
                    "buffer_size": 2,
                    "bytes_to_read": 2,
                    "desired_buffer_size": 1,
                    "expected_bytes": 1,
                    "expected_size": 2,
                    "file_size": 1,
                    "limit": 1,
                    "max_block_read_size": 1,
                    "max_buffer_size": 1,
                    "max_bytes": 1,
                    "max_bytes_to_read": 5,
                    "max_read_size": 1,
                    "remaining_bytes": 2,
                    "remaining_size": 1,
                    "seek_position": 1,
                    "total_bytes": 1,
                    "total_bytes_available": 2,
                    "total_bytes_read": 1,
                    "total_size": 1
                },
                "param_1": {
                    "archive": 8,
                    "archive_data": 1,
                    "archive_file": 2,
                    "archive_handle": 1,
                    "archive_handler": 1,
                    "archive_ptr": 1,
                    "arguments": 3,
                    "file_info": 2,
                    "input": 2,
                    "input_archive": 1,
                    "input_file": 1,
                    "input_params": 3,
                    "options": 1,
                    "parameters": 4
                },
                "pcVar7": {
                    "err_msg": 1,
                    "error_message": 10,
                    "error_message_format": 2,
                    "error_msg": 2,
                    "error_msg_format": 2,
                    "error_str": 1,
                    "error_string": 12,
                    "error_text": 1
                },
                "piVar6": {
                    "err_num": 1,
                    "errno_location": 12,
                    "errno_location_ptr": 2,
                    "errno_pointer": 2,
                    "errno_ptr": 6,
                    "error_code": 2,
                    "error_location": 1,
                    "error_num_ptr": 1,
                    "error_number": 3,
                    "error_ptr": 1
                },
                "puVar2": {
                    "alternative_param": 1,
                    "archive": 2,
                    "archive_address": 1,
                    "archive_data": 1,
                    "archive_pointer": 1,
                    "archive_ptr": 4,
                    "aux_data": 1,
                    "aux_ptr": 1,
                    "fallback_archive": 1,
                    "file_path_ptr": 1,
                    "file_ptr": 2,
                    "function_pointer": 1,
                    "library": 1,
                    "optional_args": 1,
                    "param": 1,
                    "ptr": 3,
                    "ptr_or_archive": 1,
                    "ptr_to_param1_d": 2,
                    "secondary_param": 1,
                    "target_archive": 1,
                    "target_function": 1,
                    "temp_handle": 1,
                    "temp_ptr": 1
                },
                "sVar5": {
                    "bytes_written": 30,
                    "num_bytes_written": 1
                },
                "uVar3": {
                    "bytes_read": 23,
                    "bytes_read_result": 1,
                    "num_bytes_read": 2
                },
                "uVar4": {
                    "error": 2,
                    "error_message": 16,
                    "error_msg": 6,
                    "error_text": 1,
                    "trans_error_msg": 1,
                    "translated_error_message": 1
                },
                "unaff_R13": {
                    "bytes_read": 3,
                    "bytes_read_total": 1,
                    "total_bytes_read": 25,
                    "total_bytes_written": 2
                },
                "unaff_R14": {
                    "archive_size": 22,
                    "file_size": 6,
                    "total_bytes": 1,
                    "total_bytes_to_read": 2
                },
                "unaff_RBP": {
                    "buffer_size": 2,
                    "bytes_remaining": 4,
                    "remaining_buffer_size": 1,
                    "remaining_bytes": 24
                }
            },
            "called": [
                "bfd_bread",
                "free",
                "strerror",
                "fwrite",
                "bfd_seek",
                "xmalloc",
                "FUN_00107690",
                "printf",
                "dcgettext",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid extract_and_print_archive_contents_00103a78(undefined8 *archive)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive_ptr;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_location;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong total_bytes_read;\n  ulong archive_size;\n  undefined stack_buffer [48];\n  ulong max_bytes_to_read;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive_ptr = (undefined8 *)archive[0x1d];\n  if ((undefined8 *)archive[0x1d] == (undefined8 *)0x0) {\n    archive_ptr = archive;\n  }\n  result = (**(code **)(archive_ptr[1] + 0x1e8))(archive,stack_buffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive);\n    }\n    total_bytes_read = 0;\n    bfd_seek(archive,0,0);\n    goto LAB_00103afd;\n  }\n  archive = (undefined8 *)*archive;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    print_formatted_error_message_and_exit_00107690(error_message,archive);\n    max_bytes_to_read = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,standard_output);\n      if (bytes_written != remaining_bytes) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        print_formatted_error_message_and_exit_00107690(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes_read = total_bytes_read + bytes_written;\nLAB_00103afd:\n      if (max_bytes_to_read <= total_bytes_read) goto LAB_00103b91;\n      remaining_bytes = max_bytes_to_read - total_bytes_read;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,archive);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    archive = *(undefined8 **)archive[0x1d];\n    archive_size = max_bytes_to_read;\n  } while( true );\n}\n\n",
            "current_name": "extract_and_print_archive_contents_00103a78",
            "entrypoint": "0x00103a78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "__ptr": "buffer",
                "_stdout": "standard_output",
                "auStack_b8": "stack_buffer",
                "iVar1": "result",
                "local_88": "max_bytes_to_read",
                "param_1": "archive",
                "pcVar7": "error_string",
                "piVar6": "errno_location",
                "puVar2": "archive_ptr",
                "sVar5": "bytes_written",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "unaff_R13": "total_bytes_read",
                "unaff_R14": "archive_size",
                "unaff_RBP": "remaining_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ba8": {
            "additional_data": {
                "FUN_00103ba8": {
                    "check_and_print_ar": 3,
                    "check_ar_availability": 1,
                    "check_ar_status": 2,
                    "check_if_ar_greater_than_zero": 1,
                    "print_active_region": 1,
                    "print_ar": 2,
                    "print_ar_data": 1,
                    "print_ar_if_needed": 2,
                    "print_ar_if_set": 1,
                    "print_ar_message": 4,
                    "print_ar_message_if_not_zero": 1,
                    "print_ar_prompt": 2,
                    "print_ar_status": 2,
                    "print_arrows_if_data_not_zero": 1,
                    "print_arrows_if_needed": 1,
                    "print_if_ar_is_greater_than_zero": 2,
                    "print_input_prompt": 1,
                    "print_prompt_if_not_ar": 1,
                    "print_prompt_if_not_initialized": 1,
                    "print_status_message": 1
                },
                "_DAT_0010d608": {
                    "active_region_flag": 1,
                    "ar_condition": 1,
                    "ar_flag": 1,
                    "ar_state": 1,
                    "ar_status": 3,
                    "ar_value": 3,
                    "data": 1,
                    "data_flag": 1,
                    "flag": 4,
                    "is_ar_active": 1,
                    "is_ar_set": 3,
                    "is_initialized": 1,
                    "is_input_valid": 1,
                    "is_pointer_initialized": 1,
                    "status": 1,
                    "status_flag": 1
                },
                "_stdout": {
                    "output_buffer": 1,
                    "output_stream": 2,
                    "standard_output": 3
                },
                "fflush": {
                    "flush": 2,
                    "flush_output": 1
                },
                "printf": {
                    "print": 2,
                    "print_message": 1
                }
            },
            "called": [
                "fflush",
                "printf"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid print_ar_message_if_not_zero_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standard_output);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "print_ar_message_if_not_zero_00103ba8",
            "entrypoint": "0x00103ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ba8": "print_ar_message_if_not_zero_00103ba8",
                "_stdout": "standard_output",
                "fflush": "flush",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103bd1": {
            "additional_data": {
                "FUN_00103bd1": {
                    "print_matching_formats": 31
                },
                "__format": {
                    "format_message": 2,
                    "format_string": 24,
                    "translated_format": 1
                },
                "_stderr": {
                    "error_stream": 1,
                    "standard_error": 7,
                    "stderr_stream": 1
                },
                "_stdout": {
                    "output_stream": 1,
                    "standard_output": 7,
                    "stdout_stream": 1
                },
                "param_1": {
                    "format_array": 1,
                    "format_list": 9,
                    "format_strings": 11,
                    "formats": 6,
                    "formats_list": 1,
                    "matching_formats": 1
                },
                "plVar2": {
                    "current_format": 20,
                    "current_format_string": 2,
                    "current_string": 3,
                    "format_pointer": 1,
                    "format_ptr": 1
                },
                "uVar1": {
                    "cached_format": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_variable": 2,
                    "default_format": 6,
                    "default_locale": 2,
                    "default_value": 1,
                    "format_string": 1,
                    "format_var": 1,
                    "matched_format": 1,
                    "matching_format": 2,
                    "matching_formats": 2,
                    "matching_formats_variable": 1,
                    "saved_value": 1
                }
            },
            "called": [
                "free",
                "fprintf",
                "fputc",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid print_matching_formats_00103bd1(long *format_strings)\n\n{\n  undefined8 default_format;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  default_format = DAT_0010d660;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,default_format);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_00103bd1",
            "entrypoint": "0x00103bd1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "param_1": "format_strings",
                "plVar2": "current_format",
                "uVar1": "default_format"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103c60": {
            "additional_data": {
                "FUN_00103c60": {
                    "create_temp_file_and_open_archive": 1,
                    "create_temp_file_and_open_output_archive": 1,
                    "create_temp_file_from_binary": 1,
                    "create_temp_file_from_plugin": 1,
                    "extract_and_modify_file": 1,
                    "extract_and_modify_files": 1,
                    "extract_and_process_archive": 1,
                    "extract_archive": 1,
                    "extract_archive_and_create_temp_file": 1,
                    "extract_archived_files": 1,
                    "extract_plugin_files": 1,
                    "generate_output_file": 1,
                    "generate_temporary_archive": 1,
                    "initialize_archive": 1,
                    "parse_archive_file": 1,
                    "process_and_create_output_archive": 2,
                    "process_archive": 3,
                    "process_archive_file": 3,
                    "process_archive_files": 2,
                    "process_archived_file": 2,
                    "process_archives": 1,
                    "process_file": 1,
                    "process_files": 1,
                    "process_input_files": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "standard_error": 2
                },
                "cVar1": {
                    "check_format_result": 2,
                    "check_result": 6,
                    "format_check": 4,
                    "format_check_result": 11,
                    "format_valid": 2,
                    "is_archive": 2,
                    "is_valid_format": 2
                },
                "fprintf": {
                    "print_error_message": 1
                },
                "lVar4": {
                    "archive_file": 2,
                    "input_archive": 23,
                    "input_archive_file": 1,
                    "input_archive_handle": 4,
                    "input_fd": 1
                },
                "lVar5": {
                    "archived_file": 22,
                    "archived_file_fd": 1,
                    "archived_file_handle": 4,
                    "file_pointer": 1,
                    "next_archive_file": 1,
                    "next_archived_file": 2
                },
                "param_1": {
                    "archive_path": 3,
                    "file_path": 3,
                    "input_archive": 2,
                    "input_archive_path": 14,
                    "input_file": 6,
                    "input_file_path": 2,
                    "input_path": 1
                },
                "param_2": {
                    "archive_flag": 1,
                    "create_output": 1,
                    "flag": 14,
                    "is_output_archive": 2,
                    "is_plugin": 9,
                    "is_reverse": 1,
                    "is_reversed": 1,
                    "reverse_flag": 2
                },
                "pcVar3": {
                    "error_message": 28,
                    "error_msg": 2,
                    "error_msg_fmt": 1
                },
                "piVar2": {
                    "errno_loc": 3,
                    "errno_location": 3,
                    "errno_location_ptr": 2,
                    "errno_ptr": 7,
                    "error_code": 5,
                    "error_location": 3,
                    "error_location_ptr": 1,
                    "error_num_ptr": 1,
                    "error_number": 2,
                    "error_number_pointer": 2
                },
                "plVar7": {
                    "archived_file_handle_ptr": 2,
                    "archived_file_list": 5,
                    "archived_file_list_ptr": 1,
                    "archived_file_pointer": 1,
                    "archived_file_ptr": 3,
                    "archived_files": 5,
                    "archived_files_list": 2,
                    "archived_files_ptr": 1,
                    "current_archive_file": 1,
                    "current_archived_file": 3,
                    "current_archived_file_ptr": 1,
                    "current_file_ptr": 1,
                    "file_list": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "next_archived_file": 1
                },
                "uVar6": {
                    "error_context": 2,
                    "error_header": 1,
                    "executable_path": 1,
                    "file_name": 1,
                    "function_name": 1,
                    "message": 1,
                    "program_name": 21,
                    "temp_file": 2,
                    "tool_version": 1
                }
            },
            "called": [
                "xstrdup",
                "bfd_openr",
                "FUN_0010315d",
                "strerror",
                "fprintf",
                "FUN_001057a0",
                "bfd_openr_next_archived_file",
                "bfd_set_format",
                "bfd_check_format",
                "bfd_fdopenw",
                "__errno_location",
                "dcgettext"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid process_archive_file_00103c60(char *input_archive_path,int flag)\n\n{\n  char format_check_result;\n  int *errno_ptr;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *archived_files;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)reverse_file_path_and_create_temp_file_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_ptr = __errno_location();\n    input_archive_path = strerror(*errno_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive_path = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(input_archive_path,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        format_check_result = bfd_check_format(input_archive,2);\n        if (format_check_result != '\\0') {\n          archived_files = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *archived_files = archived_file;\n            archived_files = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(standard_error,error_message,program_name,input_archive_path);\n  check_and_exit_if_flag_zero_0010315d();\n  return;\n}\n\n",
            "current_name": "process_archive_file_00103c60",
            "entrypoint": "0x00103c60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103c60": "process_archive_file_00103c60",
                "_stderr": "standard_error",
                "cVar1": "format_check_result",
                "fprintf": "print_error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "param_1": "input_archive_path",
                "param_2": "flag",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "plVar7": "archived_files",
                "uVar6": "program_name"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103ddc": {
            "additional_data": {
                "DAT_0010d578": {
                    "file_data": 3,
                    "file_info": 3,
                    "file_info_array": 2,
                    "file_info_buffer": 2,
                    "file_info_data": 1,
                    "file_info_data1": 1
                },
                "DAT_0010d60c": {
                    "enable_extra_info": 1,
                    "file_info_data2": 1,
                    "has_extra_info": 1,
                    "has_format_info": 1,
                    "is_compressed": 1,
                    "is_data_valid": 1,
                    "is_flag_set": 1,
                    "is_print_enabled": 1,
                    "is_verbose": 2,
                    "should_print": 1,
                    "should_print_info": 1
                },
                "FUN_00103ddc": {
                    "print_file_info": 26,
                    "print_file_information": 1,
                    "print_formatted_file_info": 4
                },
                "format_and_print_file_info_001079c0": {
                    "format_and_print_file_info": 11,
                    "print_file_and_format_info": 1,
                    "print_formatted_file_info": 7,
                    "print_formatted_file_info_internal": 1
                },
                "param_1": {
                    "file": 4,
                    "file_handle": 1,
                    "file_info": 23,
                    "file_name": 1,
                    "file_pointer": 1,
                    "param": 1
                }
            },
            "called": [
                "FUN_001079c0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nvoid print_formatted_file_info_00103ddc(undefined8 file_info)\n\n{\n  format_and_print_file_info(DAT_0010d578,file_info,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "current_name": "print_formatted_file_info_00103ddc",
            "entrypoint": "0x00103ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103ddc": "print_formatted_file_info_00103ddc",
                "format_and_print_file_info_001079c0": "format_and_print_file_info",
                "param_1": "file_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103df9": {
            "additional_data": {
                "FUN_00103df9": {
                    "allocate_and_initialize_buffer": 1,
                    "ensure_buffer_stack": 28,
                    "ensure_yy_buffer_stack": 1,
                    "expand_buffer_stack": 1
                },
                "__size": {
                    "buffer_size": 18,
                    "new_size": 1,
                    "size": 5,
                    "total_size": 7
                },
                "bVar4": {
                    "byte_counter": 1,
                    "byte_flag": 3,
                    "byte_value": 4,
                    "byte_var": 4,
                    "counter": 1,
                    "flag": 10,
                    "is_loop_index": 1,
                    "is_negative": 1,
                    "is_zero": 3,
                    "loop_condition_variable": 1,
                    "loop_direction": 1,
                    "loop_flag": 1
                },
                "in_RCX": {
                    "input": 3,
                    "input_argument": 1,
                    "input_param": 1,
                    "input_parameter": 2,
                    "input_value": 2,
                    "result": 3,
                    "return_val": 1,
                    "return_value": 18
                },
                "lVar1": {
                    "counter": 3,
                    "index": 2,
                    "loop_count": 1,
                    "loop_counter": 23,
                    "loop_index": 1,
                    "loop_variable": 1
                },
                "lVar2": {
                    "new_buffer_size": 11,
                    "new_length": 1,
                    "new_size": 19
                },
                "print_error_message_and_exit_001033b0": {
                    "print_error_and_exit": 2,
                    "print_error_message_and_exit": 2
                },
                "puVar3": {
                    "buffer_pointer": 4,
                    "buffer_ptr": 19,
                    "current_element": 1,
                    "current_ptr": 2,
                    "ptr": 3,
                    "ptr_to_buffer": 1,
                    "ptr_to_data": 1
                }
            },
            "called": [
                "realloc",
                "calloc",
                "FUN_001033b0"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\nundefined8 ensure_yy_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_size = DAT_0010d580 + 8;\n    buffer_size = new_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)flag * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  print_error_and_exit(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "current_name": "ensure_yy_buffer_stack_00103df9",
            "entrypoint": "0x00103df9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103df9": "ensure_yy_buffer_stack_00103df9",
                "__size": "buffer_size",
                "bVar4": "flag",
                "in_RCX": "return_value",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "print_error_message_and_exit_001033b0": "print_error_and_exit",
                "puVar3": "buffer_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00103e95": {
            "additional_data": {
                "DAT_0010d538": {
                    "output_file": 1
                },
                "DAT_0010d540": {
                    "input_flag": 1
                },
                "DAT_0010d548": {
                    "plugin_file": 1
                },
                "DAT_0010d550": {
                    "current_action": 1
                },
                "DAT_0010d558": {
                    "archive_list": 1
                },
                "DAT_0010d588": {
                    "buffer_value": 1
                },
                "DAT_0010d590": {
                    "input_file": 1
                },
                "DAT_0010d5a8": {
                    "buffer_list": 1
                },
                "DAT_0010d5b0": {
                    "buffer_pointer": 1
                },
                "DAT_0010d5b8": {
                    "matching_buffer_pointer": 1
                },
                "DAT_0010d5c0": {
                    "matching_buffer_offset": 1
                },
                "DAT_0010d5c8": {
                    "matching_buffer_value": 1
                },
                "DAT_0010d5d0": {
                    "output_flag": 1
                },
                "DAT_0010d5d8": {
                    "yyoffset": 1
                },
                "FUN_00103e95": {
                    "extract_and_print_archive": 1,
                    "extract_and_print_archive_data": 1,
                    "extract_and_process_archive_script": 2,
                    "extract_archive_data": 1,
                    "extract_data_from_archive": 1,
                    "extract_data_from_binary": 2,
                    "improve_and_read_code": 1,
                    "parse_and_extract_data_from_binary": 1,
                    "process_archive_script": 5,
                    "process_script_function": 1
                },
                "UVar6": {
                    "unsigned_var27": 1
                },
                "auVar40": {
                    "array_of_undefined_chars": 1,
                    "array_var": 1,
                    "au_var40": 1,
                    "auto_var": 1,
                    "buffer_update_data": 1,
                    "exit_on_error_message": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var25": 1,
                    "temp_variable1": 1,
                    "temporary_variable": 1,
                    "undefined_array16": 1,
                    "undefined_array_var1": 1,
                    "undefined_array_var40": 1,
                    "undefined_au_var": 1,
                    "undefined_var": 1,
                    "undefined_var_array": 1,
                    "var40": 1
                },
                "auVar41": {
                    "array_of_undefined_chars": 1,
                    "array_var2": 1,
                    "au_var41": 1,
                    "auto_var": 1,
                    "buffer_update_data_temp": 1,
                    "realloc_return_value": 1,
                    "temp_var2": 2,
                    "temp_var26": 1,
                    "temp_variable2": 1,
                    "temporary_variable_2": 1,
                    "undefined_array16": 1,
                    "undefined_array_var2": 1,
                    "undefined_array_var41": 1,
                    "undefined_au_var2": 1,
                    "undefined_var2": 1,
                    "undefined_var_array": 1,
                    "var41": 1
                },
                "bVar28": {
                    "b_var28": 1,
                    "bool_var": 6,
                    "bool_var28": 1,
                    "boolean_var": 1,
                    "boolean_var28": 1,
                    "boolean_var3": 1,
                    "byte_boolean": 1,
                    "flag_variable": 1,
                    "found": 2,
                    "found_matching_indices": 1,
                    "found_value": 1,
                    "match_found": 1,
                    "matching_symbol_found": 1,
                    "temp_var22": 1,
                    "value_found": 1
                },
                "bVar30": {
                    "b_var30": 1,
                    "bool_var": 1,
                    "boolean_var2": 1,
                    "byte_boolean": 1,
                    "byte_var": 5,
                    "byte_var2": 1,
                    "byte_var30": 2,
                    "byte_var_2": 1,
                    "category": 1,
                    "check_char_code": 1,
                    "matching_symbol_index": 1,
                    "next_state": 1,
                    "temp_var23": 1,
                    "temp_variable13": 1,
                    "tmp_byte": 1,
                    "value_flag": 1
                },
                "bVar39": {
                    "b_var39": 1,
                    "boolean": 1,
                    "boolean_variable": 1,
                    "buffer_overflow_flag": 1,
                    "byte": 1,
                    "byte_var2": 1,
                    "byte_var3": 1,
                    "byte_var39": 2,
                    "byte_var_3": 1,
                    "flag": 1,
                    "loop_flag": 1,
                    "negative_condition": 1,
                    "null_byte": 1,
                    "temp_var24": 1,
                    "temp_variable14": 1
                },
                "cVar2": {
                    "action_code": 1,
                    "action_type": 1,
                    "char_var": 2,
                    "char_var2": 1,
                    "character": 3,
                    "character_var": 1,
                    "character_variable": 1,
                    "current_char": 4,
                    "current_character2": 1,
                    "modifier": 1
                },
                "iVar25": {
                    "action_iterator": 1,
                    "another_iteration_variable": 1,
                    "buffer_index": 1,
                    "current_int": 1,
                    "i_var25": 1,
                    "index_2": 1,
                    "index_var2": 1,
                    "int_var": 1,
                    "int_var2": 2,
                    "int_var25": 1,
                    "int_var3": 1,
                    "integer_var": 1,
                    "integer_var25": 1,
                    "integer_var3": 1,
                    "temp_index": 1,
                    "temp_var5": 1,
                    "temporary_integer": 1,
                    "tmp_value": 1,
                    "value_offset": 1
                },
                "iVar28": {
                    "is_found": 1
                },
                "iVar37": {
                    "action_index": 1,
                    "current_index": 1,
                    "current_int2": 1,
                    "i_var37": 1,
                    "int_var37": 1,
                    "integer_var37": 1,
                    "integer_var4": 1,
                    "modifier_flag": 1,
                    "value_index": 1
                },
                "iVar8": {
                    "buffer_length": 1,
                    "current_value_index": 1,
                    "i_var8": 1,
                    "index": 4,
                    "index_var": 1,
                    "int_value": 1,
                    "int_var": 4,
                    "int_var8": 1,
                    "integer": 2,
                    "integer_var": 1,
                    "integer_var5": 1,
                    "integer_var8": 1,
                    "integer_variable": 1,
                    "loop_counter": 1
                },
                "iVar9": {
                    "action": 1,
                    "buffersize": 1,
                    "conversion_mode": 1,
                    "error_code": 1,
                    "i_var9": 1,
                    "int_var": 1,
                    "int_var2": 1,
                    "int_var9": 1,
                    "integer": 1,
                    "integer_var": 1,
                    "integer_var2": 1,
                    "integer_var9": 1,
                    "integer_variable": 1,
                    "iteration_variable": 1,
                    "temp_var4": 1
                },
                "lVar17": {
                    "buffer_data_length": 1,
                    "copy_count": 1,
                    "current_index": 1,
                    "l_var17": 1,
                    "length": 1,
                    "long": 1,
                    "long_var": 6,
                    "long_var1": 1,
                    "long_var17": 2,
                    "long_var3": 1,
                    "long_variable": 1,
                    "loop_counter": 1,
                    "temp_var14": 1,
                    "temp_variable3": 1
                },
                "lVar18": {
                    "count": 1,
                    "counter": 1,
                    "current_index": 3,
                    "current_value": 1,
                    "iter": 1,
                    "l_var18": 1,
                    "long": 1,
                    "long_var": 3,
                    "long_var12": 1,
                    "long_var18": 2,
                    "long_var2": 2,
                    "long_var4": 1,
                    "long_variable": 1,
                    "new_current_long": 1,
                    "temp_var8": 1,
                    "temp_variable4": 1,
                    "value": 1,
                    "var_counter": 1
                },
                "lVar19": {
                    "temp_var17": 1
                },
                "lVar21": {
                    "buffer_size": 1,
                    "buffer_size_copy": 1,
                    "buffer_size_temp": 1,
                    "current_index3": 1,
                    "current_length": 1,
                    "l_var21": 1,
                    "last_buffer_position": 1,
                    "length": 2,
                    "long": 1,
                    "long_var": 3,
                    "long_var21": 2,
                    "long_var3": 3,
                    "long_var5": 1,
                    "long_variable": 1,
                    "position": 1,
                    "temp_var15": 1,
                    "temp_variable7": 1
                },
                "lVar3": {
                    "temp_var20": 1
                },
                "lVar31": {
                    "buffer_copy_size": 2,
                    "buffer_length": 1,
                    "copy_size": 1,
                    "current_long2": 1,
                    "i": 1,
                    "l_var18_bytes": 1,
                    "l_var31": 1,
                    "length_2": 1,
                    "long_var": 2,
                    "long_var31": 2,
                    "long_var4": 2,
                    "long_var5": 1,
                    "long_var7": 1,
                    "long_variable": 1,
                    "new_length": 1,
                    "temp_var9": 1,
                    "temp_variable15": 1,
                    "tmp_length": 1
                },
                "lVar4": {
                    "temp_var21": 1
                },
                "lVar5": {
                    "temp_var16": 1
                },
                "lVar6": {
                    "temp_var19": 1
                },
                "lVar7": {
                    "temp_var18": 1
                },
                "local_678": {
                    "archive_data": 1,
                    "archive_file_names": 1,
                    "archive_files_buffer": 1,
                    "buffer_stack": 1,
                    "char_array": 1,
                    "char_array_ptr_var": 1,
                    "file_buffer_list": 1,
                    "file_path_array": 1,
                    "filenames": 1,
                    "line_buffer": 1,
                    "local_array": 1,
                    "local_array_of_pointers_to_characters": 1,
                    "local_char_array_678": 1,
                    "local_char_array_pointer": 1,
                    "local_char_pointer_array": 2,
                    "local_character_array2": 1,
                    "local_character_pointer_array201": 1,
                    "local_string_array": 3,
                    "new_buffer": 1,
                    "string_array2": 1
                },
                "local_740": {
                    "archive_data": 1,
                    "archive_script": 1,
                    "buffer": 3,
                    "buffer1": 1,
                    "char_array_var": 1,
                    "filename_buffer": 2,
                    "local_array": 1,
                    "local_array_of_characters": 1,
                    "local_char_740": 1,
                    "local_char_array": 3,
                    "local_character_array": 1,
                    "local_character_array1": 1,
                    "local_character_array200": 1,
                    "local_string1": 1,
                    "local_string3": 1,
                    "message_buffer": 1,
                    "output_string_buffer": 1
                },
                "local_7d0": {
                    "current_file_stat": 1,
                    "current_stat": 1,
                    "file_stat2": 1,
                    "file_stats": 1,
                    "file_status": 1,
                    "local_stat": 5,
                    "local_stat_7d0": 1,
                    "local_stat_struct": 1,
                    "local_stat_var": 1,
                    "local_stat_variable": 1,
                    "stat_buffer": 2,
                    "stat_struct_var": 1,
                    "stat_var": 1
                },
                "local_7f8": {
                    "byte_buffer": 1,
                    "byte_pointer10": 1,
                    "byte_pointer4": 1,
                    "byte_var3": 1,
                    "comp_value_ptr": 1,
                    "current_byte_buffer": 1,
                    "current_char": 1,
                    "current_output_index": 1,
                    "current_pointer": 1,
                    "file_position": 1,
                    "found_position": 1,
                    "local_byte_pointer": 2,
                    "local_byte_pointer1": 3,
                    "local_byte_var_pointer": 1,
                    "local_pointer_byte_7f8": 1,
                    "local_pointer_to_byte": 3,
                    "local_unsigned_byte_pointer": 1,
                    "value_pointer": 1
                },
                "local_7fc": {
                    "comp_value_index": 1,
                    "current_file_index": 1,
                    "current_flag": 1,
                    "current_line": 1,
                    "current_state": 1,
                    "index": 1,
                    "local_u_int": 1,
                    "local_uint": 1,
                    "local_uint1": 1,
                    "local_uint_7fc": 1,
                    "local_uint_var": 1,
                    "local_uint_variable": 1,
                    "local_unsigned1": 1,
                    "local_unsigned_int_variable": 1,
                    "local_unsigned_integer": 1,
                    "local_unsigned_var": 2,
                    "num_values": 1,
                    "optional_flag": 1,
                    "status": 1,
                    "uint_var3": 1,
                    "uint_var5": 1,
                    "value_counter": 1
                },
                "local_800": {
                    "archive_count": 1,
                    "archive_files_count": 1,
                    "buffer_stack_size": 1,
                    "command_stack_pointer": 1,
                    "count": 1,
                    "counter_var": 1,
                    "current_index": 1,
                    "extracted_files_count": 1,
                    "file_count": 1,
                    "int_var4": 1,
                    "local_code_variable": 1,
                    "local_int": 1,
                    "local_int1": 1,
                    "local_int_800": 1,
                    "local_int_var": 1,
                    "local_integer": 4,
                    "local_integer_var": 1,
                    "local_integer_variable": 1,
                    "num_lines": 1,
                    "output_buffer_count": 1,
                    "stack_size": 1
                },
                "local_810": {
                    "archive_buffers_arr": 1,
                    "buffer": 1,
                    "buffer_stack": 3,
                    "buffer_stack_pointer": 1,
                    "char_pointer_pointer3": 1,
                    "current_file_paths": 1,
                    "file_list": 1,
                    "line_list": 1,
                    "local_char_var_pointer": 1,
                    "local_character_pointer3": 1,
                    "local_double_pointer": 2,
                    "local_double_pointer_char_810": 1,
                    "local_double_pointer_to_char": 1,
                    "local_pointer_to_pointer_to_char": 1,
                    "local_pointer_to_pointer_to_character": 1,
                    "local_stack_buffer": 1,
                    "local_string_pointer_array": 1,
                    "local_string_pointers": 1,
                    "output_buffer_ptr_pointer": 1,
                    "output_files": 1,
                    "script_buffer": 1,
                    "string_array": 1,
                    "string_pointer_var_array": 1
                },
                "local_818": {
                    "arr_size": 1,
                    "buffer_length": 1,
                    "buffer_max_size": 1,
                    "buffer_size": 9,
                    "local_buffer_length": 1,
                    "local_long": 3,
                    "local_long1": 2,
                    "local_long_818": 1,
                    "local_long_var": 3,
                    "local_long_variable": 1,
                    "long_var2": 1,
                    "output_buffer_size": 1,
                    "output_string_size": 1
                },
                "local_820": {
                    "buffer": 3,
                    "buffer_pointer": 1,
                    "buffer_pointer2": 1,
                    "buffer_ptr": 1,
                    "buffer_start": 1,
                    "current_arr_ptr": 1,
                    "current_buffer_location": 1,
                    "current_buffer_pointer": 1,
                    "current_output_string": 1,
                    "local_char_var_pointer": 1,
                    "local_character_pointer": 1,
                    "local_character_pointer2": 1,
                    "local_initial_buffer_ptr": 1,
                    "local_pointer_char_820": 1,
                    "local_pointer_character": 1,
                    "local_pointer_to_char": 2,
                    "local_pointer_to_character": 1,
                    "local_string2": 1,
                    "local_string_pointer2": 1,
                    "output_buffer_ptr": 1,
                    "output_buffer_start_ptr": 1,
                    "script_buffer": 1,
                    "string_var2": 1
                },
                "local_828": {
                    "buffer": 2,
                    "buffer_pointer": 1,
                    "char_arr_ptr": 1,
                    "current_buffer_pointer": 1,
                    "current_buffer_position": 1,
                    "current_char": 1,
                    "current_char_pointer": 1,
                    "current_filename": 1,
                    "local_buffer_ptr": 1,
                    "local_char_var_pointer": 1,
                    "local_character_pointer": 1,
                    "local_character_pointer1": 1,
                    "local_pointer_char_828": 1,
                    "local_pointer_character": 1,
                    "local_pointer_to_char": 2,
                    "local_pointer_to_character": 1,
                    "local_string1": 1,
                    "local_string_pointer1": 1,
                    "output_buffer": 1,
                    "output_buffer_ptr": 1,
                    "output_string": 1,
                    "script_position": 1,
                    "string_var3": 1
                },
                "local_830": {
                    "temp_buffer": 1
                },
                "nVar24": {
                    "new_size": 1
                },
                "nVar37": {
                    "flag": 1
                },
                "nVar8": {
                    "var8": 1
                },
                "nVar9": {
                    "var9": 1
                },
                "pFVar4": {
                    "current_archive": 2,
                    "current_archive_file": 1,
                    "current_file": 6,
                    "file_pointer": 7,
                    "file_ptr": 1,
                    "file_ptr2": 1,
                    "pointer_file_var4": 1,
                    "pointer_to_file": 4
                },
                "pbVar30": {
                    "prefix": 1
                },
                "pbVar32": {
                    "buffer": 2,
                    "buffer_ptr_copy": 1,
                    "byte_pointer": 2,
                    "byte_pointer1": 1,
                    "byte_pointer2": 1,
                    "byte_pointer5": 1,
                    "byte_ptr_2": 1,
                    "current_buffer": 2,
                    "current_pointer": 1,
                    "new_byte_pointer1": 1,
                    "old_string": 1,
                    "pointer_byte_var32": 1,
                    "pointer_to_byte": 3,
                    "ptr_buffer_var": 1,
                    "script_buffer": 1,
                    "start_position": 1
                },
                "pbVar33": {
                    "buffer_ptr_copy_offset": 1,
                    "byte_pointer": 1,
                    "byte_pointer2": 2,
                    "byte_pointer3": 2,
                    "byte_ptr_3": 1,
                    "current_buffer_ptr": 1,
                    "matching_buffer": 1,
                    "matching_symbol_ptr": 1,
                    "matching_value_indices": 1,
                    "new_byte_pointer2": 1,
                    "pointer_byte_var33": 1,
                    "pointer_to_byte": 3,
                    "ptr_buffer_var2": 1,
                    "temp_pointer7": 1,
                    "temp_string": 1
                },
                "pbVar35": {
                    "buffer_end": 1,
                    "buffer_ptr_current": 1,
                    "byte_pointer": 1,
                    "byte_pointer3": 2,
                    "byte_pointer4": 1,
                    "byte_pointer9": 1,
                    "byte_ptr_4": 1,
                    "byte_var2": 1,
                    "current_output_buffer": 1,
                    "current_symbol_ptr": 1,
                    "file_data": 1,
                    "new_byte_pointer3": 1,
                    "pb_var36": 1,
                    "pointer_byte_var35": 1,
                    "pointer_to_byte": 3,
                    "position": 1,
                    "temp_pointer8": 1
                },
                "pbVar39": {
                    "b_var_ptr": 1,
                    "byte_var": 3,
                    "pointer_to_byte": 1
                },
                "pbVar7": {
                    "buffer_data": 1,
                    "byte_pointer": 6,
                    "byte_ptr": 2,
                    "byte_var": 1,
                    "current_char": 2,
                    "file_data_ptr": 1,
                    "output_buffer": 1,
                    "pointer_byte_var7": 1,
                    "pointer_to_byte": 4,
                    "temp_pointer": 1,
                    "temp_pointer6": 1
                },
                "pbppcVar29": {
                    "file_paths": 1
                },
                "pcFileName": {
                    "path": 1
                },
                "pcVar10": {
                    "char_var": 1,
                    "char_var2": 1,
                    "character_pointer": 1,
                    "character_pointer17": 1,
                    "error_message": 8,
                    "error_string": 2,
                    "file_name": 1,
                    "message": 1,
                    "pointer_char_var10": 1,
                    "pointer_character": 1,
                    "pointer_to_char": 3,
                    "pointer_to_character": 1,
                    "string_var": 2,
                    "string_var1": 1
                },
                "pcVar15": {
                    "buffer_start": 1,
                    "char_var": 1,
                    "char_var3": 1,
                    "character_pointer": 1,
                    "character_pointer12": 1,
                    "copy_source": 1,
                    "current_char": 1,
                    "file": 1,
                    "file_name_var": 1,
                    "filename1": 1,
                    "module_file": 2,
                    "pointer_char_var15": 1,
                    "pointer_character": 1,
                    "pointer_to_char": 3,
                    "pointer_to_character": 1,
                    "string": 1,
                    "string_var2": 2,
                    "temp_pointer3": 1,
                    "temp_var12": 1
                },
                "pcVar16": {
                    "buffer_end": 1,
                    "char_var": 1,
                    "char_var4": 1,
                    "character_pointer": 1,
                    "character_pointer14": 1,
                    "copy_dest": 1,
                    "filename2": 1,
                    "new_buffer": 1,
                    "new_file": 1,
                    "new_file_name_var": 1,
                    "output_string": 1,
                    "pointer_char_var16": 1,
                    "pointer_character": 1,
                    "pointer_to_char": 3,
                    "pointer_to_character": 1,
                    "string_ptr": 1,
                    "string_var3": 2,
                    "temp_buffer": 1,
                    "temp_pointer4": 1,
                    "temp_var13": 1
                },
                "piVar34": {
                    "buffer_index": 1,
                    "counter": 1,
                    "file_error_ptr": 1,
                    "file_pointer": 1,
                    "index_pointer": 1,
                    "int_pointer": 3,
                    "int_pointer_var": 1,
                    "int_ptr": 1,
                    "int_var_pointer": 1,
                    "integer_pointer": 1,
                    "new_int_pointer": 1,
                    "pointer_int_var34": 1,
                    "pointer_to_int": 1,
                    "pointer_to_integer": 1,
                    "pointer_to_integer_var34": 1,
                    "temp_pointer12": 1
                },
                "plDataSize": {
                    "data_size": 1
                },
                "plVar12": {
                    "buffer_ptr": 2,
                    "buffer_stack": 1,
                    "current_archive_entry": 1,
                    "current_buffer": 1,
                    "current_buffer_list_entry": 1,
                    "file_pointer": 1,
                    "long_pointer": 1,
                    "long_pointer2": 1,
                    "long_var": 1,
                    "long_var2": 1,
                    "pointer_to_long": 4,
                    "pointer_var12": 1,
                    "ptr_buffer_list": 1
                },
                "plVar5": {
                    "archive_data": 1,
                    "buffer": 1,
                    "buffer_list_entry": 1,
                    "current_archive_entry_data": 1,
                    "current_buffer": 2,
                    "current_file_ptr": 1,
                    "current_long": 1,
                    "file_buffer": 1,
                    "long_pointer": 4,
                    "long_pointer3": 1,
                    "long_ptr": 1,
                    "long_var": 2,
                    "pointer_to_long": 4,
                    "pointer_var": 1,
                    "pointer_var5": 1,
                    "ptr_buffer": 1,
                    "temp_pointer": 1,
                    "temp_ptr2": 1
                },
                "ppFVar3": {
                    "archive_files": 1,
                    "archive_files_arr": 1,
                    "archive_script_file": 1,
                    "double_pointer_file_var3": 1,
                    "double_pointer_pointer": 5,
                    "double_pointer_to_file": 1,
                    "file": 1,
                    "file_pointer": 1,
                    "file_pointer_pointer": 1,
                    "file_pointers": 3,
                    "file_ptr": 2,
                    "opened_archives": 1,
                    "pointer_to_pointer_to_file": 3,
                    "stdin_ptr": 1
                },
                "ppcVar27": {
                    "archive_files": 3,
                    "archived_filenames": 1,
                    "char_pointer_pointer": 1,
                    "char_ptr_ptr": 1,
                    "character_pointer_pointer": 1,
                    "double_char_pointer": 1,
                    "double_pointer_char_var27": 1,
                    "filenames": 1,
                    "pointer_pointer": 1,
                    "pointer_to_pointer_to_char": 2,
                    "string_pointer_pointer1": 1,
                    "string_pointers1": 1,
                    "string_ptr_ptr": 1,
                    "temp_archive": 1,
                    "temp_pointer9": 1
                },
                "ppcVar29": {
                    "char_ptr_ptr_2": 1,
                    "command_stack": 1,
                    "current_archive": 1,
                    "current_file": 1,
                    "double_pointer_to_char": 1,
                    "extracted_files": 1,
                    "file_list": 3,
                    "file_paths": 1,
                    "pointer_pointer2": 1,
                    "pointer_to_pointer_to_char": 1,
                    "script_stack": 1,
                    "stack_ptr": 1,
                    "string_pointer_pointer2": 1,
                    "string_pointers2": 1,
                    "temp_pointer10": 1,
                    "temp_pointers": 1
                },
                "ppcVar38": {
                    "char_pointer_pointer2": 1,
                    "char_ptr_ptr_3": 1,
                    "current_command": 1,
                    "current_filename": 1,
                    "double_pointer_char_var38": 1,
                    "double_pointer_to_char": 1,
                    "new_string_pointers": 1,
                    "output_file": 1,
                    "output_file_path": 1,
                    "pointer_to_pointer_to_char": 1,
                    "temp_pointer11": 1
                },
                "pplVar1": {
                    "archive_buffers": 1,
                    "archive_files": 1,
                    "double_pointer": 6,
                    "pointer_pointer_var1": 1,
                    "pointer_to_char2_d_array": 1,
                    "pointer_to_pointer": 2
                },
                "pppcVar38": {
                    "ppc_var39": 1
                },
                "ppuVar23": {
                    "pbuffer": 1
                },
                "ppvVar29": {
                    "file_list": 1
                },
                "puVar10": {
                    "file": 1
                },
                "puVar22": {
                    "buffer_allocation": 1,
                    "buffer_pointer": 3,
                    "buffer_position": 1,
                    "buffer_ptr": 1,
                    "file_buffer": 1,
                    "pointer": 1,
                    "pointer_to_u_var11": 1,
                    "pointer_to_unsigned": 1,
                    "pointer_to_unsigned_var22": 1,
                    "pointer_undefined_var22": 1,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "pointer_var2": 1,
                    "ptr": 1,
                    "temp_pointer1": 1,
                    "temp_var1": 1,
                    "u_ptr1": 1,
                    "ulong_var_pointer": 1,
                    "undefined_var_pointer": 1,
                    "unsigned_long_pointer23": 1
                },
                "puVar23": {
                    "buffer_allocation_end": 1,
                    "buffer_stack": 1,
                    "file_buffer_next": 1,
                    "output_files_ptr": 1,
                    "pointer_2": 1,
                    "pointer_to_u_var11": 1,
                    "pointer_to_unsigned": 1,
                    "pointer_to_unsigned_var23": 1,
                    "pointer_undefined_var23": 1,
                    "pointer_var2": 2,
                    "pointer_var3": 1,
                    "ptr2": 1,
                    "temp_buffer_position": 1,
                    "temp_pointer2": 2,
                    "temp_var2": 1,
                    "u_ptr2": 1,
                    "ulong_var_pointer2": 1,
                    "undefined_var_pointer": 1,
                    "unsigned_long_pointer22": 1
                },
                "puuVar22": {
                    "buffer_stack_ptr": 1
                },
                "puuVar5": {
                    "sub_value_indices": 1
                },
                "pvVar14": {
                    "allocated_memory": 1,
                    "buffer_pointer": 1,
                    "pointer_to_void": 4,
                    "pointer_var": 1,
                    "pointer_var14": 1,
                    "ptr_buffer": 1,
                    "temp_pointer": 1,
                    "temp_pointer5": 1,
                    "temp_ptr": 1,
                    "temp_var11": 1,
                    "temporary_pointer": 1,
                    "void_pointer": 5,
                    "void_var": 1
                },
                "sVar13": {
                    "bytes_read": 2,
                    "read_bytes": 3,
                    "read_count": 1,
                    "s_var13": 1,
                    "size": 2,
                    "size_t_var": 1,
                    "size_t_var13": 1,
                    "size_var": 3,
                    "size_var13": 1,
                    "size_variable": 2,
                    "sized_var": 1,
                    "temp_var10": 1,
                    "temp_variable10": 1,
                    "temporary_size": 1
                },
                "stat": {
                    "file_stat": 1
                },
                "uVar11": {
                    "archive_file_path": 1,
                    "buffer_copy": 1,
                    "buffer_pointer_temp": 1,
                    "current_input_file": 1,
                    "file_parameter": 1,
                    "file_string": 1,
                    "module_file": 1,
                    "temp_var3": 1,
                    "temp_variable": 1,
                    "u_var11": 1,
                    "uint_var2": 1,
                    "undefined8": 1,
                    "undefined_var": 1,
                    "undefined_var11": 1,
                    "unsigned_var": 1,
                    "unsigned_var11": 1,
                    "unsigned_var39": 1,
                    "unsigned_variable": 1
                },
                "uVar19": {
                    "archive_value_type": 1,
                    "current_u_int": 1,
                    "index": 2,
                    "matching_indices": 1,
                    "matching_value_index": 1,
                    "temp_variable5": 1,
                    "u_var19": 2,
                    "uint_var": 1,
                    "ulong_var": 4,
                    "ulong_var1": 1,
                    "ulong_var19": 1,
                    "unsigned_var19": 1,
                    "unsigned_var3": 1,
                    "value_index": 2
                },
                "uVar20": {
                    "action": 1,
                    "current_value_index": 1,
                    "modifier_index": 1,
                    "new_current_u_int": 1,
                    "next_value_index": 1,
                    "temp_var6": 1,
                    "temp_variable6": 1,
                    "u_var20": 2,
                    "uint_var": 2,
                    "uint_var1": 1,
                    "uint_var20": 1,
                    "uint_var3": 1,
                    "uint_var_2": 1,
                    "unsigned_var20": 1,
                    "unsigned_var8": 1,
                    "value": 1,
                    "value_index": 2,
                    "var20": 1
                },
                "uVar24": {
                    "buffer_bytes_left": 1,
                    "buffer_size_temp": 1,
                    "copy_length": 1,
                    "current_index2": 1,
                    "current_u_int2": 1,
                    "file_size": 1,
                    "remaining_value_count": 1,
                    "temp_var7": 1,
                    "temp_variable8": 1,
                    "u_var24": 1,
                    "uint_var": 1,
                    "uint_var2": 2,
                    "uint_var24": 1,
                    "uint_var4": 1,
                    "uint_var_3": 1,
                    "unsigned_var": 1,
                    "unsigned_var24": 1,
                    "unsigned_var31": 1,
                    "value_size": 1,
                    "var24": 1
                },
                "uVar26": {
                    "buffer_iterator": 1,
                    "copy_count": 1,
                    "current_index": 1,
                    "current_index_copy": 1,
                    "current_u_int3": 1,
                    "modifier_index": 1,
                    "temp_variable9": 1,
                    "tmp_index": 1,
                    "u_var26": 2,
                    "ulong_var": 2,
                    "ulong_var2": 4,
                    "ulong_var26": 1,
                    "unsigned_var": 1,
                    "unsigned_var26": 1,
                    "unsigned_var9": 1,
                    "value2": 1
                },
                "uVar36": {
                    "current_index_copy_size": 1,
                    "file_char": 1,
                    "index_value": 1,
                    "new_current_u_int2": 1,
                    "u_var36": 2,
                    "uint_var36": 1,
                    "unsigned_var36": 1,
                    "unsigned_var7": 1
                },
                "uVar6": {
                    "buffer_size": 1,
                    "buffer_var": 1,
                    "param_buffer": 1,
                    "u_var6": 1,
                    "u_variable": 1,
                    "uint_var": 1,
                    "undefined8": 1,
                    "undefined_var": 1,
                    "undefined_var6": 1,
                    "unsigned_var": 2,
                    "unsigned_var38": 1,
                    "unsigned_var6": 1,
                    "unsigned_variable": 1,
                    "value": 1,
                    "var6": 2
                }
            },
            "called": [
                "getc",
                "FUN_00103c60",
                "xstrdup",
                "ferror",
                "free",
                "FUN_001033b0",
                "malloc",
                "FUN_0010300e",
                "bfd_set_format",
                "FUN_001032a8",
                "dup",
                "FUN_00103ddc",
                "FUN_001030ed",
                "bfd_openw",
                "FUN_0010315d",
                "FUN_00103df9",
                "fprintf",
                "clearerr",
                "fwrite",
                "printf",
                "dcgettext",
                "filename_cmp",
                "stat",
                "fopen",
                "realloc",
                "bfd_openr",
                "FUN_0010312d",
                "FUN_001033d6",
                "bfd_close",
                "fclose",
                "FUN_00107740",
                "FUN_00105bc0",
                "FUN_001031cf",
                "unlink",
                "bfd_cache_close",
                "FUN_00105300",
                "fread",
                "FUN_001031a5",
                "FUN_00103ba8",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid extract_and_process_archive_script_00103e95(void)\n\n{\n  long **double_pointer;\n  char current_char;\n  FILE **double_pointer_pointer;\n  FILE *file_pointer;\n  long *pointer_to_long;\n  undefined8 var6;\n  byte *byte_pointer;\n  int index;\n  char *error_message;\n  undefined8 unsigned_var11;\n  int error_code;\n  long *pointer_to_long;\n  size_t size_var;\n  void *void_pointer;\n  char *pointer_to_char;\n  char *pointer_to_char;\n  long long_var;\n  long current_index;\n  ulong ulong_var;\n  uint uint_var;\n  long long_var3;\n  undefined8 *buffer_pointer;\n  undefined8 *temp_pointer2;\n  uint uint_var2;\n  int int_var2;\n  ulong ulong_var2;\n  char **archive_files;\n  bool bool_var;\n  char **file_list;\n  byte byte_var;\n  long long_var4;\n  byte *pointer_to_byte;\n  byte *pointer_to_byte;\n  int *int_pointer;\n  byte *pointer_to_byte;\n  uint u_var36;\n  int int_var37;\n  char **char_ptr_ptr_3;\n  byte byte_var39;\n  undefined temporary_variable [16];\n  undefined temp_var2 [16];\n  char *buffer;\n  char *buffer;\n  long buffer_size;\n  char **buffer_stack;\n  int local_integer;\n  uint local_unsigned_var;\n  byte *local_pointer_to_byte;\n  file_stat local_stat;\n  char local_char_array [200];\n  char *local_string_array [201];\n  \n  byte_var39 = 0;\n  current_index = 0;\n  DAT_0010d550 = -2;\n  file_list = local_string_array;\n  local_integer = 0;\n  buffer = local_char_array;\n  buffer_size = 200;\n  buffer = buffer;\n  buffer_stack = file_list;\nLAB_00103ee9:\n  *buffer = (char)current_index;\n  if (buffer + buffer_size + -1 <= buffer) {\n    long_var3 = (long)buffer - (long)buffer;\n    long_var = long_var3 + 1;\n    if (buffer_size < 10000) {\n      long_var4 = buffer_size * 2;\n      buffer_size = 10000;\n      if (long_var4 < 0x2711) {\n        buffer_size = long_var4;\n      }\n      error_message = (char *)malloc(buffer_size * 9 + 7);\n      if (error_message != (char *)0x0) {\n        long_var4 = long_var * 8;\n        pointer_to_char = buffer;\n        pointer_to_char = error_message;\n        for (; long_var != 0; long_var = long_var + -1) {\n          *pointer_to_char = *pointer_to_char;\n          pointer_to_char = pointer_to_char + (ulong)byte_var39 * -2 + 1;\n          pointer_to_char = pointer_to_char + (ulong)byte_var39 * -2 + 1;\n        }\n        char_ptr_ptr_3 = (char **)(error_message + buffer_size);\n        file_list = char_ptr_ptr_3;\n        for (; long_var4 != 0; long_var4 = long_var4 + -1) {\n          *(undefined *)file_list = *(undefined *)buffer_stack;\n          buffer_stack = (char **)((long)buffer_stack + (ulong)byte_var39 * -2 + 1);\n          file_list = (char **)((long)file_list + (ulong)byte_var39 * -2 + 1);\n        }\n        if (buffer != local_char_array) {\n          free(buffer);\n        }\n        buffer = error_message + long_var3;\n        file_list = char_ptr_ptr_3 + long_var3;\n        buffer = error_message;\n        buffer_stack = char_ptr_ptr_3;\n        if (error_message + buffer_size + -1 <= buffer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_archive_script_syntax_error_001031a5();\nLAB_0010524c:\n    error_message = buffer;\n    if (buffer == local_char_array) {\n      return;\n    }\nLAB_00105265:\n    free(error_message);\n    return;\n  }\nLAB_00103fd8:\n  int_var37 = (int)current_index;\n  if (int_var37 == 3) goto LAB_0010524c;\n  current_char = (&DAT_0010a200)[int_var37];\n  if (current_char != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_yy_buffer_stack_00103df9();\n          buffer_pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          unsigned_var11 = create_buffer_from_params_001033d6(DAT_0010d590);\n          *buffer_pointer = unsigned_var11;\n        }\n        extract_data_from_binary_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pointer_to_byte = DAT_0010d5b0;\n      pointer_to_byte = DAT_0010d5b0;\n      uint_var = DAT_0010d5d0;\nLAB_001040d4:\n      ulong_var = (ulong)uint_var;\n      ulong_var2 = (ulong)local_unsigned_var;\n      bool_var = false;\n      do {\n        byte_var = (&DAT_0010ab00)[*pointer_to_byte];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong_var * 2) != 0) {\n          bool_var = true;\n          ulong_var2 = ulong_var & 0xffffffff;\n          local_pointer_to_byte = pointer_to_byte;\n        }\n        while( true ) {\n          index = (int)ulong_var;\n          current_index = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)index * 2) + (uint)byte_var);\n          if (index == *(short *)(&DAT_0010a440 + current_index * 2)) break;\n          ulong_var = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)index * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)index * 2)) {\n            byte_var = (&DAT_0010a7c0)[(int)(uint)byte_var];\n          }\n        }\n        pointer_to_byte = pointer_to_byte + 1;\n        ulong_var = (ulong)*(short *)(&DAT_0010a240 + current_index * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong_var * 2) != 0xc2);\n      local_unsigned_var = (uint)ulong_var2;\n      pointer_to_byte = pointer_to_byte;\n      if (bool_var) {\n        DAT_0010d5b8 = local_pointer_to_byte;\n        DAT_0010d5c0 = local_unsigned_var;\n      }\nLAB_0010419f:\n      index = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong_var * 2);\n      if (index == 0) {\n        index = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pointer_to_byte = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pointer_to_byte - (int)pointer_to_byte;\n      DAT_0010d588 = *pointer_to_byte;\n      DAT_0010d5b0 = pointer_to_byte;\n      DAT_0010d5c8 = pointer_to_byte;\n      *pointer_to_byte = 0;\nLAB_001041f0:\n      pointer_to_byte = DAT_0010d5c8;\n      current_index = DAT_0010d5a0;\n      switch(index) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_error_message_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      current_index = (long)int_var37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        int_var37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          int_var37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    int_var37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint_var = current_char + int_var37;\n    if ((0x22 < uint_var) || (int_var37 != (char)(&DAT_0010a0a0)[(int)uint_var])) goto LAB_001049db;\n    current_char = (&DAT_0010a060)[(int)uint_var];\n    current_index = (long)current_char;\n    if (current_char < '\\x01') {\n      int_var37 = -(int)current_char;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_integer = local_integer + -1 + (uint)(local_integer == 0);\n    file_list = file_list + 1;\n    *file_list = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  int_var37 = (int)(char)(&DAT_0010a020)[(int)current_index];\n  if ((&DAT_0010a020)[(int)current_index] == '\\0') {\n    if (local_integer == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_archive_script_syntax_error_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[current_index] != -0xe) &&\n             (uint_var = (int)(char)(&DAT_0010a200)[current_index] + 1, uint_var < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint_var] == '\\x01')) &&\n           (current_index = (long)(char)(&DAT_0010a060)[(int)uint_var],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint_var])) goto LAB_00105227;\n        if (buffer == buffer) goto LAB_0010524c;\n        buffer = buffer + -1;\n        file_list = file_list + -1;\n        current_index = (long)*buffer;\n      } while( true );\n    }\n    if (local_integer != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsigned_var11 = DAT_0010d660;\n  archive_files = DAT_0010d558;\n  current_char = (&DAT_00109fe0)[int_var37];\n  char_ptr_ptr_3 = (char **)file_list[1 - current_char];\n  switch(int_var37) {\n  case 2:\n  case 6:\n    print_ar_message_if_not_zero_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_archive_script_syntax_error_001031a5();\n    break;\n  case 0x17:\n    buffer_pointer = (undefined8 *)*file_list;\n    if (DAT_0010d558 == (char **)0x0) {\n      error_message = \"%s: no open archive\\n\";\nLAB_00104b62:\n      error_message = (char *)dcgettext(0,error_message,5);\n      fprintf(_stderr,error_message,unsigned_var11);\n      check_and_exit_if_flag_zero_0010315d();\n    }\n    else {\n      for (; buffer_pointer != (undefined8 *)0x0; buffer_pointer = (undefined8 *)buffer_pointer[1]) {\n        for (temp_pointer2 = (undefined8 *)DAT_0010d558[0x1f]; temp_pointer2 != (undefined8 *)0x0;\n            temp_pointer2 = (undefined8 *)temp_pointer2[0x1e]) {\n          index = filename_cmp(*temp_pointer2);\n          if (index == 0) {\n            extract_and_print_archive_member_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*buffer_pointer,0);\n        var6 = DAT_0010d660;\n        unsigned_var11 = *buffer_pointer;\n        error_message = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,error_message,var6,unsigned_var11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    buffer_pointer = (undefined8 *)*file_list;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      error_message = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; buffer_pointer != (undefined8 *)0x0; buffer_pointer = (undefined8 *)buffer_pointer[1]) {\n      bool_var = false;\n      archive_files = DAT_0010d558 + 0x1f;\n      for (error_message = DAT_0010d558[0x1f]; error_message != (char *)0x0;\n          error_message = *(char **)(error_message + 0xf0)) {\n        index = filename_cmp();\n        if (index == 0) {\n          pointer_to_char = (char *)bfd_openr(*buffer_pointer,0);\n          unsigned_var11 = DAT_0010d660;\n          if (pointer_to_char == (char *)0x0) {\n            var6 = *buffer_pointer;\n            pointer_to_char = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointer_to_char,unsigned_var11,var6);\n            check_and_exit_if_flag_zero_0010315d();\n          }\n          else {\n            *archive_files = pointer_to_char;\n            bool_var = true;\n            *(undefined8 *)(pointer_to_char + 0xf0) = *(undefined8 *)(error_message + 0xf0);\n          }\n        }\n        else {\n          archive_files = (char **)(error_message + 0xf0);\n        }\n      }\n      if (!bool_var) {\n        error_message = (char *)bfd_openr(*buffer_pointer,0);\n        var6 = DAT_0010d660;\n        unsigned_var11 = *buffer_pointer;\n        pointer_to_char = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_char,var6,unsigned_var11);\n        unsigned_var11 = DAT_0010d660;\n        if (error_message == (char *)0x0) {\n          var6 = *buffer_pointer;\n          error_message = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,error_message,unsigned_var11,var6);\n          check_and_exit_if_flag_zero_0010315d();\n        }\n        else {\n          *archive_files = error_message;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    buffer_pointer = (undefined8 *)*file_list;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; buffer_pointer != (undefined8 *)0x0; buffer_pointer = (undefined8 *)buffer_pointer[1]) {\n      bool_var = false;\n      archive_files = DAT_0010d558 + 0x1f;\n      for (temp_pointer2 = (undefined8 *)DAT_0010d558[0x1f]; unsigned_var11 = DAT_0010d660,\n          temp_pointer2 != (undefined8 *)0x0; temp_pointer2 = (undefined8 *)temp_pointer2[0x1e]) {\n        index = filename_cmp(*temp_pointer2,*buffer_pointer);\n        if (index == 0) {\n          bool_var = true;\n          *archive_files = (char *)temp_pointer2[0x1e];\n        }\n        else {\n          archive_files = (char **)(temp_pointer2 + 0x1e);\n        }\n      }\n      if (!bool_var) {\n        var6 = *buffer_pointer;\n        error_message = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,error_message,unsigned_var11,var6);\n        check_and_exit_if_flag_zero_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    buffer_pointer = (undefined8 *)*file_list;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; buffer_pointer != (undefined8 *)0x0; buffer_pointer = (undefined8 *)buffer_pointer[1]) {\n      error_message = (char *)bfd_openr(*buffer_pointer,\"plugin\");\n      unsigned_var11 = DAT_0010d660;\n      archive_files = DAT_0010d558;\n      if (error_message == (char *)0x0) {\n        var6 = *buffer_pointer;\n        error_message = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,error_message,unsigned_var11,var6);\n        check_and_exit_if_flag_zero_0010315d();\n      }\n      else {\n        *(char **)(error_message + 0xf0) = DAT_0010d558[0x1f];\n        archive_files[0x1f] = error_message;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    error_message = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pointer_to_char = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointer_to_char,error_message);\n    for (error_message = DAT_0010d558[0x1f]; error_message != (char *)0x0; error_message = *(char **)(error_message + 0xf0))\n    {\n      print_formatted_file_info_00103ddc(error_message,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(archive_files);\n    error_message = DAT_0010d570;\n    index = file_stat(DAT_0010d570,&local_stat);\n    if ((index != 0) && (DAT_0010d558 = (char **)bfd_openw(error_message,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_print_error_message_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    process_archive_file_00103c60(*file_list,0);\n    break;\n  case 0x1f:\n    process_archive_file_00103c60(*file_list,1);\n    break;\n  case 0x20:\n    error_message = *file_list;\n    if (DAT_0010d558 == (char **)0x0) {\n      error_message = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    current_index = extract_and_convert_archived_files_00105300(file_list[-1],0);\n    if (current_index != 0) {\n      process_archive_entries_001032a8(current_index,copy_function_data_0010312d,error_message);\n    }\n    break;\n  case 0x21:\n    error_message = *file_list;\n    pointer_to_char = file_list[-1];\n    unsigned_var11 = extract_and_convert_archived_files_00105300(file_list[-2],0);\n    if (error_message == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(error_message,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        process_archive_entries_001032a8(unsigned_var11,print_formatted_file_info_00103ddc,pointer_to_char);\n        bfd_close(unsigned_var11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointer_to_char = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointer_to_char,error_message);\n    }\n    process_archive_entries_001032a8(unsigned_var11,print_formatted_file_info_00103ddc,pointer_to_char);\n    bfd_close(unsigned_var11);\n    break;\n  case 0x22:\n    char_ptr_ptr_3 = (char **)*file_list;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    char_ptr_ptr_3 = (char **)0x0;\n    break;\n  case 0x24:\n    char_ptr_ptr_3 = (char **)file_list[-1];\n    break;\n  case 0x26:\n    char_ptr_ptr_3 = (char **)malloc(0x10);\n    error_message = file_list[-2];\n    *char_ptr_ptr_3 = *file_list;\n    char_ptr_ptr_3[1] = error_message;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  current_index = (long)current_char;\n  buffer = buffer + -current_index;\n  file_list[1 - current_index] = (char *)char_ptr_ptr_3;\n  file_list = file_list + (1 - current_index);\n  uint_var = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[int_var37] + -0x18] + (int)*buffer;\n  if ((uint_var < 0x23) && (*buffer == (&DAT_0010a0a0)[(int)uint_var])) {\n    current_index = (long)(char)(&DAT_0010a060)[(int)uint_var];\n  }\n  else {\n    current_index = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[int_var37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  index = ((int)pointer_to_byte - (int)DAT_0010d5c8) + -1;\n  *pointer_to_byte = DAT_0010d588;\n  double_pointer = (long **)(DAT_0010d5a8 + current_index * 8);\n  double_pointer_pointer = (FILE **)*double_pointer;\n  if (*(int *)(double_pointer_pointer + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)double_pointer_pointer + 0x1c);\n    *(undefined4 *)(double_pointer_pointer + 7) = 1;\n    *double_pointer_pointer = DAT_0010d590;\n  }\n  byte_pointer = DAT_0010d5b0;\n  file_pointer = double_pointer_pointer[1];\n  temporary_variable._8_8_ = file_pointer;\n  temporary_variable._0_8_ = double_pointer_pointer;\n  if ((byte *)((long)&file_pointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&file_pointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      temporary_variable = print_error_message_and_exit_001033b0();\n    }\n    if (*(int *)(temporary_variable._0_8_ + 0x34) != 0) {\n      uint_var = (int)((long)byte_pointer - (long)pointer_to_byte) - 1;\n      for (current_index = 0; (int)current_index < (int)uint_var; current_index = current_index + 1) {\n        *(byte *)(temporary_variable._8_8_ + current_index) = pointer_to_byte[current_index];\n      }\n      pointer_to_long = *double_pointer;\n      if (*(int *)(pointer_to_long + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointer_to_long + 0x1c) = 0;\nLAB_0010475e:\n        file_pointer = DAT_0010d590;\n        if (uint_var == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_yy_buffer_stack_00103df9();\n            buffer_pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            unsigned_var11 = create_buffer_from_params_001033d6(file_pointer);\n            *buffer_pointer = unsigned_var11;\n          }\n          current_index = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            current_index = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          error_code = 1;\n          initialize_file_pointer_001031cf(current_index);\n          extract_data_from_binary_001030ed();\n        }\n        else {\n          error_code = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_to_long = *double_pointer;\n          uint_var2 = ~uint_var + *(int *)(pointer_to_long + 3);\n          if (0 < (int)uint_var2) break;\n          uint_var2 = (int)DAT_0010d5b0 - (int)(void *)pointer_to_long[1];\n          if (*(int *)(pointer_to_long + 4) == 0) {\n            pointer_to_long[1] = 0;\nLAB_00104626:\n            print_error_message_and_exit_001033b0();\n            break;\n          }\n          error_code = *(int *)(pointer_to_long + 3);\n          int_var2 = error_code;\n          if (error_code < 1) {\n            int_var2 = error_code / 8;\n          }\n          *(int *)(pointer_to_long + 3) = int_var2 + error_code;\n          void_pointer = realloc((void *)pointer_to_long[1],(long)(int_var2 + error_code + 2));\n          pointer_to_long[1] = (long)void_pointer;\n          if (void_pointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)void_pointer + (long)(int)uint_var2);\n          pointer_to_long = *double_pointer;\n        }\n        if (0x2000 < (int)uint_var2) {\n          uint_var2 = 0x2000;\n        }\n        ulong_var2 = (ulong)uint_var2;\n        if (*(int *)((long)pointer_to_long + 0x24) == 0) {\n          int_pointer = __errno_location();\n          ulong_var2 = (ulong)(int)uint_var2;\n          ulong_var = (ulong)(int)uint_var;\n          *int_pointer = 0;\n          goto LAB_001046c7;\n        }\n        ulong_var = 0;\n        int_pointer = (int *)(long)(int)uint_var;\n        do {\n          error_code = getc(DAT_0010d590);\n          u_var36 = (uint)ulong_var;\n          if (error_code == -1) {\n            error_code = ferror(DAT_0010d590);\n            uint_var2 = u_var36;\n            if (error_code != 0) {\n              do {\n                error_message = \"input in flex scanner failed\";\n                print_error_message_and_exit_001033b0();\n                do {\n                  *int_pointer = 0;\n                  clearerr((FILE *)error_message);\nLAB_001046c7:\n                  size_var = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong_var),1,ulong_var2,DAT_0010d590);\n                  error_message = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_var;\n                  uint_var2 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (error_code = ferror(DAT_0010d590), uint_var2 = DAT_0010d598, error_code == 0))\n                  goto LAB_00104738;\n                } while (*int_pointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (error_code == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_var +\n             (long)(int)u_var36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint_var2 = u_var36 + 1;\n            break;\n          }\n          ulong_var = (ulong)(u_var36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)int_pointer) =\n               (char)error_code;\n          int_pointer = (int *)((long)int_pointer + 1);\n        } while (uint_var2 != u_var36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uint_var2;\n        uint_var2 = DAT_0010d598;\n        error_code = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint_var2 == 0) goto LAB_0010475e;\n      }\n      pointer_to_long = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      current_index = *pointer_to_long;\n      uint_var = uint_var + DAT_0010d598;\n      if (*(int *)(current_index + 0x18) < (int)uint_var) {\n        int_var2 = ((int)DAT_0010d598 >> 1) + uint_var;\n        void_pointer = realloc(*(void **)(current_index + 8),(long)int_var2);\n        *(void **)(current_index + 8) = void_pointer;\n        temp_var2._8_8_ = pointer_to_long;\n        temp_var2._0_8_ = *pointer_to_long;\n        if (*(long *)(*pointer_to_long + 8) == 0) {\n          temp_var2 = print_error_message_and_exit_001033b0();\n        }\n        pointer_to_long = temp_var2._8_8_;\n        *(int *)(temp_var2._0_8_ + 0x18) = int_var2 + -2;\n      }\n      DAT_0010d598 = uint_var;\n      *(undefined *)(*(long *)(*pointer_to_long + 8) + (long)(int)uint_var) = 0;\n      *(undefined *)(*(long *)(*pointer_to_long + 8) + 1 + (long)(int)uint_var) = 0;\n      pointer_to_byte = *(byte **)(*pointer_to_long + 8);\n      DAT_0010d5c8 = pointer_to_byte;\n      if (error_code == 1) goto LAB_001048a4;\n      if (error_code == 2) goto LAB_001048ca;\n      pointer_to_byte = pointer_to_byte + index;\n      DAT_0010d5b0 = pointer_to_byte;\n      uint_var = find_matching_value_indices_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)byte_pointer - (long)pointer_to_byte == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointer_to_byte = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pointer_to_byte;\n    ulong_var = find_matching_value_indices_0010300e();\n    pointer_to_byte = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pointer_to_byte = pointer_to_byte + index;\n  DAT_0010d5b0 = pointer_to_byte;\n  ulong_var = find_matching_value_indices_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong_var * 2) != 0) {\n    DAT_0010d5b8 = pointer_to_byte;\n    DAT_0010d5c0 = (uint)ulong_var;\n  }\n  ulong_var2 = ulong_var & 0xffffffff;\n  while( true ) {\n    index = (int)ulong_var2;\n    if (index == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)index * 2) + 1) * 2)) break;\n    ulong_var2 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)index * 2);\n  }\n  uint_var = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)index * 2) + 1) * 2);\n  pointer_to_byte = pointer_to_byte;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)index * 2) + 1) * 2) == 0)\n     || (uint_var == 0xb0)) goto LAB_0010419f;\n  pointer_to_byte = pointer_to_byte + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  index = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointer_to_byte = DAT_0010d588;\n  ulong_var = (ulong)DAT_0010d5c0;\n  pointer_to_byte = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  file_list = file_list + 1;\n  local_integer = 3;\n  *file_list = DAT_0010d548;\nLAB_001049d1:\n  buffer = buffer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "current_name": "extract_and_process_archive_script_00103e95",
            "entrypoint": "0x00103e95",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00103e95": "extract_and_process_archive_script_00103e95",
                "auVar40": "temporary_variable",
                "auVar41": "temp_var2",
                "bVar28": "bool_var",
                "bVar30": "byte_var",
                "bVar39": "byte_var39",
                "cVar2": "current_char",
                "iVar25": "int_var2",
                "iVar37": "int_var37",
                "iVar8": "index",
                "iVar9": "error_code",
                "lVar17": "long_var",
                "lVar18": "current_index",
                "lVar21": "long_var3",
                "lVar3": "temp_var20",
                "lVar31": "long_var4",
                "lVar5": "temp_var16",
                "local_678": "local_string_array",
                "local_740": "local_char_array",
                "local_7d0": "local_stat",
                "local_7f8": "local_pointer_to_byte",
                "local_7fc": "local_unsigned_var",
                "local_800": "local_integer",
                "local_810": "buffer_stack",
                "local_818": "buffer_size",
                "local_820": "buffer",
                "local_828": "buffer",
                "pFVar4": "file_pointer",
                "pbVar32": "pointer_to_byte",
                "pbVar33": "pointer_to_byte",
                "pbVar35": "pointer_to_byte",
                "pbVar7": "byte_pointer",
                "pcVar10": "error_message",
                "pcVar15": "pointer_to_char",
                "pcVar16": "pointer_to_char",
                "piVar34": "int_pointer",
                "plVar12": "pointer_to_long",
                "plVar5": "pointer_to_long",
                "ppFVar3": "double_pointer_pointer",
                "ppcVar27": "archive_files",
                "ppcVar29": "file_list",
                "ppcVar38": "char_ptr_ptr_3",
                "pplVar1": "double_pointer",
                "puVar22": "buffer_pointer",
                "puVar23": "temp_pointer2",
                "pvVar14": "void_pointer",
                "sVar13": "size_var",
                "stat": "file_stat",
                "uVar11": "unsigned_var11",
                "uVar19": "ulong_var",
                "uVar20": "uint_var",
                "uVar24": "uint_var2",
                "uVar26": "ulong_var2",
                "uVar36": "u_var36",
                "uVar6": "var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a0": {
            "additional_data": {
                "FUN_001052a0": {
                    "check_file": 2,
                    "check_file_info": 2,
                    "check_file_stats": 1,
                    "check_file_status": 3,
                    "file_stat_check": 1,
                    "get_file_info": 2,
                    "get_file_information": 7,
                    "get_file_size": 6,
                    "get_file_size_and_type": 1,
                    "get_file_size_warning": 2,
                    "get_file_stats": 4
                },
                "iVar1": {
                    "result": 7,
                    "stat_result": 4,
                    "status": 19,
                    "status_result": 1
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 24,
                    "filename": 5,
                    "filepath": 1
                },
                "pcVar4": {
                    "error_reason": 23,
                    "error_string": 2,
                    "reason": 1,
                    "str_error": 4,
                    "str_error_message": 1
                },
                "piVar2": {
                    "err_num_ptr": 1,
                    "err_number": 1,
                    "errno_location": 6,
                    "errno_location_result": 1,
                    "errno_pointer": 2,
                    "errno_ptr": 14,
                    "error_code": 3,
                    "error_location": 1,
                    "error_pointer": 2
                },
                "sStack_a8": {
                    "file_info": 4,
                    "file_stat": 14,
                    "file_stat_struct": 1,
                    "file_stats": 9,
                    "file_status": 3
                },
                "st_mode": {
                    "file_mode": 1
                },
                "st_size": {
                    "file_size": 1
                },
                "uVar3": {
                    "error_message": 30,
                    "message": 1
                }
            },
            "called": [
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext",
                "stat"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "code": "\nlong get_file_size_warning_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_with_formatted_message_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_with_formatted_message_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.file_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_with_formatted_message_00107920(error_message,file_path);\n    }\n    else if ((file_stat.file_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.file_size) {\n        return file_stat.file_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_with_formatted_message_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_with_formatted_message_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "get_file_size_warning_001052a0",
            "entrypoint": "0x001052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a0": "get_file_size_warning_001052a0",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stat",
                "st_mode": "file_mode",
                "st_size": "file_size",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105300": {
            "additional_data": {
                "FUN_00105300": {
                    "convert_and_open": 1,
                    "convert_and_open_file": 1,
                    "convert_archived_file": 1,
                    "convert_archived_files": 1,
                    "convert_archived_library": 1,
                    "convert_library": 2,
                    "convert_library_format": 7,
                    "create_stat_and_open_file": 1,
                    "extract_and_check_archives": 1,
                    "extract_and_convert_archived_files": 9,
                    "extract_and_open_archived_files": 1,
                    "extract_archived_files": 5
                },
                "_stderr": {
                    "_stderr": 1
                },
                "bVar3": {
                    "convert_flag": 2,
                    "convert_format": 1,
                    "convert_format_flag": 1,
                    "flag": 1,
                    "format_conversion": 1,
                    "is_convert": 1,
                    "is_thin": 4,
                    "is_thin_format": 3,
                    "is_thin_lib": 1,
                    "is_thin_library": 14,
                    "thin_library_flag": 1
                },
                "cVar4": {
                    "char_var": 1,
                    "conversion_error": 3,
                    "conversion_result": 4,
                    "conversion_status": 1,
                    "error_flag": 2,
                    "format_check": 4,
                    "format_check_result": 8,
                    "format_error": 2,
                    "format_set_result": 1,
                    "result": 3,
                    "status": 1
                },
                "checkFlagZero": {
                    "check_and_exit_if_flag_zero_0010315d": 1
                },
                "checkFormatMatches": {
                    "bfd_check_format_matches": 1
                },
                "closeBfd": {
                    "bfd_close": 1
                },
                "exit": {
                    "xexit": 1
                },
                "extractArchivedFiles": {
                    "extract_and_convert_archived_files_00102710": 1
                },
                "fcntlErrno": {
                    "__errno_location": 1
                },
                "formattedError": {
                    "print_formatted_error_message_and_exit_00107690": 1
                },
                "getBfdError": {
                    "bfd_get_error": 1
                },
                "iVar5": {
                    "error_code": 1,
                    "error_number": 1,
                    "function_result": 1,
                    "result": 5,
                    "return_value": 1,
                    "stat_result": 12,
                    "status": 8
                },
                "lVar9": {
                    "archived_file": 11,
                    "archived_file_ptr": 2,
                    "current_archived_file": 1,
                    "current_file": 2,
                    "file_descriptor": 1,
                    "file_entry": 1,
                    "file_handle": 2,
                    "file_pointer": 3,
                    "file_ptr_temp": 1,
                    "long_var9": 1,
                    "next_archived_file": 2,
                    "next_file": 1,
                    "next_file_ptr": 1
                },
                "libraryName": {
                    "library_name": 1
                },
                "local_a8": {
                    "file_info": 2,
                    "file_information": 1,
                    "file_stat": 8,
                    "file_stat_result": 1,
                    "file_stats": 12,
                    "file_status": 2,
                    "input_file_info": 1,
                    "local_var_a8": 1
                },
                "local_b0": {
                    "compatibility_format": 1,
                    "format": 3,
                    "format_match": 2,
                    "format_options": 1,
                    "library_match": 1,
                    "local_var_b0": 1,
                    "match_buffer": 1,
                    "matching_format": 10,
                    "matching_formats": 9
                },
                "openRead": {
                    "bfd_openr": 1
                },
                "openReadNextArchivedFile": {
                    "bfd_openr_next_archived_file": 1
                },
                "openWrite": {
                    "bfd_openw": 1
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 1,
                    "filename": 13,
                    "filepath": 1,
                    "input_file": 1,
                    "input_file_name": 4,
                    "input_file_path": 4,
                    "input_filename": 1,
                    "input_path": 1,
                    "library_name": 1,
                    "library_path": 3
                },
                "param_2": {
                    "archive": 1,
                    "archive_files": 1,
                    "archived_files": 4,
                    "converted_library": 2,
                    "file_struct_array": 1,
                    "files": 1,
                    "format_opts": 1,
                    "formats": 1,
                    "output": 3,
                    "output_file": 1,
                    "output_file_path": 2,
                    "output_file_ptr": 2,
                    "output_files": 10,
                    "output_path": 1
                },
                "pcVar2": {
                    "default_plugin": 3,
                    "error_message": 7,
                    "error_ptr": 1,
                    "error_str": 1,
                    "file_path": 1,
                    "format": 1,
                    "open_options": 1,
                    "plugin_name": 11,
                    "plugin_path": 1,
                    "print_message": 1,
                    "program": 1,
                    "program_name": 1
                },
                "piVar8": {
                    "errno": 1,
                    "errno_location": 10,
                    "errno_pointer": 1,
                    "errno_ptr": 4,
                    "errno_value": 1,
                    "error_code": 1,
                    "error_code_pointer": 1,
                    "error_flag": 1,
                    "error_flag_ptr": 1,
                    "error_location": 2,
                    "error_num_ptr": 2,
                    "error_number": 2,
                    "error_ptr": 1,
                    "pointer_to_integer_var8": 1
                },
                "plVar1": {
                    "archive_file_ptr": 1,
                    "archived_file": 2,
                    "archived_file_list": 3,
                    "archived_file_ptr": 5,
                    "archived_files": 1,
                    "current_file": 4,
                    "current_file_ptr": 1,
                    "file_list": 1,
                    "file_pointer": 3,
                    "file_ptr": 3,
                    "next_archived_file": 1,
                    "next_archived_file_ptr": 1,
                    "pointer_to_long_var1": 1,
                    "points_to_next_file": 1,
                    "ptr_file": 1,
                    "ptr_last_archived_file": 1
                },
                "printBfdError": {
                    "print_bfd_error_message_00107c20": 1
                },
                "printError": {
                    "print_error_message_and_exit_00107c10": 1
                },
                "printErrorWithMessage": {
                    "print_error_with_formatted_message_00107920": 1
                },
                "printMatchingFormats": {
                    "print_matching_formats_00103bd1": 1
                },
                "puVar10": {
                    "archived_files": 2,
                    "converted_archived_files": 1,
                    "converted_files": 5,
                    "extracted_files": 20,
                    "pointer_to_var10": 1
                },
                "setFormat": {
                    "bfd_set_format": 1
                },
                "uVar6": {
                    "err_msg": 2,
                    "error": 1,
                    "error_format": 1,
                    "error_message": 14,
                    "error_msg": 1,
                    "error_string": 5,
                    "error_text": 1,
                    "formatted_error_message": 1,
                    "formatting_error": 1,
                    "translation_text": 1,
                    "var6": 1
                },
                "uVar7": {
                    "err_msg2": 1,
                    "err_msg_formatted": 1,
                    "error_description": 1,
                    "error_identifier": 1,
                    "error_message": 5,
                    "error_message_arg": 1,
                    "error_message_format": 1,
                    "error_message_formatted": 1,
                    "error_msg2": 1,
                    "error_string": 1,
                    "error_with_formatted_message": 1,
                    "file_name": 1,
                    "format_message": 1,
                    "format_string": 1,
                    "formatted_error_message": 3,
                    "formatted_error_message2": 1,
                    "formatted_message": 2,
                    "formatting_message": 1,
                    "library_name": 2,
                    "unexpected_error_message": 1,
                    "var7": 1
                }
            },
            "called": [
                "FUN_00103bd1",
                "bfd_openr",
                "FUN_00107920",
                "bfd_set_error",
                "FUN_00107c10",
                "bfd_close",
                "bfd_get_error",
                "bfd_openr_next_archived_file",
                "FUN_00107690",
                "bfd_set_format",
                "bfd_check_format_matches",
                "perror",
                "bfd_openw",
                "xexit",
                "FUN_0010315d",
                "fprintf",
                "FUN_00107c20",
                "FUN_00102710",
                "dcgettext",
                "stat",
                "__errno_location"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_00103e95"
            ],
            "code": "\n\n\nundefined8 * extract_and_convert_archived_files_00105300(char *filename,undefined8 *output_files)\n\n{\n  long *archived_file_ptr;\n  char *plugin_name;\n  byte is_thin_library;\n  char format_check_result;\n  int stat_result;\n  undefined8 error_message;\n  undefined8 error_message;\n  int *errno_location;\n  long archived_file;\n  undefined8 *extracted_files;\n  undefined8 matching_format;\n  stat file_stats;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  stat_result = stat(filename,&file_stats);\n  plugin_name = DAT_0010d618;\n  if (stat_result == 0) goto LAB_001053be;\n  errno_location = __errno_location();\n  if (*errno_location == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      check_and_xexit_if_flag_zero_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (output_files != (undefined8 *)0x0)) {\n      extracted_files = (undefined8 *)extract_and_convert_archived_files_00105300_00102710();\n      return extracted_files;\n    }\n    output_files = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((output_files != (undefined8 *)0x0) && (format_check_result = bfd_set_format(output_files,2), format_check_result != '\\0')) &&\n       (format_check_result = bfd_close(output_files), format_check_result != '\\0')) {\n      plugin_name = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  print_error_message_and_xexit_00107c10(filename);\n  do {\n    is_thin_library = *(byte *)((long)output_files + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        error_message = *output_files;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_formatted_error_message_and_xexit_00107690(error_message,error_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      error_message = *output_files;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_formatted_error_message_and_xexit_00107690(error_message,error_message);\nLAB_001027cb:\n      print_bfd_error_message_00107c20(filename);\n      stat_result = bfd_get_error();\n      if (stat_result == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matching_format);\n      }\n                    \n      xxexit(1);\n    }\n    do {\n      archived_file_ptr = output_files + 0x1e;\n      for (archived_file = bfd_openr_next_archived_file(output_files,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(output_files,archived_file)) {\n        *archived_file_ptr = archived_file;\n        archived_file_ptr = (long *)(archived_file + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      stat_result = bfd_get_error();\n      if (stat_result == 9) {\n        return output_files;\n      }\n      do {\n        print_error_message_and_xexit_00107c10(filename);\nLAB_00102826:\n        error_message = dcgettext(0,\"creating %s\",5);\n        print_error_with_formatted_message_00107920(error_message,filename);\n        plugin_name = filename;\nLAB_001053be:\n        DAT_0010d618 = plugin_name;\n        output_files = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (output_files == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(output_files,2,&matching_format);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archived_file = bfd_openr_next_archived_file(output_files,0), archived_file == 0));\n  } while( true );\n}\n\n",
            "current_name": "extract_and_convert_archived_files_00105300",
            "entrypoint": "0x00105300",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105300": "extract_and_convert_archived_files_00105300",
                "bVar3": "is_thin_library",
                "cVar4": "format_check_result",
                "exit": "xexit",
                "iVar5": "stat_result",
                "lVar9": "archived_file",
                "local_a8": "file_stats",
                "local_b0": "matching_format",
                "param_1": "filename",
                "param_2": "output_files",
                "pcVar2": "plugin_name",
                "piVar8": "errno_location",
                "plVar1": "archived_file_ptr",
                "puVar10": "extracted_files",
                "uVar6": "error_message",
                "uVar7": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105480": {
            "additional_data": {
                "DAT_0010d634": {
                    "flag": 4
                },
                "FUN_00105480": {
                    "extract_and_copy_archived_entries": 1,
                    "extract_and_copy_substrings": 1,
                    "extract_and_print_entries": 1,
                    "extract_and_process_files": 1,
                    "extract_entries_from_archive": 2,
                    "iterate_entries_and_execute_callback": 1,
                    "process_archive": 1,
                    "process_archive_entries": 10,
                    "process_archived_entries": 4,
                    "process_entries": 8,
                    "reverse_entries_in_archive": 1
                },
                "_DAT_0010d630": {
                    "limit": 2,
                    "max_count": 2
                },
                "__format": {
                    "error_message": 4,
                    "error_message_format": 5,
                    "error_msg": 1,
                    "error_msg_format": 3,
                    "format_str": 3,
                    "format_string": 9,
                    "message_format": 1
                },
                "_stderr": {
                    "stderr": 2
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "extract_and_copy_substring_00105830": {
                    "extract_substring": 3
                },
                "filename_cmp": {
                    "compare_filenames": 3
                },
                "fprintf": {
                    "print_to_stderr": 1
                },
                "iVar1": {
                    "cmp_result": 2,
                    "comparison_result": 7,
                    "filename_cmp_result": 1,
                    "filename_comparison_result": 3
                },
                "lVar2": {
                    "current_entry": 21,
                    "current_entry_address": 1,
                    "current_entry_ptr": 4,
                    "current_file_entry": 1,
                    "entry": 1,
                    "entry_ptr": 2,
                    "next_entry": 1
                },
                "local_c8": {
                    "buffer": 19,
                    "local_buffer": 5,
                    "substring_buffer": 1,
                    "temp_buffer": 2,
                    "temporary_array": 1,
                    "temporary_buffer": 3
                },
                "local_cc": {
                    "count": 6,
                    "counter": 6,
                    "entries_matched": 1,
                    "entry_count": 4,
                    "entry_counter": 5,
                    "file_count": 3,
                    "matched_entries_count": 2,
                    "matching_entries_count": 1,
                    "matching_entry_count": 1,
                    "processed_entries": 1,
                    "processed_entries_count": 1
                },
                "param_1": {
                    "archive": 9,
                    "archive_address": 1,
                    "archive_base_address": 1,
                    "archive_entry_list": 1,
                    "archive_info": 1,
                    "archive_ptr": 9,
                    "archived_data_address": 1,
                    "entries": 1,
                    "entry": 1,
                    "entry_data": 1,
                    "entry_list": 3,
                    "file_table": 1,
                    "input_data": 1
                },
                "param_2": {
                    "callback": 13,
                    "callback_func": 3,
                    "callback_function": 3,
                    "entry_callback": 1,
                    "entry_handler": 3,
                    "entry_processor": 5,
                    "entry_processor_fn": 1,
                    "file_processor": 1,
                    "process_entry_func": 1
                },
                "param_3": {
                    "entries": 2,
                    "entry_list": 1,
                    "entry_names": 17,
                    "file_list": 1,
                    "file_names": 1,
                    "filenames": 9
                },
                "param_4": {
                    "file_count": 1,
                    "num_entries": 22,
                    "num_files": 8
                },
                "plVar3": {
                    "cur_entry": 1,
                    "default_entry": 1,
                    "default_entry_ptr": 1,
                    "fallback_entry": 4,
                    "fallback_entry_address": 1,
                    "fallback_entry_ptr": 1,
                    "fallback_file_entry": 1,
                    "first_entry": 2,
                    "next_entry": 9,
                    "next_entry_ptr": 1,
                    "ptr_to_last_entry": 1,
                    "temp_entry": 3,
                    "temp_entry_ptr": 3,
                    "temp_ptr": 1,
                    "temporary_entry_ptr": 1
                },
                "plVar5": {
                    "current_archive_entry": 1,
                    "current_entry": 1,
                    "current_entry_ptr": 3,
                    "current_file": 2,
                    "current_item": 1,
                    "current_process_entry": 1,
                    "entry": 3,
                    "entry_iterator": 1,
                    "entry_list": 4,
                    "entry_ptr": 10,
                    "next_entry": 2,
                    "next_entry_ptr": 1,
                    "ptr_to_entry": 1
                },
                "uVar4": {
                    "current_entry_name": 3,
                    "current_entry_substring": 1,
                    "current_file": 1,
                    "current_filename": 1,
                    "entry_name": 1,
                    "entry_name_to_match": 1,
                    "extracted_entry": 2,
                    "extracted_entry_name": 1,
                    "extracted_filename": 2,
                    "extracted_name": 1,
                    "extracted_string": 1,
                    "extracted_substr": 1,
                    "extracted_substring": 6,
                    "filename": 5,
                    "substring": 3,
                    "substring_result": 1
                }
            },
            "called": [
                "FUN_0010285f",
                "FUN_00105830",
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid process_archive_entries_00105480(long archive,code *callback,undefined8 *entry_names,int num_entries)\n\n{\n  int comparison_result;\n  char *format_string;\n  long current_entry;\n  long *next_entry;\n  undefined8 extracted_substring;\n  long *entry_ptr;\n  int count;\n  undefined buffer [152];\n  \n  current_entry = *(long *)(archive + 0xf0);\n  if (num_entries == 0) {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      (*callback)(current_entry);\n    }\n  }\n  else {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      *(undefined4 *)(current_entry + 0xac) = 0;\n    }\n    do {\n      entry_ptr = *(long **)(archive + 0xf0);\n      count = 0;\n      for (; entry_ptr != (long *)0x0; entry_ptr = (long *)entry_ptr[0x1e]) {\n        if (*(int *)((long)entry_ptr + 0xac) == 0) {\n          current_entry = *entry_ptr;\n          if (current_entry == 0) {\n            next_entry = (long *)entry_ptr[0x1d];\n            if ((long *)entry_ptr[0x1d] == (long *)0x0) {\n              next_entry = entry_ptr;\n            }\n            (**(code **)(next_entry[1] + 0x1e8))(entry_ptr,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (current_entry = extract_substring(current_entry,archive), current_entry != 0)) {\n            extracted_substring = extract_substring(*entry_names,archive);\n            comparison_result = filename_cmp(extracted_substring,current_entry);\n            if ((comparison_result == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entry_ptr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      extracted_substring = *entry_names;\n      format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(stderr,format_string,extracted_substring);\nLAB_0010553e:\n      entry_names = entry_names + 1;\n      num_entries = num_entries + -1;\n    } while (num_entries != 0);\n  }\n  return;\n}\n\n",
            "current_name": "process_archive_entries_00105480",
            "entrypoint": "0x00105480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "__format": "format_string",
                "_stderr": "stderr",
                "dcgettext": "get_translated_string",
                "extract_and_copy_substring_00105830": "extract_substring",
                "filename_cmp": "compare_filenames",
                "fprintf": "print_to_stderr",
                "iVar1": "comparison_result",
                "lVar2": "current_entry",
                "local_c8": "buffer",
                "local_cc": "count",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entry_names",
                "param_4": "num_entries",
                "plVar3": "next_entry",
                "plVar5": "entry_ptr",
                "uVar4": "extracted_substring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105570": {
            "additional_data": {
                "DAT_0010d618": {
                    "global_var1": 1
                },
                "DAT_0010d620": {
                    "archive_ptr": 1
                },
                "DAT_0010d638": {
                    "archived_file": 1
                },
                "DAT_0010d640": {
                    "archive_mode_const": 1
                },
                "DAT_0010d644": {
                    "check_last_modified": 1
                },
                "FUN_00105570": {
                    "process_and_extract_files": 1,
                    "process_binary": 7,
                    "process_binary_function": 1,
                    "process_extracted_files": 2,
                    "process_files": 16,
                    "process_files_in_archive": 1
                },
                "__s": {
                    "base_file": 1,
                    "base_name": 3,
                    "base_name2": 3,
                    "basename1": 1,
                    "basename2": 2,
                    "basename3": 1,
                    "basename_2_2": 1,
                    "basename_filename_2": 1,
                    "basename_result": 3,
                    "basename_var2": 3,
                    "current_base_name": 1,
                    "current_file_name_3": 1,
                    "entry_basename": 1,
                    "file_basename": 1,
                    "file_name": 1,
                    "pointer_char_var4": 1,
                    "short_name": 1,
                    "source_file": 1,
                    "str_var4": 1,
                    "temp_file": 1,
                    "temp_str": 1,
                    "temp_string": 1
                },
                "auStack_158": {
                    "buffer": 2,
                    "buffer_array": 1,
                    "stack_array": 14,
                    "stack_buf": 1,
                    "stack_buffer": 3,
                    "stack_data": 1,
                    "stack_memory": 1,
                    "stack_var": 1,
                    "substring_buffer": 1,
                    "substring_stack": 1,
                    "temp_array": 1,
                    "temp_stack": 3,
                    "temp_stack_data": 1
                },
                "bVar19": {
                    "bool_val": 1,
                    "bool_value": 5,
                    "bool_var": 20,
                    "flag2": 1,
                    "is_dyn": 1,
                    "is_relocatable": 1,
                    "process_archived_files": 1,
                    "use_data_option": 1
                },
                "bVar20": {
                    "byte_val": 2,
                    "byte_value": 3,
                    "byte_value2": 1,
                    "byte_value_2": 1,
                    "byte_var": 3,
                    "byte_var1": 1,
                    "byte_var2": 9,
                    "byte_var_2": 3,
                    "counter": 1,
                    "temp_byte": 3
                },
                "bVar3": {
                    "bool_var": 1,
                    "byte_val": 1,
                    "byte_value": 6,
                    "byte_var": 20,
                    "condition": 1,
                    "result": 1
                },
                "iVar4": {
                    "comparison_result": 1,
                    "index": 7,
                    "index_var": 4,
                    "int_value": 3,
                    "int_var": 13,
                    "iteration_index": 1,
                    "temp_int": 1
                },
                "lStack_100": {
                    "file_time": 2,
                    "l_stack": 1,
                    "l_stack_var": 1,
                    "l_value": 1,
                    "last_modified_time": 5,
                    "latest_timestamp": 1,
                    "long_stack_var": 1,
                    "long_var3": 1,
                    "stack_value": 2,
                    "stack_var": 4,
                    "stack_var2": 1,
                    "stack_variable": 1,
                    "temp_long": 2,
                    "threshold": 1,
                    "time_limit": 1,
                    "time_value": 2,
                    "time_var": 3,
                    "time_var1": 1
                },
                "lVar11": {
                    "current_address": 2,
                    "current_entry_ptr": 1,
                    "current_file_addr": 1,
                    "current_file_pointer": 1,
                    "current_file_ptr": 2,
                    "current_item": 2,
                    "current_list_entry": 1,
                    "current_node": 2,
                    "current_pointer": 1,
                    "current_ptr": 3,
                    "current_ptr_filenames": 1,
                    "file_ptr1": 2,
                    "file_ptr_var": 1,
                    "link_data": 1,
                    "list_var_1": 1,
                    "long_var1": 2,
                    "loop_var1": 1,
                    "prev_file_data": 1,
                    "prev_ptr": 1,
                    "ptr_1": 1,
                    "ptr_file": 1,
                    "ptr_var1": 1,
                    "temp_long": 1
                },
                "lVar12": {
                    "current_file_data": 1,
                    "current_file_ptr": 1,
                    "current_file_ptr_2": 1,
                    "current_link_data": 1,
                    "file_addr": 1,
                    "file_ptr": 1,
                    "file_ptr2": 2,
                    "file_ptr_var2": 1,
                    "list_var_2": 1,
                    "long_var2": 2,
                    "loop_var2": 1,
                    "next_address": 2,
                    "next_entry_ptr": 1,
                    "next_item": 1,
                    "next_node": 2,
                    "next_pointer": 1,
                    "next_ptr": 3,
                    "next_ptr_filenames": 1,
                    "previous_file_pointer": 1,
                    "previous_item": 1,
                    "previous_list_entry": 1,
                    "ptr_2": 1,
                    "ptr_file2": 1,
                    "ptr_var2": 1,
                    "temp_long": 1
                },
                "lVar14": {
                    "max_file_name_len": 1
                },
                "local_15a": {
                    "archive_flag": 1,
                    "archive_processed": 2,
                    "archive_processing": 1,
                    "archive_result": 2,
                    "byte_var3": 1,
                    "flag_result": 1,
                    "flag_value": 1,
                    "flag_var": 1,
                    "is_archive_file": 1,
                    "local_byte": 3,
                    "local_byte_value": 2,
                    "local_byte_var": 2,
                    "local_flag": 7,
                    "local_flag_var": 1,
                    "local_var": 2,
                    "local_var1": 2,
                    "result_flag": 1
                },
                "param_1": {
                    "archive_handle": 1,
                    "arg": 1,
                    "arg1": 7,
                    "binary": 4,
                    "binary_data": 2,
                    "binary_handle": 1,
                    "binary_param": 1,
                    "context": 1,
                    "data": 1,
                    "file": 1,
                    "file_data": 2,
                    "file_manager": 4,
                    "file_path": 1,
                    "function_data": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "param_pointer": 1
                },
                "param_2": {
                    "arg2": 1,
                    "file_list": 7,
                    "file_names": 1,
                    "file_paths": 20,
                    "filenames": 1,
                    "input_files": 1
                },
                "param_3": {
                    "archive_flag": 1,
                    "arg3": 1,
                    "flag": 14,
                    "is_archive": 8,
                    "is_option_enabled": 1,
                    "is_recursive": 2,
                    "process_archives": 1,
                    "process_deps": 1,
                    "process_flag": 1,
                    "process_subdirectories": 1
                },
                "pcVar10": {
                    "basename2": 1,
                    "current_entry": 1,
                    "current_file": 9,
                    "current_file_name": 2,
                    "current_file_name_2": 1,
                    "current_file_path": 6,
                    "current_file_path_component": 1,
                    "current_filename": 1,
                    "current_string": 1,
                    "file": 1,
                    "file_name": 1,
                    "file_var": 1,
                    "filename": 2,
                    "pointer_char_var3": 1,
                    "ptr_var3": 1,
                    "str_var3": 1
                },
                "pcVar7": {
                    "basename_1": 1,
                    "curr_file": 1,
                    "current_file": 6,
                    "current_file_base": 1,
                    "current_file_name": 1,
                    "current_file_path": 1,
                    "current_filename": 1,
                    "file_name": 3,
                    "file_name1": 1,
                    "file_path": 6,
                    "file_path_component": 1,
                    "file_ptr": 1,
                    "file_var": 1,
                    "file_var_1": 1,
                    "filename": 2,
                    "pointer_char_var": 1,
                    "ptr_var1": 1,
                    "str_var1": 1
                },
                "pcVar8": {
                    "base_name": 3,
                    "base_name1": 2,
                    "basename": 4,
                    "basename1": 1,
                    "basename_2": 1,
                    "basename_filename": 1,
                    "basename_var": 3,
                    "file_basename": 1,
                    "file_name": 1,
                    "file_name2": 1,
                    "file_var_2": 1,
                    "modified_file_path": 1,
                    "new_file_path_component": 1,
                    "pointer_char_var2": 1,
                    "processed_file_name": 1,
                    "processed_file_ptr": 1,
                    "processed_name": 1,
                    "ptr_var2": 1,
                    "str_var2": 1,
                    "temp_file": 1,
                    "temp_file_base": 1,
                    "temp_file_name": 1,
                    "temp_str": 1
                },
                "piVar6": {
                    "err_num_ptr": 1,
                    "errno": 2,
                    "errno_loc": 1,
                    "errno_location": 5,
                    "errno_ptr": 12,
                    "errno_var": 1,
                    "error_num": 1,
                    "error_number": 1,
                    "error_var": 4,
                    "int_ptr": 1,
                    "ptr_errno": 1,
                    "ptr_int_var": 1
                },
                "ppcVar1": {
                    "archived_file_paths": 1,
                    "binary_data": 1,
                    "current_file": 5,
                    "current_file_path": 5,
                    "current_path_ptr": 1,
                    "data_ptr": 1,
                    "file_list_end": 1,
                    "file_list_ptr": 1,
                    "file_paths_arg": 1,
                    "file_paths_ptr": 3,
                    "file_pointers": 1,
                    "file_ptr": 5,
                    "param_ptr1": 1,
                    "previous_file": 1,
                    "ptr_file_paths": 1,
                    "ptr_filenames": 1,
                    "variable1": 1
                },
                "ppcVar15": {
                    "archive_file_list": 1,
                    "archive_files": 1,
                    "curr_file_ptr": 1,
                    "current_data_entry": 1,
                    "current_file_entry": 1,
                    "current_file_path_ptr": 1,
                    "current_file_pointer_array": 1,
                    "current_file_ptr": 1,
                    "current_link_data_ptr": 1,
                    "current_list": 1,
                    "current_node": 1,
                    "current_node_ptr": 1,
                    "entry": 1,
                    "file_data_ptr": 1,
                    "file_entry": 1,
                    "file_iterator": 1,
                    "file_iterator1": 1,
                    "file_list": 2,
                    "file_list_ptr": 2,
                    "file_paths_iter": 1,
                    "file_paths_pointer": 1,
                    "file_paths_ptr": 1,
                    "file_paths_ptr1": 1,
                    "file_ptr": 2,
                    "file_ptr1": 1,
                    "file_ptrs": 1,
                    "list_ptr": 1,
                    "ptr_names": 1
                },
                "ppcVar16": {
                    "archive_file_entry": 1,
                    "current_archive_file": 1,
                    "current_data_ptr": 1,
                    "current_entry_ptr": 1,
                    "current_file_entry": 1,
                    "current_file_path_iter": 1,
                    "current_file_ptr": 2,
                    "current_list_entry": 1,
                    "current_node_ptr": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "file_iterator2": 2,
                    "file_list_ptr": 1,
                    "file_paths_ptr2": 1,
                    "file_ptr": 1,
                    "file_ptr2": 1,
                    "last_file_entry": 1,
                    "new_link_data_ptr": 1,
                    "next_data_entry": 1,
                    "next_file_ptr": 2,
                    "next_list": 1,
                    "next_node_ptr": 1,
                    "node_ptr": 1,
                    "param_ptr2": 1,
                    "previous_file_pointer_array": 1,
                    "ptr_file_ptr": 1,
                    "ptr_moving_filenames": 1,
                    "temp_ptr": 1
                },
                "ppcVar18": {
                    "file_iterator3": 1,
                    "file_list_ptr": 1,
                    "file_paths_current": 1,
                    "file_ptr": 1,
                    "file_ptr3": 1,
                    "last_file_path_ptr": 1,
                    "param_ptr3": 1,
                    "prev_file_entry": 1,
                    "prev_file_path_iter": 1,
                    "prev_file_ptr": 1,
                    "prev_ptr_names": 1,
                    "prev_ptrs": 1,
                    "previous_archive_file": 1,
                    "previous_archive_file_entry": 1,
                    "previous_data_entry": 1,
                    "previous_data_ptr": 1,
                    "previous_entry_ptr": 1,
                    "previous_file": 1,
                    "previous_file_entry": 1,
                    "previous_file_iterator": 1,
                    "previous_file_pointer_array2": 1,
                    "previous_file_ptr": 2,
                    "previous_link_data_ptr": 1,
                    "previous_list": 1,
                    "previous_list_entry": 1,
                    "previous_node": 1,
                    "previous_node_ptr": 2,
                    "previous_pointer": 1,
                    "temp_ptr_2": 1
                },
                "sStack_c8": {
                    "file_stat": 5,
                    "file_status": 3,
                    "stack_stat": 1,
                    "stat_buffer": 1,
                    "stat_object": 1,
                    "stat_struct": 14,
                    "stat_structure": 1,
                    "stat_value": 2,
                    "stat_var": 1,
                    "stat_variable": 1,
                    "temp_stat": 1
                },
                "sVar5": {
                    "length": 2,
                    "size": 7,
                    "size_value": 1,
                    "size_var": 15,
                    "str_len": 1,
                    "string_length": 4
                },
                "uVar13": {
                    "function_result": 1,
                    "result": 7,
                    "result_value": 1,
                    "return_val": 5,
                    "return_value": 14,
                    "return_var": 1,
                    "undefined_var2": 1,
                    "undefined_var3": 1
                },
                "uVar14": {
                    "file_size": 1,
                    "length": 1,
                    "length_limit": 1,
                    "limit": 1,
                    "size": 1,
                    "sub_string_length": 1,
                    "substring_length": 1,
                    "temp_ulong": 1,
                    "tmp_var": 1,
                    "ulong_value": 5,
                    "ulong_var": 16
                },
                "uVar17": {
                    "archive_file_mode": 1,
                    "archive_mode": 1,
                    "cmp_result": 1,
                    "compare_type": 1,
                    "current_mode": 1,
                    "file_mode": 1,
                    "file_type": 1,
                    "flag": 1,
                    "flag2": 3,
                    "flag_value": 1,
                    "option": 1,
                    "temp_uint": 1,
                    "temp_var": 1,
                    "uint_value": 5,
                    "uint_var": 11
                },
                "uVar2": {
                    "result": 1,
                    "u_var": 1,
                    "undefined": 1,
                    "undefined_value": 5,
                    "undefined_var": 22
                },
                "uVar9": {
                    "extracted_file": 1,
                    "extracted_file_path": 1,
                    "extracted_name": 1,
                    "extracted_string": 1,
                    "extracted_substring": 6,
                    "result": 2,
                    "sub_filename": 1,
                    "sub_str_result": 1,
                    "sub_string": 2,
                    "sub_string_result": 1,
                    "substring": 4,
                    "substring_result": 2,
                    "temp_file": 1,
                    "temp_var": 1,
                    "undefined_var1": 1,
                    "undefined_var2": 3,
                    "undefined_var_2": 1
                }
            },
            "called": [
                "FUN_00102943"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nundefined8 process_extracted_files_00105570(long arg1,char **file_paths,char flag)\n\n{\n  char **current_file;\n  undefined undefined_var;\n  byte byte_var;\n  int int_var;\n  size_t size_var;\n  int *errno_ptr;\n  char *current_file;\n  char *basename;\n  undefined8 extracted_substring;\n  char *current_file;\n  char *base_name2;\n  long current_ptr;\n  long next_ptr;\n  undefined8 return_value;\n  ulong ulong_var;\n  char **file_list_ptr;\n  char **file_iterator2;\n  uint uint_var;\n  char **previous_node_ptr;\n  bool bool_var;\n  byte byte_var2;\n  byte local_flag;\n  undefined stack_array [88];\n  long last_modified_time;\n  stat stat_struct;\n  \n  byte_var2 = 0;\n  current_file = (char **)(arg1 + 0xf0);\n  local_flag = 0;\n  if (file_paths == (char **)0x0) {\n    return_value = initialize_data_00102943();\n    return return_value;\n  }\n  do {\n    current_file = *file_paths;\njoined_r0x001055aa:\n    if (current_file == (char *)0x0) {\n      if (local_flag != 0) {\n        return_value = process_archive_file_001058b0(arg1);\n        return return_value;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    file_list_ptr = *(char ***)(arg1 + 0xf0);\n    file_iterator2 = current_file;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      next_ptr = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        current_ptr = next_ptr;\n        next_ptr = *(long *)(current_ptr + 0xf0);\n      } while (next_ptr != 0);\n      file_iterator2 = (char **)(current_ptr + 0xf0);\n      current_file = *file_paths;\n      do {\n        if (DAT_0010d620 != 0) {\n          return_value = extract_and_copy_substring_00105830(current_file,arg1);\n          int_var = filename_cmp(return_value,\"__.LIBDEP\");\n          if (int_var == 0) {\n            byte_var = process_archived_files_00105ae0(file_iterator2,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            local_flag = byte_var | local_flag;\n            goto LAB_0010577e;\n          }\n          current_file = *file_paths;\n        }\n        undefined_var = DAT_0010d5f8;\n        bool_var = DAT_0010d60c != 0;\n        next_ptr = bfd_openr(current_file,DAT_0010d5f0);\n        if (next_ptr != 0) {\n          file_paths = file_paths + 1;\n          byte_var = process_archived_files_00105af0(file_iterator2,next_ptr,(uint)bool_var,undefined_var);\n          local_flag = local_flag | byte_var;\n          current_file = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        print_error_message_and_exit_00107c10(current_file,0);\n        uint_var = (uint)bool_var;\nLAB_001028f5:\n        return_value = DAT_0010d638;\n        if (uint_var == 3) {\n          next_ptr = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*file_iterator2 != (undefined8 *)0x0;\n              file_iterator2 = (char **)(*file_iterator2 + 0xf0)) {\n            int_var = filename_cmp(*(undefined8 *)*file_iterator2,return_value);\n            if (int_var == 0) {\n              if (uint_var == 2) {\n                file_iterator2 = (char **)(*file_iterator2 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        current_file = *file_paths;\n      } while( true );\n    }\n    previous_node_ptr = current_file;\n    if (file_list_ptr == (char **)0x0) {\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      current_file = (char *)lbasename(*file_list_ptr);\n      basename = current_file;\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(current_file);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (ulong_var < size_var) {\n          basename = (char *)xmalloc(ulong_var + 1);\n          next_ptr = *(long *)(arg1 + 8);\n          current_file = basename;\n          for (ulong_var = (ulong)*(byte *)(next_ptr + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *current_file = *current_file;\n            current_file = current_file + (ulong)byte_var2 * -2 + 1;\n            current_file = current_file + (ulong)byte_var2 * -2 + 1;\n          }\n          basename[*(byte *)(next_ptr + 0x1e)] = '\\0';\n        }\n        current_file = *file_paths;\n        current_file = basename;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      current_file = *file_paths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      base_name2 = (char *)lbasename(current_file);\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(base_name2);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        current_file = base_name2;\n        current_file = basename;\n        if (ulong_var < size_var) {\n          current_file = (char *)xmalloc(ulong_var + 1);\n          next_ptr = *(long *)(arg1 + 8);\n          basename = current_file;\n          for (ulong_var = (ulong)*(byte *)(next_ptr + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *basename = *base_name2;\n            base_name2 = base_name2 + (ulong)byte_var2 * -2 + 1;\n            basename = basename + (ulong)byte_var2 * -2 + 1;\n          }\n          current_file[*(byte *)(next_ptr + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      int_var = filename_cmp(base_name2,basename);\n      if (int_var == 0) goto LAB_00102993;\nLAB_00105639:\n      previous_node_ptr = file_list_ptr + 0x1e;\n      file_list_ptr = (char **)file_list_ptr[0x1e];\n      if (file_list_ptr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    current_file = *file_paths;\n    current_file = *file_list_ptr;\nLAB_00102980:\n    int_var = filename_cmp(current_file,current_file);\n    if (int_var != 0) goto LAB_00105639;\nLAB_00102993:\n    if (file_list_ptr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      int_var = stat(*file_paths,&stat_struct);\n      if (int_var != 0) {\n        errno_ptr = __errno_location();\n        if (*errno_ptr != 2) {\n          print_error_message_and_exit_00107c10(*file_paths);\nLAB_00102b7e:\n          current_file = *file_list_ptr;\n          return_value = dcgettext(0,\"internal stat error on %s\",5);\n          print_formatted_error_message_and_exit_00107690(return_value,current_file);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      file_iterator2 = (char **)file_list_ptr[0x1d];\n      if ((char **)file_list_ptr[0x1d] == (char **)0x0) {\n        file_iterator2 = file_list_ptr;\n      }\n      int_var = (**(code **)(file_iterator2[1] + 0x1e8))(file_list_ptr,stack_array);\n      if (int_var != 0) goto LAB_00102b7e;\n      if (stat_struct.st_mtim.tv_sec <= last_modified_time) goto LAB_0010577e;\n    }\n    return_value = find_last_occurrence_00105870(current_file,2,*file_list_ptr);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      current_file = *file_paths;\n      bool_var = DAT_0010d60c != 0;\n      next_ptr = bfd_openr(current_file,DAT_0010d5f0);\n      if (next_ptr == 0) {\n        print_error_message_and_exit_00107c10(current_file,0);\n        goto LAB_00102b3e;\n      }\n      byte_var = print_and_update_data_00103172(return_value,next_ptr,bool_var);\n    }\n    else {\n      extracted_substring = extract_and_copy_substring_00105830(*file_paths,arg1);\n      int_var = filename_cmp(extracted_substring,\"__.LIBDEP\");\n      if (int_var != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_var = print_and_update_data_00103172(return_value,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byte_var != 0) {\n      *previous_node_ptr = *(char **)(*previous_node_ptr + 0xf0);\n      local_flag = byte_var;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_extracted_files_00105570",
            "entrypoint": "0x00105570",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105570": "process_extracted_files_00105570",
                "__s": "base_name2",
                "auStack_158": "stack_array",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "bVar3": "byte_var",
                "iVar4": "int_var",
                "lStack_100": "last_modified_time",
                "lVar11": "current_ptr",
                "lVar12": "next_ptr",
                "local_15a": "local_flag",
                "param_1": "arg1",
                "param_2": "file_paths",
                "param_3": "flag",
                "pcVar10": "current_file",
                "pcVar7": "current_file",
                "pcVar8": "basename",
                "piVar6": "errno_ptr",
                "ppcVar1": "current_file",
                "ppcVar15": "file_list_ptr",
                "ppcVar16": "file_iterator2",
                "ppcVar18": "previous_node_ptr",
                "sStack_c8": "stat_struct",
                "sVar5": "size_var",
                "uVar13": "return_value",
                "uVar14": "ulong_var",
                "uVar17": "uint_var",
                "uVar2": "undefined_var",
                "uVar9": "extracted_substring"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001057a0": {
            "additional_data": {
                "FUN_001057a0": {
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_temp_file": 1,
                    "allocate_temp_file": 1,
                    "allocate_temporary_file": 1,
                    "create_temp_file": 1,
                    "create_temp_file_with_prefix": 1,
                    "decompose_file_path": 1,
                    "extract_file_from_path": 1,
                    "extract_file_name": 4,
                    "extract_file_name_and_create_temp_file": 1,
                    "extract_file_path": 2,
                    "extract_file_path_and_create_temp_file": 1,
                    "extract_filename_and_create_temp_file": 1,
                    "extract_filepath": 1,
                    "extract_last_path": 1,
                    "reverse_and_allocate": 1,
                    "reverse_and_create_file": 1,
                    "reverse_and_create_temp_file": 2,
                    "reverse_and_save_filepath": 1,
                    "reverse_and_store_file_path": 1,
                    "reverse_extracted_file_name": 1,
                    "reverse_file_path_and_create_temp_file": 3,
                    "reverse_filepath": 1,
                    "reverse_filepath_and_create_temp_file": 1
                },
                "auVar8": {
                    "result": 16,
                    "result_buffer": 1,
                    "result_data": 1,
                    "result_storage": 1,
                    "return_val": 1,
                    "return_value": 10,
                    "return_values": 1
                },
                "bVar7": {
                    "char_count": 1,
                    "copy_direction": 1,
                    "flag": 2,
                    "found_delimiter": 1,
                    "has_slash": 2,
                    "increment": 2,
                    "is_first_char": 1,
                    "is_first_segment": 1,
                    "is_last_slash": 1,
                    "is_slash": 8,
                    "is_slash_found": 1,
                    "is_slash_present": 3,
                    "iteration_counter": 1,
                    "loop_direction": 1,
                    "no_slash": 1,
                    "offset": 1,
                    "skip_char": 1,
                    "slash_increment": 1,
                    "zero_byte": 1
                },
                "iVar1": {
                    "file_descriptor": 1,
                    "result": 6,
                    "temp_file_descriptor": 4
                },
                "lVar3": {
                    "file_name_length": 6,
                    "file_name_start": 1,
                    "file_path_len": 1,
                    "file_path_length": 1,
                    "filename_length": 3,
                    "filepath_length": 1,
                    "index": 1,
                    "input_path_length": 1,
                    "last_slash_offset": 1,
                    "len": 1,
                    "path_len": 1,
                    "path_length": 8,
                    "prefix_length": 4,
                    "substring_length": 1
                },
                "lVar4": {
                    "copy_index": 1,
                    "counter": 1,
                    "current_length": 1,
                    "current_pos": 1,
                    "file_name_end": 1,
                    "file_name_index": 1,
                    "i": 6,
                    "idx": 1,
                    "index": 9,
                    "iterator": 4,
                    "iterator1": 1,
                    "loop_counter": 2,
                    "remaining_length": 1,
                    "temp_var_1": 1
                },
                "lVar5": {
                    "delimiter_index": 1,
                    "diff": 2,
                    "file_name_length": 2,
                    "file_path_length": 1,
                    "iterator2": 1,
                    "last_separator_index": 1,
                    "last_slash_distance": 1,
                    "last_slash_index": 7,
                    "last_slash_length": 1,
                    "last_slash_offset": 5,
                    "path_difference": 1,
                    "path_length": 2,
                    "path_length_minus_1": 1,
                    "slash_offset": 3,
                    "substring_len": 1,
                    "temp_var_2": 1
                },
                "param_1": {
                    "file_path": 15,
                    "filepath": 3,
                    "input_file_name": 1,
                    "input_path": 2,
                    "input_string": 1,
                    "path": 9
                },
                "param_2": {
                    "file_descriptor": 24,
                    "file_descriptor_ptr": 1,
                    "output_fd": 1,
                    "output_file_descriptor": 3,
                    "temp_file_descriptor": 2
                },
                "param_3": {
                    "arg3": 4,
                    "arg_1": 1,
                    "param3": 2,
                    "parameter3": 1,
                    "prefix": 1,
                    "reserved_1": 1,
                    "unknown_param_1": 1,
                    "unused1": 4,
                    "unused_1": 1,
                    "unused_arg1": 1,
                    "unused_argument": 1,
                    "unused_param": 2,
                    "unused_param1": 3,
                    "unused_param_1": 3,
                    "unused_parameter": 1,
                    "unused_parameter1": 1,
                    "unused_parameter_1": 2,
                    "unused_variable_param3": 1
                },
                "param_4": {
                    "arg4": 4,
                    "arg_2": 1,
                    "data": 2,
                    "file_mode": 1,
                    "param4": 2,
                    "parameter4": 1,
                    "reserved_2": 1,
                    "suffix": 1,
                    "unknown_param_2": 1,
                    "unused2": 4,
                    "unused_2": 1,
                    "unused_arg2": 1,
                    "unused_param2": 3,
                    "unused_param_2": 4,
                    "unused_parameter": 1,
                    "unused_parameter2": 1,
                    "unused_parameter_2": 2
                },
                "pcVar2": {
                    "filename": 1,
                    "last_delimiter": 1,
                    "last_occurrence_of_slash": 1,
                    "last_slash": 24,
                    "last_slash_pos": 1,
                    "last_slash_position": 2,
                    "last_slash_ptr": 1
                },
                "pcVar6": {
                    "allocated_path": 3,
                    "allocated_string": 1,
                    "dst_filepath": 1,
                    "dynamic_file_name": 1,
                    "file_name": 2,
                    "new_file_path": 9,
                    "new_filepath": 3,
                    "new_path": 4,
                    "path_copy": 1,
                    "result_filename": 1,
                    "temp_file_path": 4,
                    "temp_path": 1
                }
            },
            "called": [
                "mkstemp",
                "strrchr",
                "FUN_00102ba1",
                "xmalloc"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "code": "\nundefined  [16] reverse_file_path_and_create_temp_file_001057a0(char *file_path,int *file_descriptor,undefined8 arg3,undefined8 arg4)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long index;\n  long last_slash_index;\n  char *new_file_path;\n  byte is_slash;\n  undefined result [16];\n  \n  is_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_slash_index = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_index + 0xb);\n    path_length = last_slash_index + 1;\n    new_file_path = last_slash;\n    for (index = last_slash_index; index != 0; index = index + -1) {\n      *new_file_path = *file_path;\n      file_path = file_path + (ulong)is_slash * -2 + 1;\n      new_file_path = new_file_path + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[last_slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_file_path = last_slash;\n  }\n  result._8_8_ = arg4;\n  result._0_8_ = new_file_path;\n  return result;\n}\n\n",
            "current_name": "reverse_file_path_and_create_temp_file_001057a0",
            "entrypoint": "0x001057a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001057a0": "reverse_file_path_and_create_temp_file_001057a0",
                "auVar8": "result",
                "bVar7": "is_slash",
                "iVar1": "result",
                "lVar3": "path_length",
                "lVar4": "index",
                "lVar5": "last_slash_index",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "arg3",
                "param_4": "arg4",
                "pcVar2": "last_slash",
                "pcVar6": "new_file_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105830": {
            "additional_data": {
                "FUN_00105830": {
                    "extract_and_copy_string": 2,
                    "extract_and_copy_substring": 3,
                    "extract_file_name": 1,
                    "extract_filename": 3,
                    "extract_param": 1,
                    "extract_string": 2,
                    "extract_string_from_binary": 1,
                    "extract_string_from_data": 1,
                    "extract_string_from_pointer": 1,
                    "extract_substring": 2,
                    "extracted_file_name": 1,
                    "extracted_string": 3,
                    "extracted_substr": 1,
                    "parse_file_name": 2,
                    "process_filename": 1,
                    "reverse_string": 5
                },
                "__s": {
                    "base_file_name": 1,
                    "base_name": 19,
                    "basename": 3,
                    "basename_result": 3,
                    "basename_str": 1,
                    "basename_string": 3,
                    "file_name": 1
                },
                "auVar6": {
                    "result": 18,
                    "ret_val": 1,
                    "return_data": 1,
                    "return_val": 1,
                    "return_value": 8
                },
                "bVar5": {
                    "byte": 1,
                    "byte_count": 1,
                    "byte_flag": 2,
                    "byte_value": 6,
                    "byte_var": 3,
                    "counter": 1,
                    "flag": 5,
                    "is_increment": 1,
                    "is_negative": 2,
                    "loop_condition": 1,
                    "loop_counter": 4,
                    "loop_index": 2,
                    "offset": 1
                },
                "lVar1": {
                    "data_pointer_value": 1,
                    "info_array_pointer": 1,
                    "memory_block_address": 1,
                    "struct_data": 1,
                    "struct_field": 1,
                    "struct_field_ptr": 1,
                    "struct_value": 2,
                    "struct_var": 1
                },
                "param_1": {
                    "file_name": 2,
                    "file_path": 2,
                    "filename": 7,
                    "filepath": 1,
                    "input_string": 14,
                    "original_file_name": 1,
                    "original_string": 2,
                    "source_string": 2
                },
                "param_2": {
                    "additional_data": 2,
                    "binary_data": 1,
                    "buffer": 1,
                    "data_pointer": 3,
                    "file_info_ptr": 1,
                    "info_array": 1,
                    "info_ptr": 1,
                    "input_struct": 1,
                    "memory_block": 1,
                    "metadata": 1,
                    "pointer_data": 1,
                    "pointer_struct": 1,
                    "struct_addr": 1,
                    "struct_address": 2,
                    "struct_pointer": 3,
                    "struct_ptr": 10
                },
                "param_3": {
                    "param3": 1,
                    "parameter_3": 1,
                    "unknown1": 1,
                    "unused1": 3,
                    "unused_param": 8,
                    "unused_param1": 6,
                    "unused_param_1": 3,
                    "unused_parameter": 2,
                    "unused_parameter1": 2,
                    "var1": 1,
                    "var3": 1
                },
                "param_4": {
                    "output": 1,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_param": 2,
                    "output_pointer": 1,
                    "param4": 1,
                    "parameter_4": 1,
                    "result": 2,
                    "unknown2": 1,
                    "unused2": 3,
                    "unused_param2": 9,
                    "unused_param_2": 3,
                    "unused_parameter": 1,
                    "unused_parameter2": 2,
                    "var2": 1,
                    "var4": 1
                },
                "pcVar4": {
                    "copied_string": 1,
                    "current_char": 1,
                    "dest_ptr": 6,
                    "destination_string": 2,
                    "extracted_string": 1,
                    "new_file_name_ptr": 1,
                    "new_filename": 2,
                    "new_string": 2,
                    "output_ptr": 1,
                    "output_str": 1,
                    "output_string": 13
                },
                "sVar2": {
                    "base_name_length": 4,
                    "basename_length": 4,
                    "file_length": 1,
                    "file_name_length": 1,
                    "filename_length": 3,
                    "input_length": 2,
                    "input_string_length": 2,
                    "input_string_size": 1,
                    "input_strlen": 1,
                    "length": 1,
                    "original_file_name_length": 1,
                    "original_string_length": 1,
                    "source_length": 1,
                    "string_length": 6
                },
                "uVar3": {
                    "buffer_length": 1,
                    "byte_count": 1,
                    "byte_value": 2,
                    "desired_length": 1,
                    "limit": 1,
                    "max_basename_length": 1,
                    "max_copy_length": 1,
                    "max_length": 11,
                    "max_size": 1,
                    "max_string_length": 2,
                    "name_length": 1,
                    "required_length": 1,
                    "string_length": 1,
                    "struct_byte": 1,
                    "substr_length": 2,
                    "substring_length": 2,
                    "target_length": 1
                }
            },
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00105480"
            ],
            "code": "\nundefined  [16] extract_and_copy_substring_00105830(char *input_string,long struct_ptr,undefined8 unused_param,undefined8 unused_param2)\n\n{\n  long struct_value;\n  size_t string_length;\n  char *base_name;\n  ulong max_length;\n  char *output_string;\n  byte byte_value;\n  undefined result [16];\n  \n  byte_value = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    input_string = base_name;\n    if ((DAT_0010d5fa != '\\0') && (struct_ptr != 0)) {\n      string_length = strlen(base_name);\n      max_length = (ulong)*(byte *)(*(long *)(struct_ptr + 8) + 0x1e);\n      if (max_length < string_length) {\n        input_string = (char *)xmalloc(max_length + 1);\n        struct_value = *(long *)(struct_ptr + 8);\n        output_string = input_string;\n        for (max_length = (ulong)*(byte *)(struct_value + 0x1e); max_length != 0; max_length = max_length - 1) {\n          *output_string = *base_name;\n          base_name = base_name + (ulong)byte_value * -2 + 1;\n          output_string = output_string + (ulong)byte_value * -2 + 1;\n        }\n        input_string[*(byte *)(struct_value + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = unused_param2;\n  result._0_8_ = input_string;\n  return result;\n}\n\n",
            "current_name": "extract_and_copy_substring_00105830",
            "entrypoint": "0x00105830",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105830": "extract_and_copy_substring_00105830",
                "__s": "base_name",
                "auVar6": "result",
                "bVar5": "byte_value",
                "lVar1": "struct_value",
                "param_1": "input_string",
                "param_2": "struct_ptr",
                "param_3": "unused_param",
                "param_4": "unused_param2",
                "pcVar4": "output_string",
                "sVar2": "string_length",
                "uVar3": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105870": {
            "additional_data": {
                "0x0": {
                    "null_pointer": 1
                },
                "0xf0": {
                    "file_size": 1
                },
                "FUN_00105870": {
                    "find_file": 1,
                    "find_file_name": 1,
                    "find_file_offset": 1,
                    "find_file_or_last_element": 1,
                    "find_filename": 1,
                    "find_last_filename": 1,
                    "find_last_match": 2,
                    "find_last_match_or_end": 3,
                    "find_last_matching_entry": 1,
                    "find_last_matching_file": 1,
                    "find_last_occurrence": 9,
                    "find_matching_element": 1,
                    "find_matching_entry": 6,
                    "find_matching_pointer": 1,
                    "search_files": 1
                },
                "iVar1": {
                    "cmp_result": 13,
                    "compare_result": 2,
                    "comparison_result": 14,
                    "result": 2
                },
                "iVar3": {
                    "cmp_type": 1,
                    "comparison_type": 2,
                    "condition": 2,
                    "file_option": 1,
                    "loop_condition": 1,
                    "matching_option": 1,
                    "mode": 10,
                    "operation": 1,
                    "operation_code": 1,
                    "option": 1,
                    "search_mode": 3,
                    "search_option": 2,
                    "search_type": 4
                },
                "new_var_1": {
                    "current_entry": 1
                },
                "param_1": {
                    "array": 14,
                    "entries": 3,
                    "entry_list": 4,
                    "file_entries": 1,
                    "file_list": 6,
                    "offset_list": 1,
                    "pointer_array": 1,
                    "ptr_list": 1
                },
                "param_2": {
                    "array_length": 2,
                    "array_size": 1,
                    "comparison_mode": 1,
                    "comparison_value": 1,
                    "count": 6,
                    "entry_count": 3,
                    "entry_list_size": 1,
                    "file_count": 3,
                    "length": 4,
                    "list_size": 1,
                    "num_entries": 3,
                    "num_files": 2,
                    "search_mode": 1,
                    "size": 2
                },
                "param_3": {
                    "desired_file_name": 1,
                    "filename": 7,
                    "search_item": 1,
                    "search_key": 2,
                    "search_param": 1,
                    "search_term": 2,
                    "search_value": 4,
                    "target": 5,
                    "target_file": 4,
                    "target_filename": 2,
                    "target_name": 1,
                    "target_value": 1
                },
                "uVar2": {
                    "default_file": 2,
                    "default_file_name": 1,
                    "default_filename": 3,
                    "default_key": 1,
                    "default_name": 1,
                    "default_search_term": 2,
                    "default_search_value": 1,
                    "default_target": 2,
                    "default_value": 1,
                    "search_value": 1
                }
            },
            "called": [
                "FUN_00102cd9"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "code": "\nlong * find_last_occurrence_00105870(long *array,int count,undefined8 filename)\n\n{\n  int comparison_result;\n  undefined8 default_filename;\n  int mode;\n  \n  default_filename = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_filename = filename;\n    mode = count;\n  }\n  if (mode == 3) {\n    for (; *array != 0; array = (long *)(*array + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*array != (undefined8 *)0x0; array = (long *)(*array + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*array,default_filename);\n      if (comparison_result == 0) {\n        if (mode != 2) {\n          return array;\n        }\n        return (long *)(*array + 0xf0);\n      }\n    }\n  }\n  return array;\n}\n\n",
            "current_name": "find_last_occurrence_00105870",
            "entrypoint": "0x00105870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105870": "find_last_occurrence_00105870",
                "iVar1": "comparison_result",
                "iVar3": "mode",
                "param_1": "array",
                "param_2": "count",
                "param_3": "filename",
                "uVar2": "default_filename"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001058b0": {
            "additional_data": {
                "DAT_0010d5e0": {
                    "global_bfd_file": 1
                },
                "DAT_0010d5f8": {
                    "flag3": 1
                },
                "DAT_0010d5f9": {
                    "flag2": 1
                },
                "DAT_0010d5fa": {
                    "flag1": 1
                },
                "DAT_0010d618": {
                    "global_temp_file_stream": 1
                },
                "DAT_0010d648": {
                    "some_value": 1
                },
                "FUN_001058b0": {
                    "extract_and_print_archive_info": 1,
                    "extract_and_reverse_file_path": 1,
                    "print_and_exit_archive": 1,
                    "print_archive_contents": 1,
                    "print_archive_file_information": 1,
                    "print_archive_info": 1,
                    "print_reverse_file": 1,
                    "process_archive": 3,
                    "process_archive_file": 9,
                    "process_file": 2,
                    "reverse_and_print_archive": 3,
                    "reverse_and_print_archive_info": 1,
                    "reverse_and_print_archive_stats": 1,
                    "reverse_and_print_file_archive_info": 1,
                    "reverse_archive_and_print": 1,
                    "reverse_file_and_create_temp_archive": 1,
                    "write_archive_file": 1,
                    "write_archive_to_file": 1
                },
                "_DAT_0010d2d0": {
                    "some_flag": 1
                },
                "__format": {
                    "corruption_message": 1,
                    "error_format": 2,
                    "error_message": 1,
                    "error_message_format": 8,
                    "error_msg_format": 2,
                    "format_str": 1,
                    "format_string": 6,
                    "localized_message": 1,
                    "message_format": 1,
                    "time_data_format": 1,
                    "time_error_message": 1,
                    "time_error_string": 1,
                    "time_format": 2
                },
                "__ptr": {
                    "copied_path": 1,
                    "duplicate_file_path": 1,
                    "duplicate_pointer": 1,
                    "duplicated_file_path": 3,
                    "duplicated_file_paths": 1,
                    "duplicated_path": 1,
                    "duplicated_string": 1,
                    "file_path": 5,
                    "file_path_copy": 7,
                    "file_path_pointer": 1,
                    "file_path_ptr": 1,
                    "file_paths_copy": 2,
                    "file_ptr": 1,
                    "file_string": 1,
                    "new_file_path": 1,
                    "path": 1,
                    "pointer": 1,
                    "temp_file_path": 1
                },
                "__stream": {
                    "archive_file": 2,
                    "file": 1,
                    "file_pointer": 1,
                    "file_stream": 6,
                    "output_stream": 1,
                    "temp_file": 15,
                    "temp_file_descriptor": 1,
                    "temp_file_ptr": 1,
                    "temp_file_stream": 3
                },
                "_uStack0000000000000020": {
                    "permission_mode": 1
                },
                "cStack_31": {
                    "char2": 1,
                    "char_stack31": 1,
                    "character2": 1,
                    "character_3": 1,
                    "character_stack2": 1,
                    "file_permission_char2": 1,
                    "file_permissions_2": 1,
                    "file_type": 1,
                    "file_type_char2": 1,
                    "file_type_char3": 1,
                    "flag_char2": 1,
                    "group_permissions": 1,
                    "is_character_device": 1,
                    "is_set_char2": 1,
                    "is_set_gid": 1,
                    "is_setgid": 4,
                    "is_writeable": 1,
                    "owner_write_permission": 1,
                    "set_user_write_permissions": 1,
                    "stack_char2": 1,
                    "stack_var6": 1,
                    "third_char": 2,
                    "third_permission": 1,
                    "writable_flag_char": 1,
                    "write_permission_char": 1
                },
                "cStack_32": {
                    "char1": 1,
                    "char_stack32": 1,
                    "character1": 1,
                    "character_2": 1,
                    "character_stack1": 1,
                    "executable_flag_char": 1,
                    "file_permission_char": 1,
                    "file_permissions_1": 1,
                    "file_type_char1": 1,
                    "file_type_char2": 1,
                    "flag_char1": 1,
                    "is_executable": 1,
                    "is_set_char1": 1,
                    "is_set_uid": 1,
                    "is_setuid": 4,
                    "is_symbolic_link": 1,
                    "owner_permissions": 1,
                    "owner_read_permission": 1,
                    "permission_bits": 1,
                    "read_permission_char": 1,
                    "second_char": 2,
                    "second_permission": 1,
                    "set_user_read_permissions": 1,
                    "stack_char1": 1,
                    "stack_var5": 1
                },
                "cVar1": {
                    "char_temp": 1,
                    "char_value": 3,
                    "char_var": 1,
                    "character_var": 1,
                    "error_flag": 1,
                    "flag": 1,
                    "is_success": 1,
                    "result": 17,
                    "ret": 1,
                    "return_value": 1,
                    "status": 1,
                    "temp_char": 1
                },
                "iVar3": {
                    "dup_error_code": 1,
                    "dup_file_descriptor": 1,
                    "duplicated_file_desc": 1,
                    "fd": 3,
                    "file_descriptor": 17,
                    "integer_var": 1,
                    "temp_fd": 1,
                    "temp_file_descriptor": 2,
                    "temp_int": 1
                },
                "in_stack_00000028": {
                    "archive_size": 1,
                    "file_device": 1,
                    "file_group_id": 1,
                    "file_link_count": 1,
                    "file_permissions": 3,
                    "file_size": 5,
                    "file_size_high": 1,
                    "file_stat2": 1,
                    "file_type": 1,
                    "file_uid": 1,
                    "group_id": 1,
                    "hard_links": 1,
                    "in_stack_var": 1,
                    "in_stack_var1": 1,
                    "inode": 2,
                    "inode_number": 2,
                    "integer_param": 1,
                    "stack2": 1,
                    "stack_int1": 1,
                    "stack_var1": 2,
                    "stack_var2": 1,
                    "total_links": 1
                },
                "in_stack_00000038": {
                    "another_in_stack_var": 1,
                    "file_inode": 1,
                    "file_size": 10,
                    "file_size_low": 1,
                    "file_time": 1,
                    "filesize": 1,
                    "in_stack_var2": 1,
                    "last_modification_time": 1,
                    "last_modified_time": 1,
                    "long_param": 1,
                    "mod_time": 1,
                    "modification_time": 1,
                    "modified_date": 1,
                    "modified_time": 1,
                    "modified_timestamp": 1,
                    "size": 1,
                    "stack3": 1,
                    "stack_uint2": 1,
                    "stack_var2": 2,
                    "stack_var3": 1,
                    "timestamp": 1
                },
                "local_3c": {
                    "archive_data": 1,
                    "error": 1,
                    "error_array": 1,
                    "error_code": 5,
                    "error_code_array": 1,
                    "error_codes": 9,
                    "error_values_array": 1,
                    "local_array": 1,
                    "local_int_array": 1,
                    "local_var": 1,
                    "status": 1,
                    "temp": 1,
                    "temp_file_descriptor": 2,
                    "temp_file_error": 3,
                    "temp_file_status": 1
                },
                "param_1": {
                    "archive_info": 1,
                    "archive_path": 2,
                    "archive_paths": 1,
                    "args": 1,
                    "arguments": 1,
                    "file_info": 1,
                    "file_paths": 20,
                    "input_params": 1,
                    "parameters": 2
                },
                "ppcVar5": {
                    "archive": 1,
                    "archive_file_info": 1,
                    "archive_ptr": 1,
                    "bfd_file": 3,
                    "bfd_handle": 2,
                    "bfd_object": 1,
                    "bfd_stream": 2,
                    "file_data": 1,
                    "file_descriptor": 5,
                    "file_descriptor_pointer": 1,
                    "file_descriptor_ptr": 2,
                    "file_formats": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "format_options": 1,
                    "format_pointer": 1,
                    "format_ptr": 1,
                    "formatting_info": 1,
                    "open_file": 1,
                    "pointer_pointer_char": 1,
                    "pointer_to_pointer": 1,
                    "temp_file_name": 1
                },
                "stack0xffffffffffffffd8": {
                    "formatted_string": 1
                },
                "uStack0000000000000020": {
                    "file_attributes": 1,
                    "file_info": 1,
                    "file_mode": 10,
                    "file_mode_and_type": 1,
                    "file_mode_bitmask": 1,
                    "file_permission": 2,
                    "file_permissions": 7,
                    "file_stat": 1,
                    "file_stats": 2,
                    "mode_and_permission": 1,
                    "permissions": 1,
                    "stack1": 1,
                    "stack_uint1": 1,
                    "stack_var1": 1
                },
                "uStack_33": {
                    "character_1": 1,
                    "file_permission_char": 1,
                    "file_type": 9,
                    "file_type_char": 6,
                    "file_type_char1": 1,
                    "file_type_symbol": 1,
                    "first_char": 2,
                    "first_permission": 1,
                    "permission_char": 1,
                    "stack4": 1,
                    "stack_byte1": 1,
                    "stack_var4": 1,
                    "type_char": 1
                },
                "uVar2": {
                    "flags": 20,
                    "format_flags": 5,
                    "temp_uint": 1,
                    "temp_var": 2,
                    "unsigned_var": 1,
                    "var1": 1,
                    "var2": 1
                },
                "uVar4": {
                    "archive_file": 1,
                    "archive_file_size": 1,
                    "archive_handle": 1,
                    "archive_head": 1,
                    "error_message": 1,
                    "file_path": 1,
                    "format": 1,
                    "format_message": 1,
                    "locale_string": 1,
                    "msg_ptr": 1,
                    "param_value": 1,
                    "param_var": 1,
                    "temp_dir_path": 1,
                    "temp_file": 7,
                    "temp_file_path": 3,
                    "temp_file_ptr": 1,
                    "temp_uint64": 1,
                    "temp_value": 1,
                    "time": 1,
                    "unsigned_var2": 1
                }
            },
            "called": [
                "close",
                "xstrdup",
                "FUN_00107c10",
                "FUN_001057a0",
                "bfd_fdopenw",
                "bfd_set_format",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00107650"
            ],
            "code": "\n\n\nvoid process_archive_file_001058b0(undefined8 *file_paths)\n\n{\n  char result;\n  uint flags;\n  int file_descriptor;\n  undefined8 temp_file;\n  char *error_message_format;\n  void *file_path_copy;\n  FILE *temp_file;\n  char **file_descriptor;\n  uint file_mode;\n  uint file_size;\n  undefined8 file_size;\n  int error_codes [2];\n  undefined file_type;\n  char is_setuid;\n  char is_setgid;\n  \n  temp_file = file_paths[0x1e];\n  error_codes[0] = -1;\n  file_path_copy = (void *)xstrdup(*file_paths);\n  temp_file = (FILE *)reverse_file_path_and_create_temp_file_001057a0(file_path_copy,error_codes);\n  file_descriptor = error_codes[0];\n  if (temp_file != (FILE *)0x0) {\n    DAT_0010d618 = temp_file;\n    file_descriptor = (char **)bfd_fdopenw(temp_file,*(undefined8 *)file_paths[1],error_codes[0]);\n    if (file_descriptor != (char **)0x0) {\n      DAT_0010d5e0 = file_descriptor;\n      bfd_set_format(file_descriptor,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)file_descriptor + 0x49) & 0xfffffff7;\n      *(char *)((long)file_descriptor + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)file_paths + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)file_descriptor + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(file_descriptor,temp_file);\n        if (result != '\\0') break;\n        flags = print_error_message_and_exit_00107c10(file_path_copy);\nLAB_00102d37:\n        *(uint *)((long)file_descriptor + 0x44) = *(uint *)((long)file_descriptor + 0x44) | 0x100000;\n      }\n      file_descriptor = dup(file_descriptor);\n      result = bfd_close(file_descriptor);\n      if (result == '\\0') {\n        print_error_message_and_exit_00107c10(file_path_copy);\n        error_message_format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&formatted_string,error_message_format);\n        flags = file_mode & 0xf000;\n        if (flags == 0x4000) {\n          file_type = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type = 0x73;\n        }\n        else {\n          file_type = 0x70;\n          if (flags != 0x1000) {\n            file_type = 0x2d;\n          }\n        }\n        is_setuid = (-((permission_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        is_setgid = (-((permission_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(temp_file,\"%s %ld/%ld %6lu %s \",&is_setuid,permission_mode >> 0x20,\n                (ulong)file_size,file_size,&formatted_string,\n                permission_mode & 0xffffffff);\n        fputs(*file_descriptor,temp_file);\n        if ((char)file_paths != '\\0') {\n          if ((*(byte *)((long)file_descriptor + 0x49) & 0x10) == 0) {\n            if (file_descriptor[0xb] != (char *)0x0) {\n              fprintf(temp_file,\" 0x%lx\");\n            }\n          }\n          else if (file_descriptor[0xc] != (char *)0x0) {\n            fprintf(temp_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,temp_file);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(file_paths);\n      file_descriptor = copy_and_print_error_message_00105bc0(temp_file,file_path_copy,file_descriptor);\n      if (file_descriptor == 0) {\n        free(file_path_copy);\n        free(temp_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(file_descriptor);\n    print_error_message_and_exit_00107c10(file_path_copy);\n  }\n  temp_file = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  print_error_message_and_exit_00107c10(temp_file);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "current_name": "process_archive_file_001058b0",
            "entrypoint": "0x001058b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001058b0": "process_archive_file_001058b0",
                "__format": "error_message_format",
                "__ptr": "file_path_copy",
                "__stream": "temp_file",
                "_uStack0000000000000020": "permission_mode",
                "cStack_31": "is_setgid",
                "cStack_32": "is_setuid",
                "cVar1": "result",
                "iVar3": "file_descriptor",
                "in_stack_00000028": "file_size",
                "in_stack_00000038": "file_size",
                "local_3c": "error_codes",
                "param_1": "file_paths",
                "ppcVar5": "file_descriptor",
                "stack0xffffffffffffffd8": "formatted_string",
                "uStack0000000000000020": "file_mode",
                "uStack_33": "file_type",
                "uVar2": "flags",
                "uVar4": "temp_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105a20": {
            "additional_data": {
                "DAT_00108260": {
                    "default_path": 1
                },
                "DAT_0010d5e8": {
                    "base_directory_cache": 1,
                    "base_path": 1
                },
                "DAT_0010d60c": {
                    "is_verbose": 1,
                    "verbose_flag": 1
                },
                "DAT_0010d618": {
                    "file_path": 1,
                    "filename_cache": 1
                },
                "FUN_00105a20": {
                    "create_output_file": 1,
                    "extract_and_write_file": 1,
                    "extract_archive_member": 8,
                    "extract_archive_member_to_file": 1,
                    "extract_file": 1,
                    "extract_file_from_binary": 1,
                    "extract_file_path": 1,
                    "extract_output_file": 1,
                    "extract_output_path": 1,
                    "open_or_create_file": 1,
                    "open_output_file": 2,
                    "process_archive_member": 1,
                    "process_archive_member_path": 1,
                    "process_file": 3,
                    "process_output_path": 4,
                    "process_path": 1,
                    "write_to_file": 1
                },
                "FUN_00105a68": {
                    "cleanup": 1
                },
                "FUN_00107920": {
                    "print_error": 1
                },
                "LAB_00102e9a": {
                    "handle_illegal_output_pathname": 1
                },
                "concat": {
                    "concatenate_paths": 1,
                    "concatenate_strings": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "fopen": {
                    "open_file": 1
                },
                "lbasename": {
                    "get_basename": 1
                },
                "pFVar5": {
                    "file": 6,
                    "file_handle": 1,
                    "file_pointer": 13,
                    "file_ptr": 5,
                    "output_file": 5,
                    "output_file_ptr": 1
                },
                "param_1": {
                    "file_path": 3,
                    "filename": 1,
                    "input_path": 5,
                    "output_path": 16,
                    "path": 4,
                    "pathname": 1
                },
                "pcVar1": {
                    "archive_path": 2,
                    "base_dir": 6,
                    "base_directory": 5,
                    "base_name": 3,
                    "base_output_path": 2,
                    "base_path": 10,
                    "current_directory": 1,
                    "current_path": 1,
                    "output_dir": 1
                },
                "pcVar2": {
                    "curr_path": 1,
                    "current": 1,
                    "current_char": 1,
                    "current_dir": 4,
                    "current_directory": 1,
                    "current_path": 20,
                    "next_path": 1,
                    "sub_path": 1,
                    "temp": 1
                },
                "perror": {
                    "print_error": 1
                },
                "printf": {
                    "print_filename": 1
                },
                "sVar6": {
                    "archive_path_len": 1,
                    "base_dir_len": 2,
                    "base_dir_length": 5,
                    "base_directory_length": 2,
                    "base_len": 1,
                    "base_length": 1,
                    "base_name_length": 2,
                    "base_output_path_length": 1,
                    "base_path_length": 6,
                    "basename_length": 1,
                    "dir_length": 1,
                    "length": 3,
                    "path_len": 1,
                    "path_length": 4
                },
                "strlen": {
                    "get_length": 1
                },
                "uVar3": {
                    "base_name": 13,
                    "base_name_ptr": 1,
                    "base_name_result": 1,
                    "base_output_name": 1,
                    "base_path": 1,
                    "basename": 2,
                    "basename_result": 5,
                    "extracted_path": 2,
                    "file_name": 1,
                    "output_file_name": 1,
                    "output_path_ptr": 2,
                    "result": 1
                },
                "uVar4": {
                    "err_message": 1,
                    "err_msg": 1,
                    "error_format_string": 1,
                    "error_message": 21,
                    "error_message_ptr": 1,
                    "error_msg": 3,
                    "error_msg_ptr": 1,
                    "error_str": 1,
                    "error_string": 1
                },
                "xexit": {
                    "exit_program": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\nvoid extract_archive_member_to_file_00105a20(char *output_path)\n\n{\n  char *base_path;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t base_path_length;\n  \n  base_path = DAT_0010d5e8;\n  DAT_0010d618 = output_path;\n  if (*output_path == '/') {\nhandle_illegal_output_pathname:\n    base_name = lbasename();\n    base_path = DAT_0010d618;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_with_formatted_message_00107920(error_message,base_path,base_name);\n    DAT_0010d618 = (char *)base_name;\n    write_data_to_file_00105a68();\n    return;\n  }\n  do {\n    if (*output_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (base_path_length = strlen(DAT_0010d5e8), base_path_length != 0)) {\n        if (base_path[base_path_length - 1] == '/') {\n          DAT_0010d618 = (char *)concatenate_paths(base_path,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concatenate_paths(base_path,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_pointer = fopen(DAT_0010d618,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = output_path;\n    if ((*output_path == '.') && (current_path = output_path + 1, output_path[1] == '.')) {\n      current_path = output_path + 2;\n      if ((output_path[2] == '/') || (output_path[2] == '\\0')) goto handle_illegal_output_pathname;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; output_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "extract_archive_member_to_file_00105a20",
            "entrypoint": "0x00105a20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105a20": "extract_archive_member_to_file_00105a20",
                "LAB_00102e9a": "handle_illegal_output_pathname",
                "concat": "concatenate_paths",
                "dcgettext": "get_error_message",
                "fopen": "open_file",
                "lbasename": "get_basename",
                "pFVar5": "file_pointer",
                "param_1": "output_path",
                "pcVar1": "base_path",
                "pcVar2": "current_path",
                "perror": "print_error",
                "printf": "print_filename",
                "sVar6": "base_path_length",
                "strlen": "get_length",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105a68": {
            "additional_data": {
                "DAT_0010d5e8": {
                    "directory_path": 1,
                    "input_dir_ptr": 1,
                    "input_directory": 1
                },
                "DAT_0010d60c": {
                    "flag": 1,
                    "print_output": 1,
                    "should_print": 1
                },
                "DAT_0010d618": {
                    "file_path": 1,
                    "output_file_path": 1,
                    "output_path": 1
                },
                "FUN_00105a68": {
                    "generate_file": 1,
                    "generate_output_file": 2,
                    "initialize_and_write_to_file": 1,
                    "prepare_and_write_file": 1,
                    "process_data": 2,
                    "process_file": 4,
                    "process_file_path": 1,
                    "reformatted_function": 1,
                    "write_data_to_file": 1,
                    "write_file": 1,
                    "write_to_file": 15,
                    "write_to_file_if_needed": 1
                },
                "concat": {
                    "concatenate_strings": 3
                },
                "pFVar2": {
                    "file": 6,
                    "file_pointer": 17,
                    "file_ptr": 6,
                    "output_file": 2
                },
                "pcVar1": {
                    "base_path": 1,
                    "directory": 5,
                    "directory_path": 11,
                    "file_directory": 2,
                    "file_path": 4,
                    "input_directory": 1,
                    "input_path": 3,
                    "path": 3,
                    "source_directory": 1
                },
                "sVar3": {
                    "base_path_length": 1,
                    "directory_length": 7,
                    "directory_path_length": 5,
                    "file_directory_length": 2,
                    "file_length": 1,
                    "file_path_length": 1,
                    "input_path_length": 2,
                    "input_size": 2,
                    "length": 4,
                    "path_length": 4,
                    "source_length": 1,
                    "string_length": 1
                }
            },
            "called": [
                "fopen",
                "strlen",
                "perror",
                "FUN_00102e57",
                "xexit",
                "concat",
                "printf"
            ],
            "calling": [
                "FUN_00102e6f"
            ],
            "code": "\nvoid write_data_to_file_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *file_pointer;\n  size_t directory_length;\n  \n  directory_path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directory_length = strlen(DAT_0010d5e8);\n    if (directory_length != 0) {\n      if (directory_path[directory_length - 1] == '/') {\n        DAT_0010d618 = (char *)concatenate_strings(directory_path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concatenate_strings(directory_path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "write_data_to_file_00105a68",
            "entrypoint": "0x00105a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105a68": "write_data_to_file_00105a68",
                "concat": "concatenate_strings",
                "pFVar2": "file_pointer",
                "pcVar1": "directory_path",
                "sVar3": "directory_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105ae0": {
            "additional_data": {
                "FUN_00105ae0": {
                    "process_archived_files": 31
                },
                "param_1": {
                    "archive": 2,
                    "archive_directory": 1,
                    "archive_file": 1,
                    "archive_file_path": 1,
                    "archive_name": 1,
                    "archive_path": 7,
                    "archive_ptr": 1,
                    "file_name": 1,
                    "file_path": 8,
                    "file_pointer": 2,
                    "input_file": 1,
                    "input_param": 2,
                    "input_param_1": 3
                },
                "param_2": {
                    "archive_file": 1,
                    "archive_pointer": 1,
                    "archive_size": 1,
                    "data_pointer": 1,
                    "extract_path": 2,
                    "extracted_files": 1,
                    "file_descriptor": 1,
                    "file_name": 1,
                    "file_options": 1,
                    "input_param_2": 3,
                    "metadata": 1,
                    "options": 1,
                    "output_dir": 2,
                    "output_directory": 5,
                    "output_file": 1,
                    "output_param": 2,
                    "output_path": 6
                },
                "param_3": {
                    "extra_param1": 1,
                    "extra_param_1": 1,
                    "flag1": 2,
                    "flag_1": 6,
                    "input_param_3": 3,
                    "option1": 4,
                    "option_1": 8,
                    "param_3": 4,
                    "undefined3": 1,
                    "unused_param": 1
                },
                "param_4": {
                    "extra_param2": 1,
                    "extra_param_2": 1,
                    "flag2": 2,
                    "flag_2": 6,
                    "input_param_4": 3,
                    "option2": 4,
                    "option_2": 8,
                    "param_4": 4,
                    "undefined4": 1,
                    "unused_param": 1
                }
            },
            "called": [
                "FUN_00105af0"
            ],
            "calling": [
                "FUN_001028ed"
            ],
            "code": "\nvoid process_archived_files_00105ae0(undefined8 file_path,undefined8 output_path,undefined option_1,undefined option_2)\n\n{\n  process_archived_files_00105ae0_00105af0(file_path,output_path,option_1,option_2);\n  return;\n}\n\n",
            "current_name": "process_archived_files_00105ae0",
            "entrypoint": "0x00105ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105ae0": "process_archived_files_00105ae0",
                "param_1": "file_path",
                "param_2": "output_path",
                "param_3": "option_1",
                "param_4": "option_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105af0": {
            "additional_data": {
                "FUN_00105af0": {
                    "archive_file_handling": 1,
                    "archive_file_search": 1,
                    "extract_and_print_archived_files": 1,
                    "extract_archived_files": 1,
                    "process_archived_files": 5,
                    "process_files": 13,
                    "process_files_recursive": 2,
                    "read_and_process_files": 1,
                    "reverse_archive_files": 1,
                    "reverse_archived_files": 2
                },
                "bfd_check_format": {
                    "check_bfd_format": 1
                },
                "bfd_openr_next_archived_file": {
                    "get_next_archived_file": 1
                },
                "cVar1": {
                    "": 1,
                    "check_result": 2,
                    "format_check": 1,
                    "format_check_result": 6,
                    "format_valid": 2,
                    "is_bfd_checked": 1,
                    "is_bfd_format": 1,
                    "is_bfd_format_valid": 1,
                    "is_bfd_valid": 4,
                    "is_valid": 1,
                    "is_valid_bfd": 1,
                    "is_valid_format": 10
                },
                "lVar3": {
                    "": 1,
                    "archived_file": 18,
                    "archived_file_handle": 1,
                    "archived_file_ptr": 1,
                    "current_file": 1,
                    "file_entry": 1,
                    "file_handle": 3,
                    "file_ptr": 2,
                    "next_file": 3
                },
                "param_1": {
                    "archive": 1,
                    "archive_list_ptr": 1,
                    "array_ptr": 1,
                    "data_array": 1,
                    "file_array": 1,
                    "file_list": 22,
                    "file_list_ptr": 1,
                    "file_ptr": 1,
                    "files": 1,
                    "input_list": 1
                },
                "param_2": {
                    "archive": 5,
                    "archive_file": 10,
                    "archive_handle": 2,
                    "archive_ptr": 1,
                    "current_file": 5,
                    "current_file_ptr": 1,
                    "file": 2,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "file_ptr": 3
                },
                "param_3": {
                    "debug_mode": 1,
                    "enable_print": 1,
                    "flag1": 8,
                    "flag_1": 2,
                    "print_enabled": 2,
                    "print_flag": 12,
                    "print_variable": 3,
                    "should_print": 2
                },
                "param_4": {
                    "archive_flag": 1,
                    "check_flag": 7,
                    "check_format": 8,
                    "check_format_flag": 2,
                    "flag2": 8,
                    "flag_2": 2,
                    "format_check": 1,
                    "format_check_flag": 1,
                    "should_extract": 1
                },
                "print_and_set_variable_00102f08": {
                    "print_and_set_variable": 5
                },
                "uVar2": {
                    "": 1,
                    "extract_result": 1,
                    "func_result": 1,
                    "result": 26,
                    "sub_result": 1,
                    "subfunction_result": 1
                },
                "uVar4": {
                    "final_result": 1,
                    "is_found": 1,
                    "num_extracted": 1,
                    "num_files_processed": 1,
                    "num_successful": 1,
                    "num_valid_files": 1,
                    "output": 3,
                    "result": 3,
                    "return_val": 2,
                    "return_value": 14,
                    "success": 1,
                    "total_result": 2
                }
            },
            "called": [
                "FUN_00102f08",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "bfd_check_format"
            ],
            "calling": [
                "FUN_001028ed",
                "FUN_00105ae0",
                "FUN_00105af0"
            ],
            "code": "\nulong process_archived_files_00105af0(long *file_list,long archive_file,char print_flag,char check_format)\n\n{\n  char is_valid_format;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (check_format == '\\0') {\n    if (print_flag != '\\0') {\n      return_value = print_and_set_variable();\n      return return_value;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_file,2);\n    if (is_valid_format != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        result = process_archived_files_00105af0(file_list,archived_file,print_flag,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (print_flag != '\\0') {\n      return_value = print_and_set_variable();\n      return return_value;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "current_name": "process_archived_files_00105af0",
            "entrypoint": "0x00105af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "bfd_check_format": "check_bfd_format",
                "bfd_openr_next_archived_file": "get_next_archived_file",
                "cVar1": "is_valid_format",
                "lVar3": "archived_file",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "print_flag",
                "param_4": "check_format",
                "print_and_set_variable_00102f08": "print_and_set_variable",
                "uVar2": "result",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105bb0": {
            "additional_data": {
                "": {
                    "": 1
                },
                "1": {
                    "constant": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "DAT_00105bb0": {
                    "dat_get_one": 1
                },
                "FUN_00105bb0": {
                    "calculate_result": 1,
                    "calculate_return_type": 1,
                    "check_flag": 2,
                    "check_status": 1,
                    "check_success": 1,
                    "get_boolean_value": 1,
                    "get_constant": 1,
                    "get_default_value": 1,
                    "get_one": 9,
                    "get_return_value": 5,
                    "get_unity_value": 1,
                    "initialize": 3,
                    "initialize_flag": 1,
                    "is_true": 2,
                    "return_one": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "PTR_00105bb0": {
                    "ptr_get_one": 1
                },
                "return": {
                    "flag": 1,
                    "result": 5,
                    "return_value": 2,
                    "status": 1
                },
                "undefined8": {
                    "bool": 5,
                    "uint64_t": 5,
                    "unsigned_long": 2,
                    "void": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nbool get_one_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00105bb0",
            "entrypoint": "0x00105bb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0",
                "return": "result",
                "undefined8": "bool"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105bc0": {
            "additional_data": {
                "FUN_00105bc0": {
                    "copy_and_delete_file": 8,
                    "copy_and_print_error": 8,
                    "copy_and_print_error_message": 3,
                    "copy_and_print_error_on_failure": 1,
                    "copy_and_print_file_contents": 1,
                    "copy_and_remove_file": 3,
                    "copy_and_replace_file": 2,
                    "copy_and_unlink_file": 4,
                    "copy_file_with_error_message": 1
                },
                "auVar6": {
                    "result": 20,
                    "return_data": 2,
                    "return_value": 6
                },
                "param_1": {
                    "original_file_path": 1,
                    "source_file": 13,
                    "source_file_path": 12,
                    "source_filepath": 2,
                    "source_path": 3
                },
                "param_2": {
                    "dest_file": 2,
                    "destination_file": 11,
                    "destination_file_path": 12,
                    "destination_filepath": 2,
                    "destination_path": 3,
                    "new_file_path": 1
                },
                "param_3": {
                    "buffer_size": 8,
                    "copy_flags": 1,
                    "copy_mode": 1,
                    "file_buffer": 1,
                    "file_descriptor": 1,
                    "file_mode": 1,
                    "file_permission": 2,
                    "file_permissions": 13,
                    "flags": 2,
                    "mode": 1
                },
                "param_4": {
                    "error_message": 2,
                    "file_size": 19,
                    "modified_time": 1,
                    "original_return_value": 1,
                    "result": 2,
                    "return_value": 3,
                    "status_code": 1,
                    "timestamp": 1,
                    "user_data": 1
                },
                "pcVar3": {
                    "err_str": 1,
                    "error_message": 22,
                    "error_string": 7
                },
                "piVar2": {
                    "err_code_ptr": 1,
                    "err_num": 1,
                    "errno_location": 5,
                    "errno_pointer": 3,
                    "errno_ptr": 6,
                    "error_code": 1,
                    "error_location": 6,
                    "error_number": 1,
                    "error_number_ptr": 3,
                    "error_pointer": 1,
                    "error_ptr": 1,
                    "ptr_errno": 1
                },
                "uVar1": {
                    "copied_bytes": 1,
                    "copy_result": 25,
                    "copy_status": 2,
                    "file_copy_status": 1,
                    "num_copied": 1
                },
                "uVar4": {
                    "error_format": 2,
                    "error_format_msg": 1,
                    "error_message": 5,
                    "error_message_format": 2,
                    "error_message_handle": 1,
                    "error_message_id": 1,
                    "error_message_translation": 1,
                    "error_prompt": 1,
                    "error_string": 2,
                    "error_translation": 1,
                    "formatted_error_message": 4,
                    "formatted_message": 3,
                    "localized_error": 1,
                    "localized_error_message": 2,
                    "translated_error": 1,
                    "translated_error_message": 2
                },
                "uVar5": {
                    "bytes_copied": 7,
                    "copied_bytes": 1,
                    "copy_bytes": 1,
                    "copy_result": 1,
                    "copy_result_as_ulong": 1,
                    "copy_size": 11,
                    "file_copy_bytes": 1,
                    "file_size": 3,
                    "result": 1,
                    "total_copied_bytes": 1,
                    "unlink_error": 1
                }
            },
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "code": "\nundefined  [16] copy_and_print_error_message_00105bc0(char *source_file,char *destination_file_path,undefined4 file_permissions,undefined8 file_size)\n\n{\n  uint copy_result;\n  int *error_location;\n  char *error_message;\n  undefined8 error_message;\n  ulong copy_size;\n  undefined result [16];\n  \n  if (destination_file_path == source_file) {\n    copy_size = 0;\n  }\n  else {\n    copy_result = copy_file_contents_00105c00(file_permissions);\n    copy_size = (ulong)copy_result;\n    if (copy_result != 0) {\n      error_location = __errno_location();\n      error_message = strerror(*error_location);\n      error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_with_formatted_message_00107920(error_message,destination_file_path,error_message);\n    }\n    unlink(source_file);\n  }\n  result._8_8_ = file_size;\n  result._0_8_ = copy_size;\n  return result;\n}\n\n",
            "current_name": "copy_and_print_error_message_00105bc0",
            "entrypoint": "0x00105bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105bc0": "copy_and_print_error_message_00105bc0",
                "auVar6": "result",
                "param_1": "source_file",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "param_4": "file_size",
                "pcVar3": "error_message",
                "piVar2": "error_location",
                "uVar1": "copy_result",
                "uVar4": "error_message",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105c00": {
            "additional_data": {
                "FUN_00105c00": {
                    "copy_and_write_file": 1,
                    "copy_data": 1,
                    "copy_data_to_file": 3,
                    "copy_file": 12,
                    "copy_file_contents": 4,
                    "copy_file_to_destination": 1,
                    "copy_to_file": 1,
                    "extract_and_save_data": 1,
                    "extract_and_write_to_file": 2,
                    "extract_data_to_file": 1,
                    "read_and_write_file": 1,
                    "reverse_and_save_to_file": 1,
                    "reverse_and_write_file": 1,
                    "reverse_binary_and_save_to_file": 1
                },
                "_Var3": {
                    "current_file_position": 2,
                    "current_offset": 3,
                    "current_position": 3,
                    "file_offset": 4,
                    "file_position": 1,
                    "input_file_offset": 1,
                    "offset": 2,
                    "position": 1,
                    "seek_offset": 1,
                    "seek_result": 2,
                    "source_file_offset": 3,
                    "source_file_position": 4,
                    "source_file_seek_position": 1,
                    "source_file_size": 3
                },
                "__errno_location": {
                    "get_error_code": 1
                },
                "__fd": {
                    "destination_file_descriptor": 18,
                    "dst_file_descriptor": 1,
                    "file_descriptor_copy": 1,
                    "file_descriptor_dest": 1,
                    "output_file": 1,
                    "output_file_descriptor": 8
                },
                "auStack_2038": {
                    "buffer": 26
                },
                "close_file_and_set_error_code_00102f55": {
                    "close_file_and_set_error_code": 1
                },
                "iVar1": {
                    "close_error": 3,
                    "close_error_code": 1,
                    "errno": 1,
                    "errno_value": 6,
                    "error": 2,
                    "error_code": 7,
                    "original_errno": 5,
                    "original_error": 2,
                    "original_error_code": 1,
                    "source_file_error": 1
                },
                "iVar2": {
                    "bytes_read": 8,
                    "close_error2": 1,
                    "current_errno": 4,
                    "current_error": 1,
                    "error": 1,
                    "error_code": 3,
                    "read_result": 8,
                    "return_value": 3,
                    "temp_error": 1
                },
                "param_1": {
                    "file_descriptor": 7,
                    "file_descriptor_src": 1,
                    "input_file": 1,
                    "input_file_descriptor": 5,
                    "source_file": 2,
                    "source_file_descriptor": 15
                },
                "param_2": {
                    "destination_file": 2,
                    "destination_file_name": 4,
                    "destination_file_path": 10,
                    "destination_path": 2,
                    "file_path": 2,
                    "file_path_dest": 1,
                    "filename": 3,
                    "output_file_name": 1,
                    "output_file_path": 5,
                    "output_filename": 1
                },
                "piVar6": {
                    "errno_location": 10,
                    "errno_pointer": 7,
                    "errno_ptr": 5,
                    "error_code_pointer": 3,
                    "error_code_ptr": 2,
                    "error_location": 1,
                    "error_pointer": 2
                },
                "sVar5": {
                    "bytes_read": 2,
                    "bytes_written": 22,
                    "bytes_written_check": 1,
                    "num_bytes_written": 3,
                    "write_result": 1,
                    "write_size": 1,
                    "written_bytes": 1
                },
                "uVar4": {
                    "bytes_copied": 3,
                    "bytes_read": 15,
                    "bytes_written": 3,
                    "num_bytes_copied": 1,
                    "num_bytes_read": 2,
                    "read_bytes": 1,
                    "read_write_result": 1,
                    "result": 1,
                    "return_value": 1,
                    "total_bytes_copied": 1,
                    "total_bytes_read": 1,
                    "write_result": 1
                }
            },
            "called": [
                "close",
                "write",
                "lseek",
                "FUN_00102f55",
                "read",
                "__errno_location",
                "open"
            ],
            "calling": [
                "FUN_00105bc0"
            ],
            "code": "\nulong copy_file_contents_00105c00(int source_file_descriptor,char *destination_file_path)\n\n{\n  int error_code;\n  int destination_file_descriptor;\n  int bytes_read;\n  __off_t file_offset;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (file_offset = lseek(source_file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = close_file_and_set_error_code();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      bytes_read = (int)bytes_read;\n      if (bytes_read < 1) {\n        errno_location = __errno_location();\n        error_code = *errno_location;\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (bytes_read != 0) {\n          *errno_location = error_code;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    errno_location = __errno_location();\n    bytes_read = *errno_location;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_location = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_contents_00105c00",
            "entrypoint": "0x00105c00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105c00": "copy_file_contents_00105c00",
                "_Var3": "file_offset",
                "__errno_location": "get_error_code",
                "__fd": "destination_file_descriptor",
                "auStack_2038": "buffer",
                "close_file_and_set_error_code_00102f55": "close_file_and_set_error_code",
                "iVar1": "error_code",
                "iVar2": "bytes_read",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "piVar6": "errno_location",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105cf0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105cf0",
            "entrypoint": "0x00105cf0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105d20": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00105d20",
            "entrypoint": "0x00105d20",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00105db0": {
            "additional_data": {
                "FUN_00105db0": {
                    "extract_and_process_archive": 10,
                    "extract_and_process_archive_files": 3,
                    "extract_and_process_archive_script": 1,
                    "extract_and_process_files": 1,
                    "extract_archived_files": 1,
                    "extract_files_from_archive": 2,
                    "parse_archive": 2,
                    "parse_command_line_arguments": 1,
                    "parse_files": 1,
                    "parse_input_files": 1,
                    "process_archive": 1,
                    "process_file": 1,
                    "process_files": 1,
                    "process_input_files": 1
                },
                "__ptr": {
                    "buffer_ptr": 1,
                    "byte_array": 1,
                    "byte_pointer": 6,
                    "byte_pointer1": 1,
                    "byte_pointer2": 4,
                    "byte_ptr": 3,
                    "byte_ptr2": 1,
                    "ptr": 1,
                    "temp_byte_ptr2": 1
                },
                "bVar13": {
                    "byte1": 1,
                    "byte2": 1,
                    "byte_value2": 1,
                    "byte_var": 9,
                    "byte_var1": 3,
                    "byte_var13": 1,
                    "byte_var2": 5,
                    "byte_variable": 1,
                    "byte_variable13": 1,
                    "byte_variable2": 2,
                    "character": 1,
                    "current_byte3": 1,
                    "temp_byte2": 1,
                    "temp_byte_var1": 1
                },
                "bVar3": {
                    "byte1": 1,
                    "byte_value": 2,
                    "byte_var": 11,
                    "byte_var1": 3,
                    "byte_var3": 1,
                    "byte_variable": 4,
                    "ch": 1,
                    "current_byte": 1,
                    "current_byte2": 2,
                    "flag1": 2,
                    "is_alpha": 1,
                    "temp_byte": 1
                },
                "bVar47": {
                    "bool3": 1,
                    "bool_var": 4,
                    "bool_var3": 2,
                    "bool_variable47": 1,
                    "flag4": 1,
                    "is_verbose": 1,
                    "temp_bool_var1": 1
                },
                "bVar48": {
                    "byte3": 1,
                    "byte_var": 5,
                    "byte_var2": 1,
                    "byte_var3": 2,
                    "byte_variable48": 1,
                    "temp_bool_var2": 1,
                    "value": 1
                },
                "bVar8": {
                    "bool1": 2,
                    "bool_value": 1,
                    "bool_value1": 1,
                    "bool_var": 6,
                    "bool_var1": 10,
                    "bool_var8": 1,
                    "bool_variable": 1,
                    "bool_variable1": 2,
                    "bool_variable8": 1,
                    "flag2": 2,
                    "is_escaped": 1,
                    "some_bool": 1,
                    "temp_bool1": 1
                },
                "bVar9": {
                    "another_bool": 1,
                    "bool2": 2,
                    "bool_value": 1,
                    "bool_value2": 1,
                    "bool_var": 6,
                    "bool_var2": 10,
                    "bool_var9": 1,
                    "bool_variable": 1,
                    "bool_variable2": 2,
                    "bool_variable9": 1,
                    "flag3": 2,
                    "in_double_quote": 1,
                    "temp_bool2": 1
                },
                "cVar14": {
                    "char1": 2,
                    "char_value": 1,
                    "char_var": 11,
                    "char_var1": 6,
                    "char_var14": 1,
                    "char_variable": 3,
                    "char_variable14": 1,
                    "character": 1,
                    "current_char": 1,
                    "temp_char": 2
                },
                "extraout_EDX": {
                    "extraout_edx": 1,
                    "temp_uint_var4": 1,
                    "uint_value": 1,
                    "uint_value3": 1,
                    "uint_var": 3,
                    "uint_var2": 1
                },
                "fpVar45": {
                    "temp_file_ptr": 1
                },
                "iVar15": {
                    "current_index": 1,
                    "index": 2,
                    "int1": 2,
                    "int_value": 2,
                    "int_var": 10,
                    "int_var1": 5,
                    "int_var15": 1,
                    "int_variable": 3,
                    "int_variable15": 1,
                    "temp_int": 1,
                    "temp_int_var": 1
                },
                "iVar45": {
                    "current_index2": 1,
                    "index": 1,
                    "int_var": 4,
                    "int_var2": 4,
                    "int_variable45": 1,
                    "temp_int_var2": 1
                },
                "lVar24": {
                    "count1": 1,
                    "current_long2": 1,
                    "long1": 1,
                    "long_value": 3,
                    "long_var": 5,
                    "long_var1": 5,
                    "long_var3": 1,
                    "long_var4": 1,
                    "long_variable": 2,
                    "long_variable24": 1,
                    "temp_long_var1": 1,
                    "temp_size4": 1,
                    "value": 1
                },
                "lVar34": {
                    "current_long3": 1,
                    "long2": 1,
                    "long_value": 1,
                    "long_value2": 1,
                    "long_var": 5,
                    "long_var1": 1,
                    "long_var2": 2,
                    "long_var4": 1,
                    "long_variable2": 1,
                    "long_variable34": 1,
                    "temp_long2": 1,
                    "temp_long_var2": 1,
                    "value": 1
                },
                "lVar35": {
                    "current_long4": 1,
                    "long3": 1,
                    "long_value": 1,
                    "long_value3": 1,
                    "long_var": 5,
                    "long_var2": 2,
                    "long_var3": 2,
                    "long_var5": 1,
                    "long_variable3": 1,
                    "long_variable35": 1,
                    "temp_long_var3": 1,
                    "value": 1
                },
                "lVar40": {
                    "long_var": 1
                },
                "lVar41": {
                    "long_var": 1
                },
                "lVar42": {
                    "long_var": 1
                },
                "lVar54": {
                    "long7": 1
                },
                "lVar64": {
                    "long_var": 1
                },
                "local_100": {
                    "current_long5": 1,
                    "local_long": 1,
                    "local_long_var": 1,
                    "local_variable": 1,
                    "long4": 1,
                    "long_var": 5,
                    "long_var1": 1,
                    "long_var100": 1,
                    "long_var2": 1,
                    "long_var4": 1,
                    "long_var5": 1,
                    "long_var6": 1,
                    "temp_long_var5": 1
                },
                "local_108": {
                    "current_size3": 1,
                    "local_size_t": 1,
                    "local_size_var": 1,
                    "local_variable": 1,
                    "size3": 1,
                    "size_t_var": 5,
                    "size_t_var1": 2,
                    "size_t_var108": 1,
                    "size_t_var3": 2,
                    "size_var1": 1,
                    "temp_size3": 1,
                    "temp_size_t_var3": 1
                },
                "local_110": {
                    "char_double_pointer2": 1,
                    "char_double_ptr": 1,
                    "char_pointer_pointer": 2,
                    "char_pointer_pointer110": 1,
                    "char_pointer_pointer2": 1,
                    "char_ptr_ptr": 1,
                    "char_ptr_ptr1": 1,
                    "char_ptr_ptr4": 1,
                    "char_var_pointer_pointer": 1,
                    "local_char_array": 1,
                    "local_char_pointer_array": 1,
                    "local_variable": 1,
                    "string_array_pointer": 1,
                    "string_pointer_array": 1,
                    "temp_char_ptr4": 1
                },
                "local_118": {
                    "byte_pointer": 1,
                    "byte_pointer118": 1,
                    "byte_pointer2": 1,
                    "byte_pointer4": 2,
                    "byte_ptr": 2,
                    "byte_ptr1": 1,
                    "byte_ptr2": 1,
                    "byte_var": 1,
                    "byte_var2": 1,
                    "byte_var_pointer": 1,
                    "local_byte_array": 2,
                    "local_variable": 1,
                    "temp_byte_ptr4": 1,
                    "temp_ptr3": 1
                },
                "local_128": {
                    "file_pointer": 1,
                    "file_pointer128": 1,
                    "file_pointer2": 1,
                    "file_pointer4": 1,
                    "file_pointer5": 1,
                    "file_ptr": 2,
                    "file_ptr2": 1,
                    "file_ptr5": 1,
                    "file_var": 2,
                    "file_var1": 1,
                    "local_file_pointer": 2,
                    "local_variable": 1,
                    "temp_file_ptr5": 1,
                    "temp_ptr2": 1,
                    "undefined8_var4": 1
                },
                "local_130": {
                    "file_pointer": 1,
                    "file_ptr1": 1,
                    "file_ptr4": 1,
                    "file_var": 1,
                    "local_file": 1,
                    "local_file_pointer": 1,
                    "local_variable": 1,
                    "temp_file_ptr4": 1,
                    "temp_ptr1": 1,
                    "undefined8_array130": 1,
                    "undefined8_var": 5,
                    "undefined8_var3": 2,
                    "undefined8_var4": 1
                },
                "local_b0": {
                    "local_uint": 1,
                    "local_uint_var": 1,
                    "local_variable": 1,
                    "temp_uint_var5": 1,
                    "uint_var": 3,
                    "uint_var2": 1,
                    "uint_var4": 1,
                    "uint_var5": 2,
                    "uint_var6": 1,
                    "uint_var_b0": 1,
                    "var7": 1
                },
                "local_c8": {
                    "local_undef_array": 1,
                    "local_undefined": 1,
                    "local_variable": 1,
                    "temp_byte_var2": 1,
                    "undefined2_var1": 1,
                    "undefined_array": 2,
                    "undefined_array1": 1,
                    "undefined_array_c8": 1,
                    "undefined_double_var": 1,
                    "undefined_var1": 2,
                    "undefined_var2": 1
                },
                "pFVar18": {
                    "current_file": 1,
                    "file": 1,
                    "file_pointer": 8,
                    "file_pointer1": 2,
                    "file_pointer18": 1,
                    "file_ptr": 2,
                    "file_ptr1": 2,
                    "file_ptr2": 1,
                    "file_var": 1,
                    "pointer_to_file": 1,
                    "temp_file_ptr1": 1
                },
                "pFVar22": {
                    "current_file_pointer": 1,
                    "file": 1,
                    "file_pointer": 3,
                    "file_pointer1": 1,
                    "file_pointer2": 6,
                    "file_ptr": 3,
                    "file_ptr2": 2,
                    "file_ptr3": 1,
                    "file_var": 1,
                    "pointer_to_file": 1,
                    "temp_file_ptr2": 1
                },
                "pFVar28": {
                    "current_file_pointer2": 1,
                    "file": 1,
                    "file_pointer": 3,
                    "file_pointer1": 3,
                    "file_pointer2": 1,
                    "file_pointer28": 1,
                    "file_pointer3": 5,
                    "file_ptr": 1,
                    "file_ptr2": 1,
                    "file_ptr3": 2,
                    "file_ptr4": 1,
                    "file_var": 2,
                    "pointer_to_file": 1,
                    "temp_file_ptr3": 1
                },
                "pFVar32": {
                    "file_pointer4": 1
                },
                "param_1": {
                    "argc": 23,
                    "file_count": 1,
                    "input": 1,
                    "num_args": 2,
                    "num_input_files": 1,
                    "num_params": 1,
                    "number_of_parameters": 1,
                    "some_parameter": 1
                },
                "param_2": {
                    "archive_file": 1,
                    "argv": 23,
                    "file": 1,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "input_file": 3
                },
                "pbVar1": {
                    "byte_array": 1,
                    "byte_array1": 1,
                    "byte_data": 1,
                    "byte_pointer": 10,
                    "byte_pointer1": 7,
                    "byte_ptr": 3,
                    "bytes_ptr": 1,
                    "current_byte": 2,
                    "current_byte_ptr": 1,
                    "pointer_to_byte": 1,
                    "ptr": 2,
                    "ptr1": 1
                },
                "pbVar33": {
                    "byte2_ptr2": 1,
                    "byte_array": 1,
                    "byte_pointer": 2,
                    "byte_pointer3": 1,
                    "byte_pointer33": 1,
                    "byte_ptr": 1,
                    "byte_ptr2": 1,
                    "temp_byte_ptr3": 1
                },
                "pbVar38": {
                    "byte_pointer": 2,
                    "byte_pointer2": 3,
                    "byte_pointer3": 2,
                    "byte_pointer38": 1,
                    "byte_pointer_var": 1,
                    "byte_ptr": 1,
                    "byte_ptr1": 1
                },
                "pcVar23": {
                    "char1_ptr": 1,
                    "char_pointer": 2,
                    "char_pointer1": 2,
                    "char_ptr": 2,
                    "char_ptr2": 1,
                    "char_var": 3,
                    "char_var1": 1,
                    "char_var_pointer": 1,
                    "char_variable2": 2,
                    "current_char_pointer": 1,
                    "pointer_to_char": 1,
                    "ptr": 1,
                    "ptr9": 1,
                    "temp_char_ptr": 1
                },
                "pcVar39": {
                    "char_pointer": 1,
                    "char_pointer2": 1,
                    "char_pointer3": 1,
                    "char_pointer_var": 1,
                    "char_ptr": 1,
                    "char_ptr2": 1,
                    "char_var2": 1,
                    "char_var_pointer": 1,
                    "error_message": 1,
                    "pointer_to_char39": 1,
                    "string1": 1
                },
                "pcVar43": {
                    "char_pointer1": 1,
                    "char_ptr3": 1,
                    "current_char_pointer2": 1,
                    "pointer_to_char43": 1,
                    "temp_char_ptr": 1
                },
                "pcVar46": {
                    "char_pointer3": 1,
                    "char_pointer_var": 1,
                    "char_var": 1,
                    "string2": 1,
                    "temp_char_ptr3": 1
                },
                "piVar11": {
                    "int_data": 1,
                    "int_pointer": 11,
                    "int_pointer1": 5,
                    "int_pointer11": 1,
                    "int_ptr": 6,
                    "int_ptr1": 1,
                    "int_var": 1,
                    "iteration_variable": 1,
                    "pointer_to_int": 1,
                    "ptr": 1,
                    "ptr6": 1
                },
                "plVar21": {
                    "current_long_pointer": 1,
                    "long_data2": 1,
                    "long_pointer": 4,
                    "long_pointer1": 1,
                    "long_pointer2": 5,
                    "long_ptr": 2,
                    "long_ptr2": 2,
                    "long_var": 1,
                    "pointer_to_long": 1,
                    "ptr": 1,
                    "ptr8": 1,
                    "temp_long_ptr": 1
                },
                "plVar29": {
                    "long_pointer29": 1,
                    "long_pointer_pointer": 1,
                    "long_pointer_pointer1": 1
                },
                "plVar35": {
                    "temp_long_var4": 1
                },
                "plVar36": {
                    "long_pointer": 1
                },
                "plVar4": {
                    "current_long": 2,
                    "current_long_ptr": 1,
                    "long_data": 1,
                    "long_pointer": 10,
                    "long_pointer1": 5,
                    "long_ptr": 5,
                    "long_ptr1": 1,
                    "long_var": 1,
                    "long_var4": 1,
                    "pointer_to_long": 1,
                    "ptr": 1,
                    "ptr3": 1
                },
                "ppcVar10": {
                    "char_double_pointer": 2,
                    "char_double_pointer1": 1,
                    "char_double_ptr": 1,
                    "char_pointer": 1,
                    "char_pointer_array": 1,
                    "char_pointer_pointer": 6,
                    "char_pointer_pointer1": 4,
                    "char_pointer_pointer10": 1,
                    "char_ptr_ptr": 3,
                    "char_ptr_ptr1": 1,
                    "phrase_array": 1,
                    "pointer_to_char_array": 1,
                    "ptr": 1,
                    "ptr5": 1,
                    "ptr_to_ptr_to_strings": 1,
                    "str_arr_ptr": 1,
                    "string_array": 1,
                    "string_array_pointer": 2
                },
                "ppcVar29": {
                    "char_pointer_array": 1,
                    "string_array2": 1
                },
                "ppcVar30": {
                    "string_array3": 1
                },
                "ppcVar31": {
                    "char_double_pointer": 1,
                    "char_pointer2": 1,
                    "char_pointer_array": 1,
                    "char_pointer_pointer": 1,
                    "char_pointer_pointer2": 1,
                    "char_ptr_ptr2": 1,
                    "char_var_pointer_pointer": 1,
                    "pointer_to_pointer_to_char": 1
                },
                "ppcVar32": {
                    "char_double_pointer": 1,
                    "char_pointer3": 1,
                    "char_pointer_array": 1,
                    "char_ptr_ptr3": 1,
                    "char_var_pointer_pointer": 1,
                    "pointer_to_pointer_to_char": 1
                },
                "pplVar29": {
                    "long_double_pointer": 1,
                    "long_double_ptr": 1,
                    "long_pointer_pointer": 6,
                    "long_pointer_pointer1": 1,
                    "long_pointer_pointer2": 1,
                    "long_ptr_ptr": 2,
                    "pointer_to_pointer_to_long": 1,
                    "ptr11": 1,
                    "temp_long_ptr_ptr1": 1
                },
                "pplVar36": {
                    "long_pointer_pointer_var": 1,
                    "long_ptr_ptr": 1
                },
                "ppuVar29": {
                    "long_pointer_pointer1": 1
                },
                "ppuVar36": {
                    "char_pointer_pointer": 1,
                    "pointer_to_pointer_to_undef": 1,
                    "undefined_double_pointer1": 1,
                    "undefined_double_ptr": 1,
                    "undefined_pointer": 1,
                    "undefined_ptr_ptr1": 1
                },
                "puVar12": {
                    "malloc_ptr": 1,
                    "pointer_to_undef": 1,
                    "ptr": 2,
                    "ptr7": 1,
                    "ptr_data2": 1,
                    "undef_pointer": 1,
                    "undefined_pointer": 11,
                    "undefined_pointer1": 5,
                    "undefined_pointer12": 1,
                    "undefined_ptr": 4,
                    "undefined_ptr1": 1,
                    "void_ptr": 1
                },
                "puVar2": {
                    "count_ptr": 1,
                    "current_int_ptr": 1,
                    "current_uint": 2,
                    "pointer_to_uint": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "uint_array": 1,
                    "uint_data": 1,
                    "uint_pointer": 10,
                    "uint_pointer1": 5,
                    "uint_pointer2": 1,
                    "uint_ptr": 5
                },
                "puVar26": {
                    "current_var_pointer": 1,
                    "pointer_to_undef8": 1,
                    "ptr": 1,
                    "ptr10": 1,
                    "ptr_data3": 1,
                    "temp_undefined8_ptr2": 1,
                    "ulong_pointer_var": 1,
                    "ulong_ptr": 1,
                    "undefined8_pointer": 3,
                    "undefined8_pointer1": 1,
                    "undefined8_pointer2": 6,
                    "undefined8_pointer26": 1,
                    "undefined8_ptr": 1,
                    "undefined8_ptr2": 1,
                    "void8_ptr": 1
                },
                "puVar36": {
                    "undefined_double_ptr": 1
                },
                "puVar5": {
                    "current_uint_ptr": 1,
                    "current_undefined8_ptr": 1,
                    "current_var": 1,
                    "pointer_array": 1,
                    "pointer_to_undef8": 1,
                    "ptr": 1,
                    "ptr4": 1,
                    "ptr_data": 1,
                    "ptr_ptr": 1,
                    "undefined8_pointer": 9,
                    "undefined8_pointer1": 5,
                    "undefined8_pointer5": 1,
                    "undefined8_ptr": 5,
                    "undefined_pointer": 1
                },
                "sVar19": {
                    "current_size": 1,
                    "size": 1,
                    "size1": 2,
                    "size_t_value": 1,
                    "size_t_var": 2,
                    "size_t_var1": 2,
                    "size_t_variable": 1,
                    "size_t_variable19": 1,
                    "size_value": 2,
                    "size_var": 2,
                    "size_var1": 1,
                    "size_variable": 1,
                    "temp_size": 1,
                    "temp_size_t_var1": 1
                },
                "sVar20": {
                    "current_size2": 1,
                    "read_size": 1,
                    "size2": 2,
                    "size_t_value": 1,
                    "size_t_var": 2,
                    "size_t_var2": 2,
                    "size_t_variable2": 1,
                    "size_t_variable20": 1,
                    "size_value2": 2,
                    "size_var": 2,
                    "size_var2": 1,
                    "size_variable2": 1,
                    "temp_size2": 1,
                    "temp_size_t_var2": 1
                },
                "uStack_c5": {
                    "local_undef_var": 1,
                    "local_variable": 1,
                    "u_stack_var_c5": 1,
                    "undefined5_var": 2,
                    "undefined5_var1": 3,
                    "undefined5_var_c5": 1,
                    "undefined_var3": 1
                },
                "uStack_c6": {
                    "byte_var4": 1,
                    "local_undef_var": 1,
                    "local_variable": 1,
                    "u_stack_var_c6": 1,
                    "undefined_var": 2,
                    "undefined_var2": 1,
                    "undefined_var3": 1,
                    "undefined_var4": 1,
                    "undefined_var_c6": 1
                },
                "uVar16": {
                    "current_uint3": 1,
                    "index": 1,
                    "temp": 1,
                    "temp_uint5": 1,
                    "temp_uint_var1": 1,
                    "uint3": 2,
                    "uint_value": 2,
                    "uint_var": 10,
                    "uint_var1": 3,
                    "uint_var16": 1,
                    "uint_var3": 2,
                    "uint_variable": 2,
                    "uint_variable16": 1,
                    "var16": 1
                },
                "uVar17": {
                    "current_uint4": 1,
                    "temp_uint4": 1,
                    "temp_uint_var2": 1,
                    "uint4": 2,
                    "uint_value2": 1,
                    "uint_var": 2,
                    "uint_var3": 1,
                    "uint_var4": 2,
                    "undefined4_value": 1,
                    "undefined4_var": 7,
                    "undefined4_var17": 2,
                    "undefined4_var3": 3,
                    "undefined4_variable3": 1,
                    "uni_var3": 1,
                    "value": 1,
                    "var17": 1,
                    "var3": 1
                },
                "uVar25": {
                    "current_ulong": 1,
                    "temp_ulong": 1,
                    "temp_ulong_var1": 1,
                    "ulong1": 2,
                    "ulong_value": 3,
                    "ulong_var": 8,
                    "ulong_var1": 5,
                    "ulong_var2": 1,
                    "ulong_var25": 1,
                    "ulong_variable": 2,
                    "ulong_variable25": 1,
                    "value": 1,
                    "var4": 1
                },
                "uVar27": {
                    "current_var8": 1,
                    "message": 2,
                    "temp_undefined8_var3": 1,
                    "temp_unsigned": 1,
                    "uint_var": 1,
                    "undefined81": 1,
                    "undefined8_1": 1,
                    "undefined8_value": 1,
                    "undefined8_var": 7,
                    "undefined8_var1": 4,
                    "undefined8_var2": 1,
                    "undefined8_var27": 2,
                    "undefined8_var3": 1,
                    "undefined8_variable2": 1,
                    "uni_var4": 1,
                    "var27": 1,
                    "var5": 1
                },
                "uVar28": {
                    "undefined8_var": 1
                },
                "uVar30": {
                    "temp_undefined8_var2": 1,
                    "temp_unsigned2": 1,
                    "ulong_var": 1,
                    "undefined8_2": 1,
                    "undefined8_value": 1,
                    "undefined8_var": 6,
                    "undefined8_var1": 1,
                    "undefined8_var2": 5,
                    "undefined8_var30": 2,
                    "undefined8_variable3": 1,
                    "uni_var5": 1,
                    "var6": 1
                },
                "uVar37": {
                    "current_uint5": 1,
                    "temp_uint_var3": 1,
                    "uint5": 1,
                    "uint_extraout": 1,
                    "uint_var": 4,
                    "uint_var1": 1,
                    "uint_var2": 1,
                    "uint_var3": 2,
                    "uint_variable37": 1
                },
                "uVar40": {
                    "current_ulong2": 1,
                    "flags": 1,
                    "temp_ulong_var2": 1,
                    "ulong_var": 4,
                    "ulong_var1": 1,
                    "ulong_var2": 5,
                    "ulong_var3": 1,
                    "ulong_var4": 1,
                    "ulong_variable2": 1,
                    "ulong_variable40": 1
                },
                "uVar41": {
                    "current_ulong3": 1,
                    "index": 1,
                    "temp_ulong_var3": 1,
                    "ulong_var": 4,
                    "ulong_var2": 2,
                    "ulong_var3": 5,
                    "ulong_var4": 1,
                    "ulong_variable3": 1,
                    "ulong_variable41": 1
                },
                "uVar42": {
                    "current_ulong4": 1,
                    "index": 1,
                    "temp_ulong_var4": 1,
                    "ulong_var": 4,
                    "ulong_var3": 1,
                    "ulong_var4": 5,
                    "ulong_var5": 2,
                    "ulong_variable4": 1,
                    "ulong_variable42": 1
                },
                "uVar43": {
                    "uint_var": 1
                },
                "uVar44": {
                    "current_uint7": 1,
                    "temp_uint_var6": 1,
                    "uint_var": 4,
                    "uint_var2": 1,
                    "uint_var3": 1,
                    "uint_var4": 3,
                    "uint_var5": 2,
                    "uint_variable44": 1,
                    "value": 1
                },
                "uVar45": {
                    "bool_var3": 1,
                    "i_var3": 1
                },
                "uVar6": {
                    "current_uint1": 1,
                    "index": 1,
                    "some_uint": 1,
                    "temp_uint": 1,
                    "temp_uint1": 1,
                    "uint1": 2,
                    "uint_var": 2,
                    "uint_var1": 3,
                    "undefined4_value": 2,
                    "undefined4_var": 7,
                    "undefined4_var1": 3,
                    "undefined4_var6": 2,
                    "undefined4_variable1": 1,
                    "uni_var1": 1,
                    "var1": 1,
                    "var6": 1
                },
                "uVar7": {
                    "another_uint": 1,
                    "current_uint2": 1,
                    "index": 1,
                    "temp_uint2": 2,
                    "uint2": 2,
                    "uint_var": 2,
                    "uint_var2": 3,
                    "undefined4_value": 2,
                    "undefined4_var": 7,
                    "undefined4_var2": 3,
                    "undefined4_var7": 2,
                    "undefined4_variable2": 1,
                    "uni_var2": 1,
                    "var2": 1,
                    "var7": 1
                },
                "unaff_R12": {
                    "file_pointer": 1,
                    "file_pointer4": 1,
                    "input_file_pointer2": 1
                },
                "unaff_RBP": {
                    "char_pointer": 3,
                    "char_pointer1": 1,
                    "char_pointer2": 2,
                    "char_pointer_var": 1,
                    "char_ptr": 2,
                    "char_ptr1": 1,
                    "input_file_pointer": 1,
                    "string_pointer1": 1,
                    "temp_char_ptr2": 1,
                    "unaff_return_value": 1
                }
            },
            "called": [
                "fileno",
                "bfd_make_readable",
                "xstrdup",
                "getopt_long",
                "free",
                "isatty",
                "bfd_set_format",
                "bfd_check_format_matches",
                "FUN_00105570",
                "bfd_plugin_set_plugin",
                "FUN_00103e95",
                "FUN_00105480",
                "textdomain",
                "bfd_plugin_set_program_name",
                "bfd_init",
                "FUN_00107640",
                "xmalloc",
                "filename_cmp",
                "dcgettext",
                "bindtextdomain",
                "stat",
                "FUN_001058b0",
                "FUN_00103bd1",
                "FUN_00107920",
                "bfd_set_error",
                "bfd_fdopenr",
                "bfd_set_error_program_name",
                "bfd_close",
                "FUN_00107c10",
                "FUN_00107690",
                "ftell",
                "open",
                "fclose",
                "strlen",
                "bfd_make_writable",
                "FUN_00107890",
                "xexit",
                "memmove",
                "memcpy",
                "fread",
                "FUN_0010342d",
                "FUN_001075e0",
                "bfd_create",
                "ferror",
                "FUN_0010394a",
                "malloc",
                "FUN_00103a78",
                "xrealloc",
                "bfd_find_target",
                "fprintf",
                "FUN_00107c20",
                "FUN_00105830",
                "printf",
                "FUN_00107cc0",
                "bfd_bwrite",
                "bfd_set_default_target",
                "xmalloc_set_program_name",
                "FUN_00105870",
                "setlocale",
                "fopen",
                "strtol",
                "fseek",
                "lbasename",
                "bfd_get_error",
                "FUN_00107740",
                "FUN_00107730",
                "FUN_00107650",
                "strcmp",
                "FUN_00105300",
                "FUN_001052a0",
                "bfd_errmsg"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid extract_and_process_archive_files_00105db0(uint argc,FILE *argv)\n\n{\n  byte *byte_pointer;\n  uint *uint_pointer;\n  byte byte_var;\n  long *long_pointer;\n  undefined8 *undefined8_pointer;\n  undefined4 undefined4_var;\n  undefined4 undefined4_var;\n  bool bool_var1;\n  bool bool_var2;\n  char **char_pointer_pointer;\n  int *int_pointer;\n  undefined *undefined_pointer;\n  byte byte_var;\n  char char_var;\n  int int_var;\n  uint uint_var;\n  undefined4 undefined4_var;\n  FILE *file_pointer;\n  size_t size_t_var;\n  size_t size2;\n  byte *byte_pointer;\n  long *long_pointer2;\n  FILE *file_pointer2;\n  char *char_var;\n  long long_var1;\n  ulong ulong_var;\n  undefined8 *undefined8_pointer2;\n  undefined8 undefined8_var;\n  FILE *file_pointer3;\n  long **long_pointer_pointer;\n  undefined8 undefined8_var;\n  char **char_double_pointer;\n  uint uint_var;\n  char **char_double_pointer;\n  byte *byte_pointer;\n  long long_var;\n  long long_var;\n  undefined **undefined_pointer;\n  uint uint_var;\n  char *char_pointer;\n  byte *byte_pointer2;\n  char *char_pointer;\n  ulong ulong_var2;\n  ulong ulong_var3;\n  ulong ulong_var4;\n  FILE *file_pointer4;\n  char *char_pointer1;\n  uint uint_var;\n  int int_var2;\n  char *char_pointer3;\n  bool bool_var;\n  byte byte_var;\n  undefined8 undefined8_var;\n  FILE *file_ptr;\n  byte *byte_ptr;\n  char **char_pointer_pointer;\n  size_t size_t_var;\n  long long_var;\n  undefined undefined_array [2];\n  undefined undefined_var;\n  undefined5 undefined5_var1;\n  uint uint_var;\n  \n  byte_var = 0;\n  char_pointer3 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  char_pointer1 = (char *)argv;\n  file_pointer = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  char_pointer_pointer = (char **)0x7d0;\n  file_pointer4 = (FILE *)0x1;\n  file_ptr = (FILE *)0x0;\n  file_pointer2 = argv;\n  do {\n    uint_var = (uint)file_pointer4;\n    char_pointer = (char *)(long)(int)uint_var;\n    undefined8_var = (FILE *)((long)char_pointer * 8);\n    char_pointer1 = (char *)file_pointer2;\n    if (**(char **)(&file_pointer2->_flags + (long)char_pointer * 2) == '@') {\n      uint_var = (int)char_pointer_pointer - 1;\n      char_pointer_pointer = (char **)(ulong)uint_var;\n      if (uint_var == 0) {\n        long_pointer2 = *(long **)file_pointer2;\n        char_pointer3 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,char_pointer3,long_pointer2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      char_pointer = *(char **)(&file_pointer2->_flags + (long)char_pointer * 2) + 1;\n      int_var = stat(char_pointer,(stat *)undefined_array);\n      if (-1 < int_var) {\n        if ((uint_var & 0xf000) == 0x4000) {\n          long_pointer2 = *(long **)file_pointer2;\n          char_pointer3 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        file_pointer = fopen(char_pointer,\"r\");\n        if (file_pointer != (FILE *)0x0) {\n          int_var = fseek(file_pointer,0,2);\n          if (((int_var != -1) && (size_t_var = ftell(file_pointer), size_t_var != 0xffffffffffffffff)) &&\n             (int_var = fseek(file_pointer,0,0), int_var != -1)) {\n            byte_ptr = (byte *)xmalloc(size_t_var + 1);\n            size2 = fread(byte_ptr,1,size_t_var,file_pointer);\n            if ((size_t_var == size2) || (int_var = ferror(file_pointer), int_var == 0)) {\n              byte_ptr[size2] = 0;\n              byte_var = *byte_ptr;\n              byte_pointer = byte_ptr;\n              while( true ) {\n                if (byte_var == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byte_var * 2] & 0x40) == 0) break;\n                byte_var = byte_pointer[1];\n                byte_pointer = byte_pointer + 1;\n              }\n              size_t_var = strlen((char *)byte_ptr);\n              byte_pointer = (byte *)xmalloc(size_t_var + 1);\n              file_pointer3 = (FILE *)0x0;\n              int_var = 0;\n              bool_var2 = false;\n              bool_var = false;\n              bool_var1 = false;\n              long_var = 0;\n              byte_pointer = byte_ptr;\n              do {\n                while (((&_sch_istable)[(ulong)*byte_pointer * 2] & 0x40) != 0) {\n                  byte_pointer = byte_pointer + 1;\n                }\n                if ((int_var == 0) || (int_var + -1 <= (int)long_var)) {\n                  if (file_pointer3 == (FILE *)0x0) {\n                    int_var = 8;\n                    file_pointer3 = (FILE *)xmalloc(0x40);\n                    char_double_pointer = (char **)((long)&file_pointer3->_flags + long_var * 8);\n                    *char_double_pointer = (char *)0x0;\n                  }\n                  else {\n                    int_var = int_var * 2;\n                    file_pointer3 = (FILE *)xrealloc(file_pointer3,(long)int_var << 3);\n                    char_double_pointer = (char **)((long)&file_pointer3->_flags + long_var * 8);\n                    *char_double_pointer = (char *)0x0;\n                  }\n                }\n                else {\n                  char_double_pointer = (char **)((long)&file_pointer3->_flags + long_var * 8);\n                }\n                byte_var = *byte_pointer;\n                byte_pointer2 = byte_pointer;\n                while (byte_var != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var2 | bool_var1 | bool_var))) {\n                      bool_var1 = false;\n                      bool_var2 = false;\n                      bool_var = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bool_var1) break;\n                    byte_pointer = byte_pointer + 1;\n                    *byte_pointer2 = byte_var;\n                    byte_pointer2 = byte_pointer2 + 1;\n                    bool_var1 = false;\n                    byte_var = *byte_pointer;\n                    if (byte_var == 0) goto LAB_0010606f;\n                  }\n                  if (byte_var == 0x5c) {\n                    bool_var1 = true;\n                  }\n                  else if (bool_var) {\n                    if (byte_var == 0x27) {\n                      bool_var = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *byte_pointer2 = byte_var;\n                      byte_pointer2 = byte_pointer2 + 1;\n                    }\n                  }\n                  else if (bool_var2) {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var2 = false;\n                  }\n                  else if (byte_var == 0x27) {\n                    bool_var = true;\n                  }\n                  else {\n                    if (byte_var != 0x22) goto LAB_001061f1;\n                    bool_var2 = true;\n                  }\n                  byte_pointer = byte_pointer + 1;\n                  byte_pointer = byte_pointer + 1;\n                  byte_var = *byte_pointer;\n                }\nLAB_0010606f:\n                *byte_pointer2 = 0;\n                long_pointer2 = (long *)xstrdup(byte_pointer);\n                *char_double_pointer = (char *)long_pointer2;\n                *(undefined8 *)(file_pointer3->_shortbuf + long_var * 8 + -0x7b) = 0;\n                byte_var = *byte_pointer;\n                byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                while ((byte_var & 0x40) != 0) {\n                  byte_var = byte_pointer[1];\n                  byte_pointer = byte_pointer + 1;\n                  byte_var = (&_sch_istable)[(ulong)byte_var * 2];\n                }\n                long_var = long_var + 1;\n                if (byte_var == 0) {\n                  free(byte_pointer);\n                  if (file_pointer2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byte_ptr);\n          }\n          fclose(file_pointer);\n        }\n      }\n    }\n    if ((int)char_pointer3 <= (int)(uint_var + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uint_var = (uint)file_pointer4;\n        int_var = bfd_init();\n        char_pointer = \"fatal error: libbfd ABI mismatch\";\n        if (int_var != 0x118) goto LAB_00106803;\n        char_pointer = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefined_pointer = PTR_DAT_0010d2e0;\n        file_pointer4 = (FILE *)(ulong)uint_var;\n        if ((char)uint_var != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_functions_in_linked_list_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefined_pointer = PTR_DAT_0010d2e0;\n            int_var = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = int_var + 1;\n            *(code **)(undefined_pointer + (long)int_var * 8 + 0x10) = cleanup_function_00107730;\n          }\n          else {\n            undefined8_pointer2 = (undefined8 *)malloc(0x110);\n            if (undefined8_pointer2 != (undefined8 *)0x0) {\n              *undefined8_pointer2 = undefined_pointer;\n              *(undefined4 *)(undefined8_pointer2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8_pointer2;\n              goto LAB_0010632b;\n            }\n          }\n          long_var1 = 1;\n          do {\n            long_var = long_var1;\n            int_var = (int)char_pointer3;\n            if (int_var <= (int)long_var) break;\n            char_var = initialize_system_00107640(*(undefined8 *)((int *)char_pointer1 + long_var * 2));\n            long_var1 = long_var + 1;\n          } while (char_var != '\\0');\n          char_pointer3 = (char *)((long)char_pointer1 + long_var * 8 + -8);\n          uint_var = int_var - ((int)long_var + -1);\n          file_pointer = (FILE *)(ulong)uint_var;\n          if (_DAT_0010d65c != 0) {\n            char_pointer1 = \"DhHUvVt\";\n            uint_var = 0;\n            while (int_var = getopt_long(file_pointer,char_pointer3,\"DhHUvVt\",&PTR_DAT_0010d300), int_var != -1)\n            {\n              if (int_var < 0x77) {\n                if (0x43 < int_var) {\n                  switch(int_var) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uint_var = uint_var;\n                  }\n                }\n              }\n              else if (int_var == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uint_var < 2) {\nLAB_00107125:\n              char_pointer = (char *)0x0;\n              print_usage_and_exit_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_and_exit_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_gnu_version_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              file_pointer4 = (FILE *)0x0;\n              char_pointer1 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uint_var <= (int)char_pointer1) goto LAB_00106f8b;\n                char_pointer = *(char **)((int *)char_pointer3 + (long)char_pointer1 * 2);\n                if ((char)uint_var != '\\0') break;\n                uint_var = process_input_file_00107650();\n                char_pointer1 = (char *)((long)(int *)char_pointer1 + 1);\n                file_pointer4 = (FILE *)(ulong)((uint)file_pointer4 | uint_var);\n              }\n            }\n            while (long_var1 = get_file_size_warning_001052a0(char_pointer), long_var1 < 1) {\n              uint_var = 1;\nLAB_001071c4:\n              int_pointer = (int *)char_pointer1;\n              char_pointer1 = (char *)((long)int_pointer + 1);\n              file_pointer4 = (FILE *)(ulong)((uint)file_pointer4 | uint_var);\n              if ((int)uint_var <= (int)char_pointer1) {\nLAB_00106f8b:\n                    \n                xexit(file_pointer4);\n              }\n              char_pointer = *(char **)((char *)((long)char_pointer3 + 0x83) + (long)int_pointer * 8 + -0x7b);\n            }\n            int_var = open(char_pointer,2,0);\n            if (int_var < 0) {\n              bfd_set_error(1);\n              print_error_message_and_exit_00107c10(char_pointer);\nLAB_0010737f:\n              print_error_message_and_exit_00107c10(char_pointer);\nLAB_00107387:\n              print_bfd_error_message_00107c20(char_pointer);\n              int_var = bfd_get_error();\n              if (int_var == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(undefined5_var1,\n                                      CONCAT12(undefined_var,CONCAT11(undefined_array[1],undefined_array[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            char_pointer = (char *)bfd_fdopenr(char_pointer,0);\n            if ((FILE *)char_pointer == (FILE *)0x0) goto LAB_0010737f;\n            char_var = bfd_check_format_matches(char_pointer,2,undefined_array);\n            if (char_var == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)char_pointer + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uint_pointer = (uint *)((long)((long)char_pointer + 0x40) + 4);\n                *uint_pointer = *uint_pointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)char_pointer + 8) + 0x1f0))(char_pointer);\n              char_var = bfd_close(char_pointer);\n              if (char_var != '\\0') {\n                uint_var = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8_var = dcgettext(0,\"%s: no archive map to update\",5);\n            print_formatted_error_message_and_exit_00107690(undefined8_var,char_pointer);\nLAB_001073cc:\n            char_pointer = (char *)lbasename(DAT_0010d660);\n            size_t_var = strlen(char_pointer);\n            if ((size_t_var < 6) ||\n               (int_var = filename_cmp(char_pointer + (size_t_var - 6),\"ranlib\"), int_var != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          undefined_pointer = &PTR_DAT_0010d300;\n          char_pointer = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          char_pointer1 = (char *)&DAT_001096a0;\n          file_pointer2 = (FILE *)char_pointer;\n          file_pointer3 = file_pointer;\n          if ((int)uint_var < 2) goto switchD_00107462_caseD_1;\n          undefined8_var = (FILE *)CONCAT71(undefined8_var._1_7_,(char)uint_var);\nLAB_001063a3:\n          file_pointer2 = (FILE *)char_pointer;\n          if (**(char **)((long)char_pointer3 + 8) != '-') {\n            undefined_array[0] = 0x2d;\n            undefined_var = 0;\n            size_t_var = strlen(*(char **)((long)char_pointer3 + 8));\n            int_var = (int)size_t_var + (int)file_pointer;\n            file_pointer4 = (FILE *)xmalloc((long)int_var * 8);\n            undefined4_var = *(undefined4 *)((long)char_pointer3 + 4);\n            file_pointer4->_flags = *(int *)char_pointer3;\n            *(undefined4 *)&file_pointer4->field_0x4 = undefined4_var;\n            char_double_pointer = *(char ***)((long)char_pointer3 + 8);\n            file_ptr = (FILE *)((long)char_pointer3 + 0x10);\n            char_pointer_pointer = char_double_pointer;\n            if (*(char *)char_double_pointer == '\\0') {\n              char_double_pointer = &file_pointer4->_IO_read_ptr;\n            }\n            else {\n              byte_ptr = undefined_array;\n              undefined_array[1] = *(char *)char_double_pointer;\n              char_pointer = (char *)xstrdup();\n              char_double_pointer = &file_pointer4->_IO_read_end;\n              file_pointer4->_IO_read_ptr = char_pointer;\n              if (*(char *)((long)char_double_pointer + 1) != '\\0') {\n                undefined_array[1] = *(char *)((long)char_double_pointer + 1);\n                char_pointer = (char *)xstrdup(byte_ptr);\n                char_double_pointer = &file_pointer4->_IO_read_base;\n                file_pointer4->_IO_read_end = char_pointer;\n                if (*(char *)((long)char_double_pointer + 2) != '\\0') {\n                  undefined_array[1] = *(char *)((long)char_double_pointer + 2);\n                  char_pointer = (char *)xstrdup(byte_ptr);\n                  char_double_pointer = &file_pointer4->_IO_write_base;\n                  file_pointer4->_IO_read_base = char_pointer;\n                  if (*(char *)((long)char_double_pointer + 3) != '\\0') {\n                    char_double_pointer = &file_pointer4->_IO_write_ptr;\n                    undefined_array[1] = *(char *)((long)char_double_pointer + 3);\n                    char_pointer = (char *)xstrdup(byte_ptr);\n                    file_pointer4->_IO_write_base = char_pointer;\n                    char_var = *(char *)((long)char_double_pointer + 4);\n                    char_pointer_pointer = char_double_pointer;\n                    if (char_var != '\\0') {\n                      char_pointer = (char *)((long)char_double_pointer + 4);\n                      char_double_pointer = char_double_pointer;\n                      do {\n                        char_double_pointer = char_double_pointer + 1;\n                        undefined_array[1] = char_var;\n                        char_var = (char *)xstrdup(byte_ptr);\n                        char_pointer = char_pointer + 1;\n                        *char_double_pointer = char_var;\n                        char_var = *char_pointer;\n                        char_double_pointer = char_double_pointer;\n                        char_pointer_pointer = char_double_pointer;\n                      } while (char_var != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            long_var1 = (long)(int)file_pointer;\n            int_pointer = (int *)char_pointer3 + long_var1 * 2;\n            if (file_ptr < int_pointer) {\n              ulong_var = long_var1 * 8 - 0x11;\n              if ((ulong_var < 0x18) || (char_double_pointer == (char **)((long)char_pointer3 + 0x18))) {\n                *char_double_pointer = *(char **)((long)char_pointer3 + 0x10);\n                if (((char **)((long)char_pointer3 + 0x18) < int_pointer) &&\n                   ((((char_double_pointer[1] = *(char **)((long)char_pointer3 + 0x18),\n                      (char **)((long)char_pointer3 + 0x20) < int_pointer &&\n                      (char_double_pointer[2] = *(char **)((long)char_pointer3 + 0x20),\n                      (char **)((long)char_pointer3 + 0x28) < int_pointer)) &&\n                     (char_double_pointer[3] = *(char **)((long)char_pointer3 + 0x28),\n                     (char **)((long)char_pointer3 + 0x30) < int_pointer)) &&\n                    (char_double_pointer[4] = *(char **)((long)char_pointer3 + 0x30),\n                    (char **)((long)char_pointer3 + 0x38) < int_pointer)))) {\n                  char_double_pointer[5] = *(char **)((long)char_pointer3 + 0x38);\n                  char_pointer_pointer = char_double_pointer + 6;\n                  for (char_double_pointer = (char **)((long)char_pointer3 + 0x40); char_double_pointer < int_pointer;\n                      char_double_pointer = char_double_pointer + (ulong)byte_var * -2 + 1) {\n                    *char_pointer_pointer = *char_double_pointer;\n                    char_pointer_pointer = char_pointer_pointer + (ulong)byte_var * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4_var = *(undefined4 *)((long)((long)char_pointer3 + 0x10) + 4);\n                undefined4_var = *(undefined4 *)((long)char_pointer3 + 0x18);\n                undefined4_var = *(undefined4 *)((long)((long)char_pointer3 + 0x18) + 4);\n                ulong_var2 = (ulong_var >> 3) + 1;\n                *(undefined4 *)char_double_pointer = *(undefined4 *)((long)char_pointer3 + 0x10);\n                *(undefined4 *)((long)char_double_pointer + 4) = undefined4_var;\n                *(undefined4 *)(char_double_pointer + 1) = undefined4_var;\n                *(undefined4 *)((long)char_double_pointer + 0xc) = undefined4_var;\n                undefined4_var = *(undefined4 *)((long)((long)char_pointer3 + 0x20) + 4);\n                undefined4_var = *(undefined4 *)((long)char_pointer3 + 0x28);\n                undefined4_var = *(undefined4 *)((long)((long)char_pointer3 + 0x28) + 4);\n                ulong_var = ulong_var2 >> 1;\n                *(undefined4 *)(char_double_pointer + 2) = *(undefined4 *)((long)char_pointer3 + 0x20);\n                *(undefined4 *)((long)char_double_pointer + 0x14) = undefined4_var;\n                *(undefined4 *)(char_double_pointer + 3) = undefined4_var;\n                *(undefined4 *)((long)char_double_pointer + 0x1c) = undefined4_var;\n                if (ulong_var != 2) {\n                  undefined4_var = *(undefined4 *)((long)((long)char_pointer3 + 0x30) + 4);\n                  undefined4_var = *(undefined4 *)((long)char_pointer3 + 0x38);\n                  undefined4_var = *(undefined4 *)((long)((long)char_pointer3 + 0x38) + 4);\n                  *(undefined4 *)(char_double_pointer + 4) = *(undefined4 *)((long)char_pointer3 + 0x30);\n                  *(undefined4 *)((long)char_double_pointer + 0x24) = undefined4_var;\n                  *(undefined4 *)(char_double_pointer + 5) = undefined4_var;\n                  *(undefined4 *)((long)char_double_pointer + 0x2c) = undefined4_var;\n                  if (ulong_var != 3) {\n                    ulong_var3 = 3;\n                    do {\n                      ulong_var4 = ulong_var3 + 1;\n                      char_pointer = (char *)((long)char_pointer3 + 0x83) + ulong_var3 * 0x10 + -0x73;\n                      undefined4_var = *(undefined4 *)(char_pointer + 4);\n                      undefined4_var = *(undefined4 *)(char_pointer + 8);\n                      undefined4_var = *(undefined4 *)(char_pointer + 0xc);\n                      char_double_pointer = char_double_pointer + ulong_var3 * 2;\n                      *(undefined4 *)char_double_pointer = *(undefined4 *)char_pointer;\n                      *(undefined4 *)((long)char_double_pointer + 4) = undefined4_var;\n                      *(undefined4 *)(char_double_pointer + 1) = undefined4_var;\n                      *(undefined4 *)((long)char_double_pointer + 0xc) = undefined4_var;\n                      ulong_var3 = ulong_var4;\n                    } while (ulong_var4 != ulong_var);\n                  }\n                }\n                if ((ulong_var2 & 1) != 0) {\n                  char_double_pointer[ulong_var2 & 0xfffffffffffffffe] =\n                       *(char **)((long)file_ptr + (ulong_var2 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              char_double_pointer = char_double_pointer + long_var1 + -2;\n            }\n            file_pointer = (FILE *)(ulong)(int_var - 1);\n            *char_double_pointer = (char *)0x0;\n            char_pointer3 = (char *)file_pointer4;\n          }\nLAB_001065a2:\n          while( true ) {\n            uint_var = (uint)file_pointer4;\n            uint_var = getopt_long((ulong)file_pointer & 0xffffffff,char_pointer3,file_pointer2,undefined_pointer,0);\n            char_pointer = (char *)file_pointer2;\n            if (uint_var == 0xffffffff) break;\n            if (((uint_var - 100 < 0x15) && ((0x117201UL >> ((ulong)(uint_var - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            file_pointer3 = (FILE *)char_pointer3;\n            if (uint_var < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)char_pointer1 + (long)((int *)char_pointer1)[uint_var]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_archive_usage_0010342d(0);\n            char_pointer3 = (char *)file_pointer3;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uint_var = DAT_0010d64c;\n          file_pointer2 = (FILE *)char_pointer;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)file_pointer <= _optind || (_optind < 1)))) {\n              uint_var = 0;\n              goto LAB_001066aa;\n            }\n            char_pointer3 = (char *)((long)char_pointer3 + (long)_optind * 8 + -8);\n            uint_var = (int)file_pointer - (_optind + -1);\n            file_pointer = (FILE *)(ulong)uint_var;\n            _optind = 0;\n            if (1 < (int)uint_var) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          file_pointer4 = (FILE *)((ulong)undefined8_var & 0xff);\n          uint_var = (uint)file_pointer4;\n          undefined_pointer = (undefined **)((int *)char_pointer3 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_gnu_version_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              file_pointer3 = (FILE *)char_pointer3;\n              if (*undefined_pointer == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uint_var == 3) goto LAB_00106abc;\n                  if (uint_var != 0) goto LAB_00106700;\nLAB_00106eff:\n                  char_pointer = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uint_var == 3) || (uint_var == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4_var = process_input_file_00107650();\n                    \n                  xexit(undefined4_var);\n                }\nLAB_00106abc:\n                if (uint_var == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  char_pointer = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              char_pointer = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*undefined_pointer;\n                char_pointer = (char *)0x1;\n                char_pointer = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                char_pointer = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  int_var = (int)char_pointer;\n                  if (*(char **)((long)undefined_pointer + (long)int_var * 2 * 4) == (char *)0x0) {\n                    undefined8_var = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_formatted_error_message_and_exit_00107690(undefined8_var);\n                    uint_var = uint_var;\nLAB_00107548:\n                    if (uint_var == 2) {\nLAB_0010704f:\n                      char_pointer = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  char_pointer = (char *)(ulong)(int_var + 1);\n                  long_var1 = strtol(*(char **)((long)undefined_pointer + (long)int_var * 2 * 4),(char **)0x0,10)\n                  ;\n                  char_pointer = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)long_var1;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              long_var1 = (long)(int)char_pointer;\n              file_pointer2 = (FILE *)char_pointer;\n              if (*(long *)(int *)((long)undefined_pointer + long_var1 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              file_pointer2 = (FILE *)((long)undefined_pointer + (long_var1 + 1) * 2 * 4);\n              if (*(FILE **)file_pointer2 == (FILE *)0x0) {\n                char_pointer1 = (char *)0x0;\n                file_pointer2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)undefined_pointer + (long_var1 + 2) * 2 * 4) == 0) {\n                char_pointer1 = (char *)0x1;\n              }\n              else if (*(long *)((long)undefined_pointer + (long_var1 + 3) * 2 * 4) == 0) {\n                char_pointer1 = (char *)0x2;\n              }\n              else if (*(long *)((long)undefined_pointer + (long_var1 + 4) * 2 * 4) == 0) {\n                char_pointer1 = (char *)0x3;\n              }\n              else if (*(long *)((long)undefined_pointer + (long_var1 + 5) * 2 * 4) == 0) {\n                char_pointer1 = (char *)0x4;\n              }\n              else {\n                file_pointer = (FILE *)0x5;\n                do {\n                  char_pointer1 = (char *)file_pointer;\n                  file_pointer = (FILE *)((long)(int *)char_pointer1 + 1);\n                } while (*(long *)((int *)((long)undefined_pointer + long_var1 * 2 * 4) + (long)file_pointer * 2) !=\n                         0);\n              }\n              undefined8_pointer2 = (undefined8 *)extract_and_convert_archived_files_00105300();\n              file_pointer = file_pointer2;\n              if (DAT_0010d64c == 5) {\n                char_pointer = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8_pointer2 + 0x49) & 0x10) == 0) {\n                  char_pointer = (char *)file_pointer2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archive_entries_00105480(undefined8_pointer2,extract_and_print_archive_member_00107740,char_pointer,(ulong)char_pointer1 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_t_var = strlen(DAT_0010d628);\n                char_pointer3 = \"__.LIBDEP\";\n                char_pointer = (char *)(size_t_var + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8_pointer2);\n                if (DAT_0010d620 == 0) {\n                  char_pointer = \"Cannot create libdeps record.\";\n                }\n                else {\n                  long_var1 = bfd_find_target(\"binary\",DAT_0010d620);\n                  char_pointer = \"Cannot set libdeps record type to binary.\";\n                  if (long_var1 != 0) {\n                    char_var = bfd_set_format(DAT_0010d620,1,5);\n                    char_pointer = \"Cannot set libdeps object format.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    char_var = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    char_pointer = \"Cannot make libdeps object writable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    file_pointer3 = (FILE *)bfd_bwrite(DAT_0010d628,char_pointer,DAT_0010d620);\n                    char_pointer = \"Cannot write libdeps record.\";\n                    if (file_pointer3 != (FILE *)char_pointer) goto LAB_00106803;\n                    char_var = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    char_pointer = \"Cannot make libdeps object readable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    long_var1 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    char_pointer = \"Cannot reset libdeps record type.\";\n                    if (long_var1 == 0) goto LAB_00106803;\n                    int_var = (int)char_pointer1;\n                    undefined8_var = (FILE *)((long)(int_var + 2) * 8);\n                    char_pointer = (char *)xmalloc(undefined8_var,\"Cannot reset libdeps record type.\");\n                    if (int_var == 0) {\n                      long_var1 = 0;\n                    }\n                    else {\n                      undefined4_var = *(undefined4 *)&file_pointer2->field_0x4;\n                      *(int *)char_pointer = file_pointer2->_flags;\n                      *(undefined4 *)((long)char_pointer + 4) = undefined4_var;\n                      long_var1 = 8;\n                      char_double_pointer = (char **)((long)char_pointer + 8);\n                      for (char_pointer1 = undefined8_var[-1]._unused2 + 4; char_pointer1 != (char *)0x0;\n                          char_pointer1 = char_pointer1 + -1) {\n                        *(undefined *)char_double_pointer = *(undefined *)&file_pointer2->_flags;\n                        file_pointer2 = (FILE *)((long)file_pointer2 + (ulong)byte_var * -2 + 1);\n                        char_double_pointer = (char **)((long)char_double_pointer + (ulong)byte_var * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)char_pointer + long_var1) = \"__.LIBDEP\";\n                    char_pointer1 = (char *)(ulong)(int_var + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)char_pointer + -0xd8))->_unused2 + 0xc + (long)undefined8_var) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      file_pointer2 = (FILE *)char_pointer;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                char_pointer = (char *)file_pointer2;\n                if (file_pointer2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                file_pointer = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                char_pointer = (char *)file_pointer2;\n                if ((file_pointer2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_extracted_files_00105570(undefined8_pointer2,char_pointer,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                char_pointer = (char *)file_pointer2;\nswitchD_00106ed8_caseD_3:\n                process_archive_entries_00105480(undefined8_pointer2,print_file_info_00107890,char_pointer,(ulong)char_pointer1 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                char_pointer = (char *)file_pointer2;\nswitchD_00106ed8_caseD_4:\n                process_archive_entries_00105480(undefined8_pointer2,extract_and_print_archive_contents_00103a78,char_pointer,(ulong)char_pointer1 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                char_pointer = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (file_pointer2 == (FILE *)0x0) break;\nLAB_00106afb:\n                file_pointer = (FILE *)(undefined8_pointer2 + 0x1e);\n                do {\n                  file_pointer4 = file_pointer;\n                  if (*(FILE **)file_pointer2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    process_archive_file_001058b0(undefined8_pointer2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    long_pointer2 = *(long **)file_pointer4;\n                    char_pointer3 = *(char **)file_pointer2;\n                    if (long_pointer2 == (long *)0x0) {\n                      undefined8_var = *undefined8_pointer2;\n                      undefined8_var = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_formatted_error_message_and_exit_00107690(undefined8_var,char_pointer3,undefined8_var);\n                      char_pointer1 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    long_var1 = *long_pointer2;\n                    undefined8_var = extract_and_copy_substring_00105830(char_pointer3,undefined8_pointer2);\n                    int_var = filename_cmp(undefined8_var,long_var1);\n                    if (int_var == 0) break;\n                    file_pointer4 = (FILE *)(*(long **)file_pointer4 + 0x1e);\n                  }\n                  *(long **)file_pointer4 = (long *)long_pointer2[0x1e];\n                  long_pointer_pointer = (long **)find_last_occurrence_00105870(file_pointer,3,0);\n                  bool_var = DAT_0010d60c != 0;\n                  long_pointer = *long_pointer_pointer;\n                  *long_pointer_pointer = long_pointer2;\n                  long_pointer2[0x1e] = (long)long_pointer;\n                  if (bool_var) {\n                    printf(\"m - %s\\n\",*(FILE **)file_pointer2);\n                  }\n                  file_pointer2 = (FILE *)&file_pointer2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_archive_usage_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          int_var = fileno(_stdin);\n          _DAT_0010d608 = isatty(int_var);\n          extract_and_process_archive_script_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4_var = bfd_get_error();\n        file_pointer2 = (FILE *)bfd_errmsg(undefined4_var);\n        undefined8_var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        int_var = print_formatted_error_message_and_exit_00107690(undefined8_var,\"x86_64-pc-linux-gnu\",file_pointer2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          undefined_pointer = (undefined **)char_pointer;\n          file_pointer3 = (FILE *)char_pointer3;\n          switch(int_var) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uint_var = (uint)file_pointer4;\n            char_pointer = \"libdeps specified more than once\";\n            char_pointer = (char *)file_pointer2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        char_pointer = \"two different operation options specified\";\n        char_pointer = (char *)file_pointer2;\nLAB_00106803:\n        undefined8_var = dcgettext(0,char_pointer,5);\n        print_formatted_error_message_and_exit_00107690(undefined8_var);\nLAB_00106814:\n        int_var = (int)char_pointer3;\n        file_pointer3 = (FILE *)xmalloc(8);\n        *(long **)file_pointer3 = (long *)0x0;\n        if ((FILE *)char_pointer1 == argv) {\nLAB_00106834:\n          if (*(long **)char_pointer1 == (long *)0x0) {\n            int_var = 0;\n          }\n          else {\n            long_var1 = 1;\n            do {\n              int_var = (int)long_var1;\n              long_var = long_var1 * 2;\n              long_var1 = long_var1 + 1;\n            } while (*(long *)((int *)char_pointer1 + long_var) != 0);\n          }\n          file_pointer2 = (FILE *)xmalloc((long)(int_var + 1) << 3);\n          long_pointer2 = *(long **)char_pointer1;\n          long_var1 = 0;\n          while (long_pointer2 != (long *)0x0) {\n            undefined8_var = xstrdup();\n            *(undefined8 *)((long)&file_pointer2->_flags + long_var1) = undefined8_var;\n            long_pointer2 = *(long **)((char *)((long)char_pointer1 + 0x83) + long_var1 + -0x7b);\n            long_var1 = long_var1 + 8;\n          }\n          *(undefined8 *)((long)&file_pointer2->_flags + long_var1) = 0;\nLAB_0010610a:\n          int_var = (int)char_pointer3;\n          char_pointer1 = (char *)file_pointer2;\n          if (*(long **)file_pointer3 == (long *)0x0) goto LAB_00106a80;\n          long_var1 = 0;\n          do {\n            long_var = long_var1 + 1;\n            long_var = long_var1 * 8;\n            long_var1 = long_var;\n          } while (*(long *)(file_pointer3->_shortbuf + long_var + -0x7b) != 0);\n          size_t_var = long_var * 8;\n        }\n        else {\nLAB_00106a80:\n          long_var = 0;\n          size_t_var = 0;\n        }\n        long_var1 = (long)char_pointer * 2;\n        char_pointer = (char *)((long)(char **)char_pointer + long_var);\n        free(*(void **)((int *)char_pointer1 + long_var1));\n        file_pointer2 = (FILE *)xrealloc(char_pointer1,(long_var + 1 + (long)int_var) * 8);\n        uint_var = int_var + -1 + (int)long_var;\n        char_pointer3 = (char *)(ulong)uint_var;\n        memmove(&file_pointer2->_flags + (long)char_pointer * 2,\n                (void *)((long)&file_pointer2->_IO_read_ptr + (long)undefined8_var),\n                (long)(int)(int_var - uint_var) << 3);\n        memcpy((void *)((long)&undefined8_var->_flags + (long)&file_pointer2->_flags),file_pointer3,size_t_var);\n        free(file_pointer3);\n        free(byte_ptr);\n        fclose(file_pointer);\n        uint_var = (int)file_ptr + 1;\n        file_pointer4 = undefined8_var;\n        char_pointer1 = (char *)file_pointer2;\n        undefined8_var = file_pointer3;\n        if ((int)uint_var < (int)uint_var) goto LAB_001061ce;\n      } while( true );\n    }\n    uint_var = uint_var + 1;\n    file_ptr = file_pointer4;\nLAB_001061ce:\n    file_pointer4 = (FILE *)(ulong)uint_var;\n  } while( true );\nswitchD_00107462_caseD_0:\n  int_var = getopt_long((ulong)file_pointer & 0xffffffff,char_pointer3,file_pointer2,\"x86_64-pc-linux-gnu\");\n  char_pointer = (char *)file_pointer2;\n  if (int_var == -1) goto LAB_00106680;\n  if ((0x14 < int_var - 100U) || ((0x117201UL >> ((byte)(int_var - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8_var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_with_formatted_message_00107920(undefined8_var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)char_pointer == (FILE *)0x0) {\n    if ((char)file_pointer != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  int_var2 = 0;\n  int_var = strcmp((char *)*(FILE **)char_pointer,\"__.SYMDEF\");\n  undefined8_pointer = undefined8_pointer2;\n  if (int_var == 0) {\n    *(byte *)((long)undefined8_pointer2 + 0x49) = *(byte *)((long)undefined8_pointer2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      long_pointer2 = undefined8_pointer + 0x1e;\n      if ((undefined8 *)*long_pointer2 == (undefined8 *)0x0) break;\n      undefined8_var = *(undefined8 *)*long_pointer2;\n      undefined8_var = extract_and_copy_substring_00105830(*(FILE **)char_pointer,undefined8_pointer2);\n      int_var = filename_cmp(undefined8_var,undefined8_var);\n      if ((int_var == 0) &&\n         ((DAT_0010d634 == '\\0' || (int_var2 = int_var2 + 1, int_var2 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)char_pointer);\n        }\n        *long_pointer2 = *(long *)(*long_pointer2 + 0xf0);\n        file_pointer = file_pointer4;\n        goto LAB_00106d38;\n      }\n      undefined8_pointer = (undefined8 *)*long_pointer2;\n    }\n    if (DAT_0010d60c != 0) {\n      file_pointer2 = *(FILE **)char_pointer;\n      char_pointer3 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(char_pointer3,file_pointer2);\n    }\n  }\nLAB_00106d38:\n  char_pointer = (char *)((long)char_pointer + 8);\n  goto LAB_00106b89;\n}\n\n",
            "current_name": "extract_and_process_archive_files_00105db0",
            "entrypoint": "0x00105db0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105db0": "extract_and_process_archive_files_00105db0",
                "__ptr": "byte_pointer",
                "bVar13": "byte_var",
                "bVar3": "byte_var",
                "bVar47": "bool_var",
                "bVar48": "byte_var",
                "bVar8": "bool_var1",
                "bVar9": "bool_var2",
                "cVar14": "char_var",
                "extraout_EDX": "uint_var",
                "iVar15": "int_var",
                "iVar45": "int_var2",
                "lVar24": "long_var1",
                "lVar34": "long_var",
                "lVar35": "long_var",
                "local_100": "long_var",
                "local_108": "size_t_var",
                "local_110": "char_pointer_pointer",
                "local_118": "byte_ptr",
                "local_128": "file_ptr",
                "local_130": "undefined8_var",
                "local_b0": "uint_var",
                "local_c8": "undefined_array",
                "pFVar18": "file_pointer",
                "pFVar22": "file_pointer2",
                "pFVar28": "file_pointer3",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_pointer",
                "pbVar33": "byte_pointer",
                "pbVar38": "byte_pointer2",
                "pcVar23": "char_var",
                "pcVar39": "char_pointer",
                "pcVar43": "char_pointer1",
                "pcVar46": "char_pointer3",
                "piVar11": "int_pointer",
                "plVar21": "long_pointer2",
                "plVar29": "long_pointer_pointer",
                "plVar4": "long_pointer",
                "ppcVar10": "char_pointer_pointer",
                "ppcVar31": "char_double_pointer",
                "ppcVar32": "char_double_pointer",
                "pplVar29": "long_pointer_pointer",
                "ppuVar36": "undefined_pointer",
                "puVar12": "undefined_pointer",
                "puVar2": "uint_pointer",
                "puVar26": "undefined8_pointer2",
                "puVar36": "undefined_double_ptr",
                "puVar5": "undefined8_pointer",
                "sVar19": "size_t_var",
                "sVar20": "size2",
                "uStack_c5": "undefined5_var1",
                "uStack_c6": "undefined_var",
                "uVar16": "uint_var",
                "uVar17": "undefined4_var",
                "uVar25": "ulong_var",
                "uVar27": "undefined8_var",
                "uVar30": "undefined8_var",
                "uVar37": "uint_var",
                "uVar40": "ulong_var2",
                "uVar41": "ulong_var3",
                "uVar42": "ulong_var4",
                "uVar44": "uint_var",
                "uVar6": "undefined4_var",
                "uVar7": "undefined4_var",
                "unaff_R12": "file_pointer4",
                "unaff_RBP": "char_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001075e0": {
            "additional_data": {
                "FUN_001075e0": {
                    "print_binutils_info": 4,
                    "print_binutils_version": 1,
                    "print_copy_right_info": 1,
                    "print_gnu_version_info": 2,
                    "print_version_info": 23
                },
                "param_1": {
                    "binary_name": 1,
                    "compiler_name": 1,
                    "distribution": 1,
                    "distro_name": 1,
                    "program_name": 7,
                    "version": 13,
                    "version_number": 2,
                    "version_string": 5
                },
                "pcVar1": {
                    "copy_right_message": 1,
                    "copy_right_msg": 4,
                    "copy_right_string": 2,
                    "copyright_message": 8,
                    "copyright_msg": 2,
                    "copyright_notice": 1,
                    "copyright_string": 4,
                    "copyright_text": 4,
                    "license_text": 1,
                    "localized_text": 1,
                    "message": 2
                }
            },
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid print_gnu_version_info_001075e0(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_gnu_version_info_001075e0",
            "entrypoint": "0x001075e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001075e0": "print_gnu_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyright_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107640": {
            "additional_data": {
                "FUN_00107640": {
                    "clear_state": 1,
                    "do_nothing": 1,
                    "get_default_value": 8,
                    "initialize": 13,
                    "initialize_app": 1,
                    "initialize_application": 1,
                    "initialize_data": 1,
                    "initialize_program": 2,
                    "initialize_system": 2,
                    "return_zero": 1
                },
                "PTR_param1": {
                    "param1": 1
                },
                "PTR_param2": {
                    "param2": 1
                },
                "return": {
                    "return_value": 1
                },
                "undefined8": {
                    "uint64_t": 3,
                    "void": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid initialize_system_00107640(void)\n\n{\n  return_value 0;\n}\n\n",
            "current_name": "initialize_system_00107640",
            "entrypoint": "0x00107640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107640": "initialize_system_00107640",
                "return": "return_value",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107650": {
            "additional_data": {
                "FUN_00107650": {
                    "check_and_process_archive": 2,
                    "check_and_process_archived_files": 2,
                    "extract_and_process_files": 1,
                    "extract_archived_files": 1,
                    "process_and_extract_archived_files": 2,
                    "process_extracted_archive": 1,
                    "process_extracted_files": 1,
                    "process_file": 19,
                    "process_file_extraction": 1,
                    "process_input_file": 1
                },
                "extract_and_convert_archived_files_00105300": {
                    "extract_and_convert_files": 1
                },
                "get_file_size_warning_001052a0": {
                    "get_file_size": 1
                },
                "lVar2": {
                    "file_size": 29,
                    "file_size_warning": 1,
                    "filesize_warning": 1
                },
                "param_1": {
                    "archive_file_path": 1,
                    "archive_path": 1,
                    "file": 4,
                    "file_handle": 3,
                    "file_name": 1,
                    "file_path": 14,
                    "file_size": 3,
                    "input_file": 3,
                    "input_file_path": 1
                },
                "process_archive_file_001058b0": {
                    "process_archive_file": 1
                },
                "uVar1": {
                    "result": 20,
                    "return_value": 5,
                    "status": 4
                },
                "xexit": {
                    "exit_program": 1
                }
            },
            "called": [
                "xexit",
                "FUN_00105300",
                "FUN_0010284b",
                "FUN_001052a0",
                "FUN_001058b0"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nundefined8 process_input_file_00107650(undefined8 file_path)\n\n{\n  undefined8 result;\n  long file_size;\n  \n  file_size = get_file_size();\n  if (file_size < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    file_size = extract_and_convert_files(file_path,0);\n    if (file_size == 0) {\n                    \n      xexit(1);\n    }\n    process_archive_file(file_size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_input_file_00107650",
            "entrypoint": "0x00107650",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107650": "process_input_file_00107650",
                "extract_and_convert_archived_files_00105300": "extract_and_convert_files",
                "get_file_size_warning_001052a0": "get_file_size",
                "lVar2": "file_size",
                "param_1": "file_path",
                "process_archive_file_001058b0": "process_archive_file",
                "uVar1": "result",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107690": {
            "additional_data": {
                "FUN_00107690": {
                    "format_and_print_error_message": 1,
                    "print_and_exit": 2,
                    "print_error_and_exit": 9,
                    "print_error_message_and_exit": 10,
                    "print_formatted_error_and_exit": 1,
                    "print_formatted_error_message": 4,
                    "print_formatted_error_message_and_exit": 4
                },
                "in_AL": {
                    "condition": 5,
                    "condition_check": 1,
                    "enable_error_message": 1,
                    "flag": 20,
                    "input_flag": 2,
                    "is_error": 1,
                    "set_error": 1
                },
                "local_18": {
                    "arg7_copy": 1,
                    "error_code8_copy": 1,
                    "local92": 1,
                    "local_error_code8": 1,
                    "local_param8": 2,
                    "local_param_8": 1,
                    "local_parameter8": 1,
                    "local_var8": 1,
                    "param7": 1,
                    "param7_copy": 1,
                    "param8": 3,
                    "param8_copy": 9,
                    "param_8": 2,
                    "param_8_copy": 4
                },
                "local_28": {
                    "arg6_copy": 1,
                    "error_code7_copy": 1,
                    "local88": 1,
                    "local_error_code7": 1,
                    "local_param7": 2,
                    "local_param_7": 1,
                    "local_parameter7": 1,
                    "local_var7": 1,
                    "param6": 1,
                    "param6_copy": 1,
                    "param7": 3,
                    "param7_copy": 9,
                    "param_7": 2,
                    "param_7_copy": 4
                },
                "local_38": {
                    "arg5_copy": 1,
                    "error_code6_copy": 1,
                    "local84": 1,
                    "local_error_code6": 1,
                    "local_param6": 2,
                    "local_param_6": 1,
                    "local_parameter6": 1,
                    "local_var6": 1,
                    "param5": 1,
                    "param5_copy": 1,
                    "param6": 3,
                    "param6_copy": 9,
                    "param_6": 2,
                    "param_6_copy": 4
                },
                "local_48": {
                    "arg4_copy": 1,
                    "error_code5_copy": 1,
                    "local80": 1,
                    "local_error_code5": 1,
                    "local_param5": 2,
                    "local_param_5": 1,
                    "local_parameter5": 1,
                    "local_var5": 1,
                    "param4": 1,
                    "param4_copy": 1,
                    "param5": 3,
                    "param5_copy": 9,
                    "param_5": 2,
                    "param_5_copy": 4
                },
                "local_58": {
                    "arg3_copy": 1,
                    "error_code4_copy": 1,
                    "local76": 1,
                    "local_error_code4": 1,
                    "local_param4": 2,
                    "local_param_4": 1,
                    "local_parameter4": 1,
                    "local_var4": 1,
                    "param3": 1,
                    "param3_copy": 1,
                    "param4": 3,
                    "param4_copy": 9,
                    "param_4": 2,
                    "param_4_copy": 4
                },
                "local_68": {
                    "arg2_copy": 1,
                    "error_code3_copy": 1,
                    "local72": 1,
                    "local_error_code3": 1,
                    "local_param3": 2,
                    "local_param_3": 1,
                    "local_parameter3": 1,
                    "local_var3": 1,
                    "param2": 1,
                    "param2_copy": 1,
                    "param3": 3,
                    "param3_copy": 9,
                    "param_3": 2,
                    "param_3_copy": 4
                },
                "local_78": {
                    "arg1_copy": 1,
                    "error_code2_copy": 1,
                    "local68": 1,
                    "local_error_code2": 1,
                    "local_param2": 2,
                    "local_param_2": 1,
                    "local_parameter2": 1,
                    "local_var2": 1,
                    "param1": 1,
                    "param1_copy": 1,
                    "param2": 3,
                    "param2_copy": 9,
                    "param_2": 2,
                    "param_2_copy": 4
                },
                "local_88": {
                    "error_code": 4,
                    "error_code1_copy": 1,
                    "error_code_copy": 13,
                    "local64": 1,
                    "local_error_code": 1,
                    "local_error_code1": 1,
                    "local_param1": 2,
                    "local_param_1": 1,
                    "local_var1": 1,
                    "param1": 1,
                    "param_1": 1,
                    "param_1_copy": 2
                },
                "local_90": {
                    "error_value5": 1,
                    "local52": 1,
                    "local_param14": 2,
                    "local_param_14": 1,
                    "local_value5": 1,
                    "param14": 5,
                    "param14_copy": 13,
                    "param_14": 2,
                    "param_14_copy": 4,
                    "param_e": 1
                },
                "local_98": {
                    "error_value4": 1,
                    "local48": 1,
                    "local_param13": 2,
                    "local_param_13": 1,
                    "local_value4": 1,
                    "param13": 5,
                    "param13_copy": 13,
                    "param_13": 2,
                    "param_13_copy": 4,
                    "param_d": 1
                },
                "local_a0": {
                    "error_value3": 1,
                    "local44": 1,
                    "local_param12": 2,
                    "local_param_12": 1,
                    "local_value3": 1,
                    "param12": 5,
                    "param12_copy": 13,
                    "param_12": 2,
                    "param_12_copy": 4,
                    "param_c": 1
                },
                "local_a8": {
                    "error_value2": 1,
                    "local40": 1,
                    "local_param11": 2,
                    "local_param_11": 1,
                    "local_value2": 1,
                    "param11": 5,
                    "param11_copy": 13,
                    "param_11": 2,
                    "param_11_copy": 4,
                    "param_b": 1
                },
                "local_b0": {
                    "error_value1": 1,
                    "local36": 1,
                    "local_param10": 2,
                    "local_param_10": 1,
                    "local_value1": 1,
                    "param10": 5,
                    "param10_copy": 13,
                    "param_10": 2,
                    "param_10_copy": 4,
                    "param_a": 1
                },
                "local_b8": {
                    "array": 1,
                    "buffer": 3,
                    "error_buffer": 2,
                    "format_buffer": 1,
                    "formatted_error_message": 1,
                    "formatted_message": 1,
                    "local_array": 4,
                    "local_buffer": 5,
                    "local_variable": 1,
                    "output_buffer": 1,
                    "static_buffer": 1,
                    "temp_buffer": 3,
                    "temporary_buffer": 3,
                    "unused_buffer": 1
                },
                "local_c8": {
                    "buffer": 4,
                    "buffer_pointer": 1,
                    "error_message": 1,
                    "error_msg_buffer": 1,
                    "local_b8_address": 1,
                    "local_buffer": 18,
                    "local_ptr1": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "local_variable_address": 1,
                    "local_variable_array": 1
                },
                "local_d0": {
                    "array": 1,
                    "buffer": 9,
                    "buffer_address": 4,
                    "buffer_pointer": 3,
                    "buffer_ptr": 2,
                    "buffer_start": 1,
                    "formatted_error_buffer": 1,
                    "local_pointer1": 1,
                    "local_ptr": 2,
                    "local_var2": 1,
                    "message_pointer": 2,
                    "pointer": 1,
                    "stack_ptr": 1
                },
                "local_d4": {
                    "buffer_length": 3,
                    "buffer_size": 3,
                    "constant": 1,
                    "error_message_length": 1,
                    "length": 1,
                    "local_length": 1,
                    "local_size": 1,
                    "local_var": 2,
                    "local_var1": 2,
                    "local_variable": 1,
                    "local_variable_size": 1,
                    "loop_index": 1,
                    "max_error_msg_size": 1,
                    "message_length": 2,
                    "offset": 2,
                    "size": 2,
                    "string_length": 1,
                    "value": 1
                },
                "local_d8": {
                    "array_size": 1,
                    "buffer_size": 12,
                    "error_code": 1,
                    "error_code_length": 2,
                    "error_size": 1,
                    "formatted_error_length": 1,
                    "length": 2,
                    "local_i": 1,
                    "local_size": 2,
                    "num_bytes": 3,
                    "number_of_characters": 1,
                    "size": 4
                },
                "param_1": {
                    "error_code": 25,
                    "error_code1": 3,
                    "error_message": 1,
                    "error_type": 1
                },
                "param_10": {
                    "error1": 1,
                    "param10": 18,
                    "param8": 2,
                    "param_10": 6,
                    "param_a": 1,
                    "value1": 2
                },
                "param_11": {
                    "error2": 1,
                    "param11": 18,
                    "param9": 2,
                    "param_11": 6,
                    "param_b": 1,
                    "value2": 2
                },
                "param_12": {
                    "error3": 1,
                    "param10": 2,
                    "param12": 18,
                    "param_12": 6,
                    "param_c": 1,
                    "value3": 2
                },
                "param_13": {
                    "error4": 1,
                    "param11": 2,
                    "param13": 18,
                    "param_13": 6,
                    "param_d": 1,
                    "value4": 2
                },
                "param_14": {
                    "error5": 1,
                    "param12": 2,
                    "param14": 18,
                    "param_14": 6,
                    "param_e": 1,
                    "value5": 2
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 1,
                    "error_code": 1,
                    "error_code2": 3,
                    "param1": 2,
                    "param2": 15,
                    "param_2": 6,
                    "parameter2": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 1,
                    "error_code3": 3,
                    "param2": 2,
                    "param3": 15,
                    "param_3": 6,
                    "parameter1": 1,
                    "parameter3": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 1,
                    "error_code4": 3,
                    "param3": 2,
                    "param4": 15,
                    "param_4": 6,
                    "parameter2": 1,
                    "parameter4": 1
                },
                "param_5": {
                    "arg4": 1,
                    "arg5": 1,
                    "error_code5": 3,
                    "param4": 2,
                    "param5": 15,
                    "param_5": 6,
                    "parameter3": 1,
                    "parameter5": 1
                },
                "param_6": {
                    "arg5": 1,
                    "arg6": 1,
                    "error_code6": 3,
                    "param5": 2,
                    "param6": 15,
                    "param_6": 6,
                    "parameter4": 1,
                    "parameter6": 1
                },
                "param_7": {
                    "arg6": 1,
                    "arg7": 1,
                    "error_code7": 3,
                    "param6": 2,
                    "param7": 15,
                    "param_7": 6,
                    "parameter5": 1,
                    "parameter7": 1
                },
                "param_8": {
                    "arg7": 1,
                    "arg8": 1,
                    "error_code8": 3,
                    "param7": 2,
                    "param8": 15,
                    "param_8": 6,
                    "parameter6": 1,
                    "parameter8": 1
                },
                "param_9": {
                    "error_code": 1,
                    "error_message": 28,
                    "formatted_error_message": 1
                }
            },
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "calling": [
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00103a78",
                "FUN_00105300"
            ],
            "code": "\nvoid print_formatted_error_message_and_exit_00107690(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 buffer_size;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = local_buffer;\n  buffer_size = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_formatted_error_message_001078c0(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_formatted_error_message_and_exit_00107690",
            "entrypoint": "0x00107690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107690": "print_formatted_error_message_and_exit_00107690",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "local_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "buffer_size",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107730": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "file": 3,
                    "file_handle": 1,
                    "file_pointer": 5,
                    "file_ptr": 2,
                    "file_stream": 1,
                    "file_to_close": 2,
                    "log_file": 1
                },
                "DAT_0010d5e0": {
                    "bfd_cache": 1,
                    "bfd_cache_flag": 1,
                    "cache_enabled": 2,
                    "cache_file_handle": 1,
                    "cache_flag": 1,
                    "cache_pointer": 1,
                    "cache_status": 2,
                    "is_cache_open": 5,
                    "should_close_cache": 1
                },
                "DAT_0010d618": {
                    "binary_file_path": 1,
                    "cache_status": 1,
                    "data_pointer": 1,
                    "file_name": 1,
                    "file_path": 5,
                    "file_pointer": 1,
                    "file_status": 1,
                    "file_to_check": 1,
                    "filename": 1,
                    "resource": 1,
                    "working_directory": 1
                },
                "FILE": {
                    "file": 2
                },
                "FUN_00107730": {
                    "clean_up_function": 1,
                    "cleanup": 2,
                    "cleanup_and_close_file": 1,
                    "cleanup_and_delete_file": 4,
                    "cleanup_and_remove_file": 2,
                    "cleanup_binary": 1,
                    "cleanup_binary_file": 1,
                    "cleanup_cache": 1,
                    "cleanup_file": 3,
                    "cleanup_files": 2,
                    "cleanup_function": 8,
                    "cleanup_resource": 1,
                    "close_file": 1,
                    "close_file_and_delete": 2,
                    "close_file_and_delete_if_not_modified": 1
                },
                "a": {
                    "cache_status": 1
                },
                "b": {
                    "file_status": 1
                },
                "bfd_cache_close": {
                    "close_bfd_cache": 2,
                    "close_cache": 3
                },
                "c": {
                    "file_pointer": 1
                },
                "d": {
                    "file_path": 1
                },
                "fclose": {
                    "close_file": 9
                },
                "fileHandle": {
                    "file": 1
                },
                "filePath": {
                    "path": 1
                },
                "func_0010d5d8": {
                    "file_pointer": 1
                },
                "func_0010d5e0": {
                    "is_cache_open": 1
                },
                "func_0010d618": {
                    "file": 1
                },
                "tempFileHandle": {
                    "temp_file": 1
                },
                "unlink_if_ordinary": {
                    "delete_file": 10,
                    "remove_file": 8,
                    "remove_ordinary_file": 1,
                    "unlink_file": 1
                }
            },
            "called": [
                "FUN_00102bf5"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid cleanup_function_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (file *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "current_name": "cleanup_function_00107730",
            "entrypoint": "0x00107730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FILE": "file",
                "FUN_00107730": "cleanup_function_00107730",
                "bfd_cache_close": "close_cache",
                "fclose": "close_file",
                "unlink_if_ordinary": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107740": {
            "additional_data": {
                "DAT_0010d5d8": {
                    "archive_file": 2,
                    "file_handle": 1,
                    "file_pointer": 2,
                    "file_ptr": 1,
                    "output_file": 1
                },
                "DAT_0010d600": {
                    "check_flag": 1,
                    "flag": 2,
                    "has_modification_time": 1,
                    "is_debug_mode": 1
                },
                "DAT_0010d618": {
                    "extracted_file_path": 1,
                    "file_name": 2,
                    "file_path": 1,
                    "filename": 1,
                    "input_file": 1,
                    "output_filename": 1
                },
                "DAT_0010d638": {
                    "default_message": 1,
                    "filename": 1,
                    "search_string": 1,
                    "target_filename": 1
                },
                "FUN_00107740": {
                    "extract_and_check_archive": 1,
                    "extract_and_modify": 3,
                    "extract_and_modify_archive": 2,
                    "extract_and_modify_archive_member": 1,
                    "extract_and_modify_file": 2,
                    "extract_and_print_archive_member": 2,
                    "extract_and_print_file_from_archive": 1,
                    "extract_and_process_archive": 1,
                    "extract_and_update_archive": 1,
                    "extract_and_validate_archive_member": 1,
                    "extract_archive": 2,
                    "extract_archive_member": 11,
                    "extract_archives": 1,
                    "extract_file_from_archive": 2
                },
                "Stack_b0": {
                    "file_permissions": 1
                },
                "_DAT_0010d600": {
                    "flag": 2
                },
                "_DAT_0010d638": {
                    "default_error_message": 1,
                    "default_message": 1,
                    "flag_result": 1
                },
                "_Stack_b0": {
                    "file_mode": 8,
                    "file_permission": 2,
                    "file_permissions": 15,
                    "mode": 1,
                    "new_file_permissions": 1,
                    "permissions": 3
                },
                "__n": {
                    "buffer_size": 2,
                    "bytes_read": 27,
                    "read_bytes": 1,
                    "read_size": 1
                },
                "__ptr": {
                    "buffer": 20,
                    "buffer_pointer": 4,
                    "buffer_ptr": 7
                },
                "iVar1": {
                    "cmp_result": 4,
                    "compare_result": 1,
                    "comparison_result": 16,
                    "filename_cmp_result": 1,
                    "filename_comparison": 1,
                    "filename_comparison_result": 7,
                    "name_comparison_result": 1
                },
                "iVar2": {
                    "err_code": 1,
                    "error_check": 1,
                    "error_code": 11,
                    "execution_result": 2,
                    "exit_code": 1,
                    "file_status": 1,
                    "internal_stat_error": 2,
                    "return_value": 2,
                    "stat_error": 5,
                    "stat_result": 1,
                    "status": 4
                },
                "lVar7": {
                    "counter": 1,
                    "current_offset": 1,
                    "file_offset": 3,
                    "iterator": 1,
                    "loop_counter": 5,
                    "offset": 20
                },
                "local_c8": {
                    "error_array": 1,
                    "error_code_array": 2,
                    "error_message_details": 1,
                    "local_array": 12,
                    "local_values_array": 1,
                    "local_variables": 5,
                    "local_variables_array": 1,
                    "local_variables_array2": 1,
                    "local_vars_array": 2,
                    "zeroed_array": 1,
                    "zeros": 1
                },
                "param_1": {
                    "archive": 10,
                    "archive_member": 4,
                    "archive_ptr": 2,
                    "file": 1,
                    "file_array": 1,
                    "file_list": 1,
                    "file_pointers": 1,
                    "input": 1,
                    "input_array": 1,
                    "input_files": 3,
                    "input_param": 1,
                    "input_parameters": 1,
                    "input_params": 3,
                    "param": 1
                },
                "pcVar4": {
                    "errno_string": 1,
                    "error_message": 13,
                    "error_msg": 1,
                    "error_str": 1,
                    "error_string": 15
                },
                "piVar3": {
                    "errno_loc": 2,
                    "errno_location": 15,
                    "errno_location_ptr": 1,
                    "errno_pointer": 1,
                    "errno_ptr": 1,
                    "error_code": 2,
                    "error_code_ptr": 1,
                    "error_location": 1,
                    "error_number": 4,
                    "error_pointer": 2,
                    "error_status": 1
                },
                "plVar8": {
                    "current_entry": 1,
                    "current_file": 7,
                    "current_member": 2,
                    "current_pointer": 7,
                    "current_position": 1,
                    "current_ptr": 3,
                    "entry_pointer": 1,
                    "file_pointer": 5,
                    "file_ptr": 4
                },
                "pplVar6": {
                    "archive": 1,
                    "archive_list": 1,
                    "archive_member": 1,
                    "archive_member_pointer": 4,
                    "archive_member_ptr": 1,
                    "archive_pointer": 1,
                    "archive_ptr": 4,
                    "archived_files": 1,
                    "extracted_archive_member": 1,
                    "extracted_file": 1,
                    "extracted_param": 1,
                    "file_pointer": 1,
                    "file_pointer_array": 1,
                    "file_ptr": 2,
                    "files_array": 1,
                    "first_ptr": 1,
                    "input_file_pointer": 1,
                    "member_location": 1,
                    "optional_params": 1,
                    "pointer_array": 1,
                    "pointer_to_pointer": 2,
                    "ppl_var": 1,
                    "ptr_array": 1
                },
                "puVar9": {
                    "local_array": 13,
                    "local_array_copy": 1,
                    "local_array_pointer": 4,
                    "local_array_ptr": 2,
                    "local_values": 1,
                    "local_variable": 2,
                    "local_variables": 3,
                    "local_variables_array": 1,
                    "local_variables_pointer": 1,
                    "local_vars": 2,
                    "local_vars_ptr": 1
                },
                "sVar11": {
                    "buffer_size": 2,
                    "bytes_remaining": 1,
                    "bytes_to_copy": 1,
                    "bytes_to_read": 12,
                    "bytes_to_write": 4,
                    "chunk_size": 3,
                    "copy_size": 1,
                    "data_size": 1,
                    "num_bytes_to_read": 1,
                    "read_size": 2,
                    "write_size": 2
                },
                "uStack_70": {
                    "access_time": 3,
                    "creation_time": 6,
                    "current_modification_time": 1,
                    "current_time": 1,
                    "file_modification_time": 2,
                    "file_modification_time2": 3,
                    "file_time_temp": 1,
                    "last_access_time": 1,
                    "mod_time": 1,
                    "mod_time_to_set": 1,
                    "modification_time": 3,
                    "modification_time2": 2,
                    "modification_time_2": 1,
                    "new_modification_time": 1,
                    "previous_modification_time": 1,
                    "time2": 1,
                    "time_value2": 1,
                    "timestamp": 1
                },
                "uStack_80": {
                    "file_modification_time": 1,
                    "file_modification_time1": 3,
                    "file_time": 1,
                    "last_modification_time": 1,
                    "mod_time": 1,
                    "mod_time_to_set": 1,
                    "modification_time": 17,
                    "modification_time1": 1,
                    "modification_time_1": 1,
                    "modified_time": 1,
                    "previous_modification_time": 1,
                    "time1": 1,
                    "time_value1": 1
                },
                "uStack_98": {
                    "archive_file_size": 1,
                    "archive_member_size": 3,
                    "archive_size": 10,
                    "file_size": 12,
                    "total_bytes": 1,
                    "total_bytes_to_read": 2,
                    "total_file_size": 1,
                    "total_size": 1
                },
                "uVar10": {
                    "byte_counter": 1,
                    "bytes_copied": 1,
                    "bytes_processed": 7,
                    "bytes_read": 2,
                    "bytes_written": 5,
                    "total_bytes": 1,
                    "total_bytes_read": 8,
                    "total_bytes_written": 1,
                    "total_read": 3,
                    "total_read_bytes": 1
                },
                "uVar5": {
                    "err_msg": 1,
                    "error_message": 7,
                    "error_msg_format": 1,
                    "error_string": 3,
                    "gettext_message": 2,
                    "gettext_result": 3,
                    "localized_error_message": 1,
                    "message": 3,
                    "translated_error": 2,
                    "translated_error_message": 3,
                    "translated_string": 2,
                    "translation": 1,
                    "translation_key": 1,
                    "translation_string": 1
                }
            },
            "called": [
                "FUN_00102c25"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nlong * extract_and_print_archive_member_00107740(long **archive)\n\n{\n  int comparison_result;\n  int error_code;\n  int *errno_location;\n  char *error_string;\n  undefined8 error_message;\n  long **archive_member_pointer;\n  void *buffer;\n  size_t bytes_read;\n  long offset;\n  long *current_file;\n  undefined4 *local_array;\n  ulong total_bytes_read;\n  size_t bytes_to_read;\n  undefined4 local_array [6];\n  __mode_t file_permissions;\n  ulong file_size;\n  undefined8 modification_time;\n  undefined8 creation_time;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array = local_array;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *local_array = 0;\n      local_array = local_array + 1;\n    }\n  }\n  archive_member_pointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archive_member_pointer = archive;\n  }\n  error_code = (*(code *)archive_member_pointer[1][0x3d])(archive,local_array);\n  if (error_code != 0) {\n    current_file = *archive;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_formatted_error_message_and_exit_00107690(error_message,current_file);\n    error_message = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_file != 0; current_file = (long *)(*current_file + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file != (undefined8 *)0x0; current_file = (long *)(*current_file + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file,error_message);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return current_file;\n          }\n          return (long *)(*current_file + 0xf0);\n        }\n      }\n    }\n    return current_file;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_to_file_00105a20(*archive);\n  }\n  else {\n    total_bytes_read = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = file_size - total_bytes_read;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_read,archive);\n      if (bytes_to_read != bytes_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        print_formatted_error_message_and_exit_00107690(error_message,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_to_file_00105a20(*archive);\n      }\n      bytes_to_read = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_read != bytes_read) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        print_formatted_error_message_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_string);\n        goto LAB_00102c78;\n      }\n      total_bytes_read = total_bytes_read + bytes_read;\n    } while (total_bytes_read < file_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_string = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    modification_time = creation_time;\n    set_file_modification_time_00107c80(error_string,local_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "current_name": "extract_and_print_archive_member_00107740",
            "entrypoint": "0x00107740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107740": "extract_and_print_archive_member_00107740",
                "Stack_b0": "file_permissions",
                "_Stack_b0": "file_permissions",
                "__n": "bytes_read",
                "__ptr": "buffer",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "lVar7": "offset",
                "local_c8": "local_array",
                "param_1": "archive",
                "pcVar4": "error_string",
                "piVar3": "errno_location",
                "plVar8": "current_file",
                "pplVar6": "archive_member_pointer",
                "puVar9": "local_array",
                "sVar11": "bytes_to_read",
                "uStack_70": "creation_time",
                "uStack_80": "modification_time",
                "uStack_98": "file_size",
                "uVar10": "total_bytes_read",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107890": {
            "additional_data": {
                "DAT_0010d60c": {
                    "flag1": 2
                },
                "FUN_00107890": {
                    "print_file_info": 29,
                    "print_file_information": 2
                },
                "_DAT_0010d5fc": {
                    "condition2": 1,
                    "flag2": 3,
                    "is_data_available": 1
                },
                "_DAT_0010d60c": {
                    "condition1": 1,
                    "flag1": 1,
                    "is_flag_set": 1
                },
                "_stdout": {
                    "output": 1,
                    "output_file": 1,
                    "output_stream": 25,
                    "standard_output": 1,
                    "stdout": 1
                },
                "format_and_print_file_info_001079c0": {
                    "format_and_print_file_info": 4
                },
                "param_1": {
                    "file": 4,
                    "file_handle": 1,
                    "file_info": 26
                }
            },
            "called": [
                "FUN_001079c0"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid print_file_info_00107890(undefined8 file_info)\n\n{\n  format_and_print_file_info_00107890(output_stream,file_info,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "current_name": "print_file_info_00107890",
            "entrypoint": "0x00107890",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107890": "print_file_info_00107890",
                "_stdout": "output_stream",
                "format_and_print_file_info_001079c0": "format_and_print_file_info",
                "param_1": "file_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001078c0": {
            "additional_data": {
                "FUN_001078c0": {
                    "print_error": 2,
                    "print_error_message": 26,
                    "print_formatted_error_message": 1,
                    "print_formatted_message": 1,
                    "print_to_stderr": 1
                },
                "__gnuc_va_list": {
                    "args": 2,
                    "arguments": 1,
                    "varargs": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "standard_error": 14,
                    "stderr": 1,
                    "stderr_buffer": 2,
                    "stderr_stream": 1
                },
                "_stdout": {
                    "standard_output": 15,
                    "stdout": 1,
                    "stdout_buffer": 2,
                    "stdout_stream": 1
                },
                "fflush": {
                    "flush_output": 1
                },
                "fprintf": {
                    "format_error_message": 1,
                    "fprintf": 1,
                    "print_formatted": 1,
                    "print_formatted_error": 1,
                    "print_to_stderr": 1
                },
                "param_1": {
                    "error_message": 16,
                    "format": 1,
                    "format_string": 5,
                    "message": 8,
                    "message_format": 1
                },
                "param_2": {
                    "arg_list": 1,
                    "args": 7,
                    "args_list": 1,
                    "arguments": 11,
                    "format_args": 3,
                    "format_arguments": 2,
                    "message_arguments": 1,
                    "varargs": 2,
                    "variable_arguments": 1,
                    "variadic_args": 1
                },
                "put": {
                    "put_character": 1
                },
                "putc": {
                    "new_line_to_stderr": 1,
                    "put_character": 1,
                    "putc": 1,
                    "write_character": 1,
                    "write_newline": 1
                }
            },
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "code": "\n\n\nvoid print_formatted_error_message_001078c0(char *error_message,args arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010d660);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_formatted_error_message_001078c0",
            "entrypoint": "0x001078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001078c0": "print_formatted_error_message_001078c0",
                "__gnuc_va_list": "args",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_output",
                "param_1": "error_message",
                "param_2": "arguments",
                "put": "put_character",
                "putc": "write_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107920": {
            "additional_data": {
                "FUN_00107920": {
                    "format_and_print_error_message": 1,
                    "print_error": 2,
                    "print_error_message": 12,
                    "print_error_with_formatted_message": 2,
                    "print_error_with_parameters": 1,
                    "print_error_with_params": 1,
                    "print_formatted_error_message": 11,
                    "print_formatted_message": 1
                },
                "in_AL": {
                    "condition": 8,
                    "condition_flag": 1,
                    "conditional_flag": 1,
                    "flag": 11,
                    "input_flag": 3,
                    "is_enabled": 1,
                    "is_error": 4
                },
                "local_18": {
                    "buffer13": 1,
                    "error8": 1,
                    "error_param6_copy": 1,
                    "local_param8": 2,
                    "local_parameter2": 1,
                    "new_param8": 1,
                    "param7_copy": 1,
                    "param7_new": 1,
                    "param8": 3,
                    "param8_copy": 14,
                    "param8_updated": 1
                },
                "local_28": {
                    "buffer12": 1,
                    "error7": 1,
                    "error_param5_copy": 1,
                    "local_param7": 2,
                    "local_parameter1": 1,
                    "new_param7": 1,
                    "param6_copy": 1,
                    "param6_new": 1,
                    "param7": 3,
                    "param7_copy": 14,
                    "param7_updated": 1
                },
                "local_38": {
                    "buffer11": 1,
                    "error6": 1,
                    "error_param4_copy": 1,
                    "local_character_offset": 1,
                    "local_param6": 2,
                    "new_param6": 1,
                    "param5_copy": 1,
                    "param5_new": 1,
                    "param6": 3,
                    "param6_copy": 14,
                    "param6_updated": 1
                },
                "local_48": {
                    "buffer10": 1,
                    "error5": 1,
                    "error_param3_copy": 1,
                    "local_column_number": 1,
                    "local_param5": 2,
                    "new_param5": 1,
                    "param4_copy": 1,
                    "param4_new": 1,
                    "param5": 3,
                    "param5_copy": 14,
                    "param5_updated": 1
                },
                "local_58": {
                    "buffer9": 1,
                    "error4": 1,
                    "error_param2_copy": 1,
                    "local_line_number": 1,
                    "local_param4": 2,
                    "new_param4": 1,
                    "param3_copy": 1,
                    "param3_new": 1,
                    "param4": 3,
                    "param4_copy": 14,
                    "param4_updated": 1
                },
                "local_68": {
                    "buffer8": 1,
                    "error3": 1,
                    "error_message_copy": 1,
                    "error_param1_copy": 1,
                    "local_param3": 2,
                    "local_source_id": 1,
                    "new_param3": 1,
                    "param2_copy": 1,
                    "param2_new": 1,
                    "param3": 3,
                    "param3_copy": 13,
                    "param3_updated": 1
                },
                "local_78": {
                    "buffer7": 1,
                    "error2": 1,
                    "error_code_copy": 1,
                    "error_type_copy": 1,
                    "local_param2": 2,
                    "local_severity": 1,
                    "message_copy": 1,
                    "new_param2": 1,
                    "param1_copy": 1,
                    "param1_new": 1,
                    "param2": 3,
                    "param2_copy": 12,
                    "param2_updated": 1
                },
                "local_88": {
                    "buffer6": 1,
                    "error1": 1,
                    "error_code": 3,
                    "error_code_copy": 14,
                    "error_code_new": 1,
                    "error_code_updated": 1,
                    "error_type_copy": 1,
                    "local_error_code": 1,
                    "local_param1": 2,
                    "new_param1": 1,
                    "param1_copy": 1
                },
                "local_90": {
                    "buffer5": 1,
                    "local_param14": 3,
                    "param13_copy": 1,
                    "param14": 5,
                    "param14_copy": 15,
                    "param14_new": 1,
                    "param14_updated": 1,
                    "param15_copy": 1,
                    "value10": 1
                },
                "local_98": {
                    "buffer4": 1,
                    "local_param13": 3,
                    "param12_copy": 1,
                    "param13": 5,
                    "param13_copy": 15,
                    "param13_new": 1,
                    "param13_updated": 1,
                    "param14_copy": 1,
                    "value9": 1
                },
                "local_a0": {
                    "buffer3": 1,
                    "local_param12": 3,
                    "param11_copy": 1,
                    "param12": 5,
                    "param12_copy": 15,
                    "param12_new": 1,
                    "param12_updated": 1,
                    "param13_copy": 1,
                    "value8": 1
                },
                "local_a8": {
                    "buffer2": 1,
                    "local_param11": 3,
                    "param10_copy": 1,
                    "param11": 5,
                    "param11_copy": 15,
                    "param11_new": 1,
                    "param11_updated": 1,
                    "param12_copy": 1,
                    "value7": 1
                },
                "local_b0": {
                    "buffer1": 1,
                    "local_param10": 3,
                    "param10": 5,
                    "param10_copy": 15,
                    "param10_new": 1,
                    "param10_updated": 1,
                    "param11_copy": 1,
                    "param9_copy": 1,
                    "value6": 1
                },
                "local_b8": {
                    "dynamic_buffer": 1,
                    "error_buffer": 2,
                    "error_message": 1,
                    "error_message_buffer": 1,
                    "formatted_message": 3,
                    "local_array": 3,
                    "local_buffer": 5,
                    "result": 1,
                    "stack_buffer": 1,
                    "temp_buffer": 6,
                    "temporary_array": 1,
                    "temporary_buffer": 3
                },
                "local_c8": {
                    "buffer": 5,
                    "error_message": 1,
                    "local_array": 2,
                    "local_buffer": 19,
                    "local_bytes": 1,
                    "local_var_c8": 1,
                    "message_ptr": 1
                },
                "local_d0": {
                    "buffer": 15,
                    "buffer_pointer": 3,
                    "buffer_ptr": 6,
                    "local_array_ptr": 1,
                    "local_ptr": 1,
                    "stack": 1,
                    "stack_pointer": 1
                },
                "local_d4": {
                    "array_size": 1,
                    "buffer_size": 1,
                    "chunk_size": 1,
                    "constant": 3,
                    "copy_size": 1,
                    "count": 1,
                    "length": 3,
                    "local_var": 3,
                    "local_var1": 1,
                    "local_var4": 1,
                    "max_length": 1,
                    "message_length": 1,
                    "message_size": 2,
                    "offset": 4
                },
                "local_d8": {
                    "buffer_length": 1,
                    "buffer_size": 15,
                    "length": 5,
                    "local_size": 1,
                    "message_size": 1,
                    "size": 6,
                    "string_length": 1
                },
                "param_1": {
                    "error1": 1,
                    "error_code": 27,
                    "error_type": 3
                },
                "param_10": {
                    "param10": 26,
                    "param8": 1,
                    "param9": 1,
                    "value1": 2
                },
                "param_11": {
                    "param10": 1,
                    "param11": 26,
                    "param9": 1,
                    "value2": 2
                },
                "param_12": {
                    "param10": 1,
                    "param11": 1,
                    "param12": 26,
                    "value3": 2
                },
                "param_13": {
                    "param11": 1,
                    "param12": 1,
                    "param13": 26,
                    "value4": 2
                },
                "param_14": {
                    "param12": 1,
                    "param13": 1,
                    "param14": 26,
                    "value5": 2
                },
                "param_2": {
                    "arg2": 1,
                    "error2": 1,
                    "error_code": 3,
                    "error_type": 1,
                    "line_number": 1,
                    "message": 1,
                    "param1": 3,
                    "param2": 19,
                    "severity": 1
                },
                "param_3": {
                    "arg3": 1,
                    "error3": 1,
                    "error_flag": 1,
                    "error_message": 1,
                    "error_param1": 1,
                    "file_name": 1,
                    "param2": 3,
                    "param3": 21,
                    "source_id": 1
                },
                "param_4": {
                    "arg4": 1,
                    "error4": 1,
                    "error_param2": 1,
                    "line_number": 1,
                    "message_type": 1,
                    "param3": 3,
                    "param4": 23
                },
                "param_5": {
                    "arg5": 1,
                    "column_number": 1,
                    "error5": 1,
                    "error_param3": 1,
                    "param4": 3,
                    "param5": 22,
                    "param_5": 1
                },
                "param_6": {
                    "arg6": 1,
                    "character_offset": 1,
                    "error6": 1,
                    "error_param4": 1,
                    "param5": 3,
                    "param6": 21,
                    "param_6": 1
                },
                "param_7": {
                    "arg7": 1,
                    "error7": 1,
                    "error_param5": 1,
                    "param6": 3,
                    "param7": 21,
                    "param_7": 1,
                    "parameter1": 1
                },
                "param_8": {
                    "arg8": 1,
                    "error8": 1,
                    "error_param6": 1,
                    "param7": 3,
                    "param8": 21,
                    "param_8": 1,
                    "parameter2": 1
                },
                "param_9": {
                    "error_message": 24,
                    "error_string": 1,
                    "format_string": 2,
                    "param8": 1
                }
            },
            "called": [
                "FUN_001078c0"
            ],
            "calling": [
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001025a0",
                "FUN_00102f1e",
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_00102fd7"
            ],
            "code": "\nvoid print_error_with_formatted_message_00107920(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined temp_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = temp_buffer;\n  offset = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_formatted_error_message_001078c0(error_message,&buffer_size);\n  return;\n}\n\n",
            "current_name": "print_error_with_formatted_message_00107920",
            "entrypoint": "0x00107920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107920": "print_error_with_formatted_message_00107920",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "temp_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "offset",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001079c0": {
            "additional_data": {
                "FUN_001079c0": {
                    "format_and_print_file_info": 1,
                    "format_file_info": 1,
                    "print_file_details": 7,
                    "print_file_info": 20,
                    "print_file_stats": 1
                },
                "cStack_ea": {
                    "executable": 1,
                    "executable_others": 1,
                    "execute_permission": 3,
                    "execute_permission_other": 1,
                    "file_perm_other_special2": 1,
                    "file_permission9": 1,
                    "group_execute": 1,
                    "group_execute_permission_char": 1,
                    "is_other_executable": 1,
                    "is_others_executable": 2,
                    "is_setuid": 1,
                    "is_symbolic_link": 1,
                    "oth_execute": 1,
                    "other_execute": 5,
                    "other_execute_permission": 1,
                    "other_permissions_execute": 1,
                    "permission_char9": 1,
                    "user_execute": 1
                },
                "cStack_eb": {
                    "file_perm_group_special2": 1,
                    "file_permission8": 1,
                    "group_write": 1,
                    "group_write_permission_char": 1,
                    "is_other_writable": 1,
                    "is_others_writable": 2,
                    "is_regular_file": 1,
                    "is_sticky": 1,
                    "oth_write": 1,
                    "other_permissions_write": 1,
                    "other_write": 5,
                    "other_write_permission": 1,
                    "permission_char8": 1,
                    "user_write": 1,
                    "writable": 1,
                    "writable_others": 1,
                    "write_permission": 3,
                    "write_permission_other": 1
                },
                "cStack_ec": {
                    "executable": 1,
                    "file_perm_user_special2": 1,
                    "file_permission7": 1,
                    "group_read": 1,
                    "group_read_permission_char": 1,
                    "is_directory": 1,
                    "is_other_readable": 1,
                    "is_other_write": 1,
                    "is_others_readable": 2,
                    "oth_read": 1,
                    "other_permissions_read": 1,
                    "other_read": 5,
                    "other_read_permission": 1,
                    "permission_char7": 1,
                    "read_permission": 3,
                    "read_permission_other": 1,
                    "readable_others": 1,
                    "user_read": 1
                },
                "cStack_ed": {
                    "executable": 1,
                    "executable_group": 1,
                    "execute_permission": 2,
                    "execute_permission_group": 1,
                    "file_perm_other_special": 1,
                    "file_permission6": 1,
                    "group_execute": 5,
                    "group_execute_permission": 1,
                    "group_permissions_execute": 1,
                    "grp_execute": 1,
                    "is_group_executable": 3,
                    "is_other_read": 1,
                    "is_sticky": 2,
                    "permission_char6": 1,
                    "sticky": 1,
                    "user_execute": 1,
                    "user_execute_permission_char": 1
                },
                "cStack_ee": {
                    "file_perm_group_special": 1,
                    "file_permission5": 1,
                    "group_permissions_write": 1,
                    "group_write": 5,
                    "group_write_permission": 1,
                    "grp_write": 1,
                    "is_group_writable": 3,
                    "is_group_write": 1,
                    "is_setgid": 2,
                    "permission_char5": 1,
                    "setgid": 1,
                    "user_write": 1,
                    "user_write_permission_char": 1,
                    "writable": 1,
                    "writable_group": 1,
                    "write_permission": 2,
                    "write_permission_group": 1
                },
                "cStack_ef": {
                    "executable": 1,
                    "file_perm_user_special": 1,
                    "file_permission4": 1,
                    "group_permissions_read": 1,
                    "group_read": 5,
                    "group_read_permission": 1,
                    "grp_read": 1,
                    "is_group_read": 1,
                    "is_group_readable": 3,
                    "is_setuid": 2,
                    "permission_char4": 1,
                    "read_permission": 2,
                    "read_permission_group": 1,
                    "readable_group": 1,
                    "setuid": 1,
                    "user_read": 1,
                    "user_read_permission_char": 1
                },
                "cStack_f0": {
                    "executable": 2,
                    "execute_permission": 4,
                    "file_perm_other": 1,
                    "file_permission3": 1,
                    "is_executable": 2,
                    "is_owner_executable": 1,
                    "is_owner_write": 1,
                    "is_user_executable": 2,
                    "owner_execute": 1,
                    "permission_char3": 1,
                    "sticky": 1,
                    "sticky_bit_char": 1,
                    "user_execute": 4,
                    "user_execute_permission": 1,
                    "user_permissions_execute": 1,
                    "usr_execute": 1
                },
                "cStack_f1": {
                    "file_perm_group": 1,
                    "file_permission2": 1,
                    "is_owner_read": 1,
                    "is_owner_writable": 1,
                    "is_user_writable": 2,
                    "is_writable": 2,
                    "owner_write": 1,
                    "permission_char2": 1,
                    "setgid": 1,
                    "setgid_bit_char": 1,
                    "user_permissions_write": 1,
                    "user_write": 4,
                    "user_write_permission": 1,
                    "usr_write": 1,
                    "writable": 2,
                    "write_permission": 4
                },
                "cStack_f2": {
                    "executable": 1,
                    "file_perm_user": 1,
                    "file_permission1": 1,
                    "is_owner_readable": 1,
                    "is_readable": 2,
                    "is_special": 1,
                    "is_user_readable": 2,
                    "owner_read": 1,
                    "permission_char1": 1,
                    "read_permission": 4,
                    "readable": 1,
                    "setuid": 1,
                    "setuid_bit_char": 1,
                    "user_permissions_read": 1,
                    "user_read": 4,
                    "user_read_permission": 1,
                    "usr_read": 1
                },
                "cStack_f3": {
                    "file_mode": 1,
                    "file_type": 1
                },
                "currentTimestamp": {
                    "local_100": 1
                },
                "fileDetails": {
                    "param_2": 1
                },
                "fileMode": {
                    "u_stack_a0": 1
                },
                "filePermissions": {
                    "u_var4": 1
                },
                "filePtr": {
                    "ppc_var2": 1
                },
                "fileSize": {
                    "u_stack_88": 1
                },
                "fileTypeChar": {
                    "u_stack_f3": 1
                },
                "formattedTime": {
                    "local_e8": 1
                },
                "groupExecutePermissionChar": {
                    "c_stack_ea": 1
                },
                "groupReadPermissionChar": {
                    "c_stack_ec": 1
                },
                "groupWritePermissionChar": {
                    "c_stack_eb": 1
                },
                "iVar1": {
                    "metadata_result": 1,
                    "result": 20,
                    "result_code": 1,
                    "return_value": 2,
                    "status": 1
                },
                "includeHexOffset": {
                    "param_4": 1
                },
                "includeTimestamp": {
                    "param_3": 1
                },
                "local_100": {
                    "current_date_time": 1,
                    "current_time": 23,
                    "current_time_copy": 1,
                    "current_timestamp": 3,
                    "file_time": 1
                },
                "local_60": {
                    "current_file_time": 1,
                    "current_system_time": 1,
                    "current_time": 1,
                    "current_time2": 1,
                    "current_timestamp": 1,
                    "file_creation_time": 2,
                    "file_mod_time": 1,
                    "file_mod_time_backup": 1,
                    "file_modification_time": 2,
                    "file_modified": 1,
                    "file_modified_time": 2,
                    "file_time": 2,
                    "file_timestamp": 2,
                    "modification_time": 4,
                    "modified_time": 2,
                    "modified_timestamp": 1,
                    "raw_time": 1,
                    "st_ctime": 1,
                    "timestamp": 1
                },
                "local_b8": {
                    "auxiliary_buffer": 1,
                    "buffer": 2,
                    "local_buffer": 2,
                    "placeholder": 1,
                    "unneeded_buffer": 1
                },
                "local_e8": {
                    "date_time_string": 1,
                    "file_time": 1,
                    "formatted_date_time": 1,
                    "formatted_time": 16,
                    "time_and_file_type_string": 1,
                    "time_buffer": 2,
                    "time_format": 1,
                    "time_format_string": 1,
                    "time_formatted": 1,
                    "time_stamp": 1,
                    "time_string": 2,
                    "time_to_print": 1
                },
                "majorDevice": {
                    "u_stack_9c": 1
                },
                "minorDevice": {
                    "u_stack_98": 1
                },
                "outputFile": {
                    "param_1": 1
                },
                "param_1": {
                    "file": 16,
                    "file_pointer": 2,
                    "file_stream": 1,
                    "output_file": 11
                },
                "param_2": {
                    "args": 1,
                    "file_data": 2,
                    "file_details": 2,
                    "file_info": 22,
                    "metadata": 2,
                    "strings": 1
                },
                "param_3": {
                    "flag": 1,
                    "flag1": 1,
                    "has_permission": 1,
                    "include_file_info": 1,
                    "include_time": 1,
                    "include_timestamp": 2,
                    "is_header_available": 1,
                    "is_readable": 1,
                    "is_verbose": 6,
                    "print_file_info": 1,
                    "print_header": 3,
                    "print_info": 1,
                    "print_time": 7,
                    "show_date_time": 1,
                    "show_file_info": 1,
                    "time_flag": 1
                },
                "param_4": {
                    "flag2": 1,
                    "hex_flag": 1,
                    "include_address": 4,
                    "include_hex_offset": 1,
                    "is_hex_dump": 1,
                    "is_hexadecimal": 1,
                    "print_address": 13,
                    "print_hex": 4,
                    "print_size": 1,
                    "show_address": 2,
                    "show_file_address": 1
                },
                "pcVar3": {
                    "current_time": 1,
                    "date_time_string": 1,
                    "time_data": 5,
                    "time_str": 5,
                    "time_string": 12,
                    "time_string_value": 1,
                    "timestamp": 1
                },
                "ppcVar2": {
                    "alternate_metadata": 1,
                    "arg_ptr": 1,
                    "file_data_ptr": 1,
                    "file_info_ptr": 9,
                    "file_pointer": 2,
                    "file_ptr": 8,
                    "file_ptr_ptr": 1,
                    "function_ptr": 1,
                    "ptr_to_file_info": 1,
                    "ptr_to_func": 1
                },
                "setgidBitChar": {
                    "c_stack_f1": 1
                },
                "setuidBitChar": {
                    "c_stack_f2": 1
                },
                "stickyBitChar": {
                    "c_stack_f0": 1
                },
                "timeString": {
                    "pc_var3": 1
                },
                "uStack_88": {
                    "device_id": 1,
                    "field3": 1,
                    "file_inode": 1,
                    "file_mod_time": 1,
                    "file_size": 15,
                    "inode": 4,
                    "inode_number": 4,
                    "st_nlink": 1,
                    "timestamp": 1
                },
                "uStack_98": {
                    "day": 1,
                    "device_number": 1,
                    "field2": 1,
                    "file_gid": 1,
                    "file_group": 1,
                    "file_group_id": 3,
                    "file_size": 1,
                    "file_size_lower": 1,
                    "gid": 1,
                    "group_id": 5,
                    "inode_number": 1,
                    "minor_device": 3,
                    "minor_device_num": 2,
                    "minor_device_number": 4,
                    "num_blocks": 1,
                    "st_ino": 1,
                    "unused": 1
                },
                "uStack_9c": {
                    "field1": 1,
                    "file_owner": 1,
                    "file_owner_id": 2,
                    "file_size_upper": 1,
                    "file_uid": 1,
                    "file_user_id": 1,
                    "inode_number": 1,
                    "major_device": 3,
                    "major_device_num": 2,
                    "major_device_number": 4,
                    "month": 1,
                    "num_hard_links": 1,
                    "num_links": 1,
                    "number_links": 1,
                    "owner_id": 1,
                    "st_dev": 1,
                    "uid": 1,
                    "unused": 1,
                    "user_id": 4
                },
                "uStack_a0": {
                    "file_mode": 6,
                    "file_perm": 1,
                    "file_permission": 1,
                    "file_permissions": 8,
                    "file_perms": 1,
                    "file_size": 10,
                    "file_type": 1,
                    "permissions": 1
                },
                "uStack_e9": {
                    "dummy_value": 1,
                    "null_byte": 1
                },
                "uStack_f3": {
                    "char_value": 1,
                    "file_permission": 1,
                    "file_permission_char": 1,
                    "file_permissions_flag": 1,
                    "file_perms": 1,
                    "file_type": 11,
                    "file_type_char": 5,
                    "permissions": 1,
                    "type_char": 1
                },
                "uVar4": {
                    "file_mode": 5,
                    "file_permission": 1,
                    "file_permissions": 6,
                    "file_perms": 1,
                    "file_type": 12,
                    "file_type_flags": 1
                },
                "userExecutePermissionChar": {
                    "c_stack_ed": 1
                },
                "userReadPermissionChar": {
                    "c_stack_ef": 1
                },
                "userWritePermissionChar": {
                    "c_stack_ee": 1
                }
            },
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "code": "\nvoid format_and_print_file_info_001079c0(FILE *file,char **file_info,char print_time,char print_address)\n\n{\n  int result;\n  char **file_info_ptr;\n  char *time_string;\n  uint file_type;\n  time_t current_time;\n  undefined file_type;\n  char user_read;\n  char user_write;\n  char execute_permission;\n  char group_read;\n  char group_write;\n  char group_execute;\n  char other_read;\n  char other_write;\n  char other_execute;\n  undefined null_byte;\n  char formatted_time [48];\n  undefined buffer [24];\n  uint file_size;\n  uint user_id;\n  uint group_id;\n  undefined8 file_size;\n  time_t modification_time;\n  \n  if (print_time != '\\0') {\n    file_info_ptr = (char **)file_info[0x1d];\n    if ((char **)file_info[0x1d] == (char **)0x0) {\n      file_info_ptr = file_info;\n    }\n    result = (**(code **)(file_info_ptr[1] + 0x1e8))(file_info,buffer);\n    if (result == 0) {\n      current_time = modification_time;\n      time_string = ctime(&current_time);\n      if (time_string == (char *)0x0) {\n        time_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formatted_time,time_string);\n      }\n      else {\n        sprintf(formatted_time,\"%.12s %.4s\",time_string + 4);\n      }\n      file_type = file_size & 0xf000;\n      if (file_type == 0x4000) {\n        file_type = 100;\n      }\n      else if (file_type == 0xa000) {\n        file_type = 0x6c;\n      }\n      else if (file_type == 0x6000) {\n        file_type = 0x62;\n      }\n      else if (file_type == 0x2000) {\n        file_type = 99;\n      }\n      else if (file_type == 0xc000) {\n        file_type = 0x73;\n      }\n      else {\n        file_type = 0x70;\n        if (file_type != 0x1000) {\n          file_type = 0x2d;\n        }\n      }\n      user_read = (-((file_size & 0x100) == 0) & 0xbbU) + 0x72;\n      user_write = (-((file_size & 0x80) == 0) & 0xb6U) + 0x77;\n      execute_permission = (-((file_size & 0x40) == 0) & 0xb5U) + 0x78;\n      group_read = (-((file_size & 0x20) == 0) & 0xbbU) + 0x72;\n      group_write = (-((file_size & 0x10) == 0) & 0xb6U) + 0x77;\n      group_execute = (-((file_size & 8) == 0) & 0xb5U) + 0x78;\n      other_read = (-((file_size & 4) == 0) & 0xbbU) + 0x72;\n      other_write = (-((file_size & 2) == 0) & 0xb6U) + 0x77;\n      other_execute = (-((file_size & 1) == 0) & 0xb5U) + 0x78;\n      if ((file_size & 0x800) != 0) {\n        if (execute_permission == 'x') {\n          execute_permission = 's';\n        }\n        else {\n          execute_permission = 'S';\n        }\n      }\n      if ((file_size & 0x400) != 0) {\n        if (group_execute == 'x') {\n          group_execute = 's';\n        }\n        else {\n          group_execute = 'S';\n        }\n      }\n      if ((file_size & 0x200) != 0) {\n        if (other_execute == 'x') {\n          other_execute = 't';\n        }\n        else {\n          other_execute = 'T';\n        }\n      }\n      null_byte = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&user_read,(ulong)user_id,(ulong)group_id,file_size,\n              formatted_time,(ulong)file_size);\n    }\n  }\n  fputs(*file_info,file);\n  if (print_address != '\\0') {\n    if ((*(byte *)((long)file_info + 0x49) & 0x10) == 0) {\n      if (file_info[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (file_info[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "current_name": "format_and_print_file_info_001079c0",
            "entrypoint": "0x001079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001079c0": "format_and_print_file_info_001079c0",
                "cStack_ea": "other_execute",
                "cStack_eb": "other_write",
                "cStack_ec": "other_read",
                "cStack_ed": "group_execute",
                "cStack_ee": "group_write",
                "cStack_ef": "group_read",
                "cStack_f0": "execute_permission",
                "cStack_f1": "user_write",
                "cStack_f2": "user_read",
                "iVar1": "result",
                "local_100": "current_time",
                "local_60": "modification_time",
                "local_b8": "buffer",
                "local_e8": "formatted_time",
                "param_1": "file",
                "param_2": "file_info",
                "param_3": "print_time",
                "param_4": "print_address",
                "pcVar3": "time_string",
                "ppcVar2": "file_info_ptr",
                "uStack_88": "file_size",
                "uStack_98": "group_id",
                "uStack_9c": "user_id",
                "uStack_a0": "file_size",
                "uStack_e9": "null_byte",
                "uStack_f3": "file_type",
                "uVar4": "file_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c10": {
            "additional_data": {
                "FUN_00107c10": {
                    "exit_with_error": 4,
                    "exit_with_error_message": 1,
                    "handle_bfd_error": 1,
                    "handle_bfd_error_and_exit": 1,
                    "handle_error_and_exit": 5,
                    "handle_fatal_error": 1,
                    "print_bfd_error_and_exit": 3,
                    "print_error_and_exit": 9,
                    "print_error_message_and_exit": 5,
                    "terminate_program": 1
                },
                "print_bfd_error_message_00107c20": {
                    "display_error_message": 1,
                    "print_bfd_error_message": 17,
                    "print_error_message": 13
                },
                "xexit": {
                    "exit": 3,
                    "exit_program": 1
                }
            },
            "called": [
                "xexit",
                "FUN_00107c20"
            ],
            "calling": [
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00105300",
                "FUN_001058b0"
            ],
            "code": "\nvoid print_error_message_and_exit_00107c10(void)\n\n{\n  print_bfd_error_message();\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_error_message_and_exit_00107c10",
            "entrypoint": "0x00107c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c10": "print_error_message_and_exit_00107c10",
                "print_bfd_error_message_00107c20": "print_bfd_error_message",
                "xexit": "exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c20": {
            "additional_data": {
                "FUN_00107c20": {
                    "print_bfd_error": 1,
                    "print_bfd_error_message": 1,
                    "print_error": 3,
                    "print_error_message": 26
                },
                "_stderr": {
                    "standard_error": 1,
                    "stderr_stream": 1
                },
                "_stdout": {
                    "standard_output": 1,
                    "stdout_stream": 1
                },
                "fflush": {
                    "flush_output": 1
                },
                "fprintf": {
                    "formatted_print": 1
                },
                "iVar1": {
                    "bfd_error": 1,
                    "bfd_error_code": 1,
                    "error": 16,
                    "error_code": 7,
                    "error_status": 5,
                    "error_type": 1
                },
                "in_R10": {
                    "additional_info": 7,
                    "extra_info": 1,
                    "reserved_register": 1,
                    "unknown": 1,
                    "unknown_cause": 1,
                    "unused_variable": 1
                },
                "param_1": {
                    "error_argument": 1,
                    "error_description": 6,
                    "error_message": 17,
                    "error_name": 1,
                    "error_string": 1,
                    "error_type": 3,
                    "file_name": 1,
                    "filename": 1
                },
                "uVar2": {
                    "error_description": 1,
                    "error_message": 13,
                    "error_message_text": 7,
                    "error_message_translation": 1,
                    "error_string": 7,
                    "error_text": 1,
                    "localized_error_message": 1
                }
            },
            "called": [
                "FUN_00102f96",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_00105300"
            ],
            "code": "\n\n\nvoid print_bfd_error_message_00107c20(long error_message)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(stdout_stream);\n  if (error_message != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_0010d660,error_message,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_0010d660,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_bfd_error_message_00107c20",
            "entrypoint": "0x00107c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c20": "print_bfd_error_message_00107c20",
                "_stderr": "standard_error",
                "_stdout": "stdout_stream",
                "fflush": "flush_output",
                "fprintf": "formatted_print",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107c80": {
            "additional_data": {
                "FUN_00107c80": {
                    "set_file_modification_time": 3,
                    "set_file_modified_time": 2,
                    "set_file_time": 21,
                    "set_file_times": 1,
                    "set_file_timestamp": 2,
                    "set_file_timestamps": 1,
                    "set_time": 1
                },
                "iVar1": {
                    "result": 30
                },
                "local_28": {
                    "buffer_1": 1,
                    "modification_time": 5,
                    "previous_atime": 1,
                    "saved_data1": 1,
                    "struct_field1": 1
                },
                "local_38": {
                    "access_time": 14,
                    "atime": 1,
                    "time_spec1": 2,
                    "time_struct1": 1,
                    "timespec1": 1,
                    "timespec_buffer": 1,
                    "timespec_time": 1,
                    "timespec_value": 1,
                    "timestamp1": 1
                },
                "local_44": {
                    "buffer_4": 1
                },
                "local_48": {
                    "buffer_3": 1
                },
                "local_4c": {
                    "buffer_2": 1
                },
                "param_1": {
                    "file_path": 27,
                    "filename": 4
                },
                "param_2": {
                    "file_data": 1,
                    "file_info": 21,
                    "file_info_ptr": 5,
                    "file_metadata": 1,
                    "file_values": 1,
                    "info_ptr": 1,
                    "param_struct": 1
                },
                "pcVar3": {
                    "err_msg": 2,
                    "err_string": 1,
                    "error_message": 14,
                    "error_msg": 3,
                    "error_str": 2,
                    "error_string": 8
                },
                "piVar2": {
                    "err_msg": 1,
                    "err_ptr": 1,
                    "errno_location": 1,
                    "errno_pointer": 1,
                    "errno_ptr": 15,
                    "error": 1,
                    "error_code": 3,
                    "error_code_ptr": 1,
                    "error_num_ptr": 2,
                    "error_number": 1,
                    "error_number_pointer": 1,
                    "error_pointer": 1,
                    "error_ptr": 1
                },
                "uStack_1c": {
                    "previous_btime": 1,
                    "struct_field4": 1
                },
                "uStack_20": {
                    "previous_ctime": 1,
                    "struct_field3": 1
                },
                "uStack_24": {
                    "previous_mtime": 1,
                    "struct_field2": 1
                },
                "uStack_2c": {
                    "backup_time": 1,
                    "birth_time": 2,
                    "btime": 1,
                    "creation_time": 4,
                    "extra_time": 2,
                    "saved_data2": 1,
                    "time_spec2": 1,
                    "time_spec4": 1,
                    "time_struct4": 1,
                    "timespec4": 1,
                    "timestamp4": 1
                },
                "uStack_30": {
                    "change_time": 9,
                    "ctime": 1,
                    "saved_data3": 1,
                    "time_spec3": 1,
                    "time_spec4": 1,
                    "time_struct3": 1,
                    "timespec3": 1,
                    "timestamp3": 1
                },
                "uStack_34": {
                    "mod_time": 3,
                    "modification_time": 6,
                    "mtime": 1,
                    "saved_data4": 1,
                    "time_spec2": 1,
                    "time_spec3": 1,
                    "time_struct2": 1,
                    "timespec2": 1,
                    "timestamp2": 1
                },
                "uVar4": {
                    "error_format": 2,
                    "error_message": 8,
                    "error_msg": 4,
                    "formatted_message": 2,
                    "localized_error_message": 4,
                    "localized_error_string": 1,
                    "message": 1,
                    "message_format": 1,
                    "translated_error_message": 5,
                    "translated_error_msg": 1,
                    "translated_message": 1
                }
            },
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\nvoid set_file_modification_time_00107c80(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 creation_time;\n  undefined4 modification_time;\n  undefined4 struct_field2;\n  undefined4 struct_field3;\n  undefined4 previous_btime;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  struct_field2 = *(undefined4 *)(file_info + 0x5c);\n  struct_field3 = *(undefined4 *)(file_info + 0x60);\n  previous_btime = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  creation_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_message = strerror(*errno_ptr);\n    error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_with_formatted_message_00107920(error_message,file_path,error_message);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_modification_time_00107c80",
            "entrypoint": "0x00107c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107c80": "set_file_modification_time_00107c80",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_message",
                "piVar2": "errno_ptr",
                "uStack_1c": "previous_btime",
                "uStack_20": "struct_field3",
                "uStack_24": "struct_field2",
                "uStack_2c": "creation_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107cc0": {
            "additional_data": {
                "FUN_00107cc0": {
                    "execute_code": 1,
                    "execute_function_chain": 5,
                    "execute_functions": 11,
                    "execute_functions_in_linked_list": 2,
                    "execute_nested_functions": 1
                },
                "LAB_00107d96": {
                    "end_of_list": 1,
                    "end_of_loop": 1
                },
                "PTR_DAT_0010d2e0": {
                    "function_data": 1
                },
                "lVar1": {
                    "counter": 1,
                    "current_function_index": 1,
                    "current_idx": 1,
                    "current_index": 6,
                    "current_iteration": 1,
                    "decremented_count_index": 1,
                    "function_index": 2,
                    "index": 14,
                    "last_index": 2,
                    "lower_index": 1,
                    "previous_index": 1
                },
                "lVar2": {
                    "current_index": 3,
                    "index": 1,
                    "inner_index": 3,
                    "nested_index": 1,
                    "prev_idx": 1,
                    "prev_index": 9,
                    "previous_function_index": 1,
                    "previous_index": 8,
                    "previous_iteration": 1,
                    "temp_index": 1,
                    "temp_index1": 1,
                    "upper_index": 1
                },
                "lVar3": {
                    "curr_index": 1,
                    "current_index": 1,
                    "decremented_index": 1,
                    "loop_index": 2,
                    "nested_index2": 1,
                    "outer_index": 1,
                    "prev_index2": 1,
                    "start_index": 1,
                    "temp_idx": 1,
                    "temp_index": 19,
                    "temp_index2": 1,
                    "temp_iteration": 1
                },
                "plVar4": {
                    "code_list": 1,
                    "function_array": 1,
                    "function_chain": 5,
                    "function_list": 8,
                    "function_list_pointer": 2,
                    "function_pointer": 3,
                    "function_pointer_list": 2,
                    "function_pointers": 6,
                    "function_pointers_array": 1,
                    "pointer_list": 1
                },
                "uVar5": {
                    "count": 7,
                    "counter": 8,
                    "decrement": 1,
                    "decremented_count": 1,
                    "function_count": 1,
                    "index": 3,
                    "loop_count": 2,
                    "num_functions": 5,
                    "num_iterations": 1,
                    "remaining_iterations": 1,
                    "u_var5": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid execute_functions_in_linked_list_00107cc0(void)\n\n{\n  long index;\n  long prev_index;\n  long temp_index;\n  long *function_list;\n  uint counter;\n  \n  function_list = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      counter = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)counter) {\n        index = (long)(int)counter;\n        counter = counter & 7;\n        (*(code *)function_list[index + 2])();\n        prev_index = index + -1;\n        if (-1 < (int)prev_index) {\n          temp_index = prev_index;\n          if (counter != 0) {\n            if (counter != 1) {\n              if (counter != 2) {\n                if (counter != 3) {\n                  if (counter != 4) {\n                    if (counter != 5) {\n                      if (counter != 6) {\n                        (*(code *)function_list[index + 1])();\n                        prev_index = index + -2;\n                      }\n                      (*(code *)function_list[prev_index + 2])();\n                      prev_index = prev_index + -1;\n                    }\n                    (*(code *)function_list[prev_index + 2])();\n                    prev_index = prev_index + -1;\n                  }\n                  (*(code *)function_list[prev_index + 2])();\n                  prev_index = prev_index + -1;\n                }\n                (*(code *)function_list[prev_index + 2])();\n                prev_index = prev_index + -1;\n              }\n              (*(code *)function_list[prev_index + 2])();\n              prev_index = prev_index + -1;\n            }\n            (*(code *)function_list[prev_index + 2])();\n            temp_index = prev_index + -1;\n            if ((int)(prev_index + -1) < 0) goto end_of_list;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nend_of_list:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_functions_in_linked_list_00107cc0",
            "entrypoint": "0x00107cc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00107cc0": "execute_functions_in_linked_list_00107cc0",
                "LAB_00107d96": "end_of_list",
                "lVar1": "index",
                "lVar2": "prev_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x00107da8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00102000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00105d60",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00105d20"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00105da0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00102590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00102c25",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_001028ed",
                "FUN_001031cf",
                "FUN_00103e95",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_00102f55",
                "FUN_00105300",
                "FUN_00102fd7"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x00102060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00102540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00102370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_cache_close": {
            "called": [
                "bfd_cache_close"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "current_name": "bfd_cache_close",
            "entrypoint": "0x00102050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_00105af0",
                "FUN_00102710"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00102520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x001024c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_00102710"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00102490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create": {
            "called": [
                "bfd_create"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "current_name": "bfd_create",
            "entrypoint": "0x001022a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001024d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenr": {
            "called": [
                "bfd_fdopenr"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenr",
            "entrypoint": "0x00102300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x00102570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_find_target": {
            "called": [
                "bfd_find_target"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "current_name": "bfd_find_target",
            "entrypoint": "0x001024e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00102220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x001022b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_readable": {
            "called": [
                "bfd_make_readable"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "current_name": "bfd_make_readable",
            "entrypoint": "0x001020a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_writable": {
            "called": [
                "bfd_make_writable"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "current_name": "bfd_make_writable",
            "entrypoint": "0x00102080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_001028ed",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_00102710"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x00102130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00103c60",
                "FUN_00105300",
                "FUN_00105af0"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00102530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00102420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_plugin": {
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_plugin",
            "entrypoint": "0x00102090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_plugin_set_program_name": {
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_plugin_set_program_name",
            "entrypoint": "0x001023a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x00102580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_archive_head": {
            "called": [
                "bfd_set_archive_head"
            ],
            "calling": [
                "FUN_00102d2f"
            ],
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "current_name": "bfd_set_archive_head",
            "entrypoint": "0x001020f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x001020d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00105300"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x00102240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x00102440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_001058b0"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00102340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_0010266f"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00102210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00102160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "calloc": {
            "called": [
                "calloc"
            ],
            "calling": [
                "FUN_00103df9"
            ],
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "calloc",
            "entrypoint": "0x001022d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00102c25"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x00102430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "clearerr": {
            "called": [
                "clearerr"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "current_name": "clearerr",
            "entrypoint": "0x00102360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x00102260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00102200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ctime": {
            "called": [
                "ctime"
            ],
            "calling": [
                "FUN_001079c0"
            ],
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "current_name": "ctime",
            "entrypoint": "0x00102150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_001025a0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001075e0",
                "FUN_001028ed",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010285f",
                "FUN_0010336b",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_001032a8",
                "FUN_00102e6f",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_001031a5",
                "FUN_00102d8c",
                "FUN_001052a0",
                "FUN_00102fd7",
                "FUN_001058b0"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00102170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001021d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_00105db0",
                "__libc_start_main"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(extract_and_process_archive_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00105cc0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_001075e0",
                "FUN_001033b0"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x00102500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00102140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x001020b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001023c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_00102cd9",
                "FUN_001032a8"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x00102100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fileno": {
            "called": [
                "fileno"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fileno",
            "entrypoint": "0x00102390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00105a68"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00102470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_00105db0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010285f",
                "FUN_0010336b",
                "FUN_001033b0",
                "FUN_001032a8",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x00102310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_0010266f",
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x00102280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x001021f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x001020e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_00103bd1",
                "FUN_00102ba1",
                "FUN_00102d2f",
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x00102030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x001023f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x00102320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00102510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00103e95"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x00102560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00102190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "isatty": {
            "called": [
                "isatty"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "isatty",
            "entrypoint": "0x001020c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lbasename": {
            "called": [
                "lbasename"
            ],
            "calling": [
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00105830"
            ],
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "current_name": "lbasename",
            "entrypoint": "0x001022c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001021e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001023b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00102380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x00102450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x001023e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00102460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "perror": {
            "called": [
                "perror"
            ],
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "current_name": "perror",
            "entrypoint": "0x001024a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00103a78",
                "FUN_00102f08",
                "FUN_00103172",
                "FUN_00103ba8",
                "FUN_001031a5",
                "FUN_00105a68"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001021a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_001078c0"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x001022f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00102290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "realloc": {
            "called": [
                "realloc"
            ],
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "current_name": "realloc",
            "entrypoint": "0x00102400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00102410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001024f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00103e95",
                "FUN_00105300",
                "FUN_001052a0"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x00102330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x001022e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00102c25",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_00102fd7"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00102550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00105a68"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00102180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_001057a0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001021c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00102350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x00102120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_00103e95",
                "FUN_00102f1e"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x00102070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00102bf5"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x001023d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_00107c80"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00102040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_001078c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x001024b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00105c00"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x00102110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_0010342d",
                "FUN_0010315d",
                "FUN_00107650",
                "FUN_0010394a",
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00107690",
                "FUN_00105a68"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00102480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00102bb0",
                "FUN_00102c25",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00103a78",
                "FUN_001057a0"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00102230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x00102250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_00105db0"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001021b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x00102270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00102020",
            "FUN_0010266f",
            "FUN_0010284b",
            "FUN_00102943",
            "FUN_00102ba1",
            "FUN_00102bb0",
            "FUN_00102bf5",
            "FUN_00102cd9",
            "FUN_00102d8c",
            "FUN_00102e57",
            "FUN_00102f08",
            "FUN_00102f55",
            "FUN_00102f96",
            "FUN_0010300e",
            "FUN_001030ed",
            "FUN_0010312d",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_001031a5",
            "FUN_001032a8",
            "FUN_0010336b",
            "FUN_001033b0",
            "FUN_00103ba8",
            "FUN_00103bd1",
            "FUN_001057a0",
            "FUN_00105830",
            "FUN_00105870",
            "FUN_00105a20",
            "FUN_00105a68",
            "FUN_00105bb0",
            "FUN_001075e0",
            "FUN_00107640",
            "FUN_00107730",
            "FUN_001078c0",
            "FUN_001079c0",
            "FUN_00107c20",
            "FUN_00107cc0"
        ],
        [
            "FUN_0010285f",
            "FUN_001031cf",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00103c60",
            "FUN_00103ddc",
            "FUN_00103df9",
            "FUN_00105480",
            "FUN_00105c00",
            "FUN_00107690",
            "FUN_00107890",
            "FUN_00107920",
            "FUN_00107c10"
        ],
        [
            "FUN_001025a0",
            "FUN_00102710",
            "FUN_00102e6f",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_001033d6",
            "FUN_00103a78",
            "FUN_001052a0",
            "FUN_00105bc0",
            "FUN_00107c80"
        ],
        [
            "FUN_00102c25",
            "FUN_00102d2f",
            "FUN_00105300",
            "FUN_001058b0",
            "FUN_00107740"
        ],
        [
            "FUN_00103e95",
            "FUN_00107650"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 372709
}