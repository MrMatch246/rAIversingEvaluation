{
    "functions": {
        "FUN_00104020": {
            "additional_data": {
                "FUN_00104020": {
                    "call_indirect_function": 1,
                    "call_indirect_jump": 1,
                    "execute_external_function": 1,
                    "execute_function": 4,
                    "execute_function_at_address": 1,
                    "execute_function_pointer": 1,
                    "execute_indirect_call": 3,
                    "execute_indirect_function": 1,
                    "execute_indirect_jump": 17
                },
                "PTR_00104020": {
                    "function_pointer": 1
                },
                "PTR_undefined_0": {
                    "jump_target": 1
                },
                "code": {
                    "function_pointer": 3,
                    "jump_target": 1
                },
                "originalVariable": {
                    "new_variable": 1
                },
                "undefined": {
                    "function_address": 1,
                    "function_pointer": 3,
                    "function_ptr": 1,
                    "indirect_function_address": 1,
                    "jump_address": 1,
                    "ptr": 1,
                    "ptr_function": 1,
                    "target_address": 5
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_indirect_jump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(function_pointer *)(target_address *)0x0)();\n  return;\n}\n\n",
            "current_name": "execute_indirect_jump_00104020",
            "entrypoint": "0x00104020",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "function_pointer",
                "undefined": "target_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104920": {
            "additional_data": {
                "FUN_00104920": {
                    "print_bad_number_error": 3,
                    "print_bad_number_error_message": 3,
                    "print_error_and_exit": 6,
                    "print_error_message_and_exit": 18,
                    "print_error_message_and_exit_00119dd0": 1
                },
                "dcgettext": {
                    "get_error_message": 8,
                    "get_localized_error_message": 1,
                    "get_localized_message": 3,
                    "get_localized_string": 1,
                    "get_message": 1,
                    "get_text": 1,
                    "get_translated_error": 1,
                    "get_translated_error_message": 3,
                    "get_translated_message": 3,
                    "get_translated_string": 2,
                    "translate": 1,
                    "translate_text": 1
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_and_exit": 4,
                    "print_error_message_and_exit": 13
                },
                "uVar1": {
                    "error_message": 27,
                    "error_string": 2,
                    "translated_error": 1,
                    "translated_message": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid print_error_message_and_exit_00119dd0_00104920(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_message_and_exit(error_message);\n}\n\n",
            "current_name": "print_error_message_and_exit_00119dd0_00104920",
            "entrypoint": "0x00104920",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104920": "print_error_message_and_exit_00119dd0_00104920",
                "dcgettext": "get_error_message",
                "print_error_message_and_exit_00119dd0": "print_error_message_and_exit",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104943": {
            "additional_data": {
                "FUN_00104943": {
                    "print_arch_mach_info": 6,
                    "print_architecture_info": 1,
                    "print_architectures": 3,
                    "print_binary_info": 4,
                    "print_binary_information": 2,
                    "print_formatted_data": 1,
                    "print_formatted_output": 2,
                    "print_formatted_strings": 1,
                    "print_reverse_arch_mach_combos": 1,
                    "print_reverse_arch_mach_info": 1,
                    "print_reverse_architecture": 1,
                    "print_reverse_architecture_machines": 1,
                    "print_reverse_binary_info": 2,
                    "print_reverse_data": 1,
                    "print_reverse_info": 1,
                    "print_reverse_information": 1,
                    "print_reverse_string_list": 1,
                    "print_reverse_strings": 1
                },
                "_stdout": {
                    "standard_output": 2
                },
                "iVar1": {
                    "binary_value": 2,
                    "decimal_value": 1,
                    "default_length": 1,
                    "default_max_string_len": 1,
                    "default_num": 2,
                    "default_size": 1,
                    "default_string_length": 1,
                    "default_value": 9,
                    "default_var": 1,
                    "default_var1": 1,
                    "int_value": 4,
                    "integer_var1": 1,
                    "length": 1,
                    "max_iterations": 1,
                    "num_iterations": 1,
                    "numeric_value": 1,
                    "parsed_int": 1
                },
                "iVar2": {
                    "arch_comparison_result": 1,
                    "arch_index": 6,
                    "arch_mach_comparison": 2,
                    "arch_mach_index": 1,
                    "arch_match_result": 2,
                    "architectural_machine_index": 1,
                    "cmp_result": 1,
                    "compare_result": 2,
                    "comparison_result": 6,
                    "comparison_value": 1,
                    "comparison_var": 1,
                    "integer_var2": 1,
                    "printable_arch_counter": 1,
                    "result": 1,
                    "strcmp_result": 1
                },
                "iVar7": {
                    "arch_counter": 1,
                    "arch_index": 4,
                    "arch_iter": 1,
                    "arch_iterator": 2,
                    "arch_loop_counter": 1,
                    "arch_loop_index": 2,
                    "arch_loop_variable": 1,
                    "arch_mach_index": 6,
                    "arch_mach_loop": 1,
                    "arch_mach_var": 1,
                    "arch_value": 2,
                    "architecture": 1,
                    "archmach": 1,
                    "iterator_var1": 1,
                    "loop_var": 1,
                    "loop_var1": 1,
                    "loop_variable": 1
                },
                "iVar9": {
                    "arch_name_index": 1,
                    "counter": 1,
                    "current_entry_index": 1,
                    "current_index": 4,
                    "current_iteration": 1,
                    "data_loop_index": 1,
                    "inner_loop_counter": 1,
                    "inner_loop_variable": 1,
                    "iterator_var2": 1,
                    "loop_index": 1,
                    "loop_var1": 2,
                    "loop_var2": 1,
                    "max_iterations": 1,
                    "outer_iterator": 1,
                    "outer_loop_index": 1,
                    "param7": 3,
                    "param7_copy": 1,
                    "param_count": 1,
                    "param_length": 1,
                    "param_start": 1,
                    "start_idx": 1,
                    "string_index": 2,
                    "string_loop_index": 1
                },
                "in_RAX": {
                    "binary_path": 1,
                    "binary_string": 1,
                    "input_binary_string": 1,
                    "input_str": 7,
                    "input_string": 18,
                    "number_string": 1,
                    "str": 1
                },
                "lVar3": {
                    "base": 1,
                    "converted_input": 1,
                    "converted_num": 2,
                    "converted_number": 3,
                    "converted_value": 7,
                    "current_index": 1,
                    "index": 4,
                    "inner_loop_index": 1,
                    "input_num": 1,
                    "int_value": 1,
                    "iter": 1,
                    "long_value": 1,
                    "long_var3": 1,
                    "num_input": 1,
                    "parsed_number": 1,
                    "parsed_value": 2,
                    "result": 1,
                    "value": 1
                },
                "lVar8": {
                    "arch_string_index": 1,
                    "entry_index": 1,
                    "long_var8": 1,
                    "outer_loop_counter": 1,
                    "param7_converted": 1,
                    "param7_index": 1,
                    "param7_iter": 1,
                    "param_index": 2,
                    "param_loop_variable": 1,
                    "start_index": 4,
                    "starting_index": 1,
                    "string_loop_counter": 1
                },
                "param_11": {
                    "arch_list": 1,
                    "arch_mach": 2,
                    "arch_mach_dict": 1,
                    "arch_mach_info": 4,
                    "arch_machines": 1,
                    "arch_match": 1,
                    "arch_names": 1,
                    "arch_table": 1,
                    "architecture_info": 1,
                    "architectures": 2,
                    "array_size": 1,
                    "binary_data": 1,
                    "binary_info_ptr": 1,
                    "data_array": 1,
                    "info_struct": 1,
                    "max_entries": 1,
                    "param11": 3,
                    "param_struct": 3,
                    "param_u8": 1,
                    "parameter_eleven": 1,
                    "parameters": 1,
                    "print_format": 1
                },
                "param_13": {
                    "arch_data": 1,
                    "arch_info_ptr": 1,
                    "arch_names": 1,
                    "arch_strings": 1,
                    "binary_data": 3,
                    "binary_data_array": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 4,
                    "data_ptr": 3,
                    "data_struct": 1,
                    "entry_array": 1,
                    "info_array": 1,
                    "param13": 3,
                    "param_array": 1,
                    "param_l": 1,
                    "parameter_thirteen": 1,
                    "str_array_address": 1,
                    "string_array": 1,
                    "string_list": 2,
                    "struct_ptr": 1
                },
                "param_7": {
                    "arch_mach_count": 1,
                    "current_iteration": 1,
                    "inner_iterator": 1,
                    "limit": 1,
                    "loop_var2": 1,
                    "max_data_index": 1,
                    "max_index": 2,
                    "max_iterations": 1,
                    "max_loop_var": 1,
                    "max_params": 2,
                    "max_string_length": 2,
                    "max_strings": 1,
                    "max_values_printed": 1,
                    "num": 1,
                    "num_architectures": 2,
                    "num_archs": 1,
                    "num_entries": 1,
                    "num_strings": 1,
                    "param7": 2,
                    "param7_value": 1,
                    "param_end": 1,
                    "param_seven": 1,
                    "start_index": 2
                },
                "pcVar5": {
                    "arch_mach": 3,
                    "arch_mach_name": 1,
                    "arch_mach_str": 1,
                    "arch_mach_string": 5,
                    "arch_name": 3,
                    "arch_str": 1,
                    "arch_string": 2,
                    "architecture": 1,
                    "current_string": 1,
                    "printable_arch": 1,
                    "printable_arch_mach": 1,
                    "printable_arch_machine": 1,
                    "printable_char_var5": 1,
                    "printable_str": 1,
                    "printable_string": 3
                },
                "sVar4": {
                    "arch_mach_string_length": 2,
                    "arch_string_len": 1,
                    "current_string_length": 2,
                    "length": 1,
                    "size_var4": 1,
                    "str_len": 2,
                    "str_length": 2,
                    "string_len": 1,
                    "string_length": 12,
                    "strlen_result": 1
                },
                "uStack000000000000000c": {
                    "arch_mach_indent": 1,
                    "arch_name_length": 1,
                    "format_width": 1,
                    "indent_size": 1,
                    "indentation": 5,
                    "indentation_level": 7,
                    "indentation_size": 1,
                    "limit": 1,
                    "loop_limit": 1,
                    "num_indentation": 1,
                    "padding": 1,
                    "param10": 1,
                    "param11_value": 1,
                    "param3": 1,
                    "stack_variable_c": 1,
                    "u_stack12": 1,
                    "unaff_r15_d": 1,
                    "width": 1
                },
                "uVar10": {
                    "char_counter": 1,
                    "loop_count": 1,
                    "loop_counter": 5,
                    "loop_index": 1,
                    "loop_iterations": 1,
                    "loop_length": 1,
                    "loop_var": 1,
                    "loop_var2": 1,
                    "loop_variable": 2,
                    "remaining_string_length": 1,
                    "str_len": 1,
                    "str_length": 2,
                    "string_length": 5,
                    "strlen_offset": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "u_var10": 1,
                    "unsigned_var10": 1
                },
                "uVar11": {
                    "adjusted_value": 1,
                    "arch_index": 5,
                    "arch_index_minus_two": 1,
                    "arch_index_offset": 2,
                    "arch_loop_counter": 1,
                    "arch_loop_variable_minus_two": 1,
                    "arch_mach_index_shifted": 1,
                    "arch_mach_offset": 4,
                    "arch_mach_var": 1,
                    "arch_machine_index": 1,
                    "arch_match_index": 1,
                    "arch_offset": 5,
                    "architecture_counter": 1,
                    "loop_end": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "unsigned_var11": 1
                },
                "uVar6": {
                    "arch_mach": 2,
                    "arch_mach_printable": 2,
                    "arch_mach_string": 1,
                    "arch_mach_string_printable": 1,
                    "arch_printable": 1,
                    "printable_arch": 3,
                    "printable_arch_mach": 6,
                    "printable_arch_mach_result": 1,
                    "printable_arch_mach_var6": 1,
                    "printable_arch_machine_result": 1,
                    "printable_arch_name": 1,
                    "printable_arch_string": 1,
                    "printable_architecture": 1,
                    "printable_string": 2,
                    "printable_value": 1
                },
                "unaff_R15D": {
                    "arch_index_offset": 1,
                    "indentation_level": 1,
                    "init_value": 1,
                    "loop_limit": 1,
                    "padding": 1,
                    "param7_value": 1,
                    "param8": 1,
                    "param_size": 1,
                    "param_value": 1,
                    "stack_size": 1,
                    "stack_value": 2,
                    "stack_variable": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "u_stack_value": 1,
                    "unaffected_var": 1
                }
            },
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "printf",
                "fputs",
                "strtol",
                "strcmp",
                "strlen"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nvoid print_reverse_arch_mach_info_00104943(void)\n\n{\n  int default_value;\n  int arch_index;\n  char *input_string;\n  long converted_value;\n  size_t string_length;\n  char *arch_mach_string;\n  undefined8 printable_arch_mach;\n  int arch_mach_index;\n  long start_index;\n  int current_index;\n  uint stack_value;\n  ulong string_length;\n  uint arch_index;\n  int max_index;\n  uint indentation_level;\n  undefined8 arch_mach_info;\n  long data_pointer;\n  \n  converted_value = strtol(input_string,(char **)0x0,10);\n  default_value = (int)converted_value;\n  current_index = max_index;\n  indentation_level = stack_value;\n  if (default_value == 0) {\n    default_value = 0x50;\n  }\n  do {\n    max_index = current_index;\n    if (arch_mach_info._4_4_ <= max_index) {\n      return;\n    }\n    start_index = (long)max_index;\n    arch_mach_index = (default_value - indentation_level) + -1;\n    converted_value = start_index;\n    do {\n      current_index = (int)converted_value;\n      if (arch_mach_info._4_4_ <= current_index) break;\n      string_length = strlen(*(char **)(data_pointer + converted_value * 0x60));\n      converted_value = converted_value + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(indentation_level + 1),&DAT_0011b4a1);\n    for (converted_value = start_index * 0x60; ((ulong)(uint)(current_index - max_index) + start_index) * 0x60 - converted_value != 0;\n        converted_value = converted_value + 0x60) {\n      printf(\"%s \",*(undefined8 *)(data_pointer + converted_value));\n    }\n    arch_mach_index = 2;\n    putc(10,standard_output);\n    do {\n      arch_mach_string = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      arch_index = strcmp(arch_mach_string,\"UNKNOWN!\");\n      if (arch_index != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)indentation_level,printable_arch_mach);\n        arch_index = arch_mach_index - 2;\n        converted_value = start_index * 0x60;\n        arch_index = max_index;\n        while (current_index != arch_index) {\n          arch_mach_string = *(char **)(data_pointer + converted_value);\n          if (*(char *)((long)(char **)(data_pointer + converted_value) + (ulong)arch_index + 8) == '\\0') {\n            string_length = strlen(arch_mach_string);\n            for (string_length = string_length & 0xffffffff; (int)string_length != 0; string_length = (ulong)((int)string_length - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(arch_mach_string,standard_output);\n          }\n          arch_index = arch_index + 1;\n          if (current_index != arch_index) {\n            putc(0x20,standard_output);\n          }\n          converted_value = converted_value + 0x60;\n        }\n        putc(10,standard_output);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_reverse_arch_mach_info_00104943",
            "entrypoint": "0x00104943",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104943": "print_reverse_arch_mach_info_00104943",
                "_stdout": "standard_output",
                "iVar1": "default_value",
                "iVar2": "arch_index",
                "iVar7": "arch_mach_index",
                "iVar9": "current_index",
                "in_RAX": "input_string",
                "lVar3": "converted_value",
                "lVar8": "start_index",
                "param_11": "arch_mach_info",
                "param_13": "data_pointer",
                "param_7": "max_index",
                "pcVar5": "arch_mach_string",
                "sVar4": "string_length",
                "uStack000000000000000c": "indentation_level",
                "uVar10": "string_length",
                "uVar11": "arch_index",
                "uVar6": "printable_arch_mach",
                "unaff_R15D": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104966": {
            "additional_data": {
                "FUN_00104966": {
                    "error_handling_function": 1,
                    "get_file_not_found_error": 1,
                    "handle_file_error": 15,
                    "handle_file_not_found": 1,
                    "handle_file_not_found_error": 3,
                    "print_error_message": 2,
                    "print_file_error": 6,
                    "print_file_error_message": 2
                },
                "__errno_location": {
                    "get_errno_location": 1,
                    "get_error_location": 1
                },
                "dcgettext": {
                    "get_error_message": 4,
                    "get_locale_message": 1,
                    "get_localized_text": 1,
                    "get_translated_string": 1,
                    "translate_string": 1
                },
                "piVar1": {
                    "errno_location": 2,
                    "errno_ptr": 20,
                    "errno_value": 2,
                    "error_code": 2,
                    "error_code_ptr": 2,
                    "error_ptr": 3
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 2,
                    "print_error_message_with_params": 6,
                    "print_message_with_parameters": 1
                },
                "strerror": {
                    "get_error_message": 1,
                    "get_error_string": 1
                },
                "uVar2": {
                    "error_message": 25,
                    "error_msg": 4,
                    "error_string": 1,
                    "translated_error_message": 1
                }
            },
            "called": [
                "FUN_00119ed0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00113f50"
            ],
            "code": "\nundefined8 handle_file_not_found_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message_with_params(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message_with_params(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "current_name": "handle_file_not_found_error_00104966",
            "entrypoint": "0x00104966",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104966": "handle_file_not_found_error_00104966",
                "__errno_location": "get_error_location",
                "dcgettext": "get_error_message",
                "piVar1": "errno_ptr",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "strerror": "get_error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104a35": {
            "additional_data": {
                "FUN_00104a35": {
                    "print_supported_targets": 30,
                    "print_target_list": 1
                },
                "__ptr": {
                    "target_list": 31
                },
                "lVar1": {
                    "current_entry": 1,
                    "current_target": 8,
                    "current_target_value": 12,
                    "target": 1,
                    "target_addr": 1,
                    "target_id": 4,
                    "target_item": 1,
                    "target_value": 3
                },
                "param_1": {
                    "selected_target": 1,
                    "target": 25,
                    "target_name": 5
                },
                "param_2": {
                    "file": 4,
                    "output": 2,
                    "output_file": 25
                },
                "pcVar2": {
                    "display_text": 1,
                    "localized_text": 2,
                    "message": 21,
                    "prompt": 1,
                    "target_string": 2,
                    "text": 3,
                    "translation": 1
                },
                "plVar3": {
                    "current_pointer": 1,
                    "current_target": 21,
                    "current_target_pointer": 1,
                    "current_target_ptr": 1,
                    "ptr": 2,
                    "ptr_target": 1,
                    "target_pointer": 1,
                    "target_ptr": 3
                }
            },
            "called": [
                "fprintf",
                "fputc",
                "bfd_target_list",
                "free",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\nvoid print_supported_targets_00104a35(long target,FILE *output_file)\n\n{\n  long current_target_value;\n  char *message;\n  long *target_list;\n  long *current_target;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  current_target = target_list;\n  while( true ) {\n    current_target_value = *current_target;\n    current_target = current_target + 1;\n    if (current_target_value == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "current_name": "print_supported_targets_00104a35",
            "entrypoint": "0x00104a35",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "__ptr": "target_list",
                "lVar1": "current_target_value",
                "param_1": "target",
                "param_2": "output_file",
                "pcVar2": "message",
                "plVar3": "current_target"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ad6": {
            "additional_data": {
                "FUN_00104ad6": {
                    "decode_flags": 1,
                    "find_section_flags": 1,
                    "parse_flags": 3,
                    "parse_section_flags": 22,
                    "process_section_flags": 1,
                    "section_flags_to_value": 1
                },
                "__s": {
                    "current_flag": 3,
                    "current_section": 4,
                    "current_str": 1,
                    "current_string": 2,
                    "flag": 2,
                    "flag_list": 1,
                    "flag_pointer": 1,
                    "input_string": 1,
                    "remaining_string": 2,
                    "section": 2,
                    "section_flag": 3,
                    "section_flags_string": 1,
                    "section_name": 2,
                    "section_string": 1,
                    "str": 1,
                    "str_ptr": 1,
                    "string": 1,
                    "string_pointer": 1,
                    "string_ptr": 1
                },
                "auVar6": {
                    "output_flags": 1,
                    "result": 15,
                    "ret_val": 1,
                    "return_structure": 1,
                    "return_val": 1,
                    "return_value": 8,
                    "return_values": 1,
                    "return_variable": 1
                },
                "dcgettext": {
                    "get_localized_text": 1
                },
                "iVar1": {
                    "cmp_result": 2,
                    "comparison_result": 27,
                    "result": 1
                },
                "iVar5": {
                    "comma_index": 1,
                    "count": 1,
                    "current_flag_length": 2,
                    "flag_index": 2,
                    "section_length": 2,
                    "section_name_index": 1,
                    "section_name_length": 5,
                    "section_string_length": 2,
                    "str_comp_result": 1,
                    "str_len": 1,
                    "str_length": 2,
                    "string_length": 6,
                    "substr_length": 1,
                    "substring_length": 3
                },
                "pcVar3": {
                    "comma": 1,
                    "comma_index": 1,
                    "comma_location": 2,
                    "comma_pos_ptr": 1,
                    "comma_position": 16,
                    "comma_ptr": 3,
                    "delimiter_position": 1,
                    "delimiter_ptr": 2,
                    "str_found": 1
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_message_and_exit": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message_with_params": 1
                },
                "sVar4": {
                    "compare_length": 1,
                    "flag_length": 8,
                    "len": 1,
                    "section_length": 8,
                    "section_name_length": 1,
                    "section_string_size": 1,
                    "str_len": 1,
                    "str_length": 1,
                    "string_length": 8,
                    "substring_length": 1
                },
                "uVar2": {
                    "error_message": 15,
                    "error_string": 1
                },
                "unaff_R14D": {
                    "flag": 2,
                    "flags": 7,
                    "section_flag_value": 1,
                    "section_flags": 21
                },
                "unaff_R15": {
                    "current_section": 1,
                    "flag_pointer": 1,
                    "flag_string": 1,
                    "section": 4,
                    "section_flag": 5,
                    "section_name": 11,
                    "str": 1,
                    "supported_flags": 7
                },
                "unaff_RBP": {
                    "current_flag": 2,
                    "current_position": 2,
                    "current_section": 1,
                    "current_section_flag": 2,
                    "delimiter": 1,
                    "flag": 1,
                    "next": 1,
                    "next_section": 1,
                    "next_string": 1,
                    "remaining_flags": 1,
                    "remaining_string": 3,
                    "section": 3,
                    "section_flag": 1,
                    "section_name": 1,
                    "section_ptr": 1,
                    "section_string": 3,
                    "str": 1,
                    "string": 1,
                    "substring": 1,
                    "substring_ptr": 1,
                    "substring_start": 1
                },
                "unaff_RDP": {
                    "section_string": 1
                },
                "unaff_retaddr": {
                    "return_addr": 1,
                    "return_address": 22
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "strncasecmp",
                "strncpy",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "strchr",
                "strlen"
            ],
            "calling": [
                "FUN_00104ad6"
            ],
            "code": "\nundefined  [16] parse_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *section_string;\n  char *current_section;\n  size_t string_length;\n  int string_length;\n  uint section_flags;\n  char *section_name;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    section_flags = section_flags | 0x2000;\n    current_section = section_string;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (current_section == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = section_flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(current_section,0x2c);\n              if (comma_position == (char *)0x0) {\n                string_length = strlen(current_section);\n                string_length = (int)string_length;\n                section_string = (char *)0x0;\n              }\n              else {\n                section_string = comma_position + 1;\n                string_length = (int)comma_position - (int)current_section;\n              }\n              string_length = (size_t)string_length;\n              comparison_result = strncasecmp(section_name,current_section,string_length);\n              if (comparison_result != 0) break;\n              section_flags = section_flags | 1;\n              current_section = section_string;\n            }\n            comparison_result = strncasecmp(\"load\",current_section,string_length);\n            if (comparison_result != 0) break;\n            section_flags = section_flags | 2;\n            current_section = section_string;\n          }\n          comparison_result = strncasecmp(\"noload\",current_section,string_length);\n          if (comparison_result != 0) break;\n          section_flags = section_flags | 0x200;\n          current_section = section_string;\n        }\n        comparison_result = strncasecmp(\"readonly\",current_section,string_length);\n        if (comparison_result != 0) break;\n        section_flags = section_flags | 8;\n        current_section = section_string;\n      }\n      comparison_result = strncasecmp(\"debug\",current_section,string_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",current_section,string_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 0x10;\n        current_section = section_string;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",current_section,string_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x20;\n          current_section = section_string;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",current_section,string_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 0x40;\n            current_section = section_string;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",current_section,string_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x8000;\n              current_section = section_string;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",current_section,string_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x8000000;\n                current_section = section_string;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",current_section,string_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x100;\n                  current_section = section_string;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",current_section,string_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x800000;\n                    current_section = section_string;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",current_section,string_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(string_length + 1));\n                      strncpy(comma_position,current_section,string_length);\n                      comma_position[string_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_with_params(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_message_and_exit(error_message,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    section_flags = section_flags | 0x1000000;\n                    current_section = section_string;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_section_flags_00104ad6",
            "entrypoint": "0x00104ad6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "__s": "current_section",
                "auVar6": "result",
                "dcgettext": "get_localized_text",
                "iVar1": "comparison_result",
                "iVar5": "string_length",
                "pcVar3": "comma_position",
                "print_error_message_and_exit_00119dd0": "print_error_message_and_exit",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "sVar4": "string_length",
                "uVar2": "error_message",
                "unaff_R14D": "section_flags",
                "unaff_R15": "section_name",
                "unaff_RBP": "section_string",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104bba": {
            "additional_data": {
                "FUN_00104bba": {
                    "check_and_set_attributes": 1,
                    "check_and_set_bits": 1,
                    "check_and_set_error_flags": 1,
                    "check_and_set_flags": 9,
                    "check_and_set_memory_attributes": 1,
                    "check_and_set_permissions": 1,
                    "check_and_update_flags": 2,
                    "check_and_update_memory_permissions": 1,
                    "check_error_and_update_flags": 1,
                    "check_for_errors": 1,
                    "validate_access_permissions": 1,
                    "validate_and_set_flags": 4,
                    "validate_copy_removal": 1,
                    "validate_eax": 1,
                    "validate_input": 1,
                    "validate_memory_attributes": 1,
                    "validate_memory_permissions": 1,
                    "validate_permissions": 2
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "in_EAX": {
                    "access_flags": 1,
                    "eax": 1,
                    "eax_flag": 2,
                    "eax_parameter": 1,
                    "eax_value": 7,
                    "flags": 16,
                    "permission_flags": 1,
                    "permissions": 1,
                    "status_flags": 1
                },
                "uVar1": {
                    "error_message": 19,
                    "error_string": 3
                },
                "unaff_EBP": {
                    "condition": 1,
                    "ebp": 2,
                    "ebp_flag": 2,
                    "ebp_value": 9,
                    "ebp_variable": 1,
                    "flags": 1,
                    "memory_flags": 1,
                    "mode_flags": 1,
                    "parameters": 1,
                    "permissions": 1,
                    "register_flags": 1,
                    "register_state": 2,
                    "register_val": 1,
                    "register_value": 4,
                    "state": 1,
                    "status_flags": 2
                },
                "unaff_R14": {
                    "address": 1,
                    "base_address": 3,
                    "context": 1,
                    "data": 1,
                    "data_address": 2,
                    "memory_address": 6,
                    "r14": 2,
                    "r14_offset": 3,
                    "r14_value": 7,
                    "r14_variable": 1,
                    "register_address": 3,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00114190"
            ],
            "code": "\nvoid check_and_set_error_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 error_message;\n  uint ebp_value;\n  long r14_value;\n  \n  if ((flags & 2) != 0) {\n    error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_message_and_exit_00119dd0(error_message);\n  }\n  if ((((flags & 8) == 0) || ((ebp_value & 0x10) == 0)) && ((ebp_value & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((ebp_value & 0x40) == 0)) && ((ebp_value & 0x60) != 0x60)) {\n      *(uint *)(r14_value + 0x14) = flags | ebp_value;\n      return;\n    }\n    error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_message_and_exit_00119dd0(error_message);\n  }\n  error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_message_and_exit_00119dd0(error_message);\n}\n\n",
            "current_name": "check_and_set_error_flags_00104bba",
            "entrypoint": "0x00104bba",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104bba": "check_and_set_error_flags_00104bba",
                "dcgettext": "get_error_message",
                "in_EAX": "flags",
                "uVar1": "error_message",
                "unaff_EBP": "ebp_value",
                "unaff_R14": "r14_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104c36": {
            "additional_data": {
                "FUN_00104c36": {
                    "parse_and_ignore_lines": 1,
                    "parse_and_ignore_rubbish": 1,
                    "parse_and_process_lines": 1,
                    "parse_file": 2,
                    "parse_input_lines": 6,
                    "parse_lines": 3,
                    "process_lines": 16,
                    "sanitize_input": 1
                },
                "bVar4": {
                    "current_byte": 1,
                    "current_char": 1,
                    "next_byte": 5,
                    "next_char": 5,
                    "next_character": 4,
                    "next_next_char": 1
                },
                "dcgettext": {
                    "get_message": 1
                },
                "htab_find_slot": {
                    "find_slot": 1
                },
                "in_CL": {
                    "current_byte": 3,
                    "current_char": 17,
                    "current_char_code": 1,
                    "current_char_val": 1,
                    "current_char_value": 1,
                    "current_character": 5
                },
                "in_stack_00000008": {
                    "dcgettext_arg2": 1,
                    "error_message": 3,
                    "file": 1,
                    "file_name": 3,
                    "file_path": 1,
                    "filename": 9,
                    "format_string": 8,
                    "in_stack_arg1": 1,
                    "line_buffer": 1,
                    "msg_args": 1,
                    "output_buffer_size": 1,
                    "print_format": 1
                },
                "in_stack_00000010": {
                    "in_stack_arg2": 1,
                    "next_func_ptr": 1,
                    "out_param": 1,
                    "output": 1,
                    "output_pointer": 1,
                    "output_result": 1,
                    "result": 6,
                    "result_pointer": 2,
                    "result_ptr": 1,
                    "return_address": 11,
                    "return_value": 5
                },
                "pbVar2": {
                    "next_char_ptr": 1,
                    "slot": 1
                },
                "pbVar3": {
                    "current_byte": 1,
                    "current_char": 1,
                    "next_byte": 1,
                    "next_char": 6,
                    "next_char_ptr": 4,
                    "next_line": 1,
                    "next_pos": 1,
                    "next_position": 1,
                    "temp_char_ptr2": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 2
                },
                "pbVar4": {
                    "current_byte": 1,
                    "current_char_value": 1,
                    "next_char": 2
                },
                "pbVar5": {
                    "byte_pointer": 1,
                    "current_byte": 1,
                    "current_char": 1,
                    "current_char_ptr": 2,
                    "current_line": 5,
                    "current_pointer": 1,
                    "current_pos": 1,
                    "current_position": 2,
                    "line_end": 1,
                    "line_end_ptr": 1,
                    "line_pointer": 2,
                    "line_ptr": 3,
                    "line_start": 2,
                    "temp_char_ptr": 1,
                    "temp_ptr2": 1
                },
                "ppbVar2": {
                    "hash_slot": 2,
                    "hash_table_slot": 2,
                    "line_slot": 2,
                    "output_slot": 1,
                    "slot": 4,
                    "slot_pointer": 5,
                    "slot_ptr": 4,
                    "slot_ptr_ptr": 1
                },
                "ptrToFunction": {
                    "printf": 1
                },
                "uVar1": {
                    "error_message": 7,
                    "error_msg": 3,
                    "error_string": 2,
                    "message": 1,
                    "msg": 1,
                    "msg_ptr": 1,
                    "translated_message": 1
                },
                "unaff_EBP": {
                    "line_count": 5,
                    "line_counter": 2,
                    "line_index": 2,
                    "line_number": 22
                },
                "unaff_R13": {
                    "callback": 1,
                    "dcgettext_arg1": 2,
                    "error_message": 2,
                    "file_descriptor": 1,
                    "file_name": 1,
                    "file_path": 2,
                    "filename": 2,
                    "filepath": 1,
                    "func_ptr": 1,
                    "function_pointer": 1,
                    "log_message": 1,
                    "message": 2,
                    "msg": 2,
                    "msg_ptr": 1,
                    "output_buffer": 1,
                    "return_address": 1,
                    "return_value": 1
                },
                "unaff_R14": {
                    "current_char": 4,
                    "current_char_ptr": 1,
                    "current_line": 4,
                    "current_line_ptr": 1,
                    "current_line_start": 1,
                    "end_of_file": 1,
                    "last_non_space_char": 1,
                    "last_position": 1,
                    "line_end": 5,
                    "line_start": 3,
                    "next_line": 1,
                    "next_line_ptr": 1,
                    "prev_char": 1,
                    "prev_line_pointer": 1,
                    "prev_line_ptr": 1,
                    "previous_line": 1,
                    "previous_line_ptr": 1,
                    "previous_pos": 1
                },
                "unaff_R15": {
                    "current_char": 1,
                    "current_char_pos": 1,
                    "current_line": 2,
                    "current_line_end": 1,
                    "current_line_ptr": 2,
                    "line_buffer": 1,
                    "line_end": 5,
                    "line_pointer": 1,
                    "line_ptr": 2,
                    "line_start": 8,
                    "line_start_ptr": 1,
                    "next_line": 3,
                    "prev_line_start": 1,
                    "start_of_line": 1,
                    "untrimmed_line": 1
                },
                "unaff_RBX": {
                    "current_line": 9,
                    "input_buffer": 1,
                    "input_line": 1,
                    "input_pointer": 2,
                    "line": 1,
                    "line_buffer": 3,
                    "line_buffer_end": 1,
                    "line_pointer": 1,
                    "line_ptr": 2,
                    "line_start": 6,
                    "start_of_string": 1,
                    "string_pointer": 1,
                    "text": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid parse_and_process_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot_pointer;\n  byte *next_char;\n  byte current_char;\n  byte next_char;\n  byte *current_line;\n  int line_number;\n  byte *current_line;\n  undefined8 file_path;\n  byte *line_end;\n  byte *line_start;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  do {\n    current_line = line_start;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = current_line[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = current_line[6];\n        next_char = current_line + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = next_char[1];\n              next_char = next_char + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_with_params_00119ed0(error_message,filename,line_number);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (line_start < current_line) {\n      slot_pointer = (byte **)htab_find_slot();\n      *slot_pointer = line_start;\n    }\n    line_number = line_number + 1;\n    current_line = current_line;\n    if (line_end[1] == 0) {\n      *return_address = file_path;\n      return;\n    }\n    for (; next_char = *current_line, line_end = current_line, next_char != 10; current_line = current_line + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          next_char = current_line + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_line = 0;\n          next_char = current_line + 1;\n          if (current_line[1] == 10) {\n            next_char = current_line + 2;\n            line_end = current_line + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          find_and_process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_line = 0;\n    if (current_line[1] == 0xd) {\n      line_end = current_line + 1;\n      next_char = current_line + 2;\n    }\n    else {\n      next_char = current_line + 1;\n    }\nLAB_00114553:\n    current_char = *current_line;\n    line_start = current_line;\n    while (current_line = next_char, current_char == 0x20) {\nLAB_00104c3f:\n      current_line = line_start + 1;\n      line_start = line_start + 1;\n      next_char = current_line;\n      current_char = *current_line;\n    }\n  } while( true );\n}\n\n",
            "current_name": "parse_and_process_lines_00104c36",
            "entrypoint": "0x00104c36",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104c36": "parse_and_process_lines_00104c36",
                "bVar4": "next_char",
                "dcgettext": "get_message",
                "htab_find_slot": "find_slot",
                "in_CL": "current_char",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address",
                "pbVar2": "slot",
                "pbVar3": "next_char",
                "pbVar5": "current_line",
                "ppbVar2": "slot_pointer",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "file_path",
                "unaff_R14": "line_end",
                "unaff_R15": "line_start",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104cc1": {
            "additional_data": {
                "FUN_00104cc1": {
                    "ignore_rubbish_lines": 1,
                    "ignore_rubbish_on_line": 1,
                    "parse_and_process_lines": 2,
                    "parse_config_file": 1,
                    "parse_lines": 1,
                    "parse_lines_and_find_occurrence": 1,
                    "process_file_lines": 1,
                    "process_input_lines": 2,
                    "process_line": 1,
                    "process_lines": 20
                },
                "bVar4": {
                    "char": 2,
                    "char_value": 1,
                    "current_byte": 5,
                    "current_char": 5,
                    "current_char3": 1,
                    "next_char": 11
                },
                "find_and_process_lines_00104d1c": {
                    "find_and_process_lines": 1
                },
                "htab_find_slot": {
                    "find_slot": 1
                },
                "in_R10": {
                    "current_char": 2,
                    "current_line": 10,
                    "current_line_ptr": 1,
                    "current_pointer": 1,
                    "line": 3,
                    "line_buffer": 4,
                    "line_end": 1,
                    "line_ptr": 2,
                    "line_ptr2": 1,
                    "line_start": 2,
                    "position": 1,
                    "text": 1,
                    "text_ptr": 1
                },
                "param_7": {
                    "err_msg": 1,
                    "error_message": 16,
                    "file_name": 1,
                    "filename": 1,
                    "line_num": 1,
                    "line_number": 5,
                    "message": 1,
                    "param": 1,
                    "param_3": 1,
                    "param_4": 2,
                    "param_value": 1
                },
                "param_8": {
                    "error_param": 1,
                    "output": 3,
                    "output_buffer": 1,
                    "output_list": 1,
                    "output_param": 2,
                    "output_parameter": 1,
                    "output_ptr": 1,
                    "output_values": 1,
                    "param_4": 1,
                    "param_5": 1,
                    "ptr_return_value": 1,
                    "result": 11,
                    "result_ptr": 1,
                    "return_address": 1,
                    "return_address_pointer": 1,
                    "return_value": 2,
                    "target_address": 1
                },
                "param_9": {
                    "current_line": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "ignore_line": 1,
                    "input": 4,
                    "input_buffer": 1,
                    "input_line": 1,
                    "input_lines": 1,
                    "input_param": 2,
                    "input_ptr": 1,
                    "input_string": 3,
                    "line": 9,
                    "line_ptr": 1,
                    "param_5": 1,
                    "param_6": 1,
                    "param_line": 1,
                    "ptr_current_line": 1
                },
                "pbVar3": {
                    "ch": 1,
                    "char_ptr": 1,
                    "current": 1,
                    "current_byte": 3,
                    "current_char": 16,
                    "current_char2": 1,
                    "current_line": 1,
                    "current_token": 1
                },
                "pbVar5": {
                    "buffer_start": 1,
                    "current_char": 2,
                    "end_of_line": 1,
                    "line": 2,
                    "line_end": 3,
                    "line_ptr": 2,
                    "line_start": 6,
                    "next_byte": 2,
                    "next_char": 1,
                    "next_line": 2,
                    "ptr": 1,
                    "ptr_buffer": 1,
                    "rbx_copy": 1,
                    "start_of_line": 1,
                    "unaff_current_char": 1,
                    "unaff_rbx_copy": 1,
                    "unprocessed_string_copy": 1
                },
                "ppbVar2": {
                    "hash_slot": 3,
                    "hash_table_slot": 1,
                    "htab_slot": 1,
                    "slot": 16,
                    "slot_address": 1,
                    "slot_ptr": 3
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error": 1
                },
                "uVar1": {
                    "err_message": 1,
                    "err_msg": 1,
                    "error_message": 11,
                    "error_message_id": 1,
                    "error_message_key": 1,
                    "error_message_template": 1,
                    "error_msg": 1,
                    "error_string": 5,
                    "error_text": 1,
                    "message": 1,
                    "translated_message": 1
                },
                "unaff_EBP": {
                    "ebp": 1,
                    "line_count": 10,
                    "line_counter": 2,
                    "line_index": 4,
                    "line_number": 12,
                    "lines_processed": 1
                },
                "unaff_R13": {
                    "default_result": 1,
                    "error_message": 2,
                    "error_param": 3,
                    "file_handle": 1,
                    "function_pointer": 1,
                    "ignore_value": 1,
                    "output_value": 2,
                    "param": 1,
                    "param7": 1,
                    "param_1": 3,
                    "param_7_value": 1,
                    "processed_line": 2,
                    "r13": 1,
                    "result_value": 1,
                    "return_address": 1,
                    "return_value": 3,
                    "special_value": 1,
                    "stored_value": 1,
                    "unaff_r13": 1,
                    "value": 1
                },
                "unaff_R14": {
                    "comment_ptr": 1,
                    "current_char": 3,
                    "current_char2": 1,
                    "current_line": 4,
                    "current_line2": 1,
                    "current_line_start": 2,
                    "last_byte": 1,
                    "line": 1,
                    "line_ptr3": 1,
                    "line_start": 5,
                    "line_start_prev": 1,
                    "next_line": 2,
                    "param_2": 3,
                    "previous_char": 1,
                    "ptr_start_of_line": 1,
                    "r14": 1,
                    "second_buffer": 1,
                    "unaff_r14": 1
                },
                "unaff_R15": {
                    "current_line": 1,
                    "current_line_end": 1,
                    "end_of_file": 1,
                    "end_of_line": 1,
                    "last_char": 2,
                    "last_line": 4,
                    "line_end": 5,
                    "line_end_prev": 1,
                    "line_start": 4,
                    "next_line": 1,
                    "param_3": 2,
                    "prev_line_ptr": 1,
                    "ptr_end_of_line": 1,
                    "r15": 1,
                    "slot": 1,
                    "start_of_buffer": 1,
                    "start_of_line": 2,
                    "unaff_r15": 1
                },
                "unaff_RBP": {
                    "line_count": 1
                },
                "unaff_RBX": {
                    "buffer": 1,
                    "current_char": 2,
                    "current_line": 5,
                    "line": 1,
                    "line_buffer": 1,
                    "line_end": 1,
                    "line_index": 1,
                    "line_ptr": 1,
                    "line_start": 4,
                    "next_char": 3,
                    "next_line": 1,
                    "ptr_current_char": 1,
                    "rbx": 1,
                    "remaining_buffer": 1,
                    "remaining_chars": 1,
                    "start": 1,
                    "start_of_line": 1,
                    "unaff_input": 1,
                    "unaff_rbx": 1,
                    "unprocessed_line": 1,
                    "unprocessed_string": 1
                }
            },
            "called": [
                "FUN_00104c36",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "FUN_00104d1c",
                "htab_find_slot",
                "dcgettext"
            ],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid process_input_lines_00104cc1(void)\n\n{\n  undefined8 error_message;\n  byte **slot;\n  byte *current_char;\n  byte next_char;\n  byte *current_line;\n  byte *line_start;\n  int line_number;\n  byte *current_line;\n  undefined8 param_1;\n  byte *line_start;\n  byte *line_end;\n  undefined8 error_message;\n  undefined8 *result;\n  byte *line;\n  \ncode_r0x00104cc1:\n  line = current_line;\n  error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error(error_message,error_message,line_number);\n  line_start = current_line;\n  current_line = line;\nLAB_00114599:\n  do {\n    *current_line = 0;\n    if (line_end < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_end;\n    }\n    line_number = line_number + 1;\n    current_char = line_start;\n    if (line_start[1] == 0) {\n      *result = param_1;\n      return;\n    }\n    for (; next_char = *current_char, line_start = current_char, next_char != 10; current_char = current_char + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          current_line = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *current_char = 0;\n          current_line = current_char + 1;\n          if (current_char[1] == 10) {\n            current_line = current_char + 2;\n            line_start = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          find_and_process_lines();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      line_start = current_char + 1;\n      current_line = current_char + 2;\n    }\n    else {\n      current_line = current_char + 1;\n    }\nLAB_00114553:\n    next_char = *line_start;\n    line_end = line_start;\n    while ((next_char == 0x20 || (current_line = line_end, next_char == 9))) {\n      line_start = line_end + 1;\n      line_end = line_end + 1;\n      next_char = *line_start;\n    }\n    do {\n      line_start = current_line;\n      if ((next_char == 10) || (next_char == 0xd)) goto LAB_00114676;\n      if (next_char == 0) goto LAB_00114599;\n      next_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((next_char != 0x20) && (next_char != 9));\n    if ((char)next_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (next_char & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    next_char = current_line[1];\n    if ((((((next_char == 9) || (next_char == 0x20)) && ((next_char = current_line[2], next_char == 9 || (next_char == 0x20)))\n          ) && ((next_char = current_line[3], next_char == 9 || (next_char == 0x20)))) &&\n        ((next_char = current_line[4], next_char == 9 || (next_char == 0x20)))) &&\n       ((next_char = current_line[5], next_char == 9 || (next_char == 0x20)))) {\n      next_char = current_line[6];\n      current_char = current_line + 6;\n      if ((next_char == 9) || (next_char == 0x20)) {\n        do {\n          do {\n            next_char = current_char[1];\n            current_char = current_char + 1;\n          } while (next_char == 0x20);\n        } while (next_char == 9);\n      }\n    }\n    if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "current_name": "process_input_lines_00104cc1",
            "entrypoint": "0x00104cc1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104cc1": "process_input_lines_00104cc1",
                "bVar4": "next_char",
                "find_and_process_lines_00104d1c": "find_and_process_lines",
                "htab_find_slot": "find_slot",
                "in_R10": "current_line",
                "param_7": "error_message",
                "param_8": "result",
                "param_9": "line",
                "pbVar3": "current_char",
                "pbVar5": "line_start",
                "ppbVar2": "slot",
                "print_error_message_with_params_00119ed0": "print_error",
                "uVar1": "error_message",
                "unaff_EBP": "line_number",
                "unaff_R13": "param_1",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "unaff_RBX": "current_line"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d1c": {
            "additional_data": {
                "FUN_00104d1c": {
                    "extract_and_process_data": 1,
                    "find_and_process_lines": 1,
                    "parse_and_ignore_lines": 1,
                    "parse_and_ignore_rubbish": 1,
                    "parse_config_file": 1,
                    "parse_input": 3,
                    "parse_input_lines": 3,
                    "parse_lines": 6,
                    "process_data": 1,
                    "process_input": 1,
                    "process_input_lines": 1,
                    "process_lines": 11
                },
                "FUN_00119ed0": {
                    "print_ignored_line_msg": 1
                },
                "bVar4": {
                    "char": 1,
                    "current_byte": 7,
                    "current_char": 8,
                    "next_char": 5,
                    "temp_byte": 1
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "htab_find_slot": {
                    "find_slot": 1
                },
                "in_stack_00000008": {
                    "arg1": 1,
                    "error_message": 9,
                    "error_message_format": 1,
                    "error_string": 1,
                    "file_name": 2,
                    "filename": 5,
                    "format_string": 7,
                    "memory_1": 1,
                    "message_buffer": 1,
                    "message_format": 1,
                    "message_ptr": 1,
                    "msg_length": 1
                },
                "in_stack_00000010": {
                    "arg2": 1,
                    "callback_args": 1,
                    "error_ptr": 1,
                    "memory_2": 1,
                    "result": 3,
                    "return_address": 19,
                    "return_address_ptr": 1,
                    "return_pointer": 1,
                    "return_value": 2,
                    "stack_pointer": 1
                },
                "pbVar2": {
                    "current_line_ptr": 1,
                    "line": 1
                },
                "pbVar3": {
                    "char_ptr": 1,
                    "current_char": 6,
                    "current_char2": 1,
                    "first_non_space_or_tab": 1,
                    "next_line": 1,
                    "ptr_1": 1,
                    "rubbish_data": 1,
                    "rubbish_position": 1,
                    "rubbish_ptr": 3,
                    "space_or_tab_ptr": 1,
                    "start_index": 1,
                    "temp": 1,
                    "temp_char": 2,
                    "temp_pointer": 4,
                    "temp_ptr": 2
                },
                "pbVar4": {
                    "current_char": 2,
                    "next_char": 1
                },
                "pbVar5": {
                    "next_char": 4,
                    "next_line": 14,
                    "next_line_char": 1,
                    "next_line_ptr": 4,
                    "next_line_start": 4
                },
                "pbVar6": {
                    "current_char2": 1,
                    "current_char3": 1,
                    "current_line": 5,
                    "current_line_char": 1,
                    "current_line_position": 1,
                    "current_line_ptr": 1,
                    "current_pos": 1,
                    "current_ptr": 2,
                    "line": 1,
                    "line_buffer": 1,
                    "line_pointer": 1,
                    "next_char": 3,
                    "next_rubbish_ptr": 1,
                    "next_word_ptr": 1,
                    "ptr_2": 1,
                    "rubbish_start": 1,
                    "temp_char": 2,
                    "temp_ptr": 2
                },
                "pbVar7": {
                    "current_line": 1,
                    "last_char": 1,
                    "line_end": 3,
                    "new_line_char": 1,
                    "new_line_ptr": 1,
                    "next_byte": 1,
                    "next_byte_ptr": 1,
                    "next_char": 4,
                    "next_char2": 1,
                    "next_line": 1,
                    "next_line2": 1,
                    "next_line_char": 1,
                    "next_line_start": 1,
                    "ptr_3": 1,
                    "ptr_after_newline": 1,
                    "temp_char2": 1,
                    "temp_char_pointer": 1,
                    "temp_next_line_char": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_ptr2": 1
                },
                "ppbVar2": {
                    "hash_slot": 1,
                    "hash_table_slot": 9,
                    "htab_slot": 1,
                    "line_ptr": 1,
                    "slot": 5,
                    "slot_pointer": 3,
                    "slot_ptr": 4,
                    "slot_ptr_ptr": 1
                },
                "pulled_over": {
                    "ignoring_rubbish": 1
                },
                "uVar1": {
                    "error_message": 5,
                    "error_msg": 3,
                    "error_string": 7,
                    "error_text": 1,
                    "localized_error_message": 1,
                    "localized_error_string": 1,
                    "localized_message": 1,
                    "message": 1,
                    "message_format": 1,
                    "msg": 2,
                    "string_format": 1,
                    "translation": 1
                },
                "unaff_EBP": {
                    "count": 2,
                    "counter": 1,
                    "ebp": 3,
                    "index": 2,
                    "line_count": 16,
                    "line_counter": 1,
                    "line_number": 6
                },
                "unaff_R13": {
                    "callback": 3,
                    "callback_function": 1,
                    "callback_ptr": 1,
                    "current_error": 1,
                    "error_code": 1,
                    "error_message": 7,
                    "file_descriptor": 1,
                    "file_name": 1,
                    "file_path": 2,
                    "filename": 1,
                    "function_ptr": 1,
                    "ignored_return_value": 1,
                    "localized_message": 1,
                    "message": 1,
                    "msg": 1,
                    "r13": 1,
                    "return_value": 3,
                    "string_format": 1,
                    "user_data": 1
                },
                "unaff_R14": {
                    "current_line": 12,
                    "current_line_start": 1,
                    "current_word": 1,
                    "line": 2,
                    "line_buffer": 1,
                    "line_pointer": 1,
                    "line_ptr": 3,
                    "line_start": 7,
                    "line_start_ptr": 1,
                    "r14": 1
                },
                "unaff_R15": {
                    "char_ptr": 1,
                    "current_char": 12,
                    "current_char_ptr": 1,
                    "current_position": 1,
                    "data_ptr": 1,
                    "file_ptr": 1,
                    "line_end": 3,
                    "line_ptr": 4,
                    "line_start": 3,
                    "next_line_pointer": 1,
                    "next_line_start": 1,
                    "r15": 1
                },
                "unaff_R17": {
                    "current_char": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104cc1"
            ],
            "code": "\nvoid find_and_process_lines_00104d1c(void)\n\n{\n  undefined8 error_string;\n  byte **hash_table_slot;\n  byte *current_char;\n  byte current_char;\n  byte *next_line;\n  int line_count;\n  byte *current_line;\n  undefined8 error_message;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 error_message;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_char = *current_line;\n    next_char = current_line;\n    if (current_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_char < '\\v') {\n      if (current_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_char = *current_char;\n    while ((current_char == 0x20 || (current_line = current_char, current_char == 9))) {\n      current_line = current_char + 1;\n      current_char = current_char + 1;\n      current_char = *current_line;\n    }\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_char = current_line[1];\n      if ((((((current_char == 9) || (current_char == 0x20)) &&\n            ((current_char = current_line[2], current_char == 9 || (current_char == 0x20)))) &&\n           ((current_char = current_line[3], current_char == 9 || (current_char == 0x20)))) &&\n          ((current_char = current_line[4], current_char == 9 || (current_char == 0x20)))) &&\n         ((current_char = current_line[5], current_char == 9 || (current_char == 0x20)))) {\n        current_char = current_line[6];\n        current_char = current_line + 6;\n        if ((current_char == 9) || (current_char == 0x20)) {\n          do {\n            do {\n              current_char = current_char[1];\n              current_char = current_char + 1;\n            } while (current_char == 0x20);\n          } while (current_char == 9);\n        }\n      }\n      if ((0xd < current_char) || ((-0x2402L >> (current_char & 0x3f) & 1U) != 0)) {\n        error_string = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_with_params_00119ed0(error_string,error_message,line_count);\n      }\n    }\nLAB_00114599:\n    *current_line = 0;\n    if (current_char < current_line) {\n      hash_table_slot = (byte **)htab_find_slot();\n      *hash_table_slot = current_char;\n    }\n    line_count = line_count + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = error_message;\n      return;\n    }\n  } while( true );\n  if (current_char == 0x23) {\n    find_and_process_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "current_name": "find_and_process_lines_00104d1c",
            "entrypoint": "0x00104d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d1c": "find_and_process_lines_00104d1c",
                "bVar4": "current_char",
                "dcgettext": "get_translated_string",
                "htab_find_slot": "find_slot",
                "in_stack_00000008": "error_message",
                "in_stack_00000010": "return_address",
                "pbVar2": "current_line_ptr",
                "pbVar3": "current_char",
                "pbVar5": "next_line",
                "pbVar6": "current_line",
                "pbVar7": "next_char",
                "ppbVar2": "hash_table_slot",
                "uVar1": "error_string",
                "unaff_EBP": "line_count",
                "unaff_R13": "error_message",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104d25": {
            "additional_data": {
                "FUN_00104d25": {
                    "cleanup_and_print_error": 5,
                    "cleanup_and_print_error_message": 1,
                    "clear_directory": 1,
                    "clear_error_and_clean_up": 1,
                    "execute_cleanup_task": 1,
                    "initialize": 1,
                    "initialize_and_print_error": 2,
                    "initialize_and_print_error_message": 4,
                    "initialize_and_print_message": 1,
                    "initialize_and_print_messages": 1,
                    "initialize_application": 4,
                    "initialize_program": 5,
                    "print_bfd_error_and_remove_directory": 2,
                    "print_error_and_cleanup": 1,
                    "print_error_and_remove_directory": 1
                },
                "param_7": {
                    "additional_info": 1,
                    "arguments": 1,
                    "data": 1,
                    "error_context": 1,
                    "error_details": 2,
                    "error_flag": 1,
                    "error_info": 2,
                    "error_message": 7,
                    "error_message_ptr": 1,
                    "file_path": 2,
                    "input_parameter": 1,
                    "message": 1,
                    "param": 3,
                    "param1": 2,
                    "param_7": 1,
                    "parameter": 1,
                    "status": 1,
                    "unknown_param": 1,
                    "unused_param": 1
                },
                "print_bfd_error_message_001126c0": {
                    "display_error_message": 2,
                    "print_error_message": 26
                },
                "remove_directory_and_free_memory_00114b84": {
                    "clean_directory_and_release_memory": 1,
                    "clean_up_and_free_memory": 2,
                    "clean_up_resources": 3,
                    "cleanup": 1,
                    "cleanup_and_free_memory": 6,
                    "cleanup_directory_and_free_memory": 1,
                    "cleanup_memory": 1,
                    "cleanup_operations": 1,
                    "cleanup_resources": 2,
                    "remove_and_free_memory": 1,
                    "remove_directory": 1,
                    "remove_directory_and_free_memory": 7,
                    "remove_directory_and_release_memory": 1
                }
            },
            "called": [
                "FUN_001126c0",
                "FUN_00114b84"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid initialize_and_print_error_message_00104d25(void)\n\n{\n  undefined8 error_message;\n  \n  DAT_00127a20 = 1;\n  print_error_message(0,error_message,0,0);\n  remove_directory_and_free_memory();\n  return;\n}\n\n",
            "current_name": "initialize_and_print_error_message_00104d25",
            "entrypoint": "0x00104d25",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104d25": "initialize_and_print_error_message_00104d25",
                "param_7": "error_message",
                "print_bfd_error_message_001126c0": "print_error_message",
                "remove_directory_and_free_memory_00114b84": "remove_directory_and_free_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00104ea2": {
            "additional_data": {
                "DAT_00127a20": {
                    "error_flag": 1,
                    "error_occurred": 1
                },
                "FUN_00104ea2": {
                    "copy_and_extract_archive": 3,
                    "extract_and_copy_archive": 13,
                    "extract_and_copy_archive_files": 3,
                    "extract_and_copy_archived_files": 2,
                    "extract_and_copy_files_from_archive": 1,
                    "extract_archive": 4,
                    "extract_archive_files": 1,
                    "reverse_and_copy": 1
                },
                "bVar17": {
                    "bool_flag": 1,
                    "byte_flag": 2,
                    "byte_val": 1,
                    "byte_value": 4,
                    "byte_var": 3,
                    "byte_var17": 1,
                    "error_flag": 1,
                    "extra_flag": 1,
                    "flag": 5,
                    "is_negative": 1,
                    "stat_flag": 1,
                    "temp_bool": 1,
                    "temp_byte": 2,
                    "unknown_var": 1
                },
                "cVar1": {
                    "char_flag": 1,
                    "char_result": 1,
                    "char_var": 3,
                    "char_var1": 1,
                    "character": 1,
                    "condition_check": 1,
                    "result": 5,
                    "result_status": 1,
                    "status": 4,
                    "success": 4,
                    "success_flag": 1
                },
                "iVar2": {
                    "arch": 3,
                    "arch_result": 1,
                    "arch_type": 3,
                    "architecture": 1,
                    "bfd_arch": 1,
                    "bfd_result": 1,
                    "file_format": 1,
                    "int_val": 1,
                    "int_var": 4,
                    "int_var2": 1,
                    "result": 4,
                    "return_value": 1,
                    "status": 1,
                    "value": 1
                },
                "in_stack_00000030": {
                    "copy_flag": 1,
                    "copy_recursive": 1,
                    "copy_unknown_format": 1,
                    "create_temp_directory": 1,
                    "enable_recursion": 1,
                    "flag": 1,
                    "format_error": 1,
                    "format_error_flag": 1,
                    "is_recursive": 1,
                    "print_messages": 1,
                    "recursive": 1,
                    "unknown_flag": 2,
                    "unknown_var": 1
                },
                "lVar12": {
                    "bytes_remaining": 1,
                    "file_descriptor": 1,
                    "file_offset": 1,
                    "file_size": 7,
                    "long_val": 1,
                    "long_var_2": 1,
                    "read_write_size": 1,
                    "remaining_size": 9,
                    "temp_dir_index": 1,
                    "temp_dir_length": 1,
                    "temp_dir_path_created": 1,
                    "temp_directory_path": 1
                },
                "lVar14": {
                    "buffer_size": 1,
                    "bytes_read": 1,
                    "bytes_to_read": 1,
                    "bytes_to_write": 1,
                    "bytes_written": 9,
                    "chunk_size": 1,
                    "long_val": 1,
                    "long_var_3": 1,
                    "num_bytes_to_copy": 1,
                    "read_buffer_size": 2,
                    "read_size": 2,
                    "write_bytes": 1
                },
                "lVar15": {
                    "temp_file_size": 1
                },
                "lVar16": {
                    "bytes_to_copy": 1
                },
                "lVar5": {
                    "bytes_read": 19,
                    "bytes_read_in_iteration": 1,
                    "bytes_read_or_written": 1,
                    "bytes_written": 1,
                    "long_val": 1,
                    "long_var": 2,
                    "read_bytes": 1,
                    "write_size": 1
                },
                "lVar9": {
                    "temp_dir_creation_result": 1
                },
                "param_10": {
                    "archive_file": 3,
                    "archive_file_path": 1,
                    "archive_file_path_copy": 1,
                    "archive_format": 2,
                    "archive_path": 1,
                    "archived_file_path": 1,
                    "binary_file": 1,
                    "destination_directory": 1,
                    "destination_file": 3,
                    "destination_path": 1,
                    "external_archives": 1,
                    "extract_dir": 1,
                    "offset": 1,
                    "output_file": 2,
                    "output_file_name": 1,
                    "output_file_path": 1,
                    "output_file_pointer": 1,
                    "output_filepath": 1,
                    "output_path": 1,
                    "temp_archive_file_path": 1,
                    "temp_directory_path": 1,
                    "temp_file_path": 1,
                    "temp_file_path_ptr": 1,
                    "tempdir_prefix": 1
                },
                "param_11": {
                    "archive_filename": 1,
                    "archive_mode": 1,
                    "archive_open_flags": 1,
                    "file_mode": 2,
                    "file_open_mode": 2,
                    "flags": 2,
                    "mode": 3,
                    "open_mode": 9,
                    "opening_mode": 1,
                    "param_11": 1,
                    "parameters": 1,
                    "write_mode": 6
                },
                "param_18": {
                    "file_mode": 2,
                    "file_permission": 3,
                    "file_permissions": 6,
                    "permission": 5,
                    "permission_bits": 2,
                    "permission_flags": 4,
                    "permissions": 6
                },
                "param_19": {
                    "archive_file_size": 1,
                    "archive_size": 6,
                    "expected_file_size": 1,
                    "file_size": 12,
                    "max_file_size": 1,
                    "target_size": 1,
                    "total_file_size": 2,
                    "total_size": 4
                },
                "param_7": {
                    "archive_path_pointer": 1,
                    "archive_path_ptr": 1,
                    "archived_files": 1,
                    "input_file": 2,
                    "input_file_name": 1,
                    "input_file_path": 3,
                    "input_filenames": 1,
                    "original_archive": 1,
                    "output_file": 1,
                    "output_file_path": 1,
                    "prev_bfd_path": 1,
                    "source_archive_file_paths": 1,
                    "source_file": 3,
                    "source_file_path": 4,
                    "source_file_paths": 1,
                    "source_files": 1,
                    "source_path": 1,
                    "temp_file_path": 2
                },
                "param_8": {
                    "bytes_read": 1,
                    "bytes_remaining": 3,
                    "bytes_written": 1,
                    "bytes_written_ptr": 1,
                    "copied_file_sizes": 1,
                    "copy_size": 1,
                    "extracted_file_paths": 1,
                    "extracted_file_size": 1,
                    "extracted_files": 1,
                    "extracted_size": 1,
                    "file_offset": 1,
                    "file_offset_list": 1,
                    "file_size": 1,
                    "file_size_ptr": 1,
                    "is_temp_file_allocated": 1,
                    "offset_pointer": 1,
                    "output_file_path": 2,
                    "output_file_sizes": 1,
                    "prev_bfd_handle": 1,
                    "temp_dir_ptr": 1,
                    "temp_directory_list": 1,
                    "temp_directory_path": 1,
                    "temp_file_handle": 1,
                    "tempdir_path": 1
                },
                "param_9": {
                    "base_temp_directory_path": 1,
                    "destination_dir": 1,
                    "destination_directory": 1,
                    "directory_path": 1,
                    "extracted_files_dir": 1,
                    "main_temp_directory": 1,
                    "temp_dir": 3,
                    "temp_dir_path": 9,
                    "temp_directory": 5,
                    "temp_directory_path": 3,
                    "tempdir": 1,
                    "tempdir_path": 1,
                    "temporary_directory": 1
                },
                "pcVar1": {
                    "char_val": 1
                },
                "pcVar10": {
                    "archive_file_name": 1,
                    "archive_member": 2,
                    "char_ptr_var_2": 1,
                    "current_archive_file": 1,
                    "current_file": 2,
                    "current_file_name": 1,
                    "current_file_path": 1,
                    "current_path": 1,
                    "error_message": 3,
                    "error_str": 1,
                    "file": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "filename": 2,
                    "pointer_to_string": 1,
                    "ptr_char": 1,
                    "str_error": 1
                },
                "pcVar11": {
                    "print_format": 1
                },
                "pcVar12": {
                    "temp_dir_path_with_suffix": 1
                },
                "pcVar13": {
                    "bfd_close_fn_ptr": 1,
                    "bfd_close_func": 2,
                    "bfd_close_function": 4,
                    "close_function": 9,
                    "close_function_ptr": 1,
                    "code_ptr_var": 1,
                    "ptr_to_func": 1
                },
                "pcVar15": {
                    "archive_file_path": 1,
                    "char_pointer": 1,
                    "current_path": 1,
                    "directory_name": 1,
                    "name": 1,
                    "next_file_path": 1,
                    "path": 1,
                    "path_char": 1,
                    "path_component": 2,
                    "path_iterator": 1,
                    "path_segment": 2,
                    "pathname": 1,
                    "ptr_char": 1,
                    "slash_position": 1,
                    "sub_path": 1
                },
                "pcVar3": {
                    "current_file_path": 1
                },
                "pcVar4": {
                    "temp_file_path": 1
                },
                "pcVar7": {
                    "char_ptr_var": 1,
                    "curr_path": 1,
                    "current_char": 6,
                    "current_character": 1,
                    "current_file": 1,
                    "current_file_path": 1,
                    "current_member_path": 1,
                    "current_path": 4,
                    "current_path_iterator": 1,
                    "error_message": 1,
                    "file": 1,
                    "file_iterator": 2,
                    "file_path": 1,
                    "file_ptr": 1,
                    "path": 2,
                    "ptr_char": 1
                },
                "piVar6": {
                    "error_number_ptr": 1
                },
                "piVar9": {
                    "errno_location": 6,
                    "errno_pointer": 1,
                    "errno_ptr": 2,
                    "error_code": 1,
                    "error_num_ptr": 1,
                    "error_number": 4,
                    "ptr_int": 1,
                    "temp_pi_var": 1
                },
                "ppcVar10": {
                    "temp_str": 1
                },
                "ppcVar13": {
                    "bfd_close_fn": 1,
                    "bfd_close_function": 2,
                    "close_func": 1
                },
                "ppcVar15": {
                    "current_path": 1
                },
                "ppcVar3": {
                    "archive_bfd_3": 1,
                    "archive_handle": 1,
                    "archived_file": 5,
                    "archived_file_ptr": 1,
                    "archived_files": 1,
                    "bfd_handle_alt": 1,
                    "char_ptr_array_var": 1,
                    "check_arch_file": 1,
                    "current_member": 1,
                    "file_format": 1,
                    "file_handle": 1,
                    "file_names": 1,
                    "first_archived_file_ptr": 1,
                    "pointer_to_archive_format": 1,
                    "ptr_ptr_to_char": 1,
                    "read_handle": 1,
                    "stat_archive_handle": 1,
                    "stat_error_files": 1,
                    "temp_ppc_var": 1
                },
                "ppcVar6": {
                    "archive": 4,
                    "archive_bfd_2": 1,
                    "archive_file": 2,
                    "archive_file_ptr": 1,
                    "archive_handle": 1,
                    "bfd": 1,
                    "bfd_file": 1,
                    "bfd_handle": 6,
                    "bfd_object": 1,
                    "bfd_pptr": 1,
                    "copy_arch_ptr": 1,
                    "current_archived_file_ptr": 1,
                    "current_file": 1,
                    "input_file": 1,
                    "opened_archive": 1,
                    "output_file": 3,
                    "ptr_ptr_to_char": 1,
                    "write_handle": 1
                },
                "psVar14": {
                    "temp_stats": 1
                },
                "psVar16": {
                    "archived_file_status": 1,
                    "current_stat_info": 1,
                    "file_stat": 4,
                    "file_stat_pointer": 1,
                    "file_stat_ptr": 1,
                    "file_stats_info": 1,
                    "file_stats_ptr": 1,
                    "file_stats_temp": 1,
                    "ptr_stat": 1,
                    "stat_buffer": 1,
                    "stat_buffer_pointer": 1,
                    "stat_pointer": 1,
                    "stat_ptr": 1,
                    "stat_ptr_var": 1,
                    "temp_ps_var": 1,
                    "temp_stat_buffer": 1,
                    "temp_stat_info": 1
                },
                "puVar13": {
                    "temp_file_data_allocate": 1
                },
                "puVar5": {
                    "temp_file_data_ptr": 1
                },
                "puVar8": {
                    "archive_temp_file_ptr": 1,
                    "current_temp_dir_info": 1,
                    "data_pointer": 1,
                    "pointer_var": 1,
                    "ptr_uint64": 1,
                    "temp_dir": 1,
                    "temp_dir_data": 1,
                    "temp_dir_info": 2,
                    "temp_dir_ptr": 1,
                    "temp_directory": 2,
                    "temp_directory_data": 1,
                    "temp_directory_info": 2,
                    "temp_file_info": 1,
                    "temp_info": 1,
                    "temp_pointer": 1,
                    "temp_pu_var": 1,
                    "tempdir_handle": 2,
                    "undefined8_ptr_var": 1
                },
                "pvVar10": {
                    "buffer": 1
                },
                "pvVar4": {
                    "buffer": 7,
                    "pointer_var": 1,
                    "ptr_void": 1,
                    "temp_buffer": 4,
                    "temp_dir": 1,
                    "temp_dir_path_dup": 1,
                    "temp_path": 2,
                    "temp_pointer": 1,
                    "temp_str": 1,
                    "tempdir_full_path": 1,
                    "void_ptr_var": 1
                },
                "uVar11": {
                    "error_message": 7,
                    "error_msg": 1,
                    "format_string": 1,
                    "formatted_error_message": 1,
                    "formatted_string": 1,
                    "localized_error_message": 1,
                    "message": 1,
                    "ret_string": 1,
                    "translated_string": 1,
                    "undefined8_var": 1
                },
                "uVar8": {
                    "formatted_string": 1
                },
                "unaff_EBX": {
                    "archived": 1,
                    "ebx": 1,
                    "ebx_value": 1,
                    "error_code": 1,
                    "error_flag": 1,
                    "internal_stat_error": 1,
                    "is_stat_error": 1,
                    "stat_error": 16,
                    "stat_result": 3,
                    "stat_return_code": 1,
                    "unaff_ebx": 1
                },
                "unaff_R12": {
                    "archive_file_path": 8,
                    "archive_filename": 1,
                    "archive_filepath": 1,
                    "archive_path": 12,
                    "current_file_path": 1,
                    "current_source_file": 1,
                    "file_path": 1,
                    "temp_dir": 1,
                    "temp_file_path": 1,
                    "temp_path": 1,
                    "tmp_extract_path": 1
                },
                "unaff_R13": {
                    "archive_data": 1,
                    "current_info": 1,
                    "file_info": 1,
                    "temp_dir_info": 4,
                    "temp_dir_list": 2,
                    "temp_dir_paths": 1,
                    "temp_directories": 3,
                    "temp_directory_data": 1,
                    "temp_directory_info": 1,
                    "temp_directory_list": 1,
                    "temp_dirs": 2,
                    "temp_extract_directory": 1,
                    "temp_file_data": 1,
                    "temp_file_list": 1,
                    "temp_file_paths": 1,
                    "temp_file_ptr": 1,
                    "temp_path": 1,
                    "tempdir_context": 1,
                    "tempdir_info": 1,
                    "tempdirs": 1
                },
                "unaff_R15": {
                    "archive": 2,
                    "archive_file": 3,
                    "archive_file_data": 1,
                    "archive_files": 3,
                    "archive_handle": 2,
                    "archive_handler": 1,
                    "archive_iterator": 1,
                    "archive_list": 1,
                    "archive_object": 1,
                    "archived_file_list": 2,
                    "archived_files": 8,
                    "current_archived_file_ptr": 1,
                    "file_format": 1,
                    "next_file": 1,
                    "unarchived_files": 1
                },
                "unaff_RBP": {
                    "file_stat": 8,
                    "file_stat_ptr": 1,
                    "file_stats": 5,
                    "file_status": 1,
                    "stat_buffer": 8,
                    "stat_result": 1,
                    "stats": 1,
                    "stbuf": 1
                },
                "unaff_retaddr": {
                    "return_address": 27
                }
            },
            "called": [
                "bfd_get_arch",
                "concat",
                "__errno_location",
                "bfd_openw",
                "xmalloc",
                "FUN_001125fa",
                "bfd_close",
                "FUN_00114e50",
                "strerror",
                "free",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "bfd_bread",
                "bfd_check_format",
                "FUN_00119ed0",
                "bfd_bwrite",
                "stat",
                "FUN_0011a350",
                "FUN_001052a2",
                "bfd_openr_next_archived_file",
                "printf",
                "FUN_00104ea2",
                "FUN_00114b84",
                "xstrdup",
                "bfd_openr",
                "bfd_seek",
                "bfd_close_all_done",
                "bfd_close_all_done",
                "FUN_0011a110",
                "unlink",
                "dcgettext",
                "bfd_close",
                "rmdir",
                "chmod"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid extract_and_copy_files_from_archive_00104ea2(void)\n\n{\n  char result;\n  int int_var;\n  char **archived_file;\n  void *buffer;\n  long bytes_read;\n  char **bfd_handle;\n  char *current_char;\n  undefined8 *tempdir_handle;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  long remaining_size;\n  code *close_function;\n  long bytes_written;\n  int stat_error;\n  stat *stat_buffer;\n  char *path_segment;\n  stat *file_stat;\n  char *archive_path;\n  undefined8 *temp_dir_info;\n  char **archived_files;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *source_file_path;\n  long *bytes_remaining;\n  char *temp_dir_path;\n  undefined8 *destination_file;\n  undefined8 open_mode;\n  undefined8 unknown_flag;\n  uint permissions;\n  long file_size;\n  \n  flag = 0;\ncode_r0x00104ea2:\n  bfd_handle = (char **)bfd_openw(archive_path,open_mode);\n  if (bfd_handle == (char **)0x0) {\nLAB_00104e80:\n    print_bfd_error_message_001126c0(archive_path,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = FUNC_00114e50(archived_files,bfd_handle,return_address);\n    if (result == '\\0') {\n      int_var = bfd_get_arch(archived_files);\n      if (int_var == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(bfd_handle);\n      if (result != '\\0') goto LAB_00104ec9;\n      print_bfd_error_message_001126c0(archive_path,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(bfd_handle);\n    bfd_handle = archived_files;\n    if (result == '\\0') {\n      print_bfd_error_message_001126c0(archive_path,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (stat_error == 0)) {\n      set_file_modification_time_0011a350(archive_path,stat_buffer);\n    }\n    remaining_size = bfd_openr(archive_path,open_mode);\n    temp_dir_info[2] = remaining_size;\n    *bytes_remaining = remaining_size;\n    bytes_remaining = (long *)(remaining_size + 0xf0);\n    archived_files = (char **)bfd_openr_next_archived_file(destination_file,bfd_handle);\n    bfd_close(bfd_handle);\n    while ((DAT_00127a20 == 0 && (archived_files != (char **)0x0))) {\n      error_message = *archived_files;\n      current_char = error_message;\n      if (*error_message == '/') {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_with_params_00119ed0(error_message,error_message);\n        goto LAB_00104e93;\n      }\n      while (*current_char != '\\0') {\n        path_segment = current_char;\n        if ((*current_char == '.') && (path_segment = current_char + 1, current_char[1] == '.')) {\n          path_segment = current_char + 2;\n          if ((current_char[2] == '\\0') || (current_char[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*path_segment != '\\0' && (*path_segment != '/')); path_segment = path_segment + 1) {\n        }\n        current_char = path_segment;\n        if (*path_segment == '/') {\n          copy_and_extract_archive_001052a2();\n          return;\n        }\n      }\n      stat_buffer = (stat *)&stack0x00000050;\n      archive_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n      int_var = stat(archive_path,stat_buffer);\n      tempdir_handle = temp_dir_info;\n      if (-1 < int_var) {\n        remaining_size = create_temp_directory_path_0011a0e0(archive_path);\n        free(archive_path);\n        if (remaining_size == 0) {\n          errno_location = __errno_location();\n          error_message = strerror(*errno_location);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_with_params_00119ed0(error_message,error_message);\n          goto LAB_00104e93;\n        }\n        tempdir_handle = (undefined8 *)xmalloc(0x18);\n        error_message = *archived_files;\n        *tempdir_handle = temp_dir_info;\n        tempdir_handle[2] = 0;\n        tempdir_handle[1] = remaining_size;\n        archive_path = (char *)concat(remaining_size,&DAT_0011b47d,error_message);\n      }\n      stat_error = 0;\n      if (DAT_001279cb != '\\0') {\n        file_stat = stat_buffer;\n        for (remaining_size = 0x24; remaining_size != 0; remaining_size = remaining_size + -1) {\n          *(undefined4 *)&file_stat->st_dev = 0;\n          file_stat = (stat *)((long)file_stat + (ulong)flag * -8 + 4);\n        }\n        bfd_handle = (char **)archived_files[0x1d];\n        if ((char **)archived_files[0x1d] == (char **)0x0) {\n          bfd_handle = archived_files;\n        }\n        stat_error = (**(code **)(bfd_handle[1] + 0x1e8))(archived_files,stat_buffer);\n        if (stat_error != 0) {\n          error_message = *archived_files;\n          error_message = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_with_params_00119ed0(error_message,error_message);\n        }\n      }\n      temp_dir_info = (undefined8 *)xmalloc(0x18);\n      temp_dir_info[1] = archive_path;\n      *temp_dir_info = tempdir_handle;\n      temp_dir_info[2] = 0;\n      result = bfd_check_format(archived_files,1);\n      if (result != '\\0') {\n        if (unknown_flag._7_1_ != '\\0') goto code_r0x00104ea2;\n        bfd_handle = (char **)bfd_openw(archive_path,*(undefined8 *)archived_files[1]);\n        if (bfd_handle == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_bfd_error_message_001126c0(0,archived_files,0,error_message);\n      bfd_handle = (char **)bfd_openw(archive_path,open_mode);\n      if (bfd_handle == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archived_file = (char **)archived_files[0x1d];\n      if ((char **)archived_files[0x1d] == (char **)0x0) {\n        archived_file = archived_files;\n      }\n      int_var = (**(code **)(archived_file[1] + 0x1e8))(archived_files);\n      remaining_size = file_size;\n      if (int_var == 0) {\n        if (file_size < 0) {\n          get_formatted_string_001125fa(archived_files);\n          error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_with_params_00119ed0(error_message);\n        }\n        else {\n          int_var = bfd_seek(archived_files,0,0);\n          if (int_var == 0) {\n            if (DAT_001279c9 != '\\0') {\n              error_message = *bfd_handle;\n              error_message = get_formatted_string_001125fa(archived_files);\n              current_char = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(current_char,error_message,error_message);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remaining_size == 0) {\n                chmod(*bfd_handle,permissions | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(bfd_handle);\n                bfd_handle = archived_files;\n                if (result == '\\0') {\n                  print_bfd_error_message_001126c0(archive_path,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (remaining_size < 0x2001) {\n                bytes_written = remaining_size;\n              }\n              bytes_read = bfd_bread(buffer,bytes_written,archived_files);\n              archived_file = archived_files;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,bytes_written,bfd_handle), archived_file = bfd_handle, bytes_written != bytes_read))\n              break;\n              remaining_size = remaining_size - bytes_written;\n            }\n            print_bfd_error_message_001126c0(0,archived_file,0,0);\n            free(buffer);\n          }\n          else {\n            error_message = get_formatted_string_001125fa(archived_files);\n            print_error_message_0011a110(error_message);\n          }\n        }\n      }\n      else {\n        print_bfd_error_message_001126c0(0,archived_files,0,0);\n      }\n      result = bfd_close_all_done(bfd_handle);\n      if (result == '\\0') {\n        print_bfd_error_message_001126c0(archive_path,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archive_path);\n      DAT_00127a20 = 1;\n    }\n    *bytes_remaining = 0;\n    buffer = (void *)xstrdup(*source_file_path);\n    if (DAT_00127a20 == 0) {\n      close_function = bfd_close;\n    }\n    else {\n      close_function = bfd_close_all_done;\n    }\n    result = (*close_function)(source_file_path);\n    if (result == '\\0') {\n      DAT_00127a20 = 1;\n      print_bfd_error_message_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*destination_file);\n    result = bfd_close(destination_file);\n    if (result == '\\0') {\n      DAT_00127a20 = 1;\n      print_bfd_error_message_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (temp_dir_info != (undefined8 *)0x0) {\n    if (temp_dir_info[2] == 0) {\n      rmdir((char *)temp_dir_info[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_dir_info[1]);\n    }\n    free((void *)temp_dir_info[1]);\n    tempdir_handle = (undefined8 *)*temp_dir_info;\n    free(temp_dir_info);\n    temp_dir_info = tempdir_handle;\n  }\n  rmdir(temp_dir_path);\n  free(temp_dir_path);\n  return;\n}\n\n",
            "current_name": "extract_and_copy_files_from_archive_00104ea2",
            "entrypoint": "0x00104ea2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_files_from_archive_00104ea2",
                "bVar17": "flag",
                "cVar1": "result",
                "iVar2": "int_var",
                "in_stack_00000030": "unknown_flag",
                "lVar12": "remaining_size",
                "lVar14": "bytes_written",
                "lVar5": "bytes_read",
                "param_10": "destination_file",
                "param_11": "open_mode",
                "param_18": "permissions",
                "param_19": "file_size",
                "param_7": "source_file_path",
                "param_8": "bytes_remaining",
                "param_9": "temp_dir_path",
                "pcVar1": "char_val",
                "pcVar10": "error_message",
                "pcVar13": "close_function",
                "pcVar15": "path_segment",
                "pcVar3": "current_file_path",
                "pcVar7": "current_char",
                "piVar9": "errno_location",
                "ppcVar3": "archived_file",
                "ppcVar6": "bfd_handle",
                "psVar16": "file_stat",
                "puVar8": "tempdir_handle",
                "pvVar4": "buffer",
                "uVar11": "error_message",
                "uVar8": "formatted_string",
                "unaff_EBX": "stat_error",
                "unaff_R12": "archive_path",
                "unaff_R13": "temp_dir_info",
                "unaff_R15": "archived_files",
                "unaff_RBP": "stat_buffer",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001052a2": {
            "additional_data": {
                "DAT_001279c9": {
                    "bool_var2": 1,
                    "flag_var2": 1,
                    "stat_error": 1
                },
                "DAT_001279cb": {
                    "bool_var1": 1,
                    "close_done": 1,
                    "flag_var1": 1
                },
                "DAT_00127a20": {
                    "bool_var3": 1,
                    "close_error": 1,
                    "flag_var3": 1
                },
                "FUN_001052a2": {
                    "copy_and_convert_archive": 1,
                    "copy_and_extract_archive": 2,
                    "copy_archive": 1,
                    "copy_archive_files": 2,
                    "extract_and_copy_archive": 7,
                    "extract_archive": 2,
                    "extract_archived_files": 1,
                    "extract_file_path": 1,
                    "extract_files_from_archive": 1,
                    "find_and_copy_files": 1,
                    "process_archive": 4,
                    "process_archive_member": 1,
                    "reverse_and_copy_archive": 1,
                    "reverse_archive_file": 1
                },
                "FUN_001125fa": {
                    "get_file_name": 1
                },
                "FUN_00119ed0": {
                    "print_error_message": 1
                },
                "FUN_0011a0e0": {
                    "get_temp_dir_size": 1
                },
                "FUN_0011a350": {
                    "store_file_info": 1
                },
                "__errno_location": {
                    "get_errno_location": 1
                },
                "__format": {
                    "copy_format": 2,
                    "err_msg_format": 3,
                    "error_format": 3,
                    "error_message_format": 5,
                    "error_msg_format": 2,
                    "format_str": 2,
                    "format_string": 11,
                    "format_var": 1,
                    "format_variable": 1
                },
                "bVar18": {
                    "b_var": 1,
                    "b_var18": 1,
                    "byte_flag": 1,
                    "byte_value": 3,
                    "byte_var": 4,
                    "byte_var18": 1,
                    "byte_variable": 1,
                    "false": 1,
                    "flag": 4,
                    "forward_slash_found": 1,
                    "is_done": 1,
                    "loop_counter": 1,
                    "loop_flag": 1,
                    "stack_init": 1,
                    "stack_val": 1,
                    "temp": 1,
                    "temp_flag": 2,
                    "temp_var": 2,
                    "zero_byte": 3
                },
                "bfd_bread": {
                    "read_file": 1
                },
                "bfd_bwrite": {
                    "write_file": 1
                },
                "bfd_check_format": {
                    "check_file_format": 1
                },
                "bfd_close": {
                    "close_file": 1
                },
                "bfd_close_all_done": {
                    "close_file_and_cleanup": 1
                },
                "bfd_get_arch": {
                    "get_file_architecture": 1
                },
                "bfd_openr": {
                    "open_read_mode": 1
                },
                "bfd_openr_next_archived_file": {
                    "open_next_archived_file": 1
                },
                "bfd_openw": {
                    "open_write_mode": 1
                },
                "bfd_seek": {
                    "move_file_pointer": 1
                },
                "cVar1": {
                    "ch": 2,
                    "char_var": 4,
                    "char_var1": 1,
                    "char_variable": 1,
                    "character": 1,
                    "check_result": 1,
                    "current_char": 1,
                    "flag": 1,
                    "format": 2,
                    "format_check": 9,
                    "format_checker": 1,
                    "format_is_valid": 1,
                    "format_valid": 5,
                    "is_valid_char": 1
                },
                "chmod": {
                    "change_file_permissions": 1
                },
                "concat": {
                    "concatenate_paths": 1
                },
                "dcgettext": {
                    "get_translation": 1
                },
                "free": {
                    "free_memory": 1
                },
                "fun_0011a110": {
                    "error_handling_function": 1
                },
                "iVar2": {
                    "arch": 3,
                    "arch_indicator": 1,
                    "arch_type": 10,
                    "architecture": 3,
                    "count": 1,
                    "format": 1,
                    "index": 2,
                    "int_var": 2,
                    "int_var1": 2,
                    "int_var2": 1,
                    "int_variable1": 1,
                    "integer1": 1,
                    "result": 3
                },
                "iVar3": {
                    "int_var2": 2,
                    "int_var3": 1,
                    "int_variable2": 1,
                    "integer2": 1,
                    "result": 2,
                    "stat_error": 5,
                    "stat_result": 19
                },
                "in_RAX": {
                    "archive_dir_len": 1,
                    "archive_handle": 1,
                    "archive_index": 1,
                    "archive_ptr": 3,
                    "archive_size": 1,
                    "base_address": 1,
                    "base_path": 1,
                    "file_addr": 1,
                    "file_descriptor": 4,
                    "file_idx": 1,
                    "file_path": 1,
                    "file_path_ptr": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "in_rax": 2,
                    "input_path": 1,
                    "input_path_len": 1,
                    "input_rax": 1,
                    "long1": 1,
                    "long_var2": 1,
                    "long_variable2": 1,
                    "pathname": 1,
                    "rax_var": 1,
                    "temp_value": 1
                },
                "in_stack_00000008": {
                    "archive_file_name": 1,
                    "archive_path_stack": 1,
                    "extracted_file_ptr": 1,
                    "file_path_pointer": 1,
                    "file_path_ptr_stack": 1,
                    "in_stack_var8": 1,
                    "in_stack_variable1": 1,
                    "input_file_name": 1,
                    "input_files": 1,
                    "out_ptr": 1,
                    "output_file": 3,
                    "output_path": 1,
                    "param4": 1,
                    "param_stack1": 2,
                    "param_stack8": 1,
                    "param_stack_ptr": 1,
                    "ptr1": 1,
                    "source_file": 1,
                    "source_path": 2,
                    "src_path": 1,
                    "stack_arg1": 1,
                    "stack_var1": 2,
                    "temp_dir_path": 1,
                    "unaff_r15_8": 1,
                    "undefined8_ptr4": 1
                },
                "in_stack_00000010": {
                    "arch_file_size_ptr": 1,
                    "archive_file_size_pointer": 1,
                    "archive_files_ptr": 1,
                    "file_pointer": 2,
                    "file_ptr": 2,
                    "file_size_ptr": 3,
                    "file_size_ptr_stack": 1,
                    "file_size_stack": 1,
                    "file_stack_ptr": 1,
                    "in_stack_var10": 1,
                    "in_stack_variable2": 1,
                    "input_file_descriptor": 1,
                    "long_ptr": 2,
                    "opening_file": 1,
                    "out_file_ptr": 1,
                    "output_file_ptr": 1,
                    "p_file_descriptor": 1,
                    "param_stack10": 1,
                    "param_stack2": 2,
                    "ptr2": 1,
                    "stack_arg2": 1,
                    "stack_var2": 2,
                    "stat_buffer_addr": 1
                },
                "in_stack_00000018": {
                    "char_ptr": 1,
                    "char_ptr3": 1,
                    "dir": 1,
                    "directory_path": 1,
                    "in_stack_var18": 1,
                    "in_stack_variable3": 1,
                    "param_stack18": 1,
                    "param_stack3": 1,
                    "stack_arg3": 1,
                    "stack_var3": 2,
                    "temp_dir": 2,
                    "temp_dir_name": 4,
                    "temp_dir_path": 9,
                    "temp_dir_ptr": 1,
                    "temp_directory": 1,
                    "temp_path_ptr_stack": 1,
                    "tempdir_path": 1
                },
                "in_stack_00000020": {
                    "archive_file": 3,
                    "archive_file_path": 1,
                    "archive_file_path_ptr": 1,
                    "archive_file_ptr": 1,
                    "archive_filename": 1,
                    "archive_ptr_stack": 1,
                    "archived_file_path": 1,
                    "extracted_path_stack": 1,
                    "file2_ptr": 1,
                    "in_stack_var20": 1,
                    "in_stack_variable4": 1,
                    "input_file": 1,
                    "next_archive_node": 1,
                    "output_file": 1,
                    "output_file_descriptor": 1,
                    "output_file_name": 1,
                    "output_path_ptr": 1,
                    "param_stack20": 1,
                    "param_stack3": 1,
                    "param_stack4": 1,
                    "ptr3": 1,
                    "source_file_handle": 1,
                    "stack_arg4": 1,
                    "stack_var4": 2,
                    "temp_file_path": 1,
                    "undefined8_ptr5": 1,
                    "undefined_var6": 1
                },
                "in_stack_00000028": {
                    "access_mode": 1,
                    "additional_param": 1,
                    "archive_path": 1,
                    "buff_size": 1,
                    "flags": 1,
                    "format": 2,
                    "format_options": 2,
                    "in_stack_var28": 1,
                    "in_stack_variable5": 1,
                    "open_flag": 1,
                    "open_flags": 2,
                    "open_mode": 3,
                    "output_format": 2,
                    "output_path_format": 1,
                    "param_stack28": 1,
                    "param_stack5": 1,
                    "stack_arg5": 1,
                    "stack_var5": 2,
                    "target_path": 1,
                    "undefined8_4": 1,
                    "undefined_var7": 1,
                    "write_mode": 2
                },
                "in_stack_00000030": {
                    "archive_found": 1,
                    "bool_flag": 1,
                    "close_all_files": 1,
                    "close_done": 1,
                    "custom_flag": 1,
                    "flag": 3,
                    "flag2": 1,
                    "format_flag": 1,
                    "full_path_flag": 1,
                    "in_stack_var30": 1,
                    "in_stack_variable6": 1,
                    "internal_stat_error": 1,
                    "is_format_set": 1,
                    "is_temp_dir": 1,
                    "is_writable": 1,
                    "is_write_mode": 1,
                    "output_unknown": 1,
                    "param_stack30": 1,
                    "param_stack6": 1,
                    "should_translate_path": 1,
                    "stack_arg6": 1,
                    "stack_var6": 2,
                    "target_path_flag": 1,
                    "undefined8_5": 1,
                    "undefined_var8": 1,
                    "unknown_format": 1,
                    "use_options": 1
                },
                "in_stack_000000f8": {
                    "chmod_flag": 1,
                    "file_permission": 1,
                    "file_permissions": 7,
                    "in_stack_var_f8": 1,
                    "in_stack_variable7": 1,
                    "mode": 1,
                    "permission": 6,
                    "permission_bitmask": 1,
                    "permission_flags": 3,
                    "permissions": 3,
                    "stack_arg7": 1,
                    "stack_var7": 2,
                    "uint1": 1,
                    "uint_var1": 1
                },
                "in_stack_00000110": {
                    "archive_file_count": 2,
                    "archive_size": 2,
                    "file_count": 6,
                    "file_num": 1,
                    "file_size_limit": 2,
                    "in_stack_var110": 1,
                    "in_stack_variable8": 1,
                    "long3": 1,
                    "long_var5": 1,
                    "negative_size": 1,
                    "num_files": 1,
                    "stack_arg8": 1,
                    "stack_var8": 2,
                    "stat_result": 1,
                    "tempdir_size": 1,
                    "total_file_size": 3,
                    "total_size": 3
                },
                "lVar12": {
                    "arch_file_size": 1,
                    "archive_size": 1,
                    "file_size": 24,
                    "long2": 1,
                    "long_var12": 1,
                    "long_var2": 1,
                    "long_var3": 1,
                    "long_variable3": 1
                },
                "lVar15": {
                    "bytes_left": 1,
                    "bytes_read": 3,
                    "bytes_remaining": 8,
                    "bytes_to_read": 1,
                    "bytes_to_write": 1,
                    "bytes_written": 1,
                    "chunk_size": 4,
                    "copy_size": 3,
                    "length": 1,
                    "long3": 1,
                    "long_var15": 1,
                    "long_var3": 1,
                    "long_var4": 1,
                    "long_variable4": 1,
                    "remaining_size": 3
                },
                "lVar5": {
                    "bread_result": 10,
                    "bread_size": 1,
                    "buffer_size": 2,
                    "bytes_read": 6,
                    "length": 1,
                    "long1": 1,
                    "long_var1": 2,
                    "long_var5": 1,
                    "long_variable1": 1,
                    "read_bytes": 1,
                    "read_size": 5
                },
                "param_1": {
                    "arg1": 1,
                    "param1": 20,
                    "param_1": 8,
                    "parameter1": 1,
                    "undefined_param_1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "param2": 20,
                    "param_2": 8,
                    "parameter2": 1,
                    "undefined_param_2": 1
                },
                "param_3": {
                    "archive_path": 4,
                    "arg3": 1,
                    "file_path": 2,
                    "filename": 1,
                    "input_path": 2,
                    "param3": 12,
                    "param_3": 1,
                    "parameter3": 1,
                    "path": 4,
                    "pathname": 3
                },
                "pcVar10": {
                    "char_pointer_variable1": 1,
                    "char_ptr1": 1,
                    "curr_char": 1,
                    "current_char": 13,
                    "current_char_ptr": 1,
                    "current_character": 1,
                    "current_path": 3,
                    "file_path": 3,
                    "path_iterator": 1,
                    "path_ptr": 4,
                    "pointer_char_var1": 1,
                    "pointer_char_var10": 1
                },
                "pcVar14": {
                    "bfd_close_func": 4,
                    "close_fn": 1,
                    "close_func": 12,
                    "close_function": 8,
                    "code_pointer_variable": 1,
                    "code_ptr": 1,
                    "pointer_code_var": 1,
                    "pointer_code_var14": 1,
                    "pointer_to_code": 1
                },
                "pcVar16": {
                    "char_pointer_variable2": 1,
                    "char_ptr2": 1,
                    "curr_char": 1,
                    "curr_char2": 1,
                    "current_char": 3,
                    "current_char_ptr2": 1,
                    "current_file": 1,
                    "current_filename": 2,
                    "current_path": 1,
                    "current_path_char": 1,
                    "next_char": 2,
                    "next_character": 1,
                    "next_path": 1,
                    "next_segment": 1,
                    "path_component": 1,
                    "path_ptr_inner": 1,
                    "path_ptr_temp": 1,
                    "path_start": 1,
                    "pointer": 1,
                    "pointer_char_var16": 1,
                    "pointer_char_var2": 1,
                    "temp_char": 3,
                    "temp_path": 2,
                    "temp_ptr": 1
                },
                "piVar8": {
                    "errno_loc": 6,
                    "errno_loc_ptr": 1,
                    "errno_location": 4,
                    "errno_location_result": 2,
                    "errno_ptr": 8,
                    "error_code_ptr": 1,
                    "error_num": 1,
                    "error_number": 2,
                    "error_ptr": 1,
                    "int_pointer_variable": 1,
                    "int_ptr": 1,
                    "pointer_int_var": 1,
                    "pointer_int_var8": 1,
                    "pointer_to_integer": 1
                },
                "ppcVar11": {
                    "arch_file": 1,
                    "arch_next_file": 1,
                    "arch_ptr": 1,
                    "archive": 2,
                    "archive_files": 2,
                    "archive_ptr": 1,
                    "archived_file": 4,
                    "archived_file_ptr": 2,
                    "archived_files": 1,
                    "char_pointer_pointer_variable2": 1,
                    "char_ptr_ptr2": 1,
                    "current_file": 1,
                    "file_info_ptr": 1,
                    "file_ptr": 2,
                    "next_archived_file": 1,
                    "next_file": 1,
                    "pointer_pointer_char_var1": 1,
                    "pointer_pointer_char_var11": 1,
                    "pointer_to_pointer_char2": 1,
                    "ppc_var": 1,
                    "ppc_var11": 2,
                    "read_ptr": 1,
                    "temp_archived_files": 1
                },
                "ppcVar4": {
                    "arch_error": 1,
                    "arch_file": 1,
                    "arch_file_pointer": 1,
                    "arch_ptr": 1,
                    "archive_file": 1,
                    "archive_handler": 1,
                    "archive_ptr": 1,
                    "archived_file": 1,
                    "archived_files": 5,
                    "archived_files_ptr": 1,
                    "char_pointer_pointer_variable": 1,
                    "char_ptr_ptr": 1,
                    "file_info": 1,
                    "file_names": 1,
                    "file_path": 1,
                    "file_paths": 1,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "path_ptr": 1,
                    "pointer_pointer_char_var": 1,
                    "pointer_pointer_char_var4": 1,
                    "pointer_to_pointer_char": 1,
                    "stat_cmd": 1,
                    "stat_func": 1,
                    "temp": 1,
                    "temp_dir": 1
                },
                "printf": {
                    "print_to_console": 1
                },
                "psVar17": {
                    "file_info": 1,
                    "file_stat": 7,
                    "pointer_stat_var": 1,
                    "pointer_stat_var17": 1,
                    "pointer_to_stat": 1,
                    "stat_buffer": 2,
                    "stat_data": 1,
                    "stat_file": 1,
                    "stat_ptr": 2,
                    "stat_struct": 10,
                    "stat_struct_pointer": 1,
                    "stat_structure": 2,
                    "stat_temp": 1
                },
                "puVar7": {
                    "malloc_ptr": 1,
                    "parent_dir": 1,
                    "pointer_u_var7": 1,
                    "pointer_undefined_var": 1,
                    "prev_data": 1,
                    "temp_dir": 12,
                    "temp_dir_data": 1,
                    "temp_dir_info": 2,
                    "temp_dir_path": 1,
                    "temp_dir_ptr": 3,
                    "temp_ptr": 2,
                    "tempdir": 1,
                    "tmp_ptr": 1,
                    "undefined8_ptr": 1,
                    "undefined_pointer_variable": 1,
                    "undefined_var2": 1
                },
                "pvVar13": {
                    "buffer": 17,
                    "buffer_ptr": 6,
                    "memory_block": 1,
                    "memory_ptr": 1,
                    "pointer_to_void": 1,
                    "pointer_void_var": 1,
                    "pointer_void_var13": 1,
                    "void_pointer_variable": 1,
                    "void_ptr": 1
                },
                "rmdir": {
                    "delete_directory": 1
                },
                "stack0x00000050": {
                    "stat_data": 1
                },
                "stack0x000000e0": {
                    "closed_file_data": 1
                },
                "stat": {
                    "get_file_info": 1
                },
                "strerror": {
                    "get_error_message": 1
                },
                "uVar6": {
                    "dcgettext_ret": 1,
                    "errmsg": 1,
                    "error_message": 3,
                    "error_msg": 1,
                    "error_string": 1,
                    "format": 1,
                    "format_error": 1,
                    "format_str": 1,
                    "format_string": 3,
                    "localized_string": 1,
                    "msg": 1,
                    "str_error": 1,
                    "temp": 1,
                    "temp_dir_err_msg": 1,
                    "temp_dir_error": 2,
                    "temp_dir_error_msg": 1,
                    "temp_dir_path": 1,
                    "tempdir_error": 1,
                    "translated_msg": 1,
                    "translated_path": 1,
                    "u_var6": 1,
                    "undefined8_1": 1,
                    "undefined_var1": 2,
                    "undefined_variable1": 1,
                    "unknown": 1
                },
                "uVar9": {
                    "dcgettext_ret2": 1,
                    "err_message": 1,
                    "err_msg": 1,
                    "errmsg": 1,
                    "error_message": 7,
                    "error_message2": 1,
                    "error_msg": 8,
                    "error_string": 5,
                    "gettext_result": 1,
                    "u_var9": 1,
                    "undefined8_2": 1,
                    "undefined_var2": 1,
                    "undefined_var3": 1,
                    "undefined_variable2": 1
                },
                "unaff_R14": {
                    "alloc_ptr": 1,
                    "allocated_mem": 1,
                    "archive_data": 1,
                    "archive_info": 1,
                    "archive_list": 1,
                    "archive_path_list": 1,
                    "copy_list": 1,
                    "dir_ptr": 1,
                    "file_list": 1,
                    "node_ptr": 1,
                    "prev_ptr": 1,
                    "temp_data": 1,
                    "temp_dir": 1,
                    "temp_dir_list": 2,
                    "temp_dir_node": 1,
                    "temp_dir_stack": 1,
                    "temp_dirs": 1,
                    "temp_file": 1,
                    "temp_file_info": 1,
                    "temp_file_list": 2,
                    "temp_file_ptr": 1,
                    "temp_files": 2,
                    "temporaries": 1,
                    "unaffected_r14": 1,
                    "unaffected_r14_var": 1,
                    "undefined8_ptr2": 1,
                    "undefined_pointer_variable2": 1,
                    "undefined_var4": 1
                },
                "unaff_R15": {
                    "archive": 3,
                    "archive_file": 2,
                    "archive_file_list": 1,
                    "archive_files": 1,
                    "archive_info": 1,
                    "archive_list": 1,
                    "archive_node": 1,
                    "archive_ptr": 3,
                    "archive_ptrs": 1,
                    "archive_stack": 1,
                    "archived_file": 1,
                    "args_ptr": 1,
                    "char_pointer_pointer_variable3": 1,
                    "char_ptr_ptr3": 1,
                    "extracted_files": 1,
                    "file_handle": 1,
                    "file_list_ptr": 1,
                    "format_data": 1,
                    "input_file": 2,
                    "input_file_list": 1,
                    "node": 1,
                    "source_file": 1,
                    "unaffected_r15": 1,
                    "unaffected_r15_var": 1,
                    "undefined8_ptr3": 1
                },
                "unaff_retaddr": {
                    "ret_addr": 2,
                    "return_addr": 6,
                    "return_address": 18,
                    "unaffected_ret_addr": 1,
                    "unaffected_retaddr_var": 1,
                    "undefined8_3": 1,
                    "undefined_return_address": 1,
                    "undefined_var5": 1
                },
                "unlink": {
                    "delete_file": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid copy_and_extract_archive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char format_check;\n  int arch_type;\n  int stat_result;\n  char **archived_files;\n  long bread_result;\n  undefined8 format_string;\n  char *format_string;\n  undefined8 *temp_dir;\n  int *errno_ptr;\n  undefined8 error_msg;\n  long file_descriptor;\n  char *current_char;\n  char **archived_file;\n  long file_size;\n  void *buffer;\n  code *close_func;\n  long bytes_remaining;\n  char *current_char;\n  get_file_info *stat_struct;\n  undefined8 *temp_file_list;\n  char **archive;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *output_file;\n  long *file_size_ptr;\n  char *temp_dir_path;\n  undefined8 *archive_file;\n  undefined8 open_mode;\n  undefined8 flag;\n  uint file_permissions;\n  long file_count;\n  \n  flag = 0;\n  current_char = (char *)(file_descriptor + 1);\n  do {\n    if (*current_char == '/') {\n      copy_and_extract_archive_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concatenate_paths(temp_dir_path,&DAT_0011b47d);\n      stat_result = get_file_info(current_char,(get_file_info *)&stat_data);\n      temp_dir = temp_file_list;\n      if (-1 < stat_result) {\n        file_size = create_temp_directory_path_0011a0e0(current_char);\n        free_memory(current_char);\n        if (file_size == 0) {\n          errno_ptr = __errno_location();\n          current_char = strerror(*errno_ptr);\n          error_msg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_with_params_00119ed0(error_msg,current_char);\n          goto LAB_00104e93;\n        }\n        temp_dir = (undefined8 *)xmalloc(0x18);\n        current_char = *archive;\n        *temp_dir = temp_file_list;\n        temp_dir[2] = 0;\n        temp_dir[1] = file_size;\n        current_char = (char *)concatenate_paths(file_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (DAT_001279cb != '\\0') {\n        stat_struct = (get_file_info *)&stat_data;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_struct->st_dev = 0;\n          stat_struct = (get_file_info *)((long)stat_struct + (ulong)flag * -8 + 4);\n        }\n        archived_file = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archived_file = archive;\n        }\n        stat_result = (**(code **)(archived_file[1] + 0x1e8))(archive,(get_file_info *)&stat_data);\n        if (stat_result != 0) {\n          current_char = *archive;\n          error_msg = dcgettext(0,\"internal get_file_info error on %s\",5);\n          print_error_message_with_params_00119ed0(error_msg,current_char);\n        }\n      }\n      temp_file_list = (undefined8 *)xmalloc(0x18);\n      temp_file_list[1] = current_char;\n      *temp_file_list = temp_dir;\n      temp_file_list[2] = 0;\n      format_check = bfd_check_format(archive,1);\n      if (format_check == '\\0') {\n        error_msg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_bfd_error_message_001126c0(0,archive,0,error_msg);\n        archived_file = (char **)bfd_openw(current_char,open_mode);\n        if (archived_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archived_files = (char **)archive[0x1d];\n        if ((char **)archive[0x1d] == (char **)0x0) {\n          archived_files = archive;\n        }\n        arch_type = (**(code **)(archived_files[1] + 0x1e8))(archive,&closed_file_data);\n        file_size = file_count;\n        if (arch_type == 0) {\n          if (file_count < 0) {\n            error_msg = get_formatted_string_001125fa(archive);\n            format_string = dcgettext(0,\"get_file_info returns negative size for `%s\\'\",5);\n            print_error_message_with_params_00119ed0(format_string,error_msg);\n          }\n          else {\n            arch_type = bfd_seek(archive,0,0);\n            if (arch_type == 0) {\n              if (DAT_001279c9 != '\\0') {\n                current_char = *archived_file;\n                error_msg = get_formatted_string_001125fa(archive);\n                format_string = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(format_string,error_msg,current_char);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; file_size != 0; file_size = file_size - bytes_remaining) {\n                bytes_remaining = 0x2000;\n                if (file_size < 0x2001) {\n                  bytes_remaining = file_size;\n                }\n                bread_result = bfd_bread(buffer,bytes_remaining,archive);\n                archived_files = archive;\n                if ((bytes_remaining != bread_result) ||\n                   (bread_result = bfd_bwrite(buffer,bytes_remaining,archived_file), archived_files = archived_file, bytes_remaining != bread_result\n                   )) {\n                  print_bfd_error_message_001126c0(0,archived_files,0,0);\n                  free_memory(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*archived_file,file_permissions | 0x100);\n              free_memory(buffer);\n              format_check = bfd_close_all_done(archived_file);\n              if (format_check == '\\0') {\n                print_bfd_error_message_001126c0(current_char,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_msg = get_formatted_string_001125fa(archive);\n            print_error_message_0011a110(error_msg);\n          }\n        }\n        else {\n          print_bfd_error_message_001126c0(0,archive,0,0);\n        }\nLAB_00104f00:\n        format_check = bfd_close_all_done(archived_file);\n        if (format_check == '\\0') {\n          print_bfd_error_message_001126c0(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_char);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (flag._7_1_ == '\\0') {\n          archived_file = (char **)bfd_openw(current_char,*(undefined8 *)archive[1]);\n        }\n        else {\n          archived_file = (char **)bfd_openw(current_char,open_mode);\n        }\n        if (archived_file == (char **)0x0) {\nLAB_00104e80:\n          print_bfd_error_message_001126c0(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_check = FUNC_00114e50(archive,archived_file,return_address);\n        if (format_check == '\\0') {\n          arch_type = bfd_get_arch(archive);\n          if (arch_type == 0) goto LAB_00104d75;\n          format_check = bfd_close_all_done(archived_file);\n          if (format_check == '\\0') {\n            print_bfd_error_message_001126c0(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_check = bfd_close(archived_file);\n        if (format_check == '\\0') {\n          print_bfd_error_message_001126c0(current_char,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (stat_result == 0)) {\n          set_file_modification_time_0011a350(current_char,(get_file_info *)&stat_data);\n        }\n        file_size = bfd_openr(current_char,open_mode);\n        temp_file_list[2] = file_size;\n        *file_size_ptr = file_size;\n        file_size_ptr = (long *)(file_size + 0xf0);\n        archived_file = (char **)bfd_openr_next_archived_file(archive_file,archive);\n        bfd_close(archive);\n        archive = archived_file;\n      }\n      if ((DAT_00127a20 != 0) || (archive == (char **)0x0)) {\n        *file_size_ptr = 0;\n        buffer = (void *)xstrdup(*output_file);\n        if (DAT_00127a20 == 0) {\n          close_func = bfd_close;\n        }\n        else {\n          close_func = bfd_close_all_done;\n        }\n        format_check = (*close_func)(output_file);\n        if (format_check == '\\0') {\n          DAT_00127a20 = 1;\n          print_bfd_error_message_001126c0(buffer,0,0,0);\n        }\n        free_memory(buffer);\n        buffer = (void *)xstrdup(*archive_file);\n        format_check = bfd_close(archive_file);\n        if (format_check == '\\0') {\n          DAT_00127a20 = 1;\n          print_bfd_error_message_001126c0(buffer,0,0,0);\n        }\n        free_memory(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive;\n      param3 = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    current_char = current_char;\n    if ((*current_char == '.') && (current_char = current_char + 1, current_char[1] == '.')) {\n      current_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_msg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_with_params_00119ed0(error_msg,param3);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (temp_file_list != (undefined8 *)0x0) {\n          if (temp_file_list[2] == 0) {\n            rmdir((char *)temp_file_list[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)temp_file_list[1]);\n          }\n          free_memory((void *)temp_file_list[1]);\n          temp_dir = (undefined8 *)*temp_file_list;\n          free_memory(temp_file_list);\n          temp_file_list = temp_dir;\n        }\n        rmdir(temp_dir_path);\n        free_memory(temp_dir_path);\n        return;\n      }\n    }\n    for (; (current_char = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "current_name": "copy_and_extract_archive_001052a2",
            "entrypoint": "0x001052a2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001052a2": "copy_and_extract_archive_001052a2",
                "__errno_location": "get_errno_location",
                "__format": "format_string",
                "bVar18": "flag",
                "bfd_bread": "read_file",
                "bfd_bwrite": "write_file",
                "bfd_check_format": "check_file_format",
                "bfd_close": "close_file",
                "bfd_close_all_done": "close_file_and_cleanup",
                "bfd_get_arch": "get_file_architecture",
                "bfd_openr": "open_read_mode",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "bfd_openw": "open_write_mode",
                "bfd_seek": "move_file_pointer",
                "cVar1": "format_check",
                "chmod": "change_file_permissions",
                "concat": "concatenate_paths",
                "dcgettext": "get_translation",
                "free": "free_memory",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "in_RAX": "file_descriptor",
                "in_stack_00000008": "output_file",
                "in_stack_00000010": "file_size_ptr",
                "in_stack_00000018": "temp_dir_path",
                "in_stack_00000020": "archive_file",
                "in_stack_00000028": "open_mode",
                "in_stack_00000030": "flag",
                "in_stack_000000f8": "file_permissions",
                "in_stack_00000110": "file_count",
                "lVar12": "file_size",
                "lVar15": "bytes_remaining",
                "lVar5": "bread_result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar10": "current_char",
                "pcVar14": "close_func",
                "pcVar16": "current_char",
                "piVar8": "errno_ptr",
                "ppcVar11": "archived_file",
                "ppcVar4": "archived_files",
                "printf": "print_to_console",
                "psVar17": "stat_struct",
                "puVar7": "temp_dir",
                "pvVar13": "buffer",
                "rmdir": "delete_directory",
                "stack0x00000050": "stat_data",
                "stack0x000000e0": "closed_file_data",
                "stat": "get_file_info",
                "strerror": "get_error_message",
                "uVar6": "format_string",
                "uVar9": "error_msg",
                "unaff_R14": "temp_file_list",
                "unaff_R15": "archive",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053b5": {
            "additional_data": {
                "FUN_001053b5": {
                    "print_bad_format_error_message": 3,
                    "print_error_and_exit": 2,
                    "print_error_message_and_exit": 25,
                    "print_formatted_error_message": 1
                },
                "dcgettext": {
                    "get_error_message": 4,
                    "get_localized_error": 1,
                    "get_localized_error_message": 2,
                    "get_localized_message": 4,
                    "get_translated_error_message": 2,
                    "get_translated_message": 1,
                    "get_translated_string": 2
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_message_and_exit": 8
                },
                "uVar1": {
                    "error_format": 2,
                    "error_format_message": 1,
                    "error_message": 22,
                    "error_msg": 1,
                    "error_string": 4,
                    "formatted_error_message": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114c80"
            ],
            "code": "\nvoid print_error_message_and_exit_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_message_and_exit_001053b5(error_message);\n}\n\n",
            "current_name": "print_error_message_and_exit_001053b5",
            "entrypoint": "0x001053b5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053b5": "print_error_message_and_exit_001053b5",
                "dcgettext": "get_localized_message",
                "print_error_message_and_exit_00119dd0": "print_error_message_and_exit",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001053d5": {
            "additional_data": {
                "FUN_001053d5": {
                    "close_and_print_error_message": 1,
                    "print_and_close": 7,
                    "print_and_close_bfd": 1,
                    "print_and_close_file": 1,
                    "print_error_and_close": 14,
                    "print_error_and_close_bfd": 1,
                    "print_error_and_close_file": 1,
                    "print_error_and_return_status": 1,
                    "print_error_message": 3,
                    "update_and_close_bfd": 1
                },
                "bfd_close_all_done": {
                    "close_all_file_handles": 1,
                    "close_file": 1,
                    "close_file_handler": 1
                },
                "print_error_message_0011a110": {
                    "print_error_message": 3
                },
                "unaff_R12": {
                    "error_address": 1,
                    "error_code": 1,
                    "error_message": 1,
                    "error_message_address": 1,
                    "error_message_pointer": 1,
                    "error_offset": 1,
                    "error_pointer": 1,
                    "error_ptr": 5,
                    "file_address": 1,
                    "file_descriptor": 4,
                    "file_handle": 3,
                    "file_handler": 1,
                    "file_pointer": 4,
                    "input_address": 1,
                    "message_address": 1,
                    "offset": 1,
                    "pointer_to_error": 1,
                    "pointer_to_error_code": 1,
                    "saved_register12": 1
                },
                "unaff_R14": {
                    "error_message": 5,
                    "error_message_address": 1,
                    "error_message_pointer": 3,
                    "error_message_ptr": 5,
                    "file_descriptor_pointer": 1,
                    "message_address": 1,
                    "message_pointer": 3,
                    "message_ptr": 7,
                    "pointer": 1,
                    "pointer_to_error": 1,
                    "pointer_to_error_message": 2,
                    "pointer_to_message": 1
                }
            },
            "called": [
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nundefined4 close_and_print_error_message_001053d5(void)\n\n{\n  long error_ptr;\n  undefined8 *message_ptr;\n  \n  print_error_message(*message_ptr);\n  *(undefined4 *)(error_ptr + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(error_ptr + 8);\n}\n\n",
            "current_name": "close_and_print_error_message_001053d5",
            "entrypoint": "0x001053d5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001053d5": "close_and_print_error_message_001053d5",
                "bfd_close_all_done": "close_all_file_handles",
                "print_error_message_0011a110": "print_error_message",
                "unaff_R12": "error_ptr",
                "unaff_R14": "message_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010540e": {
            "additional_data": {
                "FUN_0010540e": {
                    "execute_callback": 1,
                    "execute_function": 22,
                    "execute_function_and_check": 1,
                    "execute_function_on_condition": 1,
                    "execute_function_with_condition": 2,
                    "execute_function_with_flag": 1,
                    "execute_function_with_params": 1,
                    "process_function": 1,
                    "process_parameter": 1
                },
                "byte": {
                    "byte_value": 1
                },
                "code": {
                    "function_pointer": 1
                },
                "in_RAX": {
                    "address": 2,
                    "local_var1": 1,
                    "local_variable1": 1,
                    "rax": 3,
                    "result": 2,
                    "return_value": 2,
                    "temp": 3,
                    "temp1": 1,
                    "temp_rax": 2,
                    "temp_var": 2,
                    "temporary_variable": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument1": 2,
                    "callback_argument": 1,
                    "context": 1,
                    "function_param": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input1": 2,
                    "input_parameter": 1,
                    "param": 1,
                    "param1": 12,
                    "param_1": 4,
                    "parameter1": 1,
                    "result": 1,
                    "undefined_param": 1
                },
                "param_2": {
                    "arg2": 1,
                    "argument2": 2,
                    "callback_data": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "function_data": 1,
                    "input1": 1,
                    "input2": 2,
                    "memory_address": 2,
                    "object": 1,
                    "param2": 12,
                    "param_2": 4,
                    "parameter2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "callback_flag": 1,
                    "condition": 6,
                    "condition_code": 1,
                    "flag": 2,
                    "input2": 1,
                    "input3": 2,
                    "param3": 12,
                    "param_3": 4,
                    "parameter3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00114d50"
            ],
            "code": "\nvoid execute_function_with_condition_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long temp;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte_value *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_pointer **)(*(long *)(temp + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "current_name": "execute_function_with_condition_0010540e",
            "entrypoint": "0x0010540e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010540e": "execute_function_with_condition_0010540e",
                "byte": "byte_value",
                "code": "function_pointer",
                "in_RAX": "temp",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010543c": {
            "additional_data": {
                "FUN_0010543c": {
                    "handle_open_error": 1,
                    "open_file_and_print_error_message": 1,
                    "print_and_exit_on_error": 1,
                    "print_error_and_exit": 14,
                    "print_error_message_and_exit": 11,
                    "print_open_error_and_exit": 1,
                    "print_open_error_message": 1,
                    "print_open_error_message_and_exit": 1
                },
                "pcVar3": {
                    "error_message": 21,
                    "error_message_ptr": 1,
                    "error_msg_ptr": 1,
                    "error_string": 6
                },
                "piVar2": {
                    "errno": 2,
                    "errno_location": 4,
                    "errno_pointer": 2,
                    "errno_ptr": 2,
                    "error_code": 2,
                    "error_code_ptr": 1,
                    "error_location": 9,
                    "error_num_ptr": 1,
                    "error_number": 1,
                    "error_number_pointer": 1,
                    "error_number_ptr": 1,
                    "error_pointer": 1,
                    "pointer_to_errno": 1
                },
                "uVar1": {
                    "address": 1,
                    "argument1": 3,
                    "argument_1": 1,
                    "file_address": 3,
                    "file_descriptor": 12,
                    "file_handle": 3,
                    "file_name": 1,
                    "file_path": 1,
                    "file_pointer": 2,
                    "input_param": 1,
                    "parameter1": 2,
                    "parameter_1": 1
                },
                "uVar4": {
                    "error_description": 2,
                    "error_format": 4,
                    "error_format_string": 1,
                    "error_message_format": 1,
                    "error_message_translation": 1,
                    "error_string": 1,
                    "formatted_string": 1,
                    "gettext_result": 1,
                    "localization_string": 1,
                    "localized_error_message": 4,
                    "localized_error_msg": 1,
                    "localized_error_string": 1,
                    "message_format": 1,
                    "message_template": 1,
                    "parameter2": 1,
                    "translated_error_message": 5,
                    "translated_message": 2,
                    "translated_string": 2
                },
                "unaff_RBP": {
                    "base_pointer": 13,
                    "error_message_address": 1,
                    "stack_base_address": 1,
                    "stack_base_pointer": 2,
                    "stack_frame_pointer": 1,
                    "stack_pointer": 1
                }
            },
            "called": [
                "__errno_location",
                "FUN_00119dd0",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00114d60"
            ],
            "code": "\nvoid print_open_error_message_and_exit_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *error_location;\n  char *error_message;\n  undefined8 translated_error_message;\n  long base_pointer;\n  \n  error_location = __errno_location();\n  error_message = strerror(*error_location);\n  file_descriptor = *(undefined8 *)(base_pointer + 0x10);\n  translated_error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(translated_error_message,file_descriptor,error_message);\n}\n\n",
            "current_name": "print_open_error_message_and_exit_0010543c",
            "entrypoint": "0x0010543c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010543c": "print_open_error_message_and_exit_0010543c",
                "pcVar3": "error_message",
                "piVar2": "error_location",
                "uVar1": "file_descriptor",
                "uVar4": "translated_error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001054af": {
            "additional_data": {
                "DAT_001278c8": {
                    "hash_table9": 1
                },
                "DAT_001278d0": {
                    "hash_table8": 1
                },
                "DAT_001279d0": {
                    "hash_table7": 1
                },
                "DAT_001279d8": {
                    "hash_table6": 1
                },
                "DAT_001279e0": {
                    "hash_table5": 1
                },
                "DAT_001279e8": {
                    "hash_table4": 1
                },
                "DAT_001279f0": {
                    "hash_table2": 1
                },
                "DAT_001279f8": {
                    "hash_table1": 1
                },
                "DAT_00127a08": {
                    "hash_table3": 1
                },
                "FUN_001054af": {
                    "cleanup": 1,
                    "cleanup_and_delete_hashtables": 1,
                    "cleanup_data": 1,
                    "cleanup_data_structures": 1,
                    "cleanup_function": 1,
                    "cleanup_hash_table": 16,
                    "cleanup_hashtable": 1,
                    "cleanup_hashtables": 1,
                    "delete_hash_table_entries": 3,
                    "delete_hash_tables": 1,
                    "delete_hashtable_entries": 3,
                    "delete_hashtables": 1
                },
                "in_RAX": {
                    "return_value": 5,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "tmp_var": 1,
                    "unused_var": 4,
                    "unused_variable": 1
                },
                "param_1": {
                    "data1": 1,
                    "data_structure_1": 1,
                    "file_handle": 1,
                    "first_parameter": 1,
                    "input_param1": 1,
                    "param": 1,
                    "param1": 1,
                    "unused_param": 7,
                    "unused_param1": 9,
                    "unused_param_1": 1,
                    "unused_parameter": 1,
                    "unused_parameter1": 4,
                    "unused_parameter_1": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data2": 1,
                    "data_structure_2": 1,
                    "input_param2": 1,
                    "other_param": 1,
                    "param2": 2,
                    "second_parameter": 1,
                    "unused_param": 6,
                    "unused_param2": 9,
                    "unused_param_2": 1,
                    "unused_parameter2": 4,
                    "unused_parameter_2": 2
                }
            },
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid cleanup_hash_table_001054af(undefined8 unused_param1,undefined8 unused_param2)\n\n{\n  undefined8 return_value;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unused_param2,return_value);\n  return;\n}\n\n",
            "current_name": "cleanup_hash_table_001054af",
            "entrypoint": "0x001054af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "in_RAX": "return_value",
                "param_1": "unused_param1",
                "param_2": "unused_param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010551d": {
            "additional_data": {
                "FUN_0010551d": {
                    "extract_and_merge_debug_info": 1,
                    "extract_debug_information": 1,
                    "improve_parse_gnu_build_attributes": 1,
                    "improved_parse_gnu_build_attributes": 1,
                    "merge_and_write_debug_info": 1,
                    "merge_notes_and_debug_info": 1,
                    "parse_and_dump_debug_sections": 1,
                    "parse_and_dump_sections": 2,
                    "parse_and_merge_debug_info": 1,
                    "parse_and_merge_debug_sections": 1,
                    "parse_and_process_binary": 1,
                    "parse_binary": 4,
                    "parse_binary_and_extract_debug_info": 1,
                    "parse_binary_file": 2,
                    "parse_binary_file_and_extract_notes": 1,
                    "parse_debug_info": 1,
                    "parse_debug_information": 1,
                    "parse_gnu_build_attributes": 2,
                    "parse_object_binary": 1,
                    "process_debug_information": 1
                },
                "FittingFunction": {
                    "parse_gnu_build_attributes": 1
                },
                "__ptr": {
                    "pointer": 1,
                    "pointer4": 1,
                    "ptr3": 1,
                    "section_contents": 2,
                    "section_data": 1
                },
                "__ptr_00": {
                    "pointer": 1,
                    "pointer6": 1,
                    "ptr4": 1,
                    "section_content": 1,
                    "section_contents2": 1
                },
                "__s": {
                    "char_array": 2,
                    "current_section_name": 1,
                    "debug_link_section_name": 1,
                    "error_message": 1,
                    "file_var": 1,
                    "filename": 1,
                    "section_name": 1,
                    "stab": 1,
                    "str": 2,
                    "string": 1,
                    "string1": 4,
                    "string_ptr": 1,
                    "string_value": 1,
                    "string_var": 3,
                    "string_var1": 1,
                    "symbol_name": 1,
                    "symbol_str": 1,
                    "variable1": 1
                },
                "__s_00": {
                    "file_pointer": 1,
                    "output_file": 1,
                    "section_dump_file": 1
                },
                "bStack0100": {
                    "byte_var100": 1
                },
                "bStack0101": {
                    "byte_var101": 1
                },
                "bStack256": {
                    "byte_var5": 1
                },
                "bVar2": {
                    "auxiliary_symbol_present": 1,
                    "byte_flag": 2,
                    "byte_val": 2,
                    "byte_value": 6,
                    "byte_var": 7,
                    "byte_var2": 3,
                    "flag": 1,
                    "is_section_empty": 1
                },
                "bVar38": {
                    "bool_val": 1,
                    "bool_value": 2,
                    "bool_var": 2,
                    "bool_var38": 1,
                    "flag": 1,
                    "flag2": 1
                },
                "bVar39": {
                    "byte_flag2": 1,
                    "byte_value2": 2,
                    "byte_var39": 1
                },
                "bi": {
                    "binary": 1
                },
                "cStack0000000000000148": {
                    "char_value4": 1
                },
                "cVar8": {
                    "char1": 2,
                    "char8": 1,
                    "char_flag": 1,
                    "char_val": 2,
                    "char_value": 5,
                    "char_var": 1,
                    "char_var1": 6,
                    "char_var8": 3,
                    "current_char": 1,
                    "result": 1,
                    "single_char": 1
                },
                "cVar9": {
                    "char2": 2,
                    "char9": 1,
                    "char_flag2": 1,
                    "char_value": 1,
                    "char_value2": 3,
                    "char_var": 2,
                    "char_var2": 7,
                    "char_var9": 3,
                    "result": 1,
                    "single_char2": 1,
                    "status": 1,
                    "success": 2
                },
                "iStack000000000000006c": {
                    "int_var3": 1
                },
                "iStack006c": {
                    "stabs_version": 1
                },
                "iVar11": {
                    "counter": 1,
                    "counter1": 1,
                    "index": 2,
                    "int_flag": 1,
                    "int_val": 1,
                    "int_value": 5,
                    "int_value1": 1,
                    "int_var": 1,
                    "int_var1": 5,
                    "int_var11": 3,
                    "integer11": 1,
                    "result": 1,
                    "temp_var2": 1
                },
                "iVar13": {
                    "counter2": 1
                },
                "iVar14": {
                    "comparison_result": 1,
                    "counter3": 1,
                    "index_val": 1,
                    "int_flag2": 1,
                    "int_value": 1,
                    "int_value2": 4,
                    "int_value3": 1,
                    "int_var": 1,
                    "int_var14": 3,
                    "int_var2": 6,
                    "integer14": 1,
                    "result": 1,
                    "string_comparison_result": 1,
                    "temp_var5": 1
                },
                "iVar31": {
                    "counter4": 1,
                    "int_flag3": 1,
                    "int_value3": 1,
                    "int_var3": 2,
                    "int_var31": 2,
                    "integer31": 1,
                    "note_count": 1,
                    "temp_var8": 1
                },
                "in_stack_00000008": {
                    "argument1": 1,
                    "long_value4": 1
                },
                "in_stack_00000010": {
                    "argument2": 1,
                    "count_value": 1,
                    "number_of_sections": 1
                },
                "in_stack_00000018": {
                    "argument3": 1,
                    "char1": 1,
                    "char_value3": 1,
                    "data_var1": 1,
                    "stack_var": 1
                },
                "in_stack_000000c0": {
                    "long_ptr": 1,
                    "pointe_array5": 1,
                    "stack_var_c0": 1
                },
                "in_stack_000000c8": {
                    "ulong_value6": 1
                },
                "in_stack_000000d0": {
                    "long_value": 1,
                    "note_offset": 1,
                    "stack_var_d0": 1
                },
                "in_stack_000000d8": {
                    "long_value2": 1,
                    "section_index": 1,
                    "stack_var_d8": 1
                },
                "in_stack_000000e0": {
                    "notes_pattern": 1,
                    "pointer4": 1,
                    "stack_var_e0": 1,
                    "string_table_ptr": 1,
                    "void_ptr": 1
                },
                "in_stack_000000f0": {
                    "long_value3": 1
                },
                "in_stack_000000f8": {
                    "ulong_value7": 1
                },
                "in_stack_00000110": {
                    "note_size": 1,
                    "size_array": 1,
                    "stack_var110": 1,
                    "ulong_value8": 1
                },
                "in_stack_00000118": {
                    "note_version": 1,
                    "ushort_value": 1
                },
                "in_stack_00000140": {
                    "char2": 1,
                    "char_ptr": 1,
                    "content_array": 1,
                    "string4": 2
                },
                "in_stack_00000150": {
                    "char_ptr2": 1,
                    "string5": 1
                },
                "in_stack_00000c18": {
                    "section": 1
                },
                "lStack0000000000000078": {
                    "debuglink_section_size": 1,
                    "long_var5": 1
                },
                "lStack0000000000000088": {
                    "long_var6": 1
                },
                "lStack00000000000000a0": {
                    "long_var8": 1
                },
                "lStack0078": {
                    "debug_link_string_length": 1
                },
                "lStack0088": {
                    "debug_link_section_size": 1
                },
                "lStack00a0": {
                    "section_content_length": 1
                },
                "lStack00e8": {
                    "section_list_head": 1
                },
                "lStack00f0": {
                    "section_list_tail": 1
                },
                "lStack100": {
                    "long_var6": 1
                },
                "lStack48": {
                    "long_var4": 1
                },
                "lStack88": {
                    "long_var5": 1
                },
                "lVar15": {
                    "long1": 1,
                    "long_var15": 1,
                    "section_array_element": 1
                },
                "lVar21": {
                    "address": 1,
                    "len_val": 1,
                    "long_val": 1,
                    "long_value": 1,
                    "long_value1": 2,
                    "long_var1": 5,
                    "long_var2": 1,
                    "long_var21": 3,
                    "merged_section_size": 1,
                    "note_name_length": 1,
                    "note_size": 1,
                    "temp_var9": 1,
                    "unaffl6": 1
                },
                "lVar25": {
                    "address2": 1,
                    "debug_link_section": 1,
                    "long_val2": 1,
                    "long_value": 1,
                    "long_value2": 1,
                    "long_value4": 1,
                    "long_var2": 1,
                    "long_var25": 1,
                    "long_var3": 2,
                    "long_var4": 1,
                    "merged_notes_start": 1,
                    "new_variable_name": 1,
                    "result_size": 1,
                    "result_var": 1,
                    "section_index": 1
                },
                "lVar27": {
                    "address4": 1,
                    "current_section": 1,
                    "debug_link_size": 1,
                    "iteration_variable": 1,
                    "long_value": 1,
                    "long_value3": 1,
                    "long_var2": 1,
                    "long_var27": 1,
                    "long_var3": 2,
                    "long_var4": 1,
                    "section_content_size": 1,
                    "section_size": 1
                },
                "lVar27_1": {
                    "section_header": 1
                },
                "lVar27_2": {
                    "section_header": 1
                },
                "lVar27_3": {
                    "section_header": 1
                },
                "lVar27_4": {
                    "section_header": 1
                },
                "lVar27_5": {
                    "section_header": 1
                },
                "lVar32": {
                    "long_val3": 1,
                    "prev_debug_entry": 1
                },
                "lVar36": {
                    "debug_link_section_size": 1,
                    "long_var": 1
                },
                "pcStack0000000000000038": {
                    "stack_array2": 1
                },
                "pcStack0000000000000090": {
                    "last_section_name": 1,
                    "string_var": 1
                },
                "pcStack0090": {
                    "debug_link_path": 1
                },
                "pcVar19": {
                    "aux_string": 1,
                    "char_pointer1": 1,
                    "char_ptr": 1,
                    "char_ptr1": 1,
                    "error_str": 1,
                    "note_name": 1,
                    "pointer4": 1,
                    "pointer5": 1,
                    "pointer_char_var19": 1,
                    "pointer_var19": 1,
                    "str_val": 1,
                    "str_var": 1,
                    "strerror_message": 1,
                    "string": 1,
                    "string2": 3,
                    "string_ptr": 1,
                    "string_var1": 1,
                    "string_var2": 1
                },
                "pcVar28": {
                    "char_pointer2": 1,
                    "current_string": 1,
                    "pointer10": 1,
                    "pointer5": 1,
                    "pointer_char_var28": 1,
                    "section_name": 1,
                    "stab_section_name": 1,
                    "str_val2": 1,
                    "str_var2": 1,
                    "string": 1,
                    "string3": 3,
                    "string_ptr2": 1,
                    "string_var2": 1,
                    "string_var3": 1
                },
                "pcVar33": {
                    "check_string": 1,
                    "error_message": 1,
                    "error_msg": 1,
                    "pointer13": 1,
                    "pointer6": 1,
                    "section_name": 1
                },
                "pcVar34": {
                    "attrib_ptr": 1
                },
                "pcVar4": {
                    "code_pointer_var4": 1,
                    "code_ptr": 1,
                    "func_ptr": 1,
                    "function1": 2,
                    "function_pointer": 5,
                    "function_ptr": 2,
                    "process_code": 1,
                    "section_callback": 4,
                    "section_contents_func": 2,
                    "section_contents_function": 2,
                    "section_function": 1,
                    "section_handler": 1
                },
                "piVar23": {
                    "error_num_ptr": 1,
                    "int_pointer1": 1,
                    "int_ptr": 3,
                    "int_ptr1": 1,
                    "pointer": 1,
                    "pointer12": 1,
                    "pointer_array3": 1,
                    "pointer_int": 1
                },
                "plVar15": {
                    "current_note": 1,
                    "current_note_entry": 1,
                    "debug_section_ptr": 1,
                    "long_array": 1,
                    "long_array1": 1,
                    "long_pointer1": 2,
                    "long_var1": 1,
                    "long_var15": 1,
                    "module_list_ptr": 1,
                    "pointer4": 1,
                    "pointer7": 1,
                    "pointer_array1": 1,
                    "pointer_list": 1,
                    "pointer_list1": 1,
                    "ptr9": 1,
                    "section": 2,
                    "section3": 1,
                    "section_array_ptr": 1,
                    "section_data": 1,
                    "section_list_pointer": 1,
                    "section_ptrs": 1
                },
                "plVar23": {
                    "section_list": 1
                },
                "plVar32": {
                    "debug_entries_ptr": 1,
                    "long_array2": 2,
                    "long_pointer2": 2,
                    "long_pointer_var32": 1,
                    "merged_note_ptr": 1,
                    "note_array_ptr": 1,
                    "note_entries": 1,
                    "note_entry": 1,
                    "note_list": 1,
                    "pointer11": 1,
                    "pointer_array2": 1,
                    "pointer_list2": 1,
                    "ptr10": 1,
                    "section_array3": 1,
                    "temp_pointer": 1
                },
                "ppcVar35": {
                    "debug_section_name_ptr": 1,
                    "section_list_ptr": 1
                },
                "ppuVar37": {
                    "debug_string_array": 1,
                    "ptr_flag6": 1
                },
                "puStack0000000000000020": {
                    "ptr_array": 1
                },
                "puStack0020": {
                    "symbol_table": 1
                },
                "puStack0038": {
                    "section_name": 1
                },
                "puVar1": {
                    "pointer": 5,
                    "pointer1": 5,
                    "pointer_var1": 2,
                    "ptr": 5,
                    "ptr_count": 1,
                    "section_flags": 6
                },
                "puVar16": {
                    "debug_link_section_ptr": 1,
                    "pointer4": 1
                },
                "puVar17": {
                    "gettext_msg_ptr": 1,
                    "pointer5": 1
                },
                "puVar23": {
                    "int_pointer_var23": 1
                },
                "puVar29": {
                    "current_attribute": 1,
                    "note_entry": 1,
                    "note_section": 1,
                    "pointer": 1,
                    "pointer29": 1,
                    "pointer4": 2,
                    "pointer_array7": 1,
                    "ptr_flag4": 1
                },
                "puVar3": {
                    "pointer": 2,
                    "pointer1": 1,
                    "pointer2": 6,
                    "pointer3": 2,
                    "pointer_var3": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_data": 1,
                    "ptr_flag": 1,
                    "ptr_var": 2,
                    "ptr_var3": 1,
                    "section_name": 2,
                    "undefined_pointer_var3": 1,
                    "undefined_ptr": 1
                },
                "puVar34": {
                    "pointer5": 1,
                    "ptr_flag3": 1
                },
                "puVar37": {
                    "pointer6": 1,
                    "ptr_flag5": 1
                },
                "puVar4": {
                    "pointer4": 1
                },
                "puVar5": {
                    "debug_info_ptr": 1,
                    "debug_link_section_list": 1,
                    "file_attributes": 1,
                    "l_debug": 1,
                    "merged_notes_list": 1,
                    "out_param1": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer3": 6,
                    "pointer5": 2,
                    "pointer_to_section": 1,
                    "pointer_var5": 2,
                    "ptr8": 2,
                    "ptr_flag2": 1,
                    "size_array": 1,
                    "undefined_var": 1
                },
                "pvVar36": {
                    "ptr2": 1,
                    "ptr5": 1,
                    "section_content_ptr": 1,
                    "void_pointer": 1,
                    "void_pointer_var36": 1
                },
                "sStack015a": {
                    "short_var15a": 1
                },
                "sStack258": {
                    "short_var": 1
                },
                "sVar18": {
                    "contents_size": 1,
                    "size": 1,
                    "size_val": 1,
                    "size_value": 4,
                    "size_value1": 2,
                    "size_var": 2,
                    "size_var1": 2,
                    "size_var18": 2,
                    "size_var3": 1,
                    "strcmp_result": 1,
                    "string_size": 1,
                    "uint_var4": 1
                },
                "sVar26": {
                    "bytes_written": 2,
                    "section_content_size": 1,
                    "size2": 1,
                    "size_copied": 1,
                    "size_val2": 1,
                    "size_value": 1,
                    "size_value2": 3,
                    "size_var2": 6,
                    "size_var26": 2,
                    "write_result": 1
                },
                "stack0x000000c0": {
                    "stab_strings": 1
                },
                "stack0x00000110": {
                    "stab_sizes": 1
                },
                "stack0x00000140": {
                    "stab_content": 1
                },
                "uStack0000000000000048": {
                    "function_data": 1,
                    "int_ptr_array": 1,
                    "stack_array1": 1
                },
                "uStack0048": {
                    "interval": 1
                },
                "uVar10": {
                    "current_type": 1,
                    "number1": 1,
                    "section_attrs": 1,
                    "section_flags": 2,
                    "symbol_attributes": 1,
                    "temp_var": 1,
                    "u_value3": 1,
                    "uint1": 1,
                    "uint_val": 1,
                    "uint_value": 3,
                    "uint_var": 3,
                    "uint_var1": 3,
                    "uint_var10": 2,
                    "unsigned_var3": 1,
                    "val3": 1,
                    "value1": 1,
                    "var10": 1
                },
                "uVar12": {
                    "int_value2": 1,
                    "number2": 1,
                    "section_attrs": 1,
                    "section_size": 1,
                    "syment_flags": 1,
                    "temp_var3": 1,
                    "u_value4": 1,
                    "uint2": 1,
                    "uint_value2": 3,
                    "uint_var": 1,
                    "uint_var12": 2,
                    "uint_var2": 6,
                    "unsigned_var4": 1,
                    "val4": 1,
                    "value2": 1,
                    "var12": 1
                },
                "uVar13": {
                    "error_code": 2,
                    "error_status": 1,
                    "error_val": 2,
                    "error_var": 1,
                    "temp_var4": 1,
                    "u_value5": 1,
                    "uint3": 1,
                    "uint_val2": 1,
                    "uint_value3": 3,
                    "uint_var13": 1,
                    "uint_var3": 5,
                    "undefined4_var": 1,
                    "undefined4_var13": 1,
                    "unsigned_var5": 1,
                    "var13": 1
                },
                "uVar16": {
                    "error_message": 1,
                    "result": 1,
                    "result3": 1,
                    "temp_var6": 1,
                    "translated_string1": 1,
                    "u_value6": 1,
                    "ulong_value3": 3,
                    "ulong_var16": 1,
                    "ulong_var2": 1,
                    "ulong_var3": 4,
                    "ulong_var4": 1,
                    "undefined_long_var1": 1,
                    "unsigned_var6": 1,
                    "var16": 1
                },
                "uVar17": {
                    "error_message": 1,
                    "error_parameter": 1,
                    "note_data": 1,
                    "result4": 1,
                    "temp_var7": 1,
                    "translated_string2": 1,
                    "u_value7": 1,
                    "ulong_value4": 3,
                    "ulong_var17": 1,
                    "ulong_var3": 1,
                    "ulong_var4": 4,
                    "ulong_var5": 1,
                    "undefined_long_var2": 1,
                    "unsigned_var7": 1,
                    "var17": 1
                },
                "uVar20": {
                    "current_index": 1,
                    "merged_notes_count": 1,
                    "merged_offset": 1,
                    "num_sections": 1,
                    "result_var3": 1,
                    "temp_var10": 1,
                    "u_value8": 1,
                    "ulong_value5": 1,
                    "ulong_var20": 1,
                    "ulong_var4": 1,
                    "ulong_var5": 3,
                    "unsigned_var8": 1,
                    "var20": 1
                },
                "uVar22": {
                    "current_size": 1,
                    "number3": 1,
                    "offset_comparison_result": 1,
                    "u_value9": 1,
                    "ulong_value6": 1,
                    "ulong_var1": 1,
                    "ulong_var5": 1,
                    "ulong_var6": 2,
                    "ulong_var7": 1,
                    "unsigned_var9": 1,
                    "var22": 1
                },
                "uVar24": {
                    "counter2": 1,
                    "mergeable_sections_count": 1,
                    "merged_notes_index": 1,
                    "merged_section_size": 1,
                    "number4": 1,
                    "u_value10": 1,
                    "ulong_var2": 1,
                    "ulong_var6": 2,
                    "ulong_var7": 2,
                    "unsigned_var10": 1,
                    "var24": 1
                },
                "uVar27": {
                    "uint_var4": 1,
                    "ulong_var7": 1
                },
                "uVar29": {
                    "var29": 1
                },
                "uVar30": {
                    "current_index": 1,
                    "first_section_offset": 1,
                    "temp_var": 1,
                    "ulong_value5": 1,
                    "ulong_var3": 1,
                    "ulong_var8": 4,
                    "var30": 1
                },
                "uVar39": {
                    "bool_var39": 1,
                    "byte_var3": 1
                },
                "uVar6": {
                    "code_size": 1,
                    "merge_size": 1,
                    "merged_note_size": 1,
                    "merged_size": 1,
                    "result": 1,
                    "result1": 1,
                    "result_var1": 1,
                    "size": 1,
                    "size1": 1,
                    "u_value1": 1,
                    "ulong1": 1,
                    "ulong_val": 1,
                    "ulong_value": 2,
                    "ulong_value1": 1,
                    "ulong_var1": 5,
                    "ulong_var6": 2,
                    "unsigned_var1": 1,
                    "val1": 1
                },
                "uVar7": {
                    "current_size": 1,
                    "merged_notes": 1,
                    "merged_notes_size": 2,
                    "result2": 2,
                    "result_var2": 1,
                    "size2": 1,
                    "temp_size": 1,
                    "u_value2": 1,
                    "ulong2": 1,
                    "ulong_value2": 3,
                    "ulong_var": 1,
                    "ulong_var2": 5,
                    "ulong_var7": 2,
                    "unsigned_var2": 1,
                    "val2": 1
                },
                "ugVar5": {
                    "ptr_array": 1
                },
                "unaff_R13": {
                    "merged_note_array": 1,
                    "merged_note_list_ptr": 1,
                    "note_list": 1,
                    "pointer8": 1,
                    "pointer_array6": 1,
                    "register_ptr13": 1,
                    "section_array": 1,
                    "section_list": 1,
                    "unaffected_register_r13": 1
                },
                "unaff_R14": {
                    "bfd_handler": 1,
                    "file_attribute_array": 1,
                    "input_bfd": 1,
                    "pointer9": 1,
                    "pointer_array8": 1,
                    "ptr11": 1,
                    "register_ptr14": 1,
                    "unaffected_register_r14": 1
                },
                "unaff_R16": {
                    "debuglink_contents": 1
                },
                "unaff_RAE": {
                    "pointer_list": 1
                },
                "unaff_RBP": {
                    "address5": 1,
                    "merged_notes_ptr": 1,
                    "register_ptr_bp": 1,
                    "temp_ptr1": 1
                },
                "unaff_RBX": {
                    "long_ptr1": 1,
                    "merged_notes_ptr": 1,
                    "pointer_array4": 1,
                    "pointer_list": 1,
                    "ptr_array": 1,
                    "register_ptr_bx": 1,
                    "section_data_ptr": 1,
                    "temporary_array": 1,
                    "unaffected_register_bx": 1
                }
            },
            "called": [
                "free",
                "FUN_001126c0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong parse_binary_file_and_extract_notes_0010551d(void)\n\n{\n  uint *section_flags;\n  byte byte_var;\n  undefined *pointer2;\n  code *function_pointer;\n  undefined8 *pointer3;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  char *string1;\n  char char_var1;\n  char char_var2;\n  uint uint_var1;\n  int int_value;\n  uint uint_var2;\n  undefined4 uint_var3;\n  int int_var2;\n  long *long_pointer1;\n  undefined8 ulong_var3;\n  undefined8 ulong_var4;\n  size_t size_value;\n  char *string2;\n  void *section_contents;\n  void *ptr4;\n  ulong ulong_var5;\n  long long_var1;\n  ulong ulong_var6;\n  int *int_ptr;\n  ulong ulong_var6;\n  long long_var3;\n  FILE *section_dump_file;\n  size_t size_var2;\n  long long_var3;\n  long *register_ptr_bx;\n  char *string3;\n  undefined8 *pointer4;\n  ulong ulong_var8;\n  int int_var3;\n  long temp_ptr1;\n  long *long_array2;\n  char *check_string;\n  undefined4 *ptr_flag3;\n  char **section_list_ptr;\n  long *merged_note_list_ptr;\n  void *ptr5;\n  undefined8 *pointer_array8;\n  undefined **ptr_flag6;\n  bool bool_value;\n  byte byte_value2;\n  long argument1;\n  ulong argument2;\n  char argument3;\n  undefined4 *ptr_array;\n  char *stack_array2;\n  uint function_data;\n  int int_var3;\n  long long_var5;\n  long long_var6;\n  char *last_section_name;\n  long long_var8;\n  long *long_ptr;\n  ulong ulong_value6;\n  long note_offset;\n  long long_value2;\n  void *stack_var_e0;\n  long long_value3;\n  undefined8 ulong_value7;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 note_size;\n  ushort note_version;\n  char *string4;\n  char char_value4;\n  char *string5;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byte_value2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_bfd_error_message_001126c0(0);\n  free(register_ptr_bx);\nLAB_001151a2:\n  temp_ptr1 = *(long *)(temp_ptr1 + 8);\n  pointer4 = DAT_001279b0;\n  if (temp_ptr1 == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(pointer_array8[1] + 8) != 5) || (*(int *)(*(long *)(temp_ptr1 + 0xd0) + 4) != 7)) ||\n        (char_var2 = string_comparison_function_00113fb0(), char_var2 == '\\0')) ||\n       ((*(long *)(temp_ptr1 + 0x60) == 0 || (long_var3 = *(long *)(temp_ptr1 + 0x40), long_var3 == 0))))\n    goto LAB_001151a2;\n    register_ptr_bx = (long *)xmalloc(0x20);\n    register_ptr_bx[1] = 0;\n    char_var2 = bfd_get_full_section_contents();\n    if (char_var2 != '\\0') {\n      long_var3 = improved_parse_gnu_build_attributes_001163d0();\n      register_ptr_bx[2] = long_var3;\n      if ((long_var3 == long_var3) || (char_var2 = bfd_set_section_size(), char_var2 != '\\0')) {\n        register_ptr_bx[3] = (long)merged_note_list_ptr;\n        *register_ptr_bx = temp_ptr1;\n        merged_note_list_ptr = register_ptr_bx;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,argument1,temp_ptr1);\n        free((void *)register_ptr_bx[1]);\n        free(register_ptr_bx);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (long_var3 = *(long *)(temp_ptr1 + 8); long_var3 != 0; long_var3 = *(long *)(long_var3 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointer4 != (undefined8 *)0x0; pointer4 = (undefined8 *)*pointer4) {\n    long_var3 = bfd_get_section_by_name();\n    if (long_var3 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(long_var3 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      size_value = *(size_t *)(long_var3 + 0x40);\n      section_dump_file = fopen((char *)pointer4[2],\"w\");\n      if (section_dump_file == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(pointer4[2],0,0);\n      }\n      else {\n        char_var2 = bfd_malloc_and_get_section();\n        if (char_var2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((size_value != 0) &&\n                (size_var2 = fwrite(string4,1,size_value,section_dump_file), size_var2 != size_value)) {\n          int_ptr = __errno_location();\n          check_string = strerror(*int_ptr);\n          ulong_var4 = pointer4[2];\n          ulong_var3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_with_params_00119ed0(ulong_var3,ulong_var4,check_string);\n          free(string4);\n          fclose(section_dump_file);\n          return 0;\n        }\n        fclose(section_dump_file);\n        free(string4);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    long_var5 = 0;\n  }\n  else {\n    long_var3 = bfd_get_section_by_name(argument1,\".gnu_debuglink\");\n    if (long_var3 != 0) {\n      ulong_var4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_with_params_00119ed0(ulong_var4);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    long_var5 = bfd_create_gnu_debuglink_section(argument1);\n    long_var3 = DAT_00127a10;\n    if (long_var5 == 0) {\n      ulong_var4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,argument1,0,ulong_var4,long_var3);\n      return 0;\n    }\n    if (*(int *)(*(long *)(argument1 + 8) + 8) == 2) {\n      ulong_var5 = 0;\n      for (ulong_var6 = *(ulong *)(argument1 + 0x90); ulong_var6 != 0;\n          ulong_var6 = *(ulong *)(ulong_var6 + 8)) {\n        ulong_var6 = *(ulong *)(ulong_var6 + 0x30);\n        ulong_var8 = ulong_var5;\n        ulong_var1 = ulong_var6;\n        ulong_var2 = ulong_var5;\n        if (ulong_var6 != 0) {\n          while ((ulong_var8 = ulong_var1, ulong_var2 != 0 &&\n                 (ulong_var8 = ulong_var6, ulong_var6 <= *(ulong *)(ulong_var5 + 0x30)))) {\n            ulong_var6 = *(ulong *)(ulong_var6 + 8);\n            if (ulong_var6 == 0) goto LAB_00107db8;\n            ulong_var6 = *(ulong *)(ulong_var6 + 0x30);\n            ulong_var1 = ulong_var5;\n            ulong_var2 = ulong_var6;\n          }\n        }\n        ulong_var5 = ulong_var8;\n      }\nLAB_00107db8:\n      if (ulong_var5 == 0) {\n        ulong_var6 = 0x1000;\n      }\n      else {\n        ulong_var5 = *(long *)(ulong_var5 + 0x40) + *(long *)(ulong_var5 + 0x30);\n        ulong_var6 = 0xffffffffffffffff;\n        if (ulong_var5 < 0xfffffffffffff001) {\n          ulong_var6 = ulong_var5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(long_var5 + 0x28) = *(byte *)(long_var5 + 0x28) | 1;\n      *(ulong *)(long_var5 + 0x30) = ulong_var6;\n      *(ulong *)(long_var5 + 0x38) = ulong_var6;\n    }\n  }\n  long_array2 = DAT_001278b0;\n  int_var3 = *(int *)(argument1 + 0xa0);\n  if (int_var3 != 0) {\n    ulong_var6 = process_debug_information_0010554f();\n    return ulong_var6;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    ptr_array = (undefined4 *)0x0;\n  }\n  else {\n    ptr_flag6 = &PTR_sstring1tab_00125c60;\n    ptr_array = (undefined4 *)xmalloc(0x60);\n    ptr_flag3 = ptr_array;\n    for (long_var3 = 0x18; long_var3 != 0; long_var3 = long_var3 + -1) {\n      *ptr_flag3 = 0;\n      ptr_flag3 = ptr_flag3 + (ulong)byte_value2 * -2 + 1;\n    }\n    stack_array2 = (char *)0x0;\n    do {\n      pointer2 = *ptr_flag6;\n      long_var3 = bfd_get_section_by_name();\n      long_var3 = bfd_get_section_by_name();\n      if ((long_var3 != 0) && (long_var3 != 0)) {\n        long_var3 = *(long *)(long_var3 + 0x40);\n        section_contents = (void *)xmalloc(long_var3);\n        char_var2 = bfd_get_section_contents();\n        if (char_var2 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*pointer_array8);\n          free(stack_array2);\n          free(section_contents);\n        }\n        else {\n          ulong_var6 = *(ulong *)(long_var3 + 0x40);\n          ptr4 = (void *)xmalloc(ulong_var6 + 1);\n          argument3 = bfd_get_section_contents();\n          if (argument3 == '\\0') {\n            uint_var3 = bfd_get_error();\n            bfd_errmsg(uint_var3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*pointer_array8);\n            free(stack_array2);\n          }\n          else {\n            *(undefined *)((long)ptr4 + ulong_var6) = 0;\n            if ((stack_array2 != (char *)0x0) ||\n               (stack_array2 = (char *)allocate_and_initialize_data_structure_00112894(),\n               stack_array2 != (char *)0x0)) {\n              long_var8 = 0;\n              long_var6 = 0;\n              for (ptr5 = section_contents; ptr5 <= (void *)((long)section_contents + long_var3 + -0xc);\n                  ptr5 = (void *)((long)ptr5 + 0xc)) {\n                ulong_var5 = (**(code **)(pointer_array8[1] + 0x40))(ptr5);\n                byte_var = *(byte *)((long)ptr5 + 4);\n                uint_var3 = (**(code **)(pointer_array8[1] + 0x58))((long)ptr5 + 6);\n                long_var3 = (**(code **)(pointer_array8[1] + 0x40))((long)ptr5 + 8);\n                if (byte_var == 0) {\n                  long_var6 = long_var8;\n                  long_var8 = long_var8 + long_var3;\n                }\n                else {\n                  ulong_var6 = (ulong_var5 & 0xffffffff) + long_var6;\n                  if (ulong_var6 < ulong_var6) {\n                    check_string = (char *)((long)ptr4 + ulong_var6);\n                    last_section_name = (char *)0x0;\n                    while( true ) {\n                      size_value = strlen(check_string);\n                      if (((size_value == 0) || (string3 = check_string + (size_value - 1), *string3 != '\\')) ||\n                         ((ulong)((long)section_contents + long_var3) < (long)ptr5 + 0x10U)) goto LAB_001077fb;\n                      *string3 = '\\0';\n                      ptr5 = (void *)((long)ptr5 + 0xc);\n                      int_value = (**(code **)(pointer_array8[1] + 0x40))(ptr5);\n                      ulong_var5 = (ulong)(uint)(int_value + (int)long_var6);\n                      if (ulong_var6 <= ulong_var5) break;\n                      check_string = (char *)concat(check_string,(long)ptr4 + ulong_var5,0);\n                      *string3 = '\\';\n                      free(last_section_name);\n                      last_section_name = check_string;\n                    }\n                    ulong_var4 = *pointer_array8;\n                    string3 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,string3,ulong_var4,pointer2,((long)ptr5 - (long)section_contents) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)byte_var,uint_var3,long_var3,check_string);\n                    char_var2 = process_debug_info_0011173a(ptr_array,stack_array2,byte_var);\n                    if (char_var2 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(last_section_name);\n                      free(stack_array2);\n                      free(section_contents);\n                      free(ptr4);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulong_var4 = *pointer_array8;\n                    check_string = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,check_string,ulong_var4,pointer2,((long)ptr5 - (long)section_contents) / 0xc,\n                            ulong_var5 & 0xffffffff,(ulong)byte_var,((long)ptr5 - (long)section_contents) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(section_contents);\n              goto LAB_001058eb;\n            }\n          }\n          free(ptr4);\n          free(section_contents);\n        }\nLAB_00105981:\n        free(ptr_array);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ptr_flag6 = ptr_flag6 + 2;\n    } while (ptr_flag6 != (undefined **)&DAT_00125c90);\n    if ((stack_array2 != (char *)0x0) && (char_var2 = process_debug_info_0010c892(), char_var2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(pointer_array8[1] + 8) == 1) {\n      long_var3 = 0;\n      for (long_pointer1 = long_array2; long_pointer1 < long_array2 + argument2; long_pointer1 = long_pointer1 + 1) {\n        (**(code **)(pointer_array8[1] + 0x218))();\n        if (char_value4 == '-') {\n          if (((long_var3 != 0) || (long_var3 = allocate_and_initialize_data_structure_00112894(), long_var3 != 0)) &&\n             ((string5 != (char *)0x0 && (*string5 != '\\0')))) {\n            check_string = (char *)0x0;\n            string3 = string5;\n            while (((*string3 != '\\0' && (size_value = strlen(string3), string3[size_value - 1] == '\\')) &&\n                   (long_pointer1 + 1 < long_array2 + argument2))) {\n              string2 = (char *)xstrdup(string3);\n              size_value = strlen(string2);\n              string2[size_value - 1] = '\\0';\n              string3 = (char *)concat(string2,*(undefined8 *)(long_pointer1[1] + 8),0);\n              free(string2);\n              free(check_string);\n              long_pointer1 = long_pointer1 + 1;\n              check_string = string3;\n            }\n            update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,string4,\n                         string3);\n            argument3 = process_debug_info_0011173a(ptr_array,long_var3,uStack0000000000000158);\n            if (argument3 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_memory_blocks_00108863();\n      if ((long_var3 != 0) && (char_var2 = process_debug_info_0010c892(), char_var2 == '\\0')) goto LAB_00105981;\n    }\n    if (argument3 == '\\0') {\n      if ((*(int *)(pointer_array8[1] + 8) != 2) || (argument2 == 0)) {\n        check_string = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      string4 = (char *)0x0;\n      long_ptr = long_array2;\n      note_offset = 0;\n      ulong_value6 = argument2;\n      long_value2 = 0;\n      pointer4 = (undefined8 *)&stack0x00000148;\n      for (long_var3 = 0x22; long_var3 != 0; long_var3 = long_var3 + -1) {\n        *(undefined4 *)pointer4 = 0;\n        pointer4 = (undefined8 *)((long)pointer4 + (ulong)byte_value2 * -8 + 4);\n      }\n      char_var2 = '\\0';\n      _function_data = (int *)0x0;\n      stack_array2 = (char *)0x0;\n      last_section_name = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)argument2 <= note_offset) break;\n        long_var3 = long_array2[note_offset];\n        char_var1 = bfd_coff_get_syment();\n        long_var3 = long_value2;\n        if (char_var1 == '\\0') {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          check_string = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulong_var4 = dcgettext(0,check_string,5);\n          print_error_message_with_params_00119ed0(ulong_var4);\n          goto LAB_00105981;\n        }\n        check_string = *(char **)(long_var3 + 8);\n        note_offset = note_offset + 1;\n        long_value2 = (ulong)bStack0000000000000101 + 1 + long_value2;\n        if ((bStack0000000000000101 != 0) && (char_var1 = bfd_coff_get_auxent(), char_var1 == '\\0')) {\n          uint_var3 = bfd_get_error();\n          bfd_errmsg(uint_var3);\n          check_string = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (last_section_name == (char *)long_var3) {\n          if (bStack0000000000000100 != 0x67) {\n            char_var1 = initialize_debug_info_0010bbd3(ptr_array);\n            if (char_var1 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          last_section_name = (char *)long_value3;\n          char_var1 = initialize_debug_info_0010bbd3(ptr_array);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (ulong_value7._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)ulong_value7._6_2_ & *(uint *)(pointer_array8[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(pointer_array8[0x22] + 0x3c) & 0x3f)) {\n                _function_data = (int *)(**(code **)(pointer_array8[1] + 0x238))();\n                stack_array2 = check_string;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              int_value = strcmp(check_string,\".bb\");\n              if (int_value == 0) {\n                char_var1 = debug_block_start_0010be88(ptr_array);\n                goto joined_r0x00107247;\n              }\n              int_value = strcmp(check_string,\".eb\");\n              if (int_value == 0) {\n                char_var1 = end_block_debug_0010bf20(ptr_array);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              int_value = strcmp(check_string,\".bf\");\n              if (int_value == 0) {\n                if (stack_array2 != (char *)0x0) {\n                  long_var3 = parse_coff_type_and_create_memory_0010dac0();\n                  if ((long_var3 == 0) ||\n                     (char_var2 = record_debug_function_0010bc80(ptr_array), char_var2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_function_data != (int *)0x0) {\n                    int_value = 0;\n                    if (bStack0000000000000101 != 0) {\n                      int_value = note_version - 1;\n                    }\n                    long_var3 = *(long *)(*(long *)(long_var3 + 0x20) + 0x30);\n                    while( true ) {\n                      int_var3 = _function_data[4];\n                      if (int_var3 == 0) break;\n                      char_var1 = record_line_debug_info_0010bf86(ptr_array,int_value + int_var3,\n                                           *(long *)(_function_data + 6) + long_var3);\n                      _function_data = _function_data + 4;\n                      if (char_var1 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _function_data = (int *)0x0;\n                  stack_array2 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                check_string = \"%ld: .bf without preceding function\";\n              }\n              else {\n                int_value = strcmp(check_string,\".ef\");\n                if (int_value != 0) goto switchD_00106e1a_caseD_68;\n                if (char_var2 != '\\0') {\n                  char_var2 = handle_debug_end_function_0010be1a(ptr_array);\n                  if (char_var2 == '\\0') goto LAB_00105981;\n                  char_var2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                check_string = \"%ld: unexpected .ef\\n\";\n              }\n              ulong_var4 = dcgettext(0,check_string,5);\n              print_error_message_with_params_00119ed0(ulong_var4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          long_var1 = parse_coff_type_and_create_memory_0010dac0();\n          if (long_var1 == 0) goto LAB_00105981;\n          char_var1 = process_debug_info_00112a33(&stab_content,long_var3,long_var3);\n        }\njoined_r0x00107247:\n        if (char_var1 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(argument1 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(argument1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(argument1 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (argument2 != 0) {\n        long_array2 = DAT_001278b0 + argument2;\n        long_pointer1 = DAT_001278b0;\n        do {\n          uint_var1 = *(uint *)(*long_pointer1 + 0x18);\n          if ((uint_var1 & 0x1000000) != 0) {\n            *(uint *)(*long_pointer1 + 0x18) = uint_var1 & 0xfeffffff;\n          }\n          long_pointer1 = long_pointer1 + 1;\n        } while (long_array2 != long_pointer1);\n      }\n    }\n    else {\n      for (long_var3 = *(long *)(argument1 + 0x90); long_var3 != 0; long_var3 = *(long *)(long_var3 + 8)\n          ) {\n        if (*(long *)(long_var3 + 0xe8) != 0) {\n          section_flags = (uint *)(*(long *)(long_var3 + 0xe8) + 0x18);\n          *section_flags = *section_flags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      int_value = bfd_get_error();\n      if (int_value != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    long_var3 = xmalloc();\n    long_array2 = DAT_001278b0;\n    function_data = *(uint *)((long)pointer_array8 + 0x44) & 0x42;\n    DAT_001278a8 = long_var3;\n    if (argument2 == 0) {\n      ulong_var6 = 0;\n    }\n    else {\n      ulong_var6 = 0;\n      _argument3 = 0;\n      do {\n        int_value = DAT_001279a0;\n        long_pointer1 = (long *)long_array2[_argument3];\n        function_pointer = (code *)long_pointer1[4];\n        uint_var1 = *(uint *)(long_pointer1 + 3);\n        check_string = (char *)long_pointer1[1];\n        string3 = check_string;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          int_var3 = 0;\n          pointer4 = DAT_001279a8;\n          while( true ) {\n            if ((int_value <= int_var3) || (string2 = (char *)pointer4[5], string2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (string2 != \"\") break;\nLAB_0010750b:\n            int_var3 = int_var3 + 1;\n          }\n          int_var2 = strcmp(string2,check_string);\n          if (int_var2 != 0) {\n            pointer4 = (undefined8 *)*pointer4;\n            goto LAB_0010750b;\n          }\n          free(string2);\n          ulong_var5 = ulong_var6 + 1;\n          pointer4[5] = \"\";\n          ulong_var3 = extract_section_data_0011a2e0(pointer4);\n          ulong_var4 = DAT_001278d0;\n          *(undefined8 *)(long_var3 + ulong_var6 * 8) = ulong_var3;\n          long_var3 = htab_elements(ulong_var4);\n          if ((long_var3 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          char_var2 = *check_string;\n          if (char_var2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          check_string = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(argument1 + 8) + 0x1c) != '\\0')\n             ) {\n            long_var3 = pointer_array8[1];\n            char_var2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        long_var3 = htab_elements(DAT_001278d0);\n        ulong_var5 = ulong_var6;\n        if ((long_var3 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (check_string != (char *)0x0) {\nLAB_001064eb:\n          if (((*check_string == '_') && (check_string[1] == '_')) &&\n             (int_value = strcmp(check_string + (check_string[2] == '_'),\"__gnu_lto_slim\"), int_value == 0)) {\n            ulong_var4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_message_and_exit_00119dd0(ulong_var4);\n          }\n        }\n        _char_value4 = 0;\n        string4 = check_string;\n        long_var3 = htab_find(DAT_001278d0);\n        if (((long_var3 == 0) || (string3 = *(char **)(long_var3 + 8), check_string == string3)) &&\n           (string3 = check_string, section_list_ptr = DAT_001278d8, (uint_var1 & 0x100) != 0)) {\n          for (; section_list_ptr != (char **)0x0; section_list_ptr = (char **)section_list_ptr[3]) {\n            int_value = strcmp(*section_list_ptr,check_string);\n            if (int_value == 0) {\n              string3 = section_list_ptr[1];\n              break;\n            }\n          }\n        }\n        long_pointer1[1] = (long)string3;\n        char_var2 = *string3;\n        if (char_var2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        check_string = DAT_00127908;\n        long_var3 = pointer_array8[1];\n        if (*(char *)(long_var3 + 0x1c) == char_var2) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uint_var1 & 0x82) == 0 && (function_pointer != bfd_map_over_sections)) &&\n                ((*(byte *)(long_pointer1[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            string3 = string3 + 1;\n            long_pointer1[1] = (long)string3;\n            goto joined_r0x00106565;\n          }\n          char_var2 = *(char *)(*(long *)(argument1 + 8) + 0x1c);\n          if (char_var2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            string3 = string3 + 1;\n            long_pointer1[1] = (long)string3;\n            size_value = strlen(string3);\n            long_var3 = size_value + 2;\n            goto LAB_001066bc;\n          }\n          *string3 = char_var2;\n          long_pointer1[1] = (long)string3;\n          ulong_var6 = ulong_var5;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(argument1 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulong_var6 = ulong_var5;\n            if (check_string == (char *)0x0) goto LAB_00105b32;\n            size_value = strlen(string3);\n            size_var2 = strlen(check_string);\n            check_string = (char *)xmalloc(size_var2 + size_value + 1);\n            string2 = check_string;\n          }\n          else {\nLAB_0010668d:\n            check_string = DAT_00127908;\n            if ((*(char *)(long_var3 + 0x1c) != '\\0') && (char_var2 != *(char *)(long_var3 + 0x1c)))\n            goto joined_r0x00106565;\n            size_value = strlen(string3);\n            long_var3 = size_value + 2;\n            if (check_string == (char *)0x0) {\n              string2 = (char *)xmalloc(long_var3);\n            }\n            else {\nLAB_001066bc:\n              size_value = strlen(check_string);\n              string2 = (char *)xmalloc(size_value + long_var3);\n            }\n            check_string = string2 + 1;\n            *string2 = *(char *)(*(long *)(argument1 + 8) + 0x1c);\n          }\n          string1 = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(check_string,DAT_00127908);\n            size_value = strlen(string1);\n            check_string = check_string + size_value;\n          }\n          strcpy(check_string,string3);\n          long_pointer1[1] = (long)string2;\n          string3 = string2;\n          ulong_var6 = ulong_var5;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uint_var1 & 0x20) == 0) &&\n           (((uint_var1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(long_pointer1[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((function_data == 0) &&\n              (((uint_var1 & 0x82) != 0 || ((*(byte *)(long_pointer1[4] + 0x25) & 0x10) != 0)))) ||\n             (int_value = bfd_decode_symclass(long_pointer1), int_value == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              long_var3 = htab_find();\n              if (long_var3 == 0) goto LAB_00105c07;\n            }\n            else {\n              _char_value4 = _char_value4 & 0xffffffffffffff00;\n              string4 = string3;\n              htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stab_content);\n              if (char_value4 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uint_var1 & 0x82) == 0) && (function_pointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(long_pointer1[4] + 0x25) & 0x10) == 0)) {\n            if ((uint_var1 & 4) == 0) {\n              if (((*(int *)(pointer_array8[1] + 8) != 2) ||\n                  (long_var3 = *(long *)(long_pointer1[4] + 0xd0), long_var3 == 0)) ||\n                 (*(long *)(long_var3 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  char_var2 = bfd_is_local_label(pointer_array8);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            char_var2 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (char_var2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          long_var3 = htab_find();\n          if (long_var3 != 0) {\nLAB_0010687f:\n            ulong_var4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_with_params_00119ed0(ulong_var4);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _char_value4 = _char_value4 & 0xffffffffffffff00;\n          string4 = string3;\n          htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stab_content);\n          if (char_value4 != '\\0') goto LAB_0010687f;\n        }\n        if ((uint_var1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _char_value4 = _char_value4 & 0xffffffffffffff00;\n            string4 = string3;\n            htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stab_content);\n            if (char_value4 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          long_var3 = htab_find();\n          if (long_var3 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uint_var1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            long_var3 = htab_find();\n            if (long_var3 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _char_value4 = _char_value4 & 0xffffffffffffff00;\n            string4 = string3;\n            htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stab_content);\n            if (char_value4 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          char_var2 = process_and_check_section_options_001159d0(long_pointer1[4]);\n          if (char_var2 == '\\0') {\n            if (((uint_var1 & 0x800002) == 0) && (function_pointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uint_var1 & 0x82) != 0) {\n                char_var2 = check_pattern_match_00115d70(string3);\n                if ((char_var2 == '\\0') &&\n                   ((long_var3 = htab_elements(DAT_001279d8), long_var3 == 0 ||\n                    (char_var2 = check_pattern_match_00115d70(string3), char_var2 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uint_var2 = *(uint *)(long_pointer1 + 3), (uint_var2 & 0x200000) != 0)) ||\n                       (long_var3 = *long_pointer1, long_var3 == 0)) ||\n                      ((*(int *)(*(long *)(long_var3 + 8) + 8) != 5 || (*(long *)(long_var3 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)long_pointer1 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uint_var2 = *(uint *)(long_pointer1 + 3);\n                }\n                *(uint *)(long_pointer1 + 3) = uint_var2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uint_var1 & 1) != 0) && (char_var2 = check_pattern_match_00115d70(string3), char_var2 != '\\0')) {\n                *(uint *)(long_pointer1 + 3) = *(uint *)(long_pointer1 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (char_var2 = check_pattern_match_00115d70(string3), char_var2 != '\\0')) {\n                *(uint *)(long_pointer1 + 3) = *(uint *)(long_pointer1 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (function_pointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(long_var3 + ulong_var6 * 8) = long_pointer1;\n            ulong_var6 = ulong_var6 + 1;\n          }\n        }\n        _argument3 = _argument3 + 1;\n      } while (argument2 != _argument3);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      pointer4 = DAT_001279a8;\n      int_value = DAT_001279a0;\n      for (long_var3 = 0; long_var3 < int_value; long_var3 = long_var3 + 1) {\n        check_string = (char *)pointer4[5];\n        if (check_string == (char *)0x0) {\n          long_var1 = ulong_var6 * 8;\n          ulong_var6 = ulong_var6 + 1;\n          ulong_var4 = extract_section_data_0011a2e0(pointer4,argument1);\n          *(undefined8 *)(long_var3 + long_var1) = ulong_var4;\n          int_value = DAT_001279a0;\n        }\n        else if (check_string != \"\") {\n          ulong_var4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_message_and_exit_00119dd0(ulong_var4,check_string);\n        }\n        pointer4 = (undefined8 *)*pointer4;\n      }\n    }\n    bool_value = DAT_00127980 != '\\0';\n    *(undefined8 *)(long_var3 + ulong_var6 * 8) = 0;\n    if ((bool_value) && (ptr_array != (undefined4 *)0x0)) {\n      int_value = *(int *)(*(undefined8 **)(argument1 + 8) + 1);\n      if ((int_value != 5) && (int_value != 2)) {\n        ulong_var4 = **(undefined8 **)(argument1 + 8);\n        ulong_var3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,argument1,0,ulong_var3,ulong_var4);\nLAB_00105d8c:\n        free(ptr_array);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      stack_var_e0 = (void *)0x0;\n      char_var2 = analyze_binarynary_0011378f(argument1,ptr_array,&stab_strings,\n                           &stab_sizes,&stack0x000000e0,&stab_content);\n      if (char_var2 == '\\0') goto LAB_00105d8c;\n      long_var3 = bfd_make_section_with_flags(argument1,\".stab\",0x2108);\n      long_var3 = bfd_make_section_with_flags(argument1,\".stabstr\",0x2108);\n      if ((((long_var3 == 0) || (long_var3 == 0)) ||\n          (char_var2 = bfd_set_section_size(long_var3,note_size), char_var2 == '\\0')) ||\n         (char_var2 = bfd_set_section_size(long_var3,string4), char_var2 == '\\0')) {\n        check_string = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulong_var4 = dcgettext(0,check_string,5);\n        print_bfd_error_message_001126c0(0,argument1,0,ulong_var4);\n        free(stack_var_e0);\n        free(ptr_array);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(long_var3 + 0x7c) = 2;\n      *(undefined4 *)(long_var3 + 0x7c) = 0;\n      char_var2 = bfd_set_section_contents\n                        (argument1,long_var3,long_ptr,0,note_size);\n      if ((char_var2 == '\\0') ||\n         (char_var2 = bfd_set_section_contents\n                            (argument1,long_var3,stack_var_e0,0,string4),\n         char_var2 == '\\0')) {\n        check_string = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(ptr_array);\n    }\n    argument2 = ulong_var6 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    long_var3 = htab_elements(DAT_001279f8);\n    if (((long_var3 != 0) ||\n        (((((((long_var3 = htab_elements(DAT_00127a08), long_var3 != 0 ||\n              (long_var3 = htab_elements(DAT_001279e8), long_var3 != 0)) ||\n             (long_var3 = htab_elements(DAT_001279e0), long_var3 != 0)) ||\n            ((long_var3 = htab_elements(DAT_001279d8), long_var3 != 0 ||\n             (long_var3 = htab_elements(DAT_001279d0), long_var3 != 0)))) ||\n           (long_var3 = htab_elements(DAT_001278d0), long_var3 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(argument1,DAT_001278a8,argument2 & 0xffffffff);\n  bfd_map_over_sections(pointer_array8,process_section_options_00115dc0,argument1);\n  bfd_map_over_sections(pointer_array8,process_section_contents_00116110,argument1);\n  for (pointer4 = DAT_001279c0; pointer3 = DAT_001279b8, pointer4 != (undefined8 *)0x0;\n      pointer4 = (undefined8 *)*pointer4) {\n    char_var2 = bfd_set_section_contents(argument1,pointer4[5],pointer4[4],0,pointer4[3]);\n    if (char_var2 == '\\0') {\n      print_bfd_error_message_001126c0(0,argument1,pointer4[5],0);\n      return 0;\n    }\n  }\n  for (; pointer3 != (undefined8 *)0x0; pointer3 = (undefined8 *)*pointer3) {\n    ulong_var4 = *(undefined8 *)(pointer3[5] + 0x60);\n    char_var2 = bfd_set_section_contents(argument1,ulong_var4,pointer3[4],0,pointer3[3]);\n    if (char_var2 == '\\0') {\n      print_bfd_error_message_001126c0(0,argument1,ulong_var4,0);\n      return 0;\n    }\n  }\n  if (merged_note_list_ptr == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulong_var4 = *pointer_array8;\n      ulong_var3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_with_params_00119ed0(ulong_var3,ulong_var4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (char_var2 = bfd_fill_in_gnu_debuglink_section(argument1,long_var5),\n       long_var3 = DAT_00127a10, char_var2 != '\\0')) {\n      uint_var1 = (**(code **)(*(long *)(argument1 + 8) + 0x140))(pointer_array8);\n      ulong_var6 = (ulong)uint_var1;\n      if ((char)uint_var1 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return ulong_var6;\n        }\n        char_var2 = bfd_alt_mach_code(argument1,DAT_00127910 & 0xffffffff);\n        ulong_var5 = DAT_00127910;\n        if (char_var2 != '\\0') {\n          return ulong_var6;\n        }\n        ulong_var4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_with_params_00119ed0(ulong_var4,ulong_var5);\n        if (*(int *)(*(long *)(argument1 + 8) + 8) != 5) {\n          ulong_var4 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_with_params_00119ed0(ulong_var4);\n          return ulong_var6;\n        }\n        ulong_var4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_with_params_00119ed0(ulong_var4);\n        *(short *)(*(long *)(argument1 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return ulong_var6;\n      }\n      ulong_var4 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,argument1,0,ulong_var4);\n    }\n    else {\n      ulong_var4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,argument1,0,ulong_var4,long_var3);\n    }\n    return 0;\n  }\n  long_array2 = (long *)0x0;\n  pointer4 = *(undefined8 **)(argument1 + 0x90);\n  do {\n    if (pointer4 == (undefined8 *)0x0) {\n      do {\n        long_array2 = (long *)merged_note_list_ptr[3];\n        free((void *)merged_note_list_ptr[1]);\n        free(merged_note_list_ptr);\n        merged_note_list_ptr = long_array2;\n      } while (long_array2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(argument1 + 8) + 8) == 5)) &&\n        (*(int *)(pointer4[0x1a] + 4) == 7)) &&\n       (char_var2 = string_comparison_function_00113fb0(*pointer4,\".gnu.build.attributes\"), char_var2 != '\\0')) {\n      if (long_array2 == (long *)0x0) {\n        long_array2 = merged_note_list_ptr;\n      }\n      long_pointer1 = merged_note_list_ptr;\n      if (*(undefined8 **)(*long_array2 + 0x60) == pointer4) {\nLAB_0010625f:\n        check_string = \"error: failed to merge notes\";\n        if (long_array2[1] != 0) {\n          char_var2 = bfd_set_section_contents(argument1,pointer4,long_array2[1],0,long_array2[2]);\n          if (char_var2 == '\\0') {\n            ulong_var4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_bfd_error_message_001126c0(0,argument1,pointer4,ulong_var4);\n            return 0;\n          }\n          long_array2 = (long *)long_array2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          long_array2 = long_pointer1;\n          if (*(undefined8 **)(*long_pointer1 + 0x60) == pointer4) goto LAB_0010625f;\n          long_array2 = (long *)long_pointer1[3];\n          long_pointer1 = long_array2;\n        } while (long_array2 != (long *)0x0);\n        check_string = \"error: failed to locate merged notes\";\n      }\n      ulong_var4 = dcgettext(0,check_string,5);\n      print_bfd_error_message_001126c0(0,argument1,pointer4,ulong_var4);\n    }\nLAB_001061be:\n    pointer4 = (undefined8 *)pointer4[1];\n  } while( true );\n}\n\n",
            "current_name": "parse_binary_file_and_extract_notes_0010551d",
            "entrypoint": "0x0010551d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010551d": "parse_binary_file_and_extract_notes_0010551d",
                "__ptr": "section_contents",
                "__ptr_00": "ptr4",
                "__s": "string1",
                "__s_00": "section_dump_file",
                "bVar2": "byte_var",
                "bVar38": "bool_value",
                "bVar39": "byte_value2",
                "bi": "binary",
                "cStack0000000000000148": "char_value4",
                "cVar8": "char_var1",
                "cVar9": "char_var2",
                "iStack000000000000006c": "int_var3",
                "iVar11": "int_value",
                "iVar14": "int_var2",
                "iVar31": "int_var3",
                "in_stack_00000008": "argument1",
                "in_stack_00000010": "argument2",
                "in_stack_00000018": "argument3",
                "in_stack_000000c0": "long_ptr",
                "in_stack_000000c8": "ulong_value6",
                "in_stack_000000d0": "note_offset",
                "in_stack_000000d8": "long_value2",
                "in_stack_000000e0": "stack_var_e0",
                "in_stack_000000f0": "long_value3",
                "in_stack_000000f8": "ulong_value7",
                "in_stack_00000110": "note_size",
                "in_stack_00000118": "note_version",
                "in_stack_00000140": "string4",
                "in_stack_00000150": "string5",
                "lStack0000000000000078": "long_var5",
                "lStack0000000000000088": "long_var6",
                "lStack00000000000000a0": "long_var8",
                "lVar15": "long_var15",
                "lVar21": "long_var1",
                "lVar25": "long_var3",
                "lVar27": "long_var3",
                "lVar32": "prev_debug_entry",
                "pcStack0000000000000038": "stack_array2",
                "pcStack0000000000000090": "last_section_name",
                "pcVar19": "string2",
                "pcVar28": "string3",
                "pcVar33": "check_string",
                "pcVar4": "function_pointer",
                "piVar23": "int_ptr",
                "plVar15": "long_pointer1",
                "plVar32": "long_array2",
                "ppcVar35": "section_list_ptr",
                "ppuVar37": "ptr_flag6",
                "puStack0000000000000020": "ptr_array",
                "puVar1": "section_flags",
                "puVar29": "pointer4",
                "puVar3": "pointer2",
                "puVar34": "ptr_flag3",
                "puVar37": "pointer6",
                "puVar5": "pointer3",
                "pvVar36": "ptr5",
                "sVar18": "size_value",
                "sVar26": "size_var2",
                "stack0x000000c0": "stab_strings",
                "stack0x00000110": "stab_sizes",
                "stack0x00000140": "stab_content",
                "uStack0000000000000048": "function_data",
                "uVar10": "uint_var1",
                "uVar12": "uint_var2",
                "uVar13": "uint_var3",
                "uVar16": "ulong_var3",
                "uVar17": "ulong_var4",
                "uVar20": "ulong_var5",
                "uVar22": "ulong_var6",
                "uVar24": "ulong_var6",
                "uVar29": "var29",
                "uVar30": "ulong_var8",
                "uVar6": "ulong_var1",
                "uVar7": "ulong_var2",
                "unaff_R13": "merged_note_list_ptr",
                "unaff_R14": "pointer_array8",
                "unaff_RBP": "temp_ptr1",
                "unaff_RBX": "register_ptr_bx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010554f": {
            "additional_data": {
                "DAT_001278b0": {
                    "section_pointers": 1
                },
                "DAT_00127969": {
                    "type_propagation_flag_2": 1
                },
                "DAT_00127978": {
                    "type_propagation_flag": 1
                },
                "FUN_0010554f": {
                    "analyze_binary_symbols": 1,
                    "generate_debug_info": 1,
                    "improve_debugging_info": 1,
                    "process_debug_info": 1,
                    "process_debug_information": 2,
                    "process_symbol_table": 1
                },
                "FriendlyFunction": {
                    "process_debug_info": 1
                },
                "__dest": {
                    "buffer_destination": 1,
                    "dest": 1
                },
                "__ptr": {
                    "padding_buffer": 1,
                    "section_options": 1
                },
                "__ptr_02": {
                    "debug_data": 1,
                    "debug_info_structure": 1,
                    "stab_data": 1,
                    "stab_entry": 1
                },
                "_param_15": {
                    "line_entry": 1
                },
                "_param_41": {
                    "match_found": 1
                },
                "bVar2": {
                    "byte_flag": 1,
                    "flag": 2
                },
                "bVar38": {
                    "boolean_flag": 1,
                    "check_flag": 1,
                    "debug_flag": 1,
                    "flag": 1,
                    "has_section_options": 1,
                    "should_skip_section": 1
                },
                "bVar39": {
                    "byte_flag_2": 1,
                    "flag": 1,
                    "is_negative": 1,
                    "zero": 1
                },
                "cVar7": {
                    "char_variable": 1,
                    "error_flag": 1,
                    "status": 2,
                    "status_flag": 1,
                    "success": 3,
                    "success_flag": 1
                },
                "cVar8": {
                    "char_variable_2": 1
                },
                "iVar10": {
                    "integer_value": 1,
                    "integer_variable_1": 1
                },
                "iVar11": {
                    "comparison_value": 1,
                    "integer_variable_2": 1
                },
                "iVar27": {
                    "line_number": 1
                },
                "in_R10": {
                    "mergeable_notes": 1,
                    "merged_note_list": 1,
                    "merged_note_section_list": 1,
                    "merged_note_sections": 2,
                    "merged_notes": 2,
                    "pl_var15": 1,
                    "pointer_to_long_variable_3": 1
                },
                "in_stack_00000068": {
                    "num_sections": 2,
                    "num_stab_entries": 1,
                    "section_count": 1,
                    "section_info": 1,
                    "section_pointer_size": 1,
                    "struct_data": 1
                },
                "in_stack_000000d8": {
                    "symbol_count": 1
                },
                "in_stack_000000f8": {
                    "debug_file": 1,
                    "debug_link_section_size": 1,
                    "flags": 1
                },
                "lVar14": {
                    "current_section_pointer": 1,
                    "i": 1,
                    "index": 1,
                    "long_variable_1": 1,
                    "merged_notes": 1,
                    "num_sections_to_traverse": 1,
                    "record_index": 1,
                    "section_index": 2,
                    "section_offset": 1,
                    "section_size": 5,
                    "size": 1
                },
                "lVar15": {
                    "long_variable_2": 1
                },
                "lVar23": {
                    "length": 1,
                    "loop_iterator": 1,
                    "note_section_size": 1
                },
                "lVar28": {
                    "note_data": 1
                },
                "lVar37": {
                    "auxent": 1,
                    "iter": 1,
                    "j": 1,
                    "long_variable_4": 1,
                    "loop_index": 1,
                    "loop_variable": 1,
                    "note_section": 1,
                    "note_size": 1,
                    "section_content_size": 1,
                    "section_index": 2,
                    "section_name_length": 1,
                    "temp_size": 1,
                    "temp_value": 1
                },
                "param_12": {
                    "gap_size": 4,
                    "max_data_size": 1,
                    "max_gap_size": 4,
                    "max_section_size": 1,
                    "max_size": 2,
                    "merged_stabs_data_size": 1,
                    "param_40_length": 1,
                    "param_flag": 1,
                    "param_gap": 1,
                    "section_gap": 1,
                    "section_size": 3,
                    "section_sizes": 1,
                    "size": 1,
                    "total_size": 1,
                    "uint_parameter_2": 1
                },
                "param_13": {
                    "merged_note_section_name": 1,
                    "merged_notes_section": 1
                },
                "param_14": {
                    "allocation_pointer": 1,
                    "content": 1,
                    "data": 1,
                    "debug_section_data": 1,
                    "gap_array": 1,
                    "gap_buffer": 4,
                    "gap_sizes": 1,
                    "gap_values": 1,
                    "merged_notes_content": 1,
                    "merged_stabs_data": 1,
                    "param_17_lengths": 1,
                    "param_array": 1,
                    "param_dest": 1,
                    "pointer_parameter": 1,
                    "record_sizes": 1,
                    "section_contents": 3,
                    "section_data": 1,
                    "section_gap": 1,
                    "section_gap_data": 1,
                    "section_offsets": 1,
                    "section_sizes": 3,
                    "symbol_table_size": 1
                },
                "param_15": {
                    "additional_options": 1,
                    "section_flags": 1,
                    "target_machine_code": 1
                },
                "param_17": {
                    "param_17": 1,
                    "param_section": 1,
                    "pointer_parameter_2": 1,
                    "record_array": 1,
                    "record_offsets": 1,
                    "section_addresses": 3,
                    "section_array": 2,
                    "section_list": 3,
                    "section_offsets": 1,
                    "section_pointers": 4,
                    "section_sizes": 4,
                    "section_sort_array": 1,
                    "sections": 3,
                    "sections_array": 1,
                    "sections_to_traverse": 1,
                    "symbol_table": 2
                },
                "param_21": {
                    "alternative_code": 1,
                    "debug_file_contents": 1,
                    "debug_link": 3,
                    "debug_link_filename": 4,
                    "debug_link_name": 1,
                    "debug_link_path": 1,
                    "debug_link_section_name": 1,
                    "debug_section_name": 1,
                    "flag": 1,
                    "param_21": 1
                },
                "param_23": {
                    "current_section": 1,
                    "debug_contents_size": 1,
                    "debug_link_section_size": 1,
                    "debug_link_size": 1,
                    "offset": 1,
                    "param_23": 1,
                    "section_data": 1,
                    "section_size": 2,
                    "string_table": 1,
                    "total_debug_info_size": 1
                },
                "param_24": {
                    "current_section": 1,
                    "debug_link_contents": 1,
                    "debug_link_file_name": 1,
                    "debug_link_section_name": 1,
                    "param_24": 1,
                    "section_name": 1,
                    "string_table_size": 1
                },
                "param_26": {
                    "current_reloc": 1,
                    "debug_block_start": 1,
                    "debug_info_start_address": 1,
                    "debug_link_file_name": 1,
                    "param_26": 1,
                    "prev_offset": 1,
                    "section_contents": 2,
                    "symbol_table": 1,
                    "temp_var1": 1
                },
                "param_29": {
                    "symbol_table_size": 1
                },
                "param_30": {
                    "debug_function_records": 1,
                    "debug_section_sizes": 1,
                    "merge_notes": 1,
                    "merged_notes": 3,
                    "note_sections": 1,
                    "output_sections": 1,
                    "param_30": 1,
                    "pl_var28": 1,
                    "section_data": 1,
                    "section_data_array": 1,
                    "section_names": 1,
                    "stabs_relocation_addresses": 1,
                    "symbol_pointers": 1
                },
                "param_31": {
                    "debug_function_size": 1,
                    "debug_link_section": 1,
                    "merged_notes_size": 1,
                    "note_section_count": 1,
                    "output_section_sizes": 1,
                    "param_31": 1,
                    "param_size": 1,
                    "section_size_array": 1
                },
                "param_32": {
                    "debug_function_offset": 1,
                    "i": 1,
                    "param_32": 1,
                    "section_flags": 1,
                    "section_index": 2
                },
                "param_33": {
                    "debug_contents": 1,
                    "debug_function_contents": 1,
                    "debug_link_contents": 1,
                    "merged_data": 1,
                    "merged_note_section_contents": 1,
                    "merged_notes": 1,
                    "note_buffer": 1,
                    "notes_contents": 1,
                    "notes_data": 1,
                    "param_33": 1,
                    "param_padding": 1,
                    "section_contents": 1,
                    "section_data": 1
                },
                "param_34": {
                    "debug_link_size": 1,
                    "debug_symbol_start": 1,
                    "section_count": 1
                },
                "param_36": {
                    "compression_enabled": 1,
                    "config_flag": 1,
                    "is_symbol": 1,
                    "padding_flag": 1,
                    "param1": 1,
                    "param36": 1,
                    "param_36": 2,
                    "param_byte": 1
                },
                "param_37": {
                    "alternative_compress_enabled": 1,
                    "gap_flag": 1,
                    "is_stripped": 1,
                    "note_flag": 1,
                    "param2": 1,
                    "param37": 1,
                    "param_37": 2,
                    "param_byte2": 1,
                    "symbol_type": 1
                },
                "param_38": {
                    "debug_info_section": 1,
                    "debug_section_size": 1,
                    "param3": 1,
                    "param38": 1,
                    "param_38": 1,
                    "stab_section_size": 1
                },
                "param_39": {
                    "alternative_machine_code": 2,
                    "debug_str_section": 1,
                    "param39": 1,
                    "param4": 1,
                    "param_39": 1,
                    "param_short": 1,
                    "stabstr_section_size": 1,
                    "symbol_size": 1
                },
                "param_4": {
                    "output_binary": 1
                },
                "param_40": {
                    "additional_data": 1,
                    "debug_gnu_section": 1,
                    "gap_sizes": 1,
                    "merged_note_content": 1,
                    "merged_note_section_data": 1,
                    "output_section_offsets": 1,
                    "param5": 1,
                    "param_padding_section": 1,
                    "section_addresses": 1,
                    "section_names": 1,
                    "section_sizes": 2,
                    "symbol_name": 1,
                    "temp_var2": 1
                },
                "param_41": {
                    "debug_lines_section": 1,
                    "has_merged_notes": 1,
                    "has_preceding_function": 1,
                    "param41": 1,
                    "param6": 1,
                    "pattern_match_result": 1,
                    "process_result": 1,
                    "success": 1
                },
                "param_42": {
                    "debug_abbrev_section": 1,
                    "error_message": 1,
                    "merged_notes": 1,
                    "param42": 1,
                    "param7": 1,
                    "pattern_matching_expression": 1,
                    "preceding_function_name": 1,
                    "string": 1,
                    "symbol_name": 1
                },
                "param_43": {
                    "data_type": 1,
                    "debug_info_header": 1,
                    "param43": 1,
                    "param8": 1,
                    "param_43": 1,
                    "stab_type_flag": 1,
                    "symbol_binding": 1,
                    "symbol_class": 1,
                    "type": 1
                },
                "param_44": {
                    "data_value": 1,
                    "debug_abbrev_header": 1,
                    "param44": 1,
                    "param9": 1,
                    "param_44": 1,
                    "stab_value": 1,
                    "symbol_type": 2,
                    "symbol_type_number": 1,
                    "type_code": 1
                },
                "param_7": {
                    "bfd": 5,
                    "bfd_handle": 1,
                    "binary": 12,
                    "binary_data": 1,
                    "binary_file": 4,
                    "binary_object": 1,
                    "input_binary": 4,
                    "param_ptr": 1
                },
                "param_8": {
                    "num_records": 2,
                    "num_sections": 14,
                    "num_symbols": 1,
                    "param_40_size": 1,
                    "param_count": 1,
                    "param_size": 1,
                    "section_count": 3,
                    "uint_parameter": 1
                },
                "param_9": {
                    "character": 1,
                    "debug_flag": 1,
                    "in_r10": 1,
                    "is_elf_format": 1,
                    "is_stripped": 1,
                    "is_type_propagation": 2,
                    "param9": 1,
                    "param_40": 1,
                    "param_bool": 1,
                    "section_options": 1
                },
                "pcVar22": {
                    "concatenated_string": 1
                },
                "pcVar3": {
                    "func": 1,
                    "function_pointer": 1
                },
                "pcVar31": {
                    "error_message": 2,
                    "error_msg": 1,
                    "msg": 1,
                    "pointer_to_char": 1,
                    "section_name": 3,
                    "stab_entry": 1,
                    "stab_section_name": 1
                },
                "plVar15": {
                    "current_record": 1,
                    "current_section": 3,
                    "merged_note_sections": 1,
                    "section": 2,
                    "section_data": 1,
                    "section_data_pointer": 1,
                    "section_entry": 1,
                    "section_ptr": 2,
                    "symbol": 1
                },
                "plVar20": {
                    "merged_note_section": 1,
                    "name_ptr": 1,
                    "pl_var_next": 1,
                    "pointer_to_long_variable": 1
                },
                "plVar25": {
                    "current_section": 2,
                    "current_section_data": 1,
                    "pl_var_temp": 1,
                    "pointer_to_long_variable_4": 1
                },
                "plVar28": {
                    "current_section": 1,
                    "merge_note_entries": 1,
                    "merged_note_sections": 1,
                    "note_section": 1,
                    "record_ptr": 1,
                    "section": 1,
                    "section_data_array": 1,
                    "section_pointer_iterator": 1,
                    "sections": 2,
                    "symbol_list": 1
                },
                "ppcVar34": {
                    "debug_symbols": 1,
                    "pointer_to_char_pointer": 1,
                    "section_names_temp": 1,
                    "stab_sections": 1,
                    "stab_subsection_names": 1
                },
                "ppuVar36": {
                    "debug_sections": 1,
                    "section_names": 4,
                    "stab_section_names": 1
                },
                "ppvVar36": {
                    "section_string_list": 1
                },
                "puVar1": {
                    "pointer_1": 1,
                    "relocation": 1,
                    "relocation_pointer": 1,
                    "section_flag": 1,
                    "section_flags": 1
                },
                "puVar26": {
                    "aux_data": 1,
                    "aux_entry": 1,
                    "aux_info_pointer": 1,
                    "aux_symbol": 1,
                    "current_entry": 1,
                    "current_symbol": 1,
                    "debug_info": 1,
                    "iterator": 1,
                    "merge_info": 1,
                    "note_entry": 1,
                    "note_section_iterator": 1,
                    "pointer_to_void": 1,
                    "pu_var_temp": 1,
                    "stab_ptr": 1,
                    "temp_var3": 1
                },
                "puVar30": {
                    "interval_data": 1,
                    "padding_array": 1,
                    "pointer_to_ulong": 1
                },
                "puVar32": {
                    "section_sizes_temp": 1,
                    "stab_entry": 1,
                    "symbol_data": 1
                },
                "puVar33": {
                    "aux_info_string_pointer": 1,
                    "note_section_contents": 1,
                    "padding_data": 1,
                    "ptr": 1,
                    "section_flags": 1,
                    "zeros": 1
                },
                "puVar36": {
                    "pointer_to_pointer": 1,
                    "section_names": 1
                },
                "puVar4": {
                    "dat": 1,
                    "gnu_debuglink_sections": 1,
                    "p_data": 1,
                    "pointer_2": 1
                },
                "pvVar35": {
                    "section_content": 1,
                    "section_contents": 1
                },
                "sVar18": {
                    "len": 1,
                    "str_length": 1,
                    "string_length": 2
                },
                "sVar19": {
                    "str_len": 1,
                    "str_length2": 1
                },
                "uVar12": {
                    "flags": 1,
                    "octets_per_byte": 1,
                    "section_flags": 3,
                    "symbol_flags": 2,
                    "uint_variable_1": 1,
                    "unsigned_integer_value": 1
                },
                "uVar13": {
                    "note_type": 2,
                    "octets_per_byte_2": 1,
                    "uint_variable_2": 1
                },
                "uVar16": {
                    "error_message_template": 1,
                    "localized_error_message": 1,
                    "message_with_params": 1,
                    "result": 1,
                    "unsigned_value": 1
                },
                "uVar17": {
                    "auxiliary_string": 1,
                    "error_message": 5,
                    "message": 2
                },
                "uVar21": {
                    "byte_size": 1,
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "merged_note_size": 1,
                    "offset": 1,
                    "section_offset": 1
                },
                "uVar24": {
                    "calculation_result_2": 1,
                    "ulong_variable_2": 1
                },
                "uVar29": {
                    "counter": 1,
                    "data_index": 1,
                    "loop_counter": 1,
                    "max_gap_size": 2,
                    "max_section_size": 2,
                    "max_size": 1,
                    "merged_note_section_index": 1,
                    "merged_stabs_data_index": 1,
                    "num_merged_notes": 1,
                    "section_index": 1,
                    "section_size_temp": 1,
                    "ulong_variable": 1
                },
                "uVar5": {
                    "default_data_type": 1,
                    "note_section_padding_byte": 1,
                    "ptr_value": 1,
                    "section_option_value": 1,
                    "undefined_flag": 1
                },
                "uVar6": {
                    "ushort_variable": 1
                },
                "uVar9": {
                    "result": 2,
                    "return_value": 1,
                    "undefined4_variable": 1
                },
                "unaff_R14": {
                    "abfd": 1,
                    "bfd": 2,
                    "bfd_handler": 2,
                    "bfd_object": 1,
                    "binary_format": 1,
                    "header": 1,
                    "unaff_data": 1
                }
            },
            "called": [
                "fprintf",
                "concat",
                "FUN_00112a33",
                "bfd_is_local_label",
                "FUN_0010870e",
                "xmalloc",
                "strcmp",
                "FUN_0010bf86",
                "bfd_map_over_sections",
                "FUN_00113fb0",
                "bfd_get_section_by_name",
                "FUN_0010bc80",
                "FUN_0010c892",
                "bfd_make_section_with_flags",
                "bfd_map_over_sections",
                "FUN_00115dc0",
                "htab_elements",
                "FUN_0010875d",
                "bfd_get_section_contents",
                "bfd_alt_mach_code",
                "bfd_coff_get_syment",
                "FUN_00119dd0",
                "xstrdup",
                "bfd_set_section_contents",
                "bfd_set_error",
                "htab_find",
                "FUN_00108863",
                "FUN_0010dac0",
                "FUN_0010be1a",
                "bfd_decode_symclass",
                "bfd_set_symtab",
                "FUN_00108b3e",
                "FUN_001159d0",
                "FUN_00116030",
                "FUN_0011a170",
                "bfd_get_error",
                "strlen",
                "FUN_0011173a",
                "FUN_0011a2e0",
                "bfd_errmsg",
                "FUN_0010be88",
                "qsort",
                "bfd_coff_get_auxent",
                "strcpy",
                "free",
                "FUN_001126c0",
                "FUN_00119ed0",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010bf20",
                "FUN_0010bbd3",
                "FUN_00112894",
                "FUN_00115d70",
                "FUN_00116110",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_set_section_size",
                "dcgettext",
                "FUN_001088ae",
                "bfd_octets_per_byte"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 process_debug_information_0010554f(void)\n\n{\n  uint *section_flags;\n  byte flag;\n  code *func;\n  undefined8 *gnu_debuglink_sections;\n  undefined default_data_type;\n  ushort ushort_variable;\n  char success;\n  char char_variable_2;\n  undefined4 result;\n  int integer_variable_1;\n  int comparison_value;\n  uint section_flags;\n  uint note_type;\n  long section_size;\n  long *current_section;\n  undefined8 message_with_params;\n  undefined *padding_buffer;\n  undefined8 error_message;\n  size_t string_length;\n  size_t str_len;\n  long *dest;\n  long *pl_var_next;\n  void *padding_buffer_00;\n  void *padding_buffer_01;\n  ulong offset;\n  char *__s;\n  char *concatenated_string;\n  long note_section_size;\n  ulong ulong_variable_2;\n  long *current_section;\n  undefined8 *pointer_to_void;\n  int line_number;\n  long *sections;\n  ulong max_section_size;\n  ulong *pointer_to_ulong;\n  char *section_name;\n  undefined4 *section_sizes_temp;\n  undefined *padding_data;\n  long *merged_note_sections;\n  char **section_names_temp;\n  void *section_contents;\n  undefined8 *bfd_handler;\n  undefined **section_names;\n  long section_index;\n  bool boolean_flag;\n  byte byte_flag_2;\n  long binary;\n  ulong num_sections;\n  char is_type_propagation;\n  undefined4 *stab_entry;\n  ulong max_gap_size;\n  char *merged_note_section_name;\n  undefined *gap_buffer;\n  uint target_machine_code;\n  long *section_pointers;\n  undefined8 num_sections;\n  undefined8 debug_link_filename;\n  long section_size;\n  char *debug_link_section_name;\n  long section_contents;\n  long *merged_notes;\n  ulong merged_notes_size;\n  long section_index;\n  long symbol_count;\n  void *section_contents;\n  long debug_link_size;\n  undefined8 debug_file;\n  byte param_36;\n  byte param_37;\n  undefined8 debug_section_size;\n  ushort alternative_machine_code;\n  long *section_sizes;\n  char process_result;\n  char *string;\n  undefined output_binary3;\n  short symbol_type;\n  \n  byte_flag_2 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    max_gap_size = 0;\n    gap_buffer = (undefined *)0x0;\n    section_pointers = (long *)0x0;\n    max_section_size = max_gap_size;\n  }\n  else {\n    section_size = (ulong)num_sections._4_4_ * 8;\n    section_pointers = (long *)xmalloc(section_size);\n    section_sizes = section_pointers;\n    bfd_map_over_sections(binary,store_value_and_update_pointer_0010870e,&stack0x00000140);\n    qsort(section_pointers,(ulong)num_sections._4_4_,8,compare_records_0010875d);\n    gap_buffer = (undefined *)xmalloc(section_size);\n    boolean_flag = DAT_00127978 != '\\0';\n    padding_data = gap_buffer;\n    for (; section_size != 0; section_size = section_size + -1) {\n      *padding_data = 0;\n      padding_data = padding_data + (ulong)byte_flag_2 * -2 + 1;\n    }\n    if (boolean_flag) {\n      max_section_size = 0;\n      max_gap_size = 0;\n      do {\n        pointer_to_ulong = (ulong *)(gap_buffer + max_section_size * 8);\n        sections = section_pointers + max_section_size;\n        offset = max_gap_size;\n        do {\n          max_gap_size = offset;\n          if (num_sections._4_4_ - 1 <= (uint)max_section_size) goto LAB_00107cd1;\n          max_section_size = (ulong)((uint)max_section_size + 1);\n          section_flags = bfd_octets_per_byte(binary,*sections);\n          note_type = bfd_octets_per_byte(binary);\n          section_size = *sections;\n          if ((*(uint *)(section_size + 0x24) & 0x102) != 0x102) break;\n          offset = (ulong)note_type * *(long *)(sections[1] + 0x38);\n          ulong_variable_2 = (ulong)section_flags * *(long *)(section_size + 0x38) + *(long *)(section_size + 0x40);\n          if (offset <= ulong_variable_2) break;\n          offset = offset - ulong_variable_2;\n          success = bfd_set_section_size();\n          if (success == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_bfd_error_message_001126c0(0,binary,*sections);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *pointer_to_ulong = offset;\n          sections = sections + 1;\n          pointer_to_ulong = pointer_to_ulong + 1;\n        } while (max_gap_size < offset);\n      } while( true );\n    }\n    max_gap_size = 0;\nLAB_00107cd1:\n    max_section_size = max_gap_size;\n    if (DAT_00127969 != '\\0') {\n      section_flags = bfd_octets_per_byte(binary);\n      section_size = section_pointers[num_sections._4_4_ - 1];\n      offset = DAT_00127970 * (ulong)section_flags;\n      ulong_variable_2 = *(long *)(section_size + 0x40) + (ulong)section_flags * *(long *)(section_size + 0x38);\n      if (ulong_variable_2 < offset) {\n        success = bfd_set_section_size();\n        if (success == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_bfd_error_message_001126c0(0,binary,section_pointers[num_sections._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          max_section_size = offset - ulong_variable_2;\n          *(ulong *)(gap_buffer + (ulong)(num_sections._4_4_ - 1) * 8) = max_section_size;\n          if (max_section_size <= max_gap_size) {\n            max_section_size = max_gap_size;\n          }\n        }\n      }\n    }\n  }\n  max_gap_size = max_section_size;\n  sections = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    stab_entry = (undefined4 *)0x0;\n  }\n  else {\n    section_names = &PTR_s__stab_00125c60;\n    stab_entry = (undefined4 *)xmalloc(0x60);\n    section_sizes_temp = stab_entry;\n    for (section_size = 0x18; section_size != 0; section_size = section_size + -1) {\n      *section_sizes_temp = 0;\n      section_sizes_temp = section_sizes_temp + (ulong)byte_flag_2 * -2 + 1;\n    }\n    merged_note_section_name = (char *)0x0;\n    do {\n      padding_data = *section_names;\n      section_size = bfd_get_section_by_name(bfd_handler,padding_data);\n      section_index = bfd_get_section_by_name();\n      if ((section_size != 0) && (section_index != 0)) {\n        note_section_size = *(long *)(section_size + 0x40);\n        padding_buffer_00 = (void *)xmalloc(note_section_size);\n        success = bfd_get_section_contents(bfd_handler,section_size,padding_buffer_00,0,note_section_size);\n        if (success == '\\0') {\n          result = bfd_get_error();\n          bfd_errmsg(result);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_handler);\n          free(merged_note_section_name);\n          free(padding_buffer_00);\n        }\n        else {\n          max_section_size = *(ulong *)(section_index + 0x40);\n          padding_buffer_01 = (void *)xmalloc(max_section_size + 1);\n          is_type_propagation = bfd_get_section_contents(bfd_handler,section_index,padding_buffer_01,0);\n          if (is_type_propagation == '\\0') {\n            result = bfd_get_error();\n            bfd_errmsg(result);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_handler);\n            free(merged_note_section_name);\n          }\n          else {\n            *(undefined *)((long)padding_buffer_01 + max_section_size) = 0;\n            if ((merged_note_section_name != (char *)0x0) ||\n               (merged_note_section_name = (char *)allocate_and_initialize_data_structure_00112894(bfd_handler,1,sections), merged_note_section_name != (char *)0x0)) {\n              section_contents = 0;\n              section_size = 0;\n              for (section_contents = padding_buffer_00; section_contents <= (void *)((long)padding_buffer_00 + note_section_size + -0xc);\n                  section_contents = (void *)((long)section_contents + 0xc)) {\n                offset = (**(code **)(bfd_handler[1] + 0x40))(section_contents);\n                flag = *(byte *)((long)section_contents + 4);\n                result = (**(code **)(bfd_handler[1] + 0x58))((long)section_contents + 6);\n                section_size = (**(code **)(bfd_handler[1] + 0x40))((long)section_contents + 8);\n                if (flag == 0) {\n                  section_size = section_contents;\n                  section_contents = section_contents + section_size;\n                }\n                else {\n                  ulong_variable_2 = (offset & 0xffffffff) + section_size;\n                  if (ulong_variable_2 < max_section_size) {\n                    section_name = (char *)((long)padding_buffer_01 + ulong_variable_2);\n                    debug_link_section_name = (char *)0x0;\n                    while( true ) {\n                      string_length = strlen(section_name);\n                      if (((string_length == 0) || (concatenated_string = section_name + (string_length - 1), *concatenated_string != '\\')) ||\n                         ((ulong)((long)padding_buffer_00 + note_section_size) < (long)section_contents + 0x10U))\n                      goto LAB_001077fb;\n                      *concatenated_string = '\\0';\n                      section_contents = (void *)((long)section_contents + 0xc);\n                      integer_variable_1 = (**(code **)(bfd_handler[1] + 0x40))(section_contents);\n                      offset = (ulong)(uint)(integer_variable_1 + (int)section_size);\n                      if (max_section_size <= offset) break;\n                      section_name = (char *)concat(section_name,(long)padding_buffer_01 + offset,0);\n                      *concatenated_string = '\\';\n                      free(debug_link_section_name);\n                      debug_link_section_name = section_name;\n                    }\n                    error_message = *bfd_handler;\n                    concatenated_string = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,concatenated_string,error_message,padding_data,((long)section_contents - (long)padding_buffer_00) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)flag,result,section_size,section_name);\n                    success = process_debug_info_0011173a(stab_entry,merged_note_section_name,flag);\n                    if (success == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(debug_link_section_name);\n                      free(merged_note_section_name);\n                      free(padding_buffer_00);\n                      free(padding_buffer_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    error_message = *bfd_handler;\n                    section_name = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,section_name,error_message,padding_data,((long)section_contents - (long)padding_buffer_00) / 0xc,\n                            offset & 0xffffffff,(ulong)flag,((long)section_contents - (long)padding_buffer_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(padding_buffer_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(padding_buffer_01);\n          free(padding_buffer_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      section_names = section_names + 2;\n    } while (section_names != (undefined **)&DAT_00125c90);\n    if ((merged_note_section_name != (char *)0x0) && (success = process_debug_info_0010c892(), success == '\\0')) {\nLAB_00105981:\n      free(stab_entry);\n      goto LAB_00105588;\n    }\n    if (*(int *)(bfd_handler[1] + 8) == 1) {\n      section_size = 0;\n      for (current_section = sections; current_section < sections + num_sections; current_section = current_section + 1) {\n        (**(code **)(bfd_handler[1] + 0x218))(bfd_handler,*current_section,&stack0x00000140);\n        if (process_result == '-') {\n          if (((section_size == 0) && (section_size = allocate_and_initialize_data_structure_00112894(bfd_handler,0,sections), section_size == 0)) ||\n             ((string == (char *)0x0 || (*string == '\\0')))) goto LAB_00105981;\n          section_name = (char *)0x0;\n          concatenated_string = string;\n          while (((*concatenated_string != '\\0' && (string_length = strlen(concatenated_string), concatenated_string[string_length - 1] == '\\')) &&\n                 (current_section + 1 < sections + num_sections))) {\n            __s = (char *)xstrdup(concatenated_string);\n            string_length = strlen(__s);\n            __s[string_length - 1] = '\\0';\n            concatenated_string = (char *)concat(__s,*(undefined8 *)(current_section[1] + 8),0);\n            free(__s);\n            free(section_name);\n            current_section = current_section + 1;\n            section_name = concatenated_string;\n          }\n          update_data_entry_001088ae(output_binary3,(int)symbol_type,section_sizes,concatenated_string);\n          is_type_propagation = process_debug_info_0011173a(stab_entry,section_size,output_binary3);\n          if (is_type_propagation == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((section_size != 0) && (success = process_debug_info_0010c892(), success == '\\0')) goto LAB_00105981;\n    }\n    if (is_type_propagation == '\\0') {\n      if ((*(int *)(bfd_handler[1] + 8) == 2) && (num_sections != 0)) {\n        section_sizes = (long *)0x0;\n        merged_notes = sections;\n        section_index = 0;\n        merged_notes_size = num_sections;\n        symbol_count = 0;\n        pointer_to_void = (undefined8 *)&stack0x00000148;\n        for (section_size = 0x22; section_size != 0; section_size = section_size + -1) {\n          *(undefined4 *)pointer_to_void = 0;\n          pointer_to_void = (undefined8 *)((long)pointer_to_void + (ulong)byte_flag_2 * -8 + 4);\n        }\n        success = '\\0';\n        line_entry = (int *)0x0;\n        section_flags = 0;\n        merged_note_section_name = (char *)0x0;\n        debug_link_section_name = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= section_index) goto LAB_00105590;\n            section_size = sections[section_index];\n            char_variable_2 = bfd_coff_get_syment(bfd_handler,section_size,&stack0x000000e0);\n            section_index = symbol_count;\n            if (char_variable_2 == '\\0') {\n              result = bfd_get_error();\n              bfd_errmsg(result);\n              section_name = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            section_name = *(char **)(section_size + 8);\n            pointer_to_void = (undefined8 *)0x0;\n            section_index = section_index + 1;\n            symbol_count = (ulong)param_37 + 1 + symbol_count;\n            if (param_37 != 0) {\n              pointer_to_void = &stack0x00000110;\n              char_variable_2 = bfd_coff_get_auxent(bfd_handler,section_size,0);\n              if (char_variable_2 == '\\0') {\n                result = bfd_get_error();\n                bfd_errmsg(result);\n                section_name = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (debug_link_section_name != (char *)section_index) break;\n            if (param_36 != 0x67) {\n              char_variable_2 = initialize_debug_info_0010bbd3(stab_entry);\n              if (char_variable_2 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            debug_link_section_name = (char *)debug_link_size;\n            char_variable_2 = initialize_debug_info_0010bbd3(stab_entry);\n            if (char_variable_2 == '\\0') goto LAB_00105981;\n          }\n          ushort_variable = debug_file._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            note_section_size = parse_coff_type_and_create_memory_0010dac0(bfd_handler,&stack0x000000c0,&stack0x00000140);\n            if (note_section_size == 0) break;\n            char_variable_2 = process_debug_info_00112a33(&stack0x00000140,section_size,section_index);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (debug_file._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)debug_file._6_2_ & *(uint *)(bfd_handler[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(bfd_handler[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                line_entry = (int *)(**(code **)(bfd_handler[1] + 0x238))(bfd_handler);\n                section_flags = (uint)ushort_variable;\n                merged_note_section_name = section_name;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              integer_variable_1 = strcmp(section_name,\".bb\");\n              if (integer_variable_1 == 0) {\n                char_variable_2 = debug_block_start_0010be88(stab_entry);\n              }\n              else {\n                integer_variable_1 = strcmp(section_name,\".eb\");\n                if (integer_variable_1 != 0) goto switchD_00106e1a_caseD_68;\n                char_variable_2 = end_block_debug_0010bf20(stab_entry);\n              }\n              break;\n            case 0x65:\n              integer_variable_1 = strcmp(section_name,\".bf\");\n              if (integer_variable_1 == 0) {\n                if (merged_note_section_name != (char *)0x0) {\n                  note_type = (int)section_flags >> ((byte)*(undefined4 *)(bfd_handler[0x22] + 0x44) & 0x1f);\n                  section_index = parse_coff_type_and_create_memory_0010dac0(bfd_handler,&stack0x000000c0,&stack0x00000140,section_index,\n                                        note_type ^ (section_flags ^ note_type) &\n                                                 *(uint *)(bfd_handler[0x22] + 0x38),pointer_to_void,0,\n                                        stab_entry);\n                  if ((section_index == 0) || (success = record_debug_function_0010bc80(stab_entry), success == '\\0'))\n                  goto LAB_00105981;\n                  if (line_entry != (int *)0x0) {\n                    integer_variable_1 = 0;\n                    if (param_37 != 0) {\n                      integer_variable_1 = alternative_machine_code - 1;\n                    }\n                    section_size = *(long *)(*(long *)(section_size + 0x20) + 0x30);\n                    while( true ) {\n                      line_number = line_entry[4];\n                      if (line_number == 0) break;\n                      char_variable_2 = record_line_debug_info_0010bf86(stab_entry,integer_variable_1 + line_number,\n                                           *(long *)(line_entry + 6) + section_size);\n                      line_entry = line_entry + 4;\n                      if (char_variable_2 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  section_flags = 0;\n                  line_entry = (int *)0x0;\n                  merged_note_section_name = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                section_name = \"%ld: .bf without preceding function\";\n              }\n              else {\n                integer_variable_1 = strcmp(section_name,\".ef\");\n                if (integer_variable_1 != 0) goto switchD_00106e1a_caseD_68;\n                if (success != '\\0') {\n                  success = handle_debug_end_function_0010be1a(stab_entry);\n                  if (success == '\\0') goto LAB_00105981;\n                  success = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                section_name = \"%ld: unexpected .ef\\n\";\n              }\n              error_message = dcgettext(0,section_name,5);\n              print_error_message_with_params_00119ed0(error_message);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (char_variable_2 != '\\0');\n      }\n      else {\n        section_name = \"%s: no recognized debugging information\";\nLAB_00105968:\n        error_message = dcgettext(0,section_name,5);\n        print_error_message_with_params_00119ed0(error_message);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (num_sections != 0) {\n        sections = DAT_001278b0 + num_sections;\n        current_section = DAT_001278b0;\n        do {\n          section_flags = *(uint *)(*current_section + 0x18);\n          if ((section_flags & 0x1000000) != 0) {\n            *(uint *)(*current_section + 0x18) = section_flags & 0xfeffffff;\n          }\n          current_section = current_section + 1;\n        } while (sections != current_section);\n      }\n    }\n    else {\n      for (section_size = *(long *)(binary + 0x90); section_size != 0; section_size = *(long *)(section_size + 8)) {\n        if (*(long *)(section_size + 0xe8) != 0) {\n          section_flags = (uint *)(*(long *)(section_size + 0xe8) + 0x18);\n          *section_flags = *section_flags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      section_size = xmalloc();\n      sections = DAT_001278b0;\n      target_machine_code = *(uint *)((long)bfd_handler + 0x44) & 0x42;\n      DAT_001278a8 = section_size;\n      if (num_sections == 0) {\n        max_section_size = 0;\n      }\n      else {\n        max_section_size = 0;\n        _is_type_propagation = 0;\n        do {\n          integer_variable_1 = DAT_001279a0;\n          current_section = (long *)sections[_is_type_propagation];\n          func = (code *)current_section[4];\n          section_flags = *(uint *)(current_section + 3);\n          pl_var_next = (long *)current_section[1];\n          current_section = pl_var_next;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            line_number = 0;\n            pointer_to_void = DAT_001279a8;\n            while ((line_number < integer_variable_1 && (section_name = (char *)pointer_to_void[5], section_name != (char *)0x0))) {\n              if (section_name != \"\") {\n                comparison_value = strcmp(section_name,(char *)pl_var_next);\n                if (comparison_value == 0) {\n                  free(section_name);\n                  offset = max_section_size + 1;\n                  pointer_to_void[5] = \"\";\n                  message_with_params = extract_section_data_0011a2e0(pointer_to_void);\n                  error_message = DAT_001278d0;\n                  *(undefined8 *)(section_size + max_section_size * 8) = message_with_params;\n                  section_index = htab_elements(error_message);\n                  if ((section_index != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                pointer_to_void = (undefined8 *)*pointer_to_void;\n              }\n              line_number = line_number + 1;\n            }\n          }\n          section_index = htab_elements(DAT_001278d0);\n          offset = max_section_size;\n          if ((section_index != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pl_var_next != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)pl_var_next == '_') && (*(char *)((long)pl_var_next + 1) == '_')) &&\n                 (integer_variable_1 = strcmp((char *)((ulong)(*(char *)((long)pl_var_next + 2) == '_') +\n                                          (long)pl_var_next),\"__gnu_lto_slim\"), integer_variable_1 == 0)) {\n                error_message = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(error_message);\n              }\n            }\n            match_found = 0;\n            section_sizes = pl_var_next;\n            section_index = htab_find(DAT_001278d0);\n            if (((section_index == 0) || (current_section = *(long **)(section_index + 8), pl_var_next == current_section)) &&\n               (current_section = pl_var_next, section_names_temp = DAT_001278d8, (section_flags & 0x100) != 0)) {\n              for (; section_names_temp != (char **)0x0; section_names_temp = (char **)section_names_temp[3]) {\n                integer_variable_1 = strcmp(*section_names_temp,(char *)pl_var_next);\n                if (integer_variable_1 == 0) {\n                  current_section = (long *)section_names_temp[1];\n                  break;\n                }\n              }\n            }\n            current_section[1] = (long)current_section;\n            success = *(char *)current_section;\n            if (success != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            section_name = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              section_index = bfd_handler[1];\n              success = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          success = *(char *)pl_var_next;\n          if (success == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          section_name = DAT_00127908;\n          section_index = bfd_handler[1];\n          if (*(char *)(section_index + 0x1c) == success) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((section_flags & 0x82) == 0 && (func != bfd_map_over_sections)) &&\n                  ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              current_section = (long *)((long)current_section + 1);\n              current_section[1] = (long)current_section;\n              goto joined_r0x00106565;\n            }\n            success = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (success == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              current_section = (long *)((long)current_section + 1);\n              current_section[1] = (long)current_section;\n              string_length = strlen((char *)current_section);\n              section_index = string_length + 2;\nLAB_001066bc:\n              string_length = strlen(section_name);\n              pl_var_next = (long *)xmalloc(string_length + section_index);\n              goto LAB_001066d0;\n            }\n            *(char *)current_section = success;\n            current_section[1] = (long)current_section;\n            max_section_size = offset;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              max_section_size = offset;\n              if (section_name == (char *)0x0) goto LAB_00105b32;\n              string_length = strlen((char *)current_section);\n              str_len = strlen(section_name);\n              dest = (long *)xmalloc(str_len + string_length + 1);\n              pl_var_next = dest;\n            }\n            else {\nLAB_0010668d:\n              section_name = DAT_00127908;\n              if ((*(char *)(section_index + 0x1c) != '\\0') && (success != *(char *)(section_index + 0x1c)))\n              goto joined_r0x00106565;\n              string_length = strlen((char *)current_section);\n              section_index = string_length + 2;\n              if (section_name != (char *)0x0) goto LAB_001066bc;\n              pl_var_next = (long *)xmalloc(section_index);\nLAB_001066d0:\n              dest = (long *)((long)pl_var_next + 1);\n              *(char *)pl_var_next = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            section_name = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)dest,DAT_00127908);\n              string_length = strlen(section_name);\n              dest = (long *)((long)dest + string_length);\n            }\n            strcpy((char *)dest,(char *)current_section);\n            current_section[1] = (long)pl_var_next;\n            current_section = pl_var_next;\n            max_section_size = offset;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((section_flags & 0x20) == 0) &&\n             (((section_flags & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(current_section[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((target_machine_code == 0) &&\n                (((section_flags & 0x82) != 0 || ((*(byte *)(current_section[4] + 0x25) & 0x10) != 0)))) ||\n               (integer_variable_1 = bfd_decode_symclass(current_section), integer_variable_1 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                section_index = htab_find();\n                if (section_index == 0) goto LAB_00105c07;\n              }\n              else {\n                match_found = match_found & 0xffffffffffffff00;\n                section_sizes = current_section;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (process_result == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((section_flags & 0x82) == 0) && (func != bfd_map_over_sections)) &&\n                    ((*(byte *)(current_section[4] + 0x25) & 0x10) == 0)) {\n              if ((section_flags & 4) == 0) {\n                if (((*(int *)(bfd_handler[1] + 8) != 2) ||\n                    (section_index = *(long *)(current_section[4] + 0xd0), section_index == 0)) ||\n                   (*(long *)(section_index + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    success = bfd_is_local_label(bfd_handler);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              success = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (success == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            section_index = htab_find();\n            if (section_index != 0) {\nLAB_0010687f:\n              error_message = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_with_params_00119ed0(error_message);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            match_found = match_found & 0xffffffffffffff00;\n            section_sizes = current_section;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (process_result != '\\0') goto LAB_0010687f;\n          }\n          if ((section_flags & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              match_found = match_found & 0xffffffffffffff00;\n              section_sizes = current_section;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (process_result != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            section_index = htab_find();\n            if (section_index == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((section_flags & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              section_index = htab_find();\n              if (section_index != 0) goto LAB_00105c2c;\n            }\n            else {\n              match_found = match_found & 0xffffffffffffff00;\n              section_sizes = current_section;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (process_result != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            success = process_and_check_section_options_001159d0(current_section[4]);\n            if (success == '\\0') {\n              if (((section_flags & 0x800002) == 0) && (func != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((section_flags & 0x82) != 0) {\n                  success = check_pattern_match_00115d70(current_section);\n                  if ((success == '\\0') &&\n                     ((section_index = htab_elements(DAT_001279d8), section_index == 0 ||\n                      (success = check_pattern_match_00115d70(current_section), success != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (note_type = *(uint *)(current_section + 3), (note_type & 0x200000) != 0)) ||\n                         (section_index = *current_section, section_index == 0)) ||\n                        ((*(int *)(*(long *)(section_index + 8) + 8) != 5 ||\n                         (*(long *)(section_index + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)current_section + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    note_type = *(uint *)(current_section + 3);\n                  }\n                  *(uint *)(current_section + 3) = note_type & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((section_flags & 1) != 0) && (success = check_pattern_match_00115d70(current_section), success != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (success = check_pattern_match_00115d70(current_section), success != '\\0')) {\n                  *(uint *)(current_section + 3) = *(uint *)(current_section + 3) & 0xff7ffffd | 0x80;\n                }\n                if (func != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(section_size + max_section_size * 8) = current_section;\n              max_section_size = max_section_size + 1;\n            }\n          }\n          _is_type_propagation = _is_type_propagation + 1;\n        } while (num_sections != _is_type_propagation);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        pointer_to_void = DAT_001279a8;\n        integer_variable_1 = DAT_001279a0;\n        for (section_index = 0; section_index < integer_variable_1; section_index = section_index + 1) {\n          section_name = (char *)pointer_to_void[5];\n          if (section_name == (char *)0x0) {\n            note_section_size = max_section_size * 8;\n            max_section_size = max_section_size + 1;\n            error_message = extract_section_data_0011a2e0(pointer_to_void,binary);\n            *(undefined8 *)(section_size + note_section_size) = error_message;\n            integer_variable_1 = DAT_001279a0;\n          }\n          else if (section_name != \"\") {\n            error_message = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(error_message,section_name);\n          }\n          pointer_to_void = (undefined8 *)*pointer_to_void;\n        }\n      }\n      boolean_flag = DAT_00127980 == '\\0';\n      *(undefined8 *)(section_size + max_section_size * 8) = 0;\n      if ((boolean_flag) || (stab_entry == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = max_section_size & 0xffffffff;\n        goto LAB_00105710;\n      }\n      integer_variable_1 = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((integer_variable_1 == 5) || (integer_variable_1 == 2)) {\n        section_contents = (void *)0x0;\n        success = analyze_binary_0011378f(binary,stab_entry,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (success != '\\0') {\n          section_size = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          section_index = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((section_size == 0) || (section_index == 0)) ||\n              (success = bfd_set_section_size(section_size,debug_section_size), success == '\\0')) ||\n             (success = bfd_set_section_size(section_index,section_sizes), success == '\\0')) {\n            section_name = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(section_size + 0x7c) = 2;\n            *(undefined4 *)(section_index + 0x7c) = 0;\n            success = bfd_set_section_contents(binary,section_size,merged_notes,0,debug_section_size);\n            if ((success != '\\0') &&\n               (success = bfd_set_section_contents(binary,section_index,section_contents,0,section_sizes), success != '\\0')\n               ) {\n              free(stab_entry);\n              goto LAB_00105cfa;\n            }\n            section_name = \"can\\'t set debugging section contents\";\n          }\n          error_message = dcgettext(0,section_name,5);\n          print_bfd_error_message_001126c0(0,binary,0,error_message);\n          free(section_contents);\n          free(stab_entry);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        error_message = **(undefined8 **)(binary + 8);\n        message_with_params = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,binary,0,message_with_params,error_message);\n      }\n      free(stab_entry);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(bfd_handler,process_relocation_00116030,DAT_001278b0);\n      integer_variable_1 = bfd_get_error();\n      if (integer_variable_1 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    section_size = htab_elements(DAT_001279f8);\n    if (((section_size != 0) ||\n        ((((section_size = htab_elements(DAT_00127a08), section_size != 0 ||\n           (section_size = htab_elements(DAT_001279e8), section_size != 0)) ||\n          (section_size = htab_elements(DAT_001279e0), section_size != 0)) ||\n         ((section_size = htab_elements(DAT_001279d8), section_size != 0 ||\n          (section_size = htab_elements(DAT_001279d0), section_size != 0)))))) ||\n       ((((section_size = htab_elements(DAT_001278d0), section_size != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278a8,num_sections & 0xffffffff);\n    bfd_map_over_sections(bfd_handler,process_section_options_00115dc0,binary);\n    bfd_map_over_sections(bfd_handler,process_section_contents_00116110,binary);\n    for (pointer_to_void = DAT_001279c0; gnu_debuglink_sections = DAT_001279b8, pointer_to_void != (undefined8 *)0x0;\n        pointer_to_void = (undefined8 *)*pointer_to_void) {\n      success = bfd_set_section_contents(binary,pointer_to_void[5],pointer_to_void[4],0,pointer_to_void[3]);\n      if (success == '\\0') {\n        print_bfd_error_message_001126c0(0,binary,pointer_to_void[5],0);\n        return 0;\n      }\n    }\n    for (; gnu_debuglink_sections != (undefined8 *)0x0; gnu_debuglink_sections = (undefined8 *)*gnu_debuglink_sections) {\n      error_message = *(undefined8 *)(gnu_debuglink_sections[5] + 0x60);\n      success = bfd_set_section_contents(binary,error_message,gnu_debuglink_sections[4],0,gnu_debuglink_sections[3]);\n      if (success == '\\0') {\n        print_bfd_error_message_001126c0(0,binary,error_message,0);\n        return 0;\n      }\n    }\n    if (merged_note_sections == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        error_message = *bfd_handler;\n        message_with_params = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_with_params_00119ed0(message_with_params,error_message);\n      }\n    }\n    else {\n      sections = (long *)0x0;\n      for (pointer_to_void = *(undefined8 **)(binary + 0x90); pointer_to_void != (undefined8 *)0x0;\n          pointer_to_void = (undefined8 *)pointer_to_void[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(pointer_to_void[0x1a] + 4) == 7 &&\n            (success = string_comparison_function_00113fb0(*pointer_to_void,\".gnu.build.attributes\"), success != '\\0')))) {\n          if (sections == (long *)0x0) {\n            sections = merged_note_sections;\n          }\n          current_section = merged_note_sections;\n          if (*(undefined8 **)(*sections + 0x60) == pointer_to_void) {\nLAB_0010625f:\n            section_name = \"error: failed to merge notes\";\n            if (sections[1] != 0) {\n              success = bfd_set_section_contents(binary,pointer_to_void,sections[1],0,sections[2]);\n              if (success == '\\0') {\n                error_message = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,binary,pointer_to_void,error_message);\n                return 0;\n              }\n              sections = (long *)sections[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sections = current_section;\n              if (*(undefined8 **)(*current_section + 0x60) == pointer_to_void) goto LAB_0010625f;\n              sections = (long *)current_section[3];\n              current_section = sections;\n            } while (sections != (long *)0x0);\n            section_name = \"error: failed to locate merged notes\";\n          }\n          error_message = dcgettext(0,section_name,5);\n          print_bfd_error_message_001126c0(0,binary,pointer_to_void,error_message);\n        }\nLAB_001061be:\n      }\n      do {\n        sections = (long *)merged_note_sections[3];\n        free((void *)merged_note_sections[1]);\n        free(merged_note_sections);\n        merged_note_sections = sections;\n      } while (sections != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (success = bfd_fill_in_gnu_debuglink_section(binary,debug_link_filename), section_size = DAT_00127a10,\n       success != '\\0')) {\n      if (gap_buffer != (undefined *)0x0) {\n        if (0x2000 < max_gap_size) {\n          max_gap_size = 0x2000;\n        }\n        section_size = 0;\n        padding_buffer = (undefined *)xmalloc(max_gap_size);\n        default_data_type = DAT_00127979;\n        padding_data = padding_buffer;\n        for (max_gap_size = max_gap_size & 0xffffffff; max_gap_size != 0; max_gap_size = max_gap_size - 1) {\n          *padding_data = default_data_type;\n          padding_data = padding_data + (ulong)byte_flag_2 * -2 + 1;\n        }\n        for (; (uint)section_size < num_sections._4_4_; section_size = section_size + 1) {\n          max_section_size = *(ulong *)(gap_buffer + section_size * 8);\n          if (max_section_size != 0) {\n            section_index = *(long *)(*section_pointers + 0x40) - max_section_size;\n            do {\n              offset = 0x2000;\n              if (max_section_size < 0x2001) {\n                offset = max_section_size;\n              }\n              success = bfd_set_section_contents(binary,*section_pointers,padding_buffer,section_index,offset);\n              if (success == '\\0') {\n                print_bfd_error_message_001126c0(0,binary,*section_pointers,0);\n                free(padding_buffer);\n                return 0;\n              }\n              section_index = section_index + offset;\n              max_section_size = max_section_size - offset;\n            } while (max_section_size != 0);\n          }\n          section_pointers = section_pointers + 1;\n        }\n        free(padding_buffer);\n        free(gap_buffer);\n      }\n      result = (**(code **)(*(long *)(binary + 8) + 0x140))(bfd_handler);\n      if ((char)result != '\\0') {\n        if (DAT_00127910 == 0) {\n          return result;\n        }\n        success = bfd_alt_mach_code(binary,DAT_00127910 & 0xffffffff);\n        max_section_size = DAT_00127910;\n        if (success == '\\0') {\n          error_message = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_with_params_00119ed0(error_message,max_section_size);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            error_message = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_with_params_00119ed0(error_message);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127910;\n            return result;\n          }\n          error_message = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_with_params_00119ed0(error_message);\n          return result;\n        }\n        return result;\n      }\n      error_message = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,binary,0,error_message);\n    }\n    else {\n      error_message = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,binary,0,error_message,section_size);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_debug_information_0010554f",
            "entrypoint": "0x0010554f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010554f": "process_debug_information_0010554f",
                "__dest": "dest",
                "__ptr": "padding_buffer",
                "__ptr_02": "stab_entry",
                "_param_15": "line_entry",
                "_param_41": "match_found",
                "bVar2": "flag",
                "bVar38": "boolean_flag",
                "bVar39": "byte_flag_2",
                "cVar7": "success",
                "cVar8": "char_variable_2",
                "iVar10": "integer_variable_1",
                "iVar11": "comparison_value",
                "iVar27": "line_number",
                "in_R10": "merged_note_sections",
                "in_stack_00000068": "num_sections",
                "in_stack_000000d8": "symbol_count",
                "in_stack_000000f8": "debug_file",
                "lVar14": "section_size",
                "lVar15": "long_variable_2",
                "lVar23": "note_section_size",
                "lVar28": "note_data",
                "lVar37": "section_index",
                "param_12": "max_gap_size",
                "param_13": "merged_note_section_name",
                "param_14": "gap_buffer",
                "param_15": "target_machine_code",
                "param_17": "section_pointers",
                "param_21": "debug_link_filename",
                "param_23": "section_size",
                "param_24": "debug_link_section_name",
                "param_26": "section_contents",
                "param_30": "merged_notes",
                "param_31": "merged_notes_size",
                "param_32": "section_index",
                "param_33": "section_contents",
                "param_34": "debug_link_size",
                "param_38": "debug_section_size",
                "param_39": "alternative_machine_code",
                "param_4": "output_binary",
                "param_40": "section_sizes",
                "param_41": "process_result",
                "param_42": "string",
                "param_44": "symbol_type",
                "param_7": "binary",
                "param_8": "num_sections",
                "param_9": "is_type_propagation",
                "pcVar22": "concatenated_string",
                "pcVar3": "func",
                "pcVar31": "section_name",
                "plVar15": "current_section",
                "plVar20": "pl_var_next",
                "plVar25": "current_section",
                "plVar28": "sections",
                "ppcVar34": "section_names_temp",
                "ppuVar36": "section_names",
                "puVar1": "section_flags",
                "puVar26": "pointer_to_void",
                "puVar30": "pointer_to_ulong",
                "puVar32": "section_sizes_temp",
                "puVar33": "padding_data",
                "puVar36": "pointer_to_pointer",
                "puVar4": "gnu_debuglink_sections",
                "pvVar35": "section_contents",
                "sVar18": "string_length",
                "sVar19": "str_len",
                "uVar12": "section_flags",
                "uVar13": "note_type",
                "uVar16": "message_with_params",
                "uVar17": "error_message",
                "uVar21": "offset",
                "uVar24": "ulong_variable_2",
                "uVar29": "max_section_size",
                "uVar5": "default_data_type",
                "uVar6": "ushort_variable",
                "uVar9": "result",
                "unaff_R14": "bfd_handler"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00105828": {
            "additional_data": {
                "FUN_00105828": {
                    "check_architecture": 3,
                    "check_architecture_compatibility": 3,
                    "check_file_architecture": 6,
                    "check_file_format": 1,
                    "check_input_file_architecture": 3,
                    "detect_and_print_architecture_error": 1,
                    "detect_architecture": 3,
                    "format_architecture_error": 1,
                    "identify_and_print_arch": 1,
                    "identify_architecture": 4,
                    "print_architecture_error_message": 1,
                    "recognize_and_print_error": 1,
                    "recognize_architecture": 1,
                    "recognize_input_file_format": 1,
                    "recognize_input_format": 1
                },
                "iVar1": {
                    "arch": 2,
                    "arch_code": 1,
                    "arch_type": 2,
                    "architecture": 16,
                    "architecture_code": 1,
                    "architecture_type": 2,
                    "bfd_architecture": 1
                },
                "uVar2": {
                    "arch": 3,
                    "arch_formatted": 1,
                    "arch_info": 1,
                    "arch_value": 2,
                    "architecture": 5,
                    "bfd_machine": 1,
                    "file_architecture": 1,
                    "format": 2,
                    "formatted_arch": 1,
                    "mach": 1,
                    "machine": 7,
                    "machine_arch": 1,
                    "machine_code": 1,
                    "machine_type": 3
                },
                "uVar3": {
                    "arch_mach": 1,
                    "arch_mach_string": 2,
                    "arch_machine": 1,
                    "arch_machine_printable": 1,
                    "arch_string": 2,
                    "error_string": 1,
                    "formatted_arch": 6,
                    "formatted_arch_mach": 1,
                    "formatted_architecture": 7,
                    "formatted_string": 2,
                    "input_arch": 1,
                    "mach": 1,
                    "machine": 4,
                    "str_input": 1
                },
                "uVar4": {
                    "error_message": 28,
                    "error_msg": 2,
                    "str_error": 1
                }
            },
            "called": [
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "FUN_00119ed0",
                "bfd_get_mach",
                "FUN_001125fa",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nundefined8 check_input_file_architecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 formatted_architecture;\n  undefined8 error_message;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    formatted_architecture = get_formatted_string_001125fa();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_with_params_00119ed0(error_message,formatted_architecture);\n  }\n  else {\n    formatted_architecture = bfd_get_mach();\n    machine = bfd_get_arch();\n    formatted_architecture = bfd_printable_arch_mach(machine,formatted_architecture);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_with_params_00119ed0(error_message,formatted_architecture);\n  }\n  return 0;\n}\n\n",
            "current_name": "check_input_file_architecture_00105828",
            "entrypoint": "0x00105828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00105828": "check_input_file_architecture_00105828",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "formatted_architecture",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00107880": {
            "called": [
                "bfd_get_arch",
                "__errno_location",
                "xmalloc",
                "fopen",
                "strerror",
                "bfd_create_gnu_debuglink_section",
                "FUN_00113fb0",
                "FUN_00114190",
                "FUN_0010551d",
                "bfd_get_section_by_name",
                "free",
                "FUN_001126c0",
                "FUN_0010554f",
                "bfd_make_section_with_flags",
                "FUN_00115530",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_malloc_and_get_section",
                "FUN_00119ed0",
                "bfd_get_full_section_contents",
                "FUN_00105828",
                "FUN_001163d0",
                "fclose",
                "bfd_set_format",
                "bfd_set_section_size",
                "dcgettext",
                "fwrite"
            ],
            "calling": [
                "FUN_001152b6"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_with_params_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_with_params_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_input_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_function_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_function_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_with_params_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_with_params_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_with_params_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_with_params_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_debug_information_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_and_initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = allocate_and_initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = process_debug_info_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_and_create_memory_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_info_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_block_start_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debug_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_and_create_memory_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = record_debug_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = handle_debug_end_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_with_params_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_with_params_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_data_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_with_params_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_and_check_section_options_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_data_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = analyze_binary_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_contents_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_with_params_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_function_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_with_params_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_with_params_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_with_params_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_function_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)improved_parse_gnu_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107880",
            "entrypoint": "0x00107880",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00107976": {
            "called": [
                "bfd_get_arch",
                "bfd_set_start_address",
                "bfd_set_file_flags",
                "FUN_001152b6",
                "printf",
                "bfd_get_mach",
                "FUN_001125fa",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114e50"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_formatted_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_with_params_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_with_params_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_with_params_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_input_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = string_comparison_function_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_function_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_with_params_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = find_matching_entry_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_matching_entry_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_matching_entry_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_with_params_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_with_params_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_with_params_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_debug_information_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_and_initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = allocate_and_initialize_data_structure_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_and_create_memory_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_debug_info_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_block_start_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debug_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_and_create_memory_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = handle_debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_with_params_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_with_params_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_data_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_message_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_with_params_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_and_check_section_options_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_data_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = analyze_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_bfd_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_contents_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_with_params_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_function_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_bfd_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_with_params_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_with_params_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_with_params_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_function_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)improved_parse_gnu_build_attributes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00107976",
            "entrypoint": "0x00107976",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00108072": {
            "additional_data": {
                "DAT_00127990": {
                    "data_variable": 1
                },
                "DAT_00127a20": {
                    "data_variable2": 1,
                    "error_flag": 2,
                    "flag_value": 1
                },
                "FUN_00108072": {
                    "extract_data": 1,
                    "initialize_data": 1,
                    "initialize_memory": 1,
                    "set_alignment_and_copy_data": 1,
                    "set_and_copy_data": 7,
                    "set_data_entry_sizes": 1,
                    "set_data_size": 6,
                    "set_data_size_alignment": 1,
                    "set_size_and_alignment": 10,
                    "update_size_and_alignment": 1
                },
                "LAB_00115695": {
                    "skip_to_label_15695": 1
                },
                "LAB_001156c4": {
                    "skip_to_label_156c4": 1
                },
                "LAB_00115860": {
                    "skip_to_label_15860": 1
                },
                "LAB_00115889": {
                    "skip_to_label_15889": 1
                },
                "_DAT_00127990": {
                    "constant": 1,
                    "data_offset": 1,
                    "data_value": 1
                },
                "bVar1": {
                    "b_var": 1,
                    "byte_flag": 2,
                    "byte_value": 5,
                    "byte_var": 8,
                    "byte_var1": 1,
                    "byte_variable": 3,
                    "flag": 4,
                    "flag_2": 1,
                    "temp_var5": 1
                },
                "cVar3": {
                    "char_flag": 2,
                    "char_value": 2,
                    "char_var": 6,
                    "char_var3": 1,
                    "char_variable": 3,
                    "result": 4,
                    "return_value": 2,
                    "status": 1,
                    "temp_var6": 1
                },
                "copy_private_data_0010808f": {
                    "copy_private_data": 5
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_localized_text": 1,
                    "get_text": 2
                },
                "find_matching_entry_00114190": {
                    "find_matching_entry": 4
                },
                "find_matching_value_00115d00": {
                    "find_matching_value": 4
                },
                "lVar5": {
                    "error_message": 16,
                    "error_message_size": 1,
                    "error_msg": 6,
                    "failed_msg": 1,
                    "failed_set_size_text": 1,
                    "failed_size_message": 1,
                    "localized_text": 1,
                    "size_error": 3
                },
                "lVar6": {
                    "entry": 1,
                    "entry_address": 1,
                    "l_var6": 1,
                    "matching_entry": 11,
                    "matching_entry1": 4,
                    "matching_entry_1": 11,
                    "matching_entry_result": 1
                },
                "lVar7": {
                    "addr": 1,
                    "address": 1,
                    "adjusted_value": 1,
                    "data_address": 1,
                    "entry_address": 3,
                    "entry_offset": 2,
                    "entry_value": 1,
                    "l_var7": 1,
                    "matching_entry2": 4,
                    "matching_entry_2": 10,
                    "matching_entry_offset": 1,
                    "matching_entry_value": 1,
                    "matching_value": 2,
                    "offset": 1
                },
                "lVar8": {
                    "data_offset": 2,
                    "entry_6": 1,
                    "entry_data": 1,
                    "entry_data_2": 1,
                    "entry_offset": 2,
                    "entry_offset_2": 1,
                    "entry_size": 2,
                    "entry_value": 2,
                    "l_var8": 1,
                    "long_value": 1,
                    "matching_entry3": 3,
                    "matching_entry_3": 4,
                    "offset": 2,
                    "temp": 2,
                    "temp_var4": 1,
                    "value": 4
                },
                "lVar8_mem": {
                    "memory_address_3": 1
                },
                "lVar9": {
                    "copy_data_result": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_error_message": 5
                },
                "set_alignment_and_copy_data_00108179": {
                    "set_alignment_and_copy_data": 4
                },
                "uVar2": {
                    "config_value": 1,
                    "current_entry": 1,
                    "data": 2,
                    "entry": 2,
                    "entry_address": 1,
                    "entry_value": 2,
                    "func_return_value": 1,
                    "input_copy": 1,
                    "ptr": 2,
                    "ptr_u_var2": 1,
                    "temp": 1,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_variable": 2,
                    "u_var": 1,
                    "u_var2": 1,
                    "ulong_var": 1,
                    "undefined_value": 1,
                    "undefined_var": 1,
                    "unused_var": 1,
                    "value": 2,
                    "value_1": 1
                },
                "uVar4": {
                    "alignment": 5,
                    "alignment_flag": 1,
                    "alignment_value": 1,
                    "entry_length": 1,
                    "entry_size": 1,
                    "flag_3": 1,
                    "size": 3,
                    "temp_var3": 1,
                    "u_var2": 1,
                    "uint_value": 3,
                    "uint_var": 6,
                    "uint_var4": 1,
                    "uint_variable": 2,
                    "unsigned_var": 1,
                    "value_2": 1
                },
                "unaff_R12": {
                    "arg_1": 1,
                    "auxiliary_register": 1,
                    "data": 1,
                    "data_entry": 1,
                    "entry_pointer": 1,
                    "matching_entry": 1,
                    "memory_address_1": 1,
                    "param3": 2,
                    "param_3": 1,
                    "parameter3": 1,
                    "pointer_r12": 1,
                    "r12": 5,
                    "register12": 1,
                    "register_12": 5,
                    "register_r12": 1,
                    "saved_r12": 1,
                    "some_pointer": 1,
                    "temp_register_1": 1,
                    "temp_var1": 1,
                    "unaff_value1": 1,
                    "value": 2
                },
                "unaff_R14B": {
                    "bool_flag": 1,
                    "boolean_flag": 3,
                    "check_value": 1,
                    "enable_flag": 1,
                    "flag": 10,
                    "flag_1": 1,
                    "flag_r14_b": 1,
                    "is_flag_set": 1,
                    "is_reversed": 1,
                    "is_set": 1,
                    "param4": 1,
                    "parameter4": 1,
                    "r14b": 3,
                    "reverse_flag": 1,
                    "saved_r14_b": 1
                },
                "unaff_R15": {
                    "context": 1,
                    "dest": 1,
                    "destination": 1,
                    "memory_address": 1,
                    "memory_address_2": 1,
                    "output_buffer": 1,
                    "output_params": 1,
                    "param4": 1,
                    "param5": 1,
                    "parameter5": 1,
                    "r15": 3,
                    "register": 1,
                    "register15": 1,
                    "register_15": 5,
                    "register_r15": 1,
                    "result": 6,
                    "saved_r15": 1,
                    "target": 2,
                    "temp_register_2": 1
                },
                "unaff_RBP": {
                    "base": 1,
                    "base_pointer": 15,
                    "base_ptr": 1,
                    "offset": 1,
                    "param2": 2,
                    "parameter2": 1,
                    "rbp": 4,
                    "register_bp": 1,
                    "saved_base_pointer": 2,
                    "stack_base": 1,
                    "stack_pointer": 2
                },
                "unaff_RBX": {
                    "args": 1,
                    "array": 1,
                    "config": 1,
                    "config_data": 1,
                    "data": 1,
                    "data_array": 1,
                    "entry_array": 1,
                    "file_data": 1,
                    "function_args": 2,
                    "function_arguments": 2,
                    "function_parameters": 2,
                    "function_params": 2,
                    "input_params": 2,
                    "param1": 2,
                    "parameter1": 1,
                    "parameters": 3,
                    "params": 2,
                    "pointer_to_data": 1,
                    "rbx": 4
                }
            },
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\n\n\nvoid set_size_and_alignment_00108072(void)\n\n{\n  byte byte_var;\n  undefined8 temp_variable;\n  char char_var;\n  uint uint_var;\n  long error_message;\n  long matching_entry_1;\n  long matching_entry_2;\n  undefined8 *rbx;\n  long base_pointer;\n  long register_12;\n  long matching_entry_3;\n  char flag;\n  long result;\n  \n  error_message = dcgettext(0,\"failed to set size\",5);\n  matching_entry_3 = rbx[6];\n  matching_entry_1 = find_matching_entry(*rbx,0,0x18);\n  if (matching_entry_1 == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    temp_variable = *rbx;\n    matching_entry_3 = matching_entry_3 + _DAT_00127990;\n    *(long *)(result + 0x30) = matching_entry_3;\n    *(long *)(result + 0x38) = matching_entry_3;\n    matching_entry_3 = rbx[7];\n    matching_entry_1 = find_matching_entry(temp_variable,0,0x60);\n    if (matching_entry_1 == 0) goto skip_to_label_15695;\nskip_to_label_15860:\n    matching_entry_2 = *(long *)(matching_entry_1 + 0x20);\n    if ((*(byte *)(matching_entry_1 + 0x14) & 0x40) != 0) {\n      matching_entry_2 = matching_entry_2 + matching_entry_3;\n    }\n    *(long *)(result + 0x38) = matching_entry_2;\n    matching_entry_3 = find_matching_entry(*rbx,0,0x200);\n    if (matching_entry_3 != 0) goto skip_to_label_15889;\nLAB_001156b8:\n    uint_var = *(uint *)((long)rbx + 0x7c);\n    if (uint_var < 0x3f) goto skip_to_label_156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)rbx + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(rbx + 5) & 0x30;\n    rbx[0xc] = result;\n    rbx[0xb] = 0;\n    byte_var = *(byte *)((long)rbx + 0x27);\n  }\n  else {\n    matching_entry_2 = *(long *)(matching_entry_1 + 0x18);\n    if ((*(byte *)(matching_entry_1 + 0x14) & 8) == 0) {\n      matching_entry_2 = matching_entry_2 + matching_entry_3;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    temp_variable = *rbx;\n    *(long *)(result + 0x30) = matching_entry_2;\n    *(long *)(result + 0x38) = matching_entry_2;\n    matching_entry_3 = rbx[7];\n    matching_entry_1 = find_matching_entry(temp_variable,0,0x60);\n    if (matching_entry_1 != 0) goto skip_to_label_15860;\nskip_to_label_15695:\n    temp_variable = *rbx;\n    *(long *)(result + 0x38) = matching_entry_3 + _DAT_00127990;\n    matching_entry_3 = find_matching_entry(temp_variable,0,0x200);\n    if (matching_entry_3 == 0) goto LAB_001156b8;\nskip_to_label_15889:\n    uint_var = *(uint *)(matching_entry_3 + 0x2c);\n    if (0x3e < uint_var) {\n      set_alignment_and_copy_data();\n      return;\n    }\nskip_to_label_156c4:\n    *(uint *)(result + 0x7c) = uint_var;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)rbx + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(rbx + 5) & 0x30;\n    rbx[0xc] = result;\n    rbx[0xb] = 0;\n    byte_var = *(byte *)((long)rbx + 0x27);\n  }\n  if ((byte_var & 2) != 0) {\n    matching_entry_3 = rbx[0x1a];\n    matching_entry_1 = find_matching_value(matching_entry_3,rbx[0x1c]);\n    if ((matching_entry_1 != 0) &&\n       (matching_entry_2 = *(long *)(register_12 + 8), *(uint *)(matching_entry_1 + 0x18) = *(uint *)(matching_entry_1 + 0x18) | 0x20,\n       *(int *)(matching_entry_2 + 8) == 5)) {\n      *(long *)(matching_entry_3 + 0xb0) = matching_entry_1;\n      char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (char_var == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_var = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (char_var == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_size_and_alignment_00108072",
            "entrypoint": "0x00108072",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108072": "set_size_and_alignment_00108072",
                "LAB_00115695": "skip_to_label_15695",
                "LAB_001156c4": "skip_to_label_156c4",
                "LAB_00115860": "skip_to_label_15860",
                "LAB_00115889": "skip_to_label_15889",
                "bVar1": "byte_var",
                "cVar3": "char_var",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_text",
                "find_matching_entry_00114190": "find_matching_entry",
                "find_matching_value_00115d00": "find_matching_value",
                "lVar5": "error_message",
                "lVar6": "matching_entry_1",
                "lVar7": "matching_entry_2",
                "lVar8": "matching_entry_3",
                "print_bfd_error_message_001126c0": "print_error_message",
                "set_alignment_and_copy_data_00108179": "set_alignment_and_copy_data",
                "uVar2": "temp_variable",
                "uVar4": "uint_var",
                "unaff_R12": "register_12",
                "unaff_R14B": "flag",
                "unaff_R15": "result",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010808f": {
            "additional_data": {
                "DAT_00127a20": {
                    "has_error_occurred": 1,
                    "is_error": 2,
                    "is_error_message_available": 1
                },
                "FUN_0010808f": {
                    "copy_private_data": 31
                },
                "dcgettext": {
                    "get_error_message": 5,
                    "get_localized_message": 1
                },
                "lVar1": {
                    "copy_error_message": 2,
                    "error_message": 11,
                    "error_msg": 3,
                    "error_text": 2,
                    "gettext_result": 1,
                    "translation_result": 2
                },
                "print_bfd_error_message_001126c0": {
                    "print_error_message": 5
                },
                "unaff_R14B": {
                    "copy_condition": 1,
                    "copy_failed": 1,
                    "copy_flag": 1,
                    "copy_success": 1,
                    "copy_successful": 2,
                    "flag": 4,
                    "has_private_data": 1,
                    "is_copy_failed": 1,
                    "is_copy_needed": 1,
                    "is_copy_private": 1,
                    "is_copy_successful": 2,
                    "is_copying_enabled": 1,
                    "is_copying_private_data": 2,
                    "is_not_empty": 1,
                    "is_private": 1,
                    "is_private_data_copied": 3,
                    "parameter_flag": 1,
                    "policy_flag": 1,
                    "should_copy_data": 4,
                    "should_copy_private_data": 1
                },
                "unaff_R15": {
                    "base_address": 10,
                    "data_address": 8,
                    "data_pointer": 5,
                    "data_ptr": 4,
                    "pointer_to_data": 1,
                    "private_data": 1,
                    "private_data_address": 1,
                    "source_pointer": 1
                }
            },
            "called": [
                "FUN_001126c0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108179"
            ],
            "code": "\nvoid copy_private_data_0010808f(void)\n\n{\n  long error_message;\n  char flag;\n  long base_address;\n  \n  error_message = dcgettext(0,\"failed to copy private data\",5);\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(base_address + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "copy_private_data_0010808f",
            "entrypoint": "0x0010808f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "dcgettext": "get_error_message",
                "lVar1": "error_message",
                "print_bfd_error_message_001126c0": "print_error_message",
                "unaff_R14B": "flag",
                "unaff_R15": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108179": {
            "additional_data": {
                "FUN_00108179": {
                    "process_alignment": 2,
                    "process_alignment_failure": 1,
                    "set_alignment": 21,
                    "set_alignment_and_copy": 1,
                    "set_alignment_and_copy_data": 3,
                    "set_alignment_failed": 1,
                    "set_alignment_failure": 1,
                    "update_alignment": 1
                },
                "cVar3": {
                    "char2": 1,
                    "char_var": 2,
                    "is_success": 2,
                    "is_zero": 1,
                    "result": 16,
                    "result_flag": 1,
                    "return_value": 1,
                    "status": 2,
                    "success_flag": 4,
                    "successful": 1
                },
                "copy_private_data_0010808f": {
                    "copy_private_data": 3
                },
                "dcgettext": {
                    "get_error_message": 2
                },
                "find_matching_value_00115d00": {
                    "find_matching_value": 3
                },
                "lVar1": {
                    "err_msg": 1,
                    "error_code": 9,
                    "error_message": 3,
                    "error_message_address": 1,
                    "error_msg": 1,
                    "error_string": 3,
                    "integer1": 1,
                    "localized_error_msg": 1,
                    "localized_message": 1,
                    "message": 1,
                    "return_value": 1,
                    "source_value": 1,
                    "temp_var_2": 1,
                    "translation": 1,
                    "value": 1,
                    "value1": 2,
                    "value_ptr": 1,
                    "var1": 1
                },
                "lVar2": {
                    "compare_value": 1,
                    "helper_value": 1,
                    "integer2": 1,
                    "matched_value": 2,
                    "matching_value": 10,
                    "temp_var": 1,
                    "temp_var_1": 1,
                    "value": 8,
                    "value2": 2,
                    "value_ptr": 1,
                    "var2": 3
                },
                "lVar4": {
                    "alignment_error": 2,
                    "alignment_error_message": 1,
                    "alignment_error_string": 1,
                    "err_msg": 2,
                    "error_check": 1,
                    "error_message": 8,
                    "error_message_ptr": 1,
                    "error_msg": 6,
                    "error_result": 1,
                    "error_string": 4,
                    "error_text": 1,
                    "get_alignment_error_string": 1,
                    "gettext_result": 1,
                    "var3": 1
                },
                "lVar5": {
                    "find_result": 1,
                    "found_value": 8,
                    "matching_address": 1,
                    "matching_value": 18,
                    "value": 1,
                    "value_match": 1,
                    "var4": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 1,
                    "print_error_message": 2
                },
                "unaff_R12": {
                    "another_register": 1,
                    "container": 1,
                    "context": 2,
                    "data_struct": 1,
                    "data_struct3": 1,
                    "function_pointer": 1,
                    "helper": 1,
                    "helper_object": 1,
                    "matching_param": 1,
                    "matching_value_pointer": 1,
                    "original_r12": 1,
                    "param3": 1,
                    "pointer3": 1,
                    "ptr3": 2,
                    "r12": 6,
                    "r12_value": 1,
                    "register12": 2,
                    "register_ptr": 1,
                    "source": 1,
                    "temp_register_1": 1,
                    "temporary_register": 1,
                    "temporary_value": 1,
                    "temporary_variable": 1
                },
                "unaff_R14B": {
                    "char1": 1,
                    "check_flag": 1,
                    "flag": 11,
                    "flag_param": 1,
                    "is_not_null": 1,
                    "is_reverse": 1,
                    "is_reversed": 1,
                    "is_reversing": 1,
                    "is_set": 1,
                    "is_true": 1,
                    "param4": 1,
                    "r14": 1,
                    "r14b": 5,
                    "r14b_value": 1,
                    "reverse_flag": 1,
                    "should_copy_data": 1,
                    "status_flag": 1
                },
                "unaff_R15": {
                    "child": 1,
                    "current_r15": 1,
                    "data_struct4": 1,
                    "destination_struct": 1,
                    "new_data": 1,
                    "new_object": 1,
                    "new_pointer": 1,
                    "next_pointer": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "param5": 1,
                    "pointer4": 1,
                    "ptr4": 2,
                    "r15": 6,
                    "r15_value": 1,
                    "register15": 2,
                    "target_address": 1,
                    "temp_register": 1,
                    "temp_register_2": 1,
                    "updated_pointer": 1,
                    "value": 1
                },
                "unaff_RBP": {
                    "base_pointer": 10,
                    "base_ptr": 1,
                    "context_param": 1,
                    "data_struct2": 1,
                    "frame_base": 1,
                    "frame_pointer": 2,
                    "original_rbp": 1,
                    "param2": 1,
                    "pointer2": 1,
                    "ptr2": 2,
                    "rbp": 6,
                    "rbp_value": 1,
                    "some_register": 1,
                    "stack_base": 1,
                    "stack_base_pointer": 1
                },
                "unaff_RBX": {
                    "base_address": 2,
                    "base_pointer": 1,
                    "current_data": 1,
                    "current_object": 1,
                    "data_struct1": 1,
                    "destination": 2,
                    "input": 2,
                    "input_buffer": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "original_rbx": 1,
                    "param1": 1,
                    "parent": 1,
                    "pointer1": 1,
                    "ptr1": 2,
                    "rbx": 6,
                    "rbx_value": 1,
                    "source_struct": 1,
                    "this_pointer": 3
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "calling": [
                "FUN_00108072"
            ],
            "code": "\nvoid set_alignment_and_copy_data_00108179(void)\n\n{\n  long error_code;\n  long matching_value;\n  char result;\n  long error_message;\n  long matching_value;\n  long rbx;\n  long base_pointer;\n  long r12;\n  char flag;\n  long r15;\n  \n  error_message = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    error_code = *(long *)(rbx + 0xd0);\n    matching_value = find_matching_value(error_code,*(undefined8 *)(rbx + 0xe0));\n    if ((matching_value != 0) &&\n       (matching_value = *(long *)(r12 + 8), *(uint *)(matching_value + 0x18) = *(uint *)(matching_value + 0x18) | 0x20,\n       *(int *)(matching_value + 8) == 5)) {\n      *(long *)(error_code + 0xb0) = matching_value;\n      result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (error_message != 0) {\n    DAT_00127a20 = 1;\n    print_error_message(0);\n  }\n  return;\n}\n\n",
            "current_name": "set_alignment_and_copy_data_00108179",
            "entrypoint": "0x00108179",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108179": "set_alignment_and_copy_data_00108179",
                "cVar3": "result",
                "copy_private_data_0010808f": "copy_private_data",
                "dcgettext": "get_error_message",
                "find_matching_value_00115d00": "find_matching_value",
                "lVar1": "error_code",
                "lVar2": "matching_value",
                "lVar4": "error_message",
                "lVar5": "matching_value",
                "print_bfd_error_message_001126c0": "print_error_message",
                "unaff_R12": "r12",
                "unaff_R14B": "flag",
                "unaff_R15": "r15",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "rbx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001081e9": {
            "additional_data": {
                "FUN_001081e9": {
                    "cleanup_memory": 2,
                    "deallocate_memory": 2,
                    "free_and_return": 3,
                    "free_memory": 12,
                    "free_memory_and_return": 3,
                    "free_memory_and_return_value": 1,
                    "release_and_return": 2,
                    "release_memory": 5,
                    "return_and_free_memory": 1
                },
                "in_RAX": {
                    "input": 1,
                    "return_value": 6
                },
                "param_7": {
                    "result": 3,
                    "return_value": 15,
                    "returned_value": 1
                },
                "unaff_RBX": {
                    "mem_to_free": 1,
                    "memory_address": 2,
                    "memory_block": 9,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "memory_to_deallocate": 1,
                    "memory_to_free": 9,
                    "memory_to_release": 2,
                    "pointer": 1,
                    "ptr_to_free": 2
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\nundefined8 free_memory_and_return_value_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_to_free;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_to_free);\n  return return_value;\n}\n\n",
            "current_name": "free_memory_and_return_value_001081e9",
            "entrypoint": "0x001081e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001081e9": "free_memory_and_return_value_001081e9",
                "in_RAX": "return_value",
                "param_7": "return_value",
                "unaff_RBX": "memory_to_free"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108200": {
            "additional_data": {
                "FUN_00108200": {
                    "copy_and_delete_file": 3,
                    "copy_and_unlink_file": 2,
                    "copy_and_verify_file": 1,
                    "copy_error": 1,
                    "copy_file": 7,
                    "copy_file_and_display_error": 1,
                    "copy_file_and_handle_errors": 2,
                    "copy_file_and_print_error": 1,
                    "copy_file_and_set_mod_time": 1,
                    "copy_file_and_set_modification_time": 4,
                    "copy_file_error_handler": 1,
                    "copy_file_with_error_handling": 3,
                    "copy_file_with_reason": 4
                },
                "auVar3": {
                    "result": 4,
                    "return_value": 2
                },
                "dcgettext": {
                    "translate_message": 1
                },
                "piVar1": {
                    "errno_ptr": 3,
                    "error_code_ptr": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 1
                },
                "set_file_modification_time_0011a350": {
                    "set_modification_time": 1
                },
                "strerror": {
                    "get_error_message": 1
                },
                "uVar2": {
                    "error_message": 4,
                    "error_str": 1
                },
                "unaff_R12B": {
                    "copy_error_occurred": 1,
                    "copy_failed": 1,
                    "copy_file_flag": 2,
                    "execute_file_mod": 1,
                    "has_modification_time": 1,
                    "is_directory": 1,
                    "is_file_modified": 1,
                    "should_modify_time": 3,
                    "should_set_mod_time": 2,
                    "should_set_modification_time": 18
                },
                "unaff_R13": {
                    "error_code": 2,
                    "error_flag": 1,
                    "error_value": 1,
                    "file_attributes": 5,
                    "file_deletion_options": 1,
                    "file_mod_time": 2,
                    "file_modification": 1,
                    "file_modification_time": 6,
                    "file_permission": 1,
                    "file_permissions": 3,
                    "file_size": 2,
                    "flags": 4,
                    "modified_time": 1,
                    "ret_value": 1
                },
                "unaff_RBP": {
                    "file_path": 25,
                    "file_to_copy": 2,
                    "file_to_remove": 1,
                    "source_file_path": 3
                },
                "unaff_retaddr": {
                    "return_address": 28
                },
                "unlink": {
                    "delete_file": 1
                }
            },
            "called": [
                "FUN_00119ed0",
                "__errno_location",
                "FUN_0011a350",
                "unlink",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nundefined  [16] copy_file_and_set_modification_time_00108200(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  char *file_path;\n  char should_set_modification_time;\n  ulong file_modification_time;\n  undefined result [16];\n  undefined8 return_address;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message(error_message);\n  unlink(file_path);\n  if (should_set_modification_time != '\\0') {\n    set_modification_time();\n  }\n  result._0_8_ = file_modification_time & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "copy_file_and_set_modification_time_00108200",
            "entrypoint": "0x00108200",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108200": "copy_file_and_set_modification_time_00108200",
                "auVar3": "result",
                "dcgettext": "translate_message",
                "piVar1": "errno_ptr",
                "print_error_message_with_params_00119ed0": "print_error_message",
                "set_file_modification_time_0011a350": "set_modification_time",
                "strerror": "get_error_message",
                "uVar2": "error_message",
                "unaff_R12B": "should_set_modification_time",
                "unaff_R13": "file_modification_time",
                "unaff_RBP": "file_path",
                "unaff_retaddr": "return_address",
                "unlink": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108237": {
            "additional_data": {
                "FUN_00108237": {
                    "close_and_return_error": 1,
                    "close_and_set_errno": 3,
                    "close_and_set_error_code": 1,
                    "close_file": 4,
                    "close_file_and_handle_error": 1,
                    "close_file_and_restore_errno": 2,
                    "close_file_and_return_error": 8,
                    "close_file_and_return_error_status": 1,
                    "close_file_and_set_errno": 3,
                    "close_file_and_set_error": 2,
                    "close_file_and_set_error_code": 1,
                    "close_file_descriptor": 1,
                    "close_file_handle": 2,
                    "close_file_with_error_handling": 1
                },
                "iVar1": {
                    "errno_value": 2,
                    "error_code": 1,
                    "error_value": 1,
                    "original_errno": 3,
                    "previous_errno": 2,
                    "previous_error": 2,
                    "previous_error_value": 1
                },
                "piVar2": {
                    "errno_location": 1,
                    "errno_location_ptr": 1,
                    "errno_pointer": 6,
                    "error_pointer": 2,
                    "error_ptr": 1,
                    "pointer_to_errno": 1
                },
                "unaff_R12D": {
                    "fd": 1,
                    "file_descriptor": 28,
                    "file_handle": 2
                }
            },
            "called": [
                "__errno_location",
                "close"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\nundefined8 close_file_and_return_error_status_00108237(void)\n\n{\n  int original_errno;\n  int *errno_pointer;\n  int file_descriptor;\n  \n  errno_pointer = __errno_location();\n  original_errno = *errno_pointer;\n  close(file_descriptor);\n  *errno_pointer = original_errno;\n  return 0xffffffff;\n}\n\n",
            "current_name": "close_file_and_return_error_status_00108237",
            "entrypoint": "0x00108237",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_status_00108237",
                "iVar1": "original_errno",
                "piVar2": "errno_pointer",
                "unaff_R12D": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010827b": {
            "additional_data": {
                "FUN_0010827b": {
                    "handle_section_matching_error": 1,
                    "parse_and_print_error_message": 1,
                    "print_error_and_exit": 5,
                    "print_error_message_and_exit": 20,
                    "print_error_message_with_section": 1,
                    "print_error_section_match_and_exit": 1,
                    "print_matching_error_and_exit": 1,
                    "print_section_error_message": 1
                },
                "uVar1": {
                    "error_message": 3,
                    "error_section": 1,
                    "section": 2,
                    "section_value": 11,
                    "value": 3,
                    "value_from_pointer": 1,
                    "variable1": 1
                },
                "uVar2": {
                    "error_format": 2,
                    "error_message": 17,
                    "error_string": 1,
                    "localized_error_message": 1,
                    "variable2": 1
                },
                "unaff_RBX": {
                    "arg1": 1,
                    "error_message_address": 1,
                    "error_message_pointer": 1,
                    "error_message_ptr": 2,
                    "input_pointer": 1,
                    "message_pointer": 2,
                    "pointer": 1,
                    "pointer_to_string": 1,
                    "section": 1,
                    "section_address": 2,
                    "section_pointer": 10,
                    "section_ptr": 7,
                    "unaffected_rbx": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nvoid print_error_message_and_exit_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  \n  section_value = *section_pointer;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_message_and_exit_0010827b_00119dd0(error_message,section_value);\n}\n\n",
            "current_name": "print_error_message_and_exit_0010827b",
            "entrypoint": "0x0010827b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010827b": "print_error_message_and_exit_0010827b",
                "uVar1": "section_value",
                "uVar2": "error_message",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010829e": {
            "additional_data": {
                "FUN_0010829e": {
                    "check_and_invert_length": 1,
                    "check_and_return": 1,
                    "check_or_invert_string_length": 2,
                    "get_return_value": 1,
                    "handle_ebp_value": 1,
                    "process_command": 1,
                    "process_data": 8,
                    "process_ebp": 1,
                    "process_ebp_0010829e": 1,
                    "process_ebp_value": 3,
                    "process_input": 6,
                    "process_logic": 1,
                    "process_number": 1,
                    "process_option": 1,
                    "process_unaff_ebp": 1,
                    "process_value": 1
                },
                "check_string_length_00113ede": {
                    "calculate_string_length": 2,
                    "check_string_length": 1,
                    "get_string_length": 9,
                    "validate_string_length": 1
                },
                "invert_and_return_length_001082b3": {
                    "calculate_and_return_inverted_length": 1,
                    "calculate_inverted_length": 1,
                    "get_inverted_length": 1,
                    "invert_and_calculate_length": 1,
                    "invert_and_get_length": 6,
                    "invert_and_return_length": 3
                },
                "uVar1": {
                    "result": 6
                },
                "unaff_EBP": {
                    "command_code": 1,
                    "data": 1,
                    "ebp": 1,
                    "ebp_value": 6,
                    "error_code": 6,
                    "input_parameter": 1,
                    "input_value": 9,
                    "input_variable": 1,
                    "number": 1,
                    "option": 1,
                    "parameter": 1,
                    "selected_option": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "calling": [
                "FUN_00115b70"
            ],
            "code": "\nundefined8 process_data_0010829e(void)\n\n{\n  undefined8 result;\n  int input_value;\n  \n  if (input_value == 5) {\n    result = get_string_length();\n    return result;\n  }\n  if ((input_value != 4) && (input_value == 6)) {\n    result = invert_and_get_length();\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010829e",
            "entrypoint": "0x0010829e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010829e": "process_data_0010829e",
                "check_string_length_00113ede": "get_string_length",
                "invert_and_return_length_001082b3": "invert_and_get_length",
                "uVar1": "result",
                "unaff_EBP": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082b3": {
            "additional_data": {
                "FUN_001082b3": {
                    "calculate_flipped_value": 1,
                    "calculate_inverse": 2,
                    "calculate_inverse_bit": 1,
                    "calculate_inverse_length": 1,
                    "calculate_inverse_string_length": 1,
                    "calculate_inverse_value": 1,
                    "calculate_inverse_xor": 1,
                    "calculate_inverted_checksum": 4,
                    "calculate_inverted_value": 3,
                    "calculate_output_value": 1,
                    "calculate_xor_with_one": 2,
                    "compute_flipped_value": 1,
                    "get_inverted_boolean": 1,
                    "invert_and_check_string_length": 2,
                    "invert_and_decipher": 1,
                    "invert_and_exclude_one": 1,
                    "invert_and_get_length": 2,
                    "invert_and_return_length": 1,
                    "invert_and_xor": 2,
                    "invert_result": 1,
                    "reverse_and_invert": 1
                },
                "check_string_length_00113ede": {
                    "check_string_length": 1,
                    "get_string_length": 15
                },
                "uVar1": {
                    "inverse_length": 1,
                    "inverse_string_length": 1,
                    "inverted_length": 1,
                    "length": 1,
                    "string_length": 27
                }
            },
            "called": [
                "FUN_00113ede"
            ],
            "calling": [
                "FUN_0010829e"
            ],
            "code": "\nuint invert_and_return_length_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "current_name": "invert_and_return_length_001082b3",
            "entrypoint": "0x001082b3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082b3": "invert_and_return_length_001082b3",
                "check_string_length_00113ede": "get_string_length",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082c3": {
            "additional_data": {
                "FUN_001082c3": {
                    "calculate_result": 1,
                    "clear_memory": 1,
                    "do_nothing": 1,
                    "get_default_value": 6,
                    "get_return_value": 1,
                    "get_zero": 1,
                    "get_zero_return_value": 1,
                    "get_zero_value": 1,
                    "initialize": 12,
                    "initialize_app": 1,
                    "initialize_application": 2,
                    "initialize_data": 2,
                    "initialize_program": 1
                },
                "original_variable_name_1": {
                    "return_value": 1
                },
                "return": {
                    "result": 1
                },
                "retval": {
                    "result": 1
                },
                "undefined8": {
                    "unsigned_long_long": 1,
                    "void": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_00115d00"
            ],
            "code": "\nvoid initialize_application_001082c3(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_application_001082c3",
            "entrypoint": "0x001082c3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082c3": "initialize_application_001082c3",
                "return": "result",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001082df": {
            "additional_data": {
                "DAT_00127a2c": {
                    "constant_value": 1
                },
                "FUN_001082df": {
                    "extract_pattern_matches": 2,
                    "extract_related_data": 1,
                    "find_and_execute_matching_patterns": 1,
                    "find_and_execute_pattern": 1,
                    "find_matching_pointers": 2,
                    "match_and_execute": 1,
                    "process_data": 9,
                    "process_function": 1,
                    "process_items": 2,
                    "process_matching_patterns": 1,
                    "process_matching_pointers": 1,
                    "process_pattern": 3,
                    "process_pattern_match": 2,
                    "process_pattern_matches": 2,
                    "process_records": 1
                },
                "cVar3": {
                    "is_match": 4,
                    "is_pattern_match": 3,
                    "is_pattern_matched": 3,
                    "match": 1,
                    "match_result": 3,
                    "pattern_match": 5,
                    "pattern_match_result": 8,
                    "pattern_result": 2,
                    "result": 1
                },
                "check_pattern_match_00115d70": {
                    "pattern_match_function": 1
                },
                "lVar2": {
                    "current_data": 1,
                    "current_element": 7,
                    "current_pattern": 2,
                    "current_pattern_value": 1,
                    "current_pointer": 1,
                    "current_value": 2,
                    "data_value": 2,
                    "element": 1,
                    "element_value": 1,
                    "item_value": 1,
                    "pattern_address": 1,
                    "pattern_value": 2,
                    "pointer_value": 2,
                    "ptr_value": 1,
                    "record_value": 1,
                    "temp_value": 1,
                    "value": 3
                },
                "puVar4": {
                    "matched_patterns": 3,
                    "new_array_pointer": 1,
                    "new_array_ptr": 1,
                    "new_pointer_array": 1,
                    "output_array": 1,
                    "output_array_pointer": 1,
                    "output_pointer": 3,
                    "output_ptr": 2,
                    "processed_elements_pointer": 1,
                    "ptr_result": 1,
                    "result_array": 8,
                    "result_array_ptr": 3,
                    "result_pointer": 1,
                    "result_ptr": 3,
                    "updated_pointer_array": 1
                },
                "puVar5": {
                    "current_array_ptr": 1,
                    "current_pattern": 1,
                    "current_result": 1,
                    "new_array_cursor": 1,
                    "new_result_array": 1,
                    "next_matched_pattern": 1,
                    "next_output_pointer": 1,
                    "next_processed_element_pointer": 1,
                    "next_result": 1,
                    "next_result_ptr": 3,
                    "output_array_iterator": 1,
                    "output_ptr_temp": 2,
                    "ptr_temp_result": 1,
                    "result_array_end": 1,
                    "result_array_next_ptr": 1,
                    "result_array_ptr": 2,
                    "result_array_ptr_next": 1,
                    "result_ptr": 1,
                    "temp_output_array_pointer": 1,
                    "temp_pointer": 3,
                    "temp_pointer_array": 1,
                    "temp_ptr": 1,
                    "updated_matched_patterns": 1,
                    "updated_pointer": 1,
                    "updated_result_array": 1
                },
                "uVar1": {
                    "array_length": 2,
                    "array_size": 3,
                    "count": 2,
                    "data_count": 1,
                    "data_size": 1,
                    "input_data_length": 1,
                    "item_count": 1,
                    "num_elements": 9,
                    "num_items": 1,
                    "num_patterns": 2,
                    "num_pointers": 2,
                    "pattern_count": 4,
                    "pointer_count": 1,
                    "record_count": 1
                },
                "uVar6": {
                    "counter": 1,
                    "current_index": 8,
                    "element_index": 1,
                    "i": 1,
                    "index": 6,
                    "item_index": 1,
                    "loop_counter": 9,
                    "loop_index": 2,
                    "pattern_index": 2
                },
                "unaff_R13": {
                    "data_array": 4,
                    "data_array_ptr": 1,
                    "data_ptr": 1,
                    "element_array": 1,
                    "elements_array": 1,
                    "input_array": 3,
                    "input_array_pointer": 1,
                    "input_array_ptr": 1,
                    "input_pointer": 1,
                    "item_array": 1,
                    "original_array": 1,
                    "original_array_ptr": 1,
                    "original_pointer_array": 1,
                    "pattern_addresses": 2,
                    "pattern_array": 5,
                    "patterns": 1,
                    "pointer_array": 2,
                    "pointers_array": 1,
                    "ptr_array": 1,
                    "record_array": 1
                },
                "unaff_RBP": {
                    "base_pointer": 2,
                    "base_ptr": 1,
                    "context": 1,
                    "frame_pointer": 6,
                    "frame_ptr": 1,
                    "function_address": 1,
                    "function_context": 1,
                    "function_pointer": 1,
                    "other_pointer": 2,
                    "ptr_context": 1,
                    "stack_base": 7,
                    "stack_base_address": 2,
                    "stack_base_ptr": 1,
                    "stack_frame": 1,
                    "stack_frame_pointer": 2,
                    "stack_pointer": 1
                },
                "unaff_RBX": {
                    "array_base": 1,
                    "array_pointer": 1,
                    "base_addr": 1,
                    "base_address": 22,
                    "data_pointer": 2,
                    "input_data": 1,
                    "input_ptr": 1,
                    "pointer_array": 1,
                    "ptr_items": 1
                }
            },
            "called": [
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid process_data_001082df(void)\n\n{\n  uint num_elements;\n  long current_element;\n  char pattern_match_result;\n  long base_address;\n  undefined8 *result_array;\n  undefined8 *next_result_ptr;\n  long stack_base;\n  ulong loop_counter;\n  undefined8 *pattern_array;\n  \n  num_elements = *(uint *)(base_address + 0x78);\n  if (DAT_00127a2c == 7) {\n    result_array = pattern_array;\n    for (loop_counter = 0; loop_counter != num_elements; loop_counter = loop_counter + 1) {\n      next_result_ptr = result_array;\n      if (((*(long **)pattern_array[loop_counter] != (long *)0x0) &&\n          (current_element = **(long **)pattern_array[loop_counter], current_element != 0)) &&\n         (pattern_match_result = pattern_match_function(*(undefined8 *)(current_element + 8),DAT_00127a08), pattern_match_result != '\\0')) {\n        next_result_ptr = result_array + 1;\n        *result_array = pattern_array[loop_counter];\n      }\n      result_array = next_result_ptr;\n    }\n    *result_array = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(stack_base + 8) + 0x288))();\n  return;\n}\n\n",
            "current_name": "process_data_001082df",
            "entrypoint": "0x001082df",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "cVar3": "pattern_match_result",
                "check_pattern_match_00115d70": "pattern_match_function",
                "lVar2": "current_element",
                "puVar4": "result_array",
                "puVar5": "next_result_ptr",
                "uVar1": "num_elements",
                "uVar6": "loop_counter",
                "unaff_R13": "pattern_array",
                "unaff_RBP": "stack_base",
                "unaff_RBX": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108375": {
            "additional_data": {
                "FUN_00108375": {
                    "check_and_print_error": 1,
                    "check_and_print_error_message": 2,
                    "check_and_print_flag": 1,
                    "check_and_print_note": 1,
                    "check_and_print_note_message": 1,
                    "check_and_print_share_flag": 2,
                    "check_flag_and_print_error": 1,
                    "check_output_format": 1,
                    "check_output_format_and_print_error": 2,
                    "check_share_flag_and_print_error_message": 2,
                    "drop_share_flag_if_needed": 1,
                    "drop_share_flag_if_not_coff": 9,
                    "drop_share_flag_if_output_not_coff": 1,
                    "handle_dropping_share_flag": 1,
                    "process_output_format": 1,
                    "validate_and_print_error": 1,
                    "validate_and_print_error_message": 1,
                    "validate_output_format": 1,
                    "validate_share_flag": 1
                },
                "param_1": {
                    "arg1": 3,
                    "argument1": 1,
                    "file_descriptor": 1,
                    "handle": 1,
                    "input_param": 1,
                    "param": 4,
                    "param1": 8,
                    "param_1": 6,
                    "param_a": 2,
                    "param_ptr": 1,
                    "unused": 1,
                    "unused_param": 2
                },
                "param_2": {
                    "arg2": 3,
                    "args": 3,
                    "arguments": 1,
                    "error_message": 1,
                    "file_info": 1,
                    "input_array": 1,
                    "param2": 4,
                    "param2_array": 1,
                    "param_2": 1,
                    "param_array": 11,
                    "param_b": 2,
                    "parameters": 1,
                    "params": 1
                },
                "param_3": {
                    "arg3": 3,
                    "argument3": 1,
                    "flag": 2,
                    "output_flag": 1,
                    "output_format": 4,
                    "output_param": 1,
                    "param3": 8,
                    "param_3": 6,
                    "param_c": 2,
                    "param_flag": 1,
                    "param_value": 2
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message_with_params": 1
                },
                "uVar1": {
                    "arg1": 1,
                    "file": 1,
                    "first_arg": 1,
                    "first_param": 3,
                    "param1": 1,
                    "param_1_copy": 1,
                    "param_2_0": 1,
                    "param_d": 1,
                    "param_value": 2,
                    "result": 1,
                    "share_flag": 1,
                    "user_id": 1,
                    "value": 1,
                    "value1": 9,
                    "value_1": 1,
                    "var1": 5
                },
                "uVar2": {
                    "error_message": 12,
                    "error_msg": 6,
                    "message": 5,
                    "param_e": 1,
                    "value2": 1,
                    "value_2": 1,
                    "var2": 5
                },
                "unaff_EBX": {
                    "ebx": 8,
                    "ebx_register": 1,
                    "ebx_value": 5,
                    "error_code": 1,
                    "flag": 2,
                    "flag_status": 1,
                    "flags_ebx": 1,
                    "modified_ebx": 2,
                    "register_value": 1,
                    "unaff_ebx": 4,
                    "updated_ebx": 1
                }
            },
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00115f30"
            ],
            "code": "\nuint drop_share_flag_if_output_not_coff_00108375(undefined8 param1,undefined8 *param_array,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 error_message;\n  uint ebx;\n  \n  if (*(int *)(param_array[1] + 8) != 2) {\n    value1 = *param_array;\n    ebx = ebx & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_with_params(error_message,value1,param3);\n  }\n  return ebx;\n}\n\n",
            "current_name": "drop_share_flag_if_output_not_coff_00108375",
            "entrypoint": "0x00108375",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_output_not_coff_00108375",
                "param_1": "param1",
                "param_2": "param_array",
                "param_3": "param3",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "uVar1": "value1",
                "uVar2": "error_message",
                "unaff_EBX": "ebx"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083b7": {
            "additional_data": {
                "FUN_001083b7": {
                    "handle_bfd_error": 1,
                    "handle_error": 18,
                    "handle_error_and_exit": 2,
                    "handle_error_code": 1,
                    "handle_error_condition": 1,
                    "handle_input": 1,
                    "handle_param_error": 2,
                    "print_error_and_exit": 2,
                    "print_error_or_return": 2
                },
                "iVar1": {
                    "bfd_error": 13,
                    "bfd_error_code": 4,
                    "error": 1,
                    "error_code": 2,
                    "error_status": 1,
                    "error_type": 3
                },
                "param_1": {
                    "error_code": 29,
                    "file_descriptor": 1,
                    "input_value": 1
                },
                "print_error_message_0011a110": {
                    "print_error_message": 3
                },
                "unaff_RBP": {
                    "arg1": 1,
                    "args": 1,
                    "data_pointer": 1,
                    "error_data": 1,
                    "error_handler": 1,
                    "error_message": 8,
                    "error_message_address": 1,
                    "error_message_ptr": 8,
                    "func_args_ptr": 1,
                    "message_pointer": 1,
                    "message_ptr": 5,
                    "stack_pointer": 1
                },
                "unaff_retaddr": {
                    "return_address": 30
                },
                "xexit": {
                    "exit_program": 3
                }
            },
            "called": [
                "xexit",
                "FUN_0011a110",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00116030"
            ],
            "code": "\nundefined8 handle_param_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *error_message_ptr;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_message(*error_message_ptr);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "handle_param_error_001083b7",
            "entrypoint": "0x001083b7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083b7": "handle_param_error_001083b7",
                "iVar1": "bfd_error",
                "param_1": "error_code",
                "print_error_message_0011a110": "print_error_message",
                "unaff_RBP": "error_message_ptr",
                "unaff_retaddr": "return_address",
                "xexit": "exit_program"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001083de": {
            "additional_data": {
                "FUN_001083de": {
                    "exit_with_error": 1,
                    "print_error_and_exit": 13,
                    "print_error_message_and_exit": 15,
                    "reverse_bytes_and_exit": 1,
                    "reverse_bytes_section": 1
                },
                "uVar1": {
                    "error_message": 1,
                    "first_section": 1,
                    "section": 4,
                    "section_length": 5,
                    "section_length_value": 1,
                    "section_message": 1,
                    "section_size": 2,
                    "section_value": 3
                },
                "uVar2": {
                    "error_message": 17,
                    "error_message_template": 1
                },
                "unaff_EBP": {
                    "error_code": 7,
                    "error_length": 1,
                    "error_number": 1,
                    "error_parameter": 1,
                    "length": 1,
                    "section_divisor": 2,
                    "section_index": 1,
                    "section_length": 17
                },
                "unaff_RBX": {
                    "error_message": 1,
                    "error_message_ptr": 2,
                    "message_pointer": 1,
                    "pointer": 1,
                    "section_length": 5,
                    "section_length_ptr": 2,
                    "section_pointer": 13,
                    "section_ptr": 6
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid print_error_message_and_exit_001083de(void)\n\n{\n  undefined8 section_length;\n  undefined8 error_message;\n  undefined8 *section_pointer;\n  undefined4 section_length;\n  \n  section_length = *section_pointer;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_message_and_exit_001083de_00119dd0(error_message,section_length,section_length);\n}\n\n",
            "current_name": "print_error_message_and_exit_001083de",
            "entrypoint": "0x001083de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001083de": "print_error_message_and_exit_001083de",
                "uVar1": "section_length",
                "uVar2": "error_message",
                "unaff_EBP": "section_length",
                "unaff_RBX": "section_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108466": {
            "additional_data": {
                "FUN_00108466": {
                    "cleanup": 1,
                    "cleanup_and_free": 1,
                    "cleanup_and_free_memory": 2,
                    "cleanup_and_print_error": 5,
                    "cleanup_and_print_error_message": 1,
                    "cleanup_function": 1,
                    "clear_error_and_free": 1,
                    "clear_error_message": 1,
                    "clear_memory_and_print_error": 1,
                    "free_and_print_error_message": 4,
                    "free_memory": 1,
                    "free_memory_and_display_error": 1,
                    "free_memory_and_print_bfd_error": 1,
                    "free_memory_and_print_error": 8,
                    "free_memory_and_print_error_message": 1,
                    "free_unused_memory": 1
                },
                "free": {
                    "release_memory": 1
                },
                "param_7": {
                    "allocated_memory": 1,
                    "buffer": 3,
                    "buffer_ptr": 1,
                    "buffer_to_free": 1,
                    "data_to_free": 3,
                    "error_info": 1,
                    "mem_to_free": 1,
                    "memory_block": 6,
                    "memory_pointer": 1,
                    "memory_to_free": 13
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 3,
                    "print_error_message": 3
                }
            },
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid free_memory_and_print_error_message_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  DAT_00127a20 = 1;\n  print_error_message(0);\n  release_memory(memory_to_free);\n  return;\n}\n\n",
            "current_name": "free_memory_and_print_error_message_00108466",
            "entrypoint": "0x00108466",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108466": "free_memory_and_print_error_message_00108466",
                "free": "release_memory",
                "param_7": "memory_to_free",
                "print_bfd_error_message_001126c0": "print_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010847a": {
            "additional_data": {
                "FUNC_00116490": {
                    "configure_device": 1,
                    "execute_additional_functions": 1,
                    "execute_function": 1,
                    "execute_initialization": 2,
                    "execute_main_function": 1,
                    "execute_task": 1,
                    "initialization_function": 1,
                    "initialize": 1,
                    "initialize_components": 2,
                    "initialize_data": 2,
                    "initialize_program": 1,
                    "initialize_resources": 1,
                    "initialize_system": 3,
                    "perform_additional_tasks": 1,
                    "perform_initialization": 7,
                    "perform_system_check": 1,
                    "perform_system_setup": 1,
                    "reset_function": 1,
                    "run_startup_sequence": 1
                },
                "FUN_0010847a": {
                    "execute_function": 2,
                    "execute_initial_setup": 1,
                    "execute_initialization": 9,
                    "execute_main_function": 1,
                    "execute_main_process": 1,
                    "execute_system_command": 1,
                    "initialize": 2,
                    "initialize_and_execute": 2,
                    "initialize_and_execute_task": 1,
                    "initialize_application": 3,
                    "initialize_system": 8
                }
            },
            "called": [
                "FUN_00116490"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nvoid initialize_system_0010847a(void)\n\n{\n  parse_gnu_build_attributes_00116490();\n  return;\n}\n\n",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n",
            "current_name": "initialize_system_0010847a",
            "entrypoint": "0x0010847a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001086af": {
            "additional_data": {
                "DAT_00127a20": {
                    "error_bool_var": 1
                },
                "FUN_001086af": {
                    "build_attribute_notes_processing": 1,
                    "improve_and_parse_gnu_build_attributes": 1,
                    "parse_and_process_gnu_build_attributes": 1,
                    "parse_attributes": 1,
                    "parse_build_attributes": 5,
                    "parse_gnu_build_attribute_notes": 1,
                    "parse_gnu_build_attributes": 9,
                    "process_build_attribute_notes": 2,
                    "process_build_attributes": 1,
                    "process_gnu_build_attributes": 4
                },
                "__nmemb": {
                    "array_size": 1,
                    "count": 1,
                    "element_count": 1,
                    "note_count": 1,
                    "note_record_count": 1,
                    "num_elements": 3,
                    "num_notes": 1,
                    "num_notes_records": 1,
                    "num_records": 6,
                    "number_of_members": 1,
                    "size": 2,
                    "temp_memory_size": 1,
                    "temp_var15": 1,
                    "var_27": 1
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "buffer": 4,
                    "buffer_ptr": 1,
                    "description": 1,
                    "description_buffer": 1,
                    "dynamic_buffer": 1,
                    "dynamic_memory_ptr": 1,
                    "malloc_ptr": 1,
                    "memory_buffer": 1,
                    "memory_ptr": 1,
                    "pointer2": 1,
                    "ptr": 1,
                    "ptr_data": 1,
                    "ptr_value_2": 1,
                    "ptr_var2": 1,
                    "result_ptr": 1,
                    "temp_memory_pointer": 1,
                    "temp_ptr_2": 1,
                    "var_26": 1
                },
                "_ptr": {
                    "var13": 1
                },
                "bVar22": {
                    "b_var1": 1,
                    "bit": 1,
                    "bool_flag": 1,
                    "byte_flag": 2,
                    "byte_value": 2,
                    "byte_var": 2,
                    "byte_var22": 1,
                    "compare_result": 1,
                    "flag": 2,
                    "is32_bit": 1,
                    "is_little_endian": 1,
                    "is_note": 1,
                    "temp_bool": 1,
                    "temp_byte": 1,
                    "var19": 1,
                    "var_34": 1
                },
                "bVar4": {
                    "bool1": 1,
                    "bool_flag": 1,
                    "bool_value": 1,
                    "bool_var": 2,
                    "boolean": 1,
                    "condition": 2,
                    "flag": 2,
                    "has_error": 1,
                    "is_attribute_note_nul_terminated": 1,
                    "is_excess_data": 1,
                    "is_match": 2,
                    "is_multiple_versions": 2,
                    "is_true": 2,
                    "is_valid": 1,
                    "temp_var_3": 1,
                    "var_9": 1
                },
                "bfd_set_error": {
                    "set_bfd_error": 1
                },
                "cVar17": {
                    "attr_version": 1,
                    "char_flag": 1,
                    "char_value": 2,
                    "char_var": 3,
                    "char_var17": 1,
                    "character": 2,
                    "character_variable": 1,
                    "description_char": 1,
                    "note_type": 1,
                    "note_type_char": 1,
                    "temp_char": 1,
                    "var14": 1,
                    "var_28": 1,
                    "version": 1,
                    "version_flag": 1,
                    "version_note_type": 1,
                    "version_type": 1,
                    "warning_type": 1
                },
                "compare_memory_and_values_0011a1b0": {
                    "compare_memory_and_values": 1,
                    "compare_memory_values": 1
                },
                "compare_records_0011a250": {
                    "compare_records": 2
                },
                "dcgettext": {
                    "get_text_translated_by_domain": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 1
                },
                "iVar23": {
                    "compare_counter": 1,
                    "counter": 2,
                    "i_var3": 1,
                    "index": 1,
                    "index_var2": 1,
                    "iteration_counter": 1,
                    "loop_count": 2,
                    "loop_counter": 4,
                    "loop_index": 1,
                    "loop_var_3": 1,
                    "loop_variable": 1,
                    "temp_var16": 1,
                    "var20": 1,
                    "var_23": 1
                },
                "iVar24": {
                    "i_var24": 1
                },
                "iVar6": {
                    "cmp_result": 2,
                    "compare_result": 2,
                    "comparison_result": 1,
                    "i_var2": 1,
                    "index": 4,
                    "index_var": 1,
                    "int_value": 1,
                    "loop_var_2": 1,
                    "memcmp_result": 5,
                    "result": 2,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var_4": 1,
                    "var4": 1,
                    "var_11": 1
                },
                "in_CX": {
                    "input_cx": 1
                },
                "in_RCX": {
                    "attribute_data": 1,
                    "attributes_size": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_param2": 1,
                    "input_parameter": 1,
                    "input_rcx": 2,
                    "input_value": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "note_address": 1,
                    "note_name": 1,
                    "note_size": 1,
                    "param": 1,
                    "param1": 2,
                    "param7": 1,
                    "param_1": 7
                },
                "in_stack_00000030": {
                    "buffer_ptr": 1,
                    "dest_data": 1,
                    "dst_ptr_3": 1,
                    "input_pointer_1": 1,
                    "output_buffer": 2,
                    "ptr": 1,
                    "stack_param1": 1,
                    "stack_pointer": 1,
                    "stack_var1": 2,
                    "stack_var_00000030": 1,
                    "stack_var_1": 1,
                    "temp_stack_var_1": 1
                },
                "in_stack_00000038": {
                    "flag1": 1,
                    "flag_1": 1,
                    "option_flag": 1,
                    "output_buffer_length": 1,
                    "ptr_len": 1,
                    "stack_param2": 1,
                    "stack_value": 1,
                    "stack_var2": 2,
                    "stack_var_00000038": 1,
                    "stack_var_2": 1,
                    "temp_stack_var_2": 1,
                    "version_match": 1
                },
                "lVar7": {
                    "err_msg": 1,
                    "error": 1,
                    "error_message": 7,
                    "error_string": 1,
                    "gettext_result": 1,
                    "length": 5,
                    "length_var": 1,
                    "long_var1": 1,
                    "loop_var": 1,
                    "message": 2,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var_5": 1,
                    "var5": 1,
                    "var_12": 1
                },
                "malloc": {
                    "allocate_memory": 1
                },
                "memcmp": {
                    "compare_memory": 2
                },
                "param_10": {
                    "array_size": 1,
                    "buffer_size": 1,
                    "buffer_size_2": 1,
                    "data_size": 1,
                    "input_param4": 1,
                    "input_param6": 1,
                    "input_param_10": 1,
                    "num_attributes": 1,
                    "num_records": 5,
                    "output_buffer_size": 1,
                    "output_size": 2,
                    "output_value": 1,
                    "param10": 1,
                    "param4": 1,
                    "param_10": 4,
                    "param_11": 1,
                    "record_count": 1,
                    "section_size": 1,
                    "size2": 1,
                    "var_25": 1,
                    "var_4": 1
                },
                "param_11": {
                    "array4": 1,
                    "attribute_array": 1,
                    "build_attribute_records": 1,
                    "input_param5": 1,
                    "input_param7": 1,
                    "input_param_11": 1,
                    "note_records": 2,
                    "notes_array": 1,
                    "notes_array_2": 1,
                    "param11": 1,
                    "param5": 1,
                    "param_11": 3,
                    "param_12": 1,
                    "param_5": 1,
                    "ptr_input_2": 1,
                    "record_array": 4,
                    "records": 4,
                    "records_array": 3,
                    "records_ptr": 1
                },
                "param_13": {
                    "attribute_type": 1,
                    "flag_2": 1,
                    "input_param3": 1,
                    "input_param6": 1,
                    "input_param_13": 1,
                    "is_version_note": 1,
                    "multiple_versions": 1,
                    "note_size": 1,
                    "note_type_match": 1,
                    "num_records_2": 1,
                    "num_versions": 1,
                    "output_buffer_flag": 1,
                    "param13": 1,
                    "param3": 1,
                    "param6": 1,
                    "param_13": 4,
                    "param_6": 1,
                    "param_value": 1,
                    "unused_var6": 1,
                    "ver_num": 1,
                    "version": 1,
                    "version_1": 1,
                    "version_count": 1,
                    "version_note": 1,
                    "version_number": 1,
                    "version_present": 1
                },
                "param_14": {
                    "array5": 1,
                    "context": 1,
                    "error_message": 1,
                    "format_args": 1,
                    "input_param4": 1,
                    "input_param7": 1,
                    "input_param_14": 1,
                    "log_file": 1,
                    "message_params": 1,
                    "note_address": 1,
                    "param5": 1,
                    "param7": 1,
                    "param_14": 4,
                    "param_7": 1,
                    "param_pointers2": 1,
                    "parameters_array": 1,
                    "ptr_input_3": 1,
                    "unused_var7": 1,
                    "version_2": 1,
                    "version_note": 1,
                    "version_note_name": 1,
                    "version_notes": 1,
                    "version_ptr": 2,
                    "version_string": 1,
                    "version_strings": 1
                },
                "param_7": {
                    "attribute_data_2": 1,
                    "current_address": 1,
                    "current_note": 1,
                    "current_parameter": 1,
                    "in_rcx": 2,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_7": 1,
                    "input_param_copy": 1,
                    "input_value": 2,
                    "name_count": 1,
                    "note_offset": 1,
                    "param": 1,
                    "param1": 3,
                    "param7": 1,
                    "param_2": 1,
                    "param_7": 3,
                    "param_8": 1,
                    "rcx_value": 1,
                    "record_address": 1,
                    "record_size": 3,
                    "var_1": 1
                },
                "param_8": {
                    "current_parameter_index": 1,
                    "input_param2": 1,
                    "input_param_8": 1,
                    "note_version": 1,
                    "param2": 3,
                    "param8": 1,
                    "param_8": 4,
                    "param_type": 1,
                    "record_version": 1,
                    "size": 1,
                    "unused_var5": 1,
                    "var_2": 1,
                    "var_22": 1,
                    "version": 1,
                    "version_field": 1,
                    "version_size": 1
                },
                "param_9": {
                    "attribute_version": 1,
                    "current_index": 1,
                    "current_note_desc_size": 1,
                    "default_note_version": 1,
                    "description_size": 2,
                    "input_param3": 1,
                    "input_param5": 1,
                    "input_param_9": 1,
                    "min_value2": 1,
                    "min_value_2": 1,
                    "param3": 2,
                    "param9": 1,
                    "param_10": 1,
                    "param_9": 4,
                    "previous_version": 1,
                    "ret_value": 1,
                    "section_vaddr": 1,
                    "var_24": 1,
                    "var_3": 1,
                    "version_3": 1,
                    "version_copy": 1,
                    "version_data": 1,
                    "version_note": 1,
                    "version_value": 1
                },
                "parse_gnu_build_attributes_00116490": {
                    "parse_attribute_00116490": 1,
                    "parse_gnu_build_attributes": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 2
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 1,
                    "print_error_message_with_params": 1
                },
                "puVar15": {
                    "build_attribute_ptr": 1,
                    "curr_note": 1,
                    "current_note": 1,
                    "current_record": 4,
                    "current_record_pointer": 1,
                    "next_record": 1,
                    "note_data": 1,
                    "pointer": 1,
                    "pointer3": 1,
                    "pointer_var15": 1,
                    "ptr15": 1,
                    "ptr2": 1,
                    "ptr_value_3": 1,
                    "ptr_var3": 1,
                    "ptr_var_4": 1,
                    "record_pointer": 1,
                    "record_ptr": 1,
                    "records_array": 1,
                    "register3": 1,
                    "var_33": 1
                },
                "puVar16": {
                    "description_pointer": 1,
                    "description_ptr": 1,
                    "description_start": 1,
                    "dst": 1,
                    "dst_ptr": 1,
                    "name_address": 1,
                    "pointer2": 1,
                    "pointer_var16": 1,
                    "ptr16": 1,
                    "ptr3": 1,
                    "ptr_value_4": 1,
                    "ptr_var4": 1,
                    "ptr_var_1": 1,
                    "record_name": 1,
                    "register4": 1,
                    "temp_description": 1,
                    "temp_pointer_5": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "var_29": 1
                },
                "puVar18": {
                    "desc_address": 1,
                    "description_buffer": 1,
                    "dst_ptr_1": 1,
                    "name_ptr": 1,
                    "note_description": 1,
                    "pointer3": 1,
                    "pointer4": 1,
                    "pointer_var18": 1,
                    "ptr18": 1,
                    "ptr4": 1,
                    "ptr_value_5": 1,
                    "ptr_var5": 1,
                    "ptr_var_2": 1,
                    "register5": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "tmp_dst": 1,
                    "var15": 1,
                    "var_30": 1,
                    "version_start": 1
                },
                "puVar19": {
                    "description_ptr": 1,
                    "dst_ptr_2": 1,
                    "name_buffer": 1,
                    "new_note": 1,
                    "next_desc_address": 1,
                    "pointer4": 1,
                    "pointer5": 1,
                    "pointer_var19": 1,
                    "ptr19": 1,
                    "ptr5": 1,
                    "ptr_value_6": 1,
                    "ptr_var6": 1,
                    "ptr_var_5": 1,
                    "record_description": 1,
                    "register6": 1,
                    "temp_pointer2": 2,
                    "temp_pointer_3": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "tmp_end": 1,
                    "var16": 1,
                    "var_31": 1,
                    "version_description": 1
                },
                "puVar21": {
                    "compare_pointer": 1,
                    "compare_ptr": 1,
                    "compare_record": 1,
                    "pointer7": 1,
                    "pointer_var21": 1,
                    "prev_note": 1,
                    "ptr21": 1,
                    "ptr6": 1,
                    "ptr_value_8": 1,
                    "ptr_var7": 1,
                    "ptr_var_6": 1,
                    "record_ptr_1": 1,
                    "records_pointer2": 1,
                    "register10": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_4": 1,
                    "temp_ptr5": 1,
                    "temp_var4": 1,
                    "var18": 1,
                    "var_32": 1
                },
                "puVar22": {
                    "ptr7": 1
                },
                "puVar25": {
                    "str_ptr": 1
                },
                "puVar41": {
                    "pu_var41": 1
                },
                "puVar42": {
                    "pu_var42": 1
                },
                "puVar43": {
                    "pu_var43": 1
                },
                "puVar44": {
                    "pu_var44": 1
                },
                "puVar5": {
                    "current_record": 4,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer5": 1,
                    "pointer_var5": 1,
                    "prev_note_record": 1,
                    "ptr": 3,
                    "ptr1": 1,
                    "ptr5": 1,
                    "ptr_value": 1,
                    "ptr_var1": 2,
                    "ptr_var_3": 1,
                    "record": 1,
                    "temp_pointer_1": 1,
                    "temp_ptr": 1,
                    "temp_ptr_1": 1,
                    "temp_var5": 1,
                    "var_10": 1
                },
                "puVar8": {
                    "note_name": 1
                },
                "qsort": {
                    "sort_array": 1
                },
                "reverse_and_process_records_00116852": {
                    "reverse_and_process_records": 1
                },
                "uDptr": {
                    "var_21": 1
                },
                "uVar1": {
                    "i": 1,
                    "min_description_size": 1,
                    "min_size": 2,
                    "min_value": 2,
                    "minimum_length": 1,
                    "note_type": 1,
                    "record_size": 1,
                    "res": 1,
                    "result": 14,
                    "var1": 1
                },
                "uVar10": {
                    "desc_size": 1,
                    "description_size": 6,
                    "max_value": 1,
                    "maximum": 1,
                    "note_description_size": 1,
                    "note_size": 2,
                    "note_size_aligned": 1,
                    "record_description": 1,
                    "size2": 1,
                    "size_description": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var10": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var_8": 1,
                    "u_var10": 1,
                    "value2": 1,
                    "var4": 1,
                    "var8": 1,
                    "var_15": 1
                },
                "uVar11": {
                    "name_address": 1,
                    "name_offset": 1,
                    "name_size": 1,
                    "note_end": 1,
                    "note_end_address": 1,
                    "note_offset": 1,
                    "note_size": 3,
                    "offset": 1,
                    "param7_copy": 1,
                    "start": 1,
                    "start_address": 1,
                    "temp_value3": 1,
                    "temp_var1": 1,
                    "temp_var11": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var_2": 1,
                    "temp_var_9": 1,
                    "temp_variable_5": 1,
                    "u_var11": 1,
                    "value": 1,
                    "value3": 1,
                    "var5": 1,
                    "var9": 1,
                    "var_16": 1
                },
                "uVar12": {
                    "curr_note_address": 1,
                    "current_address": 1,
                    "current_note": 2,
                    "end": 1,
                    "note_address": 2,
                    "note_pointer": 1,
                    "offset": 1,
                    "param9": 1,
                    "remaining_input_value": 1,
                    "temp4": 1,
                    "temp_address": 1,
                    "temp_var12": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_var_10": 1,
                    "temp_var_3": 1,
                    "temp_variable_6": 1,
                    "u_var12": 1,
                    "value4": 1,
                    "var10": 1,
                    "var6": 1,
                    "var_17": 1
                },
                "uVar13": {
                    "attr_note_address": 1,
                    "attribute_version": 1,
                    "current_note": 1,
                    "current_offset": 1,
                    "current_size": 1,
                    "note_index": 1,
                    "param10": 1,
                    "record_index": 1,
                    "remaining_input_value_2": 1,
                    "saved_rbx": 1,
                    "start_offset": 1,
                    "temp5": 1,
                    "temp_note_size": 1,
                    "temp_value4": 1,
                    "temp_var13": 1,
                    "temp_var3": 2,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "temp_var9": 1,
                    "temp_var_11": 1,
                    "temp_var_4": 1,
                    "temp_variable_7": 1,
                    "tmp_value1": 1,
                    "u_var13": 1,
                    "var11": 1,
                    "var7": 1,
                    "var_18": 1
                },
                "uVar14": {
                    "address_value": 1,
                    "current_address": 1,
                    "current_name": 1,
                    "name": 1,
                    "name_note_address": 1,
                    "note_address": 1,
                    "note_name": 1,
                    "note_name_address": 1,
                    "note_name_size": 1,
                    "note_offset": 1,
                    "note_type": 1,
                    "param11": 1,
                    "remaining_input_value_3": 1,
                    "temp6": 1,
                    "temp_var10": 1,
                    "temp_var14": 1,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "temp_var_12": 1,
                    "temp_var_5": 1,
                    "u_var14": 1,
                    "var12": 1,
                    "var14": 1,
                    "var8": 1,
                    "var_19": 1,
                    "version": 1
                },
                "uVar15": {
                    "record_type": 1,
                    "u_var15": 1
                },
                "uVar16": {
                    "description_addr": 1,
                    "u_var16": 1
                },
                "uVar17": {
                    "temp_value5": 1,
                    "u_var17": 1
                },
                "uVar18": {
                    "temp_value6": 1,
                    "u_var18": 1
                },
                "uVar19": {
                    "temp_value7": 1,
                    "u_var19": 1
                },
                "uVar2": {
                    "descriptor_size": 1,
                    "param1": 1,
                    "string1": 3,
                    "temp1": 1,
                    "temp_var1": 2,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "temp_var_6": 1,
                    "tmp_var1": 1,
                    "u_var2": 2,
                    "var1": 1,
                    "var2": 3,
                    "var_7": 1,
                    "version_note": 1,
                    "warning_message": 4,
                    "warning_string": 1
                },
                "uVar20": {
                    "current_index": 1,
                    "name_note_version": 1,
                    "note_data_address": 1,
                    "saved_r13": 1,
                    "temp": 1,
                    "temp7": 1,
                    "temp_value8": 1,
                    "temp_var10": 1,
                    "temp_var14": 1,
                    "temp_var20": 1,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "temp_var_20": 1,
                    "temp_var_7": 1,
                    "temp_variable_8": 1,
                    "temp_version": 1,
                    "u_var20": 1,
                    "value9": 1,
                    "var9": 1,
                    "var_20": 1,
                    "version": 1,
                    "version_count": 1,
                    "version_end": 1,
                    "version_number": 2
                },
                "uVar21": {
                    "temp_param": 1,
                    "temp_value9": 1,
                    "temp_var6": 1,
                    "u_var21": 1,
                    "var10": 1
                },
                "uVar22": {
                    "excess_data_flag": 1,
                    "u_var22": 1,
                    "zero_byte": 1
                },
                "uVar23": {
                    "iteration_count": 1,
                    "loop_counter": 1,
                    "u_var23": 1
                },
                "uVar26": {
                    "u_var26": 1
                },
                "uVar27": {
                    "u_var27": 1
                },
                "uVar28": {
                    "u_var28": 1
                },
                "uVar29": {
                    "u_var29": 1
                },
                "uVar3": {
                    "file_name": 1,
                    "param2": 1,
                    "string2": 3,
                    "temp2": 1,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "temp_var_8": 1,
                    "tmp_var2": 1,
                    "u_var3": 2,
                    "var2": 1,
                    "var3": 3,
                    "var_8": 1,
                    "version_message": 1,
                    "version_note": 2,
                    "version_note_missing": 1,
                    "version_string": 1,
                    "warning_format": 1
                },
                "uVar30": {
                    "u_var30": 1
                },
                "uVar31": {
                    "u_var31": 1
                },
                "uVar32": {
                    "u_var32": 1
                },
                "uVar33": {
                    "u_var33": 1
                },
                "uVar34": {
                    "u_var34": 1
                },
                "uVar35": {
                    "u_var35": 1
                },
                "uVar36": {
                    "u_var36": 1
                },
                "uVar37": {
                    "u_var37": 1
                },
                "uVar38": {
                    "u_var38": 1
                },
                "uVar39": {
                    "u_var39": 1
                },
                "uVar4": {
                    "b_var4": 1,
                    "bool_variable_1": 1,
                    "compare_result": 1
                },
                "uVar40": {
                    "u_var40": 1
                },
                "uVar45": {
                    "u_var45": 1
                },
                "uVar46": {
                    "u_var46": 1
                },
                "uVar47": {
                    "u_var47": 1
                },
                "uVar48": {
                    "u_var48": 1
                },
                "uVar49": {
                    "u_var49": 1
                },
                "uVar50": {
                    "u_var50": 1
                },
                "uVar51": {
                    "u_var51": 1
                },
                "uVar6": {
                    "name_length": 1
                },
                "uVar7": {
                    "description_length": 1,
                    "note_name_size": 1
                },
                "uVar8": {
                    "err_msg_template": 1,
                    "error_message": 2,
                    "error_message_format": 1,
                    "error_string": 2,
                    "string3": 1,
                    "temp3": 1,
                    "temp_var3": 2,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "temp_var_6": 1,
                    "temp_var_9": 1,
                    "u_var8": 1,
                    "var6": 1,
                    "var8": 2,
                    "var_13": 1,
                    "warning_format": 1,
                    "warning_format_with_params": 1,
                    "warning_message": 1,
                    "warning_template": 1
                },
                "uVar9": {
                    "attr_size": 2,
                    "current_value": 1,
                    "current_version": 1,
                    "min_size": 1,
                    "min_value": 2,
                    "min_version": 1,
                    "minimum": 1,
                    "note_address": 1,
                    "note_desc_size": 1,
                    "note_type": 4,
                    "record_count": 1,
                    "record_size": 1,
                    "ret_value": 1,
                    "size1": 1,
                    "temp_value1": 1,
                    "temp_var4": 1,
                    "temp_var9": 1,
                    "temp_var_10": 1,
                    "temp_var_7": 1,
                    "value1": 1,
                    "var3": 1,
                    "var7": 1,
                    "var_14": 1
                },
                "unaff_R12": {
                    "array1": 1,
                    "array_pointer": 1,
                    "attribute_note": 1,
                    "attribute_ptr": 1,
                    "current_note": 1,
                    "current_record_ptr": 1,
                    "new_note_array": 1,
                    "note_records": 1,
                    "notes_array": 4,
                    "param_4": 1,
                    "pointer6": 1,
                    "ptr_input": 1,
                    "record": 1,
                    "record_ptr": 4,
                    "records": 1,
                    "records_pointer": 1,
                    "register7": 1,
                    "temp_var_19": 1,
                    "unaff_param_4": 1,
                    "unaffected_r12": 2,
                    "value7": 1,
                    "var_3": 1
                },
                "unaff_R13": {
                    "array2": 1,
                    "attr_note_version": 1,
                    "buffer_size": 1,
                    "max_version": 1,
                    "note_description_size": 1,
                    "notes_array_end": 1,
                    "param14": 1,
                    "record_count": 1,
                    "record_ptr": 1,
                    "register8": 1,
                    "remaining_record_index": 1,
                    "result2": 1,
                    "retaddr2": 1,
                    "saved_r13": 1,
                    "start_version": 1,
                    "temp_var13": 1,
                    "temp_var2": 1,
                    "temp_var_18": 1,
                    "temp_variable_3": 1,
                    "unaff_param_5": 1,
                    "unaff_r13": 1,
                    "unaffected_r13": 2,
                    "unused_var3": 1,
                    "value8": 1,
                    "var_4": 1,
                    "version": 2,
                    "version_start_3": 1
                },
                "unaff_R14": {
                    "additional_params": 1,
                    "array3": 1,
                    "context": 1,
                    "current_function_function_pointers_array": 1,
                    "file": 1,
                    "func_ptrs": 1,
                    "function_pointers": 2,
                    "function_pointers_array": 1,
                    "message_params": 1,
                    "param_6": 2,
                    "param_pointers": 1,
                    "pointer8": 1,
                    "ptr_value_7": 1,
                    "register9": 1,
                    "unaffected_r14": 2,
                    "unused_var8": 1,
                    "value10": 1,
                    "var17": 1,
                    "var_5": 1
                },
                "unaff_R15": {
                    "pointer9": 1
                },
                "unaff_RBP": {
                    "current_version_1": 1,
                    "description_ptr": 1,
                    "min_note_description_size": 1,
                    "min_version": 1,
                    "name_len": 1,
                    "name_note_size": 1,
                    "note_size": 2,
                    "param13": 1,
                    "previous_record_size": 1,
                    "record_start_3": 1,
                    "register2": 1,
                    "result3": 1,
                    "retaddr1": 1,
                    "saved_rbp": 1,
                    "start_descriptor": 1,
                    "temp_var1": 1,
                    "temp_var12": 1,
                    "temp_var_17": 1,
                    "temp_variable_2": 1,
                    "unaff_param_3": 1,
                    "unaff_rbp": 1,
                    "unaffected_rbp": 2,
                    "unused_var2": 1,
                    "value2": 1,
                    "value6": 1,
                    "var_2": 1,
                    "version_note_size": 1
                },
                "unaff_RBX": {
                    "attr_note_size": 1,
                    "attributes_remaining": 1,
                    "bytes_remaining": 1,
                    "note_count": 1,
                    "note_size_1": 1,
                    "num_bytes": 1,
                    "num_notes": 2,
                    "param12": 1,
                    "param_2": 2,
                    "record_count": 1,
                    "register1": 1,
                    "remaining_bytes": 2,
                    "remaining_note_size": 1,
                    "result4": 1,
                    "temp_var11": 1,
                    "temp_variable_1": 1,
                    "unaff_flag": 1,
                    "unaff_param_2": 1,
                    "unaffected_rbx": 2,
                    "unused_var1": 1,
                    "value1": 1,
                    "value5": 1,
                    "var_1": 1
                },
                "unaff_retaddr": {
                    "param_6": 1,
                    "result5": 1,
                    "ret_addr": 3,
                    "ret_address": 2,
                    "return_address": 8,
                    "return_value": 1,
                    "start_address": 1,
                    "temp_var17": 1,
                    "temp_var_16": 1,
                    "temp_variable_4": 1,
                    "unaff_param_7": 1,
                    "unaff_retaddr": 1,
                    "unaffected_retaddr": 1,
                    "unaffected_return_address": 1,
                    "unused_var4": 1,
                    "var_6": 1,
                    "version_3": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_00116490",
                "FUN_00119ed0",
                "FUN_001126c0",
                "dcgettext",
                "bfd_set_error",
                "FUN_0011a1b0",
                "qsort",
                "FUN_0010847a"
            ],
            "calling": [
                "FUN_00116490"
            ],
            "code": "\nulong improve_and_parse_gnu_build_attributes_001086af(void)\n\n{\n  ulong result;\n  undefined8 warning_message;\n  undefined8 var3;\n  bool is_true;\n  ulong *current_record;\n  int memcmp_result;\n  long error_message;\n  undefined8 var8;\n  ulong note_type;\n  ulong description_size;\n  ulong note_size;\n  undefined *buffer;\n  ulong param_1;\n  ulong note_address;\n  ulong temp_var3;\n  ulong current_address;\n  ulong unaffected_rbx;\n  ulong note_size;\n  ulong *current_record;\n  undefined *ptr16;\n  char char_var;\n  undefined *ptr_value_5;\n  undefined *temp_pointer2;\n  ulong *notes_array;\n  ulong unaffected_r13;\n  ulong version_number;\n  size_t num_records;\n  undefined8 *param_6;\n  ulong *ptr6;\n  byte flag;\n  int loop_counter;\n  ulong return_address;\n  ulong param1;\n  uint param_8;\n  ulong param_9;\n  ulong num_records;\n  ulong *records;\n  undefined *stack_var1;\n  uint stack_var2;\n  uint param_13;\n  undefined8 *param_14;\n  \n  flag = 0;\n  param1 = param_1;\n  note_type = (**(code **)(param_6[1] + 0x40))();\n  description_size = (**(code **)(param_6[1] + 0x40))(notes_array[4] + 4);\nLAB_0011662a:\n  temp_var3 = note_size;\n  version_number = unaffected_r13;\n  if (description_size < note_type) {\n    note_type = description_size;\n  }\n  do {\n    note_size = param1;\n    note_address = param1;\n    current_record = notes_array;\n    if (notes_array[2] == 0x100) {\n      if (note_type == 0) {\n        note_type = return_address;\n      }\n      current_address = *notes_array;\n      notes_array[7] = note_type;\n      note_size = temp_var3;\n      unaffected_r13 = description_size;\n      return_address = note_type;\n      if (description_size == 0) goto LAB_001164af;\n    }\n    else {\n      if (note_type == 0) {\n        note_type = param_9;\n      }\n      current_address = *notes_array;\n      notes_array[7] = note_type;\n      note_size = description_size;\n      unaffected_r13 = version_number;\n      param_9 = note_type;\n      if (description_size == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    current_record[8] = description_size;\n    if (*(char *)((current_record[3] - 1) + current_address) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    notes_array = current_record + 9;\n    if (unaffected_rbx < 0xc) {\n      if (unaffected_rbx != 0) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack_var2 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (stack_var2 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        error_message = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      warning_message = *param_6;\n      var3 = *param_14;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message(var8,warning_message,var3);\nLAB_0011671b:\n      num_records = ((long)notes_array - (long)records >> 3) * -0x71c71c71c71c71c7;\n      qsort(records,num_records,0x48,compare_memory_values);\n      current_record = records;\n      goto LAB_001167f9;\n    }\n    description_size = (**(code **)(param_6[1] + 0x40))(note_address);\n    *notes_array = description_size;\n    description_size = (**(code **)(param_6[1] + 0x40))(note_address + 4);\n    current_record[10] = description_size;\n    note_type = (**(code **)(param_6[1] + 0x40))(note_address + 8);\n    current_address = *notes_array;\n    current_record[0xb] = note_type;\n    description_size = current_record[10];\n    temp_var3 = current_address + 3 & 0xfffffffffffffffc;\n    current_record[0xf] = temp_var3;\n    if (description_size != (description_size + 3 & 0xfffffffffffffffc)) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    note_size = temp_var3 + description_size + 0xc;\n    if (unaffected_rbx < note_size) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (current_address < 2) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    current_record[0xc] = note_address + 0xc;\n    result = note_address + 0xc + temp_var3;\n    current_record[0xd] = result;\n    unaffected_rbx = unaffected_rbx + (-0xc - (temp_var3 + description_size));\n    note_size = note_address + note_size;\n    if (current_address != 2) {\n      if (*(char *)(note_address + 0xc) == '$') {\n        if ((*(char *)(note_address + 0xd) == '\\x01') && (*(char *)(note_address + 0xe) == '1')) {\n          description_size = parse_gnu_build_attributes();\n          return description_size;\n        }\n      }\n      else if ((((4 < current_address) && (*(char *)(note_address + 0xc) == 'G')) &&\n               (*(char *)(note_address + 0xd) == 'A')) &&\n              ((*(char *)(note_address + 0xe) == '$' && (*(char *)(note_address + 0xf) == '\\x01')))) {\n        if (*(char *)(note_address + 0x10) == '2') {\n          description_size = parse_gnu_build_attributes();\n          return description_size;\n        }\n        if (*(char *)(note_address + 0x10) == '3') {\n          description_size = parse_gnu_build_attributes();\n          return description_size;\n        }\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_var3 = note_size;\n    version_number = unaffected_r13;\n    if (description_size == 0) {\n      if (note_type == 0x100) {\n        current_record[0x10] = return_address;\nLAB_001164af:\n        note_address = note_size;\n        description_size = version_number;\n        current_record = notes_array;\n        unaffected_r13 = version_number;\n      }\n      else {\n        current_record[0x10] = param_9;\nLAB_0011669e:\n        note_size = temp_var3;\n        note_address = note_size;\n        description_size = temp_var3;\n        current_record = notes_array;\n        unaffected_r13 = version_number;\n      }\n      goto LAB_001164bb;\n    }\n    if (description_size == 0x10) break;\n    if (0x10 < description_size) {\nLAB_00116679:\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (error_message != 0) {\n        bfd_set_error(0x11);\n        print_bfd_error_message(0,param_6,param_14,error_message);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (description_size != 4) {\n      if (description_size == 8) {\n        description_size = improve_and_parse_gnu_build_attributes_001086af();\n        return description_size;\n      }\n      goto LAB_00116679;\n    }\n    param1 = note_size;\n    note_type = (**(code **)(param_6[1] + 0x40))();\n    description_size = 0xffffffffffffffff;\n  } while( true );\n  param1 = note_size;\n  note_type = (**(code **)(param_6[1] + 0x28))(result);\n  description_size = (**(code **)(param_6[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (notes_array <= current_record) {\n    qsort(records,num_records,0x48,compare_records);\n    buffer = (undefined *)xmalloc(num_records * 2);\n    param1 = 0;\n    param_9 = 0;\n    temp_pointer2 = buffer;\n    for (current_record = records; current_record < notes_array; current_record = current_record + 9) {\n      if (current_record[2] != 0) {\n        ptr_value_5 = temp_pointer2 + 4;\n        ptr16 = temp_pointer2 + 0xc;\n        if ((current_record[7] == param_9) && (current_record[8] == param1)) {\n          (**(code **)(param_6[1] + 0x50))(*current_record,temp_pointer2);\n          (**(code **)(param_6[1] + 0x50))(0,ptr_value_5);\n          (**(code **)(param_6[1] + 0x50))(current_record[2],temp_pointer2 + 8);\n          note_type = current_record[6];\n          description_size = *current_record;\n          temp_pointer2 = (undefined *)current_record[3];\n          ptr_value_5 = ptr16;\n          for (temp_var3 = description_size; temp_var3 != 0; temp_var3 = temp_var3 - 1) {\n            *ptr_value_5 = *temp_pointer2;\n            temp_pointer2 = temp_pointer2 + (ulong)flag * -2 + 1;\n            ptr_value_5 = ptr_value_5 + (ulong)flag * -2 + 1;\n          }\n          if (description_size < note_type) {\n            for (error_message = note_type - description_size; error_message != 0; error_message = error_message + -1) {\n              *ptr_value_5 = 0;\n              ptr_value_5 = ptr_value_5 + (ulong)flag * -2 + 1;\n            }\n          }\n          temp_pointer2 = ptr16 + note_type;\n        }\n        else {\n          (**(code **)(param_6[1] + 0x50))();\n          if (*(int *)(param_6[1] + 8) == 5) {\n            char_var = (*(char *)(param_6[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(param_6[1] + 0x50))(char_var,ptr_value_5);\n          (**(code **)(param_6[1] + 0x50))(current_record[2],temp_pointer2 + 8);\n          description_size = *current_record;\n          temp_pointer2 = (undefined *)current_record[3];\n          ptr_value_5 = ptr16;\n          for (note_type = description_size; note_type != 0; note_type = note_type - 1) {\n            *ptr_value_5 = *temp_pointer2;\n            temp_pointer2 = temp_pointer2 + (ulong)flag * -2 + 1;\n            ptr_value_5 = ptr_value_5 + (ulong)flag * -2 + 1;\n          }\n          note_type = current_record[6];\n          if (description_size < note_type) {\n            for (error_message = note_type - description_size; error_message != 0; error_message = error_message + -1) {\n              *ptr_value_5 = 0;\n              ptr_value_5 = ptr_value_5 + (ulong)flag * -2 + 1;\n            }\n          }\n          error_message = param_6[1];\n          ptr16 = ptr16 + note_type;\n          temp_pointer2 = ptr16 + 8;\n          if ((*(int *)(error_message + 8) == 5) && (*(char *)(param_6[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_message + 0x38))(current_record[7],ptr16);\n            (**(code **)(param_6[1] + 0x38))(current_record[8],temp_pointer2);\n            temp_pointer2 = ptr16 + 0x10;\n          }\n          else {\n            (**(code **)(error_message + 0x50))(current_record[7],ptr16);\n            (**(code **)(param_6[1] + 0x50))(current_record[8],ptr16 + 4);\n          }\n          param_9 = current_record[7];\n          param1 = current_record[8];\n        }\n      }\n    }\n    note_type = (long)temp_pointer2 - (long)buffer;\n    description_size = note_type;\n    temp_pointer2 = buffer;\n    if (note_type < num_records) {\n      for (; num_records = note_type, description_size != 0; description_size = description_size - 1) {\n        *stack_var1 = *temp_pointer2;\n        temp_pointer2 = temp_pointer2 + (ulong)flag * -2 + 1;\n        stack_var1 = stack_var1 + (ulong)flag * -2 + 1;\n      }\n    }\n    free_memory(buffer);\nLAB_001166f8:\n    free_memory(records);\n    return num_records;\n  }\n  if (current_record[2] != 0) {\n    description_size = current_record[7];\n    note_type = current_record[8];\n    temp_var3 = current_record[2];\n    ptr6 = current_record;\n    loop_counter = 0;\n    if (description_size == note_type) {\n      current_record[2] = 0;\n    }\n    else {\n      do {\n        do {\n          current_record = ptr6;\n          ptr6 = current_record + -9;\n          if (ptr6 < records) goto LAB_001167f5;\n          version_number = current_record[-7];\n        } while (version_number == 0);\n        param1 = temp_var3;\n        if ((*ptr6 != *current_record) ||\n           (memcmp_result = compare_memory((void *)current_record[-6],(void *)current_record[3],*current_record), memcmp_result != 0)) break;\n        temp_var3 = current_record[-2];\n        note_size = current_record[-1];\n        if (description_size == temp_var3) {\n          if (note_type == note_size) {\n            current_record[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (note_type <= note_size) {\n            current_record[2] = 0;\n            break;\n          }\n          if (note_size < description_size) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < note_size) || (description_size <= (note_size + 0xf & 0xfffffffffffffff0)))\n            goto reverse_and_process_records;\n          }\nLAB_001167b8:\n          if ((param1 == 0x101) == (version_number == 0x101)) {\n            if (note_size <= note_type) {\n              note_size = note_type;\n            }\n            if (temp_var3 < description_size) {\n              description_size = temp_var3;\n            }\n            current_record[-1] = note_size;\n            current_record[-2] = description_size;\n            current_record[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (temp_var3 <= description_size) goto LAB_001167a6;\n          if (note_size < description_size) goto LAB_0010852c;\n          if (note_type < description_size) {\n            if ((0xfffffffffffffff0 < note_type) || (temp_var3 <= (note_type + 0xf & 0xfffffffffffffff0)))\n            goto reverse_and_process_records;\n            goto LAB_001167b8;\n          }\n          if (note_type != note_size) goto LAB_001167b8;\n        }\nreverse_and_process_records:\n        is_true = loop_counter < 0x11;\n        temp_var3 = param1;\n        loop_counter = loop_counter + 1;\n      } while (is_true);\n    }\n  }\nLAB_001167f5:\n  current_record = current_record + 9;\n  goto LAB_001167f9;\n}\n\n",
            "current_name": "improve_and_parse_gnu_build_attributes_001086af",
            "entrypoint": "0x001086af",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001086af": "improve_and_parse_gnu_build_attributes_001086af",
                "__nmemb": "num_records",
                "__ptr": "buffer",
                "_ptr": "var13",
                "bVar22": "flag",
                "bVar4": "is_true",
                "bfd_set_error": "set_bfd_error",
                "cVar17": "char_var",
                "compare_memory_and_values_0011a1b0": "compare_memory_values",
                "compare_records_0011a250": "compare_records",
                "dcgettext": "get_text_translated_by_domain",
                "free": "free_memory",
                "iVar23": "loop_counter",
                "iVar6": "memcmp_result",
                "in_RCX": "param_1",
                "in_stack_00000030": "stack_var1",
                "in_stack_00000038": "stack_var2",
                "lVar7": "error_message",
                "malloc": "allocate_memory",
                "memcmp": "compare_memory",
                "param_10": "num_records",
                "param_11": "records",
                "param_7": "param1",
                "parse_gnu_build_attributes_00116490": "parse_gnu_build_attributes",
                "print_bfd_error_message_001126c0": "print_bfd_error_message",
                "print_error_message_with_params_00119ed0": "print_error_message",
                "puVar15": "current_record",
                "puVar16": "ptr16",
                "puVar18": "ptr_value_5",
                "puVar19": "temp_pointer2",
                "puVar21": "ptr6",
                "puVar5": "current_record",
                "qsort": "sort_array",
                "reverse_and_process_records_00116852": "reverse_and_process_records",
                "uVar1": "result",
                "uVar10": "description_size",
                "uVar11": "note_size",
                "uVar12": "note_address",
                "uVar13": "temp_var3",
                "uVar14": "current_address",
                "uVar15": "u_var15",
                "uVar16": "u_var16",
                "uVar18": "temp_value6",
                "uVar19": "u_var19",
                "uVar2": "warning_message",
                "uVar20": "version_number",
                "uVar21": "u_var21",
                "uVar3": "var3",
                "uVar8": "var8",
                "uVar9": "note_type",
                "unaff_R12": "notes_array",
                "unaff_R13": "unaffected_r13",
                "unaff_R14": "param_6",
                "unaff_RBP": "note_size",
                "unaff_RBX": "unaffected_rbx",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010870e": {
            "additional_data": {
                "FUN_0010870e": {
                    "copy_value_and_increment_pointer": 2,
                    "copy_value_to_next": 1,
                    "copy_value_to_pointer": 1,
                    "set_next_pointer": 1,
                    "set_next_value": 1,
                    "set_pointer_value": 1,
                    "store_argument_and_update_pointer": 1,
                    "store_next_value": 1,
                    "store_param2_and_increment_param3": 1,
                    "store_param_and_increment": 1,
                    "store_parameter_value": 6,
                    "store_value": 1,
                    "store_value_and_increment": 2,
                    "store_value_and_increment_pointer": 1,
                    "store_value_and_move_pointer": 1,
                    "store_value_and_update_pointer": 3,
                    "update_memory_with_long": 1,
                    "update_pointer_and_increment": 1,
                    "update_pointer_and_value": 3,
                    "update_pointer_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "dest": 1,
                    "destination": 7,
                    "destination_address": 2,
                    "dst": 1,
                    "new_param1": 1,
                    "new_value": 1,
                    "param1": 5,
                    "pointer": 1,
                    "pointer_to_update": 1,
                    "previous_value": 1,
                    "store_value": 1,
                    "value": 2,
                    "value_ptr": 1,
                    "value_to_store": 5
                },
                "param_2": {
                    "arg2": 1,
                    "destination": 2,
                    "memory_address": 1,
                    "new_param2": 1,
                    "new_value": 9,
                    "param2": 5,
                    "parameter_value": 2,
                    "source": 1,
                    "value": 7,
                    "value_to_store": 2
                },
                "param_3": {
                    "arg3": 1,
                    "data_pointer": 2,
                    "input_data": 1,
                    "param3": 3,
                    "parameter_list": 1,
                    "pointer": 9,
                    "pointer_and_offset": 1,
                    "pointer_list": 1,
                    "pointer_to_data": 4,
                    "pointer_to_long": 1,
                    "pointer_to_value": 1,
                    "ptr": 1,
                    "ptr_to_data": 1,
                    "ptr_to_long": 1,
                    "source": 1,
                    "updated_memory_pointer": 1,
                    "value_pointer": 1
                },
                "puVar1": {
                    "current_memory": 1,
                    "current_pointer": 3,
                    "current_ptr": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "dest_pointer": 1,
                    "new_value_ptr": 1,
                    "next_value_address": 1,
                    "parameter_pointer": 1,
                    "pointer_to_current_value": 1,
                    "pointer_to_destination": 1,
                    "pointer_to_store_at": 1,
                    "pointer_to_stored_value": 1,
                    "pointer_to_value": 2,
                    "pointer_value": 3,
                    "ptr_to_data": 1,
                    "ptr_to_long_value": 1,
                    "ptr_to_value": 1,
                    "ptr_val": 1,
                    "ptr_value": 2,
                    "updated_pointer": 1,
                    "value_pointer": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid store_value_and_update_pointer_0010870e(undefined8 destination,undefined8 new_value,long *pointer)\n\n{\n  undefined8 *pointer_value;\n  \n  pointer_value = (undefined8 *)*pointer;\n  *pointer_value = new_value;\n  *pointer = (long)(pointer_value + 1);\n  return;\n}\n\n",
            "current_name": "store_value_and_update_pointer_0010870e",
            "entrypoint": "0x0010870e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010870e": "store_value_and_update_pointer_0010870e",
                "param_1": "destination",
                "param_2": "new_value",
                "param_3": "pointer",
                "puVar1": "pointer_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010871c": {
            "additional_data": {
                "FUN_0010871c": {
                    "display_error": 1,
                    "print_error": 4,
                    "print_error_info": 1,
                    "print_error_information": 1,
                    "print_error_message": 24
                },
                "uVar1": {
                    "error_description": 2,
                    "error_message": 20,
                    "error_msg": 2,
                    "error_string": 2,
                    "error_text": 1
                },
                "unaff_RBX": {
                    "error_code": 21,
                    "error_condition": 1,
                    "error_flag": 6,
                    "error_value": 1,
                    "has_error": 1,
                    "is_error_set": 1
                },
                "unaff_retaddr": {
                    "return_address": 31
                }
            },
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011a110"
            ],
            "code": "\n\n\nvoid print_error_message_0010871c(void)\n\n{\n  undefined8 error_message;\n  long error_code;\n  undefined8 return_address;\n  \n  error_message = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (error_code != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,error_message,return_address);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010871c",
            "entrypoint": "0x0010871c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "error_message",
                "unaff_RBX": "error_code",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010875d": {
            "additional_data": {
                "FUN_0010875d": {
                    "compare_and_order": 2,
                    "compare_items": 2,
                    "compare_params": 1,
                    "compare_records": 26
                },
                "iVar3": {
                    "comparison_result": 4,
                    "result": 27
                },
                "lVar1": {
                    "first_element_list1": 1,
                    "first_record_value": 1,
                    "item1_ptr": 1,
                    "item1_value": 1,
                    "item_1": 1,
                    "record1_address": 1,
                    "record1_value": 6,
                    "record1_value1": 1,
                    "size1": 1,
                    "size_record1": 1,
                    "status1": 1,
                    "timestamp1": 3,
                    "value1": 9,
                    "value_1": 3
                },
                "lVar2": {
                    "first_element_list2": 1,
                    "item2_ptr": 1,
                    "item2_value": 1,
                    "item_2": 1,
                    "record2_address": 1,
                    "record2_value": 6,
                    "record2_value1": 1,
                    "second_record_value": 1,
                    "size2": 1,
                    "size_record2": 1,
                    "status2": 1,
                    "timestamp2": 3,
                    "value2": 9,
                    "value_2": 3
                },
                "param_1": {
                    "first_record": 1,
                    "item1": 1,
                    "items1": 1,
                    "list1": 1,
                    "list_1": 1,
                    "record1": 22,
                    "record_1": 3,
                    "values_1": 1
                },
                "param_2": {
                    "item2": 1,
                    "items2": 1,
                    "list2": 1,
                    "list_2": 1,
                    "record2": 22,
                    "record_2": 3,
                    "second_record": 1,
                    "values_2": 1
                },
                "uVar4": {
                    "comparison_flag": 1,
                    "flag": 23,
                    "flags": 2,
                    "item2_flag": 1,
                    "item2_var": 1,
                    "record2_flag": 1,
                    "record2_flags": 1,
                    "record2_value1_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "compare_records_0010875d",
            "entrypoint": "0x0010875d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "iVar3": "result",
                "lVar1": "value1",
                "lVar2": "value2",
                "param_1": "record1",
                "param_2": "record2",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087da": {
            "additional_data": {
                "FUN_001087da": {
                    "check_if_rax_equal_to100": 1,
                    "check_if_rax_equal_to256": 1,
                    "check_if_rax_equals100": 6,
                    "check_if_rax_equals256": 1,
                    "check_if_rax_equals_one_hundred": 1,
                    "check_if_rax_is100": 1,
                    "check_if_rax_is_0x100": 1,
                    "check_if_rax_is_one_hundred": 1,
                    "check_if_value_is256": 2,
                    "check_input_value": 1,
                    "check_rax_value": 10,
                    "check_value": 2,
                    "check_value_and_store_result": 1,
                    "check_value_equals100": 2
                },
                "auVar1": {
                    "output_array": 1,
                    "result": 19,
                    "return_value": 3
                },
                "in_RAX": {
                    "input": 1,
                    "input_value": 12,
                    "rax": 1,
                    "rax_value": 1,
                    "value": 10,
                    "value_to_check": 4
                },
                "unaff_retaddr": {
                    "return_addr": 1,
                    "return_address": 26
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a1b0"
            ],
            "code": "\nundefined  [16] check_rax_value_001087da(void)\n\n{\n  long input_value;\n  undefined result [16];\n  undefined8 return_address;\n  \n  result._1_7_ = 0;\n  result[0] = input_value == 0x100;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "current_name": "check_rax_value_001087da",
            "entrypoint": "0x001087da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "auVar1": "result",
                "in_RAX": "input_value",
                "unaff_retaddr": "return_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001087fd": {
            "additional_data": {
                "FUN_001087fd": {
                    "calculate_result": 2,
                    "clear_function": 1,
                    "execute_default_task": 1,
                    "get_default_value": 12,
                    "get_return_value": 1,
                    "get_zero_value": 1,
                    "initialize": 4,
                    "initialize_application": 2,
                    "initialize_data": 1,
                    "initialize_data_structure": 1,
                    "initialize_program": 3,
                    "initialize_variables": 1,
                    "return_zero": 1
                },
                "undefined8": {
                    "uint64_t": 2,
                    "void": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_0011a250"
            ],
            "code": "\nvoid get_default_value_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "get_default_value_001087fd",
            "entrypoint": "0x001087fd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "undefined8": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108800": {
            "additional_data": {
                "FUN_00108800": {
                    "calculate_hash": 4,
                    "calculate_hash_value": 1,
                    "compute_hash": 1,
                    "hash_and_return": 1,
                    "hash_string": 24
                },
                "htab_hash_string": {
                    "hash_string": 1
                },
                "param_1": {
                    "hash_ptr": 1,
                    "input": 1,
                    "input_str": 1,
                    "input_string": 12,
                    "str": 2,
                    "str_ptr": 2,
                    "string": 3,
                    "string_pointer": 2,
                    "string_ptr": 1
                }
            },
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid hash_string_00108800(undefined8 *input_string)\n\n{\n  hash_string_00108800(*input_string);\n  return;\n}\n\n",
            "current_name": "hash_string_00108800",
            "entrypoint": "0x00108800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "htab_hash_string": "hash_string",
                "param_1": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108808": {
            "additional_data": {
                "FUN_00108808": {
                    "find_and_print_error_message": 1,
                    "find_section_and_print_error_message": 1,
                    "print_error_and_exit": 2,
                    "print_error_if_section_not_found": 2,
                    "print_error_message_and_exit": 15,
                    "print_error_message_if_section_not_found": 5,
                    "print_error_message_on_section_not_found": 1,
                    "print_error_message_section_not_found": 1,
                    "print_section_error_message_and_exit": 1,
                    "print_section_not_found_error": 1,
                    "print_section_not_found_error_message": 1
                },
                "uVar1": {
                    "section_address": 23,
                    "section_pointer": 3,
                    "section_ptr": 3,
                    "section_value": 1,
                    "value": 1
                },
                "uVar2": {
                    "error_message": 28,
                    "error_msg": 1,
                    "gettext_result": 1,
                    "section_not_found_error_message": 1
                },
                "unaff_RBP": {
                    "base_pointer": 25,
                    "base_ptr": 1,
                    "stack_base_offset": 1,
                    "stack_base_pointer": 2,
                    "stack_offset": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011a2e0"
            ],
            "code": "\nvoid print_section_error_message_and_exit_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_message_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "current_name": "print_section_error_message_and_exit_00108808",
            "entrypoint": "0x00108808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108808": "print_section_error_message_and_exit_00108808",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "base_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010882c": {
            "additional_data": {
                "FUN_0010882c": {
                    "print_error_and_exit": 1,
                    "print_error_message": 19,
                    "print_error_message_and_time": 1,
                    "print_error_message_if_cannot_set_time": 1,
                    "print_error_message_with_params": 1,
                    "print_error_message_with_time_param": 1,
                    "print_set_time_error": 2,
                    "print_set_time_error_message": 1,
                    "print_time_error": 1,
                    "print_time_error_message": 1,
                    "print_time_set_error_message": 1,
                    "set_time_error": 1
                },
                "__errno_location": {
                    "get_errno_location": 1,
                    "get_error_location": 1
                },
                "dcgettext": {
                    "get_localized_error_message": 1
                },
                "piVar1": {
                    "errno": 1,
                    "errno_location": 6,
                    "errno_location_pointer": 2,
                    "errno_ptr": 8,
                    "errno_value": 2,
                    "error_code": 2,
                    "error_code_ptr": 2,
                    "error_location": 3,
                    "error_location_ptr": 1,
                    "error_pointer": 3
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 1
                },
                "strerror": {
                    "get_error_description": 1
                },
                "uVar2": {
                    "error_message": 18,
                    "error_message_ptr": 1,
                    "error_string": 9,
                    "gettext_result": 1,
                    "translated_error_message": 1,
                    "translated_message": 1
                }
            },
            "called": [
                "__errno_location",
                "FUN_00119ed0",
                "dcgettext",
                "strerror"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\nvoid print_error_message_with_time_param_0010882c(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message(error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_with_time_param_0010882c",
            "entrypoint": "0x0010882c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010882c": "print_error_message_with_time_param_0010882c",
                "__errno_location": "get_error_location",
                "dcgettext": "get_localized_error_message",
                "piVar1": "errno_ptr",
                "print_error_message_with_params_00119ed0": "print_error_message",
                "strerror": "get_error_description",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108863": {
            "additional_data": {
                "FUN_00108863": {
                    "cleanup_memory": 3,
                    "clear_memory": 10,
                    "clear_memory_blocks": 1,
                    "free_memory": 4,
                    "free_memory_blocks": 10,
                    "free_memory_chunks": 1,
                    "release_memory": 2
                },
                "puVar1": {
                    "block_pointer": 4,
                    "current_address": 1,
                    "current_block": 6,
                    "current_chunk": 1,
                    "current_data": 1,
                    "current_entry": 1,
                    "current_pointer": 7,
                    "current_ptr": 2,
                    "data_array_ptr": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "pointer": 3
                },
                "puVar2": {
                    "next_address": 1,
                    "next_array_ptr": 2,
                    "next_block": 6,
                    "next_block_pointer": 4,
                    "next_chunk": 1,
                    "next_data": 1,
                    "next_data_pointer": 1,
                    "next_data_ptr": 1,
                    "next_entry": 1,
                    "next_pointer": 10,
                    "next_ptr": 2
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid free_memory_blocks_00108863(void)\n\n{\n  undefined4 *current_pointer;\n  undefined4 *next_pointer;\n  \n  current_pointer = (undefined4 *)&DAT_00127720;\n  do {\n    next_pointer = current_pointer + 6;\n    free(*(void **)(current_pointer + 4));\n    *(undefined8 *)(current_pointer + 4) = 0;\n    current_pointer = next_pointer;\n  } while (next_pointer != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "current_name": "free_memory_blocks_00108863",
            "entrypoint": "0x00108863",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "current_pointer",
                "puVar2": "next_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108898": {
            "additional_data": {
                "FUN_00108898": {
                    "compare_strings": 31
                },
                "auVar2": {
                    "comparison_flags": 1,
                    "comparison_output": 1,
                    "comparison_result": 7,
                    "result": 9
                },
                "iVar1": {
                    "comparison_result": 22,
                    "result": 2,
                    "strcmp_result": 1,
                    "string_comparison_result": 6
                },
                "in_RAX": {
                    "result_register": 1,
                    "return_value": 10,
                    "undefined_value": 1,
                    "unused": 2
                },
                "param_1": {
                    "string1": 28,
                    "string1_ptr": 1,
                    "string_1": 2
                },
                "param_2": {
                    "string2": 28,
                    "string2_ptr": 1,
                    "string_2": 2
                }
            },
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] compare_strings_00108898(char **string1,char **string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined result [16];\n  \n  comparison_result = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "compare_strings_00108898",
            "entrypoint": "0x00108898",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "auVar2": "result",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001088ae": {
            "additional_data": {
                "FUN_001088ae": {
                    "extract_data": 1,
                    "update_data": 9,
                    "update_data_and_return_count": 1,
                    "update_data_and_return_index": 4,
                    "update_data_and_return_offset": 1,
                    "update_data_entry": 12,
                    "update_data_record": 2,
                    "update_function_data": 1
                },
                "free": {
                    "release_data_entry": 1
                },
                "iVar1": {
                    "current_index": 8,
                    "index": 2,
                    "new_entry_index": 1,
                    "new_index": 11,
                    "next_data_index": 1,
                    "next_entry_index": 1,
                    "next_index": 3,
                    "updated_counter": 1,
                    "updated_index": 2
                },
                "lVar2": {
                    "counter": 1,
                    "current_data_index": 2,
                    "current_entry": 3,
                    "current_entry_index": 2,
                    "current_idx": 2,
                    "current_index": 3,
                    "current_offset": 1,
                    "current_position": 2,
                    "current_value": 2,
                    "data_index": 2,
                    "entry_index": 1,
                    "index": 8,
                    "list_index": 1,
                    "original_index": 1
                },
                "lVar3": {
                    "array_index": 1,
                    "current_data_offset": 1,
                    "current_entry_offset": 1,
                    "current_offset": 1,
                    "data_offset": 1,
                    "entry_index": 2,
                    "entry_offset": 6,
                    "list_offset": 1,
                    "new_data_index": 1,
                    "offset": 14,
                    "record_index": 1,
                    "updated_offset": 1
                },
                "param_1": {
                    "data1": 2,
                    "data_1": 1,
                    "entry_id": 1,
                    "entry_param1": 1,
                    "id": 1,
                    "new_param1": 1,
                    "new_val1": 1,
                    "new_value1": 15,
                    "record_type": 1,
                    "value1": 7
                },
                "param_2": {
                    "data2": 2,
                    "data_2": 1,
                    "entry_param2": 1,
                    "entry_type": 1,
                    "new_param2": 1,
                    "new_val2": 1,
                    "new_value2": 15,
                    "record_status": 1,
                    "status": 1,
                    "value2": 7
                },
                "param_3": {
                    "address1": 2,
                    "data1": 3,
                    "data3": 2,
                    "data_3": 1,
                    "entry_param3": 1,
                    "entry_value1": 1,
                    "new_param3": 1,
                    "new_val3": 1,
                    "new_value3": 15,
                    "record_value1": 1,
                    "timestamp": 1,
                    "value3": 2
                },
                "param_4": {
                    "address2": 1,
                    "data": 2,
                    "data2": 3,
                    "data4": 2,
                    "data_4": 1,
                    "entry_param4": 1,
                    "entry_value2": 1,
                    "new_param4": 1,
                    "new_string": 1,
                    "new_val4": 1,
                    "new_value4": 14,
                    "record_value2": 1,
                    "str_to_duplicate": 1,
                    "value4": 1
                },
                "uVar4": {
                    "copied_string": 3,
                    "copied_value": 1,
                    "duplicate_data": 2,
                    "duplicate_record_value2": 1,
                    "duplicate_str": 1,
                    "duplicated_address": 1,
                    "duplicated_data": 2,
                    "duplicated_entry_value": 1,
                    "duplicated_str": 4,
                    "duplicated_string": 9,
                    "duplicated_value": 3,
                    "new_string": 1,
                    "str": 1,
                    "str_duplicate": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [
                "free",
                "xstrdup"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nulong update_data_entry_001088ae(undefined4 new_value1,undefined4 new_value2,undefined8 new_value3,undefined8 new_value4)\n\n{\n  int new_index;\n  long index;\n  long offset;\n  undefined8 duplicated_string;\n  \n  index = (long)DAT_001278a0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127730)[index * 3]);\n  *(undefined4 *)(&DAT_00127720 + offset) = new_value1;\n  *(undefined4 *)(&DAT_00127724 + offset) = new_value2;\n  *(undefined8 *)(&DAT_00127728 + offset) = new_value3;\n  duplicated_string = xstrdup(new_value4);\n  (&DAT_00127730)[index * 3] = duplicated_string;\n  new_index = DAT_001278a0 + 1;\n  DAT_001278a0 = new_index % 0x10;\n  return (long)new_index / 0x10 & 0xffffffff;\n}\n\n",
            "current_name": "update_data_entry_001088ae",
            "entrypoint": "0x001088ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "free": "release_data_entry",
                "iVar1": "new_index",
                "lVar2": "index",
                "lVar3": "offset",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "param_4": "new_value4",
                "uVar4": "duplicated_string",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108916": {
            "additional_data": {
                "DAT_001275e0": {
                    "translation_catalog": 1
                },
                "FUN_00108916": {
                    "print_binary_copy_usage": 1,
                    "print_binary_file_copy_help": 1,
                    "print_help": 1,
                    "print_usage": 24,
                    "print_usage_message": 3
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_translated_string": 1,
                    "get_translated_text": 2,
                    "get_translation": 1
                },
                "exit": {
                    "exit_program": 1
                },
                "fprintf": {
                    "print_formatted_message": 1,
                    "print_formatted_text": 1,
                    "write_output": 1,
                    "write_to_file": 1
                },
                "param_1": {
                    "file": 2,
                    "file_pointer": 1,
                    "output_file": 27,
                    "output_stream": 1
                },
                "param_2": {
                    "error_code": 5,
                    "exit_code": 24,
                    "exit_status": 1,
                    "status": 1
                },
                "pcVar2": {
                    "localization_string": 1,
                    "localized_message": 1,
                    "localized_msg": 1,
                    "message": 16,
                    "message_ptr": 1,
                    "msg_ptr": 1,
                    "text": 5,
                    "text_ptr": 1,
                    "translated_text": 1,
                    "translation": 1,
                    "translation_buffer": 1,
                    "translation_string": 1
                },
                "print_supported_targets_00104a35": {
                    "print_supported_targets": 3
                },
                "uVar1": {
                    "data_var": 1,
                    "default_message": 1,
                    "language": 1,
                    "message": 3,
                    "msg": 1,
                    "usage_description": 1,
                    "usage_info": 1,
                    "usage_message": 5,
                    "usage_string": 13,
                    "usage_text": 2,
                    "version": 1
                }
            },
            "called": [
                "fprintf",
                "exit",
                "dcgettext",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_message_00108916(FILE *output_file,int exit_code)\n\n{\n  undefined8 usage_string;\n  char *message;\n  \n  usage_string = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(output_file,message,usage_string);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_message_00108916",
            "entrypoint": "0x00108916",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108916": "print_usage_message_00108916",
                "dcgettext": "get_translated_text",
                "exit": "exit_program",
                "fprintf": "write_to_file",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "print_supported_targets_00104a35": "print_supported_targets",
                "uVar1": "usage_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108a2a": {
            "additional_data": {
                "FUN_00108a2a": {
                    "print_strip_usage": 1,
                    "print_stripped_output_help": 1,
                    "print_usage": 14,
                    "print_usage_and_exit": 13,
                    "print_usage_message": 2
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_localized_string": 1,
                    "get_translated_message": 1
                },
                "exit": {
                    "exit_program": 1
                },
                "fprintf": {
                    "print_formatted_message": 1,
                    "print_formatted_output": 1
                },
                "param_1": {
                    "file": 5,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "file_stream": 1,
                    "output_file": 21,
                    "output_file_stream": 1,
                    "output_stream": 1
                },
                "param_2": {
                    "error_code": 4,
                    "exit_code": 23,
                    "exit_status": 3,
                    "status": 1
                },
                "pcVar2": {
                    "format_str": 1,
                    "localized_str": 1,
                    "localized_string": 2,
                    "message": 17,
                    "message_pointer": 1,
                    "message_string": 1,
                    "message_text": 1,
                    "print_string": 1,
                    "string": 1,
                    "text": 5
                },
                "print_supported_targets_00104a35": {
                    "print_supported_targets": 2,
                    "print_supported_targets_and_exit": 1
                },
                "uVar1": {
                    "data_address": 1,
                    "default_msg": 1,
                    "default_version": 1,
                    "message": 2,
                    "program_name": 3,
                    "usage_string": 5,
                    "usage_text": 1,
                    "version": 6,
                    "version_info": 1,
                    "version_number": 8,
                    "version_string": 2
                }
            },
            "called": [
                "fprintf",
                "exit",
                "dcgettext",
                "FUN_00104a35"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_usage_and_exit_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 version_number;\n  char *message;\n  \n  version_number = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,message,version_number);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  print_supported_targets(DAT_001275e0,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "current_name": "print_usage_and_exit_00108a2a",
            "entrypoint": "0x00108a2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108a2a": "print_usage_and_exit_00108a2a",
                "dcgettext": "get_translated_message",
                "exit": "exit_program",
                "fprintf": "print_formatted_message",
                "param_1": "output_file",
                "param_2": "exit_code",
                "pcVar2": "message",
                "print_supported_targets_00104a35": "print_supported_targets",
                "uVar1": "version_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108b3e": {
            "additional_data": {
                "DAT_00127720": {
                    "stab_entries": 1
                },
                "DAT_00127724": {
                    "stab_descs": 1
                },
                "DAT_00127728": {
                    "stab_values": 1
                },
                "DAT_00127730": {
                    "stab_strings": 1
                },
                "DAT_001278a0": {
                    "num_entries": 1
                },
                "FUN_00108b3e": {
                    "print_last_stabs": 1,
                    "print_last_stabs_entries": 21,
                    "print_stab_entries": 5,
                    "print_stabs_entries": 4
                },
                "__format": {
                    "error_header": 1,
                    "error_message_format": 1,
                    "error_msg": 1,
                    "format_msg": 3,
                    "format_str": 3,
                    "format_string": 17,
                    "message": 1,
                    "message_format": 1,
                    "msg_header": 1,
                    "stabs_format": 1,
                    "translation": 1
                },
                "_stderr": {
                    "output_file": 1,
                    "output_stream": 1,
                    "stderr": 1,
                    "stderr_fd": 1
                },
                "bfd_get_stab_name": {
                    "get_stab_name": 1
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "fprintf": {
                    "print_formatted": 1,
                    "print_to_file": 1,
                    "print_to_stderr": 2
                },
                "fputc": {
                    "write_char": 1
                },
                "fwrite": {
                    "write_to_file": 2,
                    "write_to_stderr": 2
                },
                "iVar5": {
                    "count": 3,
                    "counter": 10,
                    "i": 4,
                    "index": 2,
                    "iter": 2,
                    "iteration": 1,
                    "iteration_count": 2,
                    "iterator": 3,
                    "loop_counter": 2,
                    "stab_index": 1,
                    "symbol_index": 1
                },
                "lVar1": {
                    "stab_name": 29,
                    "stab_name_ptr": 1,
                    "stab_name_result": 1
                },
                "lVar2": {
                    "entry_index": 1,
                    "i": 1,
                    "i_var": 2,
                    "i_var5": 2,
                    "index": 21,
                    "iteration": 1,
                    "iterator": 1,
                    "loop_index": 2
                },
                "lVar3": {
                    "entry_offset": 1,
                    "offset": 25,
                    "stab_index": 1,
                    "stab_offset": 4
                },
                "param_1": {
                    "arg1": 1,
                    "param": 2,
                    "param1": 2,
                    "param_1": 19,
                    "param_dcgettext": 1,
                    "param_format": 1,
                    "param_msg": 1,
                    "ptr_1": 1,
                    "stderr": 1,
                    "stdout": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "format": 2,
                    "msg_locale": 1,
                    "param2": 2,
                    "param_": 1,
                    "param_2": 19,
                    "param_desc": 1,
                    "param_file": 1,
                    "param_stderr": 1,
                    "ptr_2": 1,
                    "value2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "error_code": 1,
                    "error_message": 1,
                    "param3": 2,
                    "param_3": 17,
                    "param_result": 1,
                    "param_return": 1,
                    "param_return_value": 1,
                    "ptr_3": 1,
                    "result": 2,
                    "return_value": 2,
                    "value3": 1
                },
                "piVar4": {
                    "entry_ptr": 1,
                    "p": 1,
                    "p_entry": 1,
                    "p_stab": 1,
                    "ptr_desc": 1,
                    "ptr_type_def": 1,
                    "stab_address": 1,
                    "stab_data": 2,
                    "stab_descriptor": 1,
                    "stab_entry": 7,
                    "stab_entry_ptr": 2,
                    "stab_ptr": 5,
                    "stab_type": 3,
                    "stab_values": 1,
                    "stabs_entry": 1,
                    "symbol_ptr": 1,
                    "symbol_type": 1
                }
            },
            "called": [
                "fprintf",
                "fputc",
                "bfd_get_stab_name",
                "dcgettext",
                "fwrite"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int counter;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(output_stream,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,output_stream);\n  counter = DAT_001278a0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,output_stream);\n        }\n        else {\n          fprintf(output_stream,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(output_stream,\"%-6s\",stab_name);\n      }\n      fprintf(output_stream,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(output_stream,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stab_entry != 0) {\n        fprintf(output_stream,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      fputc(10,output_stream);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278a0 != counter);\n  return param_3;\n}\n\n",
            "current_name": "print_last_stabs_entries_00108b3e",
            "entrypoint": "0x00108b3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "format_string",
                "_stderr": "output_stream",
                "bfd_get_stab_name": "get_stab_name",
                "dcgettext": "get_translated_string",
                "fprintf": "print_to_stderr",
                "fputc": "write_char",
                "fwrite": "write_to_file",
                "iVar5": "counter",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108c86": {
            "additional_data": {
                "FUN_00108c86": {
                    "decode_and_compare_strings": 1,
                    "decode_and_update_config": 1,
                    "decode_and_update_param": 1,
                    "decode_firmware": 1,
                    "decode_license_key": 1,
                    "decode_string": 2,
                    "extract_and_compare_strings": 3,
                    "extract_binary_info": 2,
                    "extract_code_info": 1,
                    "extract_information": 1,
                    "extract_string_and_set_platform": 1,
                    "extract_string_info": 1,
                    "extracted_data": 1,
                    "parse_and_modify_driver": 1,
                    "parse_driver": 1,
                    "parse_driver_info": 2,
                    "parse_driver_name": 4,
                    "parse_driver_string": 1,
                    "parse_driver_version": 4,
                    "process_parameters": 1
                },
                "__s": {
                    "current_char": 3,
                    "driver_name": 4,
                    "firmware_string": 1,
                    "function_name": 1,
                    "info_string": 1,
                    "input_str": 2,
                    "input_string": 5,
                    "license_key_string": 1,
                    "source_string": 1,
                    "str": 1,
                    "string": 6,
                    "string_ptr": 2,
                    "version_string": 3
                },
                "__s1": {
                    "arch": 2,
                    "arch_info": 1,
                    "arch_string": 7,
                    "arch_type": 1,
                    "architecture": 9,
                    "architecture_name": 1,
                    "architecture_ptr": 1,
                    "architecture_string": 2,
                    "architecture_type": 1,
                    "platform_name": 1,
                    "platform_string": 1,
                    "str": 1,
                    "sub_string": 1,
                    "substring": 1
                },
                "bVar8": {
                    "alignment": 1,
                    "byte_value": 1,
                    "byte_variable": 1,
                    "flag": 9,
                    "increment": 1,
                    "invalid_flag": 1,
                    "is_extended_version": 1,
                    "is_negated": 1,
                    "is_negative": 5,
                    "is_negative_offset": 1,
                    "is_odd_length": 1,
                    "is_offset_negative": 2,
                    "is_reversed": 1,
                    "iteration_flag": 1,
                    "loop_counter": 1,
                    "loop_variable": 1,
                    "offset_increment": 1,
                    "unused_variable": 1
                },
                "cVar1": {
                    "char_comparison_result": 1,
                    "comparision_result": 1,
                    "comparison_result": 13,
                    "first_comparison_result": 1,
                    "is_bsdrv": 1,
                    "is_dashed_string": 1,
                    "is_match": 1,
                    "is_prefix_match": 1,
                    "result": 7
                },
                "iVar2": {
                    "cmp_result": 1,
                    "compare_result": 1,
                    "comparison_result": 10,
                    "comparison_result_2": 1,
                    "comparison_result_code": 1,
                    "result": 1,
                    "second_comparison_result": 1,
                    "strcmp_result": 4,
                    "string_compare_result": 1,
                    "string_comparison_result": 4
                },
                "lVar5": {
                    "address": 2,
                    "address_offset": 2,
                    "config_offset": 1,
                    "current_position": 1,
                    "index": 1,
                    "info_length": 1,
                    "input_offset": 1,
                    "input_string_address": 1,
                    "input_value": 1,
                    "offset": 9,
                    "ptr_offset": 1,
                    "str_index": 1,
                    "string_length": 4,
                    "string_ptr_value": 1,
                    "string_start": 1,
                    "value": 1
                },
                "param_1": {
                    "binary_info": 2,
                    "code_info": 1,
                    "config_ptr": 1,
                    "data_pointer": 1,
                    "driver_address": 1,
                    "driver_data": 1,
                    "driver_info": 2,
                    "driver_info_ptr": 1,
                    "driver_pointer": 1,
                    "driver_ptr": 3,
                    "driver_string": 1,
                    "driver_version": 2,
                    "firmware": 1,
                    "input_array": 1,
                    "input_pointer": 1,
                    "input_ptr": 5,
                    "input_string_address": 1,
                    "license_key_ptr": 1,
                    "param": 1,
                    "string_address": 1,
                    "string_ptr": 1
                },
                "puVar4": {
                    "allocated_memory": 2,
                    "buffer": 1,
                    "decoded_firmware": 1,
                    "decoded_license_key_ptr": 1,
                    "decoded_str": 1,
                    "decoded_string": 2,
                    "driver": 1,
                    "extracted_string": 1,
                    "formatted_string": 1,
                    "modified_str": 1,
                    "new_config": 1,
                    "new_str": 1,
                    "new_str_ptr": 1,
                    "new_string": 5,
                    "output_string": 1,
                    "parsed_driver": 1,
                    "parsed_info": 1,
                    "parsed_string": 2,
                    "parsed_string_ptr": 1,
                    "parsed_version": 4,
                    "processed_string": 1
                },
                "puVar6": {
                    "buffer_ptr": 1,
                    "copy_ptr": 1,
                    "current_char": 4,
                    "current_element": 1,
                    "decoded_firmware_ptr": 1,
                    "decoded_license_key_ptr_iter": 1,
                    "decoded_string_ptr": 2,
                    "destination": 1,
                    "extracted_string_ptr": 1,
                    "formatted_string_ptr": 1,
                    "modified_str_ptr": 1,
                    "new_config_ptr": 1,
                    "new_str_ptr": 1,
                    "new_str_ptr_iterator": 1,
                    "new_string_position": 1,
                    "new_string_ptr": 4,
                    "output_string_ptr": 1,
                    "parsed_ptr": 1,
                    "parsed_string_end_ptr": 1,
                    "parsed_string_iter": 1,
                    "parsed_string_ptr": 1,
                    "parsed_version_ptr": 2,
                    "processed_string_index": 1
                },
                "sVar3": {
                    "binary_info_length": 1,
                    "input_string_length": 1,
                    "length": 3,
                    "license_key_length": 1,
                    "str_length": 3,
                    "string_length": 16,
                    "version_length": 1
                },
                "strcmp": {
                    "compare_strings": 1,
                    "string_compare": 1
                },
                "uVar7": {
                    "decoded_firmware_length": 1,
                    "result": 3,
                    "return_val": 1,
                    "return_value": 26
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "FUN_00113fb0",
                "xmalloc",
                "strcmp",
                "strlen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 parse_driver_version_00108c86(long *input_ptr)\n\n{\n  char comparison_result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *new_string;\n  long offset;\n  char *string;\n  char *architecture;\n  undefined2 *current_char;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  offset = *input_ptr;\n  string = (char *)(offset + 4);\n  comparison_result = string_comparison_function_00113fb0(string,&DAT_0011b73b);\n  if (comparison_result == '\\0') {\n    comparison_result = string_comparison_function_00113fb0(string,\"bsdrv-\");\n    if (comparison_result == '\\0') {\n      comparison_result = string_comparison_function_00113fb0(string,\"rtdrv-\");\n      if (comparison_result == '\\0') {\n        return 0xffffffff;\n      }\n      string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string);\n  new_string = (undefined2 *)xmalloc(string_length + 8);\n  architecture = string + 4;\n  current_char = new_string;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)current_char = *string;\n    string = string + (ulong)flag * -2 + 1;\n    current_char = (undefined2 *)((long)current_char + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  comparison_result = strcmp(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string;\n  return return_value;\n}\n\n",
            "current_name": "parse_driver_version_00108c86",
            "entrypoint": "0x00108c86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108c86": "parse_driver_version_00108c86",
                "__s": "string",
                "__s1": "architecture",
                "bVar8": "flag",
                "cVar1": "comparison_result",
                "iVar2": "comparison_result",
                "lVar5": "offset",
                "param_1": "input_ptr",
                "puVar4": "new_string",
                "puVar6": "current_char",
                "sVar3": "string_length",
                "strcmp": "compare_strings",
                "uVar7": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108d9a": {
            "additional_data": {
                "DAT_001278c8": {
                    "symbol_hash_table_2": 1,
                    "target_symbol_table": 1
                },
                "DAT_001278d0": {
                    "symbol_entries_table": 1,
                    "symbol_hash_table_1": 1
                },
                "FUN_00108d9a": {
                    "check_and_add_symbol": 1,
                    "check_redefinition": 5,
                    "check_redefinitions": 3,
                    "check_symbol_redefinition": 18,
                    "symbol_redefinition_check": 1,
                    "validate_symbol_definition": 1,
                    "validate_symbol_redefinition": 2
                },
                "dcgettext": {
                    "get_error_message": 6,
                    "translate_error_message": 1
                },
                "htab_find": {
                    "find_entry": 1,
                    "find_in_hash_table": 1,
                    "find_in_hashtable": 1,
                    "find_symbol": 2,
                    "find_symbol_entry": 1,
                    "find_symbol_occurrence": 1
                },
                "lVar3": {
                    "found": 1,
                    "found_symbol": 1,
                    "htab_result": 1,
                    "lookup_result": 3,
                    "result": 2,
                    "search_result": 1,
                    "symbol1_exists": 1,
                    "symbol_entry_result": 1,
                    "symbol_exists": 7,
                    "symbol_find_result": 1,
                    "symbol_found": 7,
                    "symbol_lookup_result": 1,
                    "symbol_occurrence": 1,
                    "symbol_occurrences": 1,
                    "symbol_redefinition_check": 1,
                    "symbol_redefinition_result": 1
                },
                "param_1": {
                    "arg1": 1,
                    "context": 1,
                    "error_message": 10,
                    "file_name": 8,
                    "file_path": 1,
                    "filename": 3,
                    "output_file": 1,
                    "param": 2,
                    "param1": 1,
                    "param_address": 1,
                    "program_name": 1,
                    "source_file": 1
                },
                "param_2": {
                    "old_symbol": 1,
                    "symbol": 1,
                    "symbol1": 1,
                    "symbol_1": 4,
                    "symbol_name": 12,
                    "symbol_name1": 2,
                    "symbol_name_1": 9,
                    "symbol_name_old": 1
                },
                "param_3": {
                    "new_symbol": 1,
                    "symbol2": 1,
                    "symbol_2": 4,
                    "symbol_name2": 2,
                    "symbol_name_2": 9,
                    "symbol_name_new": 1,
                    "target_name": 3,
                    "target_symbol": 10
                },
                "param_4": {
                    "arg4": 1,
                    "param4": 1,
                    "param_4": 6,
                    "result": 18,
                    "return_value": 5
                },
                "pcVar2": {
                    "clone": 1,
                    "dup_symbol": 1,
                    "dup_symbol_name": 3,
                    "duplicate_name": 1,
                    "duplicate_symbol": 8,
                    "duplicate_symbol_name": 2,
                    "new_symbol_name": 1,
                    "str_symbol_name": 1,
                    "symbol": 3,
                    "symbol1_copy": 1,
                    "symbol_1_copy": 1,
                    "symbol_copy": 1,
                    "symbol_name": 1,
                    "symbol_name_copy": 3,
                    "symbol_name_dup": 3
                },
                "plVar5": {
                    "htab_slot": 2,
                    "slot": 5,
                    "slot_address": 2,
                    "slot_pointer": 1,
                    "slot_ptr": 5,
                    "slot_result": 1,
                    "slot_value": 1,
                    "symbol2_exists": 1,
                    "symbol_entry_slot": 1,
                    "symbol_redefinition_slot": 1,
                    "symbol_slot": 10,
                    "target_entry": 1
                },
                "ppcVar1": {
                    "allocation": 1,
                    "dynamic_array": 1,
                    "symbol_array": 2,
                    "symbol_data": 1,
                    "symbol_definition": 1,
                    "symbol_entry": 2,
                    "symbol_info": 1,
                    "symbol_list": 1,
                    "symbol_name_ptrs": 1,
                    "symbol_names": 8,
                    "symbol_pair": 5,
                    "symbol_pointers": 1,
                    "symbol_ptrs": 2,
                    "symbol_strs": 1,
                    "symbols": 3
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_and_exit": 4,
                    "print_error_message_and_exit": 3
                },
                "strdup": {
                    "duplicate_string": 5
                },
                "uVar4": {
                    "error_message": 24,
                    "error_msg": 3,
                    "error_string": 1,
                    "error_text": 1,
                    "gettext_result": 1,
                    "message_text": 1
                },
                "xmalloc": {
                    "allocate_memory": 5
                }
            },
            "called": [
                "htab_find_slot",
                "strdup",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "htab_find"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined8 symbol_redefinition_check_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_names;\n  char *duplicate_symbol;\n  long symbol_exists;\n  undefined8 error_message;\n  long *symbol_slot;\n  \n  symbol_names = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_name);\n  *symbol_names = duplicate_symbol;\n  duplicate_symbol = strdup(target_symbol);\n  error_message = DAT_001278d0;\n  symbol_names[1] = duplicate_symbol;\n  symbol_exists = htab_find(error_message,symbol_names);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit(error_message,error_message,symbol_name);\n  }\n  symbol_exists = htab_find(DAT_001278c8,target_symbol);\n  if (symbol_exists != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit(error_message,error_message,target_symbol);\n  }\n  symbol_slot = (long *)htab_find_slot(DAT_001278d0,symbol_names,1);\n  error_message = DAT_001278c8;\n  *symbol_slot = (long)symbol_names;\n  duplicate_symbol = symbol_names[1];\n  symbol_names = (char **)htab_find_slot(error_message,duplicate_symbol,1);\n  *symbol_names = duplicate_symbol;\n  return result;\n}\n\n",
            "current_name": "symbol_redefinition_check_00108d9a",
            "entrypoint": "0x00108d9a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108d9a": "symbol_redefinition_check_00108d9a",
                "dcgettext": "get_error_message",
                "htab_find": "find_symbol",
                "lVar3": "symbol_exists",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "pcVar2": "duplicate_symbol",
                "plVar5": "symbol_slot",
                "ppcVar1": "symbol_names",
                "print_error_message_and_exit_00119dd0": "print_error_and_exit",
                "strdup": "duplicate_string",
                "uVar4": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108e76": {
            "additional_data": {
                "FUN_00108e76": {
                    "convert_byte_stream_to_int": 1,
                    "convert_bytes_to_int": 1,
                    "extract_and_convert_integer": 1,
                    "extract_decimal": 1,
                    "extract_decimal_number": 1,
                    "extract_digits": 1,
                    "extract_digits_from_string": 1,
                    "extract_int_from_string": 1,
                    "extract_integer_from_byte_array": 5,
                    "extract_integer_from_string": 4,
                    "extract_leading_number": 1,
                    "extract_number_from_string": 3,
                    "parse_integer": 2,
                    "parse_integer_from_byte_array": 1,
                    "parse_integer_from_string": 4,
                    "parse_number": 2,
                    "parse_positive_integer_from_bytes": 1
                },
                "bVar1": {
                    "byte_value": 2,
                    "current_byte": 14,
                    "current_char": 14
                },
                "iVar2": {
                    "converted_integer": 1,
                    "decimal_value": 1,
                    "extracted_int": 1,
                    "extracted_integer": 4,
                    "number": 1,
                    "parsed_int": 1,
                    "parsed_integer": 6,
                    "result": 15
                },
                "param_1": {
                    "byte_array": 7,
                    "byte_pointer": 1,
                    "byte_sequence": 1,
                    "byte_stream": 2,
                    "data": 3,
                    "input": 1,
                    "input_array": 1,
                    "input_bytes": 1,
                    "input_str": 2,
                    "input_string": 2,
                    "str_ptr": 1,
                    "string": 1,
                    "string_ptr": 7,
                    "string_reference": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\nint parse_integer_from_string_00108e76(byte **string_ptr)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **string_ptr;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *string_ptr = *string_ptr + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "current_name": "parse_integer_from_string_00108e76",
            "entrypoint": "0x00108e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108e76": "parse_integer_from_string_00108e76",
                "bVar1": "current_byte",
                "iVar2": "result",
                "param_1": "string_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108ea1": {
            "additional_data": {
                "FUN_00108ea1": {
                    "extract_and_convert_integer": 1,
                    "extract_integer": 1,
                    "parse_and_extract_number": 1,
                    "parse_and_extract_value": 1,
                    "parse_integer": 4,
                    "parse_integer_from_string": 1,
                    "parse_number": 14,
                    "parse_number_from_string": 8
                },
                "iVar1": {
                    "accumulated_number": 2,
                    "accumulator": 1,
                    "current_digit": 1,
                    "current_num": 1,
                    "current_parsed_number": 1,
                    "digit": 1,
                    "number": 1,
                    "numeric_value": 1,
                    "parsed_digit": 1,
                    "parsed_number": 4,
                    "parsed_value": 1,
                    "result": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "byte_array": 3,
                    "byte_stream": 1,
                    "input": 3,
                    "input_bytes": 3,
                    "input_data": 3,
                    "input_ptr": 7,
                    "input_string": 3,
                    "string_pointer": 3,
                    "string_ptr": 5
                },
                "param_2": {
                    "number_pointer": 3,
                    "number_ptr": 5,
                    "output": 3,
                    "output_integer": 3,
                    "output_num": 1,
                    "output_number": 5,
                    "output_value": 2,
                    "output_value_ptr": 1,
                    "parsed_integer": 1,
                    "parsed_number": 3,
                    "result": 2,
                    "result_ptr": 2
                },
                "pbVar2": {
                    "current_byte": 14,
                    "current_byte_ptr": 1,
                    "current_char": 10,
                    "current_char_ptr": 3,
                    "input_ptr": 1,
                    "stream_ptr": 1,
                    "string": 1
                },
                "pbVar3": {
                    "current_position": 1,
                    "current_ptr": 1,
                    "next_byte": 14,
                    "next_byte_ptr": 1,
                    "next_char": 10,
                    "next_char_ptr": 3,
                    "stream_ptr_temp": 1
                },
                "uVar4": {
                    "output": 1,
                    "parsed_number": 1,
                    "parsed_value": 2,
                    "result": 26,
                    "return_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_0010d882"
            ],
            "code": "\nulong parse_number_from_string_00108ea1(byte **input_ptr,int *output_number)\n\n{\n  int parsed_number;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_ptr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    parsed_number = (char)*current_byte + -0x30;\n    *output_number = parsed_number;\n    *input_ptr = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        parsed_number = parsed_number * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_ptr = next_byte;\n        *output_number = parsed_number;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "current_name": "parse_number_from_string_00108ea1",
            "entrypoint": "0x00108ea1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108ea1": "parse_number_from_string_00108ea1",
                "iVar1": "parsed_number",
                "param_1": "input_ptr",
                "param_2": "output_number",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f05": {
            "additional_data": {
                "": {
                    "": 1
                },
                "1": {
                    "": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_00108f05": {
                    "calculate_return_value": 1,
                    "check_result": 2,
                    "check_status": 1,
                    "get_constant_value": 1,
                    "get_default_value": 1,
                    "get_one": 12,
                    "get_return_value": 4,
                    "get_status": 1,
                    "initialize": 3,
                    "initialize_data": 1,
                    "initialize_one": 1,
                    "is_one": 1,
                    "return_one": 1
                },
                "PTR_": {
                    "": 1
                },
                "ReturnValue": {
                    "result": 1
                },
                "dat_parameter_name_2": {
                    "data_parameter": 1
                },
                "ptr_parameter_name_1": {
                    "pointer_to_something": 1
                },
                "return": {
                    "": 1,
                    "result": 2,
                    "status": 1
                },
                "retval": {
                    "result": 1
                },
                "temp_variable_name_1": {
                    "temporary_variable": 1
                },
                "undefined": {
                    "": 1,
                    "int": 1,
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined get_one_00108f05(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_one_00108f05",
            "entrypoint": "0x00108f05",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f05": "get_one_00108f05",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108f08": {
            "additional_data": {
                "FUN_00108f08": {
                    "add_debug_source": 1,
                    "add_debug_source_file": 1,
                    "add_filename_to_debug_source": 1,
                    "add_source_file": 5,
                    "add_source_filename": 1,
                    "debug_add_file_name": 1,
                    "debug_source_start": 1,
                    "debug_start_source": 9,
                    "find_debug_source": 3,
                    "find_source": 1,
                    "process_debug_file": 1,
                    "process_debug_info": 1,
                    "process_debug_source": 1,
                    "source_debug_start": 1,
                    "update_debug_filenames": 1,
                    "update_debug_source": 1,
                    "update_source_files": 1
                },
                "_stderr": {
                    "error_stream": 1,
                    "stderr": 2
                },
                "bVar9": {
                    "allocation_flag": 1,
                    "bit_offset": 1,
                    "byte_flag": 4,
                    "byte_value": 2,
                    "byte_var": 3,
                    "constant_value": 1,
                    "constant_zero": 1,
                    "counter": 2,
                    "flag": 4,
                    "found": 1,
                    "index": 1,
                    "initial_value": 1,
                    "is_debug_set": 1,
                    "is_null": 1,
                    "is_tail_zero": 1,
                    "loop_condition": 1,
                    "loop_counter_increment": 1,
                    "offset": 1,
                    "zero_byte": 1,
                    "zero_flag": 2
                },
                "iVar1": {
                    "cmp_result": 8,
                    "comparison_result": 17,
                    "filename_cmp_result": 1,
                    "filename_comparison_result": 2
                },
                "lVar5": {
                    "count": 1,
                    "counter": 5,
                    "i": 1,
                    "loop_count": 1,
                    "loop_counter": 22,
                    "loop_variable": 1
                },
                "param_1": {
                    "arg1": 1,
                    "context": 1,
                    "data_entry": 1,
                    "debug_context": 3,
                    "debug_info": 2,
                    "debugger": 1,
                    "file_handle": 1,
                    "param1": 1,
                    "param_ptr": 1,
                    "source": 1,
                    "source_code_pointer": 1,
                    "source_context": 3,
                    "source_debug_info": 1,
                    "source_files": 2,
                    "source_handler": 1,
                    "source_info": 1,
                    "source_list": 3,
                    "source_manager": 2,
                    "source_mgr": 1,
                    "source_table": 3
                },
                "param_2": {
                    "debug_filename": 1,
                    "file_name": 2,
                    "filename": 25,
                    "param2": 1,
                    "target_filename": 2
                },
                "pcVar7": {
                    "current_file": 2,
                    "current_file_name": 1,
                    "current_filename": 17,
                    "debug_file": 1,
                    "debug_filename": 2,
                    "default_filename": 3,
                    "file_to_compare": 1,
                    "filename": 2,
                    "filename_arg": 1,
                    "input_filename": 1
                },
                "puVar3": {
                    "current_entry": 8,
                    "current_file": 3,
                    "current_filename": 1,
                    "current_filename_entry": 1,
                    "current_node": 9,
                    "current_source": 1,
                    "debug_info_list": 1,
                    "debug_set_list": 2,
                    "filename_list": 2,
                    "source_list": 1,
                    "source_list_pointer": 1,
                    "source_ptr": 1
                },
                "puVar4": {
                    "current_debug_info": 1,
                    "current_debug_set": 1,
                    "current_filename": 1,
                    "current_node": 1,
                    "next_file": 2,
                    "next_node": 1,
                    "parent_node": 1,
                    "prev_entry": 1,
                    "prev_node": 1,
                    "previous_entry": 5,
                    "previous_file": 1,
                    "previous_node": 6,
                    "previous_source": 1,
                    "ptr1": 1,
                    "source_list_iterator": 1,
                    "temp_entry": 2,
                    "temp_filename_entry": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 1
                },
                "puVar6": {
                    "arg1_ptr": 1,
                    "debug_list": 1,
                    "debug_set_list_tail": 2,
                    "file_entries_list": 1,
                    "file_list_ptr": 1,
                    "filename_entry": 1,
                    "first_entry": 1,
                    "first_node": 1,
                    "first_source": 1,
                    "head_entry": 1,
                    "head_node": 3,
                    "object_table": 1,
                    "ptr2": 1,
                    "ptr_to_first_node": 1,
                    "source_file_list": 3,
                    "source_files": 2,
                    "source_head": 1,
                    "source_list": 4,
                    "source_list_head": 1,
                    "source_list_ptr": 1,
                    "source_table_tail": 1,
                    "tail": 1
                },
                "puVar8": {
                    "current_list_pos": 1,
                    "last_entry": 5,
                    "last_file": 2,
                    "last_node": 3,
                    "last_source_added": 1,
                    "new_debug_set": 1,
                    "new_debug_set_entry": 1,
                    "new_entry": 1,
                    "new_filename_entry": 1,
                    "new_filename_node": 1,
                    "new_list_item": 1,
                    "new_node": 4,
                    "new_source": 1,
                    "prev_pointer": 1,
                    "prev_ptr": 1,
                    "previous_node": 1,
                    "ptr3": 1,
                    "tail_entry": 1,
                    "temp_node": 1,
                    "temp_ptr": 2
                },
                "uVar2": {
                    "result": 18,
                    "return_value": 5,
                    "status": 1,
                    "success": 2,
                    "success_flag": 4
                }
            },
            "called": [
                "filename_cmp",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 source_debug_start_00108f08(long source_table,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *current_node;\n  undefined8 *previous_node;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *last_entry;\n  byte flag;\n  \n  flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_table + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (current_node = *(undefined8 **)(*(long *)(source_table + 8) + 8); current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      comparison_result = filename_cmp(current_node[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_node = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(source_table + 0x10);\n    last_entry = current_node;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_entry = 0;\n      last_entry = (undefined8 *)((long)last_entry + (ulong)flag * -8 + 4);\n    }\n    current_node[1] = current_filename;\n    last_entry = (undefined8 *)*source_list;\n    while (previous_node = last_entry, previous_node != (undefined8 *)0x0) {\n      source_list = previous_node;\n      last_entry = (undefined8 *)*previous_node;\n    }\n    *source_list = current_node;\nLAB_00108fad:\n    *(undefined8 **)(source_table + 0x10) = current_node;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "source_debug_start_00108f08",
            "entrypoint": "0x00108f08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108f08": "source_debug_start_00108f08",
                "_stderr": "stderr",
                "bVar9": "flag",
                "iVar1": "comparison_result",
                "lVar5": "loop_counter",
                "param_1": "source_table",
                "param_2": "filename",
                "pcVar7": "current_filename",
                "puVar3": "current_node",
                "puVar4": "previous_node",
                "puVar6": "source_list",
                "puVar8": "last_entry",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fb9": {
            "additional_data": {
                "FUN_00108fb9": {
                    "print_bad_stab": 10,
                    "print_bad_stab_error": 1,
                    "print_bad_stab_error_message": 6,
                    "print_bad_stab_message": 5,
                    "print_error": 1,
                    "print_error_message": 8
                },
                "__format": {
                    "bad_stab_format": 1,
                    "error_format": 3,
                    "error_message": 1,
                    "error_message_format": 3,
                    "format_message": 2,
                    "format_str": 1,
                    "format_string": 16,
                    "formatted_message": 1,
                    "localized_error_message": 1,
                    "message_format": 1,
                    "stab_message": 1
                },
                "param_1": {
                    "bad_stab_message": 1,
                    "error_message": 19,
                    "error_msg": 1,
                    "message": 1,
                    "stab": 4,
                    "stab_error_message": 1,
                    "stab_message": 1,
                    "stab_string": 1,
                    "stab_text": 1,
                    "stab_value": 1
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_bad_stab_error_message_00108fb9(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_bad_stab_error_message_00108fb9",
            "entrypoint": "0x00108fb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_message_00108fb9",
                "__format": "format_string",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00108fe8": {
            "additional_data": {
                "FUN_00108fe8": {
                    "print_warning": 28,
                    "print_warning_message": 3
                },
                "__format": {
                    "format_string": 16,
                    "localized_format": 1,
                    "warning_format": 14
                },
                "_stderr": {
                    "error_stream": 3,
                    "stderr": 1
                },
                "in_RAX": {
                    "_unused": 1,
                    "format_string": 1,
                    "rax_value": 1,
                    "result": 4,
                    "return_address": 2,
                    "return_value": 6,
                    "unused": 1
                },
                "param_1": {
                    "error_code": 1,
                    "error_message": 5,
                    "error_msg": 1,
                    "file_name": 3,
                    "first_param": 1,
                    "message": 15,
                    "message1": 3,
                    "param_msg": 1,
                    "warning_type": 1
                },
                "param_2": {
                    "error_message": 3,
                    "file_name": 4,
                    "filename": 3,
                    "message": 1,
                    "message2": 3,
                    "module": 1,
                    "param_filename": 1,
                    "second_param": 1,
                    "source": 10,
                    "source_file": 1,
                    "title": 1,
                    "warning_message": 2
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "code": "\n\n\nvoid print_warning_message_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 return_value;\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(error_stream,format_string,source,message,return_value);\n  return;\n}\n\n",
            "current_name": "print_warning_message_00108fe8",
            "entrypoint": "0x00108fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "__format": "format_string",
                "_stderr": "error_stream",
                "in_RAX": "return_value",
                "param_1": "message",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109022": {
            "additional_data": {
                "FUN_00109022": {
                    "check_and_allocate_memory_for_type": 1,
                    "extract_and_initialize_data_from_binary": 1,
                    "extract_data": 1,
                    "extract_file_from_binary": 1,
                    "extract_type_from_binary": 1,
                    "get_file_data": 1,
                    "get_file_pointer": 1,
                    "handle_file": 1,
                    "load_file_data": 1,
                    "parse_file": 1,
                    "parse_file_number": 1,
                    "process_file": 3,
                    "process_file_data": 1,
                    "process_file_numbers": 1,
                    "process_file_type": 3,
                    "resolve_file_index": 1,
                    "update_file_number": 1,
                    "validate_and_allocate_memory": 3,
                    "validate_and_get_file_data": 2,
                    "validate_and_retrieve_file": 1,
                    "validate_and_retrieve_file_data": 1,
                    "validate_file_index": 2,
                    "validate_file_type_and_index": 1
                },
                "auVar8": {
                    "result": 10,
                    "return_val": 1,
                    "return_value": 15,
                    "return_values": 1,
                    "return_variable": 1
                },
                "bVar7": {
                    "array_offset": 1,
                    "byte_flag": 1,
                    "byte_value": 5,
                    "byte_var": 7,
                    "byte_variable": 2,
                    "counter": 1,
                    "flag": 2,
                    "inner_loop_counter": 1,
                    "is_negative": 1,
                    "is_null": 1,
                    "loop_flag": 1,
                    "loop_var": 1,
                    "padding": 2,
                    "temp_byte": 2,
                    "temp_var2": 1,
                    "type_counter": 1,
                    "zero_byte": 1
                },
                "lVar4": {
                    "count": 1,
                    "counter": 6,
                    "index": 1,
                    "loop_count": 1,
                    "loop_counter": 18,
                    "loop_var": 3,
                    "loop_variable": 1
                },
                "param_1": {
                    "binary_address": 1,
                    "binary_data": 1,
                    "file_array": 1,
                    "file_count": 2,
                    "file_data": 5,
                    "file_data_length": 1,
                    "file_descriptor": 1,
                    "file_handle": 1,
                    "file_index": 6,
                    "file_info": 1,
                    "file_manager": 1,
                    "file_number": 8,
                    "file_table": 2
                },
                "param_2": {
                    "file_array": 1,
                    "file_data": 1,
                    "file_indexes": 1,
                    "file_indices": 4,
                    "file_number": 1,
                    "file_numbers": 5,
                    "file_type": 1,
                    "index_range": 1,
                    "indices": 1,
                    "type_index": 5,
                    "type_index_ptr": 1,
                    "type_indexes": 2,
                    "type_indices": 4,
                    "type_number": 1,
                    "type_numbers": 2
                },
                "param_3": {
                    "arg1": 4,
                    "arg3": 3,
                    "context": 1,
                    "data1": 1,
                    "error_message": 1,
                    "message_format": 1,
                    "param1": 3,
                    "param3": 9,
                    "param_1": 1,
                    "param_3": 4,
                    "stderr": 1,
                    "unused_param": 1,
                    "var_1": 1
                },
                "param_4": {
                    "arg2": 4,
                    "arg4": 3,
                    "data2": 1,
                    "data_ptr": 1,
                    "message_param": 1,
                    "param2": 3,
                    "param4": 9,
                    "param_2": 1,
                    "param_4": 4,
                    "res_ptr": 1,
                    "result": 1,
                    "type_structure": 1,
                    "var_2": 1
                },
                "pcVar2": {
                    "err_message": 1,
                    "err_msg": 1,
                    "error_message": 23,
                    "error_msg": 5,
                    "error_string": 1
                },
                "plVar3": {
                    "allocated_memory": 6,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "file": 1,
                    "file_data": 3,
                    "file_data_ptr": 1,
                    "file_entry": 2,
                    "file_info": 1,
                    "file_pointer": 1,
                    "result": 3,
                    "result_ptr": 1,
                    "type_array": 1,
                    "type_data": 4,
                    "type_entry": 1,
                    "type_pointer": 2,
                    "type_ptr": 1
                },
                "pplVar6": {
                    "current_memory_ptr": 1,
                    "current_type_index": 1,
                    "data_pointer_pointer": 1,
                    "data_ptr_ptr": 1,
                    "file_entry_ptr": 1,
                    "file_entry_ptr_list": 1,
                    "file_pointer": 2,
                    "file_pointers": 4,
                    "file_ptr": 1,
                    "file_ptr_list": 1,
                    "file_ptrs": 1,
                    "linked_list": 1,
                    "pointer_to_allocated_memory": 1,
                    "pointer_to_pointer": 1,
                    "type_array": 2,
                    "type_data_ptr": 1,
                    "type_info_array": 1,
                    "type_list": 3,
                    "type_pointer": 1,
                    "type_pointer_array": 1,
                    "type_ptr": 1,
                    "type_ptr_array": 1,
                    "type_ptrs": 1,
                    "type_table_ptr": 1
                },
                "uVar1": {
                    "current_file_number": 1,
                    "current_index": 1,
                    "current_type_index": 2,
                    "file_index": 5,
                    "file_index2": 1,
                    "file_number": 3,
                    "file_type_index": 1,
                    "index": 4,
                    "index_value": 1,
                    "type_index": 8,
                    "type_index_high": 1,
                    "type_index_lower": 1,
                    "type_number": 2
                },
                "uVar5": {
                    "current_index": 1,
                    "file_index": 1,
                    "file_index1": 1,
                    "file_number": 5,
                    "index": 1,
                    "loop_count": 1,
                    "loop_iterations": 2,
                    "num_indices": 1,
                    "offset": 1,
                    "remaining_indexes": 1,
                    "remaining_type_indexes": 1,
                    "temp_var1": 1,
                    "temporary_value": 1,
                    "type": 1,
                    "type_file_number": 1,
                    "type_index": 7,
                    "type_index_low": 1,
                    "type_index_upper": 1,
                    "type_number": 1,
                    "type_offset": 1
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nundefined  [16] process_file_type_00109022(long file_number,uint *file_numbers,undefined8 param3,undefined8 param4)\n\n{\n  uint type_index;\n  char *error_message;\n  long *allocated_memory;\n  long loop_counter;\n  uint type_index;\n  long **file_pointers;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  type_index = *file_numbers;\n  type_index = file_numbers[1];\n  if (((int)type_index < 0) || (*(uint *)(file_number + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)type_index) {\n      file_pointers = (long **)(*(long *)(file_number + 0x88) + (long)(int)type_index * 8);\n      for (type_index = type_index; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*file_pointers == (long *)0x0) {\n          allocated_memory = (long *)xmalloc(0x88);\n          *file_pointers = allocated_memory;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)allocated_memory = 0;\n            allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n          }\n        }\n        file_pointers = (long **)*file_pointers;\n      }\n      if (*file_pointers == (long *)0x0) {\n        allocated_memory = (long *)xmalloc(0x88);\n        *file_pointers = allocated_memory;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)allocated_memory = 0;\n          allocated_memory = (long *)((long)allocated_memory + (ulong)byte_var * -8 + 4);\n        }\n      }\n      allocated_memory = *file_pointers + (long)(int)((type_index >> 4) * -0x10 + type_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  allocated_memory = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = param4;\n  return_value._0_8_ = allocated_memory;\n  return return_value;\n}\n\n",
            "current_name": "process_file_type_00109022",
            "entrypoint": "0x00109022",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109022": "process_file_type_00109022",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "file_number",
                "param_2": "file_numbers",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar2": "error_message",
                "plVar3": "allocated_memory",
                "pplVar6": "file_pointers",
                "uVar1": "type_index",
                "uVar5": "type_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010911f": {
            "additional_data": {
                "FUN_0010911f": {
                    "print_bad_mangled_name": 3,
                    "print_error_message": 27,
                    "print_mangled_name_error": 1
                },
                "__format": {
                    "error_format_string": 1,
                    "format": 1,
                    "format_string": 23,
                    "message_format": 3,
                    "translated_format_string": 1,
                    "translation_format": 1,
                    "translation_string": 1
                },
                "_stderr": {
                    "standard_error": 1
                },
                "param_1": {
                    "error_message": 19,
                    "error_string": 1,
                    "mangled_name": 6,
                    "message": 5
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid print_error_message_0010911f(undefined8 error_message)\n\n{\n  char *format_string;\n  \n  format_string = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(standard_error,format_string,error_message);\n  return;\n}\n\n",
            "current_name": "print_error_message_0010911f",
            "entrypoint": "0x0010911f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "__format": "format_string",
                "_stderr": "standard_error",
                "param_1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010914e": {
            "additional_data": {
                "FUN_0010914e": {
                    "find_named_type": 31
                },
                "auVar7": {
                    "result": 19,
                    "return_value": 11
                },
                "iVar2": {
                    "cmp_result": 2,
                    "comparison_result": 27,
                    "result": 1,
                    "string_comparison": 1
                },
                "lVar1": {
                    "compilation_unit": 2,
                    "current_comp_unit": 1,
                    "current_compilation": 1,
                    "current_compilation_unit": 14,
                    "current_cu_ptr": 1,
                    "current_unit": 6,
                    "current_unit_ptr": 3,
                    "unit_ptr": 3
                },
                "lVar5": {
                    "current_compilation": 1,
                    "current_element": 1,
                    "current_entry": 1,
                    "current_entry_address": 1,
                    "current_link_2": 1,
                    "current_list": 1,
                    "current_list_entry": 1,
                    "current_section": 1,
                    "current_type": 1,
                    "entry": 2,
                    "iterator": 1,
                    "l_var5": 1,
                    "linked_list_node": 1,
                    "list_ptr": 1,
                    "loop_ptr": 1,
                    "loop_variable_1": 1,
                    "lvar_5": 1,
                    "node": 3,
                    "node_address": 1,
                    "node_ptr": 1,
                    "ptr2": 2,
                    "ptr2_value": 1,
                    "type_list": 2,
                    "type_ptr": 1,
                    "unit_ptr": 1,
                    "var_1": 1
                },
                "param_1": {
                    "base_address": 2,
                    "binary_data": 1,
                    "binary_ptr": 1,
                    "compilation_unit": 25,
                    "param_1": 1,
                    "unit_address": 1
                },
                "param_2": {
                    "name": 2,
                    "type_name": 28,
                    "type_to_find": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_1": 1,
                    "arg_3": 1,
                    "error_message": 3,
                    "param3": 1,
                    "param_3": 10,
                    "ptr_1": 1,
                    "stderr": 1,
                    "str_1": 1,
                    "unknown1": 1,
                    "unknown_arg_1": 1,
                    "unknown_param_1": 1,
                    "unused_param": 1,
                    "unused_param_1": 4,
                    "var_3": 2,
                    "void_param": 1
                },
                "param_4": {
                    "arg4": 1,
                    "arg_2": 1,
                    "arg_4": 1,
                    "default_value": 3,
                    "error_message": 1,
                    "param4": 1,
                    "param_4": 8,
                    "ptr_2": 1,
                    "result": 2,
                    "str_2": 1,
                    "unknown2": 1,
                    "unknown_arg_2": 1,
                    "unknown_param_2": 1,
                    "unused_param2": 1,
                    "unused_param_2": 4,
                    "var_4": 2,
                    "void_param_2": 1
                },
                "puVar4": {
                    "current_entry": 6,
                    "current_link": 1,
                    "current_node": 4,
                    "current_ptr": 4,
                    "current_type": 4,
                    "inner_pu_var": 1,
                    "list_entry": 1,
                    "node": 1,
                    "ptr": 1,
                    "ptr1": 2,
                    "ptr_1": 1,
                    "ptr_pointer1": 1,
                    "pu_var4": 1,
                    "type": 1,
                    "type_list": 1,
                    "variable_ptr": 1
                },
                "puVar6": {
                    "compilation_unit_list": 2,
                    "compilation_unit_ptr": 2,
                    "cu_entry": 1,
                    "current_compilation_entry": 1,
                    "current_compilation_unit_node": 1,
                    "current_compile_unit": 1,
                    "current_entry_2": 2,
                    "current_link_3": 1,
                    "current_node": 1,
                    "current_unit": 1,
                    "current_unit_entry": 1,
                    "current_unit_node": 1,
                    "list_entry2": 1,
                    "loop_variable_2": 1,
                    "next_unit_node": 1,
                    "outer_pu_var": 1,
                    "ptr": 1,
                    "ptr3": 2,
                    "ptr_2": 2,
                    "ptr_pointer2": 1,
                    "pu_var6": 1,
                    "unit_iterator": 1,
                    "unit_loop_ptr": 1,
                    "unit_node": 1,
                    "unit_ptr": 2
                },
                "uVar3": {
                    "debug_text": 1,
                    "error_message": 15,
                    "error_msg": 3,
                    "error_string": 1,
                    "error_text": 1,
                    "localized_error_msg": 1,
                    "message": 3,
                    "result": 4,
                    "translated_message": 1,
                    "translated_string": 1
                }
            },
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 param_3,undefined8 param_4)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_entry;\n  long node;\n  undefined8 *unit_ptr;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (node = *(long *)(compilation_unit + 0x20); node != 0; node = *(long *)(node + 8)) {\n      if (*(undefined8 **)(node + 0x28) != (undefined8 *)0x0) {\n        for (current_entry = (undefined8 *)**(undefined8 **)(node + 0x28); current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (unit_ptr = *(undefined8 **)(current_compilation_unit + 8); unit_ptr != (undefined8 *)0x0;\n        unit_ptr = (undefined8 *)*unit_ptr) {\n      if ((undefined8 *)unit_ptr[2] != (undefined8 *)0x0) {\n        for (current_entry = *(undefined8 **)(undefined8 *)unit_ptr[2]; current_entry != (undefined8 *)0x0;\n            current_entry = (undefined8 *)*current_entry) {\n          if (*(int *)((long)current_entry + 0x14) == 0) {\n            if (*(char *)current_entry[1] == *type_name) {\n              comparison_result = strcmp((char *)current_entry[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = param_4;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_entry[4];\n  goto LAB_00109223;\n}\n\n",
            "current_name": "find_named_type_0010914e",
            "entrypoint": "0x0010914e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "auVar7": "result",
                "iVar2": "comparison_result",
                "lVar1": "current_compilation_unit",
                "lVar5": "node",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "puVar4": "current_entry",
                "puVar6": "unit_ptr",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010922b": {
            "additional_data": {
                "FUN_0010922b": {
                    "check_equality": 16,
                    "check_equality_between_pointers": 1,
                    "compare": 1,
                    "compare_objects": 1,
                    "compare_values": 3,
                    "is_same_structure": 1,
                    "is_structurally_equal": 1
                },
                "bVar12": {
                    "are_both_null": 1,
                    "bool_var1": 1,
                    "bool_var12": 1,
                    "compare_result": 1,
                    "is_equal": 10,
                    "is_equals": 1,
                    "is_match": 1,
                    "is_same": 3,
                    "output": 1,
                    "result": 10,
                    "return_value": 1
                },
                "cVar11": {
                    "char1": 1,
                    "char_value": 1,
                    "char_var1": 1,
                    "char_var11": 1,
                    "comparison_result": 8,
                    "condition": 1,
                    "is_equal": 2,
                    "result": 14,
                    "temp_char": 1
                },
                "iVar13": {
                    "cmp_result": 3,
                    "comparison": 5,
                    "comparison_int": 1,
                    "comparison_result": 8,
                    "comparison_result2": 1,
                    "comparison_value": 1,
                    "index": 2,
                    "int_var": 2,
                    "int_var1": 1,
                    "int_var13": 1,
                    "result": 1,
                    "strcmp_result": 1,
                    "string_comparison_result": 2,
                    "temp_int": 1
                },
                "lVar19": {
                    "array_diff": 1,
                    "array_index": 1,
                    "counter": 1,
                    "idx": 1,
                    "index": 2,
                    "index4": 1,
                    "length4": 1,
                    "local_var4": 1,
                    "long_var19": 1,
                    "long_var4": 1,
                    "offset": 8,
                    "offset4": 1,
                    "ptr_10": 1,
                    "temp_length": 1,
                    "temp_long_4": 1,
                    "temp_value": 1,
                    "temp_var_4": 1,
                    "var1": 1,
                    "var4": 2,
                    "var_b": 1
                },
                "lVar22": {
                    "address": 1,
                    "array1_size": 1,
                    "array_diff2": 1,
                    "array_index2": 1,
                    "array_value_offset": 1,
                    "char_index": 1,
                    "i": 1,
                    "index": 2,
                    "length": 1,
                    "length5": 1,
                    "local_var5": 1,
                    "long_var22": 1,
                    "long_var5": 1,
                    "offset": 1,
                    "offset5": 1,
                    "offset_2": 1,
                    "pointer_offset": 1,
                    "ptr_array2_iter": 1,
                    "ptr_offset": 2,
                    "temp_index": 1,
                    "temp_long_5": 1,
                    "temp_value2": 1,
                    "temp_var_5": 1,
                    "value": 1,
                    "var2": 1,
                    "var5": 2,
                    "var_e": 1
                },
                "lVar6": {
                    "array1_item": 1,
                    "array1_ptr": 1,
                    "buffer_1": 1,
                    "index1": 2,
                    "int_var1": 1,
                    "len1": 1,
                    "length1": 4,
                    "local_var1": 1,
                    "long_var1": 1,
                    "long_var6": 1,
                    "nested_ptr_size1": 1,
                    "num1": 1,
                    "offset1": 2,
                    "ptr_array_element1": 1,
                    "source_value1": 1,
                    "temp_long_1": 1,
                    "temp_var_1": 1,
                    "value1": 2,
                    "var1": 4,
                    "var6": 2
                },
                "lVar7": {
                    "array1_subitem1": 1,
                    "array1_value1": 1,
                    "buffer_2": 1,
                    "destination_value1": 1,
                    "index2": 2,
                    "int_var2": 1,
                    "len2": 1,
                    "length2": 4,
                    "local_var2": 1,
                    "long_var2": 1,
                    "long_var7": 1,
                    "nested_ptr_size2": 1,
                    "num2": 1,
                    "offset2": 2,
                    "ptr_array_element2": 1,
                    "temp_long_2": 1,
                    "temp_var_2": 1,
                    "value2": 2,
                    "var2": 4,
                    "var7": 2
                },
                "lVar8": {
                    "array2_subitem1": 1,
                    "array2_value1": 1,
                    "char_length1": 1,
                    "destination_value2": 1,
                    "index3": 2,
                    "int_var3": 1,
                    "len3": 1,
                    "length3": 3,
                    "local_var3": 1,
                    "long_var3": 1,
                    "long_var8": 1,
                    "nested_ptr_offset2": 1,
                    "num3": 1,
                    "offset3": 2,
                    "ptr_9": 1,
                    "ptr_array_element2": 1,
                    "temp_long_3": 1,
                    "temp_value1": 1,
                    "temp_var_3": 1,
                    "value3": 1,
                    "var3": 4,
                    "var8": 2
                },
                "local_48": {
                    "current_array2": 1,
                    "destination_array2": 1,
                    "local3": 1,
                    "local_arr2": 1,
                    "local_array2": 3,
                    "local_array_ptr2": 1,
                    "local_long_array_2": 1,
                    "local_pointer3": 1,
                    "local_pointer4": 1,
                    "local_ptr2": 2,
                    "local_ptr3": 5,
                    "local_ptr4": 1,
                    "local_ptr48": 1,
                    "local_ptr_2": 1,
                    "local_var3": 1,
                    "pointer_var4": 1,
                    "ptr_array2_stack": 1,
                    "ptr_stack_array2": 1,
                    "ptr_value2": 1,
                    "result_array": 1,
                    "stack_2": 1,
                    "temp_values4": 1
                },
                "local_58": {
                    "data_type_ptr": 1,
                    "debug_info_ptr": 1,
                    "linked_list": 2,
                    "linked_list_head": 1,
                    "linked_list_ptr": 1,
                    "linked_values": 1,
                    "list_head_ptr": 1,
                    "local2": 1,
                    "local_list": 1,
                    "local_pointer1": 1,
                    "local_pointer2": 2,
                    "local_pointer_array": 1,
                    "local_ptr2": 7,
                    "local_ptr58": 1,
                    "local_var2": 1,
                    "ptr_head": 1,
                    "ptr_linked_list": 1,
                    "ptr_list": 4,
                    "undefined_pointer_var": 1
                },
                "local_70": {
                    "current_array_elem1": 1,
                    "double_pointer_var2": 1,
                    "local1": 1,
                    "local_arr1": 1,
                    "local_array": 1,
                    "local_array1": 2,
                    "local_array_ptr": 1,
                    "local_long_array": 1,
                    "local_pointer1": 2,
                    "local_ptr": 1,
                    "local_ptr1": 9,
                    "local_ptr70": 1,
                    "local_var1": 1,
                    "nested_array2_ptr_value": 1,
                    "ptr_7": 1,
                    "ptr_array2_value": 1,
                    "ptr_nested_array1": 1,
                    "ptr_value1": 1,
                    "source_array2": 1,
                    "temp_values1": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 1,
                    "buffer": 1,
                    "function_param1": 2,
                    "input": 1,
                    "input_param": 2,
                    "input_value": 2,
                    "obj": 1,
                    "object_a": 1,
                    "param": 2,
                    "param1": 11,
                    "param_1": 3,
                    "parameter1": 1,
                    "value": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arr1": 1,
                    "array1": 12,
                    "array_1": 1,
                    "array_param1": 1,
                    "function_param2": 1,
                    "input1": 2,
                    "input_data_1": 1,
                    "object1": 1,
                    "param2": 1,
                    "pointer1": 1,
                    "ptr1": 1,
                    "source": 1,
                    "struct_1": 1,
                    "value1": 3,
                    "value2": 1,
                    "values1": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arr2": 1,
                    "array2": 12,
                    "array_2": 1,
                    "array_param2": 1,
                    "destination": 1,
                    "function_param3": 1,
                    "input2": 2,
                    "input_data_2": 1,
                    "object2": 1,
                    "param3": 1,
                    "pointer2": 1,
                    "ptr2": 1,
                    "struct_2": 1,
                    "value2": 3,
                    "value3": 1,
                    "values2": 1
                },
                "pcVar10": {
                    "char_2": 1,
                    "char_pointer2": 3,
                    "char_ptr2": 8,
                    "chr2": 1,
                    "destination_char": 1,
                    "nested_array2_string1": 1,
                    "pointer_to_char4": 1,
                    "ptr2": 1,
                    "ptr_to_char_var10": 1,
                    "str2": 7,
                    "string2": 2,
                    "string_value2": 1,
                    "temp_char_2": 1,
                    "temp_str_2": 1,
                    "var10": 1
                },
                "pcVar9": {
                    "char_1": 1,
                    "char_pointer1": 3,
                    "char_ptr1": 8,
                    "chr1": 1,
                    "nested_array1_string1": 1,
                    "pointer_to_char3": 1,
                    "ptr1": 1,
                    "ptr_to_char_var9": 1,
                    "source_char": 1,
                    "str1": 7,
                    "string1": 2,
                    "string_value1": 1,
                    "temp_char_1": 1,
                    "temp_str_1": 1,
                    "var9": 1
                },
                "plStack_50": {
                    "current_array1": 1,
                    "local4": 1,
                    "local_pointer3": 1,
                    "param_stack": 1,
                    "pl_stack": 1,
                    "pl_stack50": 1,
                    "pointer_to_long4": 1,
                    "pointer_var3": 1,
                    "ptr_array1_stack": 1,
                    "ptr_stack_array1": 1,
                    "source_array3": 1,
                    "stack_1": 1,
                    "stack_arr": 1,
                    "stack_array": 1,
                    "stack_array1": 1,
                    "stack_array_ptr": 1,
                    "stack_ptr": 7,
                    "stack_ptr1": 2,
                    "temp": 1,
                    "temp_long_array_2": 1,
                    "temp_values3": 1
                },
                "plVar18": {
                    "array1": 1,
                    "array_ptr1": 2,
                    "current_array1_ptr": 1,
                    "long_pointer1": 1,
                    "nested_array1": 1,
                    "pointer1": 1,
                    "pointer3": 1,
                    "pointer_to_long1": 1,
                    "ptr": 1,
                    "ptr1": 3,
                    "ptr3": 2,
                    "ptr6": 2,
                    "ptr_1": 1,
                    "ptr_6": 1,
                    "ptr_array1": 1,
                    "ptr_to_long_var18": 1,
                    "ptr_value2": 1,
                    "ptr_var3": 1,
                    "source_array_ptr": 1,
                    "subarray1": 1,
                    "temp_array1": 2,
                    "temp_long_array_1": 1,
                    "temp_value_pointer1": 1,
                    "var_a": 1
                },
                "plVar19": {
                    "temp_result": 1
                },
                "plVar20": {
                    "array2": 1,
                    "array_ptr2": 2,
                    "arrayptr2": 1,
                    "destination_array_ptr": 1,
                    "field_2": 1,
                    "long_pointer2": 1,
                    "nested_array2": 2,
                    "pointer2": 1,
                    "pointer4": 1,
                    "pointer_to_long2": 1,
                    "ptr2": 5,
                    "ptr4": 2,
                    "ptr7": 2,
                    "ptr_2": 1,
                    "ptr_array2": 1,
                    "ptr_to_long_var20": 1,
                    "ptr_var4": 1,
                    "temp_array2": 2,
                    "temp_long_array_3": 1,
                    "value_pointer2": 1,
                    "var_c": 1
                },
                "plVar21": {
                    "array2_nested_ptr": 1,
                    "array2_ptr": 1,
                    "array3": 1,
                    "array_ptr3": 1,
                    "long_pointer3": 1,
                    "pointer3": 1,
                    "pointer5": 1,
                    "pointer_to_long3": 1,
                    "ptr1": 1,
                    "ptr3": 4,
                    "ptr5": 2,
                    "ptr8": 2,
                    "ptr_3": 1,
                    "ptr_8": 1,
                    "ptr_array1_iter": 1,
                    "ptr_array2": 1,
                    "ptr_to_long_var21": 1,
                    "ptr_var5": 1,
                    "source_array_ptr2": 1,
                    "subarray5": 1,
                    "temp_array2_2": 1,
                    "temp_array3": 1,
                    "temp_long_array_4": 1,
                    "temp_value_pointer2": 1,
                    "var_d": 1
                },
                "plVarStack_50": {
                    "stack_ptr": 1
                },
                "ppcVar4": {
                    "char_pointer1": 1,
                    "double_pointer_char_var1": 1,
                    "nested_array1_item": 1,
                    "nested_array2": 1,
                    "nested_ptr_value1": 1,
                    "pointer_string_array_1": 1,
                    "pointer_to_char1": 1,
                    "pointer_to_pointer2": 1,
                    "pointers2": 1,
                    "ppc_var1": 1,
                    "ptr2": 2,
                    "ptr_char1": 1,
                    "ptr_char_array1": 1,
                    "ptr_ptr1": 1,
                    "ptr_ptr2": 2,
                    "ptr_ptr_c1": 1,
                    "ptr_ptr_char_array1": 1,
                    "ptr_ptr_to_string1": 1,
                    "ptr_str1": 1,
                    "ptr_to_char1": 2,
                    "ptr_to_char_ptr_var4": 1,
                    "ptr_to_ptr2": 1,
                    "ptr_to_ptr_to_str_1": 1,
                    "ptrptr2": 2,
                    "source_string": 1,
                    "str_1": 1,
                    "string_array1": 1
                },
                "ppcVar5": {
                    "char_pointer2": 1,
                    "destination_string": 1,
                    "double_pointer_char_var2": 1,
                    "nested_array2_item": 1,
                    "nested_array3": 1,
                    "nested_ptr_value2": 1,
                    "pointer_string_array_2": 1,
                    "pointer_to_char2": 1,
                    "pointer_to_pointer3": 1,
                    "pointers3": 1,
                    "ppc_var2": 1,
                    "ptr3": 2,
                    "ptr_char2": 1,
                    "ptr_char_array2": 1,
                    "ptr_ptr2": 1,
                    "ptr_ptr3": 2,
                    "ptr_ptr_c2": 1,
                    "ptr_ptr_char_array2": 1,
                    "ptr_ptr_to_string2": 1,
                    "ptr_str2": 1,
                    "ptr_to_char2": 1,
                    "ptr_to_char_ptr_var5": 1,
                    "ptr_to_ptr3": 1,
                    "ptr_to_ptr_to_str_2": 1,
                    "ptrptr3": 2,
                    "str_2": 1,
                    "string_array2": 1
                },
                "pplVar3": {
                    "array1_nested_ptr": 1,
                    "array2_indirect": 1,
                    "array_pointer1": 1,
                    "double_pointer_var1": 1,
                    "field_1": 1,
                    "nested_array1": 1,
                    "pointer_array_1": 1,
                    "pointer_to_array1": 1,
                    "pointer_to_pointer1": 1,
                    "pointers1": 1,
                    "ppl_var1": 1,
                    "ptr1": 2,
                    "ptr_arr1": 1,
                    "ptr_array1": 3,
                    "ptr_ptr1": 3,
                    "ptr_ptr_array1": 1,
                    "ptr_ptr_to_array1": 1,
                    "ptr_to_ptr": 1,
                    "ptr_to_ptr1": 2,
                    "ptr_to_ptr_arg3": 1,
                    "ptr_to_ptr_to_data_1": 1,
                    "ptrptr1": 2,
                    "source_array": 1,
                    "subarray2": 1
                },
                "puVar16": {
                    "pointer1": 4,
                    "pointer_to_unsigned1": 1,
                    "pointer_var1": 1,
                    "ptr1": 6,
                    "ptr4": 2,
                    "ptr_4": 1,
                    "ptr_array1": 1,
                    "ptr_data_1": 1,
                    "ptr_extracted_type1": 1,
                    "ptr_extracted_value1": 1,
                    "ptr_ptr4": 1,
                    "ptr_to_real_type1": 1,
                    "ptr_to_value16": 1,
                    "ptr_var1": 2,
                    "pu_var1": 1,
                    "source_real_type_ptr": 1,
                    "subarray3": 1,
                    "temp_pointer1": 1,
                    "u_var_ptr1": 1
                },
                "puVar17": {
                    "destination_real_type_ptr": 1,
                    "pointer2": 4,
                    "pointer_to_unsigned2": 1,
                    "pointer_var2": 1,
                    "ptr2": 6,
                    "ptr5": 2,
                    "ptr_5": 1,
                    "ptr_array2": 1,
                    "ptr_data_2": 1,
                    "ptr_extracted_type2": 1,
                    "ptr_extracted_value2": 1,
                    "ptr_ptr5": 1,
                    "ptr_to_real_type2": 1,
                    "ptr_to_value17": 1,
                    "ptr_var2": 2,
                    "pu_var2": 1,
                    "subarray4": 1,
                    "temp_pointer3": 1,
                    "u_var_ptr2": 1
                },
                "uVar1": {
                    "array1_type": 1,
                    "data_1_type": 1,
                    "elem1": 1,
                    "element1": 1,
                    "element_type1": 2,
                    "first_value": 1,
                    "length1": 2,
                    "size1": 1,
                    "source_type": 1,
                    "temp_uint_1": 1,
                    "type1": 9,
                    "type_1": 1,
                    "uint1": 1,
                    "value1": 6,
                    "value1_type": 1
                },
                "uVar14": {
                    "debug_info1": 1,
                    "debug_type1": 2,
                    "extracted_type1": 2,
                    "extracted_value1": 2,
                    "nested_array1_type": 1,
                    "real_type1": 3,
                    "real_type_1": 1,
                    "source_real_type": 1,
                    "type1": 5,
                    "type1_mod": 1,
                    "type1_real": 1,
                    "type3": 2,
                    "type_1": 1,
                    "u_var_temp1": 1,
                    "unknown_value1": 1,
                    "unsigned_var1": 1,
                    "value14": 1,
                    "var1": 1
                },
                "uVar15": {
                    "debug_info2": 1,
                    "debug_type2": 2,
                    "destination_real_type": 1,
                    "extracted_type2": 2,
                    "extracted_value2": 2,
                    "nested_array2_type": 1,
                    "real_type2": 3,
                    "real_type_2": 1,
                    "type2": 5,
                    "type2_mod": 1,
                    "type2_real": 1,
                    "type4": 2,
                    "type_2": 1,
                    "u_var_temp2": 1,
                    "unknown_value2": 1,
                    "unsigned_var2": 1,
                    "value15": 1,
                    "var2": 1
                },
                "uVar2": {
                    "array2_type": 1,
                    "data_2_type": 1,
                    "destination_type": 1,
                    "elem2": 1,
                    "element2": 1,
                    "element_type2": 2,
                    "length2": 2,
                    "second_value": 1,
                    "size2": 1,
                    "temp_uint_2": 1,
                    "type2": 9,
                    "type_2": 1,
                    "uint2": 1,
                    "value2": 6,
                    "value2_type": 1
                }
            },
            "called": [
                "FUN_00112b6e",
                "strcmp",
                "FUN_0010922b",
                "abort"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "code": "\nbyte check_equality_between_pointers_0010922b(long param1,long *array1,long *array2)\n\n{\n  uint type1;\n  uint type2;\n  long **ptr_array1;\n  char **ptr_to_char1;\n  char **ptr_ptr3;\n  long var1;\n  long var2;\n  long var3;\n  char *char_ptr1;\n  char *char_ptr2;\n  char result;\n  byte is_equal;\n  int comparison_result;\n  undefined8 type1;\n  undefined8 type2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *ptr1;\n  long offset;\n  long *ptr2;\n  long *ptr3;\n  long ptr_offset;\n  long *local_ptr1;\n  undefined8 *local_ptr2;\n  long *stack_ptr;\n  long *local_ptr3;\n  \n  ptr1 = array2;\n  if (array1 == (long *)0x0) {\nLAB_00109241:\n    return array2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)array1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)array2, type2 == 1) {\n      array2 = **(long ***)array2[2];\n      if (array2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (array1 == array2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    array1 = *(long **)(array1[2] + 8);\n    if (array1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    array2 = *(long **)(array2[2] + 8);\n    ptr1 = array2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*array1 != *array2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(array1 + 2) == *(char *)(array2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  local_ptr2 = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = local_ptr2; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == array1) && ((long *)ptr2[2] == array2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &local_ptr2;\n  stack_ptr = array1;\n  local_ptr3 = array2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr1 = (long *)array1[2];\n    ptr_array1 = (long **)array2[2];\n    if (ptr1 == (long *)0x0) {\n      is_equal = ptr_array1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_array1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptr1 + 0xc)) &&\n       (*(uint *)((long)ptr1 + 0xc) == *(uint *)((long)ptr_array1 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*ptr1;\n    local_ptr1 = *ptr_array1;\n    if (((ptr2 == (undefined8 *)0x0) == (local_ptr1 == (long *)0x0)) &&\n       ((((ptr1[2] == 0) == (ptr_array1[2] == (long *)0x0) &&\n         ((ptr1[3] == 0) == (ptr_array1[3] == (long *)0x0))) &&\n        ((ptr1[4] == 0) == (ptr_array1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr1[4] != 0) &&\n           (result = check_equality_between_pointers_0010922b(param1,ptr1[4],ptr_array1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptr3 = (long *)ptr1[2];\n        if (ptr3 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)ptr1[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr1 = ptr_array1[3];\n          while( true ) {\n            ptr_ptr3 = (char **)*ptr2;\n            if (ptr_ptr3 == (char **)0x0) {\n              is_equal = *ptr1 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_to_char1 = (char **)*ptr1;\n            if (ptr_to_char1 == (char **)0x0) break;\n            if ((**ptr_ptr3 != **ptr_to_char1) || (comparison_result = strcmp(*ptr_ptr3,*ptr_to_char1), comparison_result != 0))\n            break;\n            char_ptr1 = ptr_ptr3[1];\n            char_ptr2 = ptr_to_char1[1];\n            if ((char_ptr1 == (char *)0x0) != (char_ptr2 == (char *)0x0)) break;\n            if (char_ptr1 != (char *)0x0) {\n              ptr_offset = 0;\n              while( true ) {\n                ptr_ptr3 = *(char ***)(char_ptr1 + ptr_offset);\n                ptr_to_char1 = *(char ***)(char_ptr2 + ptr_offset);\n                if (ptr_ptr3 == (char **)0x0) break;\n                if (ptr_to_char1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_ptr3 != **ptr_to_char1) ||\n                     ((((ulong)ptr_ptr3[2] ^ (ulong)ptr_to_char1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_ptr3[3] != ptr_to_char1[3] ||\n                     ((((ptr_ptr3[4] == (char *)0x0) != (ptr_to_char1[4] == (char *)0x0) ||\n                       (comparison_result = strcmp(*ptr_ptr3,*ptr_to_char1), comparison_result != 0)) ||\n                      (result = check_equality_between_pointers_0010922b(param1,ptr_ptr3[1],ptr_to_char1[1]), result == '\\0')))))) ||\n                   ((ptr_ptr3[4] != (char *)0x0 &&\n                    (result = check_equality_between_pointers_0010922b(param1,ptr_ptr3[4],ptr_to_char1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                ptr_offset = ptr_offset + 8;\n              }\n              if (ptr_to_char1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            ptr1 = ptr1 + 1;\n          }\n        }\n        else {\n          ptr2 = ptr_array1[2];\n          for (; ptr2 = (undefined8 *)*ptr3, ptr2 != (undefined8 *)0x0;\n              ptr3 = ptr3 + 1) {\n            ptr1 = (undefined8 *)*ptr2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (result = check_equality_between_pointers_0010922b(param1,*ptr2,*ptr1), result == '\\0'))\n            goto LAB_00109382;\n            ptr2 = ptr2 + 1;\n          }\n          if (*ptr2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_ptr3 = (char **)*ptr2, ptr_ptr3 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptr_to_char1 = (char **)*local_ptr1;\n          if (ptr_to_char1 == (char **)0x0) goto LAB_00109382;\n          char_ptr1 = *ptr_to_char1;\n          char_ptr2 = *ptr_ptr3;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((ulong)ptr_ptr3[2] ^ (ulong)ptr_to_char1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_ptr3 + 0x14) == '\\0') {\n            if (ptr_ptr3[3] == ptr_to_char1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison_result = strcmp(ptr_ptr3[3],ptr_to_char1[3]);\n          if (comparison_result != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison_result = strcmp(char_ptr2,char_ptr1);\n          if (((comparison_result != 0) || (ptr_ptr3[1] == (char *)0x0)) || (ptr_to_char1[1] == (char *)0x0))\n          goto LAB_00109382;\n          type1 = extract_real_type_from_debug_info_00112b6e(ptr_to_char1[1],0);\n          type2 = extract_real_type_from_debug_info_00112b6e(ptr_ptr3[1],0);\n          result = check_equality_between_pointers_0010922b(param1,type2,type1);\n          if (result == '\\0') goto LAB_00109382;\n          local_ptr1 = local_ptr1 + 1;\n        }\n        if (*local_ptr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr1 = (long *)array1[2];\n    ptr3 = (long *)array2[2];\n    if (ptr1 == (long *)0x0) {\n      is_equal = ptr3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr3 == (long *)0x0) goto LAB_00109382;\n    ptr_offset = *ptr1;\n    var1 = *ptr3;\n    offset = 0;\n    var2 = ptr1[1];\n    var3 = ptr3[1];\n    do {\n      char_ptr1 = *(char **)(ptr_offset + offset);\n      if (char_ptr1 == (char *)0x0) {\n        is_equal = *(long *)(var1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(char **)(var1 + offset);\n      if (((char_ptr2 == (char *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(long *)(var2 + offset) != *(long *)(var3 + offset))) break;\n      comparison_result = strcmp(char_ptr1,char_ptr2);\n      offset = offset + 8;\n    } while (comparison_result == 0);\nLAB_00109964:\n    is_equal = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    is_equal = check_equality_between_pointers_0010922b(param1,array1[2],array2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)array1[2] + 2) == *(char *)((undefined8 *)array2[2] + 2)) &&\n       (result = check_equality_between_pointers_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n       result != '\\0')) {\n      ptr1 = *(long **)(array1[2] + 8);\n      ptr3 = *(long **)(array2[2] + 8);\n      if ((ptr1 == (long *)0x0) == (ptr3 == (long *)0x0)) {\n        if (ptr1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr1 != 0 && (*ptr3 != 0)) &&\n               (result = check_equality_between_pointers_0010922b(param1), result != '\\0'))) {\n          ptr1 = ptr1 + 1;\n          ptr3 = ptr3 + 1;\n        }\nLAB_0010995d:\n        if (*ptr1 != 0) goto LAB_00109964;\n        is_equal = *ptr3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      is_equal = check_equality_between_pointers_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)array2[2];\n    ptr1 = (undefined8 *)array1[2];\n    is_equal = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = check_equality_between_pointers_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]);\n    is_equal = 0;\n    if (result != '\\0') {\n      is_equal = check_equality_between_pointers_0010922b(param1,*(undefined8 *)(array1[2] + 8),*(undefined8 *)(array2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)array1[2] + 3) == *(char *)((undefined8 *)array2[2] + 3)) &&\n        (result = check_equality_between_pointers_0010922b(param1,*(undefined8 *)array1[2],*(undefined8 *)array2[2]),\n        result != '\\0')) &&\n       (result = check_equality_between_pointers_0010922b(param1,*(undefined8 *)(array1[2] + 8),\n                              *(undefined8 *)(array2[2] + 8)), result != '\\0')) {\n      ptr1 = *(long **)(array1[2] + 0x10);\n      ptr3 = *(long **)(array2[2] + 0x10);\n      if ((ptr1 == (long *)0x0) == (ptr3 == (long *)0x0)) {\n        if (ptr1 != (long *)0x0) {\n          while (((*ptr1 != 0 && (*ptr3 != 0)) &&\n                 (result = check_equality_between_pointers_0010922b(param1), result != '\\0'))) {\n            ptr1 = ptr1 + 1;\n            ptr3 = ptr3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        is_equal = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    is_equal = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr1 = (long *)array2[2];\n    ptr3 = (long *)array1[2];\n    comparison_result = strcmp(*(char **)(*ptr3 + 8),*(char **)(*ptr1 + 8));\n    is_equal = 0;\n    if (comparison_result == 0) {\n      is_equal = check_equality_between_pointers_0010922b(param1,ptr3[1],ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  is_equal = is_equal & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = local_ptr2;\n  return is_equal;\ncode_r0x00109263:\n  array1 = **(long ***)array1[2];\n  ptr1 = array1;\n  goto joined_r0x00109255;\n}\n\n",
            "current_name": "check_equality_between_pointers_0010922b",
            "entrypoint": "0x0010922b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010922b": "check_equality_between_pointers_0010922b",
                "bVar12": "is_equal",
                "cVar11": "result",
                "iVar13": "comparison_result",
                "lVar19": "offset",
                "lVar22": "ptr_offset",
                "lVar6": "var1",
                "lVar7": "var2",
                "lVar8": "var3",
                "local_48": "local_ptr3",
                "local_58": "local_ptr2",
                "local_70": "local_ptr1",
                "param_1": "param1",
                "param_2": "array1",
                "param_3": "array2",
                "pcVar10": "char_ptr2",
                "pcVar9": "char_ptr1",
                "plStack_50": "stack_ptr",
                "plVar18": "ptr1",
                "plVar20": "ptr2",
                "plVar21": "ptr3",
                "ppcVar4": "ptr_to_char1",
                "ppcVar5": "ptr_ptr3",
                "pplVar3": "ptr_array1",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "uVar1": "type1",
                "uVar14": "type1",
                "uVar15": "type2",
                "uVar2": "type2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a0b": {
            "additional_data": {
                "FUN_00109a0b": {
                    "copy_and_null_terminate": 17,
                    "copy_and_null_terminate_string": 6,
                    "copy_and_terminate_string": 1,
                    "copy_and_terminator": 1,
                    "copy_and_zero_terminate": 1,
                    "copy_string": 3,
                    "copy_string_with_null_terminator": 2
                },
                "bVar4": {
                    "byte_offset": 1,
                    "flag": 1,
                    "increment": 11,
                    "increment_value": 3,
                    "is_decreasing": 1,
                    "is_increment": 1,
                    "is_negative": 3,
                    "is_reverse": 1,
                    "is_reversed": 4,
                    "offset": 5
                },
                "lVar2": {
                    "copy_count": 1,
                    "count": 2,
                    "counter": 3,
                    "current_index": 1,
                    "i": 7,
                    "index": 5,
                    "remaining": 1,
                    "remaining_length": 9,
                    "remaining_size": 2
                },
                "param_1": {
                    "source": 23,
                    "source_data": 1,
                    "source_string": 7
                },
                "param_2": {
                    "length": 24,
                    "size": 3,
                    "source_length": 2,
                    "string_length": 2
                },
                "puVar1": {
                    "buffer": 1,
                    "copied_data": 1,
                    "copied_string": 6,
                    "dest": 1,
                    "destination": 19,
                    "destination_string": 1,
                    "new_string": 2
                },
                "puVar3": {
                    "copied_string_index": 1,
                    "current_destination": 6,
                    "dest_data": 1,
                    "dest_iterator": 1,
                    "dest_pointer": 3,
                    "dest_ptr": 9,
                    "destination": 3,
                    "destination_copy": 1,
                    "destination_index": 1,
                    "destination_string": 4,
                    "dst_ptr": 1
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\nvoid copy_and_null_terminate_string_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long remaining_length;\n  undefined *dest_ptr;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (remaining_length = (long)length; remaining_length != 0; remaining_length = remaining_length + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)increment * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)increment * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "current_name": "copy_and_null_terminate_string_00109a0b",
            "entrypoint": "0x00109a0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_string_00109a0b",
                "bVar4": "increment",
                "lVar2": "remaining_length",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "puVar3": "dest_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109a32": {
            "additional_data": {
                "FUN_00109a32": {
                    "convert_string_to_unsigned_long": 2,
                    "parse_and_convert_string": 2,
                    "parse_and_convert_uint": 1,
                    "parse_and_handle_number": 1,
                    "parse_numeric_input": 4,
                    "parse_numeric_string": 8,
                    "parse_str_to_ulong_with_error": 1,
                    "parse_unsigned_int": 1,
                    "parse_unsigned_integer": 3,
                    "parse_unsigned_long": 7,
                    "parse_unsigned_number": 1
                },
                "__nptr": {
                    "curr_str": 1,
                    "current_char": 10,
                    "current_char_ptr": 3,
                    "current_character": 1,
                    "current_position": 3,
                    "current_ptr": 3,
                    "current_string": 4,
                    "input_str": 1,
                    "number_string": 3,
                    "string": 1,
                    "string_pointer": 1
                },
                "auVar4": {
                    "result": 9,
                    "result_value": 1,
                    "result_variable": 1,
                    "return_value": 19
                },
                "param_1": {
                    "input_str": 1,
                    "input_str_ptr": 1,
                    "input_string": 12,
                    "input_string_ptr": 2,
                    "input_strings": 3,
                    "numeric_string": 1,
                    "string": 1,
                    "string_array": 1,
                    "string_list": 1,
                    "string_pointer": 3,
                    "string_ptr": 5
                },
                "param_2": {
                    "conversion_failed": 1,
                    "conversion_flag_ptr": 1,
                    "convert_success_ptr": 1,
                    "error": 1,
                    "error_flag": 6,
                    "error_flag_ptr": 1,
                    "is_overflow": 4,
                    "is_overflow_ptr": 2,
                    "numeric_overflow_flag": 2,
                    "numeric_overflow_ptr": 1,
                    "out_of_range_flag": 1,
                    "overflow_flag": 7,
                    "overflow_flag_ptr": 1,
                    "parse_error": 2
                },
                "param_3": {
                    "end": 1,
                    "end_character": 1,
                    "end_of_input": 3,
                    "end_of_str": 1,
                    "end_of_string": 16,
                    "end_ptr": 2,
                    "end_str_ptr": 1,
                    "end_string": 2,
                    "max_str": 1,
                    "max_string": 1,
                    "string_end": 2
                },
                "param_4": {
                    "arg4": 1,
                    "ignore": 1,
                    "param_4": 3,
                    "unknown_param_1": 1,
                    "unknown_param_4": 1,
                    "unspecified_value_1": 1,
                    "unused_1": 1,
                    "unused_param": 2,
                    "unused_param1": 3,
                    "unused_param4": 4,
                    "unused_param_1": 7,
                    "unused_param_4": 4,
                    "unused_parameter_1": 2
                },
                "param_5": {
                    "arg5": 1,
                    "current_value": 1,
                    "error_message_id": 1,
                    "output_value": 1,
                    "param_5": 2,
                    "result": 4,
                    "unknown_param_2": 1,
                    "unknown_param_5": 1,
                    "unspecified_value_2": 1,
                    "unused_2": 1,
                    "unused_param": 1,
                    "unused_param2": 3,
                    "unused_param5": 2,
                    "unused_param_2": 7,
                    "unused_param_5": 2,
                    "unused_parameter_2": 2
                },
                "piVar1": {
                    "errno": 1,
                    "errno_address": 1,
                    "errno_location": 3,
                    "errno_ptr": 15,
                    "errno_value": 1,
                    "error_code": 2,
                    "error_flag": 3,
                    "error_flag_ptr": 1,
                    "error_pointer": 1,
                    "error_ptr": 2,
                    "error_value": 1
                },
                "uVar2": {
                    "converted_number": 1,
                    "converted_value": 3,
                    "numeric_value": 1,
                    "parsed_number": 4,
                    "parsed_value": 17,
                    "result": 5
                },
                "uVar3": {
                    "error_message": 21,
                    "error_msg": 1,
                    "error_msg_ptr": 1,
                    "numeric_overflow_msg": 1,
                    "warning_message": 7
                }
            },
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "FUN_00108fe8"
            ],
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *overflow_flag,char *end_of_string,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  char *current_char;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (overflow_flag != (undefined *)0x0) {\n    *overflow_flag = 0;\n  }\n  current_char = *input_string;\n  if ((current_char < end_of_string) && (*current_char != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_char,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (overflow_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_message_00108fe8(current_char,error_message);\n    }\n    else {\n      *overflow_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = unused_param_2;\n  return_value._0_8_ = parsed_value;\n  return return_value;\n}\n\n",
            "current_name": "parse_numeric_string_00109a32",
            "entrypoint": "0x00109a32",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "__nptr": "current_char",
                "auVar4": "return_value",
                "param_1": "input_string",
                "param_2": "overflow_flag",
                "param_3": "end_of_string",
                "param_4": "unused_param_1",
                "param_5": "unused_param_2",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ab1": {
            "additional_data": {
                "FUN_00109ab1": {
                    "parse_and_extract_parameters": 1,
                    "parse_and_extract_values": 1,
                    "parse_argument_list": 1,
                    "parse_coordinates": 1,
                    "parse_function_arguments": 1,
                    "parse_function_parameters": 2,
                    "parse_input_parameters": 1,
                    "parse_input_values": 1,
                    "parse_parameters": 1,
                    "parse_stab_argument": 2,
                    "parse_stab_arguments": 1,
                    "parse_stab_data": 5,
                    "parse_stab_entry": 1,
                    "parse_stab_expression": 1,
                    "parse_stab_info": 2,
                    "parse_stab_parameter": 1,
                    "parse_stab_parameters": 2,
                    "parse_stab_string": 1,
                    "parse_stab_value": 2,
                    "parse_stab_values": 3
                },
                "auVar4": {
                    "output": 1,
                    "output_array": 2,
                    "result": 6,
                    "return_value": 21,
                    "temp": 1
                },
                "param_1": {
                    "arg_str": 1,
                    "input": 1,
                    "input_string": 8,
                    "stab_argument": 1,
                    "stab_data": 3,
                    "stab_data_ptr": 1,
                    "stab_entry": 1,
                    "stab_string": 12,
                    "str_ptr": 1,
                    "string_ptr": 2
                },
                "param_2": {
                    "arg_ptr": 1,
                    "arg_values": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_parameters": 1,
                    "output_values": 11,
                    "parsed_data": 1,
                    "parsed_value_ptr": 1,
                    "parsed_values": 7,
                    "result": 5,
                    "result_ptr": 1
                },
                "param_3": {
                    "additional_value": 1,
                    "arg3": 1,
                    "optional_value": 1,
                    "param_1_size": 1,
                    "param_3": 24,
                    "temporary_value_1": 1,
                    "unused_parameter": 1,
                    "value1": 1
                },
                "param_4": {
                    "arg4": 1,
                    "param_2_size": 1,
                    "param_4": 24,
                    "temporary_value_2": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "unused_value": 1,
                    "value2": 1
                },
                "param_5": {
                    "arg5": 1,
                    "param_3_size": 1,
                    "param_5": 26,
                    "result": 1,
                    "result_value": 1,
                    "unused_parameter": 1
                },
                "parse_numeric_string_00109a32": {
                    "parse_numeric_string": 3
                },
                "pcVar2": {
                    "current_char": 30,
                    "current_char_ptr": 1
                },
                "print_bad_stab_error_message_00108fb9": {
                    "print_error_message": 3
                },
                "uVar1": {
                    "numeric_value": 2,
                    "numeric_value_1": 1,
                    "parsed_numeric_1": 1,
                    "parsed_value": 20,
                    "parsed_value_1": 6,
                    "result_1": 1
                },
                "uVar3": {
                    "combined_value": 1,
                    "concatenated_result": 1,
                    "concatenated_value": 2,
                    "error_value": 1,
                    "modified_result": 1,
                    "modified_u_var3": 1,
                    "result": 17,
                    "result_2": 1,
                    "result_value": 1,
                    "return_value": 5
                }
            },
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nparse_stab_data_00109ab1(char **stab_string,undefined4 *output_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *stab_string;\n  if (*current_char == '(') {\n    *stab_string = current_char + 1;\n    parsed_value = parse_numeric_string(stab_string,0);\n    *output_values = parsed_value;\n    if (**stab_string == ',') {\n      *stab_string = *stab_string + 1;\n      parsed_value = parse_numeric_string(stab_string,0,param_3);\n      output_values[1] = parsed_value;\n      if (**stab_string == ')') {\n        current_char = *stab_string + 1;\n        *stab_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_error_message(current_char);\n    result = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_numeric_string(stab_string,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "parse_stab_data_00109ab1",
            "entrypoint": "0x00109ab1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ab1": "parse_stab_data_00109ab1",
                "auVar4": "return_value",
                "param_1": "stab_string",
                "param_2": "output_values",
                "parse_numeric_string_00109a32": "parse_numeric_string",
                "pcVar2": "current_char",
                "print_bad_stab_error_message_00108fb9": "print_error_message",
                "uVar1": "parsed_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b2f": {
            "additional_data": {
                "FUN_00109b2f": {
                    "deallocate_and_return_next": 2,
                    "deallocate_memory": 2,
                    "extract_and_delete_next_element": 1,
                    "extract_and_free": 4,
                    "extract_and_free_memory": 1,
                    "extract_and_free_next": 2,
                    "extract_and_free_next_item": 1,
                    "extract_and_free_node": 1,
                    "extract_and_free_pointer": 3,
                    "extract_and_free_ptr": 6,
                    "extract_data": 1,
                    "extract_inner_variable": 1,
                    "extract_next_item": 1,
                    "extract_next_ptr": 1,
                    "extract_next_value": 2,
                    "extract_second_ptr": 1,
                    "get_next_value": 1
                },
                "__ptr": {
                    "current_block": 1,
                    "current_element": 1,
                    "current_pointer": 3,
                    "current_ptr": 3,
                    "data_ptr": 1,
                    "first_ptr": 1,
                    "list_ptr": 1,
                    "memory_pointer": 1,
                    "next_item_ptr": 1,
                    "next_ptr": 3,
                    "node": 1,
                    "pointer": 1,
                    "ptr": 10,
                    "ptr_value": 2,
                    "target_pointer": 1
                },
                "param_1": {
                    "base_address": 1,
                    "binary_address": 1,
                    "data_ptr": 2,
                    "input": 2,
                    "input_addr": 1,
                    "input_address": 3,
                    "input_param": 2,
                    "input_pointer": 1,
                    "input_ptr": 3,
                    "input_value": 1,
                    "item_list": 1,
                    "memory_address": 3,
                    "memory_block_address": 1,
                    "outer_variable": 1,
                    "param": 6,
                    "source_address": 1,
                    "source_ptr": 1
                },
                "puVar1": {
                    "extracted_item": 1,
                    "extracted_ptr": 2,
                    "extracted_value": 2,
                    "extracted_variable": 1,
                    "next_block": 1,
                    "next_element": 1,
                    "next_item": 1,
                    "next_pointer": 3,
                    "next_ptr": 7,
                    "next_value": 1,
                    "result": 1,
                    "ret_ptr": 1,
                    "return_pointer": 1,
                    "return_val": 1,
                    "return_value": 7
                }
            },
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010e9a0",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010ebb0",
                "FUN_0010a94e",
                "FUN_0010b948",
                "FUN_0010e7c2",
                "FUN_0010e5db",
                "FUN_0010e918",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e6a8",
                "FUN_0010a424"
            ],
            "code": "\nundefined8 * extract_and_free_ptr_00109b2f(long param)\n\n{\n  undefined8 *ptr;\n  undefined8 *return_value;\n  \n  ptr = *(undefined8 **)(param + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    return_value = (undefined8 *)ptr[1];\n    *(undefined8 *)(param + 0x60) = *ptr;\n    free(ptr);\n    return return_value;\n  }\n  return ptr;\n}\n\n",
            "current_name": "extract_and_free_ptr_00109b2f",
            "entrypoint": "0x00109b2f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "__ptr": "ptr",
                "param_1": "param",
                "puVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109b52": {
            "additional_data": {
                "FUN_00109b52": {
                    "allocate_and_copy": 1,
                    "allocate_and_initialize_data": 1,
                    "create_and_copy_data": 1,
                    "create_and_initialize_data_structure": 1,
                    "create_and_initialize_struct": 1,
                    "create_data_entry": 2,
                    "create_data_structure": 1,
                    "create_entry_in_list": 1,
                    "create_new_entry": 3,
                    "create_new_object": 2,
                    "initialize_data": 2,
                    "initialize_data_struct": 1,
                    "initialize_data_structure": 12,
                    "initialize_data_structures": 1,
                    "initialize_object": 1
                },
                "ZEXT816": {
                    "zero_fill": 1
                },
                "param_1": {
                    "base_address": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "data_struct_ptr": 2,
                    "data_structure": 7,
                    "data_structure_address": 2,
                    "data_structure_pointer": 2,
                    "data_structure_ptr": 1,
                    "entry_list": 1,
                    "entry_point": 1,
                    "input_data": 1,
                    "list_head_ptr": 1,
                    "mem_layout": 1,
                    "object": 1,
                    "object_address": 2,
                    "struct_ptr": 2,
                    "structure_address": 1,
                    "structure_pointer": 1
                },
                "param_2": {
                    "data": 1,
                    "input_string": 3,
                    "source": 1,
                    "source_string": 14,
                    "str": 1,
                    "str_param": 1,
                    "string": 1,
                    "string_param": 7,
                    "string_parameter": 1,
                    "text_string": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "another_object": 1,
                    "data_ptr": 1,
                    "destination_ptr": 1,
                    "extra_data": 1,
                    "object_param": 1,
                    "param3": 7,
                    "param3_data": 1,
                    "param3_value": 3,
                    "param_3": 5,
                    "param_pointer": 1,
                    "param_three": 1,
                    "param_value1": 1,
                    "parameter3": 3,
                    "parameter_3": 1,
                    "some_data": 1,
                    "target": 1
                },
                "param_4": {
                    "byte_value": 1,
                    "char_param": 1,
                    "character": 2,
                    "flag": 5,
                    "param4": 6,
                    "param4_data": 1,
                    "param4_value": 3,
                    "param_4": 4,
                    "param_four": 1,
                    "param_value": 1,
                    "param_value2": 1,
                    "parameter": 1,
                    "parameter4": 3,
                    "parameter_4": 1
                },
                "param_5": {
                    "counter": 1,
                    "int_param": 2,
                    "int_value": 1,
                    "param5": 6,
                    "param5_data": 1,
                    "param5_value": 3,
                    "param_5": 5,
                    "param_five": 1,
                    "param_value3": 1,
                    "parameter5": 3,
                    "parameter_5": 1,
                    "status": 2,
                    "value": 4
                },
                "puVar2": {
                    "allocated_memory": 9,
                    "allocated_memory_ptr": 1,
                    "data_entry_ptr": 1,
                    "data_ptr": 1,
                    "dynamic_data": 1,
                    "dynamic_memory_ptr": 1,
                    "new_data": 1,
                    "new_data_ptr": 1,
                    "new_data_struct": 1,
                    "new_data_structure": 2,
                    "new_data_structure_address": 1,
                    "new_entry": 2,
                    "new_entry_ptr": 2,
                    "new_object": 3,
                    "new_pointer": 1,
                    "struct_array": 1
                },
                "uVar1": {
                    "old_data": 1,
                    "old_data_structure_address": 1,
                    "old_entry": 1,
                    "old_list_head": 1,
                    "old_object": 1,
                    "old_pointer": 1,
                    "old_value": 1,
                    "original_value": 1,
                    "prev_struct_ptr": 1,
                    "prev_value": 1,
                    "previous_data": 1,
                    "previous_data_struct": 1,
                    "previous_pointer": 1,
                    "previous_value": 3,
                    "saved_data": 1,
                    "saved_value": 1,
                    "temp_value": 1,
                    "temp_var": 3,
                    "temp_var1": 5,
                    "temp_var_1": 1,
                    "temp_variable_1": 1
                },
                "uVar3": {
                    "copied_input_string": 1,
                    "copied_string": 2,
                    "duplicate_string": 1,
                    "duplicated_data": 1,
                    "duplicated_source": 1,
                    "duplicated_source_string": 1,
                    "duplicated_str": 1,
                    "duplicated_string": 21
                }
            },
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "calling": [
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_00109cf4",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010b948",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010a377",
                "FUN_00109d97",
                "FUN_0010a424",
                "FUN_0010e453"
            ],
            "code": "\nundefined create_and_initialize_data_structure_00109b52(long data_structure,undefined8 source_string,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 temp_var1;\n  undefined8 *allocated_memory;\n  undefined8 duplicated_string;\n  \n  allocated_memory = (undefined8 *)xmalloc(0x40);\n  duplicated_string = xstrdup(source_string);\n  allocated_memory[2] = param3;\n  *(undefined (*) [16])(allocated_memory + 4) = zero_fill(0);\n  *(undefined (*) [16])(allocated_memory + 6) = zero_fill(0);\n  temp_var1 = *(undefined8 *)(data_structure + 0x60);\n  *(undefined *)((long)allocated_memory + 0x1c) = param4;\n  *(undefined4 *)(allocated_memory + 3) = param5;\n  *(undefined8 **)(data_structure + 0x60) = allocated_memory;\n  *allocated_memory = temp_var1;\n  allocated_memory[1] = duplicated_string;\n  return 1;\n}\n\n",
            "current_name": "create_and_initialize_data_structure_00109b52",
            "entrypoint": "0x00109b52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109b52": "create_and_initialize_data_structure_00109b52",
                "ZEXT816": "zero_fill",
                "param_1": "data_structure",
                "param_2": "source_string",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar2": "allocated_memory",
                "uVar1": "temp_var1",
                "uVar3": "duplicated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109bbb": {
            "additional_data": {
                "FUN_00109bbb": {
                    "add_semicolon_to_end_of_string": 1,
                    "add_semicolon_to_string": 2,
                    "append_char_to_null_terminated_string": 1,
                    "append_semicolon": 1,
                    "append_semicolon_if_needed": 1,
                    "append_semicolon_if_not_empty": 1,
                    "append_semicolon_if_not_null": 1,
                    "append_semicolon_to_end_of_non_null_string": 1,
                    "append_semicolon_to_end_of_string": 2,
                    "append_semicolon_to_str": 1,
                    "append_semicolon_to_string": 17,
                    "append_to_semicolon": 1,
                    "set_semicolon_at_end": 1
                },
                "__s": {
                    "str": 1,
                    "str_ptr": 1,
                    "string": 4,
                    "string_address": 2,
                    "string_pointer": 10,
                    "string_ptr": 10,
                    "string_to_append": 1,
                    "target_string": 1
                },
                "param_1": {
                    "address": 1,
                    "buffer_address": 1,
                    "input": 8,
                    "input_address": 3,
                    "input_data": 2,
                    "input_param": 3,
                    "input_pointer": 3,
                    "input_ptr": 1,
                    "input_string": 2,
                    "input_struct": 1,
                    "object_address": 2,
                    "parameter": 1,
                    "str_ptr": 1,
                    "struct_address": 1,
                    "target_address": 1
                },
                "sVar1": {
                    "length": 3,
                    "length_of_string": 1,
                    "str_length": 2,
                    "string_length": 19
                }
            },
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nbool append_semicolon_to_end_of_non_null_string_00109bbb(long input)\n\n{\n  char *string_pointer;\n  size_t string_length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string_pointer = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string_pointer != (char *)0x0) {\n      string_length = strlen(string_pointer);\n      *(undefined2 *)(string_pointer + string_length) = 0x3b;\n    }\n    return string_pointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "current_name": "append_semicolon_to_end_of_non_null_string_00109bbb",
            "entrypoint": "0x00109bbb",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_end_of_non_null_string_00109bbb",
                "__s": "string_pointer",
                "param_1": "input",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109be3": {
            "additional_data": {
                "FUN_00109be3": {
                    "add_and_resize": 1,
                    "append_element_to_array": 1,
                    "append_item_to_list": 1,
                    "expand_and_add_data": 1,
                    "expand_and_add_to_buffer": 2,
                    "expand_and_add_to_memory": 1,
                    "expand_and_insert_data": 1,
                    "expand_and_insert_item": 1,
                    "expand_and_store_data": 7,
                    "expand_and_store_element": 1,
                    "expand_array": 2,
                    "expand_array_and_store": 1,
                    "realloc_and_store": 1,
                    "resizable_array_insert": 1,
                    "resize_and_add_data": 1,
                    "resize_and_add_to_array": 1,
                    "resize_and_insert": 2,
                    "resize_and_insert_data": 1,
                    "resize_and_insert_item": 1,
                    "resize_and_store_data": 1,
                    "update_and_expand_buffer": 1,
                    "update_array": 1
                },
                "param_1": {
                    "array": 11,
                    "array_ptr": 2,
                    "buffer": 3,
                    "data": 5,
                    "data_manager": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "data_structure": 1,
                    "data_structure_ptr": 1,
                    "list": 1,
                    "memory_block": 1,
                    "memory_ptr": 1
                },
                "param_2": {
                    "data": 4,
                    "element": 5,
                    "item": 3,
                    "new_data": 1,
                    "new_element": 1,
                    "new_value": 3,
                    "value": 14
                },
                "param_3": {
                    "additional_value": 1,
                    "count": 4,
                    "data": 1,
                    "element_type": 1,
                    "flag": 1,
                    "index": 1,
                    "length": 3,
                    "new_info": 1,
                    "new_value2": 1,
                    "new_value_type": 1,
                    "size": 7,
                    "status": 1,
                    "value": 8
                },
                "puVar2": {
                    "data_pointer": 1,
                    "destination": 1,
                    "element_pointer": 1,
                    "element_ptr": 3,
                    "insert_ptr": 2,
                    "inserted_element": 1,
                    "insertion_address": 1,
                    "insertion_point": 2,
                    "new_data_ptr": 1,
                    "new_element": 4,
                    "new_element_address": 2,
                    "new_element_location": 1,
                    "new_element_pointer": 1,
                    "new_element_ptr": 1,
                    "new_entry": 2,
                    "new_item_address": 1,
                    "new_item_ptr": 1,
                    "new_value_location": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "stored_data_pointer": 1,
                    "target_ptr": 1
                },
                "uVar1": {
                    "expanded_array": 2,
                    "expanded_buffer": 1,
                    "expanded_data": 1,
                    "new_array": 6,
                    "new_array_ptr": 3,
                    "new_block": 1,
                    "new_buffer": 1,
                    "new_data": 1,
                    "new_data_pointer": 2,
                    "new_data_ptr": 1,
                    "new_data_structure_ptr": 1,
                    "new_list_ptr": 1,
                    "new_memory": 1,
                    "new_memory_block": 1,
                    "new_memory_ptr": 1,
                    "realloc_result": 7
                },
                "uVar3": {
                    "array_length": 2,
                    "array_size": 3,
                    "buffer_length": 1,
                    "current_count": 1,
                    "current_index": 1,
                    "current_length": 1,
                    "current_size": 20,
                    "list_length": 1,
                    "num_entries": 1
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 expand_and_store_data_00109be3(long array,undefined8 value,undefined4 value)\n\n{\n  undefined8 realloc_result;\n  undefined8 *new_element;\n  uint current_size;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    current_size = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = current_size;\n    realloc_result = xrealloc(*(undefined8 *)(array + 0x20),(ulong)current_size << 4);\n    *(undefined8 *)(array + 0x20) = realloc_result;\n  }\n  current_size = *(uint *)(array + 0x28);\n  new_element = (undefined8 *)((ulong)current_size * 0x10 + *(long *)(array + 0x20));\n  *new_element = value;\n  *(undefined4 *)(new_element + 1) = value;\n  *(uint *)(array + 0x28) = current_size + 1;\n  return CONCAT71((int7)((ulong)new_element >> 8),1);\n}\n\n",
            "current_name": "expand_and_store_data_00109be3",
            "entrypoint": "0x00109be3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "array",
                "param_2": "value",
                "param_3": "value",
                "puVar2": "new_element",
                "uVar1": "realloc_result",
                "uVar3": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109c2e": {
            "additional_data": {
                "FUN_00109c2e": {
                    "expand_and_copy_array": 2,
                    "expand_and_copy_data": 1,
                    "expand_and_initialize_array": 2,
                    "expand_and_populate_array": 1,
                    "expand_and_set_value": 1,
                    "expand_array": 1,
                    "expand_memory": 1,
                    "expand_memory_allocation": 1,
                    "expand_memory_and_copy": 1,
                    "realloc_and_copy_memory": 1,
                    "reallocate_and_update_data": 1,
                    "resize_and_copy": 1,
                    "resize_and_copy_data": 1,
                    "resize_and_init_array": 1,
                    "resize_and_initialize_array": 5,
                    "resize_and_populate_array": 1,
                    "resize_array": 7,
                    "resize_array_and_copy": 1,
                    "resize_array_and_initialize": 1
                },
                "auVar7": {
                    "result": 3,
                    "result_array": 1,
                    "result_data": 1,
                    "result_struct": 1,
                    "ret": 1,
                    "return_object": 1,
                    "return_val": 1,
                    "return_value": 21,
                    "return_value_array": 1
                },
                "bVar6": {
                    "byte_flag": 4,
                    "byte_var": 1,
                    "flag": 3,
                    "flag2": 3,
                    "flag_byte": 1,
                    "flag_is_zero": 1,
                    "increment": 2,
                    "increment_value": 1,
                    "index": 1,
                    "indicator": 1,
                    "initialized": 1,
                    "initialized_flag": 1,
                    "is_zero": 6,
                    "loop_flag": 1,
                    "padding": 1,
                    "temp_flag": 1,
                    "zero": 2
                },
                "lVar1": {
                    "current_value": 2,
                    "index": 1,
                    "length": 1,
                    "new_array": 3,
                    "new_array_ptr": 3,
                    "new_array_size": 1,
                    "new_data_index": 1,
                    "new_element": 1,
                    "new_element_index": 2,
                    "new_length": 1,
                    "new_memory_address": 1,
                    "new_memory_location": 1,
                    "new_pointer": 1,
                    "new_ptr": 2,
                    "new_size": 5,
                    "old_len": 1,
                    "realloc_ptr": 2,
                    "temp1": 1,
                    "temp_index": 1
                },
                "lVar3": {
                    "count": 1,
                    "diff": 1,
                    "index": 1,
                    "loop_count": 2,
                    "loop_counter": 2,
                    "num_zeroes": 1,
                    "remaining": 2,
                    "remaining_elements": 8,
                    "remaining_entries": 1,
                    "remaining_length": 1,
                    "remaining_size": 8,
                    "remaining_space": 2,
                    "temp2": 1
                },
                "param_1": {
                    "array": 18,
                    "array_obj": 1,
                    "array_pointer": 1,
                    "array_ptr": 3,
                    "array_start": 1,
                    "base_address": 1,
                    "data_array": 1,
                    "data_structure": 1,
                    "input_array": 1,
                    "memory": 1,
                    "ptr": 1,
                    "source_address": 1
                },
                "param_2": {
                    "data": 1,
                    "input_data": 1,
                    "new_value": 2,
                    "value": 27
                },
                "param_3": {
                    "array_length": 2,
                    "array_size": 4,
                    "count": 1,
                    "current_size": 2,
                    "desired_size": 2,
                    "index": 3,
                    "length": 1,
                    "new_size": 1,
                    "num_elements": 1,
                    "size": 12,
                    "target_index": 1,
                    "target_length": 1
                },
                "param_4": {
                    "condition": 2,
                    "flag": 29
                },
                "param_5": {
                    "data": 1,
                    "data_pointer": 1,
                    "flag_pointer": 1,
                    "flag_ptr": 1,
                    "out_array": 1,
                    "output": 8,
                    "output_data": 1,
                    "ptr": 1,
                    "ptr_array": 1,
                    "ptr_flag": 1,
                    "ptr_to_value": 1,
                    "ptr_value": 1,
                    "result": 10,
                    "result_array": 1,
                    "status": 1
                },
                "param_6": {
                    "additional_data": 1,
                    "additional_param": 1,
                    "argument": 1,
                    "auxiliary": 1,
                    "data": 7,
                    "extra_data": 2,
                    "new_value": 1,
                    "param6": 5,
                    "parameter": 1,
                    "parameter6": 1,
                    "result": 6,
                    "return_address": 1,
                    "return_value": 1,
                    "some_value": 1,
                    "something_else": 1
                },
                "plVar2": {
                    "array_element": 2,
                    "array_entry": 1,
                    "array_pointer": 1,
                    "array_ptr": 2,
                    "current_element": 3,
                    "current_entry": 1,
                    "element": 1,
                    "element_pointer": 1,
                    "element_ptr": 7,
                    "entry_pointer": 1,
                    "new_element": 4,
                    "ptr": 1,
                    "ptr_element": 1,
                    "ptr_to_value_array": 1,
                    "target_address": 1,
                    "target_data_ptr": 1,
                    "target_location": 1,
                    "target_pointer": 1
                },
                "puVar4": {
                    "array_end": 1,
                    "array_end_ptr": 1,
                    "curr_element": 1,
                    "current_address": 1,
                    "current_byte": 2,
                    "current_data_ptr": 1,
                    "current_element": 7,
                    "current_entry": 1,
                    "current_location": 1,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "element": 1,
                    "fill_ptr": 1,
                    "next_element": 1,
                    "next_ptr": 1,
                    "offset_pointer": 1,
                    "pointer": 1,
                    "ptr": 4,
                    "ptr_dest": 1,
                    "ptr_to_memory": 1
                },
                "uVar5": {
                    "array_len": 1,
                    "array_length": 1,
                    "array_size": 4,
                    "current_array_size": 1,
                    "current_length": 3,
                    "current_size": 16,
                    "data_size": 1,
                    "existing_size": 1,
                    "new_size": 1,
                    "old_size": 1,
                    "ptr_size": 1
                }
            },
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "code": "\nundefined  [16]\nresize_array_and_initialize_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long new_size;\n  long *element_ptr;\n  long remaining_size;\n  undefined *current_element;\n  ulong current_size;\n  byte is_zero;\n  undefined return_value [16];\n  \n  is_zero = 0;\n  size = size & 0xffffffff;\n  current_size = *(ulong *)(array + 0x1b0);\n  if (current_size <= size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= size; current_size = current_size * 2) {\n    }\n    new_size = xrealloc(*(undefined8 *)(array + 0x1a8),current_size * 0x18);\n    *(long *)(array + 0x1a8) = new_size;\n    current_element = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + new_size);\n    for (remaining_size = (current_size - *(long *)(array + 0x1b0)) * 0x18; remaining_size != 0; remaining_size = remaining_size + -1) {\n      *current_element = 0;\n      current_element = current_element + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = current_size;\n  }\n  element_ptr = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*element_ptr == 0) {\n    new_size = *(long *)(array + 0x68);\n    *element_ptr = new_size;\n    *(long *)(array + 0x68) = new_size + 1;\n    element_ptr[1] = value;\n    *(int *)(element_ptr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element_ptr + 2) = 0;\n    *(undefined4 *)((long)element_ptr + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)element_ptr + 0x14);\n  }\n  return_value._8_8_ = data;\n  return_value._0_8_ = *element_ptr;\n  return return_value;\n}\n\n",
            "current_name": "resize_array_and_initialize_00109c2e",
            "entrypoint": "0x00109c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109c2e": "resize_array_and_initialize_00109c2e",
                "auVar7": "return_value",
                "bVar6": "is_zero",
                "lVar1": "new_size",
                "lVar3": "remaining_size",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "plVar2": "element_ptr",
                "puVar4": "current_element",
                "uVar5": "current_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109cf4": {
            "additional_data": {
                "FUN_00109cf4": {
                    "initialize_and_store_data": 1,
                    "initialize_data_structure": 30
                },
                "local_3c": {
                    "converted_value": 3,
                    "count_as_string": 1,
                    "formatted_parameter2": 1,
                    "formatted_value": 2,
                    "input_string": 3,
                    "num_string": 1,
                    "string_value": 8,
                    "value_str": 2,
                    "value_string": 10
                },
                "param_1": {
                    "data": 1,
                    "data_struct": 1,
                    "data_structure": 22,
                    "data_structure_ptr": 4,
                    "param1": 1,
                    "param_1": 1,
                    "source_address": 1
                },
                "param_2": {
                    "count": 1,
                    "input_value": 4,
                    "num_value": 1,
                    "param2": 1,
                    "parameter2": 1,
                    "value": 23
                },
                "param_3": {
                    "error_code": 1,
                    "flag": 18,
                    "flags": 1,
                    "index": 1,
                    "length": 1,
                    "param3": 1,
                    "param_3": 1,
                    "parameter": 2,
                    "parameter3": 1,
                    "size": 3,
                    "status": 1
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_0010b800",
                "FUN_00109d3e",
                "FUN_0010bba1",
                "FUN_00109ed3",
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_00109d5c",
                "FUN_0010e453"
            ],
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 data_structure,undefined8 value,undefined4 flag)\n\n{\n  char value_string [28];\n  \n  sprintf(value_string,\"%ld\",value);\n  create_and_initialize_data_structure_00109cf4_00109b52(data_structure,value_string,value,0,flag);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00109cf4",
            "entrypoint": "0x00109cf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "local_3c": "value_string",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d3e": {
            "additional_data": {
                "FUN_00109d3e": {
                    "initialize_data": 3,
                    "initialize_data_structure": 28
                },
                "param_1": {
                    "data_structure": 12,
                    "data_structure_param": 2,
                    "data_structure_ptr": 3,
                    "input_data": 1,
                    "param": 5,
                    "param1": 2,
                    "param_1": 4,
                    "param_address": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "array_length": 1,
                    "element_count": 1,
                    "index": 1,
                    "length": 1,
                    "num_elements": 3,
                    "param2": 1,
                    "size": 22,
                    "size_of_data_structure": 1
                },
                "uVar1": {
                    "data": 1,
                    "data_structure": 1,
                    "data_value": 2,
                    "default_value": 8,
                    "initial_value": 6,
                    "initialized_value": 4,
                    "value": 4
                }
            },
            "called": [
                "FUN_00109cf4"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_data_structure_00109d3e(undefined8 data_structure,int size)\n\n{\n  undefined8 default_value;\n  \n  default_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    default_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  initialize_data_structure_00109d3e_00109cf4(data_structure,default_value,size);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_00109d3e",
            "entrypoint": "0x00109d3e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d3e": "initialize_data_structure_00109d3e",
                "param_1": "data_structure",
                "param_2": "size",
                "uVar1": "default_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d5c": {
            "additional_data": {
                "FUN_00109d5c": {
                    "initialize_and_resize": 2,
                    "initialize_and_resize_array": 15,
                    "initialize_and_resize_data": 1,
                    "initialize_and_resize_data_structure": 4,
                    "initialize_array": 1,
                    "initialize_array_and_data_structure": 1,
                    "initialize_array_and_structure": 1,
                    "initialize_data_structure": 3,
                    "resize_and_init_array": 1,
                    "resize_and_initialize_array": 2
                },
                "lVar1": {
                    "array_length": 1,
                    "array_size": 17,
                    "new_array_size": 1,
                    "resize_result": 1,
                    "resized_array": 2,
                    "resized_array_length": 5,
                    "resized_array_size": 1,
                    "resized_length": 2,
                    "resized_size": 1
                },
                "param_1": {
                    "data": 3,
                    "initial_value": 2,
                    "input": 2,
                    "input_data": 9,
                    "input_param": 8,
                    "input_parameter": 4,
                    "input_value": 2,
                    "param": 1
                },
                "uVar2": {
                    "init_result": 1,
                    "initialization_result": 1,
                    "initialized_data": 1,
                    "initialized_data_structure": 2,
                    "initialized_structure": 8,
                    "result": 18
                }
            },
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 resize_and_initialize_array_00109d5c(undefined8 input_data)\n\n{\n  long array_size;\n  undefined8 result;\n  \n  array_size = resize_array_and_initialize_00109c2e();\n  if (-1 < array_size) {\n    result = initialize_data_structure_00109cf4(input_data,array_size,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "resize_and_initialize_array_00109d5c",
            "entrypoint": "0x00109d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d5c": "resize_and_initialize_array_00109d5c",
                "lVar1": "array_size",
                "param_1": "input_data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109d97": {
            "additional_data": {
                "FUN_00109d97": {
                    "initialize_data_structure": 1,
                    "initialize_or_create_data_structure": 12,
                    "initialize_or_increment": 1,
                    "initialize_or_increment_data_structure": 9,
                    "process_data": 7
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize_data_structure": 1
                },
                "initialize_data_structure_00109cf4": {
                    "initialize_data_structure": 1
                },
                "lVar1": {
                    "counter": 22,
                    "current_count": 1,
                    "current_value": 2,
                    "index": 1
                },
                "local_40": {
                    "format_string": 2,
                    "formatted_output": 1,
                    "formatted_str": 1,
                    "formatted_string": 23,
                    "message": 1,
                    "output_string": 2
                },
                "param_1": {
                    "base_address": 1,
                    "data": 5,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_structure": 7,
                    "data_structure_param": 1,
                    "data_structure_pointer": 3,
                    "data_structure_ptr": 6,
                    "input": 1,
                    "input_data": 2,
                    "param": 2
                }
            },
            "called": [
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "code": "\nvoid initialize_or_create_data_structure_00109d97(long data_structure)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data_structure + 0x70) != 0) {\n    initialize_data_structure(data_structure,*(long *)(data_structure + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = counter + 1;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  create_and_initialize_data_structure(data_structure,formatted_string,counter,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_or_create_data_structure_00109d97",
            "entrypoint": "0x00109d97",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109d97": "initialize_or_create_data_structure_00109d97",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize_data_structure",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109dfe": {
            "additional_data": {
                "FUN_00109dfe": {
                    "initialize_or_create_data_structure": 11,
                    "initialize_or_increment": 1,
                    "initialize_or_increment_data_structure": 15,
                    "initialize_or_increment_structure": 2,
                    "initialize_or_update_data_structure": 1,
                    "process_data": 1
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize_data_structure": 1
                },
                "initialize_data_structure_00109cf4": {
                    "initialize_data_structure": 1
                },
                "lVar1": {
                    "count": 1,
                    "counter": 12,
                    "current_value": 2,
                    "incremented_value": 1,
                    "index": 2,
                    "next_index": 1,
                    "old_value": 1,
                    "previous_value": 1,
                    "temp_value": 1,
                    "temp_variable": 1,
                    "variable": 1
                },
                "local_40": {
                    "buffer": 1,
                    "formatted_data": 1,
                    "formatted_string": 24,
                    "message_buffer": 1,
                    "output_string": 2,
                    "string_buffer": 1
                },
                "param_1": {
                    "data": 2,
                    "data_object": 1,
                    "data_structure": 15,
                    "data_structure_pointer": 4,
                    "data_structure_ptr": 3,
                    "function_param": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 2,
                    "structure_pointer": 1
                }
            },
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_or_increment_data_structure_00109dfe(long data_structure)\n\n{\n  long counter;\n  char formatted_string [40];\n  \n  if (*(long *)(data_structure + 0x70) != 0) {\n    initialize_data_structure(data_structure,*(long *)(data_structure + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = counter + 1;\n  *(long *)(data_structure + 0x70) = counter;\n  sprintf(formatted_string,\"%ld=%ld\",counter,counter);\n  create_and_initialize_data_structure(data_structure,formatted_string,counter,1,0);\n  return;\n}\n\n",
            "current_name": "initialize_or_increment_data_structure_00109dfe",
            "entrypoint": "0x00109dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_data_structure_00109dfe",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize_data_structure",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar1": "counter",
                "local_40": "formatted_string",
                "param_1": "data_structure"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109e76": {
            "additional_data": {
                "FUN_00109e76": {
                    "increment_and_create_data_structure": 2,
                    "increment_and_initialize_data_structure": 1,
                    "increment_counter_and_create_data": 1,
                    "print_and_update_data": 1,
                    "update_and_create_data_structure": 1,
                    "update_and_initialize_data_structure": 3,
                    "update_data_and_create_structure": 6,
                    "update_data_and_structure": 2,
                    "update_data_structure": 13,
                    "update_structure": 1
                },
                "lVar1": {
                    "count": 1,
                    "counter": 7,
                    "counter_value": 1,
                    "current_index": 1,
                    "current_value": 17,
                    "data_counter": 1,
                    "original_value": 1
                },
                "local_5a": {
                    "buffer": 1,
                    "format_string": 2,
                    "formatted_string": 21,
                    "message": 2,
                    "output_string": 3,
                    "string_buffer": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 2,
                    "counter": 1,
                    "data": 2,
                    "data_pointer": 7,
                    "data_ptr": 2,
                    "data_struct_ptr": 1,
                    "data_structure": 9,
                    "data_structure_pointer": 1,
                    "data_structure_ptr": 4,
                    "input_ptr": 1
                },
                "param_2": {
                    "count": 1,
                    "value": 30
                }
            },
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid update_and_create_data_structure_00109e76(long data_structure,uint value)\n\n{\n  long current_value;\n  char formatted_string [58];\n  \n  current_value = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=r%ld;%u;0;\",current_value,current_value,(ulong)value);\n  create_and_initialize_data_structure_00109b52(data_structure,formatted_string,current_value,1,value * 2);\n  return;\n}\n\n",
            "current_name": "update_and_create_data_structure_00109e76",
            "entrypoint": "0x00109e76",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109e76": "update_and_create_data_structure_00109e76",
                "lVar1": "current_value",
                "local_5a": "formatted_string",
                "param_1": "data_structure",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00109ed3": {
            "additional_data": {
                "FUN_00109ed3": {
                    "extract_and_initialize": 1,
                    "extract_and_initialize_data": 1,
                    "process_data": 24,
                    "reverse_and_initialize": 1
                },
                "__ptr": {
                    "allocated_data": 1,
                    "allocated_memory": 2,
                    "allocated_ptr": 1,
                    "data_ptr": 1,
                    "extracted_data": 3,
                    "extracted_ptr": 14,
                    "extracted_ptr2": 1,
                    "ptr": 3,
                    "ptr_data": 1,
                    "ptr_memory": 1,
                    "ptr_to_free": 1,
                    "temp_ptr": 2
                },
                "__s": {
                    "formatted_data": 2,
                    "formatted_str": 5,
                    "formatted_string": 12,
                    "modified_string": 1,
                    "new_str": 4,
                    "new_str_ptr": 1,
                    "new_string": 4,
                    "processed_data": 1,
                    "processed_string": 1
                },
                "bVar12": {
                    "boolean": 1,
                    "byte_flag": 4,
                    "byte_value": 4,
                    "byte_var": 4,
                    "default_val": 1,
                    "flag": 2,
                    "flag_tmp": 1,
                    "increment": 1,
                    "initialized": 1,
                    "is_negative": 1,
                    "is_zero": 1,
                    "loop_flag": 1,
                    "null_byte": 1,
                    "temp_var4": 1,
                    "zero_byte": 1,
                    "zero_fill": 1,
                    "zero_flag": 4
                },
                "cVar3": {
                    "check": 1,
                    "create_result": 1,
                    "flag": 2,
                    "is_successful": 1,
                    "output_flag": 1,
                    "result": 23,
                    "result_flag": 1,
                    "success": 1
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize_data_structure": 1
                },
                "extract_and_free_ptr_00109b2f": {
                    "extract_and_free_ptr": 1
                },
                "initialize_data_structure_00109cf4": {
                    "initialize_data_structure": 1
                },
                "lVar6": {
                    "count": 4,
                    "counter": 14,
                    "index": 1,
                    "offset": 1,
                    "temp": 3,
                    "temp_value": 2,
                    "temp_var": 4,
                    "temp_var1": 1,
                    "value": 1
                },
                "lVar9": {
                    "bytes_to_allocate": 1,
                    "count": 1,
                    "index": 1,
                    "iter": 1,
                    "loop_count": 4,
                    "loop_counter": 13,
                    "loop_var": 3,
                    "remaining_bytes": 1,
                    "remaining_size": 2,
                    "size_difference": 1,
                    "temp_counter": 2,
                    "temp_var2": 1
                },
                "param_1": {
                    "data_ptr": 3,
                    "file_handle": 1,
                    "input": 11,
                    "input1": 1,
                    "input_addr": 1,
                    "input_data": 3,
                    "input_param": 6,
                    "input_parameter": 1,
                    "input_ptr": 3,
                    "ptr": 1
                },
                "param_2": {
                    "char_code": 1,
                    "char_param": 2,
                    "character": 4,
                    "code": 2,
                    "data_type": 1,
                    "flag": 15,
                    "input_value": 1,
                    "option": 1,
                    "param_flag": 1,
                    "value": 3
                },
                "param_3": {
                    "code": 2,
                    "config": 2,
                    "count": 1,
                    "flag": 10,
                    "flag_param": 2,
                    "input_size": 1,
                    "option": 1,
                    "param": 2,
                    "param_size": 1,
                    "size": 4,
                    "status": 3,
                    "value": 2
                },
                "param_4": {
                    "array1": 1,
                    "array_ptr": 1,
                    "buffer": 1,
                    "data": 4,
                    "data_arr_ptr": 1,
                    "data_array": 7,
                    "data_buffer": 2,
                    "data_container": 1,
                    "data_ptr": 1,
                    "long_array": 1,
                    "output_arr": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_data": 2,
                    "output_data_ptr": 1,
                    "output_list": 1,
                    "output_ptr": 3,
                    "reverse_array": 1
                },
                "param_5": {
                    "array2": 1,
                    "array_length": 2,
                    "array_size": 4,
                    "buffer_size": 4,
                    "count_ptr": 1,
                    "data_length": 1,
                    "data_size": 2,
                    "data_size_array": 1,
                    "output_array_size": 1,
                    "output_data_size": 1,
                    "output_data_size_ptr": 1,
                    "output_size": 5,
                    "output_size_ptr": 1,
                    "size": 3,
                    "size_ptr": 2,
                    "ulong_array": 1
                },
                "pcVar4": {
                    "char_ptr": 1,
                    "data_string": 1,
                    "extracted_data": 2,
                    "extracted_ptr": 1,
                    "extracted_string": 6,
                    "input_str": 1,
                    "input_string": 1,
                    "str": 2,
                    "str_ptr": 2,
                    "string": 4,
                    "string_ptr": 4,
                    "temp_ptr": 1,
                    "temp_str": 4,
                    "temp_string": 1
                },
                "puVar11": {
                    "byte_ptr": 7,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "fill_ptr": 1,
                    "memset_ptr": 1,
                    "p": 1,
                    "pointer": 2,
                    "ptr": 6,
                    "ptr1": 1,
                    "ptr_array": 1,
                    "ptr_iter": 1,
                    "ptr_iterator": 2,
                    "ptr_to_buffer": 1,
                    "ptr_to_output_data": 1,
                    "ptr_to_set": 1,
                    "temp_ptr": 1
                },
                "sVar5": {
                    "extracted_data_length": 2,
                    "extracted_string_length": 1,
                    "input_str_length": 1,
                    "length": 4,
                    "size": 1,
                    "str_len": 2,
                    "str_length": 5,
                    "string_len": 1,
                    "string_length": 14
                },
                "uVar1": {
                    "array_length": 1,
                    "array_size": 1,
                    "count": 2,
                    "current_data_size": 1,
                    "data_address": 1,
                    "data_count": 3,
                    "data_index": 1,
                    "data_length": 1,
                    "data_size": 4,
                    "dynamic_size": 1,
                    "dynamic_value": 1,
                    "element_count": 1,
                    "element_size": 1,
                    "existing_size": 1,
                    "input_size": 1,
                    "length1": 1,
                    "list_size": 1,
                    "num_elements": 2,
                    "previous_size": 1,
                    "ptr1": 1,
                    "ptr_offset": 1,
                    "size": 1,
                    "temp_size": 1,
                    "value_count": 1
                },
                "uVar10": {
                    "allocated_size": 2,
                    "array_size": 1,
                    "current_array_size": 1,
                    "current_length": 1,
                    "current_output_size": 1,
                    "current_size": 8,
                    "desired_length": 1,
                    "dynamic_size": 1,
                    "input_length": 1,
                    "new_array_size": 1,
                    "new_buffer_size": 1,
                    "new_count": 1,
                    "new_data_length": 1,
                    "new_output_size": 1,
                    "new_size": 4,
                    "prev_buffer_size": 1,
                    "requested_size": 1,
                    "target_size": 1,
                    "temp_value": 1,
                    "temp_var3": 1
                },
                "uVar2": {
                    "allocated_size": 3,
                    "data_size_temp": 1,
                    "length2": 1,
                    "new_array_length": 1,
                    "new_array_size": 1,
                    "new_buffer_size": 1,
                    "new_data_address": 1,
                    "new_data_count": 2,
                    "new_data_length": 1,
                    "new_data_size": 1,
                    "new_output_size": 1,
                    "new_size": 6,
                    "next_array_size": 1,
                    "ptr2": 1,
                    "temp": 5,
                    "temp_size": 3,
                    "temp_size2": 1
                },
                "uVar7": {
                    "init_result": 4,
                    "initialization_result": 1,
                    "initialize_result": 1,
                    "output": 1,
                    "output_flag": 1,
                    "result": 6,
                    "return_value": 15,
                    "status": 2
                },
                "uVar8": {
                    "condition_flag": 1,
                    "flag": 1,
                    "flag2": 4,
                    "flag_val": 1,
                    "flag_value": 5,
                    "indicator": 1,
                    "init_flag": 2,
                    "init_status": 1,
                    "initialization_flag": 1,
                    "initialize_flag": 5,
                    "initialized": 2,
                    "is_allocated": 1,
                    "is_initialized": 2,
                    "is_new_value": 1,
                    "is_zero": 1,
                    "use_flag": 2
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "xmalloc",
                "xrealloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010a083",
                "FUN_0010a0d3"
            ],
            "code": "\nundefined8 process_data_00109ed3(long input,uint flag,undefined4 flag,long *data_array,ulong *output_size)\n\n{\n  ulong data_size;\n  ulong new_size;\n  char result;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  long counter;\n  void *extracted_ptr;\n  undefined8 return_value;\n  undefined initialize_flag;\n  long loop_counter;\n  ulong current_size;\n  undefined *byte_ptr;\n  byte byte_value;\n  \n  byte_value = 0;\n  counter = *(long *)(input + 0x60);\n  if (counter != 0) {\n    data_size = *(ulong *)(counter + 0x10);\n    if (((long)data_size < 1) || (data_array == (long *)0x0)) {\n      initialize_flag = *(undefined *)(counter + 0x1c);\n      extracted_string = (char *)extract_and_free_ptr(input);\n      string_length = strlen(extracted_string);\n      formatted_string = (char *)xmalloc(string_length + 2);\n      sprintf(formatted_string,\"%c%s\",(ulong)flag,extracted_string);\n      free(extracted_string);\n      counter = 0;\n    }\n    else {\n      current_size = *output_size;\n      if (current_size <= data_size) {\n        if (current_size == 0) {\n          current_size = 10;\n        }\n        for (; current_size <= data_size; current_size = current_size * 2) {\n        }\n        counter = xrealloc(*data_array,current_size * 8);\n        new_size = *output_size;\n        *data_array = counter;\n        byte_ptr = (undefined *)(counter + new_size * 8);\n        for (loop_counter = (current_size - new_size) * 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *byte_ptr = 0;\n          byte_ptr = byte_ptr + (ulong)byte_value * -2 + 1;\n        }\n        *output_size = current_size;\n      }\n      counter = *(long *)(*data_array + data_size * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        extracted_ptr = (void *)extract_and_free_ptr(input);\n        free(extracted_ptr);\n        return_value = initialize_data_structure(input,counter,flag);\n        return return_value;\n      }\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      extracted_string = (char *)extract_and_free_ptr(input);\n      string_length = strlen(extracted_string);\n      formatted_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(formatted_string,\"%ld=%c%s\",counter,(ulong)flag,extracted_string);\n      free(extracted_string);\n      initialize_flag = 1;\n      *(long *)(*data_array + data_size * 8) = counter;\n    }\n    result = create_and_initialize_data_structure(input,formatted_string,counter,initialize_flag,flag);\n    if (result != '\\0') {\n      free(formatted_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00109ed3",
            "entrypoint": "0x00109ed3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "__ptr": "extracted_ptr",
                "__s": "formatted_string",
                "bVar12": "byte_value",
                "cVar3": "result",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize_data_structure",
                "extract_and_free_ptr_00109b2f": "extract_and_free_ptr",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar6": "counter",
                "lVar9": "loop_counter",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "flag",
                "param_4": "data_array",
                "param_5": "output_size",
                "pcVar4": "extracted_string",
                "puVar11": "byte_ptr",
                "sVar5": "string_length",
                "uVar1": "data_size",
                "uVar10": "current_size",
                "uVar2": "new_size",
                "uVar7": "return_value",
                "uVar8": "initialize_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a083": {
            "additional_data": {
                "0x178": {
                    "data_offset_1": 1,
                    "offset_1": 5,
                    "offset_address_1": 1
                },
                "0x180": {
                    "data_offset_2": 1,
                    "offset_2": 5,
                    "offset_address_2": 1
                },
                "0x2a": {
                    "chunk_size": 1,
                    "constant": 4,
                    "constant_1": 1,
                    "constant_parameter": 1,
                    "constant_value": 6,
                    "processing_constant": 1,
                    "start_value": 1
                },
                "4": {
                    "array_length": 1,
                    "data_size": 1,
                    "length": 2,
                    "length_parameter": 1,
                    "size": 4,
                    "step": 1
                },
                "DAT_": {
                    "": 1
                },
                "DAT_0010a25b": {
                    "offset_1": 1
                },
                "DAT_0010a263": {
                    "offset_2": 1
                },
                "FUN_0010a083": {
                    "process_and_store_data": 3,
                    "process_and_update_data": 4,
                    "process_data": 23,
                    "process_data_wrapper": 1
                },
                "PTR_": {
                    "": 1
                },
                "PTR_FUN_00109ed3": {
                    "process_data_func": 1
                },
                "PTR_FUN_00109ed3_param_1": {
                    "data_param": 1
                },
                "data_processing": {
                    "": 1
                },
                "input_param": {
                    "": 1
                },
                "local_var_1": {
                    "offset": 1,
                    "result_address": 1
                },
                "local_var_2": {
                    "address": 1,
                    "data_address": 1
                },
                "param_1": {
                    "data": 9,
                    "data_address": 4,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input": 4,
                    "input_data": 5,
                    "input_param": 2,
                    "input_parameter": 2,
                    "length": 1
                },
                "param_2": {
                    "constant": 3,
                    "constant1": 1,
                    "constant_1": 1,
                    "value": 1
                },
                "param_3": {
                    "constant2": 1,
                    "constant_2": 1,
                    "length": 1,
                    "size": 2
                },
                "param_4": {
                    "offset_1": 1,
                    "variable1": 1
                },
                "param_5": {
                    "offset_2": 1,
                    "variable2": 1
                },
                "process_data_00109ed3": {
                    "data_processing": 1,
                    "process_data": 6,
                    "process_data_chunk": 1,
                    "process_data_helper": 6
                },
                "var_1": {
                    "address_offset": 1,
                    "offset": 1
                },
                "var_2": {
                    "data_offset": 1,
                    "length": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_and_update_data_0010a083(long data)\n\n{\n  process_data(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "current_name": "process_and_update_data_0010a083",
            "entrypoint": "0x0010a083",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a083": "process_and_update_data_0010a083",
                "param_1": "data",
                "process_data_00109ed3": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0a0": {
            "additional_data": {
                "0x198": {
                    "address_offset_1": 1,
                    "data_offset_1": 1,
                    "offset1": 2,
                    "offset_1": 5,
                    "output1": 1,
                    "output_data_start": 1,
                    "output_offset": 1,
                    "output_ptr_1": 1
                },
                "0x1a0": {
                    "address_offset_2": 1,
                    "data_offset_2": 1,
                    "offset2": 2,
                    "offset_2": 5,
                    "output2": 1,
                    "output_data_end": 1,
                    "output_length": 1,
                    "output_ptr_2": 1
                },
                "0x26": {
                    "constant": 3,
                    "constant_1": 2,
                    "constant_size": 1,
                    "constant_value": 1,
                    "data_length": 1,
                    "data_offset": 3,
                    "length": 1,
                    "offset": 2,
                    "size": 1,
                    "value1": 1
                },
                "4": {
                    "constant_1": 1,
                    "constant_2": 2,
                    "constant_value": 1,
                    "data_length": 3,
                    "increment": 1,
                    "size": 2,
                    "step": 1,
                    "value2": 1
                },
                "DAT_00109ed3": {
                    "buffer_data": 1
                },
                "FUN_0010a0a0": {
                    "process_and_store_data": 1,
                    "process_and_update_data": 8,
                    "process_data": 21,
                    "process_data_wrapper": 1
                },
                "PTR_00109ed3": {
                    "buffer": 1
                },
                "buffer": {
                    "data_buffer": 1
                },
                "param_1": {
                    "data": 12,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "input": 1,
                    "input_data": 10,
                    "start_index": 1
                },
                "param_2": {
                    "constant": 1,
                    "constant1": 1,
                    "value": 2
                },
                "param_3": {
                    "constant2": 1,
                    "count": 1,
                    "length": 1
                },
                "param_4": {
                    "address_1": 1,
                    "array_offset1": 1,
                    "output_data1": 1
                },
                "param_5": {
                    "address_2": 1,
                    "array_offset2": 1,
                    "output_data2": 1
                },
                "process_data_00109ed3": {
                    "": 1,
                    "process_data": 6,
                    "process_data_helper": 2,
                    "process_subroutine": 1
                },
                "var_1": {
                    "address_1": 1
                },
                "var_2": {
                    "address_2": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_and_update_data_0010a0a0(long data)\n\n{\n  process_data(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "current_name": "process_and_update_data_0010a0a0",
            "entrypoint": "0x0010a0a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0a0": "process_and_update_data_0010a0a0",
                "param_1": "data",
                "process_data_00109ed3": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0bd": {
            "additional_data": {
                "0": {
                    "constant": 1,
                    "zero": 1
                },
                "0x6b": {
                    "constant": 7,
                    "constant_1": 2,
                    "constant_value": 2
                },
                "FUN_0010a0bd": {
                    "process_data": 31
                },
                "param_1": {
                    "data": 27,
                    "data_pointer": 1,
                    "input": 1,
                    "input_data": 2
                },
                "process_data_00109ed3": {
                    "process_data": 2,
                    "process_data_func": 1,
                    "process_data_function": 1,
                    "process_data_helper": 9,
                    "process_data_internal": 3
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_0010a0bd(long data)\n\n{\n  process_data_0010a0bd_helper(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "process_data_0010a0bd",
            "entrypoint": "0x0010a0bd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0d3": {
            "additional_data": {
                "0": {
                    "additional_param2": 1,
                    "zero": 1
                },
                "0x18": {
                    "offset2": 1
                },
                "0x42": {
                    "constant": 5,
                    "constant_value": 3,
                    "data_length": 1
                },
                "0x60": {
                    "offset": 1
                },
                "FUN_0010a0d3": {
                    "process_and_return_data": 1,
                    "process_and_send_data": 2,
                    "process_data": 27,
                    "process_data_wrapper": 1
                },
                "PTR_00100018": {
                    "data_ptr": 1
                },
                "long": {
                    "long_value": 1
                },
                "param_1": {
                    "data": 22,
                    "data_ptr": 1,
                    "input": 3,
                    "input_data": 4,
                    "input_param": 1
                },
                "process_data_00109ed3": {
                    "process_data": 4,
                    "process_data_function": 2,
                    "process_data_helper": 7,
                    "process_data_internal": 3
                },
                "return": {
                    "": 1
                },
                "undefined4": {
                    "unknown_type": 1
                },
                "void": {
                    "": 1
                }
            },
            "called": [
                "FUN_00109ed3"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_and_send_data_0010a0d3(long_value data)\n\n{\n  process_data_helper(data,0x42,*(unknown_type *)(*(long_value *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "current_name": "process_and_send_data_0010a0d3",
            "entrypoint": "0x0010a0d3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0d3": "process_and_send_data_0010a0d3",
                "long": "long_value",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper",
                "undefined4": "unknown_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a0e9": {
            "additional_data": {
                "FUN_0010a0e9": {
                    "build_data_structure": 1,
                    "construct_data": 1,
                    "create_and_initialize_data": 1,
                    "create_and_initialize_data_structure": 1,
                    "create_data_structure": 2,
                    "create_record": 1,
                    "create_request": 1,
                    "extract_data_and_initialize": 1,
                    "generate_data_packet": 1,
                    "generate_data_record": 1,
                    "generate_data_structure": 3,
                    "generate_request": 1,
                    "generate_request_string": 1,
                    "process_data": 5,
                    "process_data_and_create_structure": 1,
                    "process_request": 7,
                    "send_data": 2
                },
                "__s": {
                    "extracted_data": 2,
                    "extracted_string": 26,
                    "source_string": 2,
                    "string": 1
                },
                "__s_00": {
                    "allocated_string": 7,
                    "constructed_string": 1,
                    "data_packet": 1,
                    "dynamic_string": 2,
                    "formatted_string": 8,
                    "modified_data": 1,
                    "modified_string": 7,
                    "new_string": 1,
                    "processed_string": 3
                },
                "param_1": {
                    "data": 1,
                    "data_in": 1,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "data_struct_ptr": 1,
                    "data_structure": 2,
                    "data_structure_address": 1,
                    "data_structure_ptr": 3,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "memory_address": 1,
                    "ptr": 1,
                    "record_index": 1,
                    "record_ptr": 1,
                    "request": 2,
                    "request_address": 2,
                    "request_pointer": 3,
                    "request_struct": 1,
                    "source_param": 1,
                    "stream": 1
                },
                "param_2": {
                    "input_value1": 1,
                    "param2": 7,
                    "param2_value": 1,
                    "param_2": 3,
                    "param_value1": 1,
                    "parameter1": 1,
                    "val1": 1,
                    "value1": 12,
                    "value_1": 4
                },
                "param_3": {
                    "input_value2": 1,
                    "param3": 7,
                    "param3_value": 1,
                    "param_3": 3,
                    "param_value2": 1,
                    "parameter2": 1,
                    "val2": 1,
                    "value2": 12,
                    "value_2": 4
                },
                "sVar3": {
                    "data_length": 2,
                    "extracted_string_len": 1,
                    "extracted_string_length": 4,
                    "source_string_length": 1,
                    "str_length": 1,
                    "string_length": 22
                },
                "uVar1": {
                    "data": 2,
                    "data_byte": 1,
                    "data_type": 2,
                    "data_value": 1,
                    "extracted_byte": 1,
                    "extracted_value": 3,
                    "first_byte": 1,
                    "first_char": 1,
                    "first_value": 1,
                    "pointer_value": 1,
                    "ptr_value": 5,
                    "record_value": 1
                },
                "uVar2": {
                    "result": 11,
                    "return_value": 8,
                    "status": 1
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "FUN_00109b52",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_and_create_structure_0010a0e9(long data_ptr,undefined8 value1,undefined8 value2)\n\n{\n  undefined ptr_value;\n  undefined4 result;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  \n  ptr_value = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(data_ptr + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 100);\n  sprintf(formatted_string,\"r%s;%ld;%ld;\",extracted_string,value1,value2);\n  free(extracted_string);\n  result = create_and_initialize_data_structure_00109b52(data_ptr,formatted_string,0,ptr_value,result);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_and_create_structure_0010a0e9",
            "entrypoint": "0x0010a0e9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a0e9": "process_data_and_create_structure_0010a0e9",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "sVar3": "string_length",
                "uVar1": "ptr_value",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a181": {
            "additional_data": {
                "FUN_0010a181": {
                    "create_and_initialize_data_structure": 1,
                    "create_data_structure": 1,
                    "extract_and_initialize_data": 1,
                    "extract_and_process_data": 1,
                    "extract_data_and_create_structure": 1,
                    "generate_data_and_create_structure": 1,
                    "generate_data_string": 2,
                    "generate_data_structure": 6,
                    "parse_and_create_data_structure": 1,
                    "process_and_create_data_structure": 1,
                    "process_data": 13,
                    "reverse_and_initialize_data_structure": 1
                },
                "__s": {
                    "extracted_string": 2,
                    "extracted_string1": 2,
                    "str1": 7,
                    "string1": 11,
                    "string_1": 6,
                    "string_a": 1,
                    "string_ptr1": 1,
                    "string_value": 1
                },
                "__s_00": {
                    "another_string_value": 1,
                    "extracted_string2": 3,
                    "secondary_string": 1,
                    "str2": 7,
                    "string2": 11,
                    "string_2": 6,
                    "string_b": 1,
                    "string_ptr2": 1
                },
                "__s_01": {
                    "combined_str": 1,
                    "combined_string": 4,
                    "combined_string_ptr": 1,
                    "combined_strings": 1,
                    "final_string": 2,
                    "formatted_string": 1,
                    "new_string": 2,
                    "processed_string": 1,
                    "result": 1,
                    "result_str": 5,
                    "result_string": 12
                },
                "cVar1": {
                    "char1": 4,
                    "char_flag": 5,
                    "char_val": 2,
                    "char_value": 8,
                    "char_var": 4,
                    "character": 3,
                    "character_flag": 2,
                    "first_char": 1,
                    "flag_value": 1
                },
                "iVar2": {
                    "constant_var": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "data_structure_value1": 1,
                    "data_value": 1,
                    "data_var": 1,
                    "factor": 1,
                    "int1": 2,
                    "int_val": 2,
                    "int_value": 2,
                    "int_value1": 2,
                    "int_value_1": 1,
                    "int_var": 1,
                    "int_var1": 4,
                    "int_var_1": 2,
                    "length": 3,
                    "length_modifier": 1,
                    "ptr1": 1,
                    "value1": 3
                },
                "iVar3": {
                    "calculation_result": 1,
                    "int2": 1,
                    "int_value2": 2,
                    "int_value_2": 1,
                    "int_var2": 3,
                    "int_var_2": 2,
                    "result": 18,
                    "result_length": 1,
                    "value2": 2
                },
                "lVar7": {
                    "count": 7,
                    "counter": 18,
                    "counter_value": 1,
                    "long_value": 1,
                    "loop_count": 1,
                    "temp_value": 1,
                    "var7": 1
                },
                "local_41": {
                    "byte_flag": 1,
                    "combined_flag": 1,
                    "default_flag": 2,
                    "final_flag": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "local_flag": 17,
                    "new_flag": 1,
                    "temp_flag": 4,
                    "update_flag": 1
                },
                "param_1": {
                    "data": 6,
                    "data1": 2,
                    "data_ptr": 5,
                    "data_ptr1": 1,
                    "data_struct": 3,
                    "data_struct_ptr": 1,
                    "data_structure": 3,
                    "data_structure_address": 1,
                    "data_structure_ptr": 1,
                    "input1": 2,
                    "input_data": 1,
                    "input_data_1": 1,
                    "input_param": 2,
                    "input_pointer": 1,
                    "ptr_struct": 1
                },
                "param_2": {
                    "input_data_2": 1,
                    "start": 7,
                    "start_idx": 1,
                    "start_index": 7,
                    "start_value": 15
                },
                "param_3": {
                    "end": 7,
                    "end_idx": 1,
                    "end_index": 7,
                    "end_value": 15,
                    "input_data_3": 1
                },
                "param_4": {
                    "flag": 28,
                    "flag_byte": 1,
                    "input_data_4": 1,
                    "type_flag": 1
                },
                "sVar5": {
                    "extracted_string_len": 1,
                    "len1": 3,
                    "len_extracted_string": 1,
                    "len_string1": 1,
                    "len_string_1": 1,
                    "length1": 9,
                    "length_1": 4,
                    "length_a": 1,
                    "str1_len": 1,
                    "str1_length": 3,
                    "string1_length": 3,
                    "string_1_length": 1,
                    "string_length1": 1
                },
                "sVar6": {
                    "len2": 3,
                    "len_extracted_string2": 1,
                    "len_string2": 1,
                    "len_string_2": 1,
                    "length2": 9,
                    "length_2": 4,
                    "length_b": 1,
                    "secondary_string_len": 1,
                    "str2_len": 1,
                    "str2_length": 3,
                    "string2_length": 3,
                    "string_2_length": 1,
                    "string_length2": 1
                },
                "uVar4": {
                    "output": 1,
                    "result": 4,
                    "return_val": 4,
                    "return_value": 18,
                    "status": 3
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 extract_and_process_data_0010a181(long data,long start_value,long end_value,byte flag)\n\n{\n  char char_value;\n  int int_var1;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *result_string;\n  long counter;\n  byte local_flag;\n  \n  char_value = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  local_flag = 1;\n  if (char_value == '\\0') {\n    local_flag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  int_var1 = *(int *)(*(long *)(data + 0x60) + 0x18);\n  string2 = (char *)extract_and_free_ptr_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  result_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *result_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(result_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  length1 = strlen(result_string);\n  sprintf(result_string + length1,\"ar%s;%ld;%ld;%s\",string1,start_value,end_value,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start_value <= end_value) {\n    result = int_var1 * (((int)end_value - (int)start_value) + 1);\n  }\n  return_value = create_and_initialize_data_structure_00109b52(data,result_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(result_string);\n  }\n  return return_value;\n}\n\n",
            "current_name": "extract_and_process_data_0010a181",
            "entrypoint": "0x0010a181",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a181": "extract_and_process_data_0010a181",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "result_string",
                "cVar1": "char_value",
                "iVar2": "int_var1",
                "iVar3": "result",
                "lVar7": "counter",
                "local_41": "local_flag",
                "param_1": "data",
                "param_2": "start_value",
                "param_3": "end_value",
                "param_4": "flag",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a2b9": {
            "additional_data": {
                "FUN_0010a2b9": {
                    "create_and_initialize_data": 1,
                    "expand_and_create_structure": 1,
                    "extract_and_create_data_structure": 1,
                    "extract_and_format_data": 1,
                    "extract_and_free_ptr_and_create_data_structure": 1,
                    "extract_and_initialize_data_structure": 1,
                    "extract_and_process_data": 2,
                    "extract_data_and_initialize_structure": 1,
                    "parse_and_create_data": 1,
                    "parse_and_format_data": 1,
                    "process_data": 19,
                    "reverse_extract_and_initialize": 1
                },
                "__s": {
                    "extracted_str": 4,
                    "extracted_string": 21,
                    "str": 2,
                    "str1": 2,
                    "string1": 2
                },
                "__s_00": {
                    "allocated_string": 4,
                    "expanded_string": 1,
                    "extended_str": 1,
                    "formatted_string": 2,
                    "modified_str": 1,
                    "modified_string": 4,
                    "new_str": 4,
                    "new_string": 8,
                    "processed_str": 1,
                    "processed_string": 2,
                    "str2": 1,
                    "string2": 2
                },
                "auVar4": {
                    "output": 1,
                    "output_data": 1,
                    "result": 23,
                    "result_struct": 1,
                    "return_data": 1,
                    "return_val": 1,
                    "return_value": 3
                },
                "cVar1": {
                    "char1": 6,
                    "char_val": 3,
                    "char_value": 9,
                    "char_var": 2,
                    "character": 2,
                    "flag_value": 1,
                    "ptr_value": 1
                },
                "lVar3": {
                    "count": 3,
                    "counter": 27,
                    "index": 1
                },
                "param_1": {
                    "data": 7,
                    "data_addr": 1,
                    "data_address": 3,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "data_ptr": 8,
                    "data_structure": 2,
                    "data_structure_param": 1,
                    "data_structure_ptr": 1,
                    "input_data": 2,
                    "input_param": 2
                },
                "param_2": {
                    "char_to_insert": 1,
                    "flag": 28,
                    "is_reverse": 1,
                    "should_reset": 1
                },
                "param_3": {
                    "arg1": 4,
                    "input1": 2,
                    "param1": 4,
                    "param3": 1,
                    "param_3": 2,
                    "param_a": 2,
                    "param_ptr1": 1,
                    "ptr1": 7,
                    "ptr_1": 1,
                    "ptr_to_some_data": 1,
                    "unused": 1,
                    "unused1": 1,
                    "unused_param": 2,
                    "unused_param_1": 2
                },
                "param_4": {
                    "arg2": 4,
                    "input2": 2,
                    "param2": 4,
                    "param4": 1,
                    "param_4": 3,
                    "param_b": 2,
                    "param_ptr2": 1,
                    "ptr2": 7,
                    "ptr_2": 1,
                    "ptr_to_another_data": 1,
                    "result": 1,
                    "return_val": 1,
                    "unused2": 1,
                    "unused_param_2": 2
                },
                "sVar2": {
                    "extracted_str_length": 1,
                    "extracted_string_length": 4,
                    "length": 2,
                    "str_len": 2,
                    "str_length": 4,
                    "str_length1": 1,
                    "string1_len": 1,
                    "string_length": 15,
                    "string_length1": 1
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] extract_and_process_data_0010a2b9(long data_ptr,char flag,undefined8 ptr1,undefined8 ptr2)\n\n{\n  char char_value;\n  char *extracted_string;\n  size_t string_length;\n  char *new_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  new_string = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *new_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(new_string,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(new_string);\n  sprintf(new_string + string_length,\"S%s\",extracted_string);\n  free(extracted_string);\n  result._0_4_ = create_and_initialize_data_structure_00109b52(data_ptr,new_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_string);\n  }\n  result._8_8_ = ptr2;\n  return result;\n}\n\n",
            "current_name": "extract_and_process_data_0010a2b9",
            "entrypoint": "0x0010a2b9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a2b9": "extract_and_process_data_0010a2b9",
                "__s": "extracted_string",
                "__s_00": "new_string",
                "auVar4": "result",
                "cVar1": "char_value",
                "lVar3": "counter",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a377": {
            "additional_data": {
                "FUN_0010a377": {
                    "build_data_structure": 1,
                    "combine_strings": 1,
                    "concatenate_strings": 1,
                    "construct_and_initialize_data_structure": 1,
                    "create_and_initialize_data_structure": 1,
                    "create_data_structure": 1,
                    "decompose_binary": 1,
                    "extract_and_initialize_data_structure": 1,
                    "extract_data_and_create_structure": 1,
                    "extract_data_and_initialize": 1,
                    "extract_data_structure": 1,
                    "generate_data_structure": 1,
                    "merge_and_initialize_data_structure": 1,
                    "parse_and_create_data_structure": 2,
                    "parse_and_initialize_data_structure": 1,
                    "process_data": 12,
                    "reverse_and_initialize_data_structure": 1,
                    "reverse_combine_strings": 1,
                    "reverse_string_concatenation": 1
                },
                "__s": {
                    "extracted_string1": 2,
                    "extracted_string_1": 5,
                    "first_string": 2,
                    "ptr1": 2,
                    "str1": 9,
                    "string1": 11
                },
                "__s_00": {
                    "extracted_string2": 2,
                    "extracted_string_2": 5,
                    "ptr2": 2,
                    "second_string": 2,
                    "str2": 9,
                    "string2": 11
                },
                "__s_01": {
                    "combined_str": 3,
                    "combined_string": 8,
                    "composed_string": 1,
                    "concatenated_string": 8,
                    "merged_string": 1,
                    "output_string": 1,
                    "result": 5,
                    "result_str": 3,
                    "str3": 1
                },
                "cVar1": {
                    "char_flag": 1,
                    "char_val": 1,
                    "char_value": 1,
                    "character": 1,
                    "check_char": 1,
                    "check_val": 1,
                    "data_char": 1,
                    "extracted_char": 1,
                    "flag": 17
                },
                "param_1": {
                    "binary_address": 1,
                    "data": 7,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_structure_param": 1,
                    "data_structure_ptr": 1,
                    "input": 7,
                    "input_addr": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_ptr": 2,
                    "input_value": 2,
                    "ptr": 1
                },
                "sVar3": {
                    "first_string_length": 2,
                    "len1": 5,
                    "len_extracted_string_1": 1,
                    "len_str1": 1,
                    "length1": 14,
                    "length_1": 3,
                    "length_string1": 1,
                    "size1": 1,
                    "str1_len": 1,
                    "str1_length": 1,
                    "string_length_1": 1
                },
                "sVar4": {
                    "len2": 5,
                    "len_extracted_string_2": 1,
                    "len_str2": 1,
                    "length2": 14,
                    "length_2": 3,
                    "length_string2": 1,
                    "second_string_length": 2,
                    "size2": 1,
                    "str2_len": 1,
                    "str2_length": 1,
                    "string_length_2": 1
                },
                "uVar2": {
                    "result": 21,
                    "result_value": 1,
                    "return_value": 8
                },
                "uVar5": {
                    "default_value": 2,
                    "flag": 5,
                    "flag2": 1,
                    "flag_value": 7,
                    "is_char_zero": 1,
                    "is_non_null": 1,
                    "is_zero_char": 1,
                    "use_default_val": 1,
                    "use_default_value": 2,
                    "use_flag": 1
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xmalloc",
                "FUN_00109b52",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a377(long input)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenated_string;\n  undefined flag_value;\n  \n  flag_value = 1;\n  flag = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag == '\\0') {\n    flag_value = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\n  }\n  string2 = (char *)extract_and_free_ptr_00109b2f(input);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  concatenated_string = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(concatenated_string,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = create_and_initialize_data_structure_00109b52(input,concatenated_string,0,flag_value,0);\n  if ((char)result != '\\0') {\n    free(concatenated_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a377",
            "entrypoint": "0x0010a377",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a377": "process_data_0010a377",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "concatenated_string",
                "cVar1": "flag",
                "param_1": "input",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar2": "result",
                "uVar5": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a424": {
            "additional_data": {
                "FUN_0010a424": {
                    "build_data_structure": 1,
                    "construct_and_initialize_string": 1,
                    "construct_data_structure": 1,
                    "create_and_initialize_data_structure": 4,
                    "improve_code": 1,
                    "parse_and_initialize_data": 1,
                    "process_data": 20
                },
                "__ptr": {
                    "allocated_ptr": 1,
                    "data_pointer": 1,
                    "dest_ptr": 1,
                    "dynamic_array": 2,
                    "element_ptr": 1,
                    "extracted_data": 1,
                    "extracted_ptr": 1,
                    "pointer_array": 1,
                    "ptr": 2,
                    "ptr_arr": 3,
                    "ptr_array": 16,
                    "ptr_values": 1
                },
                "__s": {
                    "extracted_str": 1,
                    "extracted_string2": 1,
                    "ptr2": 2,
                    "ptr_2": 1,
                    "ptr_str2": 1,
                    "second_string": 1,
                    "source_data": 1,
                    "str2": 18,
                    "string1": 1,
                    "string2": 4
                },
                "__s_00": {
                    "combined_str": 1,
                    "combined_string": 1,
                    "concat_str": 1,
                    "concatenated_str": 1,
                    "dest_data": 1,
                    "final_str": 5,
                    "final_string": 4,
                    "new_str": 2,
                    "new_string": 2,
                    "output_str": 1,
                    "ptr_result": 1,
                    "result_str": 7,
                    "result_string": 3,
                    "string3": 1
                },
                "bVar10": {
                    "bit_flag2": 1,
                    "byte_flag": 2,
                    "byte_var2": 2,
                    "extract_flag": 1,
                    "first_element": 1,
                    "flag1": 1,
                    "flag2": 1,
                    "flag3": 3,
                    "flag_byte": 1,
                    "flag_temp": 1,
                    "flag_value": 1,
                    "initialized": 1,
                    "loop_condition": 1,
                    "loop_condition_flag": 1,
                    "loop_flag": 5,
                    "loop_var2": 1,
                    "temp_bit": 1,
                    "temp_byte": 2,
                    "temp_flag": 3,
                    "temp_var": 1
                },
                "bVar2": {
                    "bit_flag": 1,
                    "byte_val": 2,
                    "byte_value": 3,
                    "byte_var": 5,
                    "check_flag": 1,
                    "flag": 1,
                    "flag2": 3,
                    "is_flag_set": 1,
                    "is_last_element": 1,
                    "is_modified_data": 1,
                    "sub_flag": 1,
                    "temp": 3,
                    "temp_byte": 6,
                    "temp_flag": 2
                },
                "cVar1": {
                    "is_initialized": 1,
                    "is_initialized_data": 1,
                    "result": 28
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize_data_structure": 1
                },
                "extract_and_free_ptr_00109b2f": {
                    "extract_and_free_pointer": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "iVar3": {
                    "counter": 4,
                    "element_count": 1,
                    "index": 6,
                    "int_var": 1,
                    "iteration": 1,
                    "iterator": 1,
                    "length": 1,
                    "loop_var": 1,
                    "new_count": 1,
                    "temp": 2,
                    "temp_count": 3,
                    "temp_int": 4,
                    "temp_length": 2,
                    "temp_var": 3
                },
                "initialize_or_create_data_structure_00109d97": {
                    "initialize_or_create_data_structure": 1
                },
                "lVar11": {
                    "counter": 2,
                    "index": 2,
                    "index2": 5,
                    "iterator2": 1,
                    "j": 2,
                    "loop_counter": 1,
                    "loop_index": 5,
                    "loop_length": 1,
                    "loop_var2": 6,
                    "loop_var3": 2,
                    "temp_index": 3,
                    "temp_long": 1
                },
                "lVar9": {
                    "count": 1,
                    "counter": 1,
                    "i": 2,
                    "index": 9,
                    "index1": 2,
                    "iterator": 2,
                    "length": 1,
                    "loop_count": 1,
                    "loop_index": 3,
                    "loop_var": 3,
                    "loop_var1": 5,
                    "loop_var2": 1
                },
                "param_1": {
                    "data": 19,
                    "data_ptr": 3,
                    "data_structure": 2,
                    "data_structure_ptr": 2,
                    "input": 1,
                    "input_data": 1,
                    "ptr_data": 1,
                    "structure_pointer": 1,
                    "structure_ptr": 1
                },
                "param_2": {
                    "flag": 27,
                    "flag1": 1,
                    "initialize": 2,
                    "is_initialized": 1
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 1,
                    "count": 18,
                    "length": 1,
                    "num_elements": 6,
                    "size": 4
                },
                "param_4": {
                    "condition": 1,
                    "flag2": 2,
                    "initialize": 14,
                    "initialize_flag": 11,
                    "initialize_structure": 1,
                    "is_modified": 1,
                    "update_last_element": 1
                },
                "pcVar5": {
                    "extracted_string": 1,
                    "first_string": 1,
                    "ptr1": 2,
                    "ptr_1": 1,
                    "ptr_str1": 1,
                    "source_ptr": 1,
                    "source_str": 1,
                    "str1": 18,
                    "string1": 4
                },
                "sVar7": {
                    "len1": 10,
                    "len_1": 1,
                    "len_first_string": 1,
                    "length1": 14,
                    "source_len": 1,
                    "source_str_len": 1,
                    "str1_length": 1,
                    "str_len1": 1,
                    "str_length1": 1
                },
                "sVar8": {
                    "dest_len": 1,
                    "extracted_str_len": 1,
                    "len2": 10,
                    "len_2": 1,
                    "len_second_string": 1,
                    "length2": 14,
                    "str2_length": 1,
                    "str_len2": 1,
                    "str_length2": 1
                },
                "sprintf": {
                    "formatted_string": 1
                },
                "strcmp": {
                    "string_compare": 1
                },
                "strcpy": {
                    "string_copy": 1
                },
                "strlen": {
                    "string_length": 1
                },
                "uVar12": {
                    "another_flag": 1,
                    "bit_value": 1,
                    "bool_value": 1,
                    "data_flag": 1,
                    "data_structure_type": 1,
                    "flag2": 4,
                    "flag3": 1,
                    "flag4": 2,
                    "flag_val": 1,
                    "flag_value": 3,
                    "initialize_flag": 1,
                    "initialize_result": 1,
                    "initialize_value": 1,
                    "is_modified_data2": 1,
                    "length_flag": 1,
                    "loop_control": 1,
                    "loop_result": 1,
                    "loop_value": 1,
                    "result_byte": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "u_value": 1,
                    "u_var": 1,
                    "unknown": 1,
                    "value": 1
                },
                "uVar4": {
                    "output": 1,
                    "result": 3,
                    "return_value": 25,
                    "status": 1
                },
                "uVar6": {
                    "data": 1,
                    "element": 1,
                    "extracted_data": 1,
                    "extracted_value": 12,
                    "new_value": 1,
                    "ptr_value": 1,
                    "temp_value": 7,
                    "val": 1,
                    "value": 6
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "strcpy",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_00109d97",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_0010a424(long data,char flag,int count,char initialize)\n\n{\n  char result;\n  byte temp_byte;\n  int index;\n  undefined4 return_value;\n  char *str1;\n  undefined8 *ptr_array;\n  undefined8 extracted_value;\n  char *str2;\n  size_t length1;\n  size_t length2;\n  char *result_str;\n  long index;\n  byte loop_flag;\n  long loop_var2;\n  undefined flag2;\n  \n  if ((flag == '\\0') && (result = initialize_or_create_data_structure(), result == '\\0')) {\n    return 0;\n  }\n  loop_flag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_pointer(data);\n  if (count < 0) {\n    ptr_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    flag2 = 1;\n    if (loop_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptr_array = (undefined8 *)xmalloc((long)index * 8);\n      index = (long)(count + -1);\n      do {\n        temp_byte = 1;\n        if (loop_flag == 0) {\n          temp_byte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        extracted_value = extract_and_free_pointer(data);\n        loop_flag = temp_byte & 1;\n        ptr_array[index] = extracted_value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (initialize == '\\0') {\n        result = initialize_or_create_data_structure(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        temp_byte = 1;\n        if (loop_flag == 0) {\n          temp_byte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        loop_flag = temp_byte & 1;\n        extracted_value = extract_and_free_pointer(data);\n        ptr_array[(long)index + -1] = extracted_value;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptr_array = (undefined8 *)0x0;\n    if (initialize != '\\0') goto LAB_0010a582;\n    ptr_array = (undefined8 *)xmalloc(8);\n    result = initialize_or_create_data_structure(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((loop_flag != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      extracted_value = extract_and_free_pointer(data);\n      count = 1;\n      flag2 = 1;\n      *ptr_array = extracted_value;\n      goto LAB_0010a596;\n    }\n    extracted_value = extract_and_free_pointer(data);\n    count = 1;\n    *ptr_array = extracted_value;\n  }\n  flag2 = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_and_free_pointer(data);\n  length1 = strlen(str1);\n  length2 = strlen(str2);\n  index = length1 + 10 + length2;\n  for (loop_var2 = 0; (int)loop_var2 < count; loop_var2 = loop_var2 + 1) {\n    length1 = strlen((char *)ptr_array[loop_var2]);\n    index = index + length1;\n  }\n  result_str = (char *)xmalloc(index);\n  sprintf(result_str,\"#%s,%s\",str1,str2);\n  index = 0;\n  dexmalloc(str1);\n  dexmalloc(str2);\n  while( true ) {\n    length1 = strlen(result_str);\n    if (count <= (int)index) break;\n    *(undefined2 *)(result_str + length1) = 0x2c;\n    str1 = (char *)ptr_array[index];\n    index = index + 1;\n    strcpy(result_str + length1 + 1,str1);\n    dexmalloc(str1);\n  }\n  *(undefined2 *)(result_str + length1) = 0x3b;\n  dexmalloc(ptr_array);\n  return_value = create_and_initialize_data_structure(data,result_str,0,flag2,0);\n  if ((char)return_value == '\\0') {\n    return 0;\n  }\n  dexmalloc(result_str);\n  return return_value;\n}\n\n",
            "current_name": "process_data_0010a424",
            "entrypoint": "0x0010a424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "__ptr": "ptr_array",
                "__s": "str2",
                "__s_00": "result_str",
                "bVar10": "loop_flag",
                "bVar2": "temp_byte",
                "cVar1": "result",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize_data_structure",
                "extract_and_free_ptr_00109b2f": "extract_and_free_pointer",
                "free": "deallocate_memory",
                "iVar3": "index",
                "initialize_or_create_data_structure_00109d97": "initialize_or_create_data_structure",
                "lVar11": "loop_var2",
                "lVar9": "index",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "initialize",
                "pcVar5": "str1",
                "sVar7": "length1",
                "sVar8": "length2",
                "sprintf": "formatted_string",
                "strcpy": "string_copy",
                "strlen": "string_length",
                "uVar12": "flag2",
                "uVar4": "return_value",
                "uVar6": "extracted_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a69a": {
            "additional_data": {
                "FUN_0010a69a": {
                    "convert_and_initialize_data": 1,
                    "create_and_initialize_data_structure": 3,
                    "create_data_structure": 1,
                    "generate_data_structure": 1,
                    "initialize_and_create_data": 1,
                    "initialize_data": 5,
                    "initialize_data_structure": 11,
                    "process_data": 7,
                    "update_data_structure": 1
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize_data_structure": 1
                },
                "lVar2": {
                    "array_size": 7,
                    "buffer_length": 1,
                    "dynamic_array_ptr": 1,
                    "index": 1,
                    "resize_result": 3,
                    "resized_array": 9,
                    "resized_array_size": 6,
                    "resized_data": 1,
                    "resized_size": 2
                },
                "local_60": {
                    "buffer": 7,
                    "formatted_string": 4,
                    "input_string": 1,
                    "local_string": 1,
                    "message": 2,
                    "output_string": 9,
                    "string": 1,
                    "string_buffer": 1
                },
                "param_1": {
                    "data": 5,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct_ptr": 1,
                    "data_structure": 11,
                    "data_structure_pointer": 3,
                    "data_structure_ptr": 7,
                    "input": 1
                },
                "param_2": {
                    "additional_data": 2,
                    "additional_parameter": 1,
                    "address": 1,
                    "data_pointer": 1,
                    "data_size": 1,
                    "output": 1,
                    "param2": 11,
                    "param_data": 1,
                    "param_size": 1,
                    "parameter2": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "size": 3,
                    "unknown_param": 1,
                    "unknown_value": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "param_3": {
                    "array_size": 7,
                    "count": 1,
                    "flag": 11,
                    "is_array_empty": 1,
                    "is_initialized": 1,
                    "is_resizable": 1,
                    "num_elements": 1,
                    "resize_flag": 4,
                    "size": 4
                },
                "param_4": {
                    "boolean_flag": 1,
                    "char_flag": 2,
                    "char_value": 2,
                    "character": 3,
                    "condition": 3,
                    "condition_flag": 1,
                    "flag": 10,
                    "flag_char": 2,
                    "is_char_zero": 1,
                    "is_flag": 1,
                    "is_zero": 3,
                    "option": 1,
                    "value_flag": 1
                },
                "param_5": {
                    "flag_value": 1,
                    "number": 1,
                    "param5": 2,
                    "param_value": 1,
                    "uint_data": 1,
                    "uint_value": 1,
                    "unsigned_value": 1,
                    "value": 23
                },
                "resize_array_and_initialize_00109c2e": {
                    "resize_and_initialize_array": 1
                },
                "sVar3": {
                    "buffer_length": 1,
                    "buffer_length2": 1,
                    "header_length": 1,
                    "initial_length": 2,
                    "len": 1,
                    "length": 8,
                    "local60_length": 1,
                    "local_string_length": 1,
                    "str_len": 1,
                    "str_length": 1,
                    "string_len": 1,
                    "string_length": 12
                },
                "sprintf": {
                    "format_string": 1
                },
                "strlen": {
                    "get_string_length": 1
                },
                "uVar1": {
                    "result": 25,
                    "return_value": 6
                },
                "uVar4": {
                    "allocated_address": 1,
                    "allocated_data": 1,
                    "allocated_memory": 22,
                    "allocated_pointer": 1,
                    "allocated_ptr": 1,
                    "dynamic_memory": 1,
                    "malloc_result": 1,
                    "new_pointer": 1,
                    "ptr": 1
                },
                "uVar5": {
                    "flag_value": 1,
                    "has_data": 1,
                    "has_resized": 1,
                    "initialize_flag": 1,
                    "is_formatted": 1,
                    "is_initialized": 6,
                    "is_resized": 15,
                    "is_resized_array": 1,
                    "is_valid": 1,
                    "should_print": 1,
                    "use_flag": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "sprintf",
                "FUN_00109c2e",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a83e"
            ],
            "code": "\nundefined4 create_and_initialize_data_structure_0010a69a(long data_structure,undefined8 param2,int flag,char flag,uint value)\n\n{\n  undefined4 result;\n  long resized_array;\n  size_t string_length;\n  undefined8 allocated_memory;\n  undefined is_resized;\n  char output_string [48];\n  \n  if (flag == 0) {\n    output_string[0] = '\\0';\n    is_resized = 0;\n    resized_array = 0;\n  }\n  else {\n    resized_array = resize_and_initialize_array();\n    if (resized_array < 0) {\n      return 0;\n    }\n    is_resized = 1;\n    sprintf(output_string,\"%ld=\",resized_array);\n  }\n  string_length = strlen(output_string);\n  sprintf(output_string + string_length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = create_and_initialize_data_structure_0010a69a(data_structure,output_string,resized_array,is_resized,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  resized_array = *(long *)(data_structure + 0x60);\n  allocated_memory = xmalloc(1);\n  *(undefined8 *)(resized_array + 0x20) = allocated_memory;\n  **(undefined **)(*(long *)(data_structure + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "current_name": "create_and_initialize_data_structure_0010a69a",
            "entrypoint": "0x0010a69a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a69a": "create_and_initialize_data_structure_0010a69a",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize_data_structure",
                "lVar2": "resized_array",
                "local_60": "output_string",
                "param_1": "data_structure",
                "param_2": "param2",
                "param_3": "flag",
                "param_4": "flag",
                "param_5": "value",
                "resize_array_and_initialize_00109c2e": "resize_and_initialize_array",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "result",
                "uVar4": "allocated_memory",
                "uVar5": "is_resized",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a77a": {
            "additional_data": {
                "FUN_0010a77a": {
                    "combine_strings": 2,
                    "construct_data_structure": 1,
                    "create_and_initialize_data_structure": 1,
                    "parse_and_create_data_structure": 1,
                    "process_data": 25,
                    "process_data_and_create_structure": 1
                },
                "__s": {
                    "input_string": 1,
                    "ptr1": 1,
                    "source_string": 3,
                    "str1": 6,
                    "str_ptr": 1,
                    "string1": 18,
                    "string_a": 1
                },
                "__s_00": {
                    "extracted_str": 1,
                    "extracted_string": 9,
                    "prefix_string": 1,
                    "ptr2": 1,
                    "str2": 6,
                    "string2": 12,
                    "string_b": 1
                },
                "__s_01": {
                    "combined_str": 4,
                    "combined_string": 15,
                    "concatenated_string": 5,
                    "new_string": 1,
                    "processed_string": 1,
                    "ptr3": 1,
                    "result_str": 3,
                    "result_string": 1
                },
                "create_and_initialize_data_structure_00109b52": {
                    "initialize_data_structure": 1
                },
                "extract_and_free_ptr_00109b2f": {
                    "extract_data": 1
                },
                "lVar2": {
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 6,
                    "data_structure_ptr": 2,
                    "ptr": 2,
                    "ptr1": 2,
                    "ptr_data": 2,
                    "ptr_struct": 1,
                    "struct_ptr": 1,
                    "structure_pointer": 1,
                    "structure_ptr": 1
                },
                "param_1": {
                    "data": 10,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_structure": 1,
                    "input": 5,
                    "input_data": 9,
                    "input_param": 3
                },
                "sVar5": {
                    "extracted_length": 1,
                    "extracted_str_len": 2,
                    "extracted_string_len": 1,
                    "extracted_string_length": 4,
                    "len1": 2,
                    "length1": 12,
                    "length2": 1,
                    "prefix_length": 1,
                    "size1": 1,
                    "size_ptr2": 1,
                    "str1_length": 1,
                    "string2_length": 1
                },
                "sVar6": {
                    "input_string_length": 1,
                    "len2": 2,
                    "length1": 1,
                    "length2": 12,
                    "size2": 1,
                    "size_ptr1": 1,
                    "source_length": 2,
                    "source_string_length": 1,
                    "str2_length": 1,
                    "str_ptr_len": 1,
                    "string1_len": 1,
                    "string1_length": 4
                },
                "uVar1": {
                    "byte": 1,
                    "char_val": 1,
                    "char_value": 4,
                    "character": 2,
                    "character_flag": 1,
                    "data_structure_value": 1,
                    "data_type": 2,
                    "first_char": 1,
                    "flag": 6,
                    "flags": 1,
                    "size": 1,
                    "source_char": 1,
                    "status": 1,
                    "temp_byte": 1,
                    "unknown_var1": 1
                },
                "uVar3": {
                    "data_struct_ptr": 1,
                    "data_structure_value2": 1,
                    "data_value": 1,
                    "extra_value": 1,
                    "long_val": 1,
                    "long_value": 2,
                    "num_value": 1,
                    "ptr": 1,
                    "ptr_value": 2,
                    "temp_long": 1,
                    "unknown_var3": 1,
                    "val": 1,
                    "value": 9,
                    "value1": 2
                },
                "uVar4": {
                    "result": 17,
                    "result_code": 1,
                    "return_value": 9,
                    "status": 3
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4 process_data_and_create_structure_0010a77a(long data)\n\n{\n  undefined flag;\n  long data_structure;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  data_structure = *(long *)(data + 0x60);\n  if ((data_structure != 0) && (string1 = *(char **)(data_structure + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(data_structure + 0x18);\n    flag = *(undefined *)(data_structure + 0x1c);\n    value = *(undefined8 *)(data_structure + 0x10);\n    string2 = (char *)extract_data();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combined_string = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combined_string,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = initialize_data_structure(data,combined_string,value,flag,result);\n    if ((char)result != '\\0') {\n      free(combined_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_and_create_structure_0010a77a",
            "entrypoint": "0x0010a77a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a77a": "process_data_and_create_structure_0010a77a",
                "__s": "string1",
                "__s_00": "string2",
                "__s_01": "combined_string",
                "create_and_initialize_data_structure_00109b52": "initialize_data_structure",
                "extract_and_free_ptr_00109b2f": "extract_data",
                "lVar2": "data_structure",
                "param_1": "data",
                "sVar5": "length1",
                "sVar6": "length2",
                "uVar1": "flag",
                "uVar3": "value",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a83e": {
            "additional_data": {
                "FUN_0010a83e": {
                    "initialize_data": 1,
                    "initialize_data_structure": 4,
                    "process_data": 22,
                    "reverse_and_initialize_data_structure": 1,
                    "reverse_and_update_data_structure": 1
                },
                "__s": {
                    "extracted_str": 1,
                    "extracted_string": 2,
                    "message": 1,
                    "str1": 2,
                    "str_1": 1,
                    "str_ptr": 1,
                    "string1": 18,
                    "string_1": 3,
                    "string_ptr": 2
                },
                "__s_00": {
                    "formatted_message": 1,
                    "formatted_string": 2,
                    "new_str": 1,
                    "new_str_ptr": 1,
                    "new_string_ptr": 2,
                    "str2": 2,
                    "str_2": 1,
                    "string2": 18,
                    "string_2": 3
                },
                "cVar3": {
                    "char1": 3,
                    "char_1": 1,
                    "char_flag": 3,
                    "char_value": 11,
                    "char_var": 7,
                    "character": 1,
                    "flag": 3,
                    "flag_4": 1,
                    "flag_value": 1
                },
                "create_and_initialize_data_structure_0010a69a": {
                    "init_data_structure": 1,
                    "initialize_data_structure": 1
                },
                "extract_and_free_ptr_00109b2f": {
                    "extract_and_free_ptr": 2
                },
                "free": {
                    "deallocate_memory": 2
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "argument1": 1,
                    "base_address": 3,
                    "data": 3,
                    "data1": 1,
                    "data_address": 1,
                    "data_pointer": 3,
                    "data_ptr": 5,
                    "data_struct_ptr": 1,
                    "data_structure_ptr": 1,
                    "input": 3,
                    "input1": 1,
                    "input_arg1": 1,
                    "input_param": 2,
                    "input_param1": 1,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 3,
                    "argument2": 1,
                    "config": 4,
                    "config_param": 1,
                    "data": 2,
                    "data2": 1,
                    "data_ptr": 1,
                    "data_size": 1,
                    "data_structure": 1,
                    "input2": 1,
                    "input_arg2": 1,
                    "input_data": 1,
                    "input_param2": 1,
                    "input_ptr": 1,
                    "param2": 6,
                    "param_pointer": 1,
                    "pointer": 1,
                    "pointer_param": 1,
                    "ptr": 1,
                    "size": 1
                },
                "param_3": {
                    "arg3": 2,
                    "argument3": 1,
                    "data_size": 1,
                    "input3": 1,
                    "input_arg3": 1,
                    "input_param3": 1,
                    "length": 1,
                    "param3": 6,
                    "param3_val": 1,
                    "param_3": 1,
                    "param_size": 1,
                    "size": 4,
                    "size1": 4,
                    "size_1": 3,
                    "size_param": 1,
                    "value1": 2
                },
                "param_4": {
                    "arg4": 2,
                    "argument4": 1,
                    "byte_param": 1,
                    "flag": 6,
                    "flag1": 3,
                    "flag_1": 2,
                    "flags": 1,
                    "input4": 1,
                    "input_arg4": 1,
                    "input_param4": 1,
                    "option": 1,
                    "param4": 7,
                    "param4_val": 1,
                    "param_4": 1,
                    "type": 1,
                    "unknown_param": 1
                },
                "param_5": {
                    "arg5": 2,
                    "argument5": 1,
                    "flag2": 1,
                    "flag_param": 1,
                    "input5": 1,
                    "input_arg5": 1,
                    "input_param5": 1,
                    "limit": 1,
                    "mask": 3,
                    "offset": 2,
                    "param5": 6,
                    "param5_val": 1,
                    "param_5": 1,
                    "size2": 4,
                    "size_2": 3,
                    "value2": 2
                },
                "param_6": {
                    "arg6": 1,
                    "argument6": 1,
                    "bit1": 1,
                    "bool1": 1,
                    "bool_param_1": 1,
                    "condition": 1,
                    "condition1": 1,
                    "flag1": 11,
                    "flag2": 2,
                    "flag3": 1,
                    "flag_1": 1,
                    "flag_2": 2,
                    "is_cond1_true": 1,
                    "is_enabled_1": 1,
                    "is_flag_set": 1,
                    "option1": 2,
                    "param6": 2
                },
                "param_7": {
                    "arg7": 1,
                    "argument7": 1,
                    "bit2": 1,
                    "bool2": 1,
                    "bool_param_2": 1,
                    "condition2": 2,
                    "flag2": 11,
                    "flag3": 2,
                    "flag4": 1,
                    "flag_2": 1,
                    "flag_3": 2,
                    "is_cond2_true": 1,
                    "is_condition_met": 1,
                    "is_enabled_2": 1,
                    "option2": 2,
                    "param7": 2
                },
                "sVar2": {
                    "length": 6,
                    "message_length": 1,
                    "str_length": 5,
                    "string_len": 1,
                    "string_length": 18
                },
                "sprintf": {
                    "format_string": 2
                },
                "strlen": {
                    "get_string_length": 2
                },
                "uVar1": {
                    "result": 21,
                    "result_code": 1,
                    "return_value": 4
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "FUN_0010a69a",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 param2,ulong param3,undefined param4,ulong param5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    string1 = (char *)extract_and_free_ptr();\n    param5 = param5 & 0xffffffff;\n    param3 = param3 & 0xffffffff;\n  }\n  result = initialize_data_structure(data_ptr,param2,param3,param4,param5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string1);\n      string2 = (char *)xmalloc(string_length + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      dexmalloc(string1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010a83e",
            "entrypoint": "0x0010a83e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "__s": "string1",
                "__s_00": "string2",
                "cVar3": "char_value",
                "create_and_initialize_data_structure_0010a69a": "initialize_data_structure",
                "extract_and_free_ptr_00109b2f": "extract_and_free_ptr",
                "free": "deallocate_memory",
                "param_1": "data_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "flag1",
                "param_7": "flag2",
                "sVar2": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "result",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010a94e": {
            "additional_data": {
                "FUN_0010a94e": {
                    "build_data_string": 1,
                    "build_request": 2,
                    "build_request_string": 1,
                    "build_string": 1,
                    "build_url": 2,
                    "compose_message": 1,
                    "construct_url": 2,
                    "convert_to_formatted_string": 1,
                    "create_connection_string": 1,
                    "create_formatted_message": 1,
                    "create_formatted_string": 1,
                    "create_updated_data": 1,
                    "extract_data": 1,
                    "generate_connection_info": 1,
                    "generate_data": 1,
                    "generate_formatted_string": 7,
                    "generate_resource_string": 1,
                    "generate_url": 2,
                    "process_data": 1,
                    "reverse_and_format_string": 1,
                    "reverse_and_update_string": 1
                },
                "__s": {
                    "extracted_data": 3,
                    "extracted_str": 2,
                    "extracted_string": 18,
                    "extracted_value": 1,
                    "host": 1,
                    "hostname": 1,
                    "server": 1,
                    "server_address": 1,
                    "str3": 1,
                    "str_1": 1,
                    "temp_string": 1
                },
                "cVar1": {
                    "char_flag": 1,
                    "char_value": 1,
                    "char_var": 1,
                    "condition": 1,
                    "condition_flag": 1,
                    "flag": 15,
                    "flag_char": 3,
                    "flag_value": 4,
                    "is_connection_enabled": 1,
                    "is_flag_set": 1,
                    "message_flag": 1,
                    "use_flag": 1
                },
                "extract_and_free_ptr_00109b2f": {
                    "extract_ptr": 1
                },
                "lVar2": {
                    "base_address": 1,
                    "base_address_ptr": 1,
                    "config_ptr": 3,
                    "connection_handle_address": 1,
                    "connection_info_ptr": 1,
                    "data_pointer_value": 1,
                    "data_ptr": 2,
                    "data_ptr_copy": 1,
                    "data_struct_ptr": 1,
                    "param_pointer_deref": 1,
                    "pointer": 1,
                    "ptr": 5,
                    "ptr_data": 1,
                    "ptr_input_header": 1,
                    "ptr_to_struct": 4,
                    "request_data": 1,
                    "resource_pointer": 1,
                    "struct_pointer": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "arg1": 3,
                    "arg_1": 1,
                    "base": 1,
                    "base_address": 2,
                    "config": 3,
                    "config_ptr": 1,
                    "connection_handle": 1,
                    "connection_info": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "input": 2,
                    "input_address": 1,
                    "input_data": 1,
                    "input_struct": 1,
                    "param1": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "request": 2,
                    "request_struct": 1,
                    "resource_data": 1,
                    "structure": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "input1": 1,
                    "input_str": 1,
                    "input_string1": 2,
                    "method": 1,
                    "param1": 3,
                    "param2": 1,
                    "param_a": 2,
                    "sender": 1,
                    "str1": 2,
                    "string1": 7,
                    "username": 7,
                    "value1": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "input2": 1,
                    "input_string2": 2,
                    "output_str": 1,
                    "param2": 3,
                    "param3": 1,
                    "param_b": 2,
                    "password": 7,
                    "protocol": 1,
                    "receiver": 1,
                    "str2": 2,
                    "string2": 7,
                    "value2": 1
                },
                "param_4": {
                    "arg4": 1,
                    "arg_4": 1,
                    "authentication_code": 1,
                    "flag": 12,
                    "format_type": 1,
                    "mode": 2,
                    "option": 6,
                    "param3": 1,
                    "param4": 1,
                    "param_c": 1,
                    "param_flag": 1,
                    "status": 1,
                    "tag_value": 1,
                    "type": 1
                },
                "pcVar7": {
                    "combined_string": 1,
                    "composed_message": 1,
                    "concatenated_str": 1,
                    "concatenated_string": 1,
                    "current_url": 1,
                    "formatted_str_ptr": 1,
                    "formatted_string": 5,
                    "new_connection_string": 1,
                    "new_string": 4,
                    "new_url": 1,
                    "old_string": 2,
                    "previous_message": 1,
                    "previous_url": 1,
                    "request_string": 1,
                    "result_str": 1,
                    "result_string": 1,
                    "str": 1,
                    "temp_ptr": 1,
                    "temp_string": 1,
                    "url": 1,
                    "url_ptr": 1,
                    "var1": 1,
                    "website": 1
                },
                "pcVar9": {
                    "auth_code_str": 1,
                    "condition_value": 1,
                    "flag": 1,
                    "flag_str": 4,
                    "flag_string": 11,
                    "format_string": 1,
                    "option_str": 2,
                    "option_string": 3,
                    "option_suffix": 1,
                    "param_d": 1,
                    "status": 1,
                    "suffix": 3,
                    "type_str": 1
                },
                "sVar3": {
                    "current_url_length": 1,
                    "existing_string_length": 1,
                    "len1": 4,
                    "len_1": 1,
                    "len_pc_var7": 1,
                    "len_var1": 1,
                    "length1": 7,
                    "length_arg2": 1,
                    "length_original_string": 1,
                    "method_len": 1,
                    "old_string_len": 1,
                    "old_string_length": 3,
                    "old_url_length": 1,
                    "pc_var7_length": 1,
                    "prev_url_length": 1,
                    "resource_len": 1,
                    "sender_len": 1,
                    "url_len": 1,
                    "username_length": 1,
                    "website_len": 1
                },
                "sVar4": {
                    "input_len1": 1,
                    "len2": 4,
                    "len_2": 1,
                    "len_param_2": 1,
                    "len_param_a": 1,
                    "length2": 7,
                    "length_param2": 1,
                    "length_string1": 1,
                    "param1_len": 1,
                    "param1_length": 1,
                    "param2_length": 1,
                    "param_len": 2,
                    "password_length": 1,
                    "str1_length": 1,
                    "string1_length": 1,
                    "username_len": 2,
                    "username_length": 4
                },
                "sVar5": {
                    "data_len": 1,
                    "extracted_data_len": 1,
                    "extracted_data_length": 1,
                    "extracted_len": 2,
                    "extracted_string_len": 1,
                    "extracted_string_length": 3,
                    "extracted_value_length": 1,
                    "host_len": 1,
                    "hostname_length": 1,
                    "len3": 4,
                    "len_3": 1,
                    "len_extracted": 1,
                    "len_extracted_str": 1,
                    "length3": 6,
                    "length_extracted": 1,
                    "length_extracted_str": 1,
                    "length_extracted_string": 1,
                    "server_address_length": 1,
                    "server_length": 1,
                    "str3_length": 1
                },
                "sVar6": {
                    "connection_handle_length": 1,
                    "input_len2": 1,
                    "len4": 4,
                    "len_4": 1,
                    "len_output_str": 1,
                    "len_param_b": 1,
                    "length4": 6,
                    "length_param3": 1,
                    "length_string2": 2,
                    "param2_len": 1,
                    "param2_length": 1,
                    "param3_length": 1,
                    "password_len": 2,
                    "password_length": 4,
                    "protocol_len": 1,
                    "receiver_len": 1,
                    "str2_length": 1,
                    "string2_length": 1
                },
                "uVar8": {
                    "result": 17,
                    "return_val": 1,
                    "return_value": 13
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 generate_formatted_string_0010a94e(long arg1,char *username,char *password,int flag)\n\n{\n  char flag;\n  long ptr;\n  char *extracted_string;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formatted_string;\n  undefined8 result;\n  char *flag_string;\n  \n  flag = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  extracted_string = (char *)extract_ptr();\n  formatted_string = *(char **)(*(long *)(arg1 + 0x60) + 0x20);\n  if (formatted_string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(formatted_string);\n    length2 = strlen(username);\n    length3 = strlen(extracted_string);\n    length4 = strlen(password);\n    formatted_string = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formatted_string,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(arg1 + 0x60) + 0x20),username,flag_string,\n            extracted_string,password,*(long *)(arg1 + 0x60));\n    free(*(void **)(*(long *)(arg1 + 0x60) + 0x20));\n    ptr = *(long *)(arg1 + 0x60);\n    *(char **)(ptr + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "generate_formatted_string_0010a94e",
            "entrypoint": "0x0010a94e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "__s": "extracted_string",
                "cVar1": "flag",
                "extract_and_free_ptr_00109b2f": "extract_ptr",
                "lVar2": "ptr",
                "param_1": "arg1",
                "param_2": "username",
                "param_3": "password",
                "param_4": "flag",
                "pcVar7": "formatted_string",
                "pcVar9": "flag_string",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010aa53": {
            "additional_data": {
                "FUN_0010aa53": {
                    "add_data_to_buffer": 1,
                    "add_log_entry": 1,
                    "append_data_to_buffer": 1,
                    "append_data_to_log": 1,
                    "append_data_to_string_and_count": 1,
                    "build_string_and_add_to_table": 1,
                    "extract_and_format_data": 1,
                    "extract_and_store_data": 1,
                    "format_and_store_data": 2,
                    "generate_log_entry": 1,
                    "parse_and_store_data": 1,
                    "process_and_store_data": 1,
                    "process_data": 13,
                    "process_input": 2,
                    "process_input_data": 1,
                    "record_event": 1,
                    "update_data": 1
                },
                "__s": {
                    "extracted_data": 1,
                    "extracted_string": 24,
                    "source_string": 1,
                    "str": 2,
                    "string": 2,
                    "string_ptr": 1
                },
                "cVar1": {
                    "char1": 2,
                    "char_value": 4,
                    "char_value_1": 1,
                    "char_var": 1,
                    "first_char": 1,
                    "flag1": 1,
                    "flag_char": 2,
                    "flag_check": 1,
                    "flag_value": 12,
                    "previous_flag": 1,
                    "previous_log_type": 1,
                    "ptr_char": 1,
                    "ptr_value": 1,
                    "some_character": 1,
                    "var1": 1
                },
                "cVar3": {
                    "char2": 1,
                    "char_value": 2,
                    "char_value_2": 1,
                    "condition_char": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag_char": 1,
                    "flag_char_value": 1,
                    "flag_val": 1,
                    "flag_value": 1,
                    "log_type_char": 1,
                    "mode_char": 2,
                    "mode_character": 2,
                    "mode_flag": 1,
                    "mode_value": 3,
                    "option_char": 2,
                    "option_character": 1,
                    "option_value": 2,
                    "second_char": 1,
                    "status_flag": 1,
                    "status_value": 1,
                    "type_char": 1,
                    "type_value": 1
                },
                "lVar2": {
                    "buffer_ptr": 1,
                    "context_ptr": 1,
                    "data_pointer": 2,
                    "data_struct": 3,
                    "data_struct_ptr": 5,
                    "data_structure": 1,
                    "data_structure_ptr": 1,
                    "event_data": 1,
                    "log_entry_ptr": 1,
                    "main_struct": 1,
                    "ptr": 1,
                    "ptr1": 2,
                    "ptr_data": 2,
                    "ptr_input": 1,
                    "struct_pointer": 2,
                    "struct_ptr": 5,
                    "structure_ptr": 1
                },
                "lVar7": {
                    "looped_memory": 1,
                    "new_data_pointer": 1,
                    "new_data_struct_ptr": 2,
                    "new_data_structure": 1,
                    "new_struct_ptr": 1,
                    "realloc_address": 2,
                    "realloc_data": 1,
                    "realloc_pointer": 2,
                    "realloc_ptr": 13,
                    "realloc_result": 3,
                    "resized_buffer": 1,
                    "resized_data_structure": 1,
                    "updated_struct_pointer": 1
                },
                "param_1": {
                    "base_address": 2,
                    "buffer": 1,
                    "buffer_size": 1,
                    "data": 2,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 4,
                    "data_struct": 3,
                    "data_structure": 2,
                    "event": 1,
                    "input": 3,
                    "input_addr": 1,
                    "input_context": 1,
                    "input_data": 3,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "log_manager": 1,
                    "param": 1,
                    "structure_ptr": 1
                },
                "param_2": {
                    "data": 3,
                    "data_value": 3,
                    "event_id": 1,
                    "log_message": 1,
                    "new_value": 1,
                    "numeric_value": 1,
                    "param_value": 1,
                    "value": 20
                },
                "param_3": {
                    "char_param": 1,
                    "char_to_append": 1,
                    "event_type": 1,
                    "flag": 22,
                    "flag1": 1,
                    "flag_char": 3,
                    "log_type": 1,
                    "mode": 1
                },
                "param_4": {
                    "condition": 1,
                    "data_type": 1,
                    "event_flag": 1,
                    "flag": 3,
                    "flag2": 1,
                    "flag_value": 1,
                    "log_version_number": 1,
                    "mode": 12,
                    "option": 5,
                    "selection": 1,
                    "status": 2,
                    "type": 2
                },
                "pcVar6": {
                    "allocated_string": 3,
                    "dynamic_string": 1,
                    "formatted_data": 1,
                    "formatted_string": 11,
                    "log_entry": 1,
                    "new_buffer": 2,
                    "new_log_entry": 1,
                    "new_str": 1,
                    "new_string": 8,
                    "processed_string": 2
                },
                "sVar": {
                    "extracted_string_length": 1
                },
                "sVar5": {
                    "data_length": 1,
                    "extracted_string_length": 1,
                    "source_length": 1,
                    "str_length": 2,
                    "string_length": 25
                },
                "uVar10": {
                    "count": 1,
                    "counter": 1,
                    "counter2": 1,
                    "current_index": 1,
                    "final_counter": 1,
                    "index": 1,
                    "index2": 2,
                    "last_index": 7,
                    "length": 1,
                    "loop_counter2": 1,
                    "loop_counter_end": 1,
                    "loop_counter_max": 1,
                    "loop_end": 1,
                    "loop_length": 1,
                    "loop_limit": 1,
                    "max_counter": 1,
                    "max_index": 3,
                    "new_size": 1,
                    "num_elements": 1,
                    "ptr_index": 1,
                    "size": 1,
                    "var2": 1
                },
                "uVar4": {
                    "counter": 7,
                    "index": 3,
                    "index2": 1,
                    "loop_counter": 4,
                    "loop_counter3": 1,
                    "loop_index": 6,
                    "loop_var": 1,
                    "loop_variable": 1
                },
                "uVar8": {
                    "result": 19,
                    "return_value": 6,
                    "success": 5,
                    "success_flag": 1
                },
                "uVar9": {
                    "counter": 3,
                    "index": 17,
                    "index1": 1,
                    "loop_counter": 6,
                    "loop_index": 1,
                    "temp": 1,
                    "temp_index": 1,
                    "var1": 1
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "xrealloc",
                "abort",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 process_input_data_0010aa53(long data_ptr,undefined8 value,char flag,int mode)\n\n{\n  char flag_value;\n  long data_struct_ptr;\n  char mode_value;\n  uint counter;\n  char *extracted_string;\n  size_t string_length;\n  char *formatted_string;\n  long realloc_ptr;\n  undefined8 result;\n  ulong index;\n  ulong last_index;\n  \n  flag_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(string_length + 0x19);\n  *formatted_string = flag + '0';\n  if (mode == 1) {\n    mode_value = '1';\n  }\n  else {\n    mode_value = '0';\n    if ((mode != 2) && (mode_value = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  formatted_string[1] = mode_value;\n  sprintf(formatted_string + 2,\"%ld,%s;\",value);\n  free(extracted_string);\n  data_struct_ptr = *(long *)(data_ptr + 0x60);\n  result = 0;\n  if ((data_struct_ptr != 0) && (*(long *)(data_struct_ptr + 0x20) != 0)) {\n    data_struct_ptr = *(long *)(data_struct_ptr + 0x28);\n    last_index = 0;\n    if (data_struct_ptr != 0) {\n      counter = 0;\n      do {\n        index = (ulong)counter;\n        last_index = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(data_struct_ptr + index * 8) != 0);\n    }\n    realloc_ptr = xrealloc(data_struct_ptr,(ulong)((int)last_index + 2) << 3);\n    *(char **)(realloc_ptr + last_index * 8) = formatted_string;\n    *(undefined8 *)(realloc_ptr + (ulong)((int)last_index + 1) * 8) = 0;\n    data_struct_ptr = *(long *)(data_ptr + 0x60);\n    *(long *)(data_struct_ptr + 0x28) = realloc_ptr;\n    if (flag_value != '\\0') {\n      *(undefined *)(data_struct_ptr + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_input_data_0010aa53",
            "entrypoint": "0x0010aa53",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010aa53": "process_input_data_0010aa53",
                "__s": "extracted_string",
                "cVar1": "flag_value",
                "cVar3": "mode_value",
                "lVar2": "data_struct_ptr",
                "lVar7": "realloc_ptr",
                "param_1": "data_ptr",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "pcVar6": "formatted_string",
                "sVar": "extracted_string_length",
                "sVar5": "string_length",
                "uVar10": "last_index",
                "uVar4": "counter",
                "uVar8": "result",
                "uVar9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ab4d": {
            "additional_data": {
                "FUN_0010ab4d": {
                    "add_string_to_pointer": 1,
                    "append_string_to_buffer": 4,
                    "append_string_to_data": 3,
                    "append_string_to_list": 1,
                    "append_string_to_prefix": 1,
                    "append_string_to_variable": 4,
                    "append_string_with_prefix": 1,
                    "append_to_existing_string": 1,
                    "append_to_hash": 1,
                    "append_to_log": 3,
                    "append_to_message": 1,
                    "append_to_string": 1,
                    "update_data": 1,
                    "update_string": 4,
                    "update_string_with_prefix": 4
                },
                "auVar3": {
                    "output_variable": 1,
                    "result": 20,
                    "result1": 1,
                    "result_with_zero": 1,
                    "return_data": 1,
                    "return_value": 6
                },
                "auVar7": {
                    "modified_return_value": 2,
                    "new_entry": 1,
                    "new_result": 3,
                    "new_return_value": 1,
                    "output_buffer": 1,
                    "result": 2,
                    "result2": 2,
                    "result_with_data": 1,
                    "return_buffer": 1,
                    "return_val": 2,
                    "return_value": 12,
                    "updated_result": 1,
                    "updated_return_value": 2
                },
                "lVar2": {
                    "buffer_address_copy": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr_2": 1,
                    "data_holder_copy": 1,
                    "data_pointer_copy": 1,
                    "data_ptr2": 3,
                    "data_struct_copy": 1,
                    "data_value2": 1,
                    "entry": 1,
                    "local_var1": 1,
                    "log_struct": 1,
                    "log_struct_base_address": 1,
                    "log_struct_copy": 1,
                    "message_ptr_copy": 1,
                    "metadata_ptr": 1,
                    "object_address_temp": 1,
                    "ptr2": 2,
                    "ptr_to_list": 1,
                    "ptr_to_struct": 1,
                    "ptr_to_struct_copy": 1,
                    "ptr_value": 1,
                    "source_struct_offset": 1,
                    "state_value": 1,
                    "string_data_copy": 1,
                    "struct_base_address": 1,
                    "struct_ptr2": 1,
                    "struct_ptr_copy": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "base_address": 2,
                    "buffer": 3,
                    "buffer_address": 1,
                    "data_address": 1,
                    "data_holder": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "data_structure": 2,
                    "hash_table": 1,
                    "input_data": 3,
                    "input_param": 1,
                    "input_struct": 1,
                    "list": 1,
                    "log_struct": 3,
                    "memory_address": 1,
                    "message": 1,
                    "ptr": 1,
                    "ptr_struct": 1,
                    "source_struct": 1,
                    "state": 1,
                    "string_data": 1
                },
                "param_2": {
                    "input_string": 5,
                    "key": 1,
                    "message": 2,
                    "new_data": 1,
                    "new_string": 2,
                    "prefix": 1,
                    "source_string": 1,
                    "str": 1,
                    "string": 3,
                    "string_to_add": 2,
                    "string_to_append": 8,
                    "suffix": 1,
                    "text": 3
                },
                "param_3": {
                    "additional_param_1": 1,
                    "arg1": 2,
                    "auxiliary1": 1,
                    "param3": 7,
                    "param_3": 6,
                    "parameter_3": 1,
                    "unused1": 1,
                    "unused_param": 4,
                    "unused_param1": 3,
                    "unused_param_1": 3,
                    "unused_param_3": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_param_2": 1,
                    "arg2": 2,
                    "auxiliary2": 1,
                    "flag": 1,
                    "param4": 7,
                    "param_4": 5,
                    "parameter_4": 1,
                    "parameter_value": 1,
                    "status_flag": 1,
                    "unused2": 1,
                    "unused_param2": 3,
                    "unused_param_2": 4,
                    "unused_param_4": 1,
                    "value": 1
                },
                "pcVar5": {
                    "allocated_string": 1,
                    "appended_string": 1,
                    "buffer": 1,
                    "concatenated_string": 1,
                    "current_string": 1,
                    "destination": 1,
                    "destination_string": 1,
                    "existing_buffer": 1,
                    "existing_data": 1,
                    "existing_string": 15,
                    "existing_value": 1,
                    "log_buffer": 1,
                    "log_message": 1,
                    "prefix": 1,
                    "ptr_string": 1,
                    "text_buffer": 1,
                    "updated_string": 1
                },
                "sVar4": {
                    "append_length": 1,
                    "input_len": 2,
                    "input_length": 1,
                    "input_string_length": 4,
                    "key_length": 1,
                    "len_string": 1,
                    "message_len": 1,
                    "message_length": 1,
                    "new_data_length": 1,
                    "new_string_len": 1,
                    "new_string_length": 1,
                    "original_string_length": 1,
                    "prefix_length": 1,
                    "source_length": 1,
                    "str_length": 1,
                    "string_length": 5,
                    "string_length1": 1,
                    "string_to_append_length": 2,
                    "suffix_len": 1,
                    "text_length": 3
                },
                "sVar6": {
                    "allocated_string_length": 1,
                    "buffer_length": 2,
                    "concatenated_string_length": 1,
                    "current_string_length": 1,
                    "destination_length": 2,
                    "existing_data_length": 1,
                    "existing_string_len": 1,
                    "existing_string_length": 15,
                    "len_existing_buffer": 1,
                    "log_buffer_len": 1,
                    "log_string_length": 1,
                    "prefix_len": 1,
                    "string_length2": 1,
                    "updated_string_len": 1,
                    "value_length": 1
                },
                "uVar1": {
                    "buffer_address": 1,
                    "buffer_ptr": 1,
                    "buffer_size": 1,
                    "data_pointer": 4,
                    "data_ptr": 1,
                    "data_ptr1": 1,
                    "data_value": 1,
                    "entry": 1,
                    "log_base_address": 1,
                    "log_entry": 1,
                    "log_pointer": 1,
                    "memory_value": 1,
                    "message_ptr": 1,
                    "metadata": 1,
                    "object_address": 1,
                    "pointer_value": 1,
                    "ptr": 1,
                    "ptr1": 2,
                    "ptr_to_list": 1,
                    "ptr_to_struct": 2,
                    "state_address": 1,
                    "string_length": 1,
                    "struct_address": 1,
                    "struct_ptr": 2,
                    "target_struct_offset": 1
                }
            },
            "called": [
                "sprintf",
                "xmalloc",
                "xrealloc",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] update_string_with_prefix_0010ab4d(long buffer,char *string_to_append,undefined8 param3,undefined8 param4)\n\n{\n  ulong data_pointer;\n  long data_ptr2;\n  undefined result [16];\n  size_t string_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  data_pointer = *(ulong *)(buffer + 0x60);\n  if ((data_pointer != 0) && (*(long *)(data_pointer + 0x20) != 0)) {\n    existing_string = *(char **)(data_pointer + 0x30);\n    string_length = strlen(string_to_append);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(string_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,string_length + 4 + existing_string_length);\n    }\n    string_length = strlen(existing_string);\n    sprintf(existing_string + string_length,\"%s::\",string_to_append);\n    data_ptr2 = *(long *)(buffer + 0x60);\n    *(char **)(data_ptr2 + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)data_ptr2 >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = data_pointer;\n  return result << 0x40;\n}\n\n",
            "current_name": "update_string_with_prefix_0010ab4d",
            "entrypoint": "0x0010ab4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ab4d": "update_string_with_prefix_0010ab4d",
                "auVar3": "result",
                "auVar7": "return_value",
                "lVar2": "data_ptr2",
                "param_1": "buffer",
                "param_2": "string_to_append",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar5": "existing_string",
                "sVar4": "string_length",
                "sVar6": "existing_string_length",
                "uVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010abdd": {
            "additional_data": {
                "FUN_0010abdd": {
                    "enhanced_function": 1,
                    "generate_formatted_message": 1,
                    "generate_formatted_string": 1,
                    "improve_and_store_data": 1,
                    "parse_input": 1,
                    "parse_option_and_store": 1,
                    "process_data": 8,
                    "process_params": 1,
                    "reverse_and_concatenate_strings": 1,
                    "transform_data": 1,
                    "update_and_format_string": 1,
                    "update_configuration": 2,
                    "update_data": 4,
                    "update_metadata": 1,
                    "update_record": 2
                },
                "__s": {
                    "additional_data": 1,
                    "additional_ptr": 1,
                    "allocated_string3": 1,
                    "data3": 2,
                    "extra_data": 2,
                    "extra_ptr": 1,
                    "extra_str": 1,
                    "extra_string": 1,
                    "extracted_data": 1,
                    "extracted_ptr2": 1,
                    "ptr3": 3,
                    "ptr4": 6,
                    "ptr_4": 1,
                    "str": 2,
                    "str3": 3,
                    "str4": 1,
                    "string3": 2,
                    "string4": 1
                },
                "bVar3": {
                    "byte_2": 1,
                    "byte_val": 3,
                    "byte_value": 1,
                    "byte_var": 3,
                    "flag_byte": 1,
                    "local_flag": 1,
                    "temp": 1,
                    "temp_byte": 1,
                    "value": 1
                },
                "cVar10": {
                    "calc_var1": 1,
                    "char1": 16,
                    "char_1": 2,
                    "char_val1": 3,
                    "char_var": 1,
                    "char_var1": 3,
                    "char_var_1": 1,
                    "character1": 2,
                    "new_flag": 1,
                    "temp_char1": 1
                },
                "cVar11": {
                    "calc_var2": 1,
                    "char2": 16,
                    "char_2": 2,
                    "char_val2": 3,
                    "char_var2": 4,
                    "char_var_2": 1,
                    "character2": 2,
                    "flag_char": 1,
                    "temp_char2": 1
                },
                "lVar1": {
                    "binary_ptr": 1,
                    "config_pointer": 1,
                    "config_ptr": 1,
                    "data": 1,
                    "data_length": 1,
                    "data_pointer": 3,
                    "data_ptr": 3,
                    "data_ptr1": 1,
                    "data_struct": 1,
                    "data_struct_address": 1,
                    "metadata_ptr": 1,
                    "ptr": 2,
                    "ptr1": 6,
                    "ptr_1": 1,
                    "ptr_to_struct": 1,
                    "record_data": 1,
                    "record_ptr": 1,
                    "struct_address": 1,
                    "struct_pointer": 1,
                    "struct_ptr": 1
                },
                "local_52": {
                    "byte1": 3,
                    "byte_1": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "byte_var": 1,
                    "byte_var2": 1,
                    "flag5": 1,
                    "local_byte": 9,
                    "local_flag": 5,
                    "local_flag2": 1,
                    "local_var": 4,
                    "stored_flag": 1,
                    "temp_byte": 1
                },
                "param_1": {
                    "arg1": 1,
                    "binary_context": 1,
                    "config": 2,
                    "config_ptr": 1,
                    "data": 4,
                    "data_address": 1,
                    "data_length": 1,
                    "data_pointer": 3,
                    "data_ptr": 3,
                    "data_struct": 1,
                    "file_address": 1,
                    "input_address": 1,
                    "input_data": 2,
                    "input_param": 2,
                    "input_value": 2,
                    "metadata": 1,
                    "param": 1,
                    "record": 2,
                    "source_data": 1
                },
                "param_2": {
                    "data1": 1,
                    "field1": 1,
                    "input_string": 2,
                    "message": 1,
                    "name": 1,
                    "option_string": 1,
                    "source": 1,
                    "str1": 2,
                    "string1": 16,
                    "string_1": 2,
                    "string_param": 1,
                    "value": 2
                },
                "param_3": {
                    "count": 4,
                    "field2": 1,
                    "flag": 1,
                    "input_length": 2,
                    "length": 11,
                    "num1": 6,
                    "option_length": 1,
                    "string2_length": 1,
                    "string_length": 3,
                    "type": 1
                },
                "param_4": {
                    "bool1": 1,
                    "condition1": 1,
                    "flag1": 26,
                    "flag_1": 2,
                    "is_param4": 1
                },
                "param_5": {
                    "bool2": 1,
                    "condition2": 1,
                    "flag2": 26,
                    "flag_2": 2,
                    "is_param5": 1
                },
                "param_6": {
                    "bool3": 1,
                    "condition3": 1,
                    "flag3": 26,
                    "flag_3": 2,
                    "is_param6": 1
                },
                "param_7": {
                    "arg2": 1,
                    "long_value": 2,
                    "num": 1,
                    "num2": 3,
                    "param7": 1,
                    "timestamp": 1,
                    "unknown_value": 1,
                    "value": 16,
                    "value1": 5
                },
                "param_8": {
                    "bool4": 1,
                    "condition4": 1,
                    "flag4": 25,
                    "flag_4": 2,
                    "is_extra": 1,
                    "is_param8": 1
                },
                "pcVar2": {
                    "allocated_string1": 1,
                    "concatenated_string": 1,
                    "config_data": 2,
                    "config_value": 1,
                    "data": 1,
                    "data1": 2,
                    "data_ptr2": 1,
                    "existing_data": 1,
                    "metadata_data": 1,
                    "ptr1": 4,
                    "ptr2": 6,
                    "ptr_2": 1,
                    "str1": 2,
                    "str2": 2,
                    "str_ptr": 2,
                    "string1": 1,
                    "string2": 2
                },
                "pcVar4": {
                    "allocated_string2": 1,
                    "data2": 2,
                    "extracted_data": 2,
                    "extracted_ptr": 5,
                    "extracted_string": 1,
                    "input_string": 1,
                    "new_data": 1,
                    "ptr": 1,
                    "ptr2": 4,
                    "ptr3": 6,
                    "ptr_3": 1,
                    "str2": 2,
                    "str3": 1,
                    "string2": 1,
                    "string3": 1,
                    "temp_str": 1
                },
                "sVar5": {
                    "config_data_length": 2,
                    "data1_length": 1,
                    "existing_data_length": 1,
                    "len1": 6,
                    "len_1": 1,
                    "len_data1": 1,
                    "length1": 10,
                    "length_1": 1,
                    "length_var_1": 1,
                    "size1": 1,
                    "str1_len": 1,
                    "str_length1": 1,
                    "string2_length1": 1,
                    "strlen1": 1
                },
                "sVar6": {
                    "data2_length": 1,
                    "extracted_data_length": 2,
                    "extracted_string_length": 1,
                    "len2": 6,
                    "len_2": 1,
                    "len_data2": 1,
                    "length2": 10,
                    "length_2": 1,
                    "length_var_2": 1,
                    "new_data_length": 1,
                    "size2": 1,
                    "str2_len": 1,
                    "str_length_extracted": 1,
                    "strlen2": 1
                },
                "sVar7": {
                    "field1_len": 1,
                    "input_length": 1,
                    "len3": 5,
                    "len_3": 1,
                    "len_string1": 1,
                    "length3": 10,
                    "length_3": 1,
                    "length_var_3": 1,
                    "name_length": 1,
                    "option_len": 1,
                    "size3": 1,
                    "str_length2": 1,
                    "string1_length": 1,
                    "strlen3": 1,
                    "value_length": 2
                },
                "sVar8": {
                    "additional_data_length": 1,
                    "data3_length": 1,
                    "extra_data_length": 2,
                    "extra_length": 1,
                    "extra_string_length": 1,
                    "len3": 1,
                    "len4": 5,
                    "len_4": 1,
                    "len_data3": 1,
                    "length4": 10,
                    "length_var_4": 1,
                    "size4": 1,
                    "str3_len": 1,
                    "string3_length": 1,
                    "strlen4": 1
                },
                "uVar9": {
                    "result": 28,
                    "return_value": 3
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "xrealloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "code": "\nundefined8\nprocess_data_0010abdd(long data,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long ptr1;\n  char *ptr2;\n  byte byte_val;\n  char *ptr3;\n  char *ptr4;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte local_byte;\n  \n  ptr4 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  ptr3 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    ptr4 = (char *)extract_and_free_ptr_00109b2f(data);\n  }\n  ptr1 = *(long *)(data + 0x60);\n  if ((ptr1 == 0) || (ptr2 = *(char **)(ptr1 + 0x30), ptr2 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(ptr2);\n    length2 = strlen(ptr3);\n    length3 = strlen(string1);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(ptr4);\n    }\n    result = xrealloc(ptr2,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    ptr2 = *(char **)(*(long *)(data + 0x60) + 0x30);\n    length1 = strlen(ptr2);\n    sprintf(ptr2 + length1,\"%s:%s;%c%c%c\",ptr3,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,length1);\n    free(ptr3);\n    if (flag4 != '\\0') {\n      ptr3 = *(char **)(*(long *)(data + 0x60) + 0x30);\n      length1 = strlen(ptr3);\n      sprintf(ptr3 + length1,\"%ld;%s;\",value,ptr4);\n      free(ptr4);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0010abdd",
            "entrypoint": "0x0010abdd",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "__s": "ptr4",
                "bVar3": "byte_val",
                "cVar10": "char1",
                "cVar11": "char2",
                "lVar1": "ptr1",
                "local_52": "local_byte",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "pcVar2": "ptr2",
                "pcVar4": "ptr3",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010add5": {
            "additional_data": {
                "FUN_0010add5": {
                    "execute_data_processing": 1,
                    "perform_data_processing": 1,
                    "process_and_return": 6,
                    "process_and_return_data": 7,
                    "process_data": 15,
                    "process_data_and_return": 1
                },
                "process_data_0010abdd": {
                    "data_processing_function": 1,
                    "extract_data": 2,
                    "fetch_and_process": 1,
                    "process_data": 24,
                    "process_data_helper": 1,
                    "process_data_internal": 1
                },
                "ptr_param_1": {
                    "ptr_data_1": 1
                },
                "ptr_param_2": {
                    "ptr_data_2": 1
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_data_and_return_0010add5(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "current_name": "process_data_and_return_0010add5",
            "entrypoint": "0x0010add5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010add5": "process_data_and_return_0010add5",
                "process_data_0010abdd": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010adf2": {
            "additional_data": {
                "FUN_0010abdd": {
                    "process_data_helper": 1
                },
                "FUN_0010adf2": {
                    "process_and_return": 1,
                    "process_and_return_data": 6,
                    "process_data": 24
                },
                "process_data_0010abdd": {
                    "extract_and_process_data": 1,
                    "extract_data": 1,
                    "perform_data_processing": 1,
                    "process_data": 25,
                    "process_data_internal": 1,
                    "retrieve_data": 1
                }
            },
            "called": [
                "FUN_0010abdd"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid process_and_return_data_0010adf2(void)\n\n{\n  process_data();\n  return;\n}\n\n",
            "current_name": "process_and_return_data_0010adf2",
            "entrypoint": "0x0010adf2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010adf2": "process_and_return_data_0010adf2",
                "process_data_0010abdd": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ae0e": {
            "additional_data": {
                "CHAR_NULL": {
                    "null_terminator": 1
                },
                "FUN_0010ae0e": {
                    "assemble_command": 1,
                    "assemble_final_string": 1,
                    "build_string_from_pointers": 1,
                    "combine_strings": 1,
                    "concatenate_strings": 4,
                    "create_improved_code": 1,
                    "decompile_and_improve": 1,
                    "extract_and_combine_strings": 1,
                    "extract_and_concatenate_data": 1,
                    "extract_and_concatenate_strings": 2,
                    "extract_string": 1,
                    "extract_strings_from_binary": 1,
                    "merge_strings": 1,
                    "process_data": 1,
                    "reconstruct_string": 1,
                    "reformat_and_merge_strings": 1,
                    "reverse_and_concatenate": 1,
                    "reverse_and_concatenate_strings": 4
                },
                "__ptr": {
                    "dynamic_ptr": 1,
                    "pointer": 1,
                    "pointer_3": 1,
                    "ptr": 8,
                    "ptr3": 2,
                    "ptr_temp": 1,
                    "string_ptr": 1,
                    "sub_string": 1,
                    "temp_pointer": 6,
                    "temp_ptr": 5,
                    "tmp_pointer": 1,
                    "void_ptr": 3
                },
                "_ptr": {
                    "_ptr": 1
                },
                "free": {
                    "deallocate_memory": 1
                },
                "lVar1": {
                    "base_address": 2,
                    "command_info": 1,
                    "current_address": 1,
                    "current_data": 1,
                    "data_struct": 2,
                    "data_struct_addr": 1,
                    "param1": 1,
                    "pointer": 1,
                    "pointer_1": 1,
                    "ptr1": 3,
                    "record": 1,
                    "string_pointer": 1,
                    "struct_address": 2,
                    "struct_pointer": 5,
                    "struct_ptr": 6,
                    "structure": 1,
                    "var1": 1
                },
                "lVar2": {
                    "arg_list": 1,
                    "array_pointer": 3,
                    "array_ptr": 2,
                    "aux_pointer": 1,
                    "element": 1,
                    "loop_index": 1,
                    "loop_var": 1,
                    "param2": 1,
                    "pointer2": 1,
                    "pointer_2": 1,
                    "ptr": 3,
                    "ptr2": 3,
                    "ptr_address": 1,
                    "ptr_arr": 1,
                    "ptr_array": 1,
                    "ptr_data": 1,
                    "str_array_pointer": 1,
                    "string_address": 1,
                    "string_array_address": 1,
                    "string_array_pointer": 1,
                    "string_ptr": 1,
                    "strings_array_address": 1,
                    "sub_strings": 1,
                    "var2": 1
                },
                "lVar8": {
                    "final_len": 2,
                    "final_string_length": 2,
                    "new_string_length": 1,
                    "output_len": 1,
                    "result_len": 1,
                    "result_length": 2,
                    "total_len": 11,
                    "total_length": 11
                },
                "param_1": {
                    "binary_address": 2,
                    "command_data": 1,
                    "input": 16,
                    "input_address": 1,
                    "input_data": 3,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_ptr": 1,
                    "input_string": 1,
                    "param": 2
                },
                "pcVar3": {
                    "char_ptr": 1,
                    "str": 3,
                    "str1": 1,
                    "str_ptr": 4,
                    "str_var": 1,
                    "string": 1,
                    "string_1": 1,
                    "string_pointer": 1,
                    "temp_char_pointer": 1,
                    "temp_char_ptr": 2,
                    "temp_str": 3,
                    "temp_str_pointer": 1,
                    "temp_string": 7,
                    "temp_string_pointer": 2,
                    "temp_var": 1,
                    "var3": 1
                },
                "pcVar6": {
                    "command_str": 1,
                    "concatenated_str": 1,
                    "concatenated_string": 5,
                    "final_string": 2,
                    "new_string": 1,
                    "new_string_pointer": 1,
                    "new_string_ptr": 1,
                    "output": 1,
                    "output_str": 1,
                    "result": 5,
                    "result_ptr": 1,
                    "result_str": 3,
                    "result_string": 5,
                    "result_string_pointer": 1,
                    "str2": 1,
                    "string_2": 1
                },
                "sVar4": {
                    "len1": 12,
                    "len_1": 1,
                    "len_base_string": 1,
                    "len_str1": 1,
                    "length1": 10,
                    "length_1": 2,
                    "string_len1": 1,
                    "string_length1": 1,
                    "string_length_1": 1,
                    "strlen1": 1
                },
                "sVar5": {
                    "len2": 12,
                    "len_2": 1,
                    "len_str2": 1,
                    "len_sub_string": 1,
                    "length2": 10,
                    "length_2": 2,
                    "string_len2": 1,
                    "string_length2": 1,
                    "string_length_2": 1,
                    "strlen2": 1
                },
                "sprintf": {
                    "format_string": 1
                },
                "strcat": {
                    "concatenate_string": 1
                },
                "strcpy": {
                    "copy_string": 1
                },
                "strlen": {
                    "get_length": 1
                },
                "uVar10": {
                    "additional_len": 1,
                    "arg_count": 1,
                    "arr_length": 1,
                    "array_length": 2,
                    "aux_counter": 1,
                    "count": 9,
                    "count2": 1,
                    "counter": 1,
                    "index": 4,
                    "length": 1,
                    "length_count": 1,
                    "loop_index": 1,
                    "num_elements": 2,
                    "num_ptrs": 1,
                    "num_strings": 2,
                    "number_of_strings": 1,
                    "total_loops": 1
                },
                "uVar11": {
                    "temp_var": 1
                },
                "uVar7": {
                    "output": 1,
                    "result": 8,
                    "return_value": 20,
                    "retval": 2
                },
                "uVar9": {
                    "arg_index": 1,
                    "count": 3,
                    "count1": 1,
                    "counter": 11,
                    "i": 2,
                    "index": 7,
                    "iteration_count": 1,
                    "loop_counter": 2,
                    "loop_var": 1,
                    "loop_variable": 1,
                    "num_sub_strings": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                }
            },
            "called": [
                "strcpy",
                "free",
                "sprintf",
                "strcat",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 reverse_and_concatenate_strings_0010ae0e(long input)\n\n{\n  long struct_ptr;\n  long array_pointer;\n  void *ptr;\n  char *temp_string;\n  size_t len1;\n  size_t len2;\n  char *concatenated_string;\n  undefined8 return_value;\n  long total_length;\n  uint counter;\n  ulong count;\n  \n  return_value = 0;\n  struct_ptr = *(long *)(input + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (concatenated_string = *(char **)(struct_ptr + 0x20), concatenated_string != (char *)0x0)) {\n    len1 = strlen(*(char **)(struct_ptr + 8));\n    len2 = strlen(concatenated_string);\n    array_pointer = *(long *)(struct_ptr + 0x28);\n    if (array_pointer == 0) {\n      total_length = len1 + len2 + 10;\n      count = 0;\n    }\n    else {\n      total_length = len1 + len2 + 0x1e;\n      count = 0;\n      while( true ) {\n        concatenated_string = *(char **)(array_pointer + count * 8);\n        if (concatenated_string == (char *)0x0) break;\n        len1 = strlen(concatenated_string);\n        count = (ulong)((int)count + 1);\n        total_length = total_length + len1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_length = total_length + len1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_length = total_length + len1;\n    }\n    concatenated_string = (char *)xmalloc(total_length);\n    struct_ptr = *(long *)(input + 0x60);\n    strcpy(concatenated_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(concatenated_string);\n      sprintf(concatenated_string + len1,\"!%u,\",count);\n      while( true ) {\n        struct_ptr = *(long *)(input + 0x60);\n        count = (ulong)counter;\n        ptr = *(void **)(struct_ptr + 0x28);\n        temp_string = *(char **)((long)ptr + count * 8);\n        if (temp_string == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(concatenated_string,temp_string);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + count * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input + 0x60);\n    strcat(concatenated_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(concatenated_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(concatenated_string);\n    struct_ptr = *(long *)(input + 0x60);\n    *(undefined2 *)(concatenated_string + len1) = 0x3b;\n    temp_string = *(char **)(struct_ptr + 0x38);\n    if (temp_string != (char *)0x0) {\n      strcpy(concatenated_string + len1 + 1,temp_string);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    struct_ptr = *(long *)(input + 0x60);\n    *(char **)(struct_ptr + 8) = concatenated_string;\n    return_value = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "reverse_and_concatenate_strings_0010ae0e",
            "entrypoint": "0x0010ae0e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ae0e": "reverse_and_concatenate_strings_0010ae0e",
                "__ptr": "ptr",
                "free": "deallocate_memory",
                "lVar1": "struct_ptr",
                "lVar2": "array_pointer",
                "lVar8": "total_length",
                "param_1": "input",
                "pcVar3": "temp_string",
                "pcVar6": "concatenated_string",
                "sVar4": "len1",
                "sVar5": "len2",
                "sprintf": "format_string",
                "strcat": "concatenate_string",
                "strcpy": "copy_string",
                "strlen": "get_length",
                "uVar10": "count",
                "uVar7": "return_value",
                "uVar9": "counter",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010afd5": {
            "additional_data": {
                "FUN_0010afd5": {
                    "find_and_free_memory": 2,
                    "find_and_free_memory_block": 2,
                    "find_match": 1,
                    "find_matching_string": 4,
                    "find_string": 2,
                    "find_string_and_return": 1,
                    "find_string_and_return_memory": 1,
                    "find_string_in_data_structure": 5,
                    "find_string_in_data_structures": 1,
                    "find_string_in_memory": 2,
                    "find_string_in_nested_linked_list": 1,
                    "find_string_in_nested_structures": 3,
                    "find_string_match": 1,
                    "find_string_value": 1,
                    "reverse_and_assign_memory": 1,
                    "search_and_allocate": 1,
                    "search_and_free": 1
                },
                "_0_8_": {
                    "value_4": 1
                },
                "_8_8_": {
                    "result": 1
                },
                "__s2": {
                    "input_string": 3,
                    "input_string_copy": 3,
                    "matching_string": 1,
                    "search_str": 1,
                    "search_str_copy": 1,
                    "search_string": 11,
                    "search_string_copy": 7,
                    "str": 1,
                    "string_copy": 1,
                    "string_to_find_copy": 1,
                    "target_string": 1
                },
                "auVar8": {
                    "output": 1,
                    "output_tuple": 1,
                    "result": 6,
                    "return_value": 22
                },
                "bVar7": {
                    "b_var": 2,
                    "b_var7": 1,
                    "byte_var": 1,
                    "count": 1,
                    "counter": 6,
                    "flag": 5,
                    "index": 2,
                    "is_first_iteration": 1,
                    "is_first_loop": 1,
                    "loop_counter": 5,
                    "loop_index": 1,
                    "temp_byte": 3,
                    "temp_byte_variable": 1,
                    "temp_var": 1
                },
                "copy_and_null_terminate_string_00109a0b": {
                    "copy_and_null_terminate_string": 3,
                    "copy_string": 2,
                    "copy_string_and_null_terminate": 1
                },
                "free": {
                    "dealloc": 1,
                    "free_memory": 3,
                    "release_memory": 2
                },
                "iVar1": {
                    "comparison_result": 6,
                    "result": 1
                },
                "initialize_and_assign_memory_block_00113e23": {
                    "init_assign_memory_block": 1,
                    "init_memory_block": 1,
                    "initialize_and_assign_memory_block": 4
                },
                "lVar4": {
                    "assigned_value": 1,
                    "block_offset": 1,
                    "block_size": 4,
                    "current_value2": 1,
                    "data": 1,
                    "data_block": 1,
                    "data_value": 1,
                    "memory_block_size": 1,
                    "memory_value": 1,
                    "node_value": 1,
                    "offset": 1,
                    "result": 1,
                    "temp": 1,
                    "temp_len": 1,
                    "temp_length": 1,
                    "temp_long": 1,
                    "temp_long_variable": 1,
                    "temp_value": 2,
                    "temp_var2": 2,
                    "temp_variable": 1,
                    "tmp_var2": 1,
                    "value": 4,
                    "value_4": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "data_structure": 4,
                    "data_structures": 1,
                    "head": 1,
                    "input_list": 1,
                    "linked_list": 10,
                    "linkedlist1": 1,
                    "linkedlist_head": 1,
                    "list": 3,
                    "list_head": 2,
                    "list_ptr": 1,
                    "memory_block_list": 1,
                    "nested_struct_list": 1,
                    "param_list": 1,
                    "string_list": 2
                },
                "param_2": {
                    "binary_data": 1,
                    "context": 7,
                    "data": 3,
                    "data_buffer": 1,
                    "data_struct": 2,
                    "data_structure": 3,
                    "function_param_2": 1,
                    "heap_memory": 1,
                    "main_struct": 1,
                    "main_structure": 1,
                    "other_data_structure": 1,
                    "param_pointer": 1,
                    "param_size": 1,
                    "struct_offset": 1,
                    "struct_ptr": 5,
                    "structure_pointer": 1
                },
                "param_3": {
                    "input_string": 6,
                    "search_string": 8,
                    "source": 1,
                    "str": 3,
                    "str_to_find": 1,
                    "string": 5,
                    "string_data": 1,
                    "string_ptr": 2,
                    "string_to_find": 3,
                    "string_to_match": 1
                },
                "param_4": {
                    "input_length": 1,
                    "len": 3,
                    "length": 4,
                    "length_of_string": 3,
                    "search_length": 1,
                    "search_string_length": 1,
                    "search_string_size": 2,
                    "size_of_string": 1,
                    "source_length": 1,
                    "str_len": 2,
                    "str_length": 2,
                    "string_length": 10
                },
                "param_5": {
                    "data": 1,
                    "data_value": 1,
                    "default_param": 1,
                    "default_value": 8,
                    "new_param": 1,
                    "new_value": 2,
                    "param_5": 5,
                    "replacement_value": 1,
                    "some_value": 1,
                    "value": 10
                },
                "param_6": {
                    "default_result": 2,
                    "default_return_value": 1,
                    "initial_value": 1,
                    "memory_block": 9,
                    "param_6": 5,
                    "result": 7,
                    "result_value": 1,
                    "return_address": 2,
                    "return_pointer": 1,
                    "return_value": 1,
                    "user_input": 1
                },
                "puVar2": {
                    "curr_node": 1,
                    "current": 1,
                    "current_block": 1,
                    "current_data": 1,
                    "current_entry": 1,
                    "current_item": 1,
                    "current_list": 1,
                    "current_nested_struct": 1,
                    "current_node": 17,
                    "current_param": 1,
                    "current_structure": 2,
                    "list_ptr": 1,
                    "node": 1,
                    "node_ptr1": 1
                },
                "puVar5": {
                    "block_pointer": 2,
                    "current_node": 1,
                    "current_search_data": 1,
                    "current_sub_entry": 1,
                    "current_subnode": 1,
                    "current_value": 1,
                    "entry": 1,
                    "inner_list": 1,
                    "inner_list_ptr": 1,
                    "inner_node": 12,
                    "inner_structure": 2,
                    "nested_node": 1,
                    "nested_struct": 1,
                    "nested_struct_list_iter": 1,
                    "node_ptr2": 1,
                    "ptr": 1,
                    "string_node": 1,
                    "sub_list": 1
                },
                "puVar6": {
                    "data_ptr": 1,
                    "inner_data": 1,
                    "inner_list_ptr2": 1,
                    "inner_node_data": 1,
                    "inner_node_index": 1,
                    "inner_node_next": 1,
                    "inner_node_ptr": 1,
                    "inner_node_value": 1,
                    "inner_node_var": 1,
                    "inner_structure_variable": 1,
                    "inner_value": 1,
                    "nested_node_ptr": 1,
                    "nested_struct_property": 1,
                    "ptr": 3,
                    "ptr2": 1,
                    "ptr_int": 1,
                    "sub_entry_pointer": 1,
                    "sub_node": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 8,
                    "tmp_ptr": 1
                },
                "strcmp": {
                    "compare_strings": 6
                },
                "uVar3": {
                    "current_value": 1,
                    "previous_entry": 1,
                    "previous_node": 2,
                    "result": 2,
                    "temp": 8,
                    "temp_ptr": 1,
                    "temp_value": 5,
                    "temp_var": 7,
                    "temp_variable": 2,
                    "tmp_var": 1
                },
                "xmalloc": {
                    "allocate_memory": 6
                }
            },
            "called": [
                "free",
                "xmalloc",
                "FUN_00109a0b",
                "FUN_00113e23",
                "strcmp"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nfind_string_in_data_structure_0010afd5(undefined8 *linked_list,long context,undefined8 search_string,undefined4 string_length,\n            undefined4 value,undefined8 memory_block)\n\n{\n  int comparison_result;\n  char *search_string;\n  undefined8 *current_node;\n  undefined8 temp;\n  long block_size;\n  undefined8 *inner_node;\n  undefined4 *temp_ptr;\n  byte counter;\n  undefined return_value [16];\n  \n  counter = 0;\n  search_string = (char *)copy_and_null_terminate_string(search_string,string_length);\n  for (linked_list = (undefined8 *)*linked_list; linked_list != (undefined8 *)0x0;\n      linked_list = (undefined8 *)*linked_list) {\n    for (current_node = (undefined8 *)linked_list[1]; current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      if ((undefined8 *)current_node[2] != (undefined8 *)0x0) {\n        for (inner_node = *(undefined8 **)(undefined8 *)current_node[2]; inner_node != (undefined8 *)0x0;\n            inner_node = (undefined8 *)*inner_node) {\n          if ((*(int *)((long)inner_node + 0x14) == 1) && (*(char *)inner_node[1] == *search_string)) {\n            comparison_result = strcmp((char *)inner_node[1],search_string);\n            if (comparison_result == 0) {\n              block_size = inner_node[4];\n              if (block_size == 0) goto LAB_0010b05b;\n              free_memory(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node == (undefined8 *)0x0) {\n      current_node = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(context + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node + 0x14);\n      for (block_size = 5; block_size != 0; block_size = block_size + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_node + 2) = value;\n      *current_node = temp;\n      current_node[1] = search_string;\n      temp = initialize_and_assign_memory_block(current_node + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_node;\n      current_node[4] = temp;\nLAB_0010b0e7:\n      block_size = current_node[4];\nLAB_0010b0eb:\n      return_value.result = memory_block;\n      return_value.value_4 = block_size;\n      return return_value;\n    }\n    if (*(char *)current_node[1] == *search_string) {\n      comparison_result = strcmp((char *)current_node[1],search_string);\n      if (comparison_result == 0) {\n        if (*(int *)(current_node + 2) == 0) {\n          *(undefined4 *)(current_node + 2) = value;\n        }\n        free_memory(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node = (undefined8 *)*current_node;\n  } while( true );\n}\n\n",
            "current_name": "find_string_in_data_structure_0010afd5",
            "entrypoint": "0x0010afd5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010afd5": "find_string_in_data_structure_0010afd5",
                "_0_8_": "value_4",
                "_8_8_": "result",
                "__s2": "search_string",
                "auVar8": "return_value",
                "bVar7": "counter",
                "copy_and_null_terminate_string_00109a0b": "copy_and_null_terminate_string",
                "free": "free_memory",
                "iVar1": "comparison_result",
                "initialize_and_assign_memory_block_00113e23": "initialize_and_assign_memory_block",
                "lVar4": "block_size",
                "param_1": "linked_list",
                "param_2": "context",
                "param_3": "search_string",
                "param_4": "string_length",
                "param_5": "value",
                "param_6": "memory_block",
                "puVar2": "current_node",
                "puVar5": "inner_node",
                "puVar6": "temp_ptr",
                "strcmp": "compare_strings",
                "uVar3": "temp",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b0fa": {
            "additional_data": {
                "FUN_0010b0fa": {
                    "decode_and_initialize_data": 1,
                    "demangle_and_initialize_memory": 3,
                    "demangle_and_initialize_memory_block": 1,
                    "improve_extract_value": 1,
                    "parse_demangled_string": 1,
                    "parse_source_code": 1,
                    "process_demangle_component": 1
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "block_ptr": 1,
                    "code_block": 1,
                    "data_pointer": 1,
                    "memory_block": 9,
                    "memory_block_ptr": 5,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "pointer": 1,
                    "ptr": 7,
                    "void_pointer": 1
                },
                "iVar2": {
                    "comparison_result": 23,
                    "index": 1,
                    "int_value": 1,
                    "result": 1,
                    "value_2": 1,
                    "var2": 4
                },
                "lVar7": {
                    "arglist_length": 2,
                    "block_length": 1,
                    "data_type": 1,
                    "demangled_str_len": 1,
                    "length": 8,
                    "length_value": 1,
                    "length_var": 1,
                    "list_arg_length": 1,
                    "long_value": 3,
                    "long_var": 1,
                    "long_variable": 1,
                    "size": 4,
                    "size_of_block": 1,
                    "size_of_memory_block": 1,
                    "value": 1,
                    "var7": 1,
                    "variable1": 1
                },
                "local_40": {
                    "buffer": 3,
                    "local_array": 8,
                    "local_buffer": 12,
                    "local_variable": 2,
                    "temp_array": 1,
                    "temp_buffer": 1
                },
                "param_1": {
                    "arg1": 5,
                    "arg_1": 1,
                    "first_param": 1,
                    "input1": 1,
                    "input_param": 2,
                    "input_param1": 2,
                    "input_param_1": 4,
                    "input_parameter_1": 1,
                    "param1": 8,
                    "param_1": 4,
                    "parameter_1": 2
                },
                "param_2": {
                    "arg2": 5,
                    "arg_2": 1,
                    "input2": 1,
                    "input_param2": 2,
                    "input_param_2": 4,
                    "input_parameter_2": 1,
                    "output_param": 2,
                    "param2": 8,
                    "param_2": 4,
                    "parameter_2": 2,
                    "second_param": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array": 2,
                    "array_param": 1,
                    "array_ptr": 1,
                    "data_array": 2,
                    "data_ptr": 1,
                    "input_array": 3,
                    "input_param_3": 4,
                    "input_parameter_3": 1,
                    "param3": 6,
                    "param_array": 6,
                    "param_list": 1,
                    "parameter_3": 2
                },
                "param_4": {
                    "arg4": 1,
                    "debug_info": 10,
                    "debug_info_param": 1,
                    "debug_info_ptr": 2,
                    "debug_param": 2,
                    "input_param_4": 4,
                    "input_parameter_4": 1,
                    "long_param": 1,
                    "param": 1,
                    "param4": 6,
                    "parameter_4": 2
                },
                "param_5": {
                    "arg5": 1,
                    "err_flag_ptr": 1,
                    "error_code": 1,
                    "error_flag": 10,
                    "error_param": 1,
                    "input_param_5": 4,
                    "input_parameter_5": 1,
                    "output_param": 2,
                    "param5": 6,
                    "parameter_5": 2,
                    "result": 1,
                    "status_param": 1
                },
                "pcVar3": {
                    "output_string": 3,
                    "result": 10,
                    "result_ptr": 1,
                    "result_str": 2,
                    "result_string": 12,
                    "return_value": 1,
                    "string_result": 2
                },
                "pcVar5": {
                    "demangled_string": 1,
                    "demangled_type": 1,
                    "demangled_type_string": 1,
                    "error_message": 2,
                    "error_string": 2,
                    "initialize_result": 1,
                    "initialized_block": 1,
                    "initialized_string": 1,
                    "message": 3,
                    "message_ptr": 1,
                    "output_value": 1,
                    "pointer_2": 1,
                    "print_string": 2,
                    "ptr_result": 1,
                    "string_result": 3,
                    "temp_result": 1,
                    "temp_string": 5,
                    "temporary_string": 1,
                    "text_string": 1,
                    "var5": 1
                },
                "plVar4": {
                    "debug_info": 1,
                    "debug_info_array": 1,
                    "debug_info_pointer": 2,
                    "debug_info_ptr": 1,
                    "debug_ptr": 1,
                    "long_array": 1,
                    "long_pointer": 1,
                    "memory_block": 1,
                    "pointer": 1,
                    "pointer_1": 1,
                    "pointer_array": 2,
                    "pointer_list": 2,
                    "ptr": 1,
                    "ptr_array": 2,
                    "ptr_to_long": 1,
                    "ptr_var": 1,
                    "ptr_var4": 1,
                    "real_type": 1,
                    "type_info": 2,
                    "type_info_ptr": 1,
                    "type_list": 1,
                    "type_pointer": 2,
                    "type_ptr": 2,
                    "var4": 1
                },
                "sVar6": {
                    "length": 2,
                    "size": 2,
                    "str_length": 1,
                    "string_length": 24,
                    "string_value": 1,
                    "var6": 1
                },
                "uVar1": {
                    "array_element": 6,
                    "array_index": 1,
                    "array_length": 1,
                    "array_size": 1,
                    "component": 2,
                    "component_type": 1,
                    "current_value": 1,
                    "data_value": 3,
                    "input_value": 2,
                    "int_value": 1,
                    "loop_counter": 1,
                    "uint_value": 1,
                    "value": 5,
                    "value_1": 1,
                    "var1": 4
                }
            },
            "called": [
                "fprintf",
                "FUN_00113cb9",
                "FUN_00113b71",
                "cplus_demangle_print",
                "FUN_0010afd5",
                "strncmp",
                "FUN_0010b6ea",
                "FUN_00113df2",
                "strcmp",
                "FUN_00113dfe",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113d3a",
                "free",
                "FUN_00113b1e",
                "FUN_00113ce0",
                "FUN_0010b0fa",
                "FUN_00113e17",
                "dcgettext",
                "FUN_00112904",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "code": "\n\n\nchar * demangle_and_initialize_memory_block_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long debug_info,\n                   undefined *error_flag)\n\n{\n  uint array_element;\n  int comparison_result;\n  char *result_string;\n  long *type_info;\n  char *temp_string;\n  size_t string_length;\n  void *memory_block;\n  long length;\n  undefined local_buffer [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    array_element = *param3;\n    if (0x29 < array_element) break;\n    if (0x17 < array_element) {\n      switch(array_element) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result_string = (char *)demangle_and_initialize_memory_block_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (result_string != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result_string = (char *)initialize_memory_block_from_param_00113b4a(result_string);\n            return result_string;\n          case 0x1b:\n            result_string = (char *)initialize_memory_block_00113b71(result_string);\n            return result_string;\n          default:\n                    \n            abort();\n          case 0x22:\n            result_string = (char *)initialize_or_get_memory_block_00113d3a(result_string);\n            return result_string;\n          case 0x23:\n            result_string = (char *)initialize_memory_block_or_zero_00113cb9(result_string);\n            return result_string;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result_string = (char *)cplus_demangle_print(3,param3,0x14,local_buffer);\n        if (result_string == (char *)0x0) {\n          temp_string = \"Couldn\\'t get demangled builtin type\\n\";\n          result_string = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result_string,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          temp_string = (char *)initialize_memory_block_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"bool\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result_string,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result_string,\"long double\"), comparison_result == 0)) {\n          temp_string = (char *)initialize_memory_block_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"float\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"__float128\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned char\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          temp_string = (char *)initialize_memory_block_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          temp_string = (char *)initialize_memory_block_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result_string,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result_string,\"__int128\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"short\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned short\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"void\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_and_return_memory_block_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result_string,\"long long\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"unsigned long long\");\n        if (comparison_result == 0) {\n          temp_string = (char *)initialize_memory_block_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result_string,\"...\");\n        if (comparison_result == 0) {\n          temp_string = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto LAB_0010b6a9;\n          *error_flag = 1;\n        }\n        else {\n          temp_string = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          temp_string = (char *)dcgettext(0,temp_string,5);\n          fprintf(_stderr,temp_string);\n        }\n        temp_string = (char *)0x0;\nLAB_0010b6c6:\n        free(result_string);\n        return temp_string;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          memory_block = (void *)initialize_and_return_memory_block_00113e17();\n        }\n        else {\n          memory_block = (void *)demangle_and_initialize_memory_block_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (memory_block != (void *)0x0) {\n          length = demangle_v3_arglist_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),local_buffer);\n          if (length != 0) {\n            result_string = (char *)initialize_memory_block_00113ce0(memory_block,length,local_buffer[0]);\n            return result_string;\n          }\n          free(memory_block);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (array_element != 1) {\n      if (array_element == 4) {\n        result_string = (char *)cplus_demangle_print(3,param3,0x14,local_buffer);\n        temp_string = \"Failed to print demangled template\\n\";\n        if (result_string != (char *)0x0) {\n          string_length = strlen(result_string);\n          temp_string = (char *)find_string_in_data_structure_0010afd5(param1,param2,result_string,string_length & 0xffffffff,9);\n          free(result_string);\n          return temp_string;\n        }\nLAB_0010b3d3:\n        temp_string = (char *)dcgettext(0,temp_string,5);\n        fprintf(_stderr,temp_string);\n        return result_string;\n      }\n      if (array_element == 0) {\n        if ((debug_info == 0) || (type_info = (long *)extract_real_type_from_debug_info_00113b1e(debug_info), type_info == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    debug_info = demangle_and_initialize_memory_block_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),debug_info,0);\n    if (debug_info == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result_string = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result_string,(ulong)array_element);\nLAB_0010b38c:\n  result_string = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result_string;\nLAB_0010b1a5:\n  if (*type_info == 0) {\nswitchD_0010b158_caseD_18:\n    result_string = (char *)find_string_in_data_structure_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return result_string;\n  }\n  result_string = *(char **)(*type_info + 8);\n  if (result_string == (char *)0x0) goto LAB_0010b38c;\n  temp_string = (char *)extract_value_from_binary_001129f4(result_string);\n  if (temp_string != (char *)0x0) {\n    string_length = strlen(temp_string);\n    if ((param3[6] == (uint)string_length) &&\n       (comparison_result = strncmp(temp_string,*(char **)(param3 + 4),(long)(int)param3[6]), comparison_result == 0)) {\n      return result_string;\n    }\n  }\n  type_info = type_info + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "current_name": "demangle_and_initialize_memory_block_0010b0fa",
            "entrypoint": "0x0010b0fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b0fa": "demangle_and_initialize_memory_block_0010b0fa",
                "__ptr": "memory_block",
                "iVar2": "comparison_result",
                "lVar7": "length",
                "local_40": "local_buffer",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "debug_info",
                "param_5": "error_flag",
                "pcVar3": "result_string",
                "pcVar5": "temp_string",
                "plVar4": "type_info",
                "sVar6": "string_length",
                "uVar1": "array_element"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b6ea": {
            "additional_data": {
                "FUN_0010b6ea": {
                    "arglist_demangler": 1,
                    "arglist_demangling": 1,
                    "decode_arglist": 1,
                    "decode_v3_arglist": 1,
                    "demangle_arglist": 8,
                    "demangle_args": 1,
                    "demangle_arguments": 1,
                    "demangle_v3_arglist": 4,
                    "demangled_arglist": 1,
                    "extract_arglist_demangled_strings": 1,
                    "extract_arglist_values": 1,
                    "extract_function_arguments": 1,
                    "extract_strings_from_arglist": 1,
                    "extract_v3_arglist": 1,
                    "extract_v3_arglist_data": 1,
                    "parse_arglist": 3,
                    "parse_arglist_demangling": 1,
                    "process_arg_list": 1,
                    "process_arglist_demangling": 1
                },
                "__format": {
                    "error_format": 1,
                    "error_message": 19,
                    "error_msg": 9,
                    "error_msg_format": 1
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "decoded_arglist": 1,
                    "decoded_values": 1,
                    "parsed_args": 1,
                    "result": 9,
                    "result_array": 10,
                    "result_list": 1,
                    "result_pointer": 1,
                    "result_ptr": 6
                },
                "lVar1": {
                    "dangling_result": 2,
                    "demangled_name": 1,
                    "demangled_str": 1,
                    "demangled_string": 3,
                    "demangled_value": 2,
                    "mangled_str": 1,
                    "parsed_value": 1,
                    "result": 10,
                    "result1": 1,
                    "result_length": 3,
                    "return_value": 3,
                    "returned_value": 1,
                    "string_length": 2
                },
                "local_39": {
                    "buffer": 6,
                    "decoded_arg_buffer": 1,
                    "demangled": 1,
                    "string_buffer": 3,
                    "temp_buffer": 6,
                    "temp_name": 1,
                    "temp_str": 1,
                    "temp_string": 4,
                    "type": 1,
                    "type_array": 1,
                    "type_buffer": 4,
                    "type_str": 1,
                    "type_string": 1
                },
                "param_1": {
                    "arg1": 22,
                    "arglist_param1": 1,
                    "arglist_param_1": 1,
                    "input1": 1,
                    "input_param1": 1,
                    "param1": 3,
                    "pointer_1": 1,
                    "unused_first_param": 1
                },
                "param_2": {
                    "arg2": 22,
                    "arglist_param2": 1,
                    "arglist_param_2": 1,
                    "input2": 1,
                    "input_param2": 1,
                    "param2": 3,
                    "pointer_2": 1,
                    "unused_second_param": 1
                },
                "param_3": {
                    "arg_list": 6,
                    "arg_list_head": 1,
                    "arglist": 20,
                    "arglist_ptr": 3,
                    "int_array": 1
                },
                "param_4": {
                    "error_flag": 16,
                    "error_flag_ptr": 2,
                    "flag": 2,
                    "has_error": 4,
                    "is_error": 5,
                    "is_mangled": 1,
                    "unexpected_type_flag": 1
                },
                "uVar2": {
                    "count": 8,
                    "counter": 1,
                    "current_index": 1,
                    "decoded_arg_count": 1,
                    "element_count": 1,
                    "index": 6,
                    "num_args": 1,
                    "num_demangled": 1,
                    "num_elements": 1,
                    "num_parsed_values": 1,
                    "num_results": 1,
                    "result_count": 8
                },
                "uVar3": {
                    "allocated_size": 1,
                    "array_capacity": 1,
                    "array_size": 2,
                    "buffer_size": 1,
                    "capacity": 11,
                    "current_size": 1,
                    "decoded_arg_capacity": 1,
                    "max_args": 1,
                    "max_count": 1,
                    "max_demangled": 1,
                    "result_array_size": 1,
                    "result_capacity": 5,
                    "result_size": 3,
                    "size": 1
                },
                "uVar4": {
                    "count": 2,
                    "counter": 2,
                    "current_index": 1,
                    "decoded_arg_index": 1,
                    "increment": 1,
                    "index": 2,
                    "new_count": 8,
                    "new_index": 4,
                    "new_num_args": 1,
                    "new_num_demangled": 1,
                    "new_result_count": 2,
                    "next_index": 1,
                    "temp_count": 4,
                    "updated_count": 1
                }
            },
            "called": [
                "fprintf",
                "free",
                "FUN_0010b0fa",
                "xrealloc",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result_array;\n  char *error_message;\n  long result;\n  ulong count;\n  ulong capacity;\n  uint new_count;\n  char temp_buffer [9];\n  \n  capacity = 10;\n  count = 0;\n  result_array = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_array);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    result = demangle_and_initialize_memory_block_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,temp_buffer);\n    if (result == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result_array);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)capacity <= new_count) {\n        capacity = (ulong)((uint)capacity + 10);\n        result_array = (void *)xrealloc(result_array,capacity << 3);\n      }\n      *(long *)((long)result_array + count * 8) = result;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)result_array + count * 8) = 0;\n  return result_array;\n}\n\n",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n",
            "current_name": "demangle_v3_arglist_0010b6ea",
            "entrypoint": "0x0010b6ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "__format": "error_message",
                "__ptr": "result_array",
                "lVar1": "result",
                "local_39": "temp_buffer",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "new_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b800": {
            "additional_data": {
                "FUN_0010b800": {
                    "initialize_data_structure": 28,
                    "initialize_or_increment_value": 1,
                    "initialize_structure": 1,
                    "process_integer_type": 1
                },
                "auStack_8a": {
                    "array": 3,
                    "array_stack": 1,
                    "auxiliary_array": 1,
                    "dynamic_array": 1,
                    "reserved_space": 1,
                    "stack_array": 6,
                    "temp_array": 3,
                    "unused_array": 8
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize_data_structure": 1
                },
                "dcgettext": {
                    "get_error_message": 1
                },
                "initialize_data_structure_00109cf4": {
                    "initialize_data_structure_helper": 1
                },
                "lVar4": {
                    "data": 1,
                    "data_value": 1,
                    "element": 1,
                    "element_value": 2,
                    "entry_value": 1,
                    "new_value": 1,
                    "ptr_value": 1,
                    "temp": 2,
                    "temp1": 1,
                    "temp_value": 2,
                    "temp_value1": 2,
                    "temp_var1": 2,
                    "temp_variable1": 1,
                    "value": 11,
                    "value1": 2
                },
                "lVar5": {
                    "bit_mask": 4,
                    "bit_shift": 1,
                    "bit_shift_value": 1,
                    "bit_value": 3,
                    "bitmask": 4,
                    "bitwise_value": 1,
                    "mask": 8,
                    "shift_value": 1,
                    "temp2": 1,
                    "temp_value2": 2,
                    "temp_var2": 2,
                    "temp_variable2": 1,
                    "value2": 2
                },
                "local_8c": {
                    "buffer": 3,
                    "char_buffer": 1,
                    "format_string": 4,
                    "formatted_string": 7,
                    "output_buffer": 1,
                    "output_str": 2,
                    "output_string": 6,
                    "str": 1,
                    "string": 2,
                    "string_buffer": 3,
                    "temp_string": 1
                },
                "param_1": {
                    "base_address": 20,
                    "data": 4,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_structure": 1,
                    "data_structure_ptr": 2,
                    "function_address": 1,
                    "input": 1
                },
                "param_2": {
                    "data_type_size": 1,
                    "size": 30
                },
                "param_3": {
                    "condition": 1,
                    "flag": 26,
                    "has_additional_info": 1,
                    "is_flag_set": 1,
                    "is_not_null": 1,
                    "is_reversed": 1
                },
                "plVar1": {
                    "current_pointer": 2,
                    "current_value_pointer": 1,
                    "data_element_ptr": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "element_address": 1,
                    "element_pointer": 2,
                    "entry_ptr": 1,
                    "pointer": 4,
                    "ptr": 6,
                    "ptr_element": 2,
                    "ptr_to_element": 3,
                    "ptr_to_long": 1,
                    "ptr_to_value": 2,
                    "ptr_value": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message_with_params": 1
                },
                "sVar3": {
                    "length": 9,
                    "str_len": 2,
                    "str_length": 2,
                    "string_length": 14,
                    "string_size": 1
                },
                "sprintf": {
                    "format_string": 1
                },
                "strlen": {
                    "string_length": 1
                },
                "uVar2": {
                    "result": 20,
                    "return_value": 11
                }
            },
            "called": [
                "FUN_00119ed0",
                "FUN_00109cf4",
                "sprintf",
                "dcgettext",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 initialize_data_structure_0010b800(long base_address,int size,char flag)\n\n{\n  long *ptr;\n  undefined8 result;\n  size_t strlen;\n  long value;\n  long mask;\n  undefined2 formatted_string;\n  undefined4 unused_array [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    ptr = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr;\n    if (value != 0) {\n      result = initialize_data_structure_0010b800_helper(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *ptr = value;\n    sprintf((char *)&formatted_string,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      string_length = string_length((char *)&formatted_string);\n      sprintf((char *)((long)&formatted_string + string_length),\"%ld;%ld;\",-mask,mask + -1);\n    }\n    else {\n      string_length = string_length((char *)&formatted_string);\n      *(undefined2 *)((long)&formatted_string + string_length) = 0x3b30;\n      *(undefined *)((long)&formatted_string + string_length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formatted_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formatted_string + string_length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = create_and_initialize_data_structure_0010b800(base_address,&formatted_string,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_with_params(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_data_structure_0010b800",
            "entrypoint": "0x0010b800",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "auStack_8a": "unused_array",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize_data_structure",
                "dcgettext": "get_error_message",
                "initialize_data_structure_00109cf4": "initialize_data_structure_helper",
                "lVar4": "value",
                "lVar5": "mask",
                "local_8c": "formatted_string",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptr",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "strlen": "string_length",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010b948": {
            "additional_data": {
                "FUN_0010b948": {
                    "initialize_data": 1,
                    "initialize_data_structure": 17,
                    "initialize_or_create_data_structure": 9,
                    "initialize_or_update_data_structure": 3,
                    "process_data": 1
                },
                "__ptr": {
                    "allocated_pointer": 1,
                    "data_pointer": 1,
                    "extracted_data": 5,
                    "extracted_pointer": 2,
                    "extracted_ptr": 10,
                    "extracted_string": 2,
                    "ptr": 1,
                    "ptr_extracted": 1,
                    "ptr_var": 1,
                    "ptr_variable_2": 1,
                    "string": 1,
                    "temporary_pointer": 1
                },
                "cVar2": {
                    "can_initialize": 1,
                    "char_var": 1,
                    "char_variable": 1,
                    "flag": 2,
                    "initialized": 2,
                    "is_data_initialized": 1,
                    "is_initialized": 3,
                    "is_valid": 2,
                    "result": 4,
                    "success": 1,
                    "success_flag": 10
                },
                "lVar1": {
                    "current_index": 1,
                    "current_value": 1,
                    "data": 1,
                    "data_element": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_structure": 1,
                    "data_structure_address": 1,
                    "data_structure_ptr": 2,
                    "data_structure_value": 1,
                    "element": 1,
                    "element_pointer": 1,
                    "index": 1,
                    "last_element": 1,
                    "last_index": 1,
                    "last_value": 1,
                    "pointer_value": 1,
                    "pointer_var": 1,
                    "ptr": 2,
                    "ptr_data": 1,
                    "ptr_variable": 1,
                    "structure_size": 1,
                    "temp_ptr": 1,
                    "temp_var": 1,
                    "temporary_variable": 1
                },
                "local_5a": {
                    "buffer": 2,
                    "format_string": 1,
                    "formatted_data": 1,
                    "formatted_string": 19,
                    "local_buffer": 1,
                    "output_string": 5,
                    "string_buffer": 2
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "base_address": 6,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_structure": 7,
                    "data_structure_address": 1,
                    "data_structure_param": 2,
                    "data_structure_pointer": 1,
                    "data_structure_ptr": 2,
                    "input_data": 1,
                    "input_param": 2,
                    "param1": 2,
                    "structure_param": 1,
                    "structure_pointer": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array_length": 1,
                    "count": 4,
                    "data_size": 2,
                    "data_structure_size": 1,
                    "input_size": 1,
                    "num_elements": 2,
                    "param2": 2,
                    "size": 14,
                    "size_param": 3
                },
                "uVar3": {
                    "count_as_u_long": 1,
                    "count_as_ulong": 1,
                    "count_converted": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "data_size_u": 1,
                    "num_elements_ul": 1,
                    "num_elements_unsigned": 1,
                    "param_value": 1,
                    "size": 3,
                    "size_as_unsigned": 1,
                    "size_converted": 1,
                    "size_in_unsigned": 1,
                    "size_u": 2,
                    "size_u_long": 1,
                    "size_u_var": 1,
                    "size_uint": 3,
                    "size_ulong": 1,
                    "size_unsigned": 2,
                    "size_variable": 1,
                    "u_array_length": 1,
                    "ulong_size": 1,
                    "unsigned_size": 1,
                    "unsigned_var3": 1,
                    "var2": 1
                },
                "uVar4": {
                    "adjusted_size": 1,
                    "count_minus_1": 1,
                    "count_minus_one": 1,
                    "data_size_minus_one": 1,
                    "index": 2,
                    "last_index_minus_one": 1,
                    "modified_size": 1,
                    "num_elements_minus_one": 2,
                    "size_index": 1,
                    "size_minus1": 1,
                    "size_minus_1": 3,
                    "size_minus_one": 11,
                    "u_i": 1,
                    "unsigned_var4": 1,
                    "updated_count": 2,
                    "var1": 1
                }
            },
            "called": [
                "FUN_0010b800",
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nvoid initialize_or_create_data_structure_0010b948(long data_structure,uint size)\n\n{\n  long data_ptr;\n  char success_flag;\n  void *extracted_ptr;\n  ulong size;\n  uint size_minus_one;\n  char formatted_string [50];\n  \n  size_minus_one = size - 1;\n  size = (ulong)size;\n  if ((size_minus_one < 0x10) && (data_ptr = *(long *)(data_structure + 0xf8 + (ulong)size_minus_one * 8), data_ptr != 0)) {\n    initialize_data_structure_00109cf4(data_structure,data_ptr,size);\n    return;\n  }\n  success_flag = initialize_data_structure_0010b800(data_structure,4,0);\n  if (success_flag != '\\0') {\n    extracted_ptr = (void *)extract_and_free_ptr_00109b2f(data_structure);\n    data_ptr = *(long *)(data_structure + 0x68);\n    *(long *)(data_structure + 0x68) = data_ptr + 1;\n    if (size_minus_one < 0x10) {\n      *(long *)(data_structure + 0xf8 + (ulong)size_minus_one * 8) = data_ptr;\n    }\n    sprintf(formatted_string,\"%ld=r%s;%u;0;\",data_ptr,extracted_ptr,size);\n    free(extracted_ptr);\n    create_and_initialize_data_structure_00109b52(data_structure,formatted_string,data_ptr,1,size);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_or_create_data_structure_0010b948",
            "entrypoint": "0x0010b948",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010b948": "initialize_or_create_data_structure_0010b948",
                "__ptr": "extracted_ptr",
                "cVar2": "success_flag",
                "lVar1": "data_ptr",
                "local_5a": "formatted_string",
                "param_1": "data_structure",
                "param_2": "size",
                "uVar3": "size",
                "uVar4": "size_minus_one"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ba08": {
            "additional_data": {
                "FUN_0010ba08": {
                    "build_payload": 1,
                    "build_warning_message": 1,
                    "construct_error_message": 1,
                    "construct_message": 1,
                    "create_struct_warning": 1,
                    "format_and_print_field_message": 1,
                    "format_and_print_struct_field": 1,
                    "format_struct_field": 1,
                    "generate_code": 1,
                    "generate_field_string": 2,
                    "generate_formatted_string": 1,
                    "generate_output": 1,
                    "generate_struct_field": 1,
                    "generate_struct_field_string": 2,
                    "generate_struct_field_warning": 1,
                    "generate_warning_message": 14
                },
                "__s": {
                    "extra_info": 1,
                    "extracted_data": 3,
                    "extracted_ptr": 2,
                    "extracted_string": 21,
                    "extracted_value": 1,
                    "ptr_string": 1,
                    "string1": 2
                },
                "__s_00": {
                    "allocated_string": 1,
                    "constructed_string": 1,
                    "dynamic_string": 1,
                    "final_string": 1,
                    "formatted_message": 5,
                    "formatted_string": 8,
                    "generated_message": 2,
                    "generated_str": 1,
                    "generated_string": 1,
                    "modified_string": 1,
                    "new_string": 3,
                    "output_string": 1,
                    "payload": 1,
                    "result_string": 2,
                    "string2": 1,
                    "warning_message": 1
                },
                "abort": {
                    "abort_execution": 1,
                    "exit_program": 2,
                    "terminate_program": 1
                },
                "cVar1": {
                    "char_value": 4,
                    "char_var": 1,
                    "char_var1": 1,
                    "character_value": 1,
                    "check_flag": 1,
                    "field_flag": 1,
                    "flag": 13,
                    "flag_char": 2,
                    "flag_value": 6,
                    "warning_flag": 1
                },
                "dcgettext": {
                    "get_localized_error_string": 1,
                    "get_text": 1,
                    "get_translation": 2,
                    "get_warning_message": 1,
                    "translate_string": 1
                },
                "extract_and_free_ptr_00109b2f": {
                    "extract_and_free": 1,
                    "extract_and_free_memory": 1,
                    "extract_and_free_ptr": 2
                },
                "free": {
                    "free_memory": 4,
                    "release_memory": 1
                },
                "iVar2": {
                    "data_type_size": 1,
                    "field_length": 1,
                    "field_size": 1,
                    "field_type": 1,
                    "field_type_value": 1,
                    "int_value": 4,
                    "int_var": 1,
                    "int_var2": 1,
                    "integer_value": 1,
                    "length": 1,
                    "size": 1,
                    "size_value": 2,
                    "struct_field_count": 1,
                    "struct_length": 1,
                    "struct_size": 11,
                    "unknown_size": 2
                },
                "lVar3": {
                    "config_ptr": 2,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "length": 1,
                    "local_var": 1,
                    "local_variable1": 1,
                    "long_value": 4,
                    "long_var": 1,
                    "long_var3": 1,
                    "output_ptr": 1,
                    "param": 1,
                    "param1_element": 1,
                    "param1c": 2,
                    "param_1_c": 1,
                    "param_c_value": 1,
                    "struct_field": 1,
                    "struct_offset": 2,
                    "struct_ptr": 1,
                    "struct_ptr_offset": 2,
                    "temp": 2,
                    "temp_long_var": 1,
                    "temp_var": 2
                },
                "param_1": {
                    "args": 1,
                    "arguments": 1,
                    "buffer": 1,
                    "config_params": 1,
                    "config_ptr": 1,
                    "data": 2,
                    "fields": 1,
                    "function_parameters": 1,
                    "function_params": 2,
                    "input_params": 1,
                    "options": 1,
                    "output_params": 2,
                    "param_array": 2,
                    "param_ptr": 1,
                    "parameters": 1,
                    "params": 1,
                    "ptr_array": 1,
                    "ptrs": 1,
                    "struct_params": 1,
                    "struct_pointer": 2,
                    "struct_ptr": 6
                },
                "param_2": {
                    "field": 1,
                    "field_name": 30
                },
                "param_3": {
                    "field_size": 2,
                    "field_value": 5,
                    "param": 1,
                    "param1": 2,
                    "param3": 8,
                    "param3_value": 1,
                    "param_3": 3,
                    "param_3_value": 1,
                    "param_value": 6,
                    "size": 1,
                    "value": 1
                },
                "param_4": {
                    "field_size": 22,
                    "param2": 2,
                    "param4_value": 1,
                    "size": 2,
                    "struct_size": 2,
                    "total_size": 1,
                    "unknown_size": 1
                },
                "param_5": {
                    "field_flag": 1,
                    "field_status": 1,
                    "field_type": 9,
                    "field_value": 1,
                    "flag": 12,
                    "is_field_set": 1,
                    "param3": 1,
                    "param5": 2,
                    "param5_value": 1,
                    "param_type": 1,
                    "structure_type": 1
                },
                "pcVar9": {
                    "field_status_string": 1,
                    "field_type_str": 2,
                    "field_type_string": 1,
                    "field_value_str": 1,
                    "flag_str": 4,
                    "flag_string": 11,
                    "param_flag": 3,
                    "param_type_string": 1,
                    "path": 1,
                    "slash": 1,
                    "struct_type": 1,
                    "type_flag": 1,
                    "type_specifier": 1,
                    "type_string": 1,
                    "type_suffix": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 3,
                    "print_warning": 1,
                    "print_warning_message": 2
                },
                "sVar4": {
                    "config_param_size": 1,
                    "field_name_len": 1,
                    "field_str_len": 1,
                    "input_str_len": 2,
                    "input_string_len": 1,
                    "len1": 1,
                    "length1": 2,
                    "options_len": 1,
                    "param2_length": 2,
                    "param2_size": 1,
                    "param_1_length": 2,
                    "param_1_size": 2,
                    "param_size": 1,
                    "ptr_size": 1,
                    "size_target_str": 1,
                    "source_length": 2,
                    "source_size": 2,
                    "source_str_len": 1,
                    "string_length1": 1,
                    "struct_length": 1,
                    "struct_name_length": 2,
                    "struct_size": 1,
                    "struct_string_length": 1
                },
                "sVar5": {
                    "extracted_string_length": 1,
                    "field_name_len": 5,
                    "field_name_length": 7,
                    "field_name_size": 8,
                    "len2": 1,
                    "length2": 2,
                    "param_2_len": 1,
                    "param_2_length": 2,
                    "param_2_size": 1,
                    "param_str_len": 1,
                    "size_field_name": 1,
                    "string_length2": 1
                },
                "sVar6": {
                    "extra_info_len": 1,
                    "extracted_data_len": 1,
                    "extracted_data_length": 1,
                    "extracted_data_size": 1,
                    "extracted_ptr_length": 1,
                    "extracted_size": 1,
                    "extracted_str_len": 3,
                    "extracted_string_len": 2,
                    "extracted_string_length": 5,
                    "extracted_string_size": 7,
                    "extracted_value_length": 1,
                    "field_name_length": 1,
                    "len3": 1,
                    "length3": 2,
                    "size_extracted_string": 1,
                    "string_length3": 1,
                    "value_string_length": 1
                },
                "sprintf": {
                    "construct_warning": 1,
                    "format_string": 5
                },
                "strlen": {
                    "calculate_length": 1,
                    "compute_length": 1,
                    "get_string_length": 3
                },
                "uVar7": {
                    "error": 1,
                    "error_format": 1,
                    "error_message": 5,
                    "error_string": 3,
                    "param_message": 1,
                    "warning_message": 16,
                    "warning_message_format": 1,
                    "warning_msg": 2
                },
                "uVar8": {
                    "result": 11,
                    "return_val": 2,
                    "return_value": 18
                },
                "xmalloc": {
                    "allocate_memory": 4,
                    "dynamic_allocate_memory": 1
                }
            },
            "called": [
                "FUN_00119ed0",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "xmalloc",
                "dcgettext",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8\ngenerate_warning_message_0010ba08(undefined8 *struct_ptr,char *field_name,undefined8 param3,ulong field_size,int flag)\n\n{\n  char flag;\n  int struct_size;\n  long long_value;\n  char *extracted_string;\n  size_t param_1_length;\n  size_t field_name_size;\n  size_t extracted_string_size;\n  char *formatted_string;\n  undefined8 warning_message;\n  undefined8 return_value;\n  char *flag_string;\n  \n  flag = *(char *)(struct_ptr[0xc] + 0x1c);\n  struct_size = *(int *)(struct_ptr[0xc] + 0x18);\n  extracted_string = (char *)extract_and_free_ptr();\n  if (*(char **)(struct_ptr[0xc] + 0x20) == (char *)0x0) {\n    return_value = 0;\n  }\n  else {\n    param_1_length = strlen(*(char **)(struct_ptr[0xc] + 0x20));\n    field_name_size = strlen(field_name);\n    extracted_string_size = strlen(extracted_string);\n    formatted_string = (char *)xmalloc(param_1_length + 0x32 + field_name_size + extracted_string_size);\n    if (flag == 1) {\n      flag_string = \"/1\";\n    }\n    else {\n      flag_string = \"/0\";\n      if ((flag != 2) && (flag_string = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((field_size == 0) && (field_size = (ulong)(uint)(struct_size * 8), field_size == 0)) {\n      return_value = *(undefined8 *)*struct_ptr;\n      warning_message = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message(warning_message,return_value,field_name);\n    }\n    sprintf(formatted_string,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(struct_ptr[0xc] + 0x20),field_name,flag_string,extracted_string,\n            param3,field_size);\n    free_memory(*(void **)(struct_ptr[0xc] + 0x20));\n    long_value = struct_ptr[0xc];\n    *(char **)(long_value + 0x20) = formatted_string;\n    if (flag != '\\0') {\n      *(undefined *)(long_value + 0x1c) = 1;\n    }\n    return_value = CONCAT71((int7)((ulong)long_value >> 8),1);\n  }\n  return return_value;\n}\n\n",
            "current_name": "generate_warning_message_0010ba08",
            "entrypoint": "0x0010ba08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "abort": "exit_program",
                "cVar1": "flag",
                "dcgettext": "get_translation",
                "extract_and_free_ptr_00109b2f": "extract_and_free_ptr",
                "free": "free_memory",
                "iVar2": "struct_size",
                "lVar3": "long_value",
                "param_1": "struct_ptr",
                "param_2": "field_name",
                "param_3": "param3",
                "param_4": "field_size",
                "param_5": "flag",
                "pcVar9": "flag_string",
                "print_error_message_with_params_00119ed0": "print_error_message",
                "sVar4": "param_1_length",
                "sVar5": "field_name_size",
                "sVar6": "extracted_string_size",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar7": "warning_message",
                "uVar8": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bb52": {
            "additional_data": {
                "0": {
                    "initial_value": 1
                },
                "0x28": {
                    "offset": 1
                },
                "0xffffffffffffffff": {
                    "max_value": 1
                },
                "FUN_0010bb52": {
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_bfd_hash": 1,
                    "allocate_and_initialize_hash": 9,
                    "allocate_hash_and_newfunc": 1,
                    "create_hash": 2,
                    "create_hash_func": 2,
                    "create_hash_function": 9,
                    "create_new_hash_func": 1,
                    "create_new_hashed_func": 1,
                    "initialize_hash": 2,
                    "initialize_hash_function": 1,
                    "initialize_hash_table": 1
                },
                "bfd_hash_allocate": {
                    "allocate_bfd_hash": 1,
                    "allocate_hash": 11,
                    "allocate_hash_table": 1
                },
                "bfd_hash_newfunc": {
                    "create_new_bfd_hash": 1,
                    "create_new_func": 2,
                    "create_new_function": 2,
                    "create_new_hash": 3,
                    "initialize_function_hash": 1,
                    "initialize_hash": 2,
                    "initialize_hash_func": 1,
                    "initialize_newfunc": 1
                },
                "lVar1": {
                    "hash_func": 2,
                    "hash_func_ptr": 2,
                    "hash_function": 1,
                    "hash_function_result": 2,
                    "hash_pointer": 3,
                    "hash_ptr": 5,
                    "hash_table": 1,
                    "hash_value": 1,
                    "new_bfd_hash": 1,
                    "new_func_ptr": 2,
                    "new_function": 1,
                    "new_hash": 10
                },
                "param_1": {
                    "hash_ptr": 1,
                    "hash_size": 1,
                    "input_param": 8,
                    "input_parameter": 1,
                    "input_size": 2,
                    "input_value": 3,
                    "param": 3,
                    "size": 11,
                    "value": 1
                },
                "param_2": {
                    "alloc_param": 1,
                    "allocation_param": 1,
                    "arg1": 1,
                    "arg2": 1,
                    "func_param_1": 1,
                    "hash_param1": 1,
                    "hash_type": 1,
                    "mem_block_param": 1,
                    "param2": 8,
                    "param_2": 13,
                    "param_a": 1,
                    "param_ptr": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 1,
                    "func_param": 1,
                    "func_param_2": 1,
                    "hash_param2": 1,
                    "hash_size": 1,
                    "newfunc_param": 1,
                    "param3": 8,
                    "param_3": 13,
                    "param_b": 1,
                    "param_val": 1,
                    "size_param": 1
                }
            },
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nlong allocate_and_initialize_bfd_hash_0010bb52(long size,undefined8 param_2,undefined8 param_3)\n\n{\n  long new_hash;\n  \n  if (((size != 0) || (size = bfd_hash_allocate(param_2,0x30), size != 0)) &&\n     (new_hash = bfd_hash_newfunc(size,param_2,param_3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_bfd_hash_0010bb52",
            "entrypoint": "0x0010bb52",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_bfd_hash_0010bb52",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "create_new_hash",
                "lVar1": "new_hash",
                "param_1": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bba1": {
            "additional_data": {
                "FUN_0010bba1": {
                    "initialize_data_structure": 3,
                    "lookup_and_initialize": 2,
                    "lookup_and_initialize_data": 3,
                    "lookup_and_initialize_data_structure": 23
                },
                "initialize_data_structure_00109cf4": {
                    "initialize_data_structure": 1
                },
                "lVar1": {
                    "entry": 2,
                    "hash_entry": 2,
                    "hash_lookup_result": 5,
                    "hash_result": 11,
                    "lookup_result": 8,
                    "result": 3
                },
                "param_1": {
                    "base_address": 9,
                    "binary_address": 2,
                    "binary_offset": 4,
                    "hash_table": 4,
                    "input": 2,
                    "input_hash": 3,
                    "input_param": 4,
                    "input_ptr": 1,
                    "input_value_1": 1,
                    "param_address": 1
                },
                "param_2": {
                    "data": 2,
                    "data_address": 1,
                    "data_ptr": 1,
                    "data_structure_key": 1,
                    "data_to_lookup": 1,
                    "hash_key": 1,
                    "hash_param": 1,
                    "hash_value": 2,
                    "input_data": 2,
                    "input_value_2": 1,
                    "key": 5,
                    "lookup_key": 3,
                    "lookup_param": 3,
                    "lookup_value": 1,
                    "param": 1,
                    "param_2": 1,
                    "param_value": 1,
                    "search_key": 1,
                    "target_address": 1,
                    "value": 1
                },
                "uVar2": {
                    "data_structure": 7,
                    "data_structure_init_result": 1,
                    "initialize_result": 2,
                    "initialized_data_structure": 2,
                    "initialized_structure": 6,
                    "result": 11,
                    "return_value": 1,
                    "structure_initialized": 1
                }
            },
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 lookup_and_initialize_data_structure_0010bba1(long base_address,undefined8 key)\n\n{\n  long hash_result;\n  undefined8 result;\n  \n  hash_result = bfd_hash_lookup(base_address + 0x1b8,key,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    result = initialize_data_structure(base_address,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "current_name": "lookup_and_initialize_data_structure_0010bba1",
            "entrypoint": "0x0010bba1",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_structure_0010bba1",
                "initialize_data_structure_00109cf4": "initialize_data_structure",
                "lVar1": "hash_result",
                "param_1": "base_address",
                "param_2": "key",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bbd3": {
            "additional_data": {
                "FUN_0010bbd3": {
                    "initialize_data_structure": 1,
                    "initialize_debug_info": 24,
                    "initialize_debugger": 1,
                    "initialize_file_info": 2,
                    "set_debug_info": 3
                },
                "auVar8": {
                    "result": 7,
                    "return_val": 2,
                    "return_value": 17,
                    "return_var": 2,
                    "return_variable": 1
                },
                "bVar7": {
                    "b_var7": 1,
                    "bool_flag": 1,
                    "boolean_flag": 1,
                    "byte_flag": 1,
                    "byte_var": 10,
                    "flag": 9,
                    "is_filename_provided": 1,
                    "is_zero": 1,
                    "loop_var": 1,
                    "temp_byte": 3,
                    "zero": 1
                },
                "lVar4": {
                    "count": 4,
                    "counter": 3,
                    "loop_count": 4,
                    "loop_counter": 16,
                    "loop_index": 4
                },
                "param_1": {
                    "data_structure": 1,
                    "debug_info": 19,
                    "debugger_info": 1,
                    "file_info": 2,
                    "info": 6
                },
                "param_2": {
                    "file": 1,
                    "file_name": 1,
                    "filename": 26,
                    "input_string": 1
                },
                "param_3": {
                    "arg1": 1,
                    "param1": 1,
                    "param3": 19,
                    "param_3": 6,
                    "parameter3": 1,
                    "unknown1": 1,
                    "var1": 1
                },
                "param_4": {
                    "arg2": 1,
                    "param2": 1,
                    "param4": 19,
                    "param_4": 6,
                    "parameter4": 1,
                    "unknown2": 1,
                    "var2": 1
                },
                "pcVar6": {
                    "current_filename": 1,
                    "default_file_name": 1,
                    "default_filename": 5,
                    "default_string": 1,
                    "empty_string": 1,
                    "file_or_default": 1,
                    "file_ptr": 1,
                    "filename_copy": 1,
                    "filename_ptr": 11,
                    "new_filename": 1,
                    "pc_var6": 1,
                    "prev_filename": 1,
                    "temp_filename": 3,
                    "temp_str": 1
                },
                "puVar1": {
                    "info_units": 1,
                    "prev_debug_info": 3,
                    "prev_file_info": 1,
                    "previous_debug_info": 5,
                    "ptr1": 7,
                    "ptr_previous_debug_info": 1,
                    "ptr_to_debug_info": 1,
                    "ptr_to_debug_info_units": 1,
                    "ptr_units": 1,
                    "temp_ptr1": 1,
                    "uninitialized_units": 1,
                    "unit": 1,
                    "unit_pointer": 1,
                    "unit_ptr": 2,
                    "units": 2,
                    "units_ptr": 2
                },
                "puVar2": {
                    "info_units1": 1,
                    "new_alloc_1": 1,
                    "new_debug_info_1": 1,
                    "new_debug_units": 1,
                    "new_file_info": 1,
                    "new_unit": 1,
                    "new_unit1": 1,
                    "new_units_ptr": 1,
                    "ptr1": 1,
                    "ptr2": 6,
                    "ptr_to_memory_block1": 1,
                    "ptr_to_unit_array": 1,
                    "ptr_units1": 1,
                    "ptr_var1": 1,
                    "pu_var2": 1,
                    "temp_unit1": 1,
                    "unit1": 1,
                    "unit_array1": 2,
                    "unit_info1": 3,
                    "unit_ptr1": 1,
                    "units1": 1,
                    "units_array1": 1,
                    "units_ptr": 1
                },
                "puVar3": {
                    "info_units2": 1,
                    "new_alloc_2": 1,
                    "new_debug_info": 2,
                    "new_debug_info_2": 1,
                    "new_info": 1,
                    "new_unit2": 1,
                    "new_units": 1,
                    "new_units_ptr": 1,
                    "ptr2": 1,
                    "ptr3": 6,
                    "ptr_to_info_array": 1,
                    "ptr_to_memory_block2": 1,
                    "ptr_units2": 1,
                    "ptr_var2": 1,
                    "pu_var3": 1,
                    "temp_unit2": 1,
                    "unit2": 1,
                    "unit_array2": 2,
                    "unit_info2": 3,
                    "unit_ptr2": 1,
                    "units2": 1,
                    "units_array2": 1
                },
                "puVar5": {
                    "current_ptr": 2,
                    "current_unit": 3,
                    "current_unit_info": 1,
                    "loop_pointer": 1,
                    "loop_ptr": 1,
                    "loop_variable": 1,
                    "pointer": 1,
                    "ptr3": 1,
                    "ptr4": 5,
                    "ptr5": 1,
                    "ptr_loop": 1,
                    "ptr_to_temp_array": 1,
                    "ptr_var": 1,
                    "pu_var5": 4,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "unit_array_ptr": 1,
                    "unit_ptr": 1,
                    "unit_ptr3": 1,
                    "units_ptr": 1
                }
            },
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loop_counter;\n  undefined4 *ptr4;\n  char *filename_ptr;\n  byte byte_var;\n  undefined return_value [16];\n  \n  byte_var = 0;\n  filename_ptr = \"\";\n  if (filename != (char *)0x0) {\n    filename_ptr = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = filename_ptr;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)byte_var * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debug_info[1] = (long)ptr3;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "current_name": "initialize_debug_info_0010bbd3",
            "entrypoint": "0x0010bbd3",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "auVar8": "return_value",
                "bVar7": "byte_var",
                "lVar4": "loop_counter",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar6": "filename_ptr",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "puVar5": "ptr4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bc80": {
            "additional_data": {
                "FUN_0010bc80": {
                    "debug_record": 1,
                    "debug_record_function": 15,
                    "initialize_debug_record": 3,
                    "record_debug_function": 12
                },
                "_stderr": {
                    "error_output": 1,
                    "error_stream": 1
                },
                "auVar8": {
                    "result": 9,
                    "result_struct": 1,
                    "ret_data": 1,
                    "ret_val": 1,
                    "return_result": 1,
                    "return_val": 2,
                    "return_value": 12
                },
                "bVar7": {
                    "a_flag": 1,
                    "b_flag": 1,
                    "b_var7": 1,
                    "bit_value": 1,
                    "byte_value": 1,
                    "byte_var": 1,
                    "count": 1,
                    "false": 1,
                    "flag": 11,
                    "flag_byte": 1,
                    "flag_value": 2,
                    "flag_var": 1,
                    "initialized": 1,
                    "is_debug": 1,
                    "is_null": 2,
                    "temp_byte": 1,
                    "zero": 2
                },
                "lVar4": {
                    "i": 1,
                    "index": 4,
                    "length": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "mem_ptr": 1,
                    "memory_loc": 1,
                    "result": 11,
                    "result_ptr": 1,
                    "result_value": 1,
                    "temp": 3,
                    "temp_var": 2
                },
                "param_1": {
                    "arg1": 1,
                    "context": 2,
                    "data": 1,
                    "debug_context": 1,
                    "debug_ctx": 1,
                    "debug_data": 2,
                    "debug_handle": 1,
                    "debug_info": 8,
                    "debug_manager": 1,
                    "debug_record": 2,
                    "debug_set_filename": 1,
                    "debug_state": 1,
                    "file_context": 1,
                    "file_info_ptr": 1,
                    "file_ptr": 1,
                    "func_record_ptr": 1,
                    "function_buffer": 1,
                    "function_info": 1,
                    "function_pointer": 1,
                    "param1": 1,
                    "record_ptr": 1
                },
                "param_2": {
                    "file_name": 7,
                    "filename": 24
                },
                "param_3": {
                    "address": 1,
                    "buffer_size": 1,
                    "file_size": 1,
                    "line_number": 4,
                    "memory_size": 2,
                    "offset": 2,
                    "param3": 1,
                    "record": 1,
                    "record_length": 4,
                    "record_size": 4,
                    "size": 10
                },
                "param_4": {
                    "debug_flag": 1,
                    "debug_flags": 3,
                    "debug_level": 1,
                    "flag": 10,
                    "flags": 12,
                    "param": 1,
                    "record_type": 3
                },
                "param_5": {
                    "arg1": 1,
                    "debug_callback": 1,
                    "debug_func": 1,
                    "debug_mode": 1,
                    "debug_record": 1,
                    "mem": 1,
                    "param5": 8,
                    "param_5": 15,
                    "reserved_param": 1,
                    "value1": 1
                },
                "param_6": {
                    "arg2": 1,
                    "debug_data": 1,
                    "debug_parameter": 1,
                    "error_flag": 1,
                    "param6": 8,
                    "param_6": 14,
                    "result": 4,
                    "value2": 1
                },
                "pcVar6": {
                    "debug_msg": 1,
                    "default_file_name": 6,
                    "default_filename": 17,
                    "empty_string": 1,
                    "file": 1,
                    "filename_ptr": 1,
                    "ptr_filename": 1,
                    "selected_filename": 1,
                    "temp_str": 1
                },
                "plVar2": {
                    "allocated_record": 1,
                    "debug_data": 2,
                    "debug_info": 3,
                    "debug_info_ptr": 2,
                    "debug_record": 9,
                    "debug_record_ptr": 1,
                    "debug_set": 1,
                    "debug_struct": 1,
                    "memory_block": 3,
                    "record": 1,
                    "record_array": 1,
                    "record_info": 1,
                    "record_info_ptr": 1,
                    "record_ptr": 3
                },
                "puVar3": {
                    "allocated_memory": 1,
                    "buffer": 5,
                    "buffer_ptr": 1,
                    "debug_array": 3,
                    "debug_buffer": 2,
                    "debug_data": 5,
                    "debug_info": 3,
                    "debug_info_data": 1,
                    "initialized_ptr": 1,
                    "mem_ptr": 1,
                    "memory": 2,
                    "memory_block": 1,
                    "memory_info": 1,
                    "memory_ptr": 2,
                    "record_data": 1
                },
                "puVar5": {
                    "buffer_ptr": 1,
                    "current_buffer": 1,
                    "current_memory": 1,
                    "current_ptr": 2,
                    "debug_array_iterator": 1,
                    "debug_info_ptr": 3,
                    "debug_pointer": 2,
                    "debug_ptr": 2,
                    "initialized_ptr_iter": 1,
                    "ptr": 10,
                    "pu_var3_loop": 1,
                    "pu_var5": 1,
                    "record_ptr": 1,
                    "temp_ptr": 3
                },
                "uVar1": {
                    "error_message": 20,
                    "error_msg": 2,
                    "error_string": 1,
                    "localized_error": 1,
                    "message": 1,
                    "msg": 1,
                    "result": 3,
                    "translated_message": 1
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16]\nrecord_debug_function_0010bc80(long debug_info,char *filename,long size,uint flags,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *debug_record;\n  undefined4 *debug_data;\n  long result;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(error_stream,\"%s\\n\",error_message);\n    }\n    else {\n      debug_record = (long *)xmalloc(0x18);\n      *debug_record = size;\n      *(undefined (*) [16])(debug_record + 1) = ZEXT816(0);\n      debug_data = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = debug_record;\n      debug_record[2] = (long)debug_data;\n      ptr = debug_data;\n      for (result = 0xc; result != 0; result = result + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = debug_data;\n      result = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(debug_data + 6) = param_5;\n      *(undefined8 *)(debug_data + 8) = 0xffffffffffffffff;\n      result = initialize_memory_00112925(result + 0x10,default_filename,3,(flags & 0xff) + 1);\n      if (result != 0) {\n        *(long **)(result + 0x20) = debug_record;\n        error_message = CONCAT71((int7)((ulong)result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "record_debug_function_0010bc80",
            "entrypoint": "0x0010bc80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "_stderr": "error_stream",
                "auVar8": "return_value",
                "bVar7": "flag",
                "lVar4": "result",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flags",
                "pcVar6": "default_filename",
                "plVar2": "debug_record",
                "puVar3": "debug_data",
                "puVar5": "ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bd62": {
            "additional_data": {
                "FUN_0010bd62": {
                    "record_debug_parameter": 2,
                    "record_parameter": 21,
                    "record_parameter_debug": 6,
                    "record_parameter_debug_info": 1,
                    "record_parameter_information": 1
                },
                "bVar8": {
                    "byte_flag": 3,
                    "byte_value": 2,
                    "count": 1,
                    "counter": 3,
                    "flag": 17,
                    "initialize_to_zero": 1,
                    "is_non_zero": 1,
                    "is_zero": 1,
                    "iteration_count": 1,
                    "loop_counter": 1
                },
                "lVar5": {
                    "counter": 3,
                    "entry_size": 1,
                    "i": 2,
                    "iter": 1,
                    "loop_count": 2,
                    "loop_counter": 7,
                    "loop_index": 1,
                    "offset": 2,
                    "record_offset": 1,
                    "size": 1,
                    "temp_address": 1,
                    "temp_long": 1,
                    "temp_value": 1,
                    "temp_var": 2
                },
                "param_1": {
                    "function": 1,
                    "function_address": 3,
                    "function_context": 1,
                    "function_data": 2,
                    "function_entry": 1,
                    "function_info": 6,
                    "function_pointer": 4,
                    "function_ptr": 11,
                    "parameter_struct": 1,
                    "source_address": 1
                },
                "param_2": {
                    "arg1": 2,
                    "function_id": 1,
                    "param1": 7,
                    "param2": 3,
                    "param_2": 1,
                    "param_ptr": 4,
                    "param_ptr1": 1,
                    "param_size": 2,
                    "param_value": 2,
                    "parameter1": 1,
                    "parameter_1": 1,
                    "record_ptr": 2,
                    "record_size": 1,
                    "size": 3
                },
                "param_3": {
                    "arg2": 2,
                    "arg_ptr": 1,
                    "count": 1,
                    "data_ptr": 1,
                    "length": 2,
                    "param2": 7,
                    "param3": 3,
                    "param_3": 1,
                    "param_count": 1,
                    "param_index": 1,
                    "param_offset": 1,
                    "param_ptr2": 1,
                    "param_size": 3,
                    "param_value": 1,
                    "parameter2": 1,
                    "parameter_2": 1,
                    "parameter_id": 1,
                    "parameter_ptr": 1,
                    "record_count": 1
                },
                "param_4": {
                    "arg3": 2,
                    "arg_size": 1,
                    "debug_info": 1,
                    "param3": 7,
                    "param4": 3,
                    "param_4": 1,
                    "param_4_value": 1,
                    "param_type": 5,
                    "param_value": 3,
                    "parameter": 1,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "parameter_type": 2,
                    "parameter_value": 1,
                    "value": 1
                },
                "param_5": {
                    "arg4": 2,
                    "data": 2,
                    "debug_data": 1,
                    "debug_ptr": 1,
                    "debug_record": 1,
                    "function_information": 1,
                    "function_record": 1,
                    "param4": 7,
                    "param5": 3,
                    "param_5": 1,
                    "param_5_value": 1,
                    "param_pointer": 1,
                    "param_ptr": 2,
                    "param_ptr3": 1,
                    "param_value": 2,
                    "parameter4": 1,
                    "parameter_4": 1,
                    "record_ptr": 2
                },
                "puVar1": {
                    "current": 5,
                    "current_entry": 1,
                    "current_node": 1,
                    "current_pointer": 1,
                    "current_ptr": 9,
                    "last_element": 1,
                    "last_function": 1,
                    "last_node": 1,
                    "last_pointer": 1,
                    "last_ptr": 1,
                    "last_var": 1,
                    "next_func": 1,
                    "next_function_ptr": 1,
                    "next_node": 1,
                    "next_ptr": 2,
                    "next_record": 2,
                    "prev_function_record": 1
                },
                "puVar2": {
                    "result": 1
                },
                "puVar3": {
                    "allocated_memory": 2,
                    "debug_parameter": 1,
                    "new_entry": 1,
                    "new_memory": 1,
                    "new_param_ptr": 1,
                    "new_parameter_info": 1,
                    "new_pointer": 1,
                    "new_ptr": 3,
                    "new_record": 9,
                    "new_record_ptr": 2,
                    "new_struct": 1,
                    "parameter": 1,
                    "record": 3,
                    "record_pointer": 1,
                    "record_ptr": 1,
                    "recorded_param_ptr": 1,
                    "struct_ptr": 1
                },
                "puVar4": {
                    "current_element": 1,
                    "current_func": 1,
                    "current_function": 1,
                    "current_function_ptr": 1,
                    "current_node": 1,
                    "current_pointer": 1,
                    "current_ptr": 3,
                    "current_record": 2,
                    "current_var": 1,
                    "last_pointer": 1,
                    "next": 1,
                    "next_node": 2,
                    "next_ptr": 1,
                    "previous_entry": 1,
                    "ptr_iterator": 1,
                    "temp": 3,
                    "temp_pointer": 1,
                    "temp_ptr": 8
                },
                "puVar6": {
                    "function_pointer_loop": 1,
                    "last": 2,
                    "last_entry": 1,
                    "last_function_record": 1,
                    "last_node": 1,
                    "last_pointer": 1,
                    "last_ptr": 8,
                    "last_record": 2,
                    "last_record_ptr": 1,
                    "node_ptr": 1,
                    "prev_func": 1,
                    "prev_pointer": 1,
                    "prev_ptr": 3,
                    "prev_record": 1,
                    "previous_element": 1,
                    "previous_function": 1,
                    "previous_node": 1,
                    "previous_ptr": 1,
                    "previous_record": 1,
                    "previous_var": 1
                },
                "puVar7": {
                    "current_parameter_info": 1,
                    "init_ptr": 1,
                    "initialized_pointer": 1,
                    "iterator": 1,
                    "loop_counter": 1,
                    "loop_ptr": 1,
                    "loop_var": 1,
                    "new_entry_iterator": 1,
                    "new_record_iterator": 1,
                    "ptr": 1,
                    "ptr_iterator": 1,
                    "pu_var7": 1,
                    "record_pointer_loop": 1,
                    "record_ptr": 4,
                    "struct_ptr_copy": 1,
                    "temp": 1,
                    "temp_debug_parameter": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 4,
                    "temp_ptr2": 2,
                    "temp_record": 1,
                    "temp_record_ptr": 1,
                    "temp_struct": 1
                },
                "uVar2": {
                    "debug_msg": 1,
                    "err_msg": 1,
                    "error_message": 17,
                    "error_msg": 7,
                    "message": 2,
                    "translation": 2
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "code": "\n\n\nundefined8\nrecord_parameter_debug_info_0010bd62(long function_ptr,long param1,long param2,undefined4 param3,undefined8 param4)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *new_record;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *last_ptr;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      new_record = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_record;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_ptr + 0x18);\n      *(long *)(new_record + 2) = param1;\n      *(long *)(new_record + 4) = param2;\n      new_record[6] = param3;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(new_record + 8) = param4;\n      last_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_record;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "current_name": "record_parameter_debug_info_0010bd62",
            "entrypoint": "0x0010bd62",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_info_0010bd62",
                "bVar8": "flag",
                "lVar5": "loop_counter",
                "param_1": "function_ptr",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "current_ptr",
                "puVar3": "new_record",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be1a": {
            "additional_data": {
                "FUN_0010be1a": {
                    "debug_end_function": 14,
                    "end_current_function": 2,
                    "end_debug_function": 2,
                    "end_debugging_function": 5,
                    "end_function": 1,
                    "end_function_debugging": 4,
                    "end_function_message": 1,
                    "handle_debug_end_function": 1,
                    "validate_function_end": 1
                },
                "_stderr": {
                    "stderr": 1
                },
                "auVar4": {
                    "output": 1,
                    "result": 5,
                    "return_data": 1,
                    "return_val": 1,
                    "return_value": 10
                },
                "lVar1": {
                    "block": 1,
                    "block_data": 6,
                    "block_info": 2,
                    "block_info_ptr": 1,
                    "block_pointer": 1,
                    "block_ptr": 1,
                    "current_block": 17,
                    "current_function_ptr": 2
                },
                "param_1": {
                    "function": 1,
                    "function_address": 1,
                    "function_context": 4,
                    "function_data": 10,
                    "function_info": 5,
                    "function_info_ptr": 2,
                    "function_pointer": 1,
                    "function_ptr": 5,
                    "function_state": 1,
                    "function_structure": 1
                },
                "param_2": {
                    "address": 1,
                    "block_address": 1,
                    "current_function": 1,
                    "debug_info_ptr": 1,
                    "message": 1,
                    "new_address": 1,
                    "new_block": 1,
                    "new_block_start": 1,
                    "new_context_value": 1,
                    "new_current_block": 1,
                    "new_end_block": 1,
                    "new_end_debug_type": 1,
                    "new_func_address": 1,
                    "new_func_ptr": 1,
                    "new_function_addr": 1,
                    "new_function_data": 1,
                    "new_function_ptr": 2,
                    "new_param": 6,
                    "new_param_2": 1,
                    "new_position": 1,
                    "new_return_address": 1,
                    "new_return_value": 1,
                    "new_value": 2,
                    "previous_function_address": 1
                },
                "param_3": {
                    "arg3": 1,
                    "blocks_closed": 1,
                    "new_param_3": 1,
                    "old_param": 1,
                    "param_3": 1,
                    "unused": 2,
                    "unused_param": 20,
                    "unused_param_3": 1,
                    "unused_parameter": 2,
                    "unused_ptr": 1
                },
                "param_4": {
                    "additional_data": 1,
                    "arg4": 1,
                    "debug_end_string": 1,
                    "debug_message": 1,
                    "error_message": 6,
                    "error_message_ptr": 1,
                    "error_msg": 1,
                    "output": 1,
                    "result": 4,
                    "return_value": 6,
                    "status": 2,
                    "unused_param2": 1,
                    "user_data": 3,
                    "user_message": 2
                },
                "pcVar3": {
                    "default_error_message": 1,
                    "err_msg": 1,
                    "error_description": 1,
                    "error_message": 12,
                    "error_message_text": 1,
                    "error_msg": 1,
                    "error_string": 13,
                    "error_text": 1
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_code": 1,
                    "error_message": 11,
                    "error_message_ptr": 1,
                    "error_string": 2,
                    "localized_error": 1,
                    "localized_error_message": 2,
                    "localized_message": 1,
                    "result": 3,
                    "translated_error": 1,
                    "translated_error_message": 2,
                    "translated_message": 2,
                    "translated_msg": 1,
                    "translation": 2
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] handle_debug_end_function_0010be1a(long function_data,undefined8 new_param,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_string;\n  undefined return_value [16];\n  \n  if (((*(long *)(function_data + 8) == 0) || (current_block = *(long *)(function_data + 0x20), current_block == 0)) ||\n     (*(long *)(function_data + 0x18) == 0)) {\n    error_string = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = new_param;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_data + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_string = \"debug_end_function: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "handle_debug_end_function_0010be1a",
            "entrypoint": "0x0010be1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be1a": "handle_debug_end_function_0010be1a",
                "_stderr": "stderr",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "function_data",
                "param_2": "new_param",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_string",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010be88": {
            "additional_data": {
                "FUN_0010be88": {
                    "debug_block_start": 1,
                    "debug_start_block": 7,
                    "debugger_start_block": 2,
                    "find_current_block": 1,
                    "initialize_current_block": 1,
                    "start_block_debug": 1,
                    "start_block_debugger": 1,
                    "start_block_debugging": 5,
                    "start_debug_block": 11,
                    "start_debugging": 1
                },
                "auVar9": {
                    "result": 9,
                    "return_array": 1,
                    "return_struct": 2,
                    "return_val": 1,
                    "return_value": 13,
                    "return_value_struct": 1,
                    "return_values": 1
                },
                "bVar8": {
                    "byte_flag": 1,
                    "byte_value": 1,
                    "byte_var": 4,
                    "counter": 5,
                    "flag": 10,
                    "is_zero": 1,
                    "iter_count": 1,
                    "iteration_counter": 1,
                    "loop_counter": 3,
                    "loop_flag": 1,
                    "zero": 1,
                    "zero_byte": 2
                },
                "lVar5": {
                    "block_address": 8,
                    "block_address_copy": 1,
                    "block_address_temp": 1,
                    "block_ptr": 2,
                    "block_ptr_value": 1,
                    "current_block": 4,
                    "current_block_address": 1,
                    "param_value": 1,
                    "ptr_offset": 1,
                    "temp_address": 1,
                    "temp_long": 2,
                    "temp_value": 1,
                    "value": 1
                },
                "param_1": {
                    "block": 5,
                    "block_address": 5,
                    "block_info": 8,
                    "block_pointer": 3,
                    "block_ptr": 10
                },
                "param_2": {
                    "block_data": 2,
                    "block_start": 1,
                    "block_value": 1,
                    "current_block": 2,
                    "current_block_ptr": 1,
                    "current_pointer": 1,
                    "debug_info": 1,
                    "debug_message": 1,
                    "debugger_object": 1,
                    "debugger_ptr": 1,
                    "debugging_address": 1,
                    "input_param": 1,
                    "param2": 6,
                    "param_var2": 1,
                    "start": 2,
                    "start_addr": 1,
                    "start_address": 6,
                    "value1": 1
                },
                "param_3": {
                    "end": 2,
                    "end_addr": 1,
                    "end_address": 2,
                    "param3": 6,
                    "param_3": 4,
                    "param_var3": 1,
                    "unimportant_param": 1,
                    "unused1": 3,
                    "unused_param": 9,
                    "unused_parameter": 1,
                    "value2": 1
                },
                "param_4": {
                    "debug_block": 1,
                    "debug_flag": 3,
                    "debug_mode": 1,
                    "end_address": 1,
                    "output_param": 1,
                    "param4": 6,
                    "param_var4": 1,
                    "result": 3,
                    "return_status": 1,
                    "return_value": 7,
                    "unused2": 3,
                    "unused_param": 2,
                    "value3": 1
                },
                "puVar1": {
                    "block_ptr": 2,
                    "current": 2,
                    "current_address_ptr": 1,
                    "current_block": 5,
                    "current_block_ptr": 1,
                    "current_element": 1,
                    "current_node": 1,
                    "current_pointer": 3,
                    "current_ptr": 3,
                    "last_block": 2,
                    "last_block_ptr": 1,
                    "next_block": 1,
                    "next_pointer": 2,
                    "prev_ptr": 1,
                    "ptr1": 1,
                    "ptr_traversal": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1
                },
                "puVar3": {
                    "allocated_memory": 3,
                    "block_data": 1,
                    "block_ptr_array": 1,
                    "new_block": 21,
                    "new_block_ptr": 5
                },
                "puVar4": {
                    "current_block": 2,
                    "current_pointer": 2,
                    "current_ptr": 3,
                    "next_block": 2,
                    "next_block_pointer": 1,
                    "next_element": 1,
                    "next_node": 1,
                    "next_pointer": 1,
                    "next_ptr": 1,
                    "ptr": 3,
                    "temp_block_ptr": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 8,
                    "temp_ptr2": 1
                },
                "puVar6": {
                    "current_block_ptr": 1,
                    "current_pointer": 1,
                    "last_block": 3,
                    "last_block_ptr": 2,
                    "last_element": 1,
                    "last_node": 1,
                    "last_pointer": 5,
                    "last_ptr": 7,
                    "next_block_ptr": 1,
                    "prev_block": 1,
                    "prev_block_ptr": 1,
                    "prev_ptr": 3,
                    "previous_block_ptr": 1,
                    "previous_ptr": 1,
                    "temp_ptr": 1,
                    "temp_ptr3": 1
                },
                "puVar7": {
                    "block_iterator": 1,
                    "block_ptr": 2,
                    "current_block_ptr": 1,
                    "current_ptr": 1,
                    "init_ptr": 1,
                    "initial_block": 1,
                    "initial_block_ptr": 1,
                    "iterator_ptr": 1,
                    "loop_memory": 1,
                    "new_block_iterator": 1,
                    "new_block_ptr": 1,
                    "ptr_initialization": 1,
                    "pu_var7": 1,
                    "temp": 1,
                    "temp_block": 6,
                    "temp_block_pointer": 1,
                    "temp_data": 1,
                    "temp_memory_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_2": 1,
                    "var7": 1
                },
                "uVar2": {
                    "error_message": 1,
                    "is_success": 1,
                    "result": 15,
                    "return_value": 3,
                    "status": 1,
                    "success": 5,
                    "success_flag": 5
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] debug_block_start_0010be88(long block_ptr,undefined8 start_address,undefined8 unused_param,undefined8 return_value)\n\n{\n  undefined8 *current_block;\n  undefined8 result;\n  undefined4 *new_block;\n  undefined8 *temp_ptr;\n  long block_address;\n  undefined8 *last_ptr;\n  undefined4 *temp_block;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if ((*(long *)(block_ptr + 8) == 0) || (*(long *)(block_ptr + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    temp_block = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *temp_block = 0;\n      temp_block = temp_block + (ulong)flag * -2 + 1;\n    }\n    block_address = *(long *)(block_ptr + 0x20);\n    *(undefined8 *)(new_block + 6) = start_address;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    current_block = *(undefined8 **)(block_address + 0x10);\n    last_ptr = (undefined8 *)(block_address + 0x10);\n    while (temp_ptr = current_block, temp_ptr != (undefined8 *)0x0) {\n      last_ptr = temp_ptr;\n      current_block = (undefined8 *)*temp_ptr;\n    }\n    *last_ptr = new_block;\n    result = 1;\n    *(undefined4 **)(block_ptr + 0x20) = new_block;\n  }\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "debug_block_start_0010be88",
            "entrypoint": "0x0010be88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010be88": "debug_block_start_0010be88",
                "auVar9": "return_value",
                "bVar8": "flag",
                "lVar5": "block_address",
                "param_1": "block_ptr",
                "param_2": "start_address",
                "param_3": "unused_param",
                "param_4": "return_value",
                "puVar1": "current_block",
                "puVar3": "new_block",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "temp_block",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf20": {
            "additional_data": {
                "FUN_0010bf20": {
                    "close_debug_block": 3,
                    "debug_end_block": 11,
                    "debugger_end_block": 1,
                    "end_block": 5,
                    "end_block_debug": 1,
                    "end_block_debugging": 1,
                    "end_current_block": 1,
                    "end_debug_block": 7,
                    "update_debug_block": 1
                },
                "auVar4": {
                    "output": 1,
                    "result": 1,
                    "result_variable": 1,
                    "ret_val": 1,
                    "return_value": 6,
                    "return_value_struct": 1,
                    "return_variable": 2
                },
                "lVar1": {
                    "current_block": 23,
                    "current_block_data": 1,
                    "current_block_pointer": 2,
                    "current_block_ptr": 4,
                    "ptr2": 1
                },
                "param_1": {
                    "block": 2,
                    "block_data": 3,
                    "block_info": 1,
                    "block_pointer": 4,
                    "block_ptr": 13,
                    "current_block_ptr": 1,
                    "debug_block_manager": 1,
                    "debugger_context": 1,
                    "function_data": 1,
                    "input1": 1,
                    "input_struct": 1,
                    "param1": 1,
                    "ptr1": 1
                },
                "param_2": {
                    "block_end_timestamp": 1,
                    "block_id": 1,
                    "block_ptr": 1,
                    "debug_end_block_msg": 1,
                    "debug_info": 1,
                    "debug_msg": 1,
                    "end_address": 2,
                    "end_marker": 1,
                    "end_ptr": 1,
                    "input2": 1,
                    "new_block": 2,
                    "new_block_data": 1,
                    "new_block_id": 1,
                    "new_block_pointer": 1,
                    "new_block_ptr": 5,
                    "new_context": 2,
                    "new_end": 1,
                    "new_end_ptr": 1,
                    "new_param": 1,
                    "new_parent": 1,
                    "new_parent_ptr": 1,
                    "new_ptr": 1,
                    "new_value": 1,
                    "param2": 1
                },
                "param_3": {
                    "input3": 1,
                    "param3": 1,
                    "param_3": 2,
                    "stderr": 1,
                    "undefined": 1,
                    "unknown": 1,
                    "unknown_ptr": 1,
                    "unused": 5,
                    "unused1": 1,
                    "unused_1": 1,
                    "unused_data1": 1,
                    "unused_param": 12,
                    "unused_param1": 1,
                    "unused_param3": 1,
                    "unused_param_3": 1
                },
                "param_4": {
                    "aux_var": 1,
                    "input4": 1,
                    "output_value": 2,
                    "param4": 1,
                    "param_4": 2,
                    "result": 5,
                    "return_value": 12,
                    "retval": 2,
                    "unused2": 1,
                    "unused_2": 1,
                    "unused_data2": 1,
                    "unused_param2": 2
                },
                "pcVar3": {
                    "err_string": 1,
                    "error_message": 14,
                    "error_message_string": 1,
                    "error_msg": 3,
                    "error_string": 12
                },
                "uVar2": {
                    "err_msg": 3,
                    "error_message": 11,
                    "error_msg": 1,
                    "error_string": 3,
                    "localized_error_message": 2,
                    "localized_msg": 1,
                    "localized_string": 1,
                    "result": 6,
                    "translated_message": 1,
                    "translated_msg": 1,
                    "translation_result": 1
                }
            },
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined  [16] end_block_debug_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 return_value)\n\n{\n  long current_block;\n  undefined8 error_message;\n  char *error_message;\n  undefined return_value [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block_ptr;\n      error_message = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  return_value._8_8_ = return_value;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "current_name": "end_block_debug_0010bf20",
            "entrypoint": "0x0010bf20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf20": "end_block_debug_0010bf20",
                "auVar4": "return_value",
                "lVar1": "current_block",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "param_4": "return_value",
                "pcVar3": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010bf86": {
            "additional_data": {
                "FUN_0010bf86": {
                    "add_debug_record_line": 1,
                    "debug_record_line": 1,
                    "record_debug_line": 13,
                    "record_line": 6,
                    "record_line_and_unit_check": 1,
                    "record_line_debug": 1,
                    "record_line_debug_info": 4,
                    "update_debug_record_line": 2,
                    "update_record_line": 2
                },
                "_stderr": {
                    "error_stream": 1
                },
                "bVar7": {
                    "bit": 1,
                    "byte_var": 1,
                    "condition_flag": 1,
                    "counter": 1,
                    "debug_flag": 1,
                    "flag": 22,
                    "is_debug": 1,
                    "is_debugging": 1,
                    "zero_flag": 1
                },
                "lVar5": {
                    "count": 4,
                    "counter": 4,
                    "current_line": 1,
                    "i": 4,
                    "index": 4,
                    "iteration": 1,
                    "iterator": 2,
                    "length": 2,
                    "loop_counter": 5,
                    "loop_index": 2,
                    "loop_var": 1,
                    "temp": 1
                },
                "param_1": {
                    "context": 2,
                    "current_unit": 1,
                    "debug_info": 4,
                    "debug_manager": 1,
                    "debug_record_line_data": 1,
                    "debug_state": 2,
                    "debug_unit": 1,
                    "input": 1,
                    "param_pointer": 1,
                    "record": 3,
                    "record_ptr": 6,
                    "unit": 3,
                    "unit_address": 1,
                    "unit_pointer": 2,
                    "unit_ptr": 2
                },
                "param_2": {
                    "data1": 1,
                    "debug_record_ptr": 1,
                    "debug_value": 1,
                    "line": 4,
                    "line_num": 1,
                    "line_number": 10,
                    "line_ptr": 1,
                    "line_record": 1,
                    "new_param_1": 1,
                    "param_2": 2,
                    "record": 5,
                    "record_line_param1": 1,
                    "record_pointer": 1,
                    "unit": 1
                },
                "param_3": {
                    "data2": 1,
                    "file_name": 1,
                    "file_ptr": 2,
                    "line": 5,
                    "line_pointer": 1,
                    "line_record": 2,
                    "line_value": 1,
                    "new_param_2": 1,
                    "param_3": 2,
                    "record": 1,
                    "record_line_param2": 1,
                    "source_file": 5,
                    "unit": 5,
                    "unit_data": 1,
                    "unit_pointer": 1,
                    "unit_ptr": 1
                },
                "puVar2": {
                    "current_position": 1,
                    "current_record": 3,
                    "current_unit": 6,
                    "current_unit_ptr": 1,
                    "debug_record": 1,
                    "entry_ptr": 2,
                    "existing_line": 1,
                    "ptr": 1,
                    "record_array": 1,
                    "record_ptr": 2,
                    "unit": 1,
                    "unit_array": 2,
                    "unit_array_ptr": 2,
                    "unit_ptr": 6,
                    "unit_ptr2": 1
                },
                "puVar4": {
                    "allocated_ptr": 1,
                    "debug_info": 1,
                    "debug_record": 3,
                    "new_allocation": 1,
                    "new_debug_info": 1,
                    "new_debug_line": 1,
                    "new_debug_record": 1,
                    "new_entry": 1,
                    "new_entry_ptr": 1,
                    "new_record": 14,
                    "new_record_ptr": 3,
                    "new_unit": 1,
                    "ptr2": 1,
                    "temp_ptr": 1
                },
                "puVar6": {
                    "current_entry": 1,
                    "current_ptr": 1,
                    "current_record": 3,
                    "debug_ptr": 1,
                    "entry_ptr1": 1,
                    "loop_ptr": 1,
                    "loop_var": 1,
                    "pointer": 2,
                    "ptr": 9,
                    "ptr3": 1,
                    "record_pointer": 3,
                    "record_ptr": 1,
                    "record_ptr2": 1,
                    "record_ptr_temp": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_record": 1
                },
                "uVar1": {
                    "err_msg": 1,
                    "error_message": 11,
                    "error_msg": 1,
                    "error_string": 1,
                    "message": 6,
                    "result": 11
                },
                "uVar3": {
                    "count": 2,
                    "counter": 3,
                    "i": 2,
                    "idx": 1,
                    "index": 22,
                    "loop_counter": 1
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 record_line_debug_info_0010bf86(long record_ptr,undefined8 line_number,undefined8 source_file)\n\n{\n  undefined8 result;\n  undefined8 *current_unit;\n  ulong index;\n  undefined4 *new_record;\n  long loop_counter;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(error_stream,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    loop_counter = *(long *)(record_ptr + 0x28);\n    if ((loop_counter != 0) && (*(long *)(loop_counter + 8) == *(long *)(record_ptr + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loop_counter + 0x10 + index * 8) == -1) {\n          current_unit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loop_counter + 0x10 + (long)current_unit * 8) = line_number;\n          *(undefined8 *)(loop_counter + 0x60 + (long)current_unit * 8) = source_file;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    new_record = (undefined4 *)xmalloc(0xb0);\n    ptr = new_record;\n    for (loop_counter = 0x2c; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    result = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_record + 4) = line_number;\n    *(undefined8 *)(new_record + 2) = result;\n    *(undefined8 *)(new_record + 0x18) = source_file;\n    ptr = new_record + 6;\n    for (loop_counter = 0x48; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    current_unit = *(undefined8 **)(record_ptr + 0x28);\n    if (current_unit == (undefined8 *)0x0) {\n      current_unit = *(undefined8 **)(record_ptr + 8);\n      current_unit[2] = new_record;\n    }\n    else {\n      *current_unit = new_record;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_record;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)current_unit >> 8),1);\n  }\n  return result;\n}\n\n",
            "current_name": "record_line_debug_info_0010bf86",
            "entrypoint": "0x0010bf86",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "_stderr": "error_stream",
                "bVar7": "flag",
                "lVar5": "loop_counter",
                "param_1": "record_ptr",
                "param_2": "line_number",
                "param_3": "source_file",
                "puVar2": "current_unit",
                "puVar4": "new_record",
                "puVar6": "ptr",
                "uVar1": "result",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c05d": {
            "additional_data": {
                "FUN_0010c05d": {
                    "adjust_memory_allocation": 1,
                    "debug_record_variable": 9,
                    "extract_variable_record": 1,
                    "initialize_memory": 1,
                    "initialize_variable_record": 2,
                    "record_variable": 11,
                    "record_variable_debug": 3,
                    "record_variable_debug_info": 1,
                    "record_variable_debugging": 1,
                    "translate_variable": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "error_stream": 1,
                    "stderr": 2
                },
                "auVar1": {
                    "adjusted_record": 1,
                    "buffer": 1,
                    "result": 12,
                    "result_au_var1": 1,
                    "result_buffer": 1,
                    "result_to_return": 1,
                    "result_value": 2,
                    "result_variable": 2,
                    "return_value": 4,
                    "translated_variable": 1,
                    "updated_variable_value": 1,
                    "var_data": 1,
                    "variable_data": 1
                },
                "auVar9": {
                    "combined_result": 1,
                    "final_result": 2,
                    "new_result": 1,
                    "output": 2,
                    "result": 3,
                    "result_au_var9": 1,
                    "result_info": 1,
                    "result_to_return_2": 1,
                    "result_tuple": 1,
                    "result_variable": 1,
                    "return_data": 1,
                    "return_object": 1,
                    "return_val": 1,
                    "return_value": 7,
                    "return_var": 1,
                    "return_variable": 1,
                    "updated_result": 1,
                    "updated_return": 1
                },
                "bVar8": {
                    "b_var": 1,
                    "b_var8": 2,
                    "bool_flag": 1,
                    "byte_counter": 1,
                    "byte_flag": 1,
                    "byte_value": 4,
                    "byte_var": 2,
                    "counter": 1,
                    "flag": 6,
                    "is_null": 1,
                    "is_zero": 3,
                    "loop_condition": 2,
                    "loop_flag": 1,
                    "temp_var": 1,
                    "true": 1,
                    "zero": 1
                },
                "cVar4": {
                    "c_var4": 1,
                    "condition": 1,
                    "debug": 1,
                    "flag": 9,
                    "flag_value": 1,
                    "initialized": 2,
                    "is_local": 1,
                    "is_nested": 1,
                    "is_new_record": 1,
                    "is_pointer": 1,
                    "is_single_var": 1,
                    "is_special": 2,
                    "is_type1": 1,
                    "is_valid": 2,
                    "use_current_file": 2,
                    "use_current_offset": 1
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_translation": 1
                },
                "fprintf": {
                    "print_error_message": 1,
                    "print_message": 1
                },
                "initialize_memory_00112925": {
                    "initialize_memory": 2,
                    "initialize_memory_helper": 1
                },
                "lVar5": {
                    "counter": 2,
                    "i": 1,
                    "index": 1,
                    "loop_counter": 24,
                    "loop_variable": 1
                },
                "lVar6": {
                    "allocated_memory": 1,
                    "base_ptr": 1,
                    "buffer_address": 1,
                    "current_file": 2,
                    "file": 1,
                    "file_address": 1,
                    "file_data_address": 1,
                    "file_offset": 2,
                    "file_offset_tmp": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "file_size": 1,
                    "mem_addr": 1,
                    "mem_ptr": 1,
                    "memory_address": 5,
                    "memory_block": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 5,
                    "memory_var": 1
                },
                "param_1": {
                    "context": 3,
                    "ctx": 1,
                    "current_file": 2,
                    "debuginfo": 1,
                    "file": 1,
                    "file_data": 2,
                    "file_handle": 2,
                    "file_info": 4,
                    "file_pointer": 4,
                    "file_ptr": 10,
                    "variable_state": 1
                },
                "param_2": {
                    "record_length": 1,
                    "record_ptr": 1,
                    "record_size": 2,
                    "size": 3,
                    "value": 3,
                    "var_id": 1,
                    "var_size": 3,
                    "variable": 1,
                    "variable_address": 2,
                    "variable_id": 2,
                    "variable_length": 1,
                    "variable_num": 1,
                    "variable_size": 7,
                    "variable_type": 2,
                    "variable_value": 1
                },
                "param_3": {
                    "addr": 1,
                    "address": 2,
                    "current_file": 1,
                    "current_offset": 1,
                    "current_record": 1,
                    "debug_flag": 1,
                    "file_offset": 1,
                    "file_position": 1,
                    "offset": 1,
                    "record_id": 1,
                    "size": 3,
                    "value": 2,
                    "var_addr": 1,
                    "var_address": 1,
                    "var_offset": 2,
                    "variable": 2,
                    "variable_address": 4,
                    "variable_id": 1,
                    "variable_length": 1,
                    "variable_value": 3
                },
                "param_4": {
                    "file_type": 1,
                    "flag": 2,
                    "record_type": 9,
                    "size": 1,
                    "type": 7,
                    "var_type": 4,
                    "variable_type": 7
                },
                "param_5": {
                    "data": 1,
                    "data_ptr": 1,
                    "debug_message": 2,
                    "debug_string": 1,
                    "details": 1,
                    "error_message": 1,
                    "file": 3,
                    "file_pointer": 1,
                    "message": 2,
                    "msg_domain": 1,
                    "param5": 4,
                    "param_5": 10,
                    "param_ptr": 1,
                    "record_id": 1,
                    "var_name": 1
                },
                "param_6": {
                    "debug_status": 1,
                    "param6": 4,
                    "param_6": 7,
                    "result": 15,
                    "result_ptr": 1,
                    "result_value": 1,
                    "return_value": 2
                },
                "piVar3": {
                    "data": 1,
                    "info_array": 1,
                    "int_array": 2,
                    "new_memory": 1,
                    "new_record": 1,
                    "new_var": 1,
                    "ptr": 1,
                    "ptr_type": 1,
                    "ptr_var": 1,
                    "record": 3,
                    "record_array": 1,
                    "record_info": 3,
                    "record_ptr": 5,
                    "var_info": 1,
                    "var_ptr": 1,
                    "variable": 2,
                    "variable_info": 3
                },
                "piVar7": {
                    "array_pointer": 1,
                    "count_ptr": 1,
                    "current_type": 1,
                    "flag_ptr": 1,
                    "info_array_ptr": 1,
                    "int_ptr": 2,
                    "loop_var": 2,
                    "loop_variable": 2,
                    "pi_var7": 4,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_offset": 1,
                    "ptr_plus_one": 1,
                    "ptr_type2": 1,
                    "ptr_var2": 1,
                    "record_data": 1,
                    "record_data_ptr": 1,
                    "record_element": 1,
                    "record_info_ptr": 2,
                    "record_ptr": 1,
                    "temp_ptr": 2
                },
                "uVar2": {
                    "error_code": 1,
                    "error_msg": 2,
                    "message": 1,
                    "result": 4,
                    "result_value": 1,
                    "ret_val": 1,
                    "ret_value": 1,
                    "return_val": 1,
                    "return_value": 9,
                    "retval": 1,
                    "status": 6,
                    "success": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c139",
                "FUN_0010c1c6"
            ],
            "code": "\n\n\nundefined  [16]\nrecord_variable_debug_info_0010c05d(long file_ptr,long variable_size,ulong variable_address,int record_type,undefined8 param_5,\n            undefined8 result)\n\n{\n  undefined result [16];\n  undefined8 return_value;\n  int *record_ptr;\n  char flag;\n  long loop_counter;\n  long memory_ptr;\n  int *pi_var7;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  if (variable_size == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = variable_address;\n    return result << 0x40;\n  }\n  if (variable_address != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (memory_ptr = *(long *)(file_ptr + 0x10), memory_ptr == 0)) {\n      return_value = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(stderr,\"%s\\n\",return_value);\n    }\n    else {\n      if (record_type - 1U < 2) {\n        memory_ptr = memory_ptr + 0x10;\n        flag = (record_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        memory_ptr = memory_ptr + 0x10;\n        flag = '\\0';\n      }\n      else {\n        memory_ptr = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      memory_ptr = initialize_memory(memory_ptr,variable_size,2,flag);\n      if (memory_ptr != 0) {\n        record_ptr = (int *)xmalloc(0x18);\n        pi_var7 = record_ptr + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *pi_var7 = 0;\n          pi_var7 = pi_var7 + (ulong)flag * -2 + 1;\n        }\n        *record_ptr = record_type;\n        return_value = 1;\n        *(ulong *)(record_ptr + 2) = variable_address;\n        *(undefined8 *)(record_ptr + 4) = param_5;\n        *(int **)(memory_ptr + 0x20) = record_ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  return_value = 0;\nLAB_0010c12e:\n  return_value._8_8_ = result;\n  return_value._0_8_ = return_value;\n  return return_value;\n}\n\n",
            "current_name": "record_variable_debug_info_0010c05d",
            "entrypoint": "0x0010c05d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_info_0010c05d",
                "_stderr": "stderr",
                "auVar1": "result",
                "auVar9": "return_value",
                "bVar8": "flag",
                "cVar4": "flag",
                "dcgettext": "get_error_message",
                "fprintf": "print_error_message",
                "initialize_memory_00112925": "initialize_memory",
                "lVar5": "loop_counter",
                "lVar6": "memory_ptr",
                "param_1": "file_ptr",
                "param_2": "variable_size",
                "param_3": "variable_address",
                "param_4": "record_type",
                "param_6": "result",
                "piVar3": "record_ptr",
                "piVar7": "pi_var7",
                "uVar2": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c139": {
            "additional_data": {
                "FUN_0010c139": {
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_data": 2,
                    "allocate_and_initialize_object": 1,
                    "allocate_and_set_variable": 1,
                    "allocate_and_update_struct": 1,
                    "allocate_memory": 1,
                    "create_or_update_variable": 1,
                    "create_record": 1,
                    "create_record_variable_debug_info": 1,
                    "create_variable": 2,
                    "decode_and_record_variable_info": 1,
                    "extract_debug_info": 1,
                    "initialize_record": 1,
                    "process_data": 4,
                    "process_record": 1,
                    "process_record_info": 1,
                    "process_variable": 2,
                    "process_variable_info": 1,
                    "record_or_create_variable_info": 1,
                    "record_variable_debug_info": 1,
                    "record_variable_info": 1,
                    "update_debug_info": 1,
                    "update_record": 1,
                    "update_record_info": 1
                },
                "cVar2": {
                    "char_1": 1,
                    "char_check": 1,
                    "char_flag": 1,
                    "char_value": 12,
                    "char_var": 2,
                    "char_variable": 1,
                    "character": 2,
                    "first_char": 1,
                    "flag": 7,
                    "flag_value": 1,
                    "record_flag": 1,
                    "value_at_offset_0x60": 1
                },
                "in_R10": {
                    "additional_input": 1,
                    "additional_param": 2,
                    "in_r10": 2,
                    "param10": 1,
                    "r10_value": 1,
                    "reg1": 1,
                    "register1": 2,
                    "register10": 2,
                    "register_10": 2,
                    "register_r10": 2,
                    "register_value": 2,
                    "temp2": 1,
                    "temp_ptr_1": 1,
                    "temp_register_1": 1,
                    "temp_variable2": 1,
                    "undefined8_variable": 1,
                    "unused_param_1": 1,
                    "unused_parameter": 1,
                    "unused_value": 1,
                    "unused_var": 1,
                    "var_r10": 1
                },
                "param_1": {
                    "arg1": 2,
                    "context": 2,
                    "data": 1,
                    "function_pointer": 1,
                    "input1": 2,
                    "input_data": 1,
                    "input_param": 2,
                    "input_struct": 1,
                    "invalid_variable": 1,
                    "param": 1,
                    "param1": 2,
                    "param_1": 3,
                    "param_object": 1,
                    "ptr": 1,
                    "ptr_param_1": 1,
                    "record": 2,
                    "record_id": 1,
                    "record_info": 2,
                    "source_address": 1,
                    "undefined8_param": 1,
                    "undefined_param1": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 2,
                    "base_address": 1,
                    "data": 5,
                    "data_address": 1,
                    "data_object": 1,
                    "data_ptr": 2,
                    "input2": 2,
                    "long_param": 1,
                    "param": 1,
                    "param2": 2,
                    "ptr_struct": 1,
                    "record": 2,
                    "record_address": 3,
                    "record_data": 1,
                    "record_info": 1,
                    "record_param": 1,
                    "record_ptr": 1,
                    "struct_ptr": 1,
                    "variable": 1,
                    "variable_info": 1
                },
                "param_3": {
                    "arg3": 2,
                    "data": 1,
                    "data_address": 1,
                    "input1": 1,
                    "input3": 2,
                    "new_param1": 1,
                    "new_param_1": 1,
                    "new_param_3": 1,
                    "param1": 1,
                    "param3": 5,
                    "param_3": 7,
                    "param_a": 1,
                    "param_address": 1,
                    "param_ptr": 1,
                    "parameter_1": 1,
                    "undefined8_ptr_param": 1,
                    "undefined_param": 1,
                    "undefined_param3": 1,
                    "value_address": 1
                },
                "param_4": {
                    "arg4": 2,
                    "data_param": 1,
                    "flag_ptr": 1,
                    "info": 1,
                    "info_1": 1,
                    "input2": 1,
                    "input4": 2,
                    "new_param2": 1,
                    "new_param_2": 1,
                    "new_param_4": 1,
                    "param2": 1,
                    "param4": 6,
                    "param_4": 7,
                    "param_b": 1,
                    "param_value": 1,
                    "parameter_2": 1,
                    "type": 1,
                    "undefined8_param": 1
                },
                "param_5": {
                    "arg5": 2,
                    "flag": 2,
                    "flag_param": 1,
                    "info_2": 1,
                    "input3": 1,
                    "input5": 2,
                    "new_param3": 1,
                    "new_param_3": 1,
                    "new_param_5": 1,
                    "param3": 1,
                    "param5": 6,
                    "param_5": 7,
                    "param_c": 1,
                    "param_flag": 1,
                    "parameter_3": 1,
                    "undefined4_param": 1,
                    "value_ptr": 1
                },
                "param_6": {
                    "address_param": 1,
                    "address_ptr": 1,
                    "arg6": 2,
                    "extra_param": 1,
                    "info_3": 1,
                    "input4": 1,
                    "input6": 2,
                    "new_param4": 1,
                    "new_param_4": 1,
                    "new_param_6": 1,
                    "param4": 1,
                    "param6": 6,
                    "param_6": 7,
                    "param_d": 1,
                    "param_data": 1,
                    "parameter_4": 1,
                    "undefined8_param": 1,
                    "value": 1
                },
                "puVar4": {
                    "allocated_memory": 3,
                    "allocated_object": 1,
                    "allocated_variable": 2,
                    "debug_ptr": 1,
                    "new_data": 2,
                    "new_data_ptr": 2,
                    "new_pointer": 1,
                    "new_ptr": 3,
                    "new_record": 6,
                    "new_record_info": 1,
                    "new_record_ptr": 1,
                    "new_struct": 2,
                    "new_var": 1,
                    "new_variable": 4,
                    "undefined8_ptr_variable": 1
                },
                "record_variable_debug_info_0010c05d": {
                    "record_debug_info": 1,
                    "record_variable_debug_info": 1
                },
                "uVar1": {
                    "current_ptr": 1,
                    "old_data": 1,
                    "old_pointer": 1,
                    "old_ptr": 1,
                    "old_record": 2,
                    "old_value": 4,
                    "old_variable": 2,
                    "prev_data_ptr": 1,
                    "prev_ptr": 1,
                    "prev_record": 2,
                    "prev_var": 1,
                    "previous_value": 3,
                    "saved_value_address": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_var": 2,
                    "temp_var1": 2,
                    "temp_variable1": 1,
                    "undefined8_variable": 1,
                    "var1": 1
                },
                "uVar3": {
                    "debug_info": 1,
                    "record_result": 1,
                    "result": 23,
                    "result_value": 1,
                    "ret_value": 1,
                    "return_value": 3,
                    "ulong_variable": 1
                },
                "unaff_R15": {
                    "additional_input2": 1,
                    "additional_value": 1,
                    "r15_value": 1,
                    "reference_flag": 1,
                    "reg2": 1,
                    "register15": 1,
                    "register2": 2,
                    "register_15": 2,
                    "register_r15": 2,
                    "temp3": 1,
                    "temp_ptr_2": 1,
                    "temp_register_2": 1,
                    "temp_variable3": 1,
                    "unaff_r15": 2,
                    "unaff_register": 1,
                    "unaff_var": 1,
                    "unaffected15": 1,
                    "unaffected_register15": 1,
                    "undefined8_variable": 1,
                    "unused_param_2": 1,
                    "unused_register": 1,
                    "unused_value": 1,
                    "unused_var2": 1,
                    "unused_variable": 1,
                    "var_r15": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "FUN_0010c05d",
                "xmalloc"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\nulong record_or_create_variable_info_0010c139(undefined8 param_1,long data,undefined8 param_3,undefined8 param_4,\n                  undefined4 param_5,undefined8 param_6)\n\n{\n  undefined8 old_value;\n  char char_value;\n  ulong result;\n  undefined8 *new_record;\n  undefined8 register_r10;\n  undefined8 register_15;\n  \n  char_value = *(char *)(data + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(data + 0x40) != 0 || (*(char *)(data + 0x44) == '\\0')))) {\n    new_record = (undefined8 *)xmalloc(0x28);\n    old_value = *(undefined8 *)(data + 0x78);\n    *(undefined8 *)((long)new_record + 0x1c) = 0;\n    new_record[2] = param_4;\n    *(undefined4 *)(new_record + 3) = param_5;\n    new_record[4] = param_6;\n    *(undefined8 **)(data + 0x78) = new_record;\n    *new_record = old_value;\n    new_record[1] = param_3;\n    return CONCAT71((int7)((ulong)register_15 >> 8),char_value) & 0xffffffff;\n  }\n  result = record_variable_debug_info(param_1,param_3,param_4,param_5,param_6,register_r10);\n  return result;\n}\n\n",
            "current_name": "record_or_create_variable_info_0010c139",
            "entrypoint": "0x0010c139",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c139": "record_or_create_variable_info_0010c139",
                "cVar2": "char_value",
                "in_R10": "register_r10",
                "param_2": "data",
                "puVar4": "new_record",
                "record_variable_debug_info_0010c05d": "record_variable_debug_info",
                "uVar1": "old_value",
                "uVar3": "result",
                "unaff_R15": "register_15",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c1c6": {
            "additional_data": {
                "FUN_0010c1c6": {
                    "cleanup_records": 1,
                    "extract_debug_info": 1,
                    "process_debug_info": 1,
                    "process_records": 2,
                    "process_variable_debug_info": 2,
                    "process_variable_info": 3,
                    "record_and_free_debug_info": 1,
                    "record_debug_info": 1,
                    "update_debug_info": 4,
                    "update_records": 1,
                    "update_variable_debug_info": 10,
                    "update_variable_debug_information": 1,
                    "update_variable_info": 1,
                    "update_variables": 1
                },
                "__ptr": {
                    "current_node": 1,
                    "current_pointer": 6,
                    "current_ptr": 14,
                    "current_record": 5,
                    "current_record_ptr": 1,
                    "record": 2,
                    "variable_ptr": 1
                },
                "cVar2": {
                    "check_result": 1,
                    "debug_info_result": 3,
                    "flag": 3,
                    "info_status": 1,
                    "is_debug_info_updated": 1,
                    "is_free": 1,
                    "is_info_available": 1,
                    "is_successful": 1,
                    "result": 10,
                    "result_char": 1,
                    "status": 4,
                    "valid_record": 1
                },
                "param_1": {
                    "arg1": 1,
                    "context": 1,
                    "debugger": 1,
                    "func_ptr": 1,
                    "function_address": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "input": 1,
                    "input_param": 1,
                    "old_ptr": 1,
                    "param": 6,
                    "param1": 5,
                    "param_1": 6,
                    "param_pointer": 1,
                    "record": 1,
                    "record_handler": 1
                },
                "param_2": {
                    "arg": 1,
                    "arg2": 1,
                    "data": 5,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "data_structure": 2,
                    "param2": 5,
                    "param_2": 3,
                    "record": 3,
                    "record_data": 1,
                    "record_info": 1,
                    "record_pointer": 1,
                    "record_ptr": 4,
                    "struct_ptr": 1
                },
                "param_3": {
                    "arg1": 2,
                    "arg3": 1,
                    "param1": 1,
                    "param3": 7,
                    "param_3": 9,
                    "param_value_1": 1,
                    "parameter_1": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_1": 1,
                    "str_arg": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg2": 2,
                    "arg4": 1,
                    "param2": 1,
                    "param4": 7,
                    "param_4": 9,
                    "param_value_2": 1,
                    "parameter_2": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr_2": 1,
                    "ptr_arg": 1,
                    "var4": 1
                },
                "param_5": {
                    "addr_arg": 1,
                    "arg3": 2,
                    "arg5": 1,
                    "param3": 1,
                    "param5": 7,
                    "param_5": 11,
                    "param_value_3": 1,
                    "parameter_3": 1,
                    "ptr3": 1,
                    "ptr_3": 1,
                    "var5": 1
                },
                "param_6": {
                    "arg4": 2,
                    "arg6": 1,
                    "flag": 1,
                    "param4": 1,
                    "param6": 8,
                    "param_6": 11,
                    "param_value_4": 1,
                    "parameter_4": 1,
                    "ptr4": 1,
                    "ptr_4": 1,
                    "value_arg": 1,
                    "var6": 1
                },
                "puVar1": {
                    "next_node": 1,
                    "next_pointer": 6,
                    "next_ptr": 14,
                    "next_record": 5,
                    "next_record_ptr": 2,
                    "ptr": 1,
                    "temp_ptr": 1
                }
            },
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "code": "\nundefined update_variable_debug_info_0010c1c6(undefined8 param_1,long param2,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_ptr;\n  char result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    result = record_variable_debug_info_0010c05d(param_1,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_6,\n                         param_5);\n    if (result == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "current_name": "update_variable_debug_info_0010c1c6",
            "entrypoint": "0x0010c1c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c1c6": "update_variable_debug_info_0010c1c6",
                "__ptr": "current_ptr",
                "cVar2": "result",
                "param_2": "param2",
                "puVar1": "next_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c218": {
            "additional_data": {
                "FUN_0010c218": {
                    "convert_type_to_memory_block": 1,
                    "debug_name_type": 2,
                    "decode_debug_name": 1,
                    "extract_file_name_type": 1,
                    "handle_debug_name_type": 1,
                    "initialize_block": 1,
                    "initialize_block_and_memory": 1,
                    "initialize_debug_data": 2,
                    "initialize_debug_info": 3,
                    "initialize_debug_name_type": 3,
                    "initialize_memory_and_return_block": 1,
                    "initialize_memory_block": 9,
                    "initialize_memory_block_with_type_information": 1,
                    "initialize_memory_with_block": 1,
                    "process_data": 1,
                    "process_debug_name_type": 2
                },
                "_stderr": {
                    "error_output": 2
                },
                "lVar2": {
                    "block_address": 1,
                    "memory_block": 26,
                    "memory_block_ptr": 4
                },
                "lVar4": {
                    "current_file_ptr": 1,
                    "file_pointer": 2,
                    "initialized_memory": 16,
                    "initialized_memory_ptr": 3,
                    "memory": 1,
                    "memory_address": 2,
                    "memory_info": 1,
                    "memory_init_result": 2,
                    "memory_initialized": 1,
                    "memory_result": 1,
                    "result": 1
                },
                "param_1": {
                    "current_file": 2,
                    "data": 1,
                    "file": 3,
                    "file_context": 1,
                    "file_data": 4,
                    "file_info": 9,
                    "file_info_pointer": 1,
                    "file_info_ptr": 1,
                    "file_pointer": 2,
                    "file_ptr": 2,
                    "file_struct": 1,
                    "file_structure": 1,
                    "function_ptr": 1,
                    "input1": 1,
                    "struct_ptr": 1
                },
                "param_2": {
                    "block_size": 7,
                    "current_file": 1,
                    "current_file_offset": 2,
                    "current_index": 1,
                    "data_size": 1,
                    "debug_name": 1,
                    "debug_name_type": 1,
                    "file_offset": 1,
                    "file_size": 1,
                    "input2": 1,
                    "name_type": 6,
                    "offset_1": 1,
                    "param_2": 1,
                    "size": 5,
                    "type": 1
                },
                "param_3": {
                    "block_size": 2,
                    "current_file": 4,
                    "current_type": 1,
                    "data": 1,
                    "data_offset": 1,
                    "debug_name_type": 1,
                    "file_offset": 1,
                    "file_size": 1,
                    "file_type": 2,
                    "flag": 1,
                    "input3": 1,
                    "memory_size": 4,
                    "offset": 1,
                    "offset_2": 1,
                    "param_3": 2,
                    "size": 1,
                    "type": 5,
                    "value": 1
                },
                "pauVar3": {
                    "block_header": 1,
                    "block_pointer": 1,
                    "memory": 1,
                    "memory_array": 2,
                    "memory_array_ptr": 1,
                    "memory_block": 1,
                    "memory_block_array_ptr": 1,
                    "memory_block_ptr": 1,
                    "memory_info": 1,
                    "memory_map": 1,
                    "memory_meta_ptr": 1,
                    "memory_pointer": 5,
                    "memory_ptr": 6,
                    "memory_ptr_ptr": 1,
                    "pointer_array": 3,
                    "pointer_to_memory": 1,
                    "ptr_memory": 1,
                    "type_block_ptr": 1,
                    "type_info_ptr": 1
                },
                "uVar1": {
                    "debug_name_error": 1,
                    "error_message": 24,
                    "error_msg": 3,
                    "localized_message": 1,
                    "localized_string": 1
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_0010c2d2"
            ],
            "code": "\n\n\nlong initialize_memory_block_with_type_information_0010c218(long file_info,long block_size,long type)\n\n{\n  undefined8 error_message;\n  long memory_block;\n  undefined (*memory_ptr) [16];\n  long initialized_memory;\n  \n  if ((block_size != 0) && (type != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(error_output,\"%s\\n\",error_message);\n    }\n    else {\n      memory_block = initialize_memory_block_00112904(0x16,0);\n      if (memory_block != 0) {\n        memory_ptr = (undefined (*) [16])xmalloc(0x10);\n        initialized_memory = *(long *)(file_info + 0x10);\n        *memory_ptr = ZEXT816(0);\n        *(long *)(*memory_ptr + 8) = type;\n        *(undefined (**) [16])(memory_block + 0x10) = memory_ptr;\n        initialized_memory = initialize_memory_00112925(initialized_memory + 0x10,block_size,0,3);\n        if (initialized_memory != 0) {\n          *(long *)(initialized_memory + 0x20) = memory_block;\n          *(long *)*memory_ptr = initialized_memory;\n          return memory_block;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_block_with_type_information_0010c218",
            "entrypoint": "0x0010c218",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c218": "initialize_memory_block_with_type_information_0010c218",
                "_stderr": "error_output",
                "lVar2": "memory_block",
                "lVar4": "initialized_memory",
                "param_1": "file_info",
                "param_2": "block_size",
                "param_3": "type",
                "pauVar3": "memory_ptr",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c2d2": {
            "additional_data": {
                "FUN_0010c2d2": {
                    "get_memory_block": 1,
                    "initialize_and_retrieve_memory_block": 1,
                    "initialize_and_return_data_type": 1,
                    "initialize_and_return_memory_block": 1,
                    "initialize_data_block": 1,
                    "initialize_data_type": 7,
                    "initialize_memory_block": 9,
                    "initialize_memory_block_with_type": 4,
                    "initialize_or_get_memory_block": 1,
                    "initialize_or_return_memory_block": 1,
                    "initialize_type": 2,
                    "initialize_type_memory_block": 1,
                    "initialize_typed_memory_block": 1
                },
                "_stderr": {
                    "error_output": 1
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "initialize_and_return_memory_block_00113e17": {
                    "initialize_and_return_memory_block": 1
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 1
                },
                "initialize_memory_block_00113df2": {
                    "initialize_memory_block": 1
                },
                "initialize_memory_block_00113dfe": {
                    "initialize_memory_block": 1
                },
                "initialize_memory_block_with_type_information_0010c218": {
                    "initialize_memory_block_with_type_info": 1
                },
                "lVar4": {
                    "data_address": 1,
                    "initialized_block": 1,
                    "initialized_data_type": 1,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_block_address": 1,
                    "result": 24,
                    "var4": 1
                },
                "param_1": {
                    "input_data": 1,
                    "param1": 21,
                    "param_1": 7,
                    "param_pointer": 1,
                    "type_information": 1
                },
                "param_2": {
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_type_ptr": 1,
                    "file_pointer": 1,
                    "param2": 21,
                    "param_2": 6
                },
                "param_3": {
                    "data_type": 3,
                    "param3": 21,
                    "param_3": 5,
                    "type_information_array": 1,
                    "type_list": 1
                },
                "pcVar2": {
                    "data_type": 4,
                    "data_type_str": 1,
                    "data_type_string": 2,
                    "type_description": 2,
                    "type_name": 9,
                    "type_string": 12,
                    "var2": 1
                },
                "plVar5": {
                    "file_type": 18,
                    "file_type_information": 1,
                    "file_type_pointer": 2,
                    "file_type_ptr": 5,
                    "memory_block_ptr": 1,
                    "process_result": 1,
                    "processed_file_type": 1,
                    "ptr_to_memory_block": 1,
                    "var5": 1
                },
                "uVar1": {
                    "type": 4,
                    "type_code": 13,
                    "type_id": 2,
                    "type_index": 5,
                    "type_length": 1,
                    "type_value": 2,
                    "unrecognized_type": 1,
                    "unrecognized_xcoff_type": 1,
                    "value": 1,
                    "var1": 1
                },
                "uVar3": {
                    "block": 1,
                    "block_address": 1,
                    "block_pointer": 1,
                    "data_type_information": 1,
                    "mem_block_ptr": 1,
                    "memory_block": 24,
                    "memory_block_pointer": 1,
                    "var3": 1
                },
                "uVar6": {
                    "abs_type_code": 2,
                    "abs_type_id": 1,
                    "absolute_type_index": 1,
                    "complement_type_index": 1,
                    "index": 8,
                    "negated_type_index": 1,
                    "negative_type": 1,
                    "negative_type_code": 1,
                    "negative_type_index": 1,
                    "positive_type_code": 1,
                    "type_index": 4,
                    "unrecognized_type": 2,
                    "unsigned_type_code": 1,
                    "unsigned_type_index": 1,
                    "var6": 1
                }
            },
            "called": [
                "fprintf",
                "FUN_00109022",
                "FUN_0010c218",
                "dcgettext",
                "FUN_00113e17",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00113dfe"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nlong initialize_memory_block_with_type_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint type_code;\n  char *type_string;\n  undefined8 memory_block;\n  long result;\n  long *file_type;\n  uint index;\n  \n  if ((*param3 == 0) && (type_code = param3[1], (int)type_code < 0)) {\n    index = ~type_code;\n    if (index < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)index * 8);\n      if (result == 0) {\n        switch(index) {\n        case 1:\n          memory_block = initialize_memory_block(1,0);\n          type_string = \"char\";\n          break;\n        case 2:\n          memory_block = initialize_memory_block(2,0);\n          type_string = \"short\";\n          break;\n        case 3:\n          memory_block = initialize_memory_block(4,0);\n          type_string = \"long\";\n          break;\n        case 4:\n          memory_block = initialize_memory_block(1,1);\n          type_string = \"unsigned char\";\n          break;\n        case 5:\n          memory_block = initialize_memory_block(1,0);\n          type_string = \"signed char\";\n          break;\n        case 6:\n          memory_block = initialize_memory_block(2,1);\n          type_string = \"unsigned short\";\n          break;\n        case 7:\n          memory_block = initialize_memory_block(4,1);\n          type_string = \"unsigned int\";\n          break;\n        case 8:\n          memory_block = initialize_memory_block(4,1);\n          type_string = \"unsigned\";\n          break;\n        case 9:\n          memory_block = initialize_memory_block(4,1);\n          type_string = \"unsigned long\";\n          break;\n        case 10:\n          memory_block = initialize_and_return_memory_block();\n          type_string = \"void\";\n          break;\n        case 0xb:\n          memory_block = initialize_memory_block(4);\n          type_string = \"float\";\n          break;\n        case 0xc:\n          memory_block = initialize_memory_block(8);\n          type_string = \"double\";\n          break;\n        case 0xd:\n          memory_block = initialize_memory_block(8);\n          type_string = \"long double\";\n          break;\n        case 0xe:\n          memory_block = initialize_memory_block(4,0);\n          type_string = \"integer\";\n          break;\n        case 0xf:\n          memory_block = initialize_memory_block(6,4);\n          type_string = \"boolean\";\n          break;\n        case 0x10:\n          memory_block = initialize_memory_block(4);\n          type_string = \"short real\";\n          break;\n        case 0x11:\n          memory_block = initialize_memory_block(8);\n          type_string = \"real\";\n          break;\n        case 0x12:\n          type_string = \"stringptr\";\n          memory_block = 0;\n          break;\n        case 0x13:\n          memory_block = initialize_memory_block(1,1);\n          type_string = \"character\";\n          break;\n        case 0x14:\n          memory_block = initialize_memory_block(6,1);\n          type_string = \"logical*1\";\n          break;\n        case 0x15:\n          memory_block = initialize_memory_block(6,2);\n          type_string = \"logical*2\";\n          break;\n        case 0x16:\n          memory_block = initialize_memory_block(6,4);\n          type_string = \"logical*4\";\n          break;\n        case 0x17:\n          memory_block = initialize_memory_block(6,4);\n          type_string = \"logical\";\n          break;\n        case 0x18:\n          memory_block = initialize_memory_block(5,8);\n          type_string = \"complex\";\n          break;\n        case 0x19:\n          memory_block = initialize_memory_block(5,0x10);\n          type_string = \"double complex\";\n          break;\n        case 0x1a:\n          memory_block = initialize_memory_block(1,0);\n          type_string = \"integer*1\";\n          break;\n        case 0x1b:\n          memory_block = initialize_memory_block(2,0);\n          type_string = \"integer*2\";\n          break;\n        case 0x1c:\n          memory_block = initialize_memory_block(4,0);\n          type_string = \"integer*4\";\n          break;\n        case 0x1d:\n          memory_block = initialize_memory_block(2,0);\n          type_string = \"wchar\";\n          break;\n        case 0x1e:\n          memory_block = initialize_memory_block(8,0);\n          type_string = \"long long\";\n          break;\n        case 0x1f:\n          memory_block = initialize_memory_block(8,1);\n          type_string = \"unsigned long long\";\n          break;\n        case 0x20:\n          memory_block = initialize_memory_block(6,8);\n          type_string = \"logical*8\";\n          break;\n        case 0x21:\n          memory_block = initialize_memory_block(8,0);\n          type_string = \"integer*8\";\n          break;\n        default:\n          memory_block = initialize_memory_block(4,0);\n          type_string = \"int\";\n        }\n        result = initialize_memory_block_with_type_0010c2d2_info(param1,type_string,memory_block);\n        *(long *)(param2 + 0x90 + (ulong)index * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    type_string = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(error_output,type_string,(ulong)type_code);\n  }\n  else {\n    file_type = (long *)process_file_type_00109022(param2);\n    if (file_type != (long *)0x0) {\n      if (*file_type == 0) {\n        result = initialize_and_assign_memory_block_00113e23(file_type,0);\n        return result;\n      }\n      return *file_type;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_block_with_type_0010c2d2",
            "entrypoint": "0x0010c2d2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c2d2": "initialize_memory_block_with_type_0010c2d2",
                "_stderr": "error_output",
                "dcgettext": "get_translated_string",
                "initialize_and_return_memory_block_00113e17": "initialize_and_return_memory_block",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "initialize_memory_block_00113df2": "initialize_memory_block",
                "initialize_memory_block_00113dfe": "initialize_memory_block",
                "initialize_memory_block_with_type_information_0010c218": "initialize_memory_block_with_type_info",
                "lVar4": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pcVar2": "type_string",
                "plVar5": "file_type",
                "uVar1": "type_code",
                "uVar3": "memory_block",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c6be": {
            "additional_data": {
                "FUN_0010c6be": {
                    "check_debug_tag": 1,
                    "check_debug_tag_type": 2,
                    "debug_tag_handler": 1,
                    "debug_tag_type": 14,
                    "debug_tag_type_check": 3,
                    "find_debug_tag": 1,
                    "parse_debug_tag": 1,
                    "parse_debug_tag_type": 1,
                    "process_debug_tag": 3,
                    "process_debug_tag_type": 2,
                    "validate_and_print_debug_tag_type": 1,
                    "validate_debug_tag": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "error_output_stream": 1,
                    "standard_error": 3
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_text": 2,
                    "get_text_from_domain": 1,
                    "get_translation": 1
                },
                "fprintf": {
                    "print_error_message": 1
                },
                "iVar1": {
                    "compare_result": 1,
                    "comparison_result": 21,
                    "result": 1,
                    "strcmp_result": 2,
                    "string_compare_result": 1,
                    "string_comparison_result": 4,
                    "tag_comparison_result": 1
                },
                "initialize_memory_00112925": {
                    "initialize_memory": 4
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 4
                },
                "lVar5": {
                    "file_offset": 5,
                    "file_position": 1,
                    "init_mem": 1,
                    "memory_address": 4,
                    "memory_block_offset": 1,
                    "memory_location": 1,
                    "memory_offset": 7,
                    "memory_size": 1,
                    "offset": 5,
                    "result": 4,
                    "tag_length": 1
                },
                "param_1": {
                    "base_address": 2,
                    "data_address": 1,
                    "debug_tag_info": 1,
                    "debug_tag_ptr": 1,
                    "file_address": 5,
                    "file_data_address": 1,
                    "file_data_offset": 1,
                    "file_descriptor": 1,
                    "file_handle": 7,
                    "file_info": 1,
                    "file_offset": 4,
                    "file_pointer": 3,
                    "input_param": 1,
                    "param1": 1,
                    "param_addr": 1
                },
                "param_2": {
                    "current_file": 1,
                    "current_file_name": 1,
                    "debug_tag": 1,
                    "file_name": 4,
                    "tag": 6,
                    "tag_name": 15,
                    "tag_string": 1,
                    "tag_to_find": 1,
                    "tag_value": 1
                },
                "param_3": {
                    "current_debug_tag": 1,
                    "current_tag": 7,
                    "debug_tag": 2,
                    "existing_tag": 2,
                    "tag": 3,
                    "tag_array": 1,
                    "tag_data": 1,
                    "tag_info": 2,
                    "tag_list": 2,
                    "tag_pointer": 2,
                    "tag_ptr": 3,
                    "tag_structure": 1,
                    "tag_type": 3,
                    "tag_type_ptr": 1
                },
                "pauVar4": {
                    "allocated_memory": 1,
                    "block_mem": 1,
                    "block_pointer": 2,
                    "block_ptr": 1,
                    "debug_tag_struct": 1,
                    "memory_block": 5,
                    "memory_block_array": 1,
                    "memory_block_ptr": 2,
                    "metadata_pointer": 1,
                    "new_memory_block": 1,
                    "new_pau_var": 1,
                    "new_pointer_array": 1,
                    "new_tag_ptr": 1,
                    "pointer_arrays": 1,
                    "tag_block": 1,
                    "tag_block_ptr": 1,
                    "tag_info": 1,
                    "tag_memory": 3,
                    "tag_metadata": 1,
                    "tag_pointer": 2,
                    "tag_struct": 1,
                    "xmalloced_block": 1
                },
                "pcVar6": {
                    "debug_message": 1,
                    "debug_msg": 1,
                    "error_message": 26,
                    "error_msg": 3
                },
                "piVar3": {
                    "allocated_memory": 1,
                    "initialized_block": 2,
                    "memory_block": 5,
                    "new_block_ptr": 1,
                    "new_debug_tag": 2,
                    "new_memory_block": 2,
                    "new_tag": 6,
                    "new_tag_list": 1,
                    "new_tag_pointer": 1,
                    "new_tag_type": 2
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "uVar2": {
                    "localized_error_message": 3,
                    "localized_message": 2,
                    "translated_error_message": 5,
                    "translated_message": 5,
                    "translated_msg": 1
                },
                "xmalloc": {
                    "allocate_memory": 4
                }
            },
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "FUN_00112925",
                "strcmp",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "code": "\n\n\nint * check_debug_tag_type_0010c6be(long file_handle,char *tag_name,int *current_tag)\n\n{\n  int comparison_result;\n  undefined8 translated_error_message;\n  int *new_tag;\n  undefined (*memory_block) [16];\n  long memory_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (current_tag != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*current_tag != 0x17) {\n        new_tag = (int *)initialize_memory_block(0x17,0);\n        if (new_tag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        memory_block = (undefined (*) [16])xmalloc(0x10);\n        memory_offset = *(long *)(file_handle + 0x10);\n        *memory_block = ZEXT816(0);\n        *(int **)(*memory_block + 8) = current_tag;\n        *(undefined (**) [16])(new_tag + 4) = memory_block;\n        memory_offset = initialize_memory(memory_offset + 0x10,tag_name,1,3);\n        if (memory_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(memory_offset + 0x20) = new_tag;\n        *(long *)*memory_block = memory_offset;\n        return new_tag;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(current_tag + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return current_tag;\n      }\n    }\n    translated_error_message = dcgettext(0,error_message,5);\n    fprintf(standard_error,\"%s\\n\",translated_error_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "current_name": "check_debug_tag_type_0010c6be",
            "entrypoint": "0x0010c6be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c6be": "check_debug_tag_type_0010c6be",
                "_stderr": "standard_error",
                "dcgettext": "get_text",
                "fprintf": "print_error_message",
                "iVar1": "comparison_result",
                "initialize_memory_00112925": "initialize_memory",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar5": "memory_offset",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "current_tag",
                "pauVar4": "memory_block",
                "pcVar6": "error_message",
                "piVar3": "new_tag",
                "strcmp": "compare_strings",
                "uVar2": "translated_error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c7a0": {
            "additional_data": {
                "FUN_0010c7a0": {
                    "debug_set_class_id": 10,
                    "set_class_id": 20,
                    "set_debug_class_id": 1
                },
                "__s1": {
                    "char_ptr": 1,
                    "class_name_2": 1,
                    "cur_class_name": 1,
                    "current_class_name": 3,
                    "current_name": 1,
                    "existing_class_name": 8,
                    "existing_name": 2,
                    "instance_name": 1,
                    "prev_class_name": 1,
                    "ptr_name": 1,
                    "s1": 1,
                    "stored_class_name": 3,
                    "struct_name": 1,
                    "temp_name": 1,
                    "temp_var5": 1,
                    "type_name": 3,
                    "type_name_ptr": 1
                },
                "auVar8": {
                    "new_result": 1,
                    "result": 2,
                    "result_array": 1,
                    "ret_value": 1,
                    "return_struct": 1,
                    "return_val": 2,
                    "return_value": 22
                },
                "cVar5": {
                    "equal": 1,
                    "equal_check": 1,
                    "equal_flag": 1,
                    "equality_check_result": 5,
                    "equality_flag": 2,
                    "equality_result": 2,
                    "is_equal": 14,
                    "is_equality_valid": 1,
                    "is_matching": 1,
                    "is_pointer_equal": 1,
                    "result": 1,
                    "temp_var6": 1
                },
                "iVar6": {
                    "count": 11,
                    "counter": 8,
                    "i_var6": 1,
                    "incremented_count": 1,
                    "incremented_id": 1,
                    "incremented_value": 2,
                    "new_class_id": 1,
                    "new_class_name_comparison": 1,
                    "new_count_plus_one": 1,
                    "new_id": 1,
                    "new_type_id": 1,
                    "temp_var7": 1,
                    "var_6": 1
                },
                "lVar3": {
                    "data": 1,
                    "ptr": 2,
                    "struct_pointer": 1,
                    "struct_ptr": 1,
                    "temp_var3": 2,
                    "type_data": 2,
                    "type_data_ptr": 1,
                    "type_desc": 1,
                    "type_info": 8,
                    "type_info_ptr": 6,
                    "type_ptr": 4,
                    "type_struct": 1,
                    "var_18": 1
                },
                "param_1": {
                    "class_data": 1,
                    "class_id": 3,
                    "class_info": 1,
                    "class_info_addr": 1,
                    "class_instance": 1,
                    "class_ptr": 2,
                    "class_type": 1,
                    "data": 1,
                    "debug_context": 1,
                    "debug_struct": 1,
                    "function_ptr": 1,
                    "input": 3,
                    "input_value": 1,
                    "obj_ptr": 3,
                    "object": 2,
                    "object_pointer": 1,
                    "param_base": 1,
                    "param_struct": 1,
                    "struct_ptr": 1,
                    "type": 2,
                    "type_info": 1,
                    "value": 1
                },
                "param_2": {
                    "class_name": 24,
                    "name": 5,
                    "type_name": 2
                },
                "param_3": {
                    "class_type": 2,
                    "kind": 2,
                    "type": 10,
                    "type_data": 1,
                    "type_id": 1,
                    "type_info": 3,
                    "type_kind": 7,
                    "type_ptr": 4
                },
                "param_4": {
                    "class_id": 1,
                    "extra_param": 1,
                    "id": 2,
                    "output_value": 1,
                    "param": 4,
                    "param4": 7,
                    "param_4": 12,
                    "param_alias": 1,
                    "result": 1,
                    "value": 1
                },
                "parameter_3": {
                    "type": 1
                },
                "piVar4": {
                    "cur_type_id": 1,
                    "current_type": 1,
                    "current_type_info": 1,
                    "pi_var": 1,
                    "pi_var4": 1,
                    "ptr_type": 2,
                    "temp_type": 1,
                    "temp_var4": 1,
                    "type_data_value_ptr": 1,
                    "type_id_ptr": 1,
                    "type_info_ptr": 1,
                    "type_kind": 2,
                    "type_kind_ptr": 5,
                    "type_pointer": 1,
                    "type_ptr": 7,
                    "type_ptr_2": 2,
                    "type_ptr_kind": 1,
                    "type_ptr_temp": 1
                },
                "puVar7": {
                    "current_node": 2,
                    "current_ptr": 1,
                    "current_type": 1,
                    "debug_entry": 1,
                    "entry": 1,
                    "new_class_entry": 1,
                    "new_class_info": 1,
                    "new_node": 9,
                    "new_node_ptr": 1,
                    "new_ptr": 1,
                    "new_struct": 1,
                    "new_type_info": 1,
                    "new_type_info_ptr": 1,
                    "node": 6,
                    "node_ptr": 1,
                    "temp_ptr": 1,
                    "temp_var8": 1
                },
                "uVar1": {
                    "prev": 1,
                    "prev_ptr": 1,
                    "prev_type": 1,
                    "result": 22,
                    "return_value": 2,
                    "temp_var": 1,
                    "temp_var1": 1
                },
                "uVar2": {
                    "class_id": 1,
                    "length": 3,
                    "loop_count": 1,
                    "new_class_id": 3,
                    "new_count": 1,
                    "new_id": 4,
                    "new_size": 3,
                    "new_type": 1,
                    "new_type_id": 1,
                    "new_type_kind": 1,
                    "new_value": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "type_count": 2,
                    "type_index": 1,
                    "type_size": 1,
                    "updated_value": 1
                }
            },
            "called": [
                "__assert_fail",
                "xmalloc",
                "strcmp",
                "FUN_0010922b"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] set_debug_class_id_0010c7a0(long input,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint new_id;\n  long type_info;\n  int *type_ptr;\n  char *existing_class_name;\n  char is_equal;\n  int count;\n  undefined8 *new_node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  type_info = *(long *)(type + 4);\n  new_node = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(input + 0x38)) {\n    for (new_node = *(undefined8 **)(input + 0x50); new_node != (undefined8 *)0x0;\n        new_node = (undefined8 *)*new_node) {\n      type_ptr = (int *)new_node[1];\n      if (*type_ptr == *type) {\n        existing_class_name = (char *)new_node[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_equal = check_equality_between_pointers_0010922b(input,type_ptr,type);\n            if (is_equal != '\\0') {\n              new_id = *(uint *)(*(long *)(new_node[1] + 0x10) + 0xc);\n              new_node = (undefined8 *)(ulong)new_id;\n              *(uint *)(type_info + 0xc) = new_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (count = strcmp(existing_class_name,class_name), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(input + 0x34) + 1;\n    *(int *)(input + 0x34) = count;\n    *(int *)(type_info + 0xc) = count;\n    new_node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(input + 0x50);\n    new_node[2] = class_name;\n    *(undefined8 **)(input + 0x50) = new_node;\n    *new_node = result;\n    new_node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "current_name": "set_debug_class_id_0010c7a0",
            "entrypoint": "0x0010c7a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c7a0": "set_debug_class_id_0010c7a0",
                "__s1": "existing_class_name",
                "auVar8": "return_value",
                "cVar5": "is_equal",
                "iVar6": "count",
                "lVar3": "type_info",
                "param_1": "input",
                "param_2": "class_name",
                "param_3": "type",
                "piVar4": "type_ptr",
                "puVar7": "new_node",
                "uVar1": "result",
                "uVar2": "new_id"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c892": {
            "additional_data": {
                "FUN_0010c892": {
                    "extract_undefined_variables": 1,
                    "find_debug_types": 1,
                    "handle_undefined_types": 1,
                    "improve_debugging_info": 1,
                    "initialize_debug_info": 1,
                    "process_data": 2,
                    "process_debug_data": 2,
                    "process_debug_info": 20,
                    "process_debug_information": 1,
                    "process_function": 1
                },
                "_stderr": {
                    "error_output": 1,
                    "error_stream": 1
                },
                "cVar1": {
                    "char_updated": 1,
                    "char_var": 1,
                    "character_flag": 1,
                    "debug_info_updated": 1,
                    "debug_update_result": 1,
                    "flag": 3,
                    "has_updated_debug_info": 1,
                    "should_update_debug_info": 1,
                    "update_flag": 1,
                    "update_result": 3,
                    "update_status": 1,
                    "update_success": 4,
                    "update_successful": 1,
                    "update_variable_flag": 1,
                    "update_variable_result": 2,
                    "update_variable_success": 1,
                    "updated_info_flag": 1,
                    "updated_variable": 2,
                    "updated_variable_info": 2
                },
                "check_debug_tag_type_0010c6be": {
                    "check_debug_type": 1
                },
                "dcgettext": {
                    "get_text": 1
                },
                "fprintf": {
                    "print_error": 1
                },
                "handle_debug_end_function_0010be1a": {
                    "handle_debug_end_function": 1
                },
                "iVar6": {
                    "debug_entry_kind": 1,
                    "debug_info_kind": 1,
                    "debug_kind": 5,
                    "int_flag": 1,
                    "kind": 20,
                    "tag_kind": 1
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 1
                },
                "lVar2": {
                    "block": 1,
                    "mem_block": 1,
                    "mem_block_ptr": 1,
                    "memory_block": 24,
                    "memory_block_address": 1,
                    "memory_block_ptr": 1
                },
                "lVar3": {
                    "debug_tag": 1,
                    "debug_tag_type": 19,
                    "debug_type": 1,
                    "tag_type": 6,
                    "tag_type_address": 1,
                    "type": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument": 1,
                    "base_address": 1,
                    "data": 2,
                    "debug_context": 1,
                    "debug_info": 1,
                    "debugger": 1,
                    "function_address": 2,
                    "function_info": 1,
                    "function_name": 1,
                    "function_pointer": 2,
                    "function_ptr": 1,
                    "info": 1,
                    "input": 1,
                    "input_param": 3,
                    "param": 2,
                    "param1": 7,
                    "param_ptr": 1,
                    "source_info": 1
                },
                "param_2": {
                    "arg2": 1,
                    "base_address": 1,
                    "context": 1,
                    "data": 2,
                    "data_block": 1,
                    "data_ptr": 2,
                    "debug_data": 1,
                    "debug_info": 6,
                    "debug_info_address": 3,
                    "debug_info_ptr": 2,
                    "info": 1,
                    "info_address": 1,
                    "info_ptr": 1,
                    "param2": 7,
                    "struct_address": 1
                },
                "puVar5": {
                    "current_debug_entry": 2,
                    "current_item": 1,
                    "current_node": 2,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "debug_entry": 3,
                    "debug_info_ptr": 1,
                    "debug_list": 2,
                    "debug_list_ptr": 1,
                    "debug_ptr": 1,
                    "debug_tag_list": 1,
                    "debug_tag_node": 1,
                    "linked_list": 1,
                    "linked_struct": 1,
                    "list_ptr": 2,
                    "next_value": 1,
                    "node_pointer": 1,
                    "pointer_var": 1,
                    "ptr": 3,
                    "ptr_iterator": 1,
                    "ptr_list": 1
                },
                "uVar4": {
                    "result": 21,
                    "return_value": 6,
                    "success": 1,
                    "success_flag": 1
                },
                "update_variable_debug_info_0010c1c6": {
                    "update_variable_debug_info": 1
                }
            },
            "called": [
                "fprintf",
                "FUN_0010be1a",
                "FUN_0010c6be",
                "dcgettext",
                "FUN_0010c1c6",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_debug_info_0010c892(undefined8 param1,long param2)\n\n{\n  char update_success;\n  long memory_block;\n  long debug_tag_type;\n  undefined8 result;\n  undefined8 *debug_entry;\n  int kind;\n  \n  if (*(char *)(param2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (debug_entry = *(undefined8 **)(param2 + 0x1a0); debug_entry != (undefined8 *)0x0;\n        debug_entry = (undefined8 *)*debug_entry) {\n      kind = *(int *)(debug_entry + 2);\n      debug_tag_type = debug_entry[1];\n      if (kind != 0) {\n        if (debug_tag_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(error_stream,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        debug_entry[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (debug_tag_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      memory_block = initialize_memory_block(kind,0);\n      if (memory_block == 0) goto LAB_0010c910;\n      debug_tag_type = check_debug_type(param1,debug_tag_type,memory_block);\n      debug_entry[3] = debug_tag_type;\n      if (debug_tag_type == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    update_success = update_variable_debug_info();\n    if (update_success != '\\0') {\n      update_success = handle_debug_end_function(param1,*(undefined8 *)(param2 + 0x68));\n      if (update_success != '\\0') {\n        *(undefined *)(param2 + 0x60) = 0;\n        *(undefined8 *)(param2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_debug_info_0010c892",
            "entrypoint": "0x0010c892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c892": "process_debug_info_0010c892",
                "_stderr": "error_stream",
                "cVar1": "update_success",
                "check_debug_tag_type_0010c6be": "check_debug_type",
                "dcgettext": "get_text",
                "fprintf": "print_error",
                "handle_debug_end_function_0010be1a": "handle_debug_end_function",
                "iVar6": "kind",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar2": "memory_block",
                "lVar3": "debug_tag_type",
                "param_1": "param1",
                "param_2": "param2",
                "puVar5": "debug_entry",
                "uVar4": "result",
                "update_variable_debug_info_0010c1c6": "update_variable_debug_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010c95e": {
            "additional_data": {
                "FUN_0010c95e": {
                    "parse_and_initialize_data": 1,
                    "parse_and_initialize_memory_block": 1,
                    "parse_and_process_data": 2,
                    "parse_function": 2,
                    "parse_input": 1,
                    "process_data": 1
                },
                "__ptr": {
                    "allocated_string": 2,
                    "copied_string": 2,
                    "pointer": 1,
                    "pointer_variable": 1,
                    "ptr": 3,
                    "ptr_var": 1,
                    "str_ptr": 1,
                    "string_copy": 2,
                    "string_pointer": 4,
                    "string_ptr": 6,
                    "temp_ptr": 1,
                    "void_pointer": 3,
                    "void_ptr": 4
                },
                "allocate_and_initialize_memory_block_00113c43": {
                    "allocate_and_initialize_memory_block": 1
                },
                "bVar1": {
                    "byte_1": 1,
                    "byte_char": 1,
                    "byte_val": 1,
                    "byte_value": 4,
                    "byte_value_1": 1,
                    "byte_var1": 6,
                    "byte_var_1": 1,
                    "byte_variable1": 1,
                    "current_byte": 11,
                    "current_char": 3,
                    "first_byte": 1
                },
                "bVar2": {
                    "byte_2": 1,
                    "byte_value_2": 2,
                    "byte_var2": 6,
                    "byte_var_2": 1,
                    "byte_variable2": 1,
                    "next_byte": 14,
                    "next_char": 2,
                    "second_byte": 1,
                    "second_byte_char": 1,
                    "second_byte_value": 1
                },
                "bVar4": {
                    "bool_1": 1,
                    "bool_value1": 1,
                    "bool_value_1": 2,
                    "bool_var1": 5,
                    "bool_var4": 1,
                    "bool_var5": 1,
                    "bool_variable1": 1,
                    "is_c_var7_false": 1,
                    "is_signed": 12,
                    "is_signed_char": 4,
                    "signed_flag": 1
                },
                "bVar5": {
                    "bool_2": 1,
                    "bool_value2": 1,
                    "bool_value_2": 2,
                    "bool_var2": 5,
                    "bool_var5": 1,
                    "bool_var6": 1,
                    "bool_variable2": 1,
                    "char_flag": 1,
                    "is_b_var5_true": 1,
                    "is_char": 3,
                    "is_processed": 1,
                    "is_string": 2,
                    "is_type_specifier": 1,
                    "is_unsigned": 5,
                    "is_unsigned_char": 2,
                    "is_valid": 1,
                    "parse_input": 1
                },
                "bVar6": {
                    "bool_3": 1,
                    "bool_value3": 1,
                    "bool_value_3": 2,
                    "bool_var3": 5,
                    "bool_var4": 1,
                    "bool_var6": 1,
                    "bool_variable3": 1,
                    "initialize_block": 1,
                    "is_array": 1,
                    "is_b_var6_true": 1,
                    "is_double": 1,
                    "is_float": 3,
                    "is_hex": 2,
                    "is_pointer": 1,
                    "is_return": 1,
                    "is_unsigned": 2,
                    "is_unsigned_char": 1,
                    "is_valid_input": 1,
                    "is_variable": 1,
                    "is_vowel": 1,
                    "unsigned_flag": 1
                },
                "cVar7": {
                    "char_1": 1,
                    "char_result": 1,
                    "char_value": 3,
                    "char_var": 6,
                    "char_var2": 1,
                    "char_variable": 1,
                    "error": 1,
                    "error_char": 1,
                    "error_code": 1,
                    "error_flag": 1,
                    "result": 7,
                    "result_code": 1,
                    "result_of_function_call": 1,
                    "return_value": 3,
                    "status": 2
                },
                "copy_and_null_terminate_string_00109a0b": {
                    "copy_and_null_terminate_string": 1
                },
                "create_and_initialize_memory_block_00113b98": {
                    "create_and_initialize_memory_block": 1
                },
                "create_memory_block_00113bfa": {
                    "create_memory_block": 1
                },
                "find_named_type_0010914e": {
                    "find_named_type3": 1
                },
                "find_string_in_data_structure_0010afd5": {
                    "find_string_in_data_structure": 1
                },
                "initialize_and_return_memory_block_00113e17": {
                    "initialize_and_return_memory_block": 1
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block3": 1
                },
                "initialize_memory_block_00113b71": {
                    "initialize_memory_block1": 1
                },
                "initialize_memory_block_00113cb9": {
                    "initialize_memory_block_or_zero": 1
                },
                "initialize_memory_block_00113ce0": {
                    "initialize_memory_block2": 1
                },
                "initialize_memory_block_00113dfe": {
                    "initialize_memory_block4": 1
                },
                "lVar10": {
                    "find_result": 1,
                    "found_type": 3,
                    "l_var10": 1,
                    "long_1": 1,
                    "long_value": 3,
                    "long_var": 2,
                    "long_var1": 4,
                    "long_var10": 1,
                    "long_variable1": 1,
                    "named_type": 7,
                    "named_type_address": 1,
                    "parsed_type": 1,
                    "temp1": 1,
                    "type_block": 1,
                    "type_id": 1,
                    "type_length": 1,
                    "type_ptr": 1
                },
                "lVar15": {
                    "allocated_memory": 1,
                    "block_address": 1,
                    "initialized_memory": 1,
                    "long_2": 1,
                    "long_value2": 1,
                    "long_value_2": 2,
                    "long_var": 1,
                    "long_var15": 1,
                    "long_var2": 6,
                    "long_variable2": 1,
                    "memory_block": 2,
                    "memory_block_address": 1,
                    "result": 4,
                    "result_length": 1,
                    "result_memory": 1,
                    "result_ptr": 2,
                    "result_value": 1,
                    "temp_result": 1,
                    "temp_result_ptr": 1
                },
                "lVar15_2": {
                    "new_value": 1
                },
                "local_40": {
                    "char_array": 6,
                    "char_ptr_arr": 1,
                    "char_ptr_arr_local_40": 1,
                    "char_ptr_array": 1,
                    "char_ptr_array2": 1,
                    "input_strings": 1,
                    "local_char_pointer": 1,
                    "local_char_var40": 1,
                    "local_data": 1,
                    "local_string_array": 4,
                    "parsed_string": 1,
                    "string_array": 8,
                    "temp_array": 1,
                    "temp_string_array": 1,
                    "var40": 1
                },
                "local_48": {
                    "block_size": 1,
                    "index": 1,
                    "integer_value": 2,
                    "local_parsed_number": 2,
                    "local_ulong": 3,
                    "local_ulong_var48": 1,
                    "local_variable_48": 1,
                    "temp_value": 1,
                    "ulong_2": 1,
                    "ulong_local": 1,
                    "ulong_value": 3,
                    "ulong_value2": 1,
                    "ulong_value_2": 2,
                    "ulong_var": 2,
                    "ulong_var2": 2,
                    "ulong_var_local_48": 1,
                    "ulong_variable2": 1,
                    "unsigned_long_var": 1,
                    "value": 1,
                    "var48": 2
                },
                "local_49": {
                    "array_size": 1,
                    "flag": 2,
                    "is_zero_initialized": 2,
                    "local_bool": 2,
                    "local_bool_var49": 1,
                    "local_char": 1,
                    "local_parsed_signed": 1,
                    "local_signed_flag": 1,
                    "local_variable_49": 1,
                    "temp_flag": 1,
                    "undefined_1": 2,
                    "undefined_byte": 1,
                    "undefined_local": 1,
                    "undefined_value": 2,
                    "undefined_value_2": 1,
                    "undefined_var": 2,
                    "undefined_var_local_49": 1,
                    "undefined_variable": 3,
                    "unknown_var1": 1,
                    "unsigned_char_var": 1,
                    "var49": 2
                },
                "param_1": {
                    "arguments_array": 1,
                    "config": 1,
                    "data_structure": 1,
                    "function_array": 2,
                    "function_parameter_1": 1,
                    "function_parameters": 1,
                    "function_params": 3,
                    "function_pointer": 1,
                    "function_pointers": 1,
                    "input": 2,
                    "input_array": 5,
                    "original_array": 1,
                    "param": 1,
                    "param1": 1,
                    "param_array": 4,
                    "parameter_list": 1,
                    "parameters": 4
                },
                "param_2": {
                    "buffer": 1,
                    "byte_array": 3,
                    "byte_array_pointer": 1,
                    "byte_array_ptr": 2,
                    "byte_pointer": 4,
                    "byte_pointer_array": 2,
                    "byte_pointers": 1,
                    "byte_ptr": 1,
                    "byte_sequences": 1,
                    "data": 3,
                    "data_ptr": 1,
                    "function_parameter_2": 1,
                    "input": 1,
                    "input_byte_array": 1,
                    "input_data": 1,
                    "input_pointer": 1,
                    "input_string": 1,
                    "original_byte_array": 1,
                    "param2": 1,
                    "param_byte_pointer_array": 1,
                    "param_byte_ptr": 1,
                    "pointer_params": 1
                },
                "param_3": {
                    "function_parameter_3": 1,
                    "long_params": 1,
                    "long_pointer": 4,
                    "long_pointers": 1,
                    "long_value_ptr": 1,
                    "memory": 1,
                    "memory_block": 6,
                    "memory_block_pointer": 2,
                    "memory_block_size_ptr": 1,
                    "memory_size": 1,
                    "original_long_array": 1,
                    "output": 3,
                    "output_data": 1,
                    "output_pointer": 1,
                    "param3": 1,
                    "param_long_array": 1,
                    "param_long_ptr": 1,
                    "result": 2,
                    "result_ptr": 1
                },
                "parse_and_validate_input_0010d21c": {
                    "parse_and_validate_input": 1
                },
                "parse_number_from_string_00108ea1": {
                    "parse_number_from_string": 1
                },
                "pbVar20": {
                    "byte_pointer3": 1,
                    "byte_ptr": 1,
                    "byte_ptr_3": 1,
                    "current_byte_ptr": 1,
                    "pb_var20": 1,
                    "pointer_byte_var20": 1
                },
                "pbVar3": {
                    "byte_pointer": 5,
                    "byte_pointer2": 1,
                    "byte_ptr": 1,
                    "byte_ptr3": 2,
                    "byte_ptr_2": 1,
                    "current_byte": 7,
                    "current_byte_pointer": 2,
                    "current_byte_ptr": 1,
                    "current_input_pointer": 1,
                    "current_pointer": 1,
                    "current_position": 2,
                    "current_ptr": 3,
                    "pb_var3": 1,
                    "pointer_byte_var3": 2,
                    "pointer_byte_variable3": 1
                },
                "pbVar9": {
                    "byte_pointer2": 2,
                    "byte_pointer3": 1,
                    "byte_pointer_2": 1,
                    "byte_ptr9": 2,
                    "byte_ptr_2": 1,
                    "byte_ptr_3": 1,
                    "new_byte": 1,
                    "next_byte": 4,
                    "next_byte_2": 1,
                    "next_byte_pointer": 2,
                    "next_byte_ptr": 1,
                    "next_input_pointer": 1,
                    "next_pointer": 1,
                    "next_position": 2,
                    "next_ptr": 3,
                    "pb_var_calling_fun_0010c95e": 1,
                    "pointer_byte_var9": 2,
                    "pointer_byte_variable2": 1,
                    "second_byte_pointer": 2,
                    "updated_byte": 1
                },
                "pcVar12": {
                    "char_pointer": 3,
                    "char_ptr": 3,
                    "char_ptr_1": 1,
                    "char_ptr_pc_var12": 1,
                    "char_value_ptr": 1,
                    "char_var2": 1,
                    "current_string": 1,
                    "data_type_char": 1,
                    "data_type_str_1": 1,
                    "integer_type": 3,
                    "named_type": 1,
                    "parsed_type": 1,
                    "pointer_char_var12": 2,
                    "pointer_char_variable1": 1,
                    "signed_char_type": 2,
                    "signed_type": 3,
                    "type": 1,
                    "type_name": 3,
                    "type_option": 1
                },
                "pcVar19": {
                    "char_pointer": 1,
                    "char_pointer2": 2,
                    "char_pointer_2": 1,
                    "char_ptr": 1,
                    "char_ptr2": 3,
                    "char_ptr_2": 1,
                    "char_ptr_pc_var19": 1,
                    "char_value_ptr_2": 1,
                    "char_var3": 1,
                    "data_type": 2,
                    "data_type_str_2": 1,
                    "named_type": 1,
                    "parsed_type": 1,
                    "pointer_char_var19": 2,
                    "pointer_char_variable2": 1,
                    "pointer_to_char": 1,
                    "temp_data_type": 1,
                    "type": 2,
                    "type_name": 2,
                    "type_pointer": 1,
                    "type_string": 1,
                    "unsigned_type": 1,
                    "variable_type": 1
                },
                "pcVar20": {
                    "pointer_char_var20": 1
                },
                "ppcVar18": {
                    "char_pointer_array": 1,
                    "char_pointer_pointer": 5,
                    "char_ptr_array": 2,
                    "char_ptr_ptr": 5,
                    "char_ptr_ptr_ppc_var18": 1,
                    "parsed_data_ptr": 1,
                    "pointer_pointer_char_var18": 2,
                    "pointer_pointer_char_variable": 1,
                    "pointer_to_char_pointer": 1,
                    "pointer_to_pointer": 1,
                    "ref_ptr_value": 1,
                    "string_array": 6,
                    "string_output": 1,
                    "string_pointer": 1,
                    "string_ptr_ptr": 1
                },
                "print_error_message_0010911f": {
                    "print_error_message": 1
                },
                "process_and_parse_data_0010d882": {
                    "process_and_parse_data": 1
                },
                "puVar16": {
                    "output_data_ptr": 1,
                    "parsed_result_ptr": 1,
                    "pointer1": 1,
                    "pointer_to_ulong": 1,
                    "pointer_ulong_var16": 1,
                    "ptr_value": 1,
                    "ulong_array": 1,
                    "ulong_pointer": 8,
                    "ulong_ptr": 8,
                    "ulong_ptr_pu_var16": 1,
                    "ulong_ptr_var": 1,
                    "unsigned_long": 1,
                    "unsigned_long_ptr": 1,
                    "unsigned_type_array": 1
                },
                "puVar17": {
                    "flag_ptr": 1,
                    "parsed_signed_ptr": 1,
                    "pointer2": 1,
                    "pointer_to_undefined": 1,
                    "pointer_undef_var17": 1,
                    "signed_flag_arg": 1,
                    "signed_flag_ptr": 1,
                    "uint8_ptr": 1,
                    "undefined_array": 1,
                    "undefined_pointer": 7,
                    "undefined_ptr": 6,
                    "undefined_ptr_pu_var17": 1,
                    "undefined_ptr_var": 1,
                    "unsigned_char_ptr": 1,
                    "void_pointer2": 2,
                    "void_ptr": 1
                },
                "sVar13": {
                    "size": 1,
                    "size_t_1": 1,
                    "size_t_var": 1,
                    "size_value": 2,
                    "size_var": 6,
                    "size_var13": 1,
                    "size_variable1": 1,
                    "str_length": 2,
                    "string_length": 15,
                    "type_str_length": 1
                },
                "uVar11": {
                    "address_returned": 1,
                    "output_value": 1,
                    "result": 3,
                    "return_value": 6,
                    "return_value_2": 1,
                    "u_var11": 1,
                    "uint_var11": 1,
                    "uint_var2": 3,
                    "uint_variable2": 1,
                    "undefined8_var1": 1,
                    "undefined_8": 1,
                    "undefined_result": 1,
                    "undefined_value": 1,
                    "unknown_value": 1,
                    "unsigned_long_value": 1,
                    "unsigned_var2": 1,
                    "validate_result": 1,
                    "validation_result": 5
                },
                "uVar14": {
                    "integer_value": 1,
                    "integer_value_2": 1,
                    "num_bytes": 1,
                    "parsed_integer": 2,
                    "parsed_integer_length": 1,
                    "parsed_length": 3,
                    "parsed_number_ulong": 1,
                    "parsed_ulong": 1,
                    "string_length_as_ulong": 1,
                    "string_length_converted": 1,
                    "type_index": 1,
                    "ulong_1": 1,
                    "ulong_result": 1,
                    "ulong_value": 3,
                    "ulong_var": 6,
                    "ulong_var14": 1,
                    "ulong_variable1": 1,
                    "unsigned_integer": 2,
                    "unsigned_number": 1,
                    "unsigned_var3": 1
                },
                "uVar8": {
                    "int_var": 1,
                    "integer_length": 3,
                    "integer_value": 1,
                    "num_digits": 1,
                    "parsed_integer": 7,
                    "parsed_number": 3,
                    "string_length": 1,
                    "uint_1": 1,
                    "uint_result": 1,
                    "uint_value": 2,
                    "uint_var": 6,
                    "uint_variable1": 1,
                    "unsigned_value": 1,
                    "unsigned_var": 1
                },
                "validate_and_parse_input_0010d559": {
                    "validate_and_parse_input2": 1
                },
                "while": {
                    "loop": 1
                }
            },
            "called": [
                "FUN_00113cb9",
                "FUN_0010d559",
                "FUN_00113b71",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "FUN_00108e76",
                "FUN_0010911f",
                "FUN_00113dfe",
                "FUN_00113b4a",
                "FUN_0010914e",
                "FUN_00113d3a",
                "FUN_00113c43",
                "free",
                "FUN_00113ce0",
                "FUN_00113b98",
                "FUN_00113e17",
                "FUN_00112904",
                "strlen"
            ],
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_00113e5e"
            ],
            "code": "\nundefined8 parse_and_process_data_0010c95e(undefined8 *input_array,byte **byte_pointer,long *memory_block)\n\n{\n  byte current_byte;\n  byte next_byte;\n  byte *current_byte;\n  bool is_signed;\n  bool is_unsigned;\n  bool bool_var3;\n  char result;\n  uint parsed_integer;\n  byte *next_byte;\n  long named_type;\n  undefined8 return_value;\n  char *char_pointer;\n  size_t string_length;\n  ulong ulong_var;\n  void *string_ptr;\n  long long_var2;\n  ulong *ulong_pointer;\n  undefined *undefined_pointer;\n  char **string_array;\n  char *char_ptr2;\n  byte *byte_ptr;\n  undefined undefined_variable;\n  ulong ulong_value;\n  char *string_array [2];\n  \n  loop( true ) {\n    byte_ptr = *byte_pointer;\n    current_byte = *byte_ptr;\n    if ('T' < (char)current_byte) break;\n    if ((char)current_byte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(current_byte) {\n    case 0x41:\n      long_var2 = 0;\n      current_byte = byte_ptr;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byte_pointer = byte_ptr + 1;\n      result = parse_and_process_data_0010c95e(input_array,byte_pointer,memory_block);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (memory_block == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = initialize_memory_block1(*memory_block);\n      *memory_block = long_var2;\n      return 1;\n    case 0x46:\n      *byte_pointer = byte_ptr + 1;\n      if (memory_block == (long *)0x0) {\n        ulong_pointer = (ulong *)0x0;\n        string_array = (char **)0x0;\n      }\n      else {\n        ulong_pointer = &ulong_value;\n        string_array = string_array;\n      }\n      result = process_and_parse_data(input_array,byte_pointer,string_array,ulong_pointer);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**byte_pointer == 0x5f) {\n        *byte_pointer = *byte_pointer + 1;\n        result = parse_and_process_data_0010c95e(input_array,byte_pointer,memory_block);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (memory_block == (long *)0x0) {\n          return 1;\n        }\n        long_var2 = initialize_memory_block2(*memory_block,string_array[0],ulong_value & 0xff);\n        *memory_block = long_var2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byte_pointer = byte_ptr + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_variable = 0;\n      string_array[0] = (char *)0x0;\n      ulong_value = 0;\n      *byte_pointer = byte_ptr + 1;\n      if (((&_sch_istable)[(ulong)byte_ptr[1] * 2] & 4) == 0) {\n        if (byte_ptr[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        string_array = string_array;\n        if (memory_block == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        result = validate_and_parse_input2(input_array,byte_pointer,string_array);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        parsed_integer = parse_integer_from_string_00108e76(byte_pointer);\n        current_byte = *byte_pointer;\n        string_length = strlen((char *)current_byte);\n        if (string_length < parsed_integer) goto switchD_0010cdf9_caseD_60;\n        *byte_pointer = current_byte + parsed_integer;\n        if ((memory_block != (long *)0x0) &&\n           (string_array[0] = (char *)find_string_in_data_structure(*input_array,input_array[1],current_byte,parsed_integer,9),\n           string_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      next_byte = **byte_pointer;\n      if (current_byte == 0x4d) {\n        if ((next_byte == 0x43) || (next_byte == 0x56)) {\n          *byte_pointer = *byte_pointer + 1;\n        }\n        if (**byte_pointer != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byte_pointer = *byte_pointer + 1;\n        if (memory_block == (long *)0x0) {\n          undefined_pointer = (undefined *)0x0;\n          ulong_pointer = (ulong *)0x0;\n        }\n        else {\n          undefined_pointer = &undefined_variable;\n          ulong_pointer = &ulong_value;\n        }\n        result = process_and_parse_data(input_array,byte_pointer,ulong_pointer,undefined_pointer);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**byte_pointer == 0x5f) {\n        *byte_pointer = *byte_pointer + 1;\n        result = parse_and_process_data_0010c95e(input_array,byte_pointer,memory_block);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (memory_block == (long *)0x0) {\n          return 1;\n        }\n        if (current_byte != 0x4d) {\n          long_var2 = create_memory_block(string_array[0],*memory_block);\n          *memory_block = long_var2;\n          return 1;\n        }\n        long_var2 = create_and_initialize_memory_block(*memory_block,string_array[0],ulong_value,undefined_variable);\n        *memory_block = long_var2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      return_value = validate_and_parse_input2(input_array,byte_pointer,memory_block);\n      return return_value;\n    case 0x52:\n      *byte_pointer = byte_ptr + 1;\n      result = parse_and_process_data_0010c95e(input_array,byte_pointer,memory_block);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (memory_block == (long *)0x0) {\n        return 1;\n      }\n      long_var2 = initialize_memory_block_or_zero_00113cb9(*memory_block);\n      *memory_block = long_var2;\n      return 1;\n    case 0x54:\n      *byte_pointer = byte_ptr + 1;\n      result = parse_number_from_string(byte_pointer,&ulong_value);\n      if (result != '\\0') {\n        if ((uint)ulong_value < *(uint *)(input_array + 5)) {\n          string_array[0] = *(char **)((ulong_value & 0xffffffff) * 0x10 + input_array[4]);\n          result = parse_and_process_data_0010c95e(input_array,string_array,memory_block);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (current_byte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byte_pointer = byte_ptr + 1;\n    result = parse_and_process_data_0010c95e(input_array,byte_pointer,memory_block);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (memory_block == (long *)0x0) {\n      return 1;\n    }\n    long_var2 = initialize_or_get_memory_block_00113d3a(*memory_block);\n    *memory_block = long_var2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_var3 = false;\n  is_signed = false;\n  result = '\\0';\n  is_unsigned = false;\n  do {\n    current_byte = *byte_pointer;\n    current_byte = *current_byte;\n    if (current_byte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)current_byte) {\n      if (current_byte == 0x56) {\n        bool_var3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)current_byte) goto switchD_0010cdf9_caseD_60;\n      if ((char)current_byte < '_') goto LAB_0010cdfb;\n      switch(current_byte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (memory_block == (long *)0x0) {\nLAB_0010d0aa:\n          *byte_pointer = current_byte + 1;\n          return 1;\n        }\n        long_var2 = find_named_type3(*input_array,&DAT_00120436);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block3(6,4);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned char\";\n        if ((result == '\\0') && (char_ptr2 = \"char\", is_signed)) {\n          char_ptr2 = \"signed char\";\n        }\n        long_var2 = find_named_type3(*input_array,char_ptr2);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block4(1,result);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = find_named_type3(*input_array,\"float\");\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block_00113df2(4);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"unsigned int\";\n        char_pointer = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long unsigned int\";\n        char_pointer = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          char_ptr2 = char_pointer;\n        }\n        long_var2 = find_named_type3(*input_array,char_ptr2);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block4(4,result);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        char_ptr2 = \"long double\";\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_var2 = find_named_type3(*input_array,char_ptr2);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block_00113df2(8);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"short unsigned int\";\n        if (result == '\\0') {\n          char_ptr2 = \"short int\";\n        }\n        long_var2 = find_named_type3(*input_array,char_ptr2);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block4(2,result);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        string_array = string_array;\n        if (memory_block == (long *)0x0) {\n          string_array = (char **)0x0;\n        }\n        result = parse_and_validate_input(input_array,byte_pointer,string_array);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (memory_block == (long *)0x0) {\n          return 1;\n        }\n        string_length = strlen(string_array[0]);\n        long_var2 = find_string_in_data_structure(*input_array,input_array[1],string_array[0],string_length & 0xffffffff,9);\n        *memory_block = long_var2;\n        free(string_array[0]);\n        long_var2 = *memory_block;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = find_named_type3(*input_array,&DAT_00120495);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_and_return_memory_block();\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        long_var2 = find_named_type3(*input_array,\"__wchar_t\");\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block4(2,1);\n          *memory_block = long_var2;\n          *byte_pointer = *byte_pointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (memory_block == (long *)0x0) goto LAB_0010d0aa;\n        char_ptr2 = \"long long unsigned int\";\n        if (result == '\\0') {\n          char_ptr2 = \"long long int\";\n        }\n        long_var2 = find_named_type3(*input_array,char_ptr2);\n        *memory_block = long_var2;\n        if (long_var2 == 0) {\n          long_var2 = initialize_memory_block4(8,result);\n          *memory_block = long_var2;\n        }\n      }\n      *byte_pointer = *byte_pointer + 1;\n      goto LAB_0010d1de;\n    }\n    if (current_byte == 0x43) {\n      is_unsigned = true;\n      goto LAB_0010cd84;\n    }\n    if (current_byte != 0x53) goto LAB_0010cdc5;\n    is_signed = true;\nLAB_0010cd84:\n    *byte_pointer = current_byte + 1;\n  } loop( true );\nLAB_0010ca26:\n  next_byte = current_byte + 1;\n  *byte_pointer = next_byte;\n  current_byte = *next_byte;\n  if (current_byte == 0) goto switchD_0010cdf9_caseD_60;\n  if (current_byte == 0x5f) {\n    *byte_pointer = current_byte + 2;\n    result = parse_and_process_data_0010c95e(input_array,byte_pointer,memory_block);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (memory_block == (long *)0x0) {\n      return 1;\n    }\n    named_type = find_named_type3(*input_array,\"int\");\n    if (named_type == 0) {\n      named_type = initialize_memory_block4(4,0);\n    }\n    long_var2 = allocate_and_initialize_memory_block(*memory_block,named_type,0,long_var2,0);\n    *memory_block = long_var2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  long_var2 = long_var2 * 10 + (long)((char)current_byte + -0x30);\n  current_byte = next_byte;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)current_byte < ':') {\n    if ((char)current_byte < '0') {\n      if (current_byte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message(byte_ptr);\n      if (memory_block == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((current_byte != 0x47) || (*byte_pointer = current_byte + 1, ((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  byte_ptr = *byte_pointer;\n  parsed_integer = parse_integer_from_string_00108e76(byte_pointer);\n  current_byte = *byte_pointer;\n  string_length = strlen((char *)current_byte);\n  ulong_var = (ulong)parsed_integer;\n  if (ulong_var <= string_length) {\n    *byte_pointer = current_byte + ulong_var;\n    if (memory_block == (long *)0x0) {\n      return 1;\n    }\n    string_ptr = (void *)copy_and_null_terminate_string(current_byte,ulong_var);\n    long_var2 = find_named_type3(*input_array,string_ptr);\n    *memory_block = long_var2;\n    free(string_ptr);\n    if (*memory_block == 0) {\n      long_var2 = find_string_in_data_structure(*input_array,input_array[1],current_byte,(int)*byte_pointer - (int)current_byte,0);\n      *memory_block = long_var2;\njoined_r0x0010d1d8:\n      if (long_var2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (is_unsigned) {\n      long_var2 = initialize_memory_block1(*memory_block);\n      *memory_block = long_var2;\n    }\n    if (bool_var3) {\n      long_var2 = initialize_memory_block_from_param_00113b4a(*memory_block);\n      *memory_block = long_var2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message(byte_ptr);\n  return 0;\n}\n\n",
            "current_name": "parse_and_process_data_0010c95e",
            "entrypoint": "0x0010c95e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010c95e": "parse_and_process_data_0010c95e",
                "__ptr": "string_ptr",
                "allocate_and_initialize_memory_block_00113c43": "allocate_and_initialize_memory_block",
                "bVar1": "current_byte",
                "bVar2": "next_byte",
                "bVar4": "is_signed",
                "bVar5": "is_unsigned",
                "bVar6": "bool_var3",
                "cVar7": "result",
                "copy_and_null_terminate_string_00109a0b": "copy_and_null_terminate_string",
                "create_and_initialize_memory_block_00113b98": "create_and_initialize_memory_block",
                "create_memory_block_00113bfa": "create_memory_block",
                "find_named_type_0010914e": "find_named_type3",
                "find_string_in_data_structure_0010afd5": "find_string_in_data_structure",
                "initialize_and_return_memory_block_00113e17": "initialize_and_return_memory_block",
                "initialize_memory_block_00112904": "initialize_memory_block3",
                "initialize_memory_block_00113b71": "initialize_memory_block1",
                "initialize_memory_block_00113ce0": "initialize_memory_block2",
                "initialize_memory_block_00113dfe": "initialize_memory_block4",
                "lVar10": "named_type",
                "lVar15": "long_var2",
                "local_40": "string_array",
                "local_48": "ulong_value",
                "local_49": "undefined_variable",
                "param_1": "input_array",
                "param_2": "byte_pointer",
                "param_3": "memory_block",
                "parse_and_validate_input_0010d21c": "parse_and_validate_input",
                "parse_number_from_string_00108ea1": "parse_number_from_string",
                "pbVar20": "byte_ptr",
                "pbVar3": "current_byte",
                "pbVar9": "next_byte",
                "pcVar12": "char_pointer",
                "pcVar19": "char_ptr2",
                "ppcVar18": "string_array",
                "print_error_message_0010911f": "print_error_message",
                "process_and_parse_data_0010d882": "process_and_parse_data",
                "puVar16": "ulong_pointer",
                "puVar17": "undefined_pointer",
                "sVar13": "string_length",
                "uVar11": "return_value",
                "uVar14": "ulong_var",
                "uVar8": "parsed_integer",
                "validate_and_parse_input_0010d559": "validate_and_parse_input2",
                "while": "loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d21c": {
            "additional_data": {
                "FUNC_0010c95e": {
                    "func": 1
                },
                "FUN_0010d21c": {
                    "parse_and_copy_string": 4,
                    "parse_and_extract_string": 2,
                    "parse_and_print_error": 1,
                    "parse_and_print_number": 1,
                    "parse_and_process_data": 4,
                    "parse_and_process_string": 1,
                    "parse_and_validate_input": 13,
                    "parse_and_validate_string": 1,
                    "parse_string": 2
                },
                "__haystack": {
                    "demangled_result": 1,
                    "demangled_str": 1,
                    "demangled_string": 4,
                    "haystack": 14,
                    "haystack_str": 3,
                    "haystack_string": 2,
                    "search_string": 2,
                    "str_data3": 1,
                    "string_1": 1,
                    "temp_string": 2
                },
                "__ptr": {
                    "copied_string": 2,
                    "ptr1": 9,
                    "ptr3": 1,
                    "ptr_string": 1,
                    "ptr_var": 1,
                    "str_data1": 1,
                    "str_ptr": 2,
                    "str_ptr1": 2,
                    "string_copy": 1,
                    "string_copy_ptr": 3,
                    "string_pointer": 1,
                    "string_ptr": 2,
                    "string_ptr1": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1
                },
                "__ptr_00": {
                    "concat_str_ptr": 1,
                    "concatenated_ptr": 1,
                    "concatenated_str_ptr": 1,
                    "concatenated_string": 3,
                    "concatenated_string_ptr": 1,
                    "modified_string": 1,
                    "ptr2": 9,
                    "ptr4": 1,
                    "ptr_string_2": 1,
                    "ptr_var2": 1,
                    "str_data2": 1,
                    "str_ptr2": 2,
                    "string_pointer2": 1,
                    "string_ptr2": 2,
                    "temp_ptr2": 3,
                    "temp_ptr3": 1,
                    "temp_string_ptr": 1
                },
                "_sch_istable": {
                    "char_table": 1,
                    "istable": 1
                },
                "bVar1": {
                    "byte1": 6,
                    "byte_value": 1,
                    "byte_var1": 3,
                    "ch1": 1,
                    "character": 1,
                    "current_byte": 15,
                    "current_char": 2,
                    "temp_byte": 1,
                    "temp_byte1": 1
                },
                "bVar14": {
                    "b_val1": 1,
                    "b_var14": 2,
                    "byte14": 1,
                    "byte4": 5,
                    "byte_val1": 1,
                    "byte_var1": 2,
                    "byte_var14": 2,
                    "byte_var4": 1,
                    "flag2": 1,
                    "loop_var1": 1,
                    "one_byte": 1,
                    "temp_byte1": 3,
                    "temp_byte3": 2,
                    "temp_byte4": 2,
                    "temp_byte_3": 2,
                    "temp_var2": 1,
                    "var14": 1,
                    "variable1": 1,
                    "variable_14": 1
                },
                "bVar16": {
                    "byte16": 1,
                    "byte5": 4,
                    "byte_val2": 1,
                    "byte_value2": 1,
                    "byte_var16": 2,
                    "byte_var2": 2,
                    "byte_var5": 1,
                    "current_var": 1,
                    "flag1": 1,
                    "loop_counter": 1,
                    "loop_var1": 1,
                    "loop_var2": 1,
                    "prev_byte": 1,
                    "temp_byte2": 4,
                    "temp_byte4": 2,
                    "temp_byte5": 2,
                    "temp_byte_4": 2,
                    "temp_val1": 1,
                    "var16": 1,
                    "variable_16": 1
                },
                "bVar17": {
                    "b_val2": 1,
                    "b_var17": 1,
                    "byte17": 1,
                    "byte6": 4,
                    "byte_val3": 1,
                    "byte_var17": 2,
                    "byte_var3": 2,
                    "byte_var6": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "loop_var2": 1,
                    "loop_var3": 1,
                    "temp_byte3": 4,
                    "temp_byte5": 2,
                    "temp_byte6": 2,
                    "temp_byte_5": 2,
                    "temp_var4": 1,
                    "var17": 1,
                    "variable2": 1,
                    "variable_17": 1
                },
                "bVar18": {
                    "b_val3": 1,
                    "b_var18": 1,
                    "byte18": 1,
                    "byte7": 4,
                    "byte_val4": 1,
                    "byte_var18": 2,
                    "byte_var4": 2,
                    "byte_var7": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "loop_var3": 1,
                    "loop_var4": 1,
                    "temp_byte4": 4,
                    "temp_byte6": 2,
                    "temp_byte7": 2,
                    "temp_byte_6": 2,
                    "temp_var5": 1,
                    "var18": 1,
                    "variable3": 1,
                    "variable_18": 1
                },
                "bVar19": {
                    "b_val4": 1,
                    "b_var19": 1,
                    "byte19": 1,
                    "byte8": 4,
                    "byte_val5": 1,
                    "byte_var19": 2,
                    "byte_var5": 2,
                    "byte_var8": 1,
                    "flag4": 1,
                    "flag5": 1,
                    "loop_var4": 1,
                    "loop_var5": 1,
                    "temp_byte5": 4,
                    "temp_byte7": 2,
                    "temp_byte8": 2,
                    "temp_byte_7": 2,
                    "temp_var6": 1,
                    "var19": 1,
                    "variable4": 1,
                    "variable_19": 1
                },
                "bVar3": {
                    "byte2": 5,
                    "byte3": 1,
                    "byte_var2": 1,
                    "byte_var3": 2,
                    "ch2": 1,
                    "char_check": 1,
                    "current_byte_val": 1,
                    "flag1": 1,
                    "parsed_byte": 1,
                    "prev_byte": 1,
                    "previous_char": 1,
                    "temp_byte": 9,
                    "temp_byte1": 1,
                    "temp_byte2": 2,
                    "value": 1,
                    "var3": 1,
                    "variable_3": 1
                },
                "bVar5": {
                    "byte3": 5,
                    "byte5": 1,
                    "byte_flag": 1,
                    "byte_var": 1,
                    "byte_var3": 1,
                    "byte_var5": 2,
                    "is_valid": 3,
                    "parse_result": 3,
                    "parse_success": 1,
                    "result": 2,
                    "result_byte": 1,
                    "return_value": 2,
                    "temp_byte2": 2,
                    "temp_byte3": 2,
                    "temp_byte_2": 2,
                    "var5": 1,
                    "variable_5": 1
                },
                "cVar4": {
                    "char1": 5,
                    "char4": 1,
                    "char_result": 1,
                    "char_value": 3,
                    "char_var": 3,
                    "char_var1": 1,
                    "char_var4": 1,
                    "char_variable": 1,
                    "character": 1,
                    "current_char": 1,
                    "parsed_char": 1,
                    "temp_char": 10,
                    "temp_char1": 2
                },
                "copy_and_null_terminate_string_00109a0b": {
                    "copy_and_null_terminate_string": 1
                },
                "cplus_demangle": {
                    "demangle_string": 1
                },
                "iVar7": {
                    "count": 1,
                    "index": 3,
                    "int1": 1,
                    "int_result": 1,
                    "int_value": 1,
                    "int_var": 2,
                    "int_var1": 2,
                    "int_var7": 2,
                    "integer_result": 2,
                    "integer_value": 1,
                    "integer_variable1": 1,
                    "length": 1,
                    "parse_integer_result": 1,
                    "parsed_integer": 1,
                    "result_int": 1,
                    "temp_int": 7,
                    "temp_int1": 2,
                    "var7": 1
                },
                "local_3c": {
                    "array": 1,
                    "array_values": 1,
                    "int_array": 1,
                    "local_array": 3,
                    "local_int_array": 1,
                    "local_vars": 1,
                    "number_array": 2,
                    "numbers_array": 1,
                    "parsed_int_arr": 3,
                    "parsed_integer": 1,
                    "parsed_integers": 2,
                    "parsed_ints": 1,
                    "parsed_numbers": 4,
                    "parsed_numbers_array": 1,
                    "parsed_values": 2,
                    "parsed_values_buffer": 1,
                    "some_array": 1,
                    "temp_array": 2
                },
                "param_1": {
                    "config": 1,
                    "input": 4,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "param1": 14,
                    "param_1": 6,
                    "param_output": 1,
                    "param_pointer": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "data": 1,
                    "data_ptr": 2,
                    "input": 1,
                    "input2": 1,
                    "input_ptr": 1,
                    "input_string": 7,
                    "p_string": 1,
                    "param2": 11,
                    "param_data": 1,
                    "param_input": 1,
                    "string": 1,
                    "string_ptr": 3
                },
                "param_3": {
                    "error_string": 1,
                    "output": 3,
                    "output_param": 1,
                    "output_ptr": 4,
                    "output_string": 6,
                    "p_result": 1,
                    "param3": 11,
                    "param_result": 2,
                    "result": 2
                },
                "parse_integer_from_string_00108e76": {
                    "parse_integer_from_string": 1
                },
                "parse_number_from_string_00108ea1": {
                    "parse_number_from_string": 1
                },
                "pbVar10": {
                    "byte_ptr10": 1,
                    "byte_ptr2": 3,
                    "byte_ptr_var2": 1,
                    "current_byte_ptr2": 1,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_ptr": 2,
                    "iteration_byte_ptr": 1,
                    "next_byte_ptr": 1,
                    "pb_var": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr_current_byte_2": 1,
                    "str_ptr": 3,
                    "string_pointer": 1,
                    "string_position": 1,
                    "string_ptr": 1,
                    "string_ptr_copy": 1,
                    "temp_char_ptr1": 1,
                    "temp_data_pointer": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 4,
                    "temp_ptr2": 1
                },
                "pbVar2": {
                    "byte_ptr": 4,
                    "byte_ptr1": 2,
                    "byte_ptr2": 1,
                    "byte_ptr_var": 1,
                    "curr_char": 1,
                    "current_byte_ptr": 2,
                    "current_char": 2,
                    "current_char_ptr": 1,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_ptr": 6,
                    "data_pointer": 1,
                    "input_byte": 1,
                    "input_pointer": 1,
                    "p_string_ptr": 1,
                    "ptr1": 1,
                    "ptr_current_byte": 1,
                    "str_ptr": 1,
                    "string": 1,
                    "temp_ptr1": 1
                },
                "pcVar11": {
                    "char_ptr1": 1,
                    "current_pointer": 1,
                    "found_string_ptr": 1,
                    "haystack_pointer": 1,
                    "match_ptr": 1,
                    "pc_var1": 1,
                    "pc_var11": 1,
                    "pointer1": 1,
                    "ptr1": 1,
                    "ptr_char": 1,
                    "ptr_to_no_string": 1,
                    "ptr_var1": 1,
                    "ptr_var3": 1,
                    "search_ptr1": 1,
                    "search_result": 1,
                    "search_start_ptr": 1,
                    "start_ptr": 1,
                    "str_ptr1": 1,
                    "str_ptr2": 1,
                    "string_2": 1,
                    "substring_start": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_string_ptr": 1,
                    "var1": 1,
                    "var11": 3,
                    "var11_ptr": 1
                },
                "pcVar13": {
                    "char_ptr2": 1,
                    "current_char": 1,
                    "demangled_string_ptr": 1,
                    "haystack_ptr": 2,
                    "pc_var13": 1,
                    "pc_var2": 1,
                    "pointer1": 1,
                    "pointer2": 1,
                    "ptr13": 1,
                    "ptr2": 1,
                    "ptr_char2": 1,
                    "ptr_var2": 1,
                    "ptr_var4": 1,
                    "search_ptr2": 1,
                    "str_ptr2": 1,
                    "temp_char_ptr2": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_2": 1,
                    "temp_string_ptr2": 1,
                    "temp_var1": 1,
                    "var13": 3,
                    "var13_ptr": 1,
                    "var2": 1
                },
                "pcVar15": {
                    "char_ptr3": 1,
                    "copy_ptr": 2,
                    "demangled_string_ptr2": 1,
                    "dest_ptr": 1,
                    "pc_var15": 1,
                    "pc_var3": 1,
                    "pointer2": 1,
                    "pointer3": 1,
                    "ptr15": 1,
                    "ptr3": 1,
                    "ptr_char3": 1,
                    "ptr_var3": 1,
                    "ptr_var5": 1,
                    "reverse": 1,
                    "str_ptr3": 1,
                    "string_3": 1,
                    "temp_char_ptr3": 1,
                    "temp_pointer3": 1,
                    "temp_ptr3": 1,
                    "temp_ptr5": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 1,
                    "temp_string_ptr3": 1,
                    "temp_var3": 1,
                    "var15": 3,
                    "var15_ptr": 1,
                    "var3": 1
                },
                "print_error_message_0010911f": {
                    "print_error_message": 1
                },
                "sVar9": {
                    "data_length": 1,
                    "input_len": 1,
                    "input_length": 3,
                    "input_string_length": 1,
                    "size": 1,
                    "size_var": 1,
                    "size_var1": 2,
                    "size_var9": 2,
                    "str_len": 3,
                    "str_length": 3,
                    "string_len": 1,
                    "string_length": 11,
                    "strlen_result": 1
                },
                "uVar12": {
                    "copied_ptr": 1,
                    "copied_str": 1,
                    "copied_str_ptr": 1,
                    "copied_string": 6,
                    "copy_result": 3,
                    "modified_string_ptr": 1,
                    "output_string": 1,
                    "ptr_result": 1,
                    "result": 1,
                    "str_copy_result": 1,
                    "str_ptr_result": 1,
                    "temp_output": 1,
                    "temp_output_string": 1,
                    "temp_u_int2": 2,
                    "temp_uint1": 1,
                    "temp_uint8": 1,
                    "u_var": 1,
                    "u_var12": 1,
                    "uint_var2": 1,
                    "uint_var3": 1,
                    "uvar_ptr": 1,
                    "var12": 2
                },
                "uVar20": {
                    "count": 3,
                    "counter": 15,
                    "iteration_count": 2,
                    "loop_counter": 6,
                    "loop_counter2": 1,
                    "loop_index": 2,
                    "uint_var3": 1,
                    "uint_var4": 1
                },
                "uVar21": {
                    "converted_input": 1,
                    "converted_length": 1,
                    "converted_number": 1,
                    "converted_value": 1,
                    "loop_counter_ulong": 1,
                    "loop_variable": 1,
                    "parse_int_value": 1,
                    "parsed_int": 3,
                    "parsed_integer": 1,
                    "parsed_number": 2,
                    "parsed_u_long": 1,
                    "parsed_value": 1,
                    "parsed_value1": 1,
                    "temp_u_long1": 1,
                    "temp_ulong": 1,
                    "uint_value": 1,
                    "ulong1": 1,
                    "ulong_input": 1,
                    "ulong_value": 2,
                    "ulong_var": 4,
                    "ulong_var1": 2,
                    "ulong_var21": 1,
                    "unsigned_var": 1
                },
                "uVar6": {
                    "final_result": 1,
                    "parsed_value": 1,
                    "result": 20,
                    "return_code": 1,
                    "return_value": 6,
                    "uint_var1": 1,
                    "value": 1
                },
                "uVar8": {
                    "count": 1,
                    "number_parsed": 1,
                    "parse_int_result": 1,
                    "parse_number_result": 1,
                    "parse_result": 1,
                    "parse_result2": 1,
                    "parsed_number": 1,
                    "parsed_u_int": 1,
                    "parsed_value": 3,
                    "result_uint": 1,
                    "temp_u_int": 2,
                    "temp_u_int1": 1,
                    "temp_uint": 5,
                    "temp_uint1": 1,
                    "uint1": 1,
                    "uint_result": 1,
                    "uint_value": 1,
                    "uint_var": 2,
                    "uint_var1": 1,
                    "uint_var2": 1,
                    "uint_var8": 2,
                    "var8": 1
                }
            },
            "called": [
                "concat",
                "FUN_0010c95e",
                "free",
                "cplus_demangle",
                "strstr",
                "FUN_00109a0b",
                "FUN_00108e76",
                "FUN_00108ea1",
                "strlen",
                "abort",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined4 parse_and_validate_input_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte current_byte;\n  byte *current_ptr;\n  byte temp_byte;\n  char temp_char;\n  byte byte3;\n  undefined4 result;\n  int temp_int;\n  uint temp_uint;\n  size_t string_length;\n  byte *temp_ptr;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 copied_string;\n  char *var13;\n  byte byte4;\n  char *var15;\n  byte byte5;\n  byte byte6;\n  byte temp_byte4;\n  byte byte8;\n  uint counter;\n  ulong ulong_var;\n  uint parsed_numbers [3];\n  \n  current_ptr = *param2;\n  *param2 = current_ptr + 1;\n  parsed_numbers[0] = parse_integer_from_string(param2);\n  ulong_var = (ulong)parsed_numbers[0];\n  if (parsed_numbers[0] != 0) {\n    temp_ptr = *param2;\n    string_length = strlen((char *)temp_ptr);\n    if (ulong_var <= string_length) {\n      *param2 = temp_ptr + ulong_var;\n      counter = 0;\n      result = parse_number_from_string(param2,parsed_numbers);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (parsed_numbers[0] <= counter) {\n          if (param3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)copy_and_null_terminate_string(current_ptr,(int)*param2 - (int)current_ptr);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            copied_string = copy_and_null_terminate_string(haystack,(int)var15 - (int)haystack);\n            *param3 = copied_string;\n            free(haystack);\n            return result;\n          }\n          print_error_message(current_ptr);\n          free(haystack);\n          return 0;\n        }\n        temp_ptr = *param2;\n        if (*temp_ptr != 0x5a) {\n          byte3 = parse_and_process_data_0010c95e(param1,param2,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          temp_byte = 0;\n          byte4 = 0;\n          temp_byte4 = 0;\n          byte6 = 0;\n          byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte5 = temp_byte;\n              current_byte = *temp_ptr;\n              if ((byte4 | current_byte == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp_byte = byte3;\n              byte4 = byte3;\n            } while ('v' < (char)current_byte);\n            if ((char)current_byte < 'b') {\n              if ((char)current_byte < 'U') {\n                if ((char)current_byte < 'C') goto LAB_0010d2e9;\n                ulong_var = 1L << (current_byte + 0xbd & 0x3f);\n                if ((ulong_var & 0x11409) == 0) {\n                  if ((ulong_var & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (current_byte == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(current_byte + 0xab)) goto LAB_0010d2e9;\n              temp_ptr = temp_ptr + 1;\n              temp_byte = byte5;\n              byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(current_byte) {\n            case 0x62:\n              temp_byte = byte5;\n              temp_byte4 = byte3;\n              break;\n            case 99:\n              temp_byte = byte5;\n              byte8 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp_byte = byte5;\n              byte6 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = temp_ptr + 1;\n        temp_char = parse_and_process_data_0010c95e(param1,param2,0);\n        if (temp_char == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message(current_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte5 == 0) {\n    if (byte8 == 0) {\n      if (temp_byte4 == 0) {\n        if (byte6 == 0) {\n          if (byte3 != 0) {\n            temp_uint = parse_integer_from_string(param2);\n            if (temp_uint == 0) goto LAB_0010d280;\n            *param2 = *param2 + temp_uint;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            temp_ptr = *param2;\n            if (((&istable)[(ulong)*temp_ptr * 2] & 4) == 0) break;\n            *param2 = temp_ptr + 1;\n          }\n          if (*temp_ptr == 0x2e) {\n            do {\n              temp_ptr = temp_ptr + 1;\n              *param2 = temp_ptr;\n            } while (((&istable)[(ulong)*temp_ptr * 2] & 4) != 0);\n          }\n          temp_ptr = *param2;\n          if (*temp_ptr == 0x65) {\n            do {\n              temp_ptr = temp_ptr + 1;\n              *param2 = temp_ptr;\n            } while (((&istable)[(ulong)*temp_ptr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        temp_uint = parse_integer_from_string(param2);\n        if (1 < temp_uint) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      temp_int = parse_integer_from_string(param2);\n      if (temp_int == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = parse_integer_from_string_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_from_string_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_string_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_string_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = parse_integer_from_string_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = parse_integer_from_string_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = parse_integer_from_string_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "current_name": "parse_and_validate_input_0010d21c",
            "entrypoint": "0x0010d21c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d21c": "parse_and_validate_input_0010d21c",
                "__haystack": "haystack",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "_sch_istable": "istable",
                "bVar1": "current_byte",
                "bVar14": "byte4",
                "bVar16": "byte5",
                "bVar17": "byte6",
                "bVar18": "temp_byte4",
                "bVar19": "byte8",
                "bVar3": "temp_byte",
                "bVar5": "byte3",
                "cVar4": "temp_char",
                "copy_and_null_terminate_string_00109a0b": "copy_and_null_terminate_string",
                "cplus_demangle": "demangle_string",
                "iVar7": "temp_int",
                "local_3c": "parsed_numbers",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "parse_integer_from_string_00108e76": "parse_integer_from_string",
                "parse_number_from_string_00108ea1": "parse_number_from_string",
                "pbVar10": "temp_ptr",
                "pbVar2": "current_ptr",
                "pcVar11": "var11",
                "pcVar13": "var13",
                "pcVar15": "var15",
                "print_error_message_0010911f": "print_error_message",
                "sVar9": "string_length",
                "uVar12": "copied_string",
                "uVar20": "counter",
                "uVar21": "ulong_var",
                "uVar6": "result",
                "uVar8": "temp_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d559": {
            "additional_data": {
                "FUN_0010d559": {
                    "find_and_validate_data": 1,
                    "parse_and_process_data": 1,
                    "parse_and_process_input": 1,
                    "parse_and_validate": 1,
                    "parse_and_validate_input": 7,
                    "parse_input": 2,
                    "parse_input_and_validate": 5,
                    "parse_input_data": 1,
                    "validate_and_extract_data": 4,
                    "validate_and_parse_input": 2,
                    "validate_and_process_data": 1,
                    "validate_and_process_input": 2,
                    "validate_and_search": 1
                },
                "PTR_PARAM_1": {
                    "output": 1
                },
                "PTR_PARAM_2": {
                    "input_data": 1
                },
                "PTR_PARAM_3": {
                    "result": 1
                },
                "__nptr": {
                    "byte_ptr_2": 1,
                    "num_str": 1,
                    "numeric_string": 1
                },
                "__ptr": {
                    "allocated_string": 1,
                    "copied_string": 3,
                    "copied_string_ptr": 1,
                    "copy_str": 1,
                    "copy_string_ptr": 1,
                    "extracted_string": 1,
                    "extracted_string_ptr": 1,
                    "processed_string": 1,
                    "string_2": 1,
                    "string_copy": 4,
                    "string_copy2": 1,
                    "string_copy_for_type": 1,
                    "string_copy_ptr": 2,
                    "temp_buffer": 1,
                    "temp_memory": 1,
                    "temp_string": 1,
                    "temp_string_4": 1,
                    "temp_string_ptr": 2,
                    "temp_value": 1,
                    "temporary_string": 1,
                    "type_copy": 1,
                    "void_ptr": 3
                },
                "__s1": {
                    "char_ptr2": 1,
                    "comparing_string": 1,
                    "comparison_string": 4,
                    "extracted_string": 8,
                    "extracted_value": 8,
                    "found_string": 2,
                    "string_1": 1,
                    "string_ptr3": 1,
                    "string_var": 1,
                    "string_var_1": 1,
                    "temp_string_3": 1,
                    "value_from_binary": 2
                },
                "bVar1": {
                    "byte1": 1,
                    "byte_val": 1,
                    "byte_value": 3,
                    "byte_var": 2,
                    "current_char": 1,
                    "first_byte": 11,
                    "first_char": 10,
                    "first_character": 1,
                    "next_byte": 1
                },
                "cVar3": {
                    "c": 1,
                    "char_val": 1,
                    "char_validation": 1,
                    "char_value": 3,
                    "char_var": 3,
                    "input_validation": 1,
                    "is_valid": 2,
                    "parse_result": 4,
                    "parsed_char": 1,
                    "result": 5,
                    "result_character": 1,
                    "validation_result": 7
                },
                "iVar5": {
                    "compare_result": 1,
                    "comparison_result": 16,
                    "int_val": 1,
                    "int_value": 1,
                    "int_var": 3,
                    "strcmp_result": 1,
                    "string_comparison": 1,
                    "string_comparison_result": 6
                },
                "lVar8": {
                    "count": 1,
                    "found_value": 3,
                    "long_var": 3,
                    "lookup_result": 2,
                    "result": 7,
                    "result_length": 1,
                    "result_long": 1,
                    "search_result": 7,
                    "temp_long_value": 1,
                    "temp_value": 1,
                    "temp_variable": 1,
                    "type_info": 1,
                    "type_match": 1,
                    "type_search_result": 1
                },
                "local_40": {
                    "buffer": 1,
                    "error_message": 1,
                    "error_msg": 1,
                    "local_array": 1,
                    "local_string": 1,
                    "output_array": 1,
                    "output_string_array": 1,
                    "result_string_array": 2,
                    "result_strings": 1,
                    "search_string": 1,
                    "str_arr": 1,
                    "string_array": 2,
                    "strings_array": 1,
                    "temp_array": 2,
                    "temp_string_array": 3,
                    "temp_string_buffer": 1,
                    "temp_strings": 1,
                    "temporary_string_array": 1,
                    "type_str_array": 1
                },
                "local_64": {
                    "count": 6,
                    "counter": 4,
                    "int_var_1": 1,
                    "iteration_count": 2,
                    "iteration_counter": 1,
                    "iterations": 1,
                    "local_var": 1,
                    "loop_count": 2,
                    "loop_counter": 1,
                    "portion_length": 1,
                    "remaining_chars": 1,
                    "remaining_iterations": 4
                },
                "param_1": {
                    "arguments": 1,
                    "buffer": 1,
                    "data": 1,
                    "data_ptr": 2,
                    "data_structure": 5,
                    "function_data": 1,
                    "function_parameters": 1,
                    "input_array": 5,
                    "input_data": 2,
                    "input_values": 2,
                    "param_1_array": 1,
                    "param_array": 3,
                    "param_list": 1,
                    "pointer_list": 1,
                    "result": 1
                },
                "param_2": {
                    "byte_array_ptr": 2,
                    "byte_string": 1,
                    "input": 3,
                    "input_data": 7,
                    "input_ptr": 4,
                    "input_str": 1,
                    "input_string": 9,
                    "string_ptr": 1
                },
                "param_3": {
                    "data_length": 1,
                    "length": 2,
                    "output": 1,
                    "output_count": 1,
                    "output_len": 1,
                    "output_length": 7,
                    "output_ptr": 2,
                    "output_size": 1,
                    "output_val": 1,
                    "result": 4,
                    "result_length": 3,
                    "result_ptr": 4
                },
                "pbVar11": {
                    "byte_ptr2": 2,
                    "byte_ptr_1": 1,
                    "new_byte": 1,
                    "new_byte_ptr": 2,
                    "new_current_char_ptr": 1,
                    "new_first_char": 1,
                    "new_input_ptr": 2,
                    "next_byte": 3,
                    "next_byte_after_parse": 1,
                    "next_byte_ptr": 1,
                    "next_char": 1,
                    "next_input": 1,
                    "next_pos": 1,
                    "next_ptr": 2,
                    "result_ptr": 1,
                    "updated_byte": 2,
                    "updated_input_ptr": 3,
                    "updated_input_str": 1,
                    "updated_string_pointer": 1,
                    "updated_string_ptr": 2
                },
                "pbVar2": {
                    "byte_ptr": 5,
                    "current": 2,
                    "current_byte": 8,
                    "current_byte_ptr": 1,
                    "current_char": 1,
                    "current_char_ptr": 2,
                    "current_pos": 1,
                    "current_ptr": 1,
                    "first_char": 1,
                    "input": 1,
                    "input_ptr": 3,
                    "ptr": 1,
                    "string": 1,
                    "string_ptr": 3
                },
                "pcVar10": {
                    "char_ptr": 2,
                    "copied_string": 1,
                    "copy_string": 1,
                    "extracted_string": 2,
                    "extracted_type": 1,
                    "parsed_string": 2,
                    "string_copy": 3,
                    "string_ptr": 5,
                    "string_var": 1,
                    "temp_string": 9,
                    "temp_string_2": 1,
                    "temp_value": 1,
                    "temporary_string": 1
                },
                "plVar9": {
                    "debug_info": 8,
                    "debug_info_pointer": 1,
                    "debug_info_pointer_array": 1,
                    "debug_info_ptr": 5,
                    "debug_info_ptr_ptr": 1,
                    "debug_info_result": 1,
                    "debug_type": 1,
                    "long_array_ptr": 1,
                    "long_ptr": 2,
                    "type_array": 1,
                    "type_array_ptr": 1,
                    "type_info_ptr": 1,
                    "type_list": 2,
                    "type_ptr": 1,
                    "type_search_results": 1,
                    "types_ptr": 1
                },
                "ppcVar6": {
                    "data_structure": 2,
                    "data_structures": 1,
                    "local_array": 3,
                    "local_pointer_array": 1,
                    "local_ptr": 1,
                    "optional_output": 2,
                    "str_arr_ptr": 1,
                    "string_array": 2,
                    "string_array_ptr": 3,
                    "string_list": 1,
                    "string_ptr_ptr": 1,
                    "temp_array": 1,
                    "temp_buffer": 3,
                    "temp_string": 2,
                    "temp_string_array": 2,
                    "temp_variable": 1,
                    "temp_variables": 1,
                    "temporary_string_array": 1,
                    "type_array": 1,
                    "type_pointer": 1
                },
                "sVar7": {
                    "input_length": 3,
                    "size_value": 1,
                    "size_var": 3,
                    "str_length": 2,
                    "string_length": 20,
                    "string_length_2": 1
                },
                "uVar12": {
                    "constant_value": 1,
                    "data_structure_flag": 1,
                    "lookup_value": 1,
                    "named_type": 2,
                    "named_type_flag": 1,
                    "new_value": 1,
                    "search_flag": 1,
                    "search_mode": 1,
                    "search_type": 3,
                    "type": 3,
                    "type_category": 1,
                    "type_check": 1,
                    "type_constant": 1,
                    "type_flag": 2,
                    "type_flags": 1,
                    "type_identifier": 3,
                    "type_number": 2,
                    "type_search": 1,
                    "type_value": 1,
                    "uint_var2": 2,
                    "uint_var_1": 1
                },
                "uVar4": {
                    "integer": 1,
                    "integer_length": 1,
                    "parsed_int": 1,
                    "parsed_integer": 20,
                    "parsed_value": 1,
                    "string_length": 1,
                    "uint_val": 1,
                    "uint_value": 1,
                    "uint_var": 3
                }
            },
            "called": [
                "FUN_001129f4",
                "FUN_0010914e",
                "FUN_0010afd5",
                "free",
                "strtol",
                "FUN_00113b1e",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "FUN_00108e76",
                "strcmp",
                "strlen",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 validate_and_parse_input_0010d559(undefined8 *data_structure,byte **input_string,long *output_length)\n\n{\n  byte first_byte;\n  byte *current_byte;\n  char validation_result;\n  uint parsed_integer;\n  int comparison_result;\n  char **string_array_ptr;\n  size_t string_length;\n  long search_result;\n  long *debug_info;\n  char *temp_string;\n  char *extracted_string;\n  void *string_copy;\n  byte *updated_input_ptr;\n  undefined8 type;\n  byte *byte_ptr_2;\n  int count;\n  char *temp_string_array [2];\n  \n  current_byte = *input_string;\n  first_byte = current_byte[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    count = (char)first_byte + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *input_string = current_byte + 1;\n    }\n    updated_input_ptr = *input_string + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    byte_ptr_2 = current_byte + 2;\n    search_result = strtol((char *)byte_ptr_2,(char **)0x0,10);\n    count = (int)search_result;\n    while (((&_sch_istable)[(ulong)*byte_ptr_2 * 2] & 4) != 0) {\n      byte_ptr_2 = byte_ptr_2 + 1;\n    }\n    updated_input_ptr = byte_ptr_2 + 1;\n    if (*byte_ptr_2 != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = updated_input_ptr;\n  string_array_ptr = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    string_array_ptr = temp_string_array;\n  }\n  search_result = 0;\n  while( true ) {\n    while( true ) {\n      count = count + -1;\n      if (count == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = search_result;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      validation_result = parse_and_validate_input_0010d21c(data_structure,input_string,string_array_ptr);\n      temp_string = temp_string_array[0];\n      if (validation_result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(temp_string_array[0]);\n        search_result = find_string_in_data_structure_0010afd5(*data_structure,data_structure[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (search_result == 0) {\n          return 0;\n        }\n      }\n    }\n    parsed_integer = parse_integer_from_string_00108e76(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < parsed_integer) break;\n    if (output_length != (long *)0x0) {\n      if ((search_result != 0) && (debug_info = (long *)extract_real_type_from_debug_info_00113b1e(search_result), debug_info != (long *)0x0)) {\n        temp_string = (char *)copy_and_null_terminate_string_00109a0b(*input_string,parsed_integer);\n        for (; search_result = *debug_info, search_result != 0; debug_info = debug_info + 1) {\n          search_result = *(long *)(search_result + 8);\n          if (search_result == 0) {\n            free(temp_string);\n            return 0;\n          }\n          extracted_string = (char *)extract_value_from_binary_001129f4(search_result);\n          if ((extracted_string != (char *)0x0) && (comparison_result = strcmp(extracted_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (search_result != 0) goto LAB_0010d7ad;\n      }\n      type = 9;\n      if (count == 0) {\n        string_copy = (void *)copy_and_null_terminate_string_00109a0b(*input_string,parsed_integer);\n        search_result = find_named_type_0010914e(*data_structure,string_copy);\n        free(string_copy);\n        if (search_result != 0) goto LAB_0010d7ad;\n        type = 0;\n      }\n      search_result = find_string_in_data_structure_0010afd5(*data_structure,data_structure[1],*input_string,parsed_integer,type);\n      if (search_result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + parsed_integer;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(current_byte);\n  return 0;\n}\n\n",
            "current_name": "validate_and_parse_input_0010d559",
            "entrypoint": "0x0010d559",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d559": "validate_and_parse_input_0010d559",
                "__nptr": "byte_ptr_2",
                "__ptr": "string_copy",
                "__s1": "extracted_string",
                "bVar1": "first_byte",
                "cVar3": "validation_result",
                "iVar5": "comparison_result",
                "lVar8": "search_result",
                "local_40": "temp_string_array",
                "local_64": "count",
                "param_1": "data_structure",
                "param_2": "input_string",
                "param_3": "output_length",
                "pbVar11": "updated_input_ptr",
                "pbVar2": "current_byte",
                "pcVar10": "temp_string",
                "plVar9": "debug_info",
                "ppcVar6": "string_array_ptr",
                "sVar7": "string_length",
                "uVar12": "type",
                "uVar4": "parsed_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d7d4": {
            "additional_data": {
                "FUNC_0010c95e": {
                    "check_data_validity": 1,
                    "validate_data_func": 1
                },
                "FUN_0010d7d4": {
                    "process_data": 20,
                    "store_and_expand_data": 2,
                    "store_data_and_expand": 1,
                    "store_data_and_update_pointers": 1,
                    "store_data_from_binary": 1,
                    "store_expanded_data": 6
                },
                "cVar2": {
                    "flag": 2,
                    "is_valid": 1,
                    "result": 21,
                    "result_char": 2,
                    "result_flag": 1,
                    "success": 1,
                    "success_flag": 1,
                    "validation_result": 1,
                    "var_b": 1
                },
                "expand_and_store_data_00109be3": {
                    "expand_and_store_data": 2,
                    "expand_and_store_data_func": 1
                },
                "lVar4": {
                    "allocated_data": 1,
                    "allocated_memory": 1,
                    "array_data": 1,
                    "array_pointer": 1,
                    "current_data": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "input_data": 1,
                    "new_address": 1,
                    "old_size": 1,
                    "output_data": 2,
                    "output_data_ptr": 1,
                    "output_ptr": 1,
                    "param_3_value": 1,
                    "realloc_ptr": 1,
                    "realloced_data": 1,
                    "temp": 3,
                    "temp_data": 1,
                    "temp_long": 2,
                    "temp_value": 3,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "var_d": 1
                },
                "local_40": {
                    "array": 1,
                    "buffer": 1,
                    "expanded_data": 1,
                    "expanded_data_buffer": 1,
                    "local_array": 1,
                    "local_data": 1,
                    "local_data_array": 2,
                    "temp_array": 7,
                    "temp_array_buffer": 1,
                    "temp_array_storage": 1,
                    "temp_buffer": 3,
                    "temp_buffer_data": 1,
                    "temp_data": 2,
                    "temp_data_array": 1,
                    "temp_long_array": 1,
                    "temp_storage": 1,
                    "temp_var": 1,
                    "temporary_array": 2,
                    "var_f": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 4,
                    "data_1": 1,
                    "data_pointer": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_data": 5,
                    "input_param": 8,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "input_value": 1,
                    "param1": 1,
                    "param_a": 1,
                    "param_data": 1,
                    "param_one": 1
                },
                "param_2": {
                    "arg2": 2,
                    "data_2": 1,
                    "data_array": 1,
                    "data_param": 1,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "input_array": 1,
                    "input_data": 3,
                    "input_data_ptr": 1,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "input_ptr": 1,
                    "output_data": 2,
                    "output_data_ptr": 1,
                    "output_data_start": 1,
                    "output_param": 1,
                    "param2": 1,
                    "param_b": 1,
                    "param_two": 1,
                    "param_value": 1,
                    "pointer_to_data_length": 1,
                    "start_address": 1
                },
                "param_3": {
                    "allocation_ptr": 1,
                    "arg3": 2,
                    "data_3": 1,
                    "data_array": 1,
                    "data_lengths": 1,
                    "data_storage": 1,
                    "output_array": 5,
                    "output_buffer": 2,
                    "output_data": 6,
                    "output_data_ptr": 2,
                    "output_param": 2,
                    "output_param1": 1,
                    "output_param_1": 1,
                    "output_ptr": 2,
                    "param_c": 1,
                    "param_three": 1,
                    "pointer_to_data_array": 1
                },
                "param_4": {
                    "arg4": 2,
                    "count": 1,
                    "count1": 1,
                    "count_1": 2,
                    "count_param": 2,
                    "count_ptr": 3,
                    "counter_1": 1,
                    "counter_array": 1,
                    "data_count_ptr": 1,
                    "index": 1,
                    "index_a": 1,
                    "index_array": 1,
                    "num_elements": 4,
                    "num_entries": 1,
                    "output_count": 1,
                    "output_data_count": 2,
                    "output_index": 1,
                    "output_param2": 1,
                    "output_param_2": 1,
                    "param_d": 1,
                    "param_four": 1,
                    "pointer_to_data_count": 1
                },
                "param_5": {
                    "arg5": 2,
                    "capacity": 1,
                    "capacity_param": 2,
                    "capacity_ptr": 2,
                    "count2": 1,
                    "count_2": 2,
                    "counter_2": 1,
                    "index_b": 1,
                    "max_count_ptr": 1,
                    "max_counter_array": 1,
                    "max_data_count": 1,
                    "max_elements": 3,
                    "max_entries": 1,
                    "max_index": 2,
                    "max_num_elements": 1,
                    "output_data_capacity": 2,
                    "output_param3": 1,
                    "output_param_3": 1,
                    "output_size": 2,
                    "param_e": 1,
                    "param_five": 1,
                    "pointer_to_data_capacity": 1
                },
                "plVar5": {
                    "buffer_ptr": 1,
                    "current_output_data": 1,
                    "local_array": 1,
                    "local_data": 5,
                    "local_data_array": 1,
                    "local_data_ptr": 2,
                    "memory_pointer": 1,
                    "new_array": 1,
                    "output_data_ptr": 1,
                    "storage_pointer": 1,
                    "temp_array": 4,
                    "temp_buffer": 1,
                    "temp_data": 1,
                    "temp_data_ptr": 2,
                    "temp_long_ptr": 1,
                    "temp_param_3": 1,
                    "temp_ptr": 5,
                    "var_e": 1
                },
                "uVar1": {
                    "data": 1,
                    "data_start": 1,
                    "data_value": 2,
                    "first_data_element": 1,
                    "first_element": 3,
                    "first_value": 1,
                    "initial_data": 1,
                    "initial_value": 3,
                    "input": 1,
                    "input_value": 7,
                    "start_address": 1,
                    "start_data": 3,
                    "start_value": 2,
                    "temp_var1": 1,
                    "value": 1,
                    "value1": 1,
                    "var_a": 1
                },
                "uVar3": {
                    "data_result": 1,
                    "expand_result": 2,
                    "expanded_data": 6,
                    "expanded_data_flag": 1,
                    "expanded_data_result": 3,
                    "expanded_result": 3,
                    "expanded_value": 1,
                    "expansion_result": 1,
                    "processed_value": 1,
                    "result": 7,
                    "return_value": 2,
                    "status": 2,
                    "var_c": 1
                },
                "uVar6": {
                    "count": 2,
                    "count_entries": 1,
                    "counter": 2,
                    "element_index": 1,
                    "index": 1,
                    "new_count": 2,
                    "new_index": 2,
                    "new_index_value": 1,
                    "new_length_value": 1,
                    "new_num_elements": 1,
                    "num_elements_updated": 1,
                    "old_num_elements": 1,
                    "param_4_value": 1,
                    "temp_count": 1,
                    "temp_uint": 2,
                    "temp_var3": 1,
                    "updated_count": 1,
                    "updated_data_count": 1
                },
                "xrealloc": {
                    "realloc": 1,
                    "reallocate_memory": 1
                }
            },
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "calling": [
                "FUN_0010d882"
            ],
            "code": "\nundefined4\nprocess_data_0010d7d4(undefined8 input_param,undefined8 *data_ptr,long *output_data,uint *num_elements,uint *max_elements)\n\n{\n  undefined8 input_value;\n  char result;\n  undefined4 result;\n  long temp;\n  long *temp_ptr;\n  uint new_count;\n  long temp_array [2];\n  \n  input_value = *data_ptr;\n  temp_ptr = temp_array;\n  if (output_data == (long *)0x0) {\n    temp_ptr = (long *)0x0;\n  }\n  result = parse_and_process_data_0010c95e(input_param,data_ptr,temp_ptr);\n  if ((result != '\\0') &&\n     (result = expand_and_store_data(input_param,input_value,(int)*data_ptr - (int)input_value), (char)result != '\\0')) {\n    if (output_data == (long *)0x0) {\n      return result;\n    }\n    if (temp_array[0] != 0) {\n      if (*max_elements <= *num_elements + 1) {\n        new_count = *max_elements + 10;\n        temp = *output_data;\n        *max_elements = new_count;\n        temp = xrealloc(temp,(ulong)new_count << 3);\n        *output_data = temp;\n      }\n      new_count = *num_elements;\n      *(long *)(*output_data + (ulong)new_count * 8) = temp_array[0];\n      *num_elements = new_count + 1;\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_store_data_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0010d7d4",
            "entrypoint": "0x0010d7d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "cVar2": "result",
                "expand_and_store_data_00109be3": "expand_and_store_data",
                "lVar4": "temp",
                "local_40": "temp_array",
                "param_1": "input_param",
                "param_2": "data_ptr",
                "param_3": "output_data",
                "param_4": "num_elements",
                "param_5": "max_elements",
                "plVar5": "temp_ptr",
                "uVar1": "input_value",
                "uVar3": "result",
                "uVar6": "new_count",
                "xrealloc": "reallocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010d882": {
            "additional_data": {
                "FUN_0010d882": {
                    "parse_and_process_data": 11,
                    "parse_data": 4,
                    "parse_input_data": 2,
                    "process_and_extract_data": 1,
                    "process_and_parse_data": 1,
                    "process_and_print_data": 1,
                    "process_data": 4,
                    "process_data_and_extract": 1,
                    "process_data_and_extract_number": 1,
                    "process_input_data": 4,
                    "process_string": 1
                },
                "bVar7": {
                    "condition": 1,
                    "condition_check": 1,
                    "condition_flag": 1,
                    "flag": 2,
                    "is_iteration": 1,
                    "is_iteration_remaining": 1,
                    "is_loop_ongoing": 1,
                    "is_not_zero": 1,
                    "is_true": 4,
                    "is_valid": 8,
                    "iteration_check": 1,
                    "loop_condition": 9
                },
                "cVar3": {
                    "curr_char": 1,
                    "current": 1,
                    "current_byte": 1,
                    "current_char": 20,
                    "current_char_value": 1,
                    "current_character": 4,
                    "current_symbol": 2,
                    "current_var": 1
                },
                "iVar1": {
                    "count": 2,
                    "counter": 3,
                    "iteration_count": 8,
                    "iteration_counter": 6,
                    "iteration_var": 1,
                    "loop_count": 1,
                    "loop_counter": 5,
                    "remaining_iterations": 1
                },
                "lVar4": {
                    "allocated_data": 1,
                    "allocated_mem": 1,
                    "allocated_memory": 27,
                    "allocated_result": 1,
                    "dynamic_memory": 1
                },
                "local_40": {
                    "buffer": 1,
                    "data_array": 8,
                    "data_buffer": 2,
                    "data_storage": 1,
                    "local_array": 1,
                    "temp_array": 4,
                    "temp_buffer": 1,
                    "temp_data": 6,
                    "temp_data_array": 1,
                    "temp_storage": 2,
                    "temp_values": 1,
                    "temporary_buffer": 1,
                    "temporary_values": 1
                },
                "local_44": {
                    "count": 5,
                    "counter2": 1,
                    "flag": 1,
                    "inner_counter": 1,
                    "inner_loop_count": 1,
                    "is_t": 1,
                    "iteration": 1,
                    "iteration_count": 2,
                    "iterations": 2,
                    "local_var_3": 1,
                    "loop_counter_2": 1,
                    "loop_iteration": 1,
                    "loop_iterations": 1,
                    "loop_limit": 1,
                    "nested_iteration": 1,
                    "num_iterations": 1,
                    "number_2": 2,
                    "number_flag": 1,
                    "remaining_count": 1,
                    "temp": 1,
                    "temp_counter": 1,
                    "value_2": 2,
                    "variable_2": 1
                },
                "local_48": {
                    "constant2": 1,
                    "count": 1,
                    "counter2": 1,
                    "counter_2": 1,
                    "counter_value": 1,
                    "data_size": 1,
                    "index": 1,
                    "index2": 1,
                    "index_2": 2,
                    "limit": 1,
                    "local_var_2": 1,
                    "num_value": 1,
                    "number": 3,
                    "number_1": 2,
                    "number_var": 1,
                    "parse_result": 1,
                    "parsed_number": 1,
                    "parsed_number_2": 1,
                    "secondary_value": 1,
                    "sub_count": 1,
                    "temp_data_length": 1,
                    "value": 2,
                    "value_1": 2,
                    "value_3": 1,
                    "variable_1": 1
                },
                "local_4c": {
                    "base": 1,
                    "base_number": 1,
                    "base_value": 5,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "constant": 3,
                    "constant1": 2,
                    "constant_1": 2,
                    "constant_10": 2,
                    "constant_value": 4,
                    "counter_2": 1,
                    "default_value": 1,
                    "local_var_1": 1,
                    "max_data_length": 1,
                    "max_iterations": 1,
                    "value_2": 1
                },
                "local_50": {
                    "count": 1,
                    "counter": 2,
                    "counter1": 1,
                    "counter_1": 2,
                    "data_count": 1,
                    "data_counter": 1,
                    "data_index": 4,
                    "index": 8,
                    "index1": 1,
                    "index_1": 2,
                    "iteration_limit": 1,
                    "output_count": 1,
                    "position": 1,
                    "string_count": 1,
                    "total_count": 1,
                    "total_data_count": 1,
                    "total_processed": 1,
                    "value_1": 1
                },
                "param_1": {
                    "address": 1,
                    "data_ptr": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 1,
                    "function_param": 1,
                    "input_buffer": 1,
                    "input_data": 14,
                    "input_param": 5,
                    "input_ptr": 1,
                    "input_string": 1,
                    "param": 2,
                    "param_1": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "data_pointer": 1,
                    "input_string": 11,
                    "input_strings": 10,
                    "str_ptr": 1,
                    "string_array": 5,
                    "string_array_param": 1,
                    "string_ptr": 1,
                    "strings": 1
                },
                "param_3": {
                    "output": 1,
                    "output_array": 3,
                    "output_buffer": 1,
                    "output_data": 13,
                    "output_param": 4,
                    "output_pointer": 1,
                    "output_ptr": 5,
                    "output_string": 1,
                    "result_array": 1,
                    "result_ptr": 1
                },
                "param_4": {
                    "error_flag": 16,
                    "error_flag_param": 1,
                    "error_flag_ptr": 2,
                    "error_ptr": 1,
                    "flag": 3,
                    "flag_param": 1,
                    "flag_ptr": 1,
                    "has_error": 1,
                    "is_error": 4,
                    "output_flag": 1
                },
                "pcVar2": {
                    "current_char": 13,
                    "current_char_ptr": 1,
                    "current_input_ptr": 1,
                    "current_string": 14,
                    "string": 1,
                    "string_ptr": 1
                },
                "pcVar5": {
                    "curr_str_ptr": 1,
                    "current_char": 1,
                    "current_position": 5,
                    "current_string": 9,
                    "current_string2": 1,
                    "current_string_2": 2,
                    "current_string_copy": 1,
                    "current_string_ptr": 3,
                    "current_string_two": 1,
                    "current_string_updated": 1,
                    "data_pointer": 1,
                    "input_ptr": 1,
                    "next_string": 1,
                    "string_iterator": 1,
                    "string_ptr": 1,
                    "temp_string": 1
                },
                "uVar6": {
                    "converted_number": 2,
                    "converted_value": 1,
                    "current_number": 1,
                    "index": 13,
                    "local_var": 1,
                    "local_var_6": 1,
                    "local_variable": 1,
                    "number": 2,
                    "numeric_value": 1,
                    "parsed_number": 3,
                    "string_index": 2,
                    "temp_index": 1,
                    "temp_value": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_0010d7d4",
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010911f"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 process_and_parse_data_0010d882(long input_data,char **input_string,long *output_data,undefined *error_flag)\n\n{\n  int iteration_count;\n  char *current_string;\n  char current_char;\n  long allocated_memory;\n  char *current_string;\n  ulong index;\n  bool loop_condition;\n  uint index;\n  undefined4 base_value;\n  uint number;\n  int count;\n  undefined8 data_array [2];\n  \n  current_string = *input_string;\n  base_value = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *error_flag = 0;\n  }\n  index = 0;\n  while( true ) {\n    current_string = *input_string;\n    current_char = *current_string;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *input_string = current_string + 1;\n      if (current_char == 'T') {\n        count = 1;\n      }\n      else {\n        current_char = parse_number_from_string_00108ea1(input_string,&count);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = parse_number_from_string_00108ea1(input_string,&number);\n      if ((current_char == '\\0') || (*(uint *)(input_data + 0x28) <= number)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_string);\n        return 0;\n      }\n      index = (ulong)number;\n      while (iteration_count = count + -1, loop_condition = count != 0, count = iteration_count, loop_condition) {\n        data_array[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + index * 0x10);\n        current_char = process_data_0010d7d4(input_data,data_array,output_data,&index,&base_value);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = process_data_0010d7d4(input_data,input_string,output_data,&index,&base_value);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)index * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_string = current_string + 1;\n  *input_string = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "current_name": "process_and_parse_data_0010d882",
            "entrypoint": "0x0010d882",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010d882": "process_and_parse_data_0010d882",
                "bVar7": "loop_condition",
                "cVar3": "current_char",
                "iVar1": "iteration_count",
                "lVar4": "allocated_memory",
                "local_40": "data_array",
                "local_44": "count",
                "local_48": "number",
                "local_4c": "base_value",
                "local_50": "index",
                "param_1": "input_data",
                "param_2": "input_string",
                "param_3": "output_data",
                "param_4": "error_flag",
                "pcVar2": "current_string",
                "pcVar5": "current_string",
                "uVar6": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010da0b": {
            "additional_data": {
                "FUN_0010da0b": {
                    "allocate_and_fill_slots": 1,
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_array": 2,
                    "allocate_and_initialize_data": 1,
                    "allocate_and_initialize_memory": 3,
                    "allocate_and_initialize_slot": 5,
                    "allocate_and_initialize_slots": 13,
                    "allocate_memory": 2,
                    "allocate_memory_and_initialize": 1,
                    "allocate_memory_for_slots": 1,
                    "allocate_slot": 1
                },
                "auVar7": {
                    "output": 1,
                    "result": 20,
                    "result_data": 1,
                    "return_val": 2,
                    "return_value": 5,
                    "return_values": 1
                },
                "bVar6": {
                    "byte_var": 2,
                    "counter": 1,
                    "dummy": 1,
                    "flag": 7,
                    "initial_flag": 1,
                    "initialized": 1,
                    "is_first_slot": 1,
                    "is_negative": 1,
                    "loop_flag": 1,
                    "offset_increment": 1,
                    "offset_multiplier": 1,
                    "padding_byte": 1,
                    "temp_byte": 1,
                    "temp_flag": 1,
                    "temp_variable": 2,
                    "temporary_flag": 1,
                    "unused_b_var6": 1,
                    "unused_byte": 1,
                    "unused_flag": 1,
                    "unused_variable": 1,
                    "zero_counter": 1,
                    "zero_flag": 1
                },
                "lVar3": {
                    "adjusted_slot_index": 2,
                    "current_slot_index": 1,
                    "initial_offset": 1,
                    "loop_counter_1": 1,
                    "loop_index1": 1,
                    "offset": 14,
                    "remaining_slots": 1,
                    "slot_offset": 6,
                    "slot_offset1": 1,
                    "start_offset": 2,
                    "start_position": 1
                },
                "lVar4": {
                    "count": 2,
                    "counter": 6,
                    "i": 1,
                    "iteration_count": 1,
                    "loop_counter": 11,
                    "loop_counter_2": 1,
                    "loop_index": 1,
                    "loop_index2": 1,
                    "slot_offset2": 1,
                    "slot_offset_2": 1,
                    "temp": 1,
                    "temp_index": 1,
                    "temp_offset": 1,
                    "temp_var": 1,
                    "unused_l_var4": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 1,
                    "data_pointer": 1,
                    "memory": 1,
                    "memory_list": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "p_memory": 1,
                    "ptr_to_ptr": 1,
                    "slot": 1,
                    "slot_array": 2,
                    "slot_list": 3,
                    "slot_pointer": 8,
                    "slot_pointers": 1,
                    "slot_ptr": 3,
                    "slots": 3,
                    "slots_ptr": 1
                },
                "param_2": {
                    "num_slots": 4,
                    "size": 2,
                    "slot_index": 25
                },
                "param_3": {
                    "arg1": 3,
                    "arg3": 3,
                    "argument_1": 1,
                    "data1": 1,
                    "input1": 1,
                    "param3": 5,
                    "param_3": 5,
                    "unknown_parameter1": 1,
                    "unused1": 1,
                    "unused_arg1": 1,
                    "unused_param": 3,
                    "unused_param1": 1,
                    "unused_param_3": 2,
                    "unused_parameter1": 1,
                    "unused_parameter_1": 1,
                    "value1": 1
                },
                "param_4": {
                    "arg2": 3,
                    "arg4": 3,
                    "argument_2": 1,
                    "data2": 1,
                    "error_message": 1,
                    "initial_value": 1,
                    "input2": 1,
                    "next_slot_pointer": 1,
                    "next_slot_ptr": 1,
                    "param4": 5,
                    "param_4": 4,
                    "some_parameter": 1,
                    "unknown_parameter2": 1,
                    "unused2": 1,
                    "unused_arg2": 1,
                    "unused_param2": 1,
                    "unused_param_4": 1,
                    "unused_parameter2": 1,
                    "unused_parameter_2": 1,
                    "value2": 1
                },
                "plVar2": {
                    "allocated_data": 1,
                    "allocated_memory": 4,
                    "allocated_slot": 2,
                    "current_slot": 1,
                    "memory_pointer": 1,
                    "new_array": 1,
                    "new_memory_ptr": 1,
                    "new_ptr": 1,
                    "new_slot": 16,
                    "slot_pointer2": 1,
                    "slot_ptr_inner": 1,
                    "temp_pointer": 1
                },
                "uVar1": {
                    "err_msg": 1,
                    "error_message": 25,
                    "error_msg": 2,
                    "error_string": 2,
                    "translated_error_message": 1
                },
                "uVar5": {
                    "index": 1,
                    "remaining_size": 2,
                    "remaining_slots": 20,
                    "temp": 1,
                    "temp_index": 4,
                    "temp_var": 2,
                    "updated_slot_index": 1
                }
            },
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_pointer,ulong slot_index,undefined8 param_3,undefined8 param4)\n\n{\n  undefined8 error_message;\n  long *new_slot;\n  long offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_pointer == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_pointer = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_pointer = (long **)*slot_pointer;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*slot_pointer == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_pointer = new_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param4;\n    result._0_8_ = *slot_pointer + slot_index + offset + 1;\n    return result;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_message_and_exit_00119dd0(error_message,slot_index);\n}\n\n",
            "current_name": "allocate_and_initialize_slots_0010da0b",
            "entrypoint": "0x0010da0b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "auVar7": "result",
                "bVar6": "flag",
                "lVar3": "offset",
                "lVar4": "loop_counter",
                "param_1": "slot_pointer",
                "param_2": "slot_index",
                "param_4": "param4",
                "plVar2": "new_slot",
                "uVar1": "error_message",
                "uVar5": "remaining_slots"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010dac0": {
            "additional_data": {
                "FUN_0010dac0": {
                    "parse_and_initialize_coff_type": 1,
                    "parse_and_initialize_memory_block": 3,
                    "parse_coff_type": 17,
                    "parse_coff_type_and_create_memory": 1,
                    "parse_type_and_initialize_memory_block": 1
                },
                "__ptr": {
                    "allocated_memory_1": 1,
                    "block_1": 1,
                    "buffer": 1,
                    "buffer1": 1,
                    "data_ptr": 1,
                    "dynamic_memory_1": 1,
                    "intermediate_array": 1,
                    "local_ptr1": 1,
                    "memory_block_pointer1": 1,
                    "pointer1": 2,
                    "pointer_1": 2,
                    "ptr": 1,
                    "ptr1": 5,
                    "ptr_1": 4,
                    "ptr_temp_1": 1,
                    "ptr_variable": 1,
                    "result_var_8": 1,
                    "symbol_values": 1,
                    "temp_memory_block": 1,
                    "temp_ptr_1": 1,
                    "temp_var7": 1,
                    "temp_void_ptr": 1
                },
                "__ptr_00": {
                    "allocated_memory_2": 1,
                    "block_2": 1,
                    "buffer2": 2,
                    "dynamic_memory_2": 1,
                    "info_ptr": 1,
                    "intermediate_array_2": 1,
                    "local_ptr2": 1,
                    "memory_block_pointer2": 1,
                    "pointer2": 2,
                    "pointer_2": 2,
                    "ptr2": 5,
                    "ptr_2": 5,
                    "ptr_temp_2": 1,
                    "ptr_variable_2": 1,
                    "result_var_9": 1,
                    "symbol_offsets": 1,
                    "temp_memory_block_2": 1,
                    "temp_ptr_2": 1,
                    "temp_var8": 1,
                    "temp_void_ptr_2": 1
                },
                "bVar8": {
                    "bit_value": 4,
                    "bits": 1,
                    "byte_value": 5,
                    "byte_var": 5,
                    "byte_var8": 1,
                    "byte_variable": 2,
                    "flags": 1,
                    "local_var8": 1,
                    "local_var_1": 1,
                    "temp_byte_var": 2,
                    "temp_var9": 1,
                    "temp_var_6": 1,
                    "type_bit_shift": 1,
                    "type_code_byte": 1,
                    "type_code_mask": 1,
                    "type_shift": 2,
                    "variable_8": 1
                },
                "cVar2": {
                    "char_value": 1,
                    "char_var": 3,
                    "check_variable": 1,
                    "coff_get_syment_result": 1,
                    "error": 1,
                    "flag": 1,
                    "local_var2": 1,
                    "local_variable2": 1,
                    "result": 3,
                    "result_status": 1,
                    "result_var_2": 1,
                    "status": 2,
                    "success": 3,
                    "temp_2": 1,
                    "temp_char_var": 2,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "var2": 2,
                    "variable_2": 1
                },
                "dcgettext": {
                    "get_text": 1
                },
                "iVar9": {
                    "count": 2,
                    "counter": 1,
                    "index": 6,
                    "index_variable": 1,
                    "int_var": 5,
                    "int_var9": 1,
                    "integer_variable": 1,
                    "iteration": 2,
                    "iterator": 1,
                    "local_var9": 1,
                    "local_var_2": 1,
                    "loop_counter": 4,
                    "temp_int_var": 2,
                    "temp_var10": 1,
                    "temp_var_7": 1,
                    "variable_9": 1
                },
                "initialize_or_get_memory_block_00113d3a": {
                    "init_or_get_mem_block": 1
                },
                "lVar1": {
                    "current_entry": 1,
                    "elem": 1,
                    "header_symbol": 1,
                    "length": 1,
                    "local_var1": 1,
                    "local_variable1": 1,
                    "memory_block": 1,
                    "result": 6,
                    "result_var_1": 1,
                    "result_variable": 1,
                    "return_value": 1,
                    "symbol": 1,
                    "symbol_entry": 1,
                    "symbol_record": 1,
                    "symbol_table_entry_size": 1,
                    "syment_addr": 1,
                    "temp": 1,
                    "temp_1": 1,
                    "temp_long_var": 2,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "var1": 2,
                    "variable_1": 1
                },
                "lVar12": {
                    "counter": 1,
                    "i": 1,
                    "index": 6,
                    "iteration_count": 1,
                    "local_var12": 1,
                    "local_var_5": 1,
                    "local_variable12": 1,
                    "long_value": 1,
                    "long_var": 2,
                    "loop_counter": 2,
                    "loop_counter_2": 1,
                    "loop_index": 1,
                    "loop_result": 1,
                    "loop_var": 1,
                    "loop_variable": 1,
                    "result_3": 1,
                    "temp_long_var_2": 1,
                    "temp_long_var_3": 1,
                    "temp_var13": 1,
                    "temp_var6": 1,
                    "temp_var_9": 1,
                    "type_index": 1,
                    "var12": 1,
                    "variable_12": 1
                },
                "lVar5": {
                    "block": 1,
                    "local_var5": 1,
                    "local_variable5": 1,
                    "memory_block": 10,
                    "memory_block_result": 1,
                    "new_memory_block": 2,
                    "output_var": 1,
                    "output_variable": 1,
                    "result": 7,
                    "result_2": 1,
                    "result_var": 1,
                    "result_var_5": 1,
                    "temp_var4": 1,
                    "var5": 1,
                    "variable_5": 1
                },
                "local_47": {
                    "byte_code": 1,
                    "byte_result": 1,
                    "byte_value": 5,
                    "local_47": 1,
                    "local_byte": 13,
                    "local_byte1": 2,
                    "local_byte_1": 1,
                    "local_var2": 1,
                    "local_var_10": 1,
                    "symbol_size": 1,
                    "temp_byte_var_2": 2,
                    "type_len": 1
                },
                "local_48": {
                    "byte_flag": 1,
                    "char_code": 1,
                    "char_value": 2,
                    "flag": 1,
                    "is_float": 1,
                    "is_null": 1,
                    "local_48": 1,
                    "local_char": 13,
                    "local_char1": 2,
                    "local_char_1": 1,
                    "local_var1": 1,
                    "local_var_9": 1,
                    "symbol_type": 1,
                    "temp_char_var_2": 2,
                    "type_code": 1
                },
                "local_68": {
                    "buffer": 5,
                    "data_buffer": 1,
                    "local_arr": 1,
                    "local_array": 4,
                    "local_array1": 3,
                    "local_array_1": 3,
                    "local_buffer": 10,
                    "temp_buffer": 1,
                    "temp_undefined_array": 1,
                    "temp_undefined_array_var": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 2,
                    "binary": 7,
                    "binary_address": 1,
                    "binary_data": 4,
                    "binary_file": 1,
                    "binary_handle": 1,
                    "coff_struct": 1,
                    "context": 1,
                    "input": 1,
                    "input1": 1,
                    "input_binary": 1,
                    "input_data": 1,
                    "input_param": 5,
                    "input_param_1": 1,
                    "source": 1
                },
                "param_2": {
                    "arg2": 2,
                    "binary_data": 1,
                    "coff_data": 1,
                    "coff_header": 5,
                    "coff_symbols": 2,
                    "coff_table": 1,
                    "data_array": 1,
                    "data_param": 1,
                    "destination": 1,
                    "input2": 1,
                    "input_array": 3,
                    "input_param_2": 1,
                    "input_params": 1,
                    "memory_block": 1,
                    "param_array": 1,
                    "pointer": 1,
                    "pointer_list": 1,
                    "ptr_to_symbols": 1,
                    "symbol_table": 4
                },
                "param_3": {
                    "arg3": 2,
                    "coff_context": 1,
                    "coff_file": 1,
                    "context": 1,
                    "context_address": 1,
                    "input3": 1,
                    "input_param_3": 1,
                    "memory": 3,
                    "memory_block": 3,
                    "memory_manager": 1,
                    "memory_param": 3,
                    "output_param": 2,
                    "param_struct": 1,
                    "ptr_to_data": 1,
                    "symbol_table": 4,
                    "type_data": 1,
                    "type_info": 2,
                    "type_table": 1
                },
                "param_4": {
                    "arg4": 2,
                    "config_param": 3,
                    "extra_arg": 1,
                    "format": 1,
                    "input4": 1,
                    "input_param_2": 1,
                    "input_param_4": 1,
                    "option": 1,
                    "param_4": 7,
                    "param_input": 1,
                    "parameter_4": 1,
                    "section_header": 1,
                    "type_code": 1,
                    "type_description": 1,
                    "type_information": 2,
                    "type_name": 1,
                    "type_strings": 1,
                    "undefined_param": 1,
                    "undefined_value": 1,
                    "value": 1
                },
                "param_5": {
                    "arg5": 1,
                    "code_param": 1,
                    "flag_param": 1,
                    "flags": 2,
                    "input5": 1,
                    "input_param_5": 1,
                    "type_code": 22,
                    "type_param": 1
                },
                "param_6": {
                    "additional_info": 1,
                    "arg6": 1,
                    "array_param": 2,
                    "data_pointer": 1,
                    "extra_data": 1,
                    "info": 1,
                    "input6": 1,
                    "input_param_6": 1,
                    "param_6": 1,
                    "ptr_to_info": 1,
                    "section_header": 1,
                    "string_param": 1,
                    "string_table": 1,
                    "symbol_details": 1,
                    "symbol_info": 1,
                    "symbol_name": 1,
                    "symbol_table": 3,
                    "symbol_table_entry": 1,
                    "symbols": 2,
                    "type_array": 2,
                    "type_aux_data": 1,
                    "type_info": 2,
                    "type_name": 1,
                    "type_names": 1
                },
                "param_7": {
                    "allocate_memory": 4,
                    "arg7": 1,
                    "char_param": 1,
                    "extract_symbols_flag": 1,
                    "flag": 9,
                    "flag_param": 4,
                    "initialize": 1,
                    "input7": 1,
                    "input_param_7": 1,
                    "is_allocation": 1,
                    "is_binary": 1,
                    "is_optional": 1,
                    "is_reverse": 1,
                    "is_unsigned": 1,
                    "param_7": 2
                },
                "param_8": {
                    "arg8": 1,
                    "dcgettext_domain": 1,
                    "error_message": 7,
                    "info": 1,
                    "info_param": 3,
                    "input8": 1,
                    "input_param_3": 1,
                    "input_param_8": 1,
                    "locale": 2,
                    "message": 1,
                    "param_8": 5,
                    "param_info": 1,
                    "param_message": 1,
                    "parameter_8": 1,
                    "source_file": 1,
                    "string_param": 1,
                    "type_signature": 1
                },
                "pcVar10": {
                    "char_ptr": 2,
                    "char_var": 1,
                    "character_pointer": 1,
                    "local_var10": 1,
                    "local_var_3": 1,
                    "str_var": 1,
                    "str_var10": 1,
                    "string_pointer": 1,
                    "string_var": 1,
                    "string_variable": 1,
                    "temp_char_array_var": 1,
                    "temp_char_ptr_var": 1,
                    "temp_str_var": 1,
                    "temp_var11": 1,
                    "type": 2,
                    "type_name": 10,
                    "type_string": 3,
                    "variable_10": 1
                },
                "plVar7": {
                    "allocated_memory_block": 1,
                    "local_var7": 1,
                    "memory_address": 1,
                    "memory_block_ptr": 1,
                    "param_array_ptr": 1,
                    "pointer": 4,
                    "pointer_array": 1,
                    "pointer_list_2": 1,
                    "pointer_var": 2,
                    "pointer_variable": 1,
                    "ptr": 2,
                    "ptr_temp": 1,
                    "ptr_var": 1,
                    "ptr_var7": 1,
                    "ptr_variable": 1,
                    "result_var_7": 1,
                    "slot_pointer": 1,
                    "slots": 2,
                    "temp_array": 1,
                    "temp_long_array_var": 1,
                    "temp_var6": 1,
                    "type_array_ptr": 1,
                    "var7": 1,
                    "var_ptr": 1,
                    "variable_7": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_msg": 1
                },
                "uVar11": {
                    "bit_mask": 5,
                    "count_mask": 1,
                    "flag_mask": 1,
                    "local_var11": 1,
                    "local_var_4": 1,
                    "mask": 1,
                    "mask_value": 1,
                    "masked_type_code": 1,
                    "param_5_mask": 1,
                    "shifted_type_code": 1,
                    "temp_ulong_var": 2,
                    "temp_var12": 1,
                    "temp_var_8": 1,
                    "type_code_masked": 1,
                    "type_mask": 2,
                    "ulong_value": 1,
                    "ulong_var": 5,
                    "ulong_var11": 1,
                    "ulong_variable": 1,
                    "unsigned_variable": 1,
                    "variable_11": 1
                },
                "uVar13": {
                    "first_uint": 1,
                    "flag_variable": 1,
                    "local_var13": 1,
                    "local_var_6": 1,
                    "masked_type_code": 1,
                    "new_type_code": 1,
                    "shift": 1,
                    "shifted_code": 1,
                    "shifted_flags": 2,
                    "shifted_type_code": 3,
                    "temp1": 1,
                    "temp_uint_var": 1,
                    "temp_uint_var_2": 1,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var1": 2,
                    "temp_var14": 1,
                    "temp_var7": 1,
                    "temp_var_10": 1,
                    "type_code_shifted": 1,
                    "type_modified": 1,
                    "u_var_temp1": 1,
                    "uint_var": 1,
                    "unsigned_variable2": 1,
                    "var13": 2,
                    "variable_13": 1
                },
                "uVar14": {
                    "count": 2,
                    "flag_variable_2": 1,
                    "local_var14": 1,
                    "local_var_7": 1,
                    "new_value": 1,
                    "second_uint": 1,
                    "subcount": 1,
                    "temp2": 1,
                    "temp_uint_var_2": 1,
                    "temp_uint_var_3": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var15": 1,
                    "temp_var2": 2,
                    "temp_var8": 1,
                    "temp_var_11": 1,
                    "type_array_len": 1,
                    "u_var14": 1,
                    "u_var_temp2": 1,
                    "uint_var_2": 1,
                    "unsigned_variable3": 1,
                    "ushort_value": 4,
                    "var14": 2,
                    "variable_14": 1
                },
                "uVar15": {
                    "float_value": 2,
                    "initial_value": 1,
                    "local_var15": 1,
                    "local_var_8": 1,
                    "size": 2,
                    "temp3": 1,
                    "temp_ulong_var_2": 1,
                    "temp_undefined_var": 1,
                    "temp_value3": 1,
                    "temp_var16": 1,
                    "temp_var3": 2,
                    "temp_var9": 1,
                    "temp_var_12": 1,
                    "third_uint": 1,
                    "type_info": 1,
                    "type_information": 1,
                    "u_var15": 3,
                    "u_var_temp3": 1,
                    "ulong_value": 1,
                    "undefined_var_4": 1,
                    "undefined_variable": 1,
                    "unsigned_variable4": 1,
                    "value": 1,
                    "var15": 2,
                    "variable_15": 1
                },
                "uVar3": {
                    "bfd_error": 1,
                    "bfd_error_code": 1,
                    "error": 1,
                    "error_code": 10,
                    "error_variable": 1,
                    "local_var3": 1,
                    "local_variable3": 1,
                    "result": 2,
                    "result_var_3": 1,
                    "temp_3": 1,
                    "temp_uint_var": 1,
                    "temp_undefined4_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "undefined_var": 1,
                    "var3": 2,
                    "variable_3": 1
                },
                "uVar4": {
                    "error_message": 2,
                    "local_var4": 1,
                    "local_variable4": 1,
                    "res": 2,
                    "result": 8,
                    "result_handle": 1,
                    "result_var_4": 1,
                    "return_value": 1,
                    "return_var": 1,
                    "temp_4": 1,
                    "temp_result": 1,
                    "temp_undefined8_var": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "temp_variable": 1,
                    "temporary_variable": 1,
                    "undefined_var_2": 1,
                    "var4": 3,
                    "variable_4": 1
                },
                "uVar6": {
                    "dcgettext_result": 1,
                    "error_msg_arg": 1,
                    "local_var6": 1,
                    "local_variable6": 1,
                    "memory_block": 1,
                    "memory_variable": 1,
                    "param_6": 1,
                    "param_8_copy": 1,
                    "res_2": 1,
                    "result": 2,
                    "result_memory": 1,
                    "result_new_block": 1,
                    "result_var_6": 1,
                    "sub_result": 1,
                    "temp_6": 1,
                    "temp_long_var_2": 1,
                    "temp_result": 1,
                    "temp_undefined8_var_2": 1,
                    "temp_var5": 2,
                    "temp_var_5": 1,
                    "temporary_value": 2,
                    "undefined_var_3": 1,
                    "value": 1,
                    "var6": 3,
                    "var_6": 1,
                    "variable_6": 1
                }
            },
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "xmalloc",
                "xrealloc",
                "FUN_00113df2",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_00113dfe",
                "FUN_0010dac0",
                "FUN_00113d3a",
                "FUN_00113c43",
                "free",
                "FUN_00113ce0",
                "FUN_00113da9",
                "FUN_0010c218",
                "FUN_00113e17",
                "FUN_00113d6e",
                "dcgettext",
                "bfd_get_error",
                "FUN_00113e23"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "code": "\nlong parse_coff_type_and_create_memory_0010dac0(long binary,long *coff_header,long symbol_table,undefined8 param_4,uint type_code,\n                 long *symbol_table,char flag,undefined8 error_message)\n\n{\n  long result;\n  char result;\n  undefined4 error_code;\n  undefined8 result;\n  long memory_block;\n  undefined8 var6;\n  long *pointer;\n  void *ptr1;\n  void *ptr2;\n  byte byte_value;\n  int index;\n  char *type_name;\n  ulong bit_mask;\n  long index;\n  uint shifted_type_code;\n  uint ushort_value;\n  undefined8 u_var15;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  memory_block = *(long *)(binary + 0x110);\n  if ((~*(uint *)(memory_block + 0x38) & type_code) != 0) {\n    shifted_type_code = (int)type_code >> ((byte)*(undefined4 *)(memory_block + 0x44) & 0x1f);\n    bit_mask = (ulong)(type_code & *(uint *)(memory_block + 0x40));\n    byte_value = (byte)*(undefined4 *)(memory_block + 0x3c);\n    shifted_type_code = (shifted_type_code ^ type_code) & *(uint *)(memory_block + 0x38) ^ shifted_type_code;\n    if (bit_mask == 1L << (byte_value & 0x3f)) {\n      result = parse_coff_type_and_create_memory_0010dac0(binary,coff_header,symbol_table,param_4,shifted_type_code,symbol_table,flag,error_message);\n      memory_block = init_or_get_mem_block(result);\n      return memory_block;\n    }\n    if (bit_mask != 2L << (byte_value & 0x3f)) {\n      if (bit_mask != 3L << (byte_value & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(memory_block + 0x3c),\n                          shifted_type_code);\n        print_error_msg(result,type_code);\n        return 0;\n      }\n      ushort_value = 0;\n      if (symbol_table != (long *)0x0) {\n        ushort_value = (uint)*(ushort *)(symbol_table + 2);\n        pointer = symbol_table + 2;\n        for (index = 0; (*(short *)pointer != 0 && (index != 3)); index = index + 1) {\n          *(short *)pointer = *(short *)((long)pointer + 2);\n          pointer = (long *)((long)pointer + 2);\n        }\n        *(short *)pointer = 0;\n      }\n      u_var15 = 0;\n      result = error_message;\n      var6 = parse_coff_type_and_create_memory_0010dac0(binary,coff_header,symbol_table,param_4,shifted_type_code,symbol_table,0);\n      memory_block = *(long *)(symbol_table + 0x28);\n      if (memory_block == 0) {\n        result = initialize_memory_block_00113dfe(4,0,u_var15,result);\n        memory_block = initialize_memory_block_with_type_information_0010c218(error_message,\"int\",result);\n        *(long *)(symbol_table + 0x28) = memory_block;\n      }\n      memory_block = allocate_and_initialize_memory_block_00113c43(var6,memory_block,0,(long)(int)(ushort_value - 1),0);\n      return memory_block;\n    }\n    result = parse_coff_type_and_create_memory_0010dac0(binary,coff_header,symbol_table,param_4,shifted_type_code,symbol_table,flag,error_message);\n    memory_block = initialize_memory_block_00113ce0(result,0,0);\n    return memory_block;\n  }\n  if ((symbol_table != (long *)0x0) && (0 < *symbol_table)) {\n    pointer = (long *)allocate_and_initialize_slots_0010da0b(symbol_table);\n    if (*pointer != 0) {\n      return *pointer;\n    }\n    memory_block = initialize_and_assign_memory_block_00113e23(pointer,0);\n    return memory_block;\n  }\n  if (flag == '\\0') {\n    symbol_table = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    memory_block = initialize_and_return_memory_block_00113e17();\n    return memory_block;\n  }\n  memory_block = *(long *)(symbol_table + 8 + (long)(int)type_code * 8);\n  if (memory_block != 0) {\n    return memory_block;\n  }\n  switch(type_code) {\n  default:\n    result = initialize_and_return_memory_block_00113e17();\n    type_name = \"void\";\n    break;\n  case 2:\n    result = initialize_memory_block_00113dfe(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    result = initialize_memory_block_00113dfe(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    result = initialize_memory_block_00113dfe(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    result = initialize_memory_block_00113dfe(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    result = initialize_memory_block_00113df2(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    result = initialize_memory_block_00113df2(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (symbol_table == (long *)0x0) {\n      memory_block = initialize_and_allocate_memory_block_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (symbol_table == (long *)0x0) {\n      memory_block = initialize_and_allocate_memory_block_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    memory_block = extract_symbols_from_binary_0010e07c(binary,coff_header,symbol_table,result,symbol_table,error_message);\nLAB_0010e046:\n    pointer = (long *)allocate_and_initialize_slots_0010da0b(symbol_table,param_4);\n    *pointer = memory_block;\n    return memory_block;\n  case 10:\n    if (symbol_table == (long *)0x0) {\n      memory_block = initialize_and_allocate_memory_block_00113d6e(0,0);\n    }\n    else {\n      memory_block = symbol_table[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      index = 0;\n      do {\n        while( true ) {\n          if ((memory_block <= coff_header[3]) || (coff_header[1] <= coff_header[2])) goto LAB_0010e032;\n          index = (int)index;\n          result = *(long *)(*coff_header + coff_header[2] * 8);\n          result = bfd_coff_get_syment(binary,result,local_buffer);\n          index = (long)index;\n          if (result == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_msg(var6,result);\n            free(ptr1);\n            free(ptr2);\n            memory_block = 0;\n            goto LAB_0010e046;\n          }\n          coff_header[2] = coff_header[2] + 1;\n          coff_header[3] = (ulong)local_byte + 1 + coff_header[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= index + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          index = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)index * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)index * 8) =\n               *(long *)(result + 0x10) + *(long *)(index + 0x30);\n          index = (long)(index + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + index * 8) = 0;\n      memory_block = initialize_and_allocate_memory_block_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    memory_block = initialize_and_return_memory_block_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = initialize_memory_block_00113dfe(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    result = initialize_memory_block_00113dfe(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    result = initialize_memory_block_00113dfe(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    result = initialize_memory_block_00113dfe(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    result = initialize_memory_block_00113df2(0xc);\n    type_name = \"long double\";\n  }\n  memory_block = initialize_memory_block_with_type_information_0010c218(error_message,type_name,result);\nLAB_0010e065:\n  *(long *)(symbol_table + 8 + (long)(int)type_code * 8) = memory_block;\n  return memory_block;\n}\n\n",
            "current_name": "parse_coff_type_and_create_memory_0010dac0",
            "entrypoint": "0x0010dac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_and_create_memory_0010dac0",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byte_value",
                "cVar2": "result",
                "dcgettext": "get_text",
                "iVar9": "index",
                "initialize_or_get_memory_block_00113d3a": "init_or_get_mem_block",
                "lVar1": "result",
                "lVar12": "index",
                "lVar5": "memory_block",
                "local_47": "local_byte",
                "local_48": "local_char",
                "local_68": "local_buffer",
                "param_1": "binary",
                "param_2": "coff_header",
                "param_3": "symbol_table",
                "param_5": "type_code",
                "param_6": "symbol_table",
                "param_7": "flag",
                "param_8": "error_message",
                "pcVar10": "type_name",
                "plVar7": "pointer",
                "print_error_message_with_params_00119ed0": "print_error_msg",
                "uVar11": "bit_mask",
                "uVar13": "shifted_type_code",
                "uVar14": "ushort_value",
                "uVar15": "u_var15",
                "uVar3": "error_code",
                "uVar4": "result",
                "uVar6": "var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e07c": {
            "additional_data": {
                "FUN_0010e07c": {
                    "extract_symbol_table_from_binary": 1,
                    "extract_symbols": 3,
                    "extract_symbols_from_binary": 2,
                    "extract_syment_data": 1,
                    "parse_coff_symbols": 1,
                    "process_binary": 1,
                    "process_binary_data": 1,
                    "process_binary_function": 1,
                    "reverse_and_allocate_memory": 1
                },
                "__ptr": {
                    "allocated_memory": 8,
                    "allocated_ptr": 2,
                    "buffer": 1,
                    "dynamic_array": 2,
                    "dynamic_array_pointer": 1,
                    "dynamic_memory": 1,
                    "memory_block": 2,
                    "memory_ptr": 1,
                    "new_array": 1,
                    "ptr_variable": 1,
                    "symbol_data": 1,
                    "symbol_data_array": 2,
                    "symbol_entries": 1,
                    "symbol_info": 1,
                    "symbol_info_array": 2,
                    "symbol_list": 2,
                    "symbol_table_ptr": 1
                },
                "cVar4": {
                    "bfd_result": 1,
                    "char_value": 1,
                    "char_var": 2,
                    "char_variable": 2,
                    "character": 1,
                    "check_value": 1,
                    "coff_status": 1,
                    "error": 1,
                    "error_char": 1,
                    "result": 14,
                    "result_code": 1,
                    "status": 1,
                    "symbol_check_result": 1,
                    "symbol_status": 1,
                    "var4": 1,
                    "var_result": 1
                },
                "iVar13": {
                    "aux_entry_offset_calculated": 1,
                    "calculation": 1,
                    "calculation1": 1,
                    "calculation_result": 1,
                    "idx2": 1,
                    "info_sum": 1,
                    "int_value1": 2,
                    "int_var1": 1,
                    "int_variable_1": 1,
                    "integer_value": 1,
                    "integer_variable": 1,
                    "offset": 3,
                    "offset1": 1,
                    "offset_calculated": 1,
                    "symbol_offset": 2,
                    "symbol_size": 2,
                    "symbol_value": 3,
                    "value1": 1,
                    "value_1": 1,
                    "value_2": 2,
                    "var13": 1,
                    "var_offset": 1,
                    "variable1": 1
                },
                "iVar14": {
                    "allocation_size": 1,
                    "array_size": 4,
                    "buffer_size": 1,
                    "capacity": 1,
                    "initial_capacity": 1,
                    "initial_size": 1,
                    "int_value2": 1,
                    "int_var2": 1,
                    "int_variable_2": 1,
                    "integer_variable2": 1,
                    "iteration_var": 1,
                    "limit": 1,
                    "loop_counter": 1,
                    "max_symbols": 1,
                    "memory_size": 1,
                    "size": 3,
                    "symbol_array_size": 2,
                    "symbol_capacity": 2,
                    "symbol_data_array_size": 1,
                    "symbol_info_array_size": 1,
                    "symbol_list_capacity": 1,
                    "var1": 1,
                    "var_limit": 1,
                    "variable2": 1
                },
                "lVar1": {
                    "coff_section_offset": 1,
                    "data_length": 2,
                    "data_size": 1,
                    "file_size": 1,
                    "header_offset": 1,
                    "length": 1,
                    "length_var1": 1,
                    "long_value1": 1,
                    "long_variable_1": 1,
                    "loop_index1": 1,
                    "num_of_symbols": 1,
                    "num_symbols": 1,
                    "size": 2,
                    "source_pointer": 1,
                    "symbol_table_address": 3,
                    "symbol_table_end": 1,
                    "symbol_table_entry": 1,
                    "symbol_table_entry_ptr": 1,
                    "symbol_table_length": 1,
                    "symbol_table_offset": 1,
                    "symbol_table_size": 2,
                    "symbol_table_size_2": 1,
                    "var1": 2,
                    "var_size": 1,
                    "variable1": 1
                },
                "lVar12": {
                    "counter": 3,
                    "entry_count": 1,
                    "entry_index": 1,
                    "idx1": 1,
                    "index": 7,
                    "long_value4": 1,
                    "long_variable_4": 1,
                    "loop_counter": 1,
                    "loop_index3": 1,
                    "loop_var": 1,
                    "num_entries": 1,
                    "num_symbols": 1,
                    "record_index": 1,
                    "symbol_count": 2,
                    "symbol_index": 5,
                    "var12": 1,
                    "var_index": 1,
                    "variable12": 1
                },
                "lVar2": {
                    "address": 1,
                    "current_data": 2,
                    "element": 2,
                    "length_var2": 1,
                    "long_value2": 1,
                    "long_variable_2": 1,
                    "pointer1": 1,
                    "symbol": 1,
                    "symbol_address": 8,
                    "symbol_entry": 2,
                    "symbol_entry_offset": 1,
                    "symbol_offset": 2,
                    "symbol_pointer": 1,
                    "symbol_table_entry": 3,
                    "var2": 2,
                    "var_address": 1,
                    "variable2": 1
                },
                "lVar3": {
                    "count": 3,
                    "counter": 2,
                    "current_address": 1,
                    "current_position": 1,
                    "current_symbol_index": 1,
                    "data_count": 1,
                    "index": 1,
                    "length_var3": 1,
                    "long_value3": 1,
                    "long_variable_3": 1,
                    "loop_index2": 1,
                    "num_symbols": 1,
                    "record_count": 1,
                    "symbol_count": 5,
                    "symbol_index": 3,
                    "symbol_table_entry_count": 1,
                    "total_data": 1,
                    "total_symbols": 1,
                    "var3": 2,
                    "var_count": 1,
                    "variable3": 1
                },
                "local_56": {
                    "additional_info": 1,
                    "aux_info_value_1": 1,
                    "aux_offset": 1,
                    "auxent_info": 1,
                    "entry_size": 1,
                    "info9": 1,
                    "local_short": 1,
                    "local_ushort": 2,
                    "local_value_4": 1,
                    "local_value_56": 1,
                    "local_var6": 1,
                    "local_var_56": 3,
                    "local_variable5": 2,
                    "section_index": 2,
                    "short_value": 1,
                    "symbol_alignment": 1,
                    "symbol_section": 1,
                    "symbol_section_number": 1,
                    "type3": 1,
                    "ushort_value": 1,
                    "value8": 1,
                    "value_2": 1,
                    "value_3": 1,
                    "value_8": 1,
                    "var_local_56": 1,
                    "yet_another_constant": 1
                },
                "local_60": {
                    "another_buffer": 1,
                    "aux_buffer": 1,
                    "aux_data": 2,
                    "aux_data_buffer": 4,
                    "aux_info_buffer": 1,
                    "aux_info_data": 1,
                    "auxent_buffer": 1,
                    "auxiliary_data_buffer": 1,
                    "buffer": 2,
                    "byte_array": 1,
                    "local_array": 1,
                    "local_array2": 1,
                    "local_array3": 1,
                    "local_array_2": 1,
                    "local_array_60": 2,
                    "local_buffer2": 1,
                    "local_data2": 1,
                    "local_data_2": 1,
                    "local_string2": 1,
                    "local_var5": 1,
                    "local_variable4": 1,
                    "string2": 1,
                    "symbol_name": 1,
                    "type_buffer": 1,
                    "var_aux_string": 1
                },
                "local_67": {
                    "another_constant": 1,
                    "aux_data_present": 1,
                    "aux_data_size": 2,
                    "aux_info_length": 1,
                    "aux_present": 1,
                    "auxent_length": 1,
                    "byte2": 1,
                    "byte_2": 1,
                    "char_2": 1,
                    "count_2": 1,
                    "flag_1": 1,
                    "has_aux_data": 1,
                    "info8": 1,
                    "local_byte2": 2,
                    "local_byte_2": 1,
                    "local_char_2": 1,
                    "local_value_67": 1,
                    "local_var4": 1,
                    "local_var_67": 3,
                    "local_variable3": 1,
                    "local_variable7": 1,
                    "symbol_aux_entries": 1,
                    "symbol_auxiliary_data_size": 1,
                    "symbol_has_aux_data": 1,
                    "type2": 1,
                    "value7": 1,
                    "var_aux_flag": 1
                },
                "local_68": {
                    "aux_data_type": 2,
                    "aux_info_flag": 1,
                    "auxent_type": 1,
                    "byte1": 1,
                    "byte_1": 1,
                    "char_1": 1,
                    "constant_value": 1,
                    "info7": 1,
                    "local_1": 1,
                    "local_byte1": 2,
                    "local_byte_1": 1,
                    "local_value_3": 1,
                    "local_value_68": 1,
                    "local_var3": 1,
                    "local_var_68": 3,
                    "local_variable2": 1,
                    "local_variable6": 1,
                    "symbol_class": 2,
                    "symbol_storage_class": 1,
                    "symbol_type": 3,
                    "type": 1,
                    "type1": 1,
                    "value6": 1,
                    "var_aux_subtype": 1
                },
                "local_6a": {
                    "aux_type": 1,
                    "data_type_value": 1,
                    "flag": 1,
                    "info6": 1,
                    "local_2": 1,
                    "local_5": 1,
                    "local_array2": 1,
                    "local_value1": 1,
                    "local_value5": 1,
                    "local_value_2": 1,
                    "local_value_6a": 1,
                    "local_var": 1,
                    "local_var2": 1,
                    "local_var_6a": 3,
                    "local_variable1": 1,
                    "local_variable5": 1,
                    "local_variable_5": 1,
                    "name_length": 1,
                    "some_argument": 1,
                    "symbol_flag": 2,
                    "symbol_type": 5,
                    "value5": 1,
                    "value_7": 1,
                    "var_aux_type": 1
                },
                "local_88": {
                    "aux_buffer": 2,
                    "auxiliary_data_buffer": 1,
                    "buffer": 3,
                    "info5": 1,
                    "local_array1": 2,
                    "local_array_1": 1,
                    "local_array_88": 1,
                    "local_buffer": 2,
                    "local_data": 1,
                    "local_string1": 1,
                    "local_var1": 1,
                    "string1": 1,
                    "symbol_buffer": 1,
                    "symbol_data_buffer": 1,
                    "symbol_entry_buffer": 2,
                    "symbol_info": 1,
                    "symbol_name": 3,
                    "symbol_name_buffer": 2,
                    "syment_buffer": 1,
                    "var_aux_data": 1
                },
                "local_a8": {
                    "data1": 1,
                    "info1": 1,
                    "local_4": 2,
                    "local_value1": 2,
                    "local_value_1": 1,
                    "local_value_a8": 1,
                    "local_var1": 1,
                    "local_var_a8": 3,
                    "local_variable1": 2,
                    "local_variable_1": 1,
                    "new_symbol_value": 1,
                    "param_8": 1,
                    "symbol_address": 1,
                    "symbol_data1": 1,
                    "symbol_info_hash1": 1,
                    "symbol_undef": 1,
                    "symbol_value": 2,
                    "symbol_value1": 1,
                    "symbol_value3": 1,
                    "symbol_value_1": 1,
                    "temp_var1": 1,
                    "temp_variable_3": 1,
                    "value1": 1,
                    "value_3": 1,
                    "var_local_a8": 1
                },
                "param_1": {
                    "arg1": 1,
                    "bfd_coff_file": 1,
                    "bfd_handle": 1,
                    "binary_file": 2,
                    "binary_handle": 2,
                    "file_descriptor": 1,
                    "file_handle": 3,
                    "file_handler": 1,
                    "input_param": 5,
                    "original_param": 1,
                    "param": 1,
                    "param1": 3,
                    "param_1": 6,
                    "param_a": 1,
                    "param_pointer": 2
                },
                "param_2": {
                    "address_array": 1,
                    "arg2": 1,
                    "array": 1,
                    "array_param": 2,
                    "array_pointer": 1,
                    "binary_data": 1,
                    "buffer_params": 1,
                    "coff_symbols": 1,
                    "data_array": 3,
                    "input_array": 2,
                    "long_array": 1,
                    "param2": 2,
                    "param_b": 1,
                    "ptr_array": 1,
                    "record_list": 1,
                    "symbol_info": 1,
                    "symbol_table": 10
                },
                "param_3": {
                    "arg3": 1,
                    "aux_info": 1,
                    "auxiliary_data": 1,
                    "output_file": 2,
                    "output_param": 2,
                    "param3": 4,
                    "param_3": 9,
                    "param_c": 1,
                    "param_size": 3,
                    "param_value": 2,
                    "param_variable": 1,
                    "parameter_3": 1,
                    "section_table": 3
                },
                "param_4": {
                    "arg4": 1,
                    "condition": 1,
                    "file_format": 1,
                    "flag": 3,
                    "flag_param": 1,
                    "format": 1,
                    "input_param_size": 1,
                    "int_variable": 1,
                    "mode": 1,
                    "num_sections": 1,
                    "option": 1,
                    "param4": 4,
                    "param_4": 7,
                    "param_d": 1,
                    "param_size": 1,
                    "param_value": 1,
                    "section_count": 1,
                    "size": 1,
                    "size_of_symbol_table": 1,
                    "size_param": 1
                },
                "param_5": {
                    "arg5": 1,
                    "binary_header": 3,
                    "coff_header": 3,
                    "data": 1,
                    "data_param": 1,
                    "file_header": 2,
                    "header": 1,
                    "header_offset": 1,
                    "long_variable": 1,
                    "offset": 2,
                    "offset_param": 1,
                    "param5": 4,
                    "param_5": 6,
                    "param_e": 1,
                    "param_offset": 1,
                    "ptr_param": 1,
                    "symbol_table_size": 1
                },
                "param_6": {
                    "additional_param": 1,
                    "another_param_variable": 1,
                    "arg6": 1,
                    "custom_variable": 1,
                    "error_message": 1,
                    "error_msg_buf": 1,
                    "extra_param": 2,
                    "input_param2": 1,
                    "memory": 1,
                    "memory_allocation_mode": 1,
                    "memory_limit": 1,
                    "param6": 4,
                    "param_6": 10,
                    "param_argument": 1,
                    "param_f": 1,
                    "param_offset": 1,
                    "parameter_6": 1,
                    "size_param": 1
                },
                "pcVar9": {
                    "char_pointer": 1,
                    "err_message": 1,
                    "err_msg_var": 1,
                    "error_fmt": 1,
                    "error_format": 5,
                    "error_format_string": 2,
                    "error_message": 11,
                    "error_message_format": 2,
                    "error_msg": 1,
                    "error_msg_format": 1,
                    "error_str": 1,
                    "format_string": 1,
                    "print_message": 1,
                    "string_variable": 1,
                    "var_string": 1
                },
                "puVar10": {
                    "additional_data": 1,
                    "aux_data": 7,
                    "aux_entry": 2,
                    "aux_info": 2,
                    "aux_info_ptr": 1,
                    "aux_struct_ptr": 1,
                    "auxent_buffer": 1,
                    "auxent_data": 1,
                    "auxent_var": 1,
                    "auxiliary_data": 6,
                    "auxiliary_data_buffer": 1,
                    "auxiliary_data_ptr": 1,
                    "auxiliary_info": 3,
                    "ptr_data": 1,
                    "ptr_variable2": 1,
                    "undefined_variable_3": 1
                },
                "puVar8": {
                    "allocated_array": 1,
                    "allocated_memory": 3,
                    "allocated_struct": 2,
                    "allocated_structure": 1,
                    "aux_buffer": 1,
                    "dyn_alloc_var": 1,
                    "new_allocated_memory": 1,
                    "new_data": 1,
                    "new_entry": 1,
                    "new_memory_block": 1,
                    "new_object": 1,
                    "new_symbol_entry": 1,
                    "new_symbol_info": 1,
                    "new_variable": 1,
                    "pointer_variable": 2,
                    "ptr_array": 1,
                    "ptr_to_allocated_memory": 1,
                    "record_pointer": 1,
                    "symbol_entry": 3,
                    "symbol_entry_ptr": 1,
                    "symbol_info": 3,
                    "symbol_info_ptr": 2
                },
                "uStack_9c": {
                    "data4": 1,
                    "data_value2": 1,
                    "entry_value_upper": 1,
                    "error_code_2": 1,
                    "info4": 1,
                    "local_1": 1,
                    "local_value4": 2,
                    "local_value_9c": 1,
                    "local_var4": 1,
                    "local_var_9c": 2,
                    "local_var_u_stack_9c": 1,
                    "local_variable4": 2,
                    "local_variable_4": 1,
                    "new_section_value_high": 1,
                    "output_upper_value": 1,
                    "param_9c": 1,
                    "symbol_data2_high": 1,
                    "symbol_data_high": 1,
                    "symbol_info_value2": 1,
                    "symbol_value3": 1,
                    "symbol_value6": 1,
                    "temp_var4": 1,
                    "temp_variable_6": 1,
                    "value4": 1,
                    "value_5": 1,
                    "value_6": 1,
                    "var_u_stack_9c": 1
                },
                "uStack_a0": {
                    "data3": 1,
                    "data_value1": 1,
                    "entry_value": 1,
                    "error_code_1": 1,
                    "info3": 1,
                    "local_2": 1,
                    "local_value3": 2,
                    "local_value_a0": 1,
                    "local_var3": 1,
                    "local_var_a0": 2,
                    "local_var_u_stack_a0": 1,
                    "local_variable3": 2,
                    "local_variable_3": 1,
                    "new_section_value": 1,
                    "output_value": 1,
                    "param_a0": 1,
                    "symbol_data": 1,
                    "symbol_data2": 1,
                    "symbol_info_value1": 1,
                    "symbol_value2": 1,
                    "symbol_value5": 1,
                    "temp_var3": 1,
                    "temp_variable_5": 1,
                    "value3": 1,
                    "value_4": 1,
                    "value_5": 1,
                    "var_u_stack_a0": 1
                },
                "uStack_a4": {
                    "data2": 1,
                    "info2": 1,
                    "local_3": 1,
                    "local_value2": 2,
                    "local_value_a4": 1,
                    "local_var2": 1,
                    "local_var_a4": 2,
                    "local_var_u_stack_a4": 1,
                    "local_variable2": 2,
                    "local_variable_2": 1,
                    "new_symbol_value_high": 1,
                    "param_a4": 1,
                    "symbol_address_high": 1,
                    "symbol_data1_high": 1,
                    "symbol_info_hash2": 1,
                    "symbol_undef2": 1,
                    "symbol_upper_value": 1,
                    "symbol_value2": 1,
                    "symbol_value4": 1,
                    "symbol_value_2": 1,
                    "symbol_value_upper": 1,
                    "temp_var2": 1,
                    "temp_variable_4": 1,
                    "value2": 1,
                    "value_3": 1,
                    "value_4": 1,
                    "var_u_stack_a4": 1
                },
                "uStack_a8": {
                    "value_2": 1
                },
                "uVar11": {
                    "additional_value": 1,
                    "aux_code": 1,
                    "aux_info_value": 1,
                    "aux_length": 2,
                    "aux_value": 1,
                    "auxiliary_data_index": 1,
                    "auxiliary_data_value": 1,
                    "data_type": 1,
                    "extra_data": 1,
                    "info_flag": 1,
                    "info_value": 1,
                    "some_value": 2,
                    "storage_class": 1,
                    "symbol_offset": 1,
                    "uint_value": 1,
                    "uint_var": 1,
                    "uint_variable": 1,
                    "unknown_value": 1,
                    "unknown_variable": 1,
                    "value": 6,
                    "value_1": 1,
                    "var11": 1,
                    "var_value": 1,
                    "variable11": 1
                },
                "uVar5": {
                    "bfd_error": 5,
                    "error": 1,
                    "error_code": 17,
                    "error_val": 1,
                    "error_value": 3,
                    "undefined_variable": 1,
                    "var5": 1,
                    "var_error_code": 1,
                    "variable5": 1
                },
                "uVar6": {
                    "aux_entry_offset": 1,
                    "buffer_size": 1,
                    "error_message": 2,
                    "function_result": 1,
                    "result": 3,
                    "result1": 4,
                    "result_1": 2,
                    "result_a": 1,
                    "result_var1": 2,
                    "return_value": 1,
                    "return_value1": 1,
                    "symbol_address": 1,
                    "symbol_hash": 1,
                    "symbol_name": 2,
                    "symbol_value": 2,
                    "symbol_value1": 1,
                    "temporary_variable_1": 1,
                    "undefined_variable_1": 1,
                    "value1": 1,
                    "var_result": 1,
                    "variable6": 1
                },
                "uVar7": {
                    "error_message": 7,
                    "error_msg": 4,
                    "error_string": 1,
                    "localized_error_message": 1,
                    "message_result": 1,
                    "result2": 4,
                    "result_2": 2,
                    "result_b": 1,
                    "result_var2": 2,
                    "return_value2": 1,
                    "section_value": 1,
                    "symbol_value2": 1,
                    "temporary_variable_2": 1,
                    "undefined_variable_2": 1,
                    "value2": 1,
                    "var_message": 1,
                    "variable7": 1
                },
                "undefined8": {
                    "uint64_t": 1
                }
            },
            "called": [
                "FUN_0010dac0",
                "FUN_00119ed0",
                "bfd_coff_get_auxent",
                "bfd_errmsg",
                "free",
                "FUN_00113da9",
                "bfd_coff_get_syment",
                "xrealloc",
                "xmalloc",
                "dcgettext",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_0010dac0"
            ],
            "code": "\nuint64_t\nextract_symbols_from_binary_0010e07c(uint64_t param_1,long *symbol_table,uint64_t param_3,int param_4,long param_5,\n            uint64_t param_6)\n\n{\n  long symbol_table_address;\n  long symbol_address;\n  long symbol_count;\n  char result;\n  undefined4 error_code;\n  void *allocated_memory;\n  uint64_t result1;\n  uint64_t error_message;\n  undefined4 *symbol_info;\n  char *error_message;\n  undefined *aux_data;\n  uint value;\n  long index;\n  int symbol_value;\n  int array_size;\n  undefined4 local_var_a8;\n  undefined4 local_variable2;\n  undefined4 local_var_a0;\n  undefined4 local_variable4;\n  undefined buffer [30];\n  undefined2 symbol_type;\n  byte symbol_type;\n  byte local_var_67;\n  undefined aux_data_buffer [10];\n  ushort local_var_56;\n  \n  array_size = 10;\n  index = 0;\n  symbol_table_address = *(long *)(param_5 + 0x18);\n  allocated_memory = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_table_address && (symbol_table[2] < symbol_table[1]))) {\n    symbol_address = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_address,buffer);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      result1 = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_message,5);\n      print_error_message_with_params_00119ed0(error_message,result1);\n      free(allocated_memory);\n      return 0;\n    }\n    symbol_count = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_count + 1 + (ulong)local_var_67;\n    if (local_var_67 != 0) {\n      aux_data = aux_data_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_address,0,aux_data);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        result1 = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbol_type == 0x12) {\n      value = (uint)local_var_56;\n      symbol_value = (int)*(uint64_t *)(symbol_address + 0x10) +\n               (int)*(uint64_t *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (symbol_type < 0x13) {\n        if ((symbol_type == 8) || (symbol_type == 0xb)) {\n          value = 0;\n          symbol_value = ((int)*(uint64_t *)(symbol_address + 0x10) +\n                   (int)*(uint64_t *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbol_type == 0x66) break;\n      value = 0;\n      symbol_value = 0;\n    }\nLAB_0010e214:\n    error_message = parse_coff_type_and_create_memory_0010dac0(param_1,symbol_table,param_3,symbol_count,symbol_type,aux_data,1);\n    result1 = *(uint64_t *)(symbol_address + 8);\n    symbol_info = (undefined4 *)xmalloc(0x20);\n    local_var_a8 = (undefined4)result1;\n    local_variable2 = (undefined4)((ulong)result1 >> 0x20);\n    local_var_a0 = (undefined4)error_message;\n    local_variable4 = (undefined4)((ulong)error_message >> 0x20);\n    *(uint64_t *)(symbol_info + 5) = 0;\n    symbol_info[6] = symbol_value;\n    symbol_info[7] = value;\n    symbol_info[4] = 0;\n    *symbol_info = local_var_a8;\n    symbol_info[1] = local_variable2;\n    symbol_info[2] = local_var_a0;\n    symbol_info[3] = local_variable4;\n    if (array_size <= (int)index + 1) {\n      array_size = array_size + 10;\n      allocated_memory = (void *)xrealloc(allocated_memory,(long)array_size << 3,symbol_info,0,param_6);\n    }\n    *(undefined4 **)((long)allocated_memory + index * 8) = symbol_info;\n    index = index + 1;\n  }\n  *(uint64_t *)((long)allocated_memory + (long)(int)index * 8) = 0;\n  result1 = initialize_and_allocate_memory_block_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),allocated_memory);\n  return result1;\n}\n\n",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_with_params_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_and_allocate_memory_block_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n",
            "current_name": "extract_symbols_from_binary_0010e07c",
            "entrypoint": "0x0010e07c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e07c": "extract_symbols_from_binary_0010e07c",
                "__ptr": "allocated_memory",
                "cVar4": "result",
                "iVar13": "symbol_value",
                "iVar14": "array_size",
                "lVar1": "symbol_table_address",
                "lVar12": "index",
                "lVar2": "symbol_address",
                "lVar3": "symbol_count",
                "local_56": "local_var_56",
                "local_60": "aux_data_buffer",
                "local_67": "local_var_67",
                "local_68": "symbol_type",
                "local_6a": "symbol_type",
                "local_88": "buffer",
                "local_a8": "local_var_a8",
                "param_2": "symbol_table",
                "pcVar9": "error_message",
                "puVar10": "aux_data",
                "puVar8": "symbol_info",
                "uStack_9c": "local_variable4",
                "uStack_a0": "local_var_a0",
                "uStack_a4": "local_variable2",
                "uVar11": "value",
                "uVar5": "error_code",
                "uVar6": "result1",
                "uVar7": "error_message",
                "undefined8": "uint64_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e2f0": {
            "additional_data": {
                "FUN_0010e2f0": {
                    "add_string_to_hash": 1,
                    "add_string_to_table": 1,
                    "add_to_hash_and_print": 1,
                    "extract_string": 1,
                    "hash_lookup_and_print": 1,
                    "parse_and_store_string": 2,
                    "process_and_store_data": 1,
                    "process_data": 1,
                    "process_param": 2,
                    "process_string": 17,
                    "store_hashed_string": 1,
                    "store_string_in_table": 1,
                    "string_lookup": 1
                },
                "lVar1": {
                    "base_address": 1,
                    "current_entry": 3,
                    "current_hash_entry": 1,
                    "current_node": 1,
                    "found_entry": 1,
                    "hash_entry": 2,
                    "hash_result": 1,
                    "hash_value": 2,
                    "last_entry": 1,
                    "offset": 1,
                    "position": 1,
                    "prev_entry": 2,
                    "prev_object_length": 1,
                    "previous_entry": 2,
                    "table_entry": 1,
                    "temp": 1,
                    "temp_1": 1,
                    "temp_val": 1,
                    "temp_var": 1,
                    "temp_var1": 5,
                    "temp_var_1": 1
                },
                "lVar3": {
                    "entry": 6,
                    "entry_lookup": 1,
                    "found_entry": 1,
                    "hash": 1,
                    "hash_entry": 1,
                    "hash_lookup_result": 3,
                    "hash_result": 2,
                    "hash_val": 1,
                    "hash_value": 1,
                    "lookup_result": 6,
                    "new_node": 1,
                    "temp_2": 1,
                    "temp_var2": 5,
                    "temp_var_2": 1
                },
                "lVar7": {
                    "current_entry": 1,
                    "data_offset": 1,
                    "hash_key": 1,
                    "hash_value": 2,
                    "new_address": 1,
                    "new_entry": 5,
                    "new_entry_offset": 1,
                    "new_hash_entry": 1,
                    "new_object_length": 1,
                    "new_val": 1,
                    "offset": 1,
                    "output_data": 1,
                    "result": 5,
                    "str_length": 1,
                    "string_address": 2,
                    "string_offset": 1,
                    "temp_var3": 2,
                    "temp_var_3": 1,
                    "temp_variable": 1,
                    "var1": 1
                },
                "local_3c": {
                    "buffer": 1,
                    "data_buffer": 1,
                    "local_array": 9,
                    "local_data": 2,
                    "local_var2": 1,
                    "local_variable2": 2,
                    "new_result": 1,
                    "other_value": 1,
                    "result2": 3,
                    "result_array": 1,
                    "temp_array": 5,
                    "temporary_buffer": 1,
                    "var2": 2
                },
                "local_44": {
                    "buffer": 1,
                    "local_mask": 1,
                    "local_var": 2,
                    "local_var1": 1,
                    "local_variable": 1,
                    "local_variable1": 2,
                    "output_data": 1,
                    "output_value": 1,
                    "result": 8,
                    "result1": 2,
                    "result_data": 1,
                    "string_data": 1,
                    "temp_3": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "value": 1,
                    "value_to_print": 1,
                    "var1": 2
                },
                "param_1": {
                    "bfd_file": 1,
                    "buffer": 1,
                    "data_array": 2,
                    "hash_table": 21,
                    "input_data": 1,
                    "object": 1,
                    "param_array": 2,
                    "ptr_array": 1,
                    "table": 1
                },
                "param_2": {
                    "flag": 8,
                    "param": 9,
                    "param_2": 1,
                    "param_flag": 3,
                    "param_flags": 2,
                    "param_value": 1,
                    "undefined_param": 2,
                    "undefined_value": 2,
                    "unknown_param": 1,
                    "value": 1,
                    "zero_flag": 1
                },
                "param_3": {
                    "count": 4,
                    "int_param": 2,
                    "length": 5,
                    "num": 1,
                    "param_3": 1,
                    "param_length": 1,
                    "param_size": 7,
                    "param_value": 1,
                    "size": 7,
                    "string_length": 2
                },
                "param_4": {
                    "additional_data": 1,
                    "data": 7,
                    "data_param": 1,
                    "file_descriptor": 1,
                    "input_value": 1,
                    "key": 1,
                    "param": 2,
                    "param_4": 2,
                    "param_buffer": 1,
                    "param_message": 1,
                    "param_ptr": 2,
                    "param_string": 2,
                    "param_value": 8,
                    "string": 1
                },
                "param_5": {
                    "input_string": 8,
                    "key": 2,
                    "param_string": 3,
                    "str": 5,
                    "string": 10,
                    "string_param": 1,
                    "string_value": 2
                },
                "sVar6": {
                    "input_length": 1,
                    "input_string_length": 1,
                    "key_length": 2,
                    "param_string_length": 1,
                    "str_len": 3,
                    "str_length": 3,
                    "string_length": 18,
                    "string_length_2": 1
                },
                "uStack_3e": {
                    "flag3": 1,
                    "hash_value": 1,
                    "local_var_3": 1,
                    "stack_2": 1,
                    "stack_3": 1,
                    "stack_value3": 1,
                    "stack_var1": 1,
                    "stack_var3": 4,
                    "stack_var_3": 1,
                    "temp_stack_3e": 1,
                    "temp_var3": 1,
                    "tmp3": 1,
                    "u2": 1,
                    "u_stack3e": 2,
                    "u_stack_3e": 5,
                    "u_stack_var3": 1,
                    "undefined_stack2": 1,
                    "undefined_stack3": 1
                },
                "uStack_3f": {
                    "flag1": 1,
                    "local_var_2": 1,
                    "stack_1": 1,
                    "stack_2": 1,
                    "stack_value2": 1,
                    "stack_var1": 1,
                    "stack_var2": 4,
                    "stack_var_2": 1,
                    "temp_stack_3f": 1,
                    "temp_var2": 1,
                    "tmp1": 1,
                    "u1": 1,
                    "u_stack3f": 2,
                    "u_stack_3f": 6,
                    "u_stack_var2": 1,
                    "undefined_stack1": 2
                },
                "uStack_40": {
                    "flag": 1,
                    "flag2": 1,
                    "flag_stack": 1,
                    "local_var_1": 1,
                    "param2_copy": 1,
                    "param_2_temp": 1,
                    "stack_0": 1,
                    "stack_1": 1,
                    "stack_value1": 1,
                    "stack_var1": 3,
                    "stack_var2": 1,
                    "stack_var3": 1,
                    "stack_var_1": 1,
                    "temp_stack_40": 1,
                    "temp_var1": 1,
                    "tmp2": 1,
                    "u_stack40": 2,
                    "u_stack_40": 4,
                    "u_stack_var1": 1,
                    "undefined_stack2": 1
                },
                "uVar2": {
                    "bfd_error": 8,
                    "error": 8,
                    "error_code": 13,
                    "error_num": 1,
                    "error_type": 1
                },
                "uVar4": {
                    "bfd_err_msg": 1,
                    "bfd_errmsg_result": 1,
                    "bfd_error_message": 2,
                    "errmsg": 2,
                    "error_message": 17,
                    "error_msg": 7,
                    "error_string": 1
                },
                "uVar5": {
                    "dcgettext_result": 1,
                    "err_msg": 1,
                    "err_msg_with_params": 1,
                    "error_format": 4,
                    "error_message": 3,
                    "error_message_format": 1,
                    "error_message_template": 1,
                    "error_msg_format": 2,
                    "error_msg_with_params": 1,
                    "error_notification": 1,
                    "error_string": 5,
                    "error_template": 2,
                    "localized_error_message": 3,
                    "localized_message": 1,
                    "message": 2,
                    "message_format": 1,
                    "msg": 1
                },
                "xrealloc": {
                    "custom_realloc": 1
                }
            },
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xrealloc",
                "dcgettext",
                "bfd_get_error",
                "strlen"
            ],
            "calling": [
                "FUN_0010e9a0",
                "FUN_0010edb4",
                "FUN_0010e439",
                "FUN_0010e8a9",
                "FUN_0010ebb0",
                "FUN_0010e7c2",
                "FUN_0010ed2c",
                "FUN_0011378f",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010ec73",
                "FUN_0010eafe",
                "FUN_0010e6a8",
                "FUN_0010e453"
            ],
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined param,int param_size,undefined8 param_value,char *string)\n\n{\n  long temp_var1;\n  undefined4 error_code;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_string;\n  size_t string_length;\n  long result;\n  undefined4 result;\n  undefined u_stack_40;\n  undefined u_stack_3f;\n  undefined2 u_stack_3e;\n  undefined4 local_array [3];\n  \n  if (string == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    lookup_result = bfd_hash_lookup(hash_table + 7,string,1,1);\n    if (lookup_result == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      error_string = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_with_params_00119ed0(error_string,error_message);\n      return 0;\n    }\n    result = *(long *)(lookup_result + 0x20);\n    if (result == -1) {\n      result = hash_table[6];\n      temp_var1 = hash_table[5];\n      *(long *)(lookup_result + 0x20) = result;\n      if (temp_var1 == 0) {\n        hash_table[4] = lookup_result;\n      }\n      else {\n        *(long *)(temp_var1 + 0x18) = lookup_result;\n      }\n      hash_table[5] = lookup_result;\n      string_length = strlen(string);\n      hash_table[6] = result + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(result,&result);\n  u_stack_3f = 0;\n  u_stack_40 = param;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)param_size,&u_stack_3e);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(param_value,local_array);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    result = xrealloc(hash_table[1]);\n    hash_table[1] = result;\n  }\n  result = hash_table[2];\n  lookup_result = hash_table[1];\n  *(ulong *)(lookup_result + result) = CONCAT26(u_stack_3e,CONCAT15(u_stack_3f,CONCAT14(u_stack_40,result)));\n  *(undefined4 *)(lookup_result + 8 + result) = local_array[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)result >> 8),1);\n}\n\n",
            "current_name": "process_string_0010e2f0",
            "entrypoint": "0x0010e2f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "lVar1": "temp_var1",
                "lVar3": "lookup_result",
                "lVar7": "result",
                "local_3c": "local_array",
                "local_44": "result",
                "param_1": "hash_table",
                "param_2": "param",
                "param_3": "param_size",
                "param_4": "param_value",
                "param_5": "string",
                "sVar6": "string_length",
                "uStack_3e": "u_stack_3e",
                "uStack_3f": "u_stack_3f",
                "uStack_40": "u_stack_40",
                "uVar2": "error_code",
                "uVar4": "error_message",
                "uVar5": "error_string",
                "xrealloc": "custom_realloc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e439": {
            "additional_data": {
                "0x210": {
                    "buffer_offset": 1,
                    "offset": 10,
                    "string_address": 1
                },
                "0x84": {
                    "length": 3,
                    "string_constant": 1,
                    "string_length": 6
                },
                "@param_1": {
                    "ptr_to_string_storage": 1
                },
                "@param_2": {
                    "string_length": 1
                },
                "FUN_0010e439": {
                    "set_data_in_memory": 1,
                    "set_param_and_process": 2,
                    "set_param_and_process_string": 10,
                    "set_param_to_value_and_process_string": 1,
                    "set_param_value": 4,
                    "set_parameter": 1,
                    "set_process_string_param": 1,
                    "set_string_and_process": 1,
                    "set_string_in_data_structure": 1,
                    "set_string_parameter": 1,
                    "set_string_pointer": 1,
                    "set_value_and_process_string": 1,
                    "store_and_process_string": 1,
                    "store_param_and_process_string": 1,
                    "store_parameter_and_process_string": 1,
                    "update_data_and_process_string": 1,
                    "update_string_data": 1,
                    "update_string_info": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 14,
                    "buffer_address": 1,
                    "data": 1,
                    "data_struct": 1,
                    "data_structure": 1,
                    "data_structure_address": 1,
                    "memory_address": 1,
                    "object_address": 3,
                    "parameter1": 1,
                    "string_data_ptr": 1,
                    "string_info_ptr": 1,
                    "string_ptr": 1,
                    "target_address": 3
                },
                "param_2": {
                    "data": 1,
                    "data_to_set": 1,
                    "new_data": 1,
                    "new_data_value": 1,
                    "new_string": 2,
                    "new_value": 9,
                    "param_value": 2,
                    "parameter2": 1,
                    "string": 1,
                    "string_data": 1,
                    "string_to_process": 1,
                    "string_value": 1,
                    "value": 8,
                    "value_to_set": 1
                },
                "process_string_0010e2f0": {
                    "process_string": 21
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "code": "\nvoid set_param_to_value_and_process_string_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  process_string(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_to_value_and_process_string_0010e439",
            "entrypoint": "0x0010e439",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e439": "set_param_to_value_and_process_string_0010e439",
                "param_1": "base_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e453": {
            "additional_data": {
                "FUN_0010e453": {
                    "create_and_initialize_data": 1,
                    "create_and_initialize_data_structure": 2,
                    "extract_and_initialize_data": 3,
                    "extract_and_initialize_data_structure": 3,
                    "extract_and_initialize_structure": 1,
                    "initialize_and_process_data": 1,
                    "initialize_data": 1,
                    "initialize_data_structure": 6,
                    "parse_and_initialize_data": 1,
                    "parse_and_initialize_data_structure": 1,
                    "parse_and_process_data": 1,
                    "parse_input_and_initialize": 1,
                    "process_and_initialize_data": 1,
                    "process_data": 3,
                    "reverse_and_initialize_structure": 1
                },
                "__s": {
                    "allocated_string": 3,
                    "dynamic_string": 1,
                    "extracted_string": 1,
                    "formatted_string": 20,
                    "heap_str": 1,
                    "output_string": 3,
                    "string_var": 1
                },
                "cVar2": {
                    "char_val": 1,
                    "char_var": 2,
                    "result": 15,
                    "result_char": 1,
                    "result_var": 1,
                    "return_value": 2,
                    "status": 6,
                    "temp_char": 1
                },
                "create_and_initialize_data_structure_00109b52": {
                    "create_and_initialize": 1,
                    "create_and_initialize_structure": 1
                },
                "free": {
                    "deallocate_memory": 1,
                    "free_memory": 1
                },
                "initialize_data_structure_00109cf4": {
                    "initialize_data_structure": 1,
                    "initialize_structure": 1
                },
                "lVar1": {
                    "array_element": 2,
                    "current_item": 1,
                    "current_length": 1,
                    "current_param": 1,
                    "current_param_length": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "current_string": 1,
                    "current_string_address": 1,
                    "current_string_length": 4,
                    "elem_size": 1,
                    "index": 1,
                    "length": 3,
                    "length_1": 1,
                    "length_var": 1,
                    "length_var1": 1,
                    "list_length": 2,
                    "loop_index": 1,
                    "loop_var1": 1,
                    "temp_addr": 1,
                    "temp_long": 1,
                    "temp_value": 1
                },
                "lVar5": {
                    "count": 3,
                    "count_var": 1,
                    "counter": 1,
                    "formatted_string_length": 6,
                    "input_length": 1,
                    "length": 2,
                    "length_2": 1,
                    "loop_var2": 1,
                    "size": 1,
                    "string_length": 2,
                    "strlen_input": 1,
                    "total_length": 10
                },
                "lVar7": {
                    "array_index": 3,
                    "array_offset": 1,
                    "current_index": 1,
                    "current_offset": 1,
                    "index": 4,
                    "loop_var": 1,
                    "loop_var3": 1,
                    "loop_variable": 1,
                    "offset": 12,
                    "param_index": 1,
                    "str_array_index": 1,
                    "string_array_index": 1,
                    "string_index": 1,
                    "string_offset": 1
                },
                "param_1": {
                    "data": 2,
                    "data_ptr": 1,
                    "data_size": 3,
                    "data_structure": 4,
                    "data_structure_param": 3,
                    "data_structure_parameter": 1,
                    "data_value": 1,
                    "input_data": 1,
                    "input_length": 1,
                    "input_param": 2,
                    "input_ptr": 1,
                    "input_size": 1,
                    "input_value": 2,
                    "param": 1,
                    "param1": 5,
                    "param_num": 1,
                    "param_pointer": 1
                },
                "param_2": {
                    "input_string": 17,
                    "param2": 5,
                    "prefix": 1,
                    "str_param": 1,
                    "string": 2,
                    "string1": 1,
                    "string_param": 4
                },
                "param_3": {
                    "array_of_strings": 1,
                    "input_array": 2,
                    "input_strings": 2,
                    "input_strings_array": 1,
                    "param3": 5,
                    "str_array_param": 1,
                    "string_array": 13,
                    "string_array_param": 2,
                    "string_list": 3,
                    "string_list_param": 1
                },
                "ppcVar6": {
                    "array_pointer": 1,
                    "current_input": 1,
                    "current_param": 1,
                    "current_string": 17,
                    "current_string_ptr": 2,
                    "param3_pointer": 1,
                    "pointer_to_pointer_var": 1,
                    "str_array": 1,
                    "string_array": 1,
                    "string_array_pointer": 1,
                    "string_pointer_array": 1,
                    "string_ptr": 2
                },
                "process_string_0010e2f0": {
                    "process_string": 2
                },
                "sVar3": {
                    "input_string_length": 1,
                    "length": 1,
                    "param_length": 1,
                    "size": 1,
                    "size_var": 1,
                    "str_length": 1,
                    "string_length": 19,
                    "string_length2": 1,
                    "string_size": 1,
                    "strlen_result": 3
                },
                "sprintf": {
                    "format_string": 2
                },
                "strlen": {
                    "get_string_length": 2
                },
                "uVar4": {
                    "is_success": 1,
                    "output": 1,
                    "result": 10,
                    "result_value": 1,
                    "return_value": 13,
                    "success": 2,
                    "success_flag": 2
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen",
                "FUN_00109b52"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined8 extract_and_initialize_data_structure_0010e453(long param1,char *input_string,char **string_array)\n\n{\n  long current_string_length;\n  char result;\n  size_t string_length;\n  undefined2 *formatted_string;\n  undefined8 return_value;\n  long total_length;\n  char **current_string;\n  long offset;\n  \n  if (string_array == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      formatted_string = (undefined2 *)xmalloc(string_length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = create_and_initialize(param1,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    return_value = 0;\n  }\n  else {\n    total_length = 10;\n    current_string = string_array;\n    if (input_string != (char *)0x0) {\n      string_length = strlen(input_string);\n      total_length = string_length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      string_length = strlen(*current_string);\n      total_length = total_length + 0x14 + string_length;\n    }\n    formatted_string = (undefined2 *)xmalloc(total_length);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      total_length = 0;\n    }\n    else {\n      total_length = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = total_length + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,total_length);\n    }\n    offset = 0;\n    while( true ) {\n      current_string_length = *(long *)((long)string_array + offset);\n      string_length = strlen((char *)formatted_string);\n      if (current_string_length == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + string_length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + string_length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = process_string(param1,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = initialize_structure(param1,total_length,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free_memory(formatted_string);\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "extract_and_initialize_data_structure_0010e453",
            "entrypoint": "0x0010e453",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e453": "extract_and_initialize_data_structure_0010e453",
                "__s": "formatted_string",
                "cVar2": "result",
                "create_and_initialize_data_structure_00109b52": "create_and_initialize",
                "free": "free_memory",
                "initialize_data_structure_00109cf4": "initialize_structure",
                "lVar1": "current_string_length",
                "lVar5": "total_length",
                "lVar7": "offset",
                "param_1": "param1",
                "param_2": "input_string",
                "param_3": "string_array",
                "ppcVar6": "current_string",
                "process_string_0010e2f0": "process_string",
                "sVar3": "string_length",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar4": "return_value",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e5db": {
            "additional_data": {
                "FUN_0010e5db": {
                    "process_and_extract_data": 3,
                    "process_and_return_data": 6,
                    "process_data": 11,
                    "process_data_and_string": 1,
                    "process_data_and_strings": 3,
                    "process_data_loop": 1,
                    "process_data_until_limit": 1,
                    "process_data_with_counter": 1,
                    "process_input_data": 1,
                    "process_iterations": 1,
                    "process_multiple_iterations": 1
                },
                "__ptr": {
                    "extracted_ptr": 19,
                    "ptr": 8,
                    "ptr1": 1,
                    "ptr_1": 2,
                    "ptr_to_free": 1
                },
                "__s": {
                    "extracted_str": 2,
                    "extracted_string": 17,
                    "str": 1,
                    "str_1": 2,
                    "string": 6,
                    "string_1": 1,
                    "string_ptr": 1,
                    "string_to_free": 1
                },
                "__s_00": {
                    "formatted_string": 2,
                    "modified_str": 3,
                    "modified_string": 20,
                    "new_str": 1,
                    "new_string": 2,
                    "new_string_ptr": 1,
                    "str_2": 1,
                    "string_2": 1
                },
                "auVar4": {
                    "output_data": 1,
                    "processed_data": 1,
                    "result": 13,
                    "result_array": 3,
                    "result_value": 1,
                    "return_value": 5
                },
                "cVar1": {
                    "char_checker": 1,
                    "process_result": 2,
                    "processed_char": 1,
                    "processing_result": 1,
                    "result": 6,
                    "result_char": 3,
                    "result_character": 1,
                    "success_flag": 1
                },
                "iVar3": {
                    "counter": 5,
                    "current_iteration": 1,
                    "iteration": 3,
                    "iteration_count": 16,
                    "iteration_counter": 5
                },
                "in_R10": {
                    "additional_data": 4,
                    "additional_param": 1,
                    "auxiliary_value": 1,
                    "constant": 2,
                    "constant_value": 3,
                    "counter": 1,
                    "custom_value": 1,
                    "extra_data": 1,
                    "extra_param": 1,
                    "initial_value": 1,
                    "input_value": 1,
                    "offset": 1,
                    "parameter_r10": 1,
                    "register_value": 1,
                    "result": 1,
                    "some_value": 1,
                    "value": 3,
                    "value_r10": 2
                },
                "param_1": {
                    "address": 1,
                    "data": 2,
                    "data_address": 5,
                    "data_ptr": 21,
                    "input_data": 1,
                    "input_param": 1
                },
                "param_2": {
                    "count": 2,
                    "data_length": 2,
                    "data_size": 1,
                    "iteration_count": 3,
                    "iteration_limit": 1,
                    "iterations": 1,
                    "length": 1,
                    "limit": 2,
                    "loop_count": 1,
                    "num_iterations": 17
                },
                "sVar2": {
                    "str_len": 1,
                    "str_length": 4,
                    "string_len": 1,
                    "string_length": 24
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_00109ed3",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_00112c1f"
            ],
            "code": "\nundefined  [16] process_and_return_data_0010e5db(long data_ptr,int num_iterations)\n\n{\n  char result;\n  void *extracted_ptr;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  ulong additional_data;\n  int iteration_count;\n  undefined result [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iterations <= iteration_count) {\n      result = process_data_00109ed3(data_ptr,0x66,0,data_ptr + 0x188,data_ptr + 400,additional_data);\n      return result;\n    }\n    if (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) == '\\0') {\n      extracted_ptr = (void *)extract_and_free_ptr_00109b2f(data_ptr);\n      free(extracted_ptr);\n    }\n    else {\n      extracted_string = (char *)extract_and_free_ptr_00109b2f(data_ptr);\n      string_length = strlen(extracted_string);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",extracted_string);\n      free(extracted_string);\n      result = process_string_0010e2f0(data_ptr,0x80,0,0,modified_string);\n      if (result == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = additional_data;\n        return result << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_and_return_data_0010e5db",
            "entrypoint": "0x0010e5db",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e5db": "process_and_return_data_0010e5db",
                "__ptr": "extracted_ptr",
                "__s": "extracted_string",
                "__s_00": "modified_string",
                "auVar4": "result",
                "cVar1": "result",
                "iVar3": "iteration_count",
                "in_R10": "additional_data",
                "param_1": "data_ptr",
                "param_2": "num_iterations",
                "sVar2": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e6a8": {
            "additional_data": {
                "FUN_0010e6a8": {
                    "parse_and_process_string": 1,
                    "process_and_save_string": 1,
                    "process_and_store_string": 17,
                    "process_and_update_string": 3,
                    "process_input_string": 2,
                    "process_string": 3,
                    "process_string_and_store": 1,
                    "process_string_and_update_hash": 2,
                    "process_string_and_update_table": 1
                },
                "__s": {
                    "extracted_str": 2,
                    "extracted_string": 29
                },
                "__s_00": {
                    "combined_string": 5,
                    "concatenated_string": 1,
                    "final_string": 1,
                    "formatted_str": 2,
                    "formatted_string": 4,
                    "modified_string": 3,
                    "new_string": 5,
                    "output_string": 1,
                    "parsed_string": 1,
                    "processed_string": 7,
                    "result_string": 1
                },
                "auVar10": {
                    "function_output": 1,
                    "output": 4,
                    "result": 2,
                    "return_tuple": 1,
                    "return_val": 2,
                    "return_value": 12,
                    "return_value_with_params": 1
                },
                "lVar5": {
                    "hash_lookup": 1,
                    "hash_lookup_result": 7,
                    "hash_result": 1,
                    "hash_value": 1,
                    "lookup_ptr": 1,
                    "lookup_result": 18
                },
                "lVar8": {
                    "count": 11,
                    "counter": 14,
                    "index": 2,
                    "iteration_count": 1,
                    "num_processed": 1,
                    "string_counter": 1,
                    "table_length": 1
                },
                "param_1": {
                    "binary": 2,
                    "binary_address": 1,
                    "binary_base": 1,
                    "binary_data": 2,
                    "binary_handle": 2,
                    "binary_info": 1,
                    "binary_param": 1,
                    "context": 3,
                    "data": 3,
                    "data_ptr": 1,
                    "hash_table": 1,
                    "input_data": 4,
                    "input_param": 2,
                    "input_ptr": 1,
                    "input_struct": 1,
                    "input_struct_ptr": 1,
                    "input_value": 1,
                    "param_1": 1,
                    "param_ptr": 1,
                    "ptr_to_data_structure": 1
                },
                "param_2": {
                    "identifier": 1,
                    "input_param": 1,
                    "input_string": 17,
                    "key": 6,
                    "original_string": 1,
                    "prefix_string": 1,
                    "string": 2,
                    "string_param": 2
                },
                "param_3": {
                    "arg1": 1,
                    "data_1": 1,
                    "param3": 2,
                    "param_3": 20,
                    "param_a": 1,
                    "unknown_param1": 1,
                    "unused_param_1": 1,
                    "unused_parameter_1": 1,
                    "value": 1,
                    "value_1": 1,
                    "var1": 1
                },
                "param_4": {
                    "arg2": 1,
                    "data_2": 1,
                    "output": 1,
                    "param4": 2,
                    "param_4": 20,
                    "param_b": 1,
                    "unknown_param2": 1,
                    "unused_param_2": 1,
                    "unused_parameter_2": 1,
                    "value_2": 1,
                    "var2": 1
                },
                "sVar3": {
                    "input_len": 1,
                    "input_length": 4,
                    "input_str_len": 1,
                    "input_string_len": 1,
                    "input_string_length": 12,
                    "key_len": 1,
                    "key_length": 5,
                    "original_str_len": 1,
                    "param2_length": 1,
                    "prefix_len": 1,
                    "string_length": 1,
                    "string_param_len": 1,
                    "string_param_length": 1
                },
                "sVar4": {
                    "extracted_len": 2,
                    "extracted_length": 4,
                    "extracted_str_len": 2,
                    "extracted_str_length": 2,
                    "extracted_string_len": 2,
                    "extracted_string_length": 18,
                    "string_len": 1
                },
                "uVar1": {
                    "process_result": 4,
                    "processed_string_result": 1,
                    "result": 7,
                    "status": 3,
                    "string_process_result": 3,
                    "string_processing_result": 4
                },
                "uVar2": {
                    "error": 2,
                    "error_code": 4,
                    "extracted_data": 2,
                    "extracted_param": 1,
                    "extracted_string_metadata": 1,
                    "extracted_string_type": 1,
                    "extracted_val": 2,
                    "extracted_value": 13,
                    "table_value": 1,
                    "value": 2,
                    "var3": 1
                },
                "uVar6": {
                    "bfd_err_msg": 1,
                    "bfd_errmsg_result": 1,
                    "bfd_error_message": 1,
                    "errmsg": 1,
                    "error": 1,
                    "error_message": 12,
                    "error_msg": 4
                },
                "uVar7": {
                    "dcgettext_result": 1,
                    "error": 1,
                    "error_format": 5,
                    "error_message": 2,
                    "error_message_format": 3,
                    "error_message_params": 1,
                    "error_msg": 1,
                    "error_msg_format": 1,
                    "error_string": 1,
                    "error_template": 2,
                    "localized_error_message": 1,
                    "lookup_failed_message": 1,
                    "translated_error": 1
                },
                "uVar9": {
                    "converted_result": 1,
                    "final_result": 2,
                    "hash_lookup_result": 1,
                    "process_result": 4,
                    "processed_result": 1,
                    "result": 12,
                    "return_val": 1,
                    "return_value": 9
                }
            },
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "xmalloc",
                "dcgettext",
                "bfd_get_error",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_string_and_store_0010e6a8(long input_data,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  uint result;\n  undefined4 extracted_value;\n  char *extracted_string;\n  size_t input_string_length;\n  size_t extracted_string_length;\n  char *processed_string;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long counter;\n  ulong result;\n  undefined return_value [16];\n  \n  counter = *(long *)(*(long *)(input_data + 0x60) + 0x10);\n  extracted_value = *(undefined4 *)(*(long *)(input_data + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  processed_string = (char *)xmalloc(input_string_length + 0x14 + extracted_string_length);\n  if (counter < 1) {\n    counter = *(long *)(input_data + 0x68);\n    *(long *)(input_data + 0x68) = counter + 1;\n    sprintf(processed_string,\"%s:t%ld=%s\",input_string,counter,extracted_string);\n  }\n  else {\n    sprintf(processed_string,\"%s:t%s\",input_string,extracted_string);\n  }\n  free(extracted_string);\n  result = process_string_0010e2f0(input_data,0x80,0,0,processed_string);\n  result = (ulong)result;\n  if ((char)result != '\\0') {\n    free(processed_string);\n    lookup_result = bfd_hash_lookup(input_data + 0x1b8,input_string,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = counter;\n      *(undefined4 *)(lookup_result + 0x28) = extracted_value;\n      goto LAB_0010e7b3;\n    }\n    extracted_value = bfd_get_error();\n    error_message = bfd_errmsg(extracted_value);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_with_params_00119ed0(error_format,error_message);\n  }\n  result = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "current_name": "process_string_and_store_0010e6a8",
            "entrypoint": "0x0010e6a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e6a8": "process_string_and_store_0010e6a8",
                "__s": "extracted_string",
                "__s_00": "processed_string",
                "auVar10": "return_value",
                "lVar5": "lookup_result",
                "lVar8": "counter",
                "param_1": "input_data",
                "param_2": "input_string",
                "sVar3": "input_string_length",
                "sVar4": "extracted_string_length",
                "uVar1": "result",
                "uVar2": "extracted_value",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e7c2": {
            "additional_data": {
                "FUN_0010e7c2": {
                    "build_modified_string": 1,
                    "combine_and_process_strings": 1,
                    "combine_strings": 1,
                    "concatenate_and_process_strings": 1,
                    "construct_string_with_prefix": 1,
                    "create_improved_string": 1,
                    "format_and_process_string": 6,
                    "generate_modified_string": 2,
                    "generate_updated_string": 1,
                    "merge_strings": 1,
                    "parse_and_process_data": 1,
                    "process_and_format_string": 6,
                    "process_and_print_string": 1,
                    "process_string_and_free": 1,
                    "reverse_and_process_string": 6
                },
                "__s": {
                    "extracted_data": 1,
                    "extracted_ptr": 1,
                    "extracted_string": 29
                },
                "__s_00": {
                    "combined_string": 6,
                    "concatenated_string": 2,
                    "final_string": 1,
                    "formatted_string": 12,
                    "merged_string": 1,
                    "modified_string": 5,
                    "new_string": 2,
                    "processed_string": 1,
                    "updated_string": 1
                },
                "auVar3": {
                    "result": 25,
                    "result_array": 1
                },
                "param_1": {
                    "data": 2,
                    "extracted_data": 1,
                    "input": 3,
                    "input_1": 2,
                    "input_data": 3,
                    "input_flag": 1,
                    "input_param": 10,
                    "input_ptr": 1,
                    "input_value": 6,
                    "param": 1,
                    "param1": 1
                },
                "param_2": {
                    "first_string": 1,
                    "format_param": 1,
                    "input_2": 1,
                    "input_string": 8,
                    "original_string": 4,
                    "prefix": 10,
                    "prefix_string": 1,
                    "source_string": 1,
                    "string1": 2,
                    "string_input": 1,
                    "string_param": 1
                },
                "param_3": {
                    "data_size": 1,
                    "input_2": 1,
                    "input_3": 1,
                    "param3": 1,
                    "param_3": 6,
                    "unused_param": 15,
                    "unused_param_1": 2,
                    "unused_parameter": 1
                },
                "param_4": {
                    "additional_data": 2,
                    "additional_param": 3,
                    "additional_value": 1,
                    "input_4": 1,
                    "output": 4,
                    "output_data": 1,
                    "output_flag": 1,
                    "output_param": 8,
                    "output_parameter": 1,
                    "output_size": 1,
                    "output_value": 1,
                    "param4": 1,
                    "param_4": 2,
                    "result_param": 2,
                    "unused_param_2": 2
                },
                "sVar1": {
                    "first_string_length": 1,
                    "format_param_length": 1,
                    "input_2_length": 1,
                    "input_length": 2,
                    "input_str_len": 1,
                    "input_str_length": 1,
                    "input_string_length": 3,
                    "input_string_size": 1,
                    "length_string1": 1,
                    "original_string_length": 4,
                    "prefix_length": 11,
                    "source_string_length": 1,
                    "string1_length": 1,
                    "string_input_length": 1,
                    "string_param_length": 1
                },
                "sVar2": {
                    "extracted_data_length": 1,
                    "extracted_length": 3,
                    "extracted_ptr_length": 1,
                    "extracted_str_len": 1,
                    "extracted_str_length": 1,
                    "extracted_string_length": 22,
                    "extracted_string_size": 1,
                    "length_extracted_string": 1
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] process_and_format_string_0010e7c2(undefined8 input_param,char *prefix,undefined8 unused_param,undefined8 output_param)\n\n{\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  prefix_length = strlen(prefix);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n  sprintf(formatted_string,\"%s:T%s\",prefix,extracted_string);\n  free(extracted_string);\n  result._0_4_ = process_string_0010e2f0(input_param,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "current_name": "process_and_format_string_0010e7c2",
            "entrypoint": "0x0010e7c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e7c2": "process_and_format_string_0010e7c2",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "auVar3": "result",
                "param_1": "input_param",
                "param_2": "prefix",
                "param_3": "unused_param",
                "param_4": "output_param",
                "sVar1": "prefix_length",
                "sVar2": "extracted_string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e842": {
            "additional_data": {
                "FUN_0010e842": {
                    "build_processed_string": 1,
                    "convert_to_formatted_string": 1,
                    "format_and_process_string": 5,
                    "generate_formatted_string": 1,
                    "generate_modified_string": 1,
                    "parse_and_process_string": 1,
                    "process_and_allocate_memory": 1,
                    "process_and_allocate_string": 1,
                    "process_and_format_string": 10,
                    "process_and_free_string": 1,
                    "process_and_print_string": 1,
                    "process_and_return_result": 3,
                    "process_and_send_data": 1,
                    "process_string_with_params": 1,
                    "string_conversion": 1,
                    "string_processing_function": 1
                },
                "__s": {
                    "allocated_string": 4,
                    "dynamic_string": 2,
                    "formatted_string": 21,
                    "modified_string": 1,
                    "new_string": 1,
                    "processed_string": 2
                },
                "auVar2": {
                    "conversion_result": 1,
                    "process_result": 1,
                    "result": 28,
                    "result_variable": 1
                },
                "param_1": {
                    "data": 2,
                    "input": 9,
                    "input_data": 6,
                    "input_param": 7,
                    "input_parameter": 1,
                    "input_value": 2,
                    "input_var": 1,
                    "input_var1": 1,
                    "input_variable": 1,
                    "param_1": 1
                },
                "param_2": {
                    "input_string": 14,
                    "message": 1,
                    "original_string": 3,
                    "source_string": 2,
                    "string": 6,
                    "string_param": 5
                },
                "param_3": {
                    "additional_info": 1,
                    "additional_value": 1,
                    "count": 1,
                    "count_param": 1,
                    "counter": 1,
                    "index": 1,
                    "input_integer": 1,
                    "input_num": 1,
                    "input_number": 4,
                    "input_var2": 1,
                    "integer": 3,
                    "integer_param": 3,
                    "integer_value": 6,
                    "length_param": 1,
                    "long_param": 1,
                    "number": 2,
                    "value": 2
                },
                "param_4": {
                    "additional_data": 1,
                    "additional_info": 2,
                    "additional_input": 1,
                    "additional_param": 2,
                    "additional_value": 1,
                    "custom_param": 1,
                    "extra_param": 1,
                    "input_length": 1,
                    "input_var3": 1,
                    "modifier": 1,
                    "output": 4,
                    "output_data": 2,
                    "output_param": 4,
                    "output_value": 2,
                    "output_var": 1,
                    "output_variable": 1,
                    "param": 1,
                    "param_4": 1,
                    "result": 1,
                    "result_data": 1,
                    "value": 1
                },
                "process_string_0010e2f0": {
                    "process_string": 3
                },
                "sVar1": {
                    "input_length": 1,
                    "input_string_length": 2,
                    "message_length": 1,
                    "source_length": 1,
                    "source_string_length": 1,
                    "string_length": 25
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined  [16] format_and_process_string_0010e842(undefined8 input,char *input_string,undefined8 integer_value,undefined8 output_param)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,integer_value);\n  result._0_4_ = process_string(input,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output_param;\n  return result;\n}\n\n",
            "current_name": "format_and_process_string_0010e842",
            "entrypoint": "0x0010e842",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e842": "format_and_process_string_0010e842",
                "__s": "formatted_string",
                "auVar2": "result",
                "param_1": "input",
                "param_2": "input_string",
                "param_3": "integer_value",
                "param_4": "output_param",
                "process_string_0010e2f0": "process_string",
                "sVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e8a9": {
            "additional_data": {
                "FUN_0010e8a9": {
                    "format_and_process_string": 1,
                    "process_and_free_string": 23,
                    "process_and_post": 1,
                    "process_and_store_data": 1,
                    "process_and_validate_param": 1,
                    "process_string": 3,
                    "process_string_function": 1
                },
                "__s": {
                    "allocated_string": 6,
                    "combined_string": 1,
                    "dynamic_string": 5,
                    "formatted_str": 1,
                    "formatted_string": 3,
                    "modified_string": 1,
                    "new_str": 1,
                    "new_string": 2,
                    "processed_string": 11
                },
                "param_1": {
                    "input1": 3,
                    "input_1": 4,
                    "input_param": 2,
                    "input_prefix": 2,
                    "input_str": 2,
                    "input_string": 12,
                    "input_string1": 1,
                    "input_string_1": 2,
                    "prefix": 1,
                    "source_data": 1,
                    "source_string": 1
                },
                "param_2": {
                    "another_param": 1,
                    "extra_parameter": 1,
                    "input2": 3,
                    "input_2": 4,
                    "input_data": 1,
                    "input_ptr": 1,
                    "input_string2": 1,
                    "input_string_2": 2,
                    "input_suffix": 1,
                    "output_param": 2,
                    "output_str": 1,
                    "output_string": 5,
                    "process_param": 1,
                    "process_parameter": 1,
                    "process_value": 1,
                    "processing_flag": 1,
                    "processing_option": 1,
                    "target": 1,
                    "target_value": 1,
                    "value": 1
                },
                "param_3": {
                    "additional_data": 2,
                    "additional_info": 3,
                    "additional_string": 1,
                    "append_string": 2,
                    "concatenated_string": 1,
                    "extra_data": 1,
                    "extra_information": 1,
                    "input_string": 3,
                    "input_string3": 1,
                    "input_string_3": 2,
                    "input_suffix": 1,
                    "message": 1,
                    "param_string": 1,
                    "string": 4,
                    "string_param": 2,
                    "string_to_process": 1,
                    "suffix": 2,
                    "suffix_string": 1,
                    "user_input": 1
                },
                "sVar2": {
                    "additional_data_length": 1,
                    "additional_info_len": 1,
                    "additional_string_length": 1,
                    "append_length": 1,
                    "data_length": 1,
                    "input_length": 2,
                    "input_str_length": 1,
                    "input_string3_length": 1,
                    "input_string_length": 1,
                    "length": 3,
                    "message_length": 1,
                    "str_length": 1,
                    "string_length": 6,
                    "suffix_length": 2
                },
                "uVar1": {
                    "result": 29,
                    "return_value": 2
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 input_string,undefined8 output_string,char *string)\n\n{\n  undefined4 result;\n  size_t string_length;\n  char *processed_string;\n  \n  string_length = strlen(string);\n  processed_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(processed_string,\"%s:c=f%g\",input_string,string);\n  result = process_string_0010e2f0(output_string,0x80,0,0,processed_string);\n  if ((char)result != '\\0') {\n    free(processed_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_and_free_string_0010e8a9",
            "entrypoint": "0x0010e8a9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "__s": "processed_string",
                "param_1": "input_string",
                "param_2": "output_string",
                "param_3": "string",
                "sVar2": "string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e918": {
            "additional_data": {
                "FUN_0010e918": {
                    "format_and_process_string": 2,
                    "format_string_and_process": 1,
                    "generate_formatted_string": 1,
                    "parse_and_process": 1,
                    "process_and_display_string": 1,
                    "process_and_encode_string": 1,
                    "process_and_format_string": 2,
                    "process_and_free_string": 4,
                    "process_and_print": 1,
                    "process_and_send_command": 1,
                    "process_and_send_data": 7,
                    "process_and_send_string": 2,
                    "process_message": 1,
                    "process_string_and_free": 1,
                    "process_string_with_parameters": 1,
                    "process_string_with_params": 1,
                    "send_modified_string": 1,
                    "string_processing_function": 1,
                    "transform_string": 1
                },
                "__s": {
                    "extracted_data": 3,
                    "extracted_str": 2,
                    "extracted_string": 26
                },
                "__s_00": {
                    "combined_string": 5,
                    "encoded_string": 1,
                    "final_string": 1,
                    "formatted_command": 1,
                    "formatted_data": 1,
                    "formatted_str": 1,
                    "formatted_string": 12,
                    "formatted_string_ptr": 1,
                    "modified_string": 1,
                    "new_string": 3,
                    "processed_message": 1,
                    "processed_string": 2,
                    "transformed_string": 1
                },
                "param_1": {
                    "arg1": 1,
                    "connection": 1,
                    "data_buffer": 1,
                    "data_ptr": 2,
                    "display_mode": 1,
                    "extracted_data": 1,
                    "handle": 1,
                    "input_data": 4,
                    "input_file_pointer": 1,
                    "input_param": 4,
                    "input_parameter": 1,
                    "input_ptr": 1,
                    "input_value": 2,
                    "input_variable": 1,
                    "output_buffer": 1,
                    "param1": 1,
                    "socket": 4,
                    "socket_descriptor": 1,
                    "socket_fd": 1,
                    "source_pointer": 1
                },
                "param_2": {
                    "command": 1,
                    "data_string": 1,
                    "input_string": 10,
                    "key_value": 1,
                    "message": 3,
                    "param2": 1,
                    "prefix": 2,
                    "prefix_str": 1,
                    "prefix_string": 2,
                    "source_string": 1,
                    "string": 1,
                    "string1": 2,
                    "string_1": 1,
                    "string_param": 2,
                    "string_to_encode": 1,
                    "text": 1
                },
                "param_3": {
                    "additional_value": 2,
                    "count": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "input_value": 1,
                    "length": 2,
                    "length_param": 1,
                    "number": 1,
                    "numeric_value": 4,
                    "param3": 2,
                    "size_limit": 1,
                    "string_2_length": 1,
                    "string_length": 1,
                    "suffix_value": 1,
                    "timestamp": 1,
                    "value": 9,
                    "value_param": 1
                },
                "sVar2": {
                    "command_length": 1,
                    "data_string_length": 1,
                    "input_length": 4,
                    "input_string_len": 1,
                    "input_string_length": 5,
                    "key_length": 1,
                    "message_len": 1,
                    "message_length": 2,
                    "param2_length": 1,
                    "prefix_len": 1,
                    "prefix_length": 2,
                    "prefix_string_length": 2,
                    "source_length": 1,
                    "string1_length": 2,
                    "string_1_length": 1,
                    "string_length_1": 1,
                    "string_length_param_2": 1,
                    "string_param_len": 1,
                    "string_param_length": 1,
                    "text_length": 1
                },
                "sVar3": {
                    "data_length": 1,
                    "extracted_len": 2,
                    "extracted_length": 5,
                    "extracted_str_length": 1,
                    "extracted_string_len": 2,
                    "extracted_string_length": 18,
                    "string_length_2": 1,
                    "string_length_extracted_data": 1
                },
                "uVar1": {
                    "result": 23
                }
            },
            "called": [
                "free",
                "FUN_00109b2f",
                "sprintf",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_send_data_0010e918(undefined8 input_param,char *input_string,undefined8 value)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t input_string_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(input_string_length + 0x14 + extracted_string_length);\n  sprintf(formatted_string,\"%s:c=e%s,%ld\",input_string,extracted_string,value);\n  free(extracted_string);\n  result = process_string_0010e2f0(input_param,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "current_name": "process_and_send_data_0010e918",
            "entrypoint": "0x0010e918",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e918": "process_and_send_data_0010e918",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "param_1": "input_param",
                "param_2": "input_string",
                "param_3": "value",
                "sVar2": "input_string_length",
                "sVar3": "extracted_string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010e9a0": {
            "additional_data": {
                "FUN_0010e9a0": {
                    "extract_string_from_binary": 1,
                    "format_and_process_string": 4,
                    "format_string_and_process": 1,
                    "generate_formatted_string": 1,
                    "generate_modified_string": 1,
                    "parse_and_process_data": 1,
                    "process_and_format_string": 1,
                    "process_and_free_string": 1,
                    "process_and_print_string": 2,
                    "process_and_send_data": 3,
                    "process_data": 1,
                    "process_input": 1,
                    "process_input_data": 2,
                    "process_input_string": 1,
                    "process_modified_string": 1,
                    "process_string": 7,
                    "process_string_and_free": 1,
                    "process_string_param": 1
                },
                "__s": {
                    "dynamic_ptr1": 1,
                    "extracted_data": 6,
                    "extracted_str": 2,
                    "extracted_string": 22
                },
                "__s_00": {
                    "dynamic_ptr2": 1,
                    "formatted_data": 2,
                    "formatted_data_1": 1,
                    "formatted_str": 1,
                    "formatted_string": 11,
                    "modified_data": 1,
                    "modified_str": 1,
                    "modified_string": 10,
                    "new_data": 1,
                    "new_extracted_data": 1,
                    "temp_string": 1
                },
                "__s_01": {
                    "final_str": 1,
                    "final_string": 21,
                    "formatted_data": 1,
                    "formatted_data_2": 1,
                    "formatted_output": 1,
                    "formatted_string": 1,
                    "new_string": 1,
                    "processed_data": 1,
                    "processed_str": 1,
                    "result_string": 2
                },
                "lVar1": {
                    "count": 2,
                    "counter": 23,
                    "increment": 2,
                    "index": 1,
                    "string_index": 1,
                    "temp_counter": 1
                },
                "param_1": {
                    "data": 3,
                    "data_ptr": 4,
                    "file_ptr": 1,
                    "input": 10,
                    "input1": 1,
                    "input_data": 2,
                    "input_param": 3,
                    "input_pointer": 1,
                    "input_ptr": 4,
                    "param": 2
                },
                "param_2": {
                    "data_string": 1,
                    "format_str": 1,
                    "input": 1,
                    "input2": 1,
                    "input_str": 1,
                    "input_string": 7,
                    "message": 1,
                    "original_string": 1,
                    "prefix": 14,
                    "prefix_string": 1,
                    "string1": 1,
                    "string_param": 1
                },
                "param_3": {
                    "case_number": 1,
                    "case_option": 1,
                    "data_type": 2,
                    "format_type": 1,
                    "input_type": 1,
                    "mode": 3,
                    "option": 12,
                    "string_type": 1,
                    "switch_param": 1,
                    "type": 8
                },
                "param_4": {
                    "additional_data": 1,
                    "additional_param": 1,
                    "address": 1,
                    "arg": 1,
                    "data": 2,
                    "data_length": 1,
                    "extra_data": 1,
                    "extra_info": 1,
                    "id": 1,
                    "identifier": 1,
                    "input3": 1,
                    "output": 2,
                    "output_data": 1,
                    "output_param": 1,
                    "param": 7,
                    "param_4": 3,
                    "ptr_data": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "value": 2
                },
                "pcVar5": {
                    "case_letter": 1,
                    "case_symbol": 1,
                    "character_code": 1,
                    "code": 1,
                    "data_identifier": 1,
                    "data_prefix": 1,
                    "data_type_indicator": 1,
                    "flag": 1,
                    "flag_str": 1,
                    "identifier": 2,
                    "marker": 1,
                    "option_char": 1,
                    "option_string": 4,
                    "option_symbol": 1,
                    "prefix": 1,
                    "str_prefix": 1,
                    "string_marker": 1,
                    "symbol": 2,
                    "type_char": 3,
                    "type_code": 1,
                    "type_prefix": 2,
                    "type_string": 1,
                    "type_symbol": 1
                },
                "process_string_0010e2f0": {
                    "process_string": 3
                },
                "sVar3": {
                    "data_str_len": 1,
                    "format_len": 1,
                    "input2_length": 1,
                    "input_len": 1,
                    "input_length": 9,
                    "input_str_length": 3,
                    "input_string_length": 3,
                    "message_length": 1,
                    "original_len": 1,
                    "prefix_length": 8,
                    "string1_length": 1,
                    "string_length": 1
                },
                "sVar4": {
                    "data_length": 1,
                    "dynamic_ptr1_length": 1,
                    "extracted_data_len": 1,
                    "extracted_data_length": 3,
                    "extracted_len": 3,
                    "extracted_length": 4,
                    "extracted_str_length": 2,
                    "extracted_string_length": 13,
                    "formatted_data_length": 1,
                    "modified_string_length": 2
                },
                "uVar2": {
                    "result": 20,
                    "return_value": 6
                },
                "uVar6": {
                    "char_value": 1,
                    "data_flag": 1,
                    "flag": 15,
                    "format_flag": 1,
                    "mode": 2,
                    "option_value": 4,
                    "special_char": 2,
                    "string_flag": 1,
                    "type_value": 2,
                    "value": 2
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 format_string_and_process_0010e9a0(long input,char *prefix,undefined4 option,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *extracted_string;\n  byte *formatted_string;\n  size_t input_length;\n  size_t extracted_string_length;\n  char *final_string;\n  char *option_string;\n  undefined8 flag;\n  \n  extracted_string = (byte *)extract_and_free_ptr_00109b2f();\n  switch(option) {\n  case 1:\n    option_string = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    option_string = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    option_string = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    option_string = \"\";\n    flag = 0x80;\n    if (((&_sch_istable)[(ulong)*extracted_string * 2] & 4) == 0) {\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      input_length = strlen((char *)extracted_string);\n      formatted_string = (byte *)xmalloc(input_length + 0x14);\n      sprintf((char *)formatted_string,\"%ld=%s\",counter,extracted_string);\n      free(extracted_string);\n      extracted_string = formatted_string;\n    }\n    break;\n  case 5:\n    option_string = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  input_length = strlen(prefix);\n  extracted_string_length = strlen((char *)extracted_string);\n  final_string = (char *)xmalloc(input_length + 3 + extracted_string_length);\n  sprintf(final_string,\"%s:%s%s\",prefix,option_string,extracted_string);\n  free(extracted_string);\n  result = process_string(input,flag,0,param,final_string);\n  if ((char)result != '\\0') {\n    free(final_string);\n  }\n  return result;\n}\n\n",
            "current_name": "format_string_and_process_0010e9a0",
            "entrypoint": "0x0010e9a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010e9a0": "format_string_and_process_0010e9a0",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "__s_01": "final_string",
                "lVar1": "counter",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "option",
                "param_4": "param",
                "pcVar5": "option_string",
                "process_string_0010e2f0": "process_string",
                "sVar3": "input_length",
                "sVar4": "extracted_string_length",
                "uVar2": "result",
                "uVar6": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010eafe": {
            "additional_data": {
                "FUN_0010eafe": {
                    "extract_and_process_string": 1,
                    "generate_formatted_string": 1,
                    "process_and_extract": 1,
                    "process_and_extract_string": 1,
                    "process_and_format_string": 1,
                    "process_and_free_ptr": 1,
                    "process_and_free_string": 6,
                    "process_and_print_message": 1,
                    "process_and_print_string": 3,
                    "process_and_send_data": 1,
                    "process_and_update": 1,
                    "process_and_validate_string": 1,
                    "process_extracted_string": 1,
                    "process_string": 8,
                    "process_string_from_binary": 2,
                    "process_string_if_conditions_met": 1
                },
                "__s": {
                    "extracted_str": 1,
                    "extracted_string": 30
                },
                "__s_00": {
                    "allocated_string": 1,
                    "combined_string": 6,
                    "concatenated_str": 1,
                    "final_string": 2,
                    "formatted_message": 1,
                    "formatted_string": 4,
                    "new_string": 4,
                    "output_string": 1,
                    "processed_string": 7,
                    "result_string": 4
                },
                "param_1": {
                    "arg1": 2,
                    "binary_base_address": 1,
                    "binary_data": 1,
                    "binary_pointer": 1,
                    "context": 2,
                    "data": 7,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "input": 3,
                    "input_address": 1,
                    "input_pointer": 2,
                    "input_ptr": 2,
                    "input_struct": 1,
                    "param": 1,
                    "ptr": 1,
                    "ptr_1": 1,
                    "state": 2,
                    "struct_address": 1
                },
                "param_2": {
                    "data_string": 1,
                    "input_string": 23,
                    "message": 1,
                    "prefix": 1,
                    "str_1": 1,
                    "string1": 3,
                    "text": 1
                },
                "param_3": {
                    "char1": 1,
                    "char_val": 1,
                    "character": 6,
                    "flag": 21,
                    "input_char": 2
                },
                "sVar2": {
                    "data_string_length": 1,
                    "input_len": 3,
                    "input_length": 12,
                    "input_string_length": 9,
                    "len_str_1": 1,
                    "len_string1": 1,
                    "message_length": 1,
                    "prefix_length": 1,
                    "string1_length": 2
                },
                "sVar3": {
                    "extracted_len": 2,
                    "extracted_length": 8,
                    "extracted_string_len": 1,
                    "extracted_string_length": 17,
                    "len_extracted_str": 1,
                    "len_extracted_string": 1,
                    "string_length": 1
                },
                "uVar1": {
                    "result": 20,
                    "return_value": 9
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010eafe(long data,char *input_string,char flag)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_string_length;\n  char *processed_string;\n  \n  if ((*(int *)(data + 0x1f8) == 0) && (*(long *)(data + 0x1e8) == -1)) {\n    extracted_string = (char *)extract_and_free_ptr_00109b2f();\n    input_length = strlen(input_string);\n    extracted_string_length = strlen(extracted_string);\n    processed_string = (char *)xmalloc(input_length + 3 + extracted_string_length);\n    sprintf(processed_string,\"%s:%c%s\",input_string,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extracted_string);\n    *(undefined8 *)(data + 0x1e8) = *(undefined8 *)(data + 0x10);\n    result = process_string_0010e2f0(data,0x24,0,0,processed_string);\n    if ((char)result != '\\0') {\n      free(processed_string);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_and_free_string_0010eafe",
            "entrypoint": "0x0010eafe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010eafe": "process_and_free_string_0010eafe",
                "__s": "extracted_string",
                "__s_00": "processed_string",
                "param_1": "data",
                "param_2": "input_string",
                "param_3": "flag",
                "sVar2": "input_length",
                "sVar3": "extracted_string_length",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ebb0": {
            "additional_data": {
                "FUN_0010ebb0": {
                    "format_and_process_string": 1,
                    "process_and_format_string": 1,
                    "process_and_free_string": 11,
                    "process_and_free_strings": 1,
                    "process_and_print_string": 2,
                    "process_and_send_message": 2,
                    "process_extracted_string": 1,
                    "process_input": 1,
                    "process_string": 11
                },
                "__s": {
                    "extracted_data": 1,
                    "extracted_message": 2,
                    "extracted_string": 27,
                    "str_2": 1
                },
                "__s_00": {
                    "combined_string": 3,
                    "composed_message": 1,
                    "concatenated_string": 4,
                    "formatted_string": 8,
                    "modified_message": 1,
                    "modified_string": 5,
                    "new_string": 2,
                    "processed_string": 5,
                    "result_string": 1,
                    "str_3": 1
                },
                "cVar1": {
                    "ch_1": 1,
                    "char_to_append": 1,
                    "char_value": 4,
                    "character": 12,
                    "character_": 1,
                    "extracted_char": 1,
                    "message_header": 1,
                    "message_modifier": 1,
                    "modified_character": 1,
                    "prefix_char": 2,
                    "prefix_letter": 1,
                    "suffix_char": 2
                },
                "param_1": {
                    "arg1": 5,
                    "connection": 1,
                    "input": 3,
                    "input1": 4,
                    "input_1": 2,
                    "input_data": 1,
                    "input_param": 4,
                    "input_param1": 2,
                    "input_ptr": 3,
                    "input_string": 1,
                    "input_value_1": 1,
                    "param1": 1,
                    "param_ptr": 1,
                    "ptr_1": 1,
                    "socket": 1
                },
                "param_2": {
                    "input2": 4,
                    "input_2": 2,
                    "input_param2": 2,
                    "input_string": 6,
                    "input_string_1": 1,
                    "prefix": 8,
                    "sender": 1,
                    "source": 1,
                    "source_string": 1,
                    "str_1": 1,
                    "string1": 1,
                    "string_param": 3
                },
                "param_3": {
                    "input_3": 1,
                    "input_length": 5,
                    "input_param3": 1,
                    "input_size": 1,
                    "len_1": 1,
                    "length": 11,
                    "length_param": 2,
                    "message_type": 1,
                    "prefix_length": 3,
                    "str_length": 1,
                    "string_length": 2,
                    "suffix_length": 2
                },
                "param_4": {
                    "additional_data": 4,
                    "another_ptr": 1,
                    "arg2": 3,
                    "arg4": 2,
                    "data": 1,
                    "extra_data": 1,
                    "extra_parameter": 1,
                    "input3": 1,
                    "input4": 3,
                    "input_3": 1,
                    "input_4": 1,
                    "input_param4": 2,
                    "input_value_2": 1,
                    "output_param": 4,
                    "output_ptr": 1,
                    "param4": 1,
                    "ptr_2": 1,
                    "ptr_data": 1,
                    "unused_param": 1
                },
                "sVar4": {
                    "input2_length": 4,
                    "input_2_length": 2,
                    "input_length": 2,
                    "input_string_length": 5,
                    "param2_length": 2,
                    "prefix_length": 7,
                    "sender_length": 1,
                    "source_length": 2,
                    "str_len_1": 1,
                    "string1_length": 1,
                    "string_length": 2,
                    "string_param_length": 1
                },
                "sVar5": {
                    "extracted_data_length": 1,
                    "extracted_length": 5,
                    "extracted_string_length": 21,
                    "message_length": 2,
                    "str_len_2": 1
                },
                "uVar2": {
                    "adjusted_length": 3,
                    "last_index": 1,
                    "len_2": 1,
                    "length_diff": 1,
                    "length_difference": 1,
                    "length_minus_1": 1,
                    "length_minus_one": 5,
                    "modified_length": 4,
                    "prefix_length_minus_one": 1,
                    "reduced_prefix_length": 1,
                    "remainder": 1,
                    "remaining_length": 2,
                    "remaining_size": 1,
                    "suffix_index": 1,
                    "updated_length": 1
                },
                "uVar3": {
                    "result": 21,
                    "result_code": 1,
                    "return_value": 5
                }
            },
            "called": [
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0",
                "xmalloc",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_001135a5"
            ],
            "code": "\nundefined4 process_and_free_string_0010ebb0(undefined8 arg1,char *prefix,int length,undefined8 output_param)\n\n{\n  char character;\n  uint length_minus_one;\n  undefined4 result;\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  length_minus_one = length - 1;\n  if (length_minus_one < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)length_minus_one * 4);\n    character = (&DAT_00121334)[length_minus_one];\n    prefix_length = strlen(prefix);\n    extracted_string_length = strlen(extracted_string);\n    formatted_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n    sprintf(formatted_string,\"%s:%c%s\",prefix,(ulong)(uint)(int)character,extracted_string);\n    free(extracted_string);\n    result = process_string_0010e2f0(arg1,result,0,output_param,formatted_string);\n    if ((char)result != '\\0') {\n      free(formatted_string);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "current_name": "process_and_free_string_0010ebb0",
            "entrypoint": "0x0010ebb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ebb0": "process_and_free_string_0010ebb0",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "cVar1": "character",
                "param_1": "arg1",
                "param_2": "prefix",
                "param_3": "length",
                "param_4": "output_param",
                "sVar4": "prefix_length",
                "sVar5": "extracted_string_length",
                "uVar2": "length_minus_one",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ec73": {
            "additional_data": {
                "0x3c": {
                    "offset_1": 1
                },
                "0x3d": {
                    "offset_2": 1
                },
                "0x3f": {
                    "counter_index": 1
                },
                "0x40": {
                    "base_value": 1
                },
                "0x41": {
                    "previous_offset": 1
                },
                "FUN_0010ec73": {
                    "process_and_increment_counter": 1,
                    "process_and_track_data": 1,
                    "process_and_update": 1,
                    "process_and_update_data": 1,
                    "process_and_update_state": 1,
                    "process_and_update_values": 1,
                    "process_data": 20,
                    "process_function": 3,
                    "process_param": 2
                },
                "cVar2": {
                    "result": 29,
                    "result_char": 2
                },
                "iVar1": {
                    "count": 11,
                    "counter": 19,
                    "increment": 1
                },
                "param_1": {
                    "array": 2,
                    "array_param": 1,
                    "base_pointer": 1,
                    "data": 12,
                    "data_array": 6,
                    "data_buffer": 1,
                    "data_ptr": 5,
                    "param_array": 2,
                    "state": 1
                },
                "param_2": {
                    "data": 1,
                    "input": 3,
                    "input_value": 12,
                    "param": 1,
                    "param_value": 1,
                    "value": 12,
                    "value_param": 1
                },
                "param_3": {
                    "arg1": 9,
                    "arg3": 1,
                    "arg_1": 1,
                    "arg_3": 2,
                    "param3": 4,
                    "param_3": 5,
                    "ptr1": 1,
                    "unused_1": 1,
                    "unused_param": 2,
                    "unused_param3": 1,
                    "unused_param_1": 2,
                    "unused_param_3": 1,
                    "value_1": 1
                },
                "param_4": {
                    "arg2": 9,
                    "arg4": 1,
                    "arg_2": 1,
                    "arg_4": 2,
                    "param4": 4,
                    "param_4": 5,
                    "ptr2": 1,
                    "unused_2": 1,
                    "unused_param": 1,
                    "unused_param4": 1,
                    "unused_param_2": 3,
                    "unused_param_4": 1,
                    "value_2": 1
                },
                "param_5": {
                    "arg3": 9,
                    "arg5": 1,
                    "arg_3": 1,
                    "arg_5": 2,
                    "param5": 4,
                    "param_5": 5,
                    "ptr3": 1,
                    "unused_3": 1,
                    "unused_param": 1,
                    "unused_param5": 1,
                    "unused_param_3": 3,
                    "unused_param_5": 1,
                    "value_3": 1
                },
                "param_6": {
                    "arg4": 9,
                    "arg6": 1,
                    "arg_4": 1,
                    "arg_6": 2,
                    "param6": 4,
                    "param_6": 5,
                    "ptr4": 1,
                    "unused_4": 1,
                    "unused_param": 1,
                    "unused_param6": 1,
                    "unused_param_4": 3,
                    "unused_param_6": 1,
                    "value_4": 1
                },
                "process_string_0010e2f0": {
                    "process_string": 5
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined process_and_update_data_0010ec73(long *data,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = process_string(data,0xc0,0,data[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "current_name": "process_and_update_data_0010ec73",
            "entrypoint": "0x0010ec73",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ec73": "process_and_update_data_0010ec73",
                "cVar2": "result",
                "iVar1": "counter",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "process_string_0010e2f0": "process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ed2c": {
            "additional_data": {
                "FUN_0010ed2c": {
                    "process_and_return_result": 1,
                    "process_data": 1,
                    "process_string_and_update": 1,
                    "update_and_process_string": 2,
                    "update_buffer": 1,
                    "update_buffer_size": 1,
                    "update_data": 1,
                    "update_data_and_process_string": 1,
                    "update_long": 1,
                    "update_max": 1,
                    "update_max_param": 1,
                    "update_max_param_and_process_string": 1,
                    "update_max_value": 1,
                    "update_maximum": 2,
                    "update_maximum_value": 2,
                    "update_param": 1,
                    "update_param_and_process": 1,
                    "update_param_and_process_string": 1,
                    "update_param_and_return": 3,
                    "update_param_values": 1,
                    "update_params": 1,
                    "update_string": 2,
                    "update_string_and_return": 2,
                    "update_string_cache": 1
                },
                "_0_8_": {
                    "result1": 1
                },
                "_8_8_": {
                    "result2": 1
                },
                "auVar4": {
                    "output": 3,
                    "output_array": 1,
                    "processed_data": 1,
                    "processed_result": 1,
                    "processed_string": 1,
                    "result": 10,
                    "result_array": 2,
                    "result_data": 2,
                    "result_object": 1,
                    "result_variable": 1,
                    "return_value": 4
                },
                "cVar1": {
                    "char_result": 3,
                    "is_processed": 1,
                    "is_success": 3,
                    "process_result": 1,
                    "result": 12,
                    "result_flag": 1,
                    "status": 1,
                    "string_result": 2,
                    "success": 3,
                    "success_flag": 3
                },
                "extraout_RDX": {
                    "extra_data": 1,
                    "extra_out_rdx": 2,
                    "extra_out_value": 1,
                    "extra_output": 1,
                    "extra_param_rdx": 1,
                    "extra_return": 1,
                    "extra_value": 2,
                    "extra_var": 1,
                    "extraout": 1,
                    "extraout_rdx_param": 1,
                    "return_value": 1,
                    "unused_variable": 1
                },
                "iVar2": {
                    "count": 6,
                    "counter": 14,
                    "int_result": 2,
                    "iteration": 1,
                    "iteration_count": 3,
                    "loop_count": 1,
                    "num_iterations": 1,
                    "remaining_iterations": 1,
                    "temp_var": 2
                },
                "in_R10": {
                    "additional_data": 5,
                    "additional_param": 5,
                    "another_param": 1,
                    "aux_param": 1,
                    "data_ptr": 1,
                    "extra_data": 2,
                    "extra_param": 1,
                    "extra_param2": 1,
                    "extra_ptr": 2,
                    "extra_variable": 1,
                    "in_r10": 1,
                    "in_r10_param": 1,
                    "in_register_r10": 1,
                    "in_register_var": 1,
                    "param_in_r10": 1,
                    "process_value": 1,
                    "temp": 2,
                    "temporary_data": 1,
                    "unused_variable": 1
                },
                "param_1": {
                    "buffer": 2,
                    "buffer_ptr": 1,
                    "data": 1,
                    "data_ptr": 10,
                    "data_struct": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 1,
                    "input_ptr": 1,
                    "memory": 1,
                    "object": 3,
                    "param": 1,
                    "param_1": 1,
                    "param_ptr": 2,
                    "ptr_param1": 1,
                    "str_ptr": 2,
                    "string_cache": 1,
                    "string_data": 1
                },
                "param_2": {
                    "data_size": 1,
                    "length": 2,
                    "new_data_size": 1,
                    "new_length": 2,
                    "new_max": 1,
                    "new_max_length": 1,
                    "new_maximum": 1,
                    "new_param": 1,
                    "new_size": 4,
                    "new_string_length": 1,
                    "new_value": 14,
                    "param2": 1,
                    "str_length": 1
                },
                "param_3": {
                    "additional_data": 3,
                    "additional_info": 1,
                    "additional_param": 1,
                    "extra_data": 4,
                    "extra_param": 5,
                    "extra_value": 1,
                    "in_r10": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 3,
                    "new_value": 1,
                    "old_size": 1,
                    "param3": 1,
                    "param_3": 2,
                    "param_value": 1,
                    "previous_value": 1,
                    "return_value": 1,
                    "string_cache_ptr": 1,
                    "temporary_variable": 1
                },
                "uVar3": {
                    "adjusted_size": 1,
                    "concatenated_value": 2,
                    "flag": 2,
                    "limit": 1,
                    "max_value": 1,
                    "modified_length": 1,
                    "result": 3,
                    "status": 1,
                    "temp": 1,
                    "update_value": 1,
                    "updated_length": 1,
                    "updated_size": 1,
                    "updated_string_length": 1,
                    "updated_value": 12,
                    "value": 1
                }
            },
            "called": [
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00113a4d"
            ],
            "code": "\nundefined  [16] update_max_param_and_process_string_0010ed2c(long data_ptr,ulong new_value,undefined8 extra_param)\n\n{\n  char result;\n  int counter;\n  undefined8 extra_out_rdx;\n  ulong updated_value;\n  undefined8 additional_param;\n  undefined result [16];\n  \n  if (*(ulong *)(data_ptr + 0x1f0) < new_value) {\n    *(ulong *)(data_ptr + 0x1f0) = new_value;\n  }\n  if (*(long *)(data_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data_ptr + 0x1f8) != 0) {\n      counter = *(int *)(data_ptr + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)extra_param >> 8),1);\n      *(int *)(data_ptr + 0x1f8) = counter;\n      if (counter != 0) {\n        result = process_string_0010e2f0(data_ptr,0xe0,0,new_value - *(long *)(data_ptr + 0x200),0,additional_param);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(data_ptr,0xc0,0,*(long *)(data_ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(data_ptr + 0x208) = 0xffffffffffffffff;\n      extra_param = extra_out_rdx;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  result.result1 = updated_value & 0xffffffff;\n  result.result2 = additional_param;\n  return result;\n}\n\n",
            "current_name": "update_max_param_and_process_string_0010ed2c",
            "entrypoint": "0x0010ed2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010ed2c": "update_max_param_and_process_string_0010ed2c",
                "_0_8_": "result1",
                "_8_8_": "result2",
                "auVar4": "result",
                "cVar1": "result",
                "extraout_RDX": "extra_out_rdx",
                "iVar2": "counter",
                "in_R10": "additional_param",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "param_3": "extra_param",
                "uVar3": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010edb4": {
            "additional_data": {
                "FUN_0010edb4": {
                    "find_max_size_and_process": 1,
                    "process_and_update_file": 2,
                    "process_data": 2,
                    "process_file": 13,
                    "process_file_data": 2,
                    "process_filename": 1,
                    "update_file_info": 8,
                    "update_file_information": 1,
                    "update_filename": 1
                },
                "cVar1": {
                    "char_check": 1,
                    "is_processed": 1,
                    "is_valid": 2,
                    "process_result": 1,
                    "process_string_result": 1,
                    "result": 11,
                    "string_process_result": 1,
                    "string_processing_result": 2,
                    "success": 4,
                    "success_flag": 7
                },
                "iVar2": {
                    "cmp_result": 4,
                    "comparison_result": 5,
                    "file_comparison_result": 1,
                    "filename_cmp_result": 1,
                    "filename_compare_result": 1,
                    "filename_comparison": 14,
                    "filename_comparison_result": 4,
                    "name_compare_result": 1
                },
                "in_R10": {
                    "additional_arg": 1,
                    "additional_context": 1,
                    "additional_data": 4,
                    "additional_info": 1,
                    "additional_param": 2,
                    "extra_data_ptr": 1,
                    "extra_param": 1,
                    "extra_parameter": 1,
                    "register_value": 1,
                    "some_register": 1,
                    "unknown_param": 1,
                    "unmodified_parameter": 1,
                    "unused_parameter": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_struct_ptr": 1,
                    "file_buffer": 1,
                    "file_context": 1,
                    "file_data": 8,
                    "file_handler": 1,
                    "file_info": 8,
                    "file_info_ptr": 2,
                    "file_manager": 1,
                    "file_pointer": 1,
                    "file_ptr": 2,
                    "file_struct": 2,
                    "file_struct_ptr": 1
                },
                "param_2": {
                    "file_name": 7,
                    "file_path": 1,
                    "filename": 13,
                    "filename_ptr": 1,
                    "new_file_name": 3,
                    "new_filename": 6
                },
                "param_3": {
                    "file_flag": 1,
                    "file_format": 1,
                    "file_mode": 2,
                    "file_param": 1,
                    "file_permission": 1,
                    "file_size": 1,
                    "file_size_limit": 1,
                    "file_type": 3,
                    "flag": 6,
                    "flags": 4,
                    "length": 1,
                    "mode": 2,
                    "param": 1,
                    "param_size": 1,
                    "param_type": 1,
                    "param_val": 1,
                    "param_value": 1,
                    "some_value": 1,
                    "string_param": 1
                },
                "param_4": {
                    "current_file_size": 1,
                    "file_size": 19,
                    "max_file_size": 2,
                    "max_length": 1,
                    "max_param": 1,
                    "max_size": 1,
                    "new_file_size": 2,
                    "new_filesize": 1,
                    "size": 3
                },
                "uVar3": {
                    "file_processing_result": 1,
                    "process_result": 2,
                    "process_string_result": 1,
                    "process_string_result2": 1,
                    "processing_result": 2,
                    "result": 15,
                    "result_2": 1,
                    "result_processed_string": 1,
                    "result_string": 2,
                    "string_processing_result": 3,
                    "string_processing_result_2": 2
                }
            },
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "calling": [
                "FUN_00112502"
            ],
            "code": "\nundefined8 process_file_data_0010edb4(long file_data,undefined8 filename,undefined4 flag,ulong file_size)\n\n{\n  char result;\n  int filename_comparison;\n  undefined8 result;\n  undefined8 additional_data;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < file_size) {\n    *(ulong *)(file_data + 0x1f0) = file_size;\n  }\n  filename_comparison = filename_cmp(filename);\n  if (filename_comparison != 0) {\n    result = process_string_0010e2f0(file_data,0x84,0,file_size,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = filename;\n  }\n  result = process_string_0010e2f0(file_data,0x44,flag,file_size - *(long *)(file_data + 0x200),0,additional_data);\n  return result;\n}\n\n",
            "current_name": "process_file_data_0010edb4",
            "entrypoint": "0x0010edb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0010edb4": "process_file_data_0010edb4",
                "cVar1": "result",
                "iVar2": "filename_comparison",
                "in_R10": "additional_data",
                "param_1": "file_data",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "file_size",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0010ee3f": {
            "called": [
                "fprintf",
                "concat",
                "strncmp",
                "FUN_0010d21c",
                "sprintf",
                "strstr",
                "xmalloc",
                "FUN_00113e5e",
                "FUN_00108e76",
                "strcmp",
                "FUN_00113b4a",
                "FUN_001129f4",
                "FUN_00113fb0",
                "FUN_00113d3a",
                "FUN_00113b98",
                "strcat",
                "FUN_00113cb9",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00108fb9",
                "xrealloc",
                "FUN_00109a32",
                "FUN_0010911f",
                "strspn",
                "strtol",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "strlen",
                "FUN_0010d882",
                "FUN_0010b6ea",
                "FUN_00109a0b",
                "FUN_00113df2",
                "FUN_0010914e",
                "strcpy",
                "FUN_00113c43",
                "free",
                "malloc",
                "FUN_00113da9",
                "cplus_demangle_init_info",
                "FUN_00109022",
                "FUN_00113e17",
                "FUN_00113d6e",
                "FUN_00113b71",
                "FUN_0010afd5",
                "FUN_00113dfe",
                "FUN_00109ab1",
                "cplus_demangle_mangled_name",
                "FUN_00112b6e",
                "FUN_00109be3",
                "FUN_00113ce0",
                "dcgettext",
                "FUN_0010c2d2",
                "strchr",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_data_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_memory_block_with_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = process_file_type_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)create_memory_block_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_data_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_and_return_memory_block_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)process_file_type_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)process_file_type_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)create_and_initialize_memory_block_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_error_message_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)extract_real_type_from_debug_info_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)create_and_initialize_memory_block_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_memory_block_or_zero_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_memory_block_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_memory_block_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_memory_block_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_memory_block_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_block_from_param_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_data_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = initialize_memory_block_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_error_message_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)allocate_and_initialize_memory_block_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)initialize_memory_block_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_and_return_memory_block_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_error_message_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_string_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_error_message_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_and_allocate_memory_block_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_block_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_block_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_data_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)initialize_memory_block_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)initialize_memory_block_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_memory_block_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_error_message_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_memory_block_with_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_message_00108fe8(pbVar27,uVar15);\n                lVar38 = initialize_memory_block_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_memory_block_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)initialize_memory_block_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_memory_block_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)initialize_memory_block_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)initialize_memory_block_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)initialize_memory_block_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)initialize_memory_block_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)initialize_memory_block_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_message_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = string_comparison_function_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = string_comparison_function_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = string_comparison_function_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)initialize_memory_block_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)initialize_memory_block_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_error_message_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_message_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_message_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)extract_value_from_binary_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_error_message_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_error_message_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_string_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_error_message_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_message_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_error_message_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_string_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_string_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_string_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)extract_real_type_from_debug_info_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)extract_real_type_from_debug_info_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_string_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_message_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_memory_block_with_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)extract_real_type_from_debug_info_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = string_comparison_function_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = demangle_v3_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = validate_and_parse_input_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_store_data_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_validate_input_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = parse_integer_from_string_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = process_and_parse_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = process_and_parse_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = process_and_parse_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = process_and_parse_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)create_and_initialize_memory_block_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = check_and_process_data_type_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = check_and_process_data_type_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = string_comparison_function_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = string_comparison_function_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)create_and_initialize_memory_block_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_message_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_data_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_error_message_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_and_allocate_memory_block_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_memory_block_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_message_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_error_message_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_in_data_structure_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)process_file_type_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_error_message_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "current_name": "FUNC_0010ee3f",
            "entrypoint": "0x0010ee3f",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0011173a": {
            "additional_data": {
                "FUN_0011173a": {
                    "analyze_stab_data": 1,
                    "extract_debug_info": 1,
                    "improve_and_readability": 1,
                    "improve_debug_info": 1,
                    "parse_debug_info": 1,
                    "process_debug_info": 3
                },
                "__ptr": {
                    "pointer": 1,
                    "pointer_var": 1,
                    "pointer_variable": 1,
                    "ptr": 17,
                    "ptr_var": 6,
                    "ptr_variable": 1,
                    "temp_ptr": 1,
                    "void_pointer": 2
                },
                "_stderr": {
                    "standard_error_output": 1
                },
                "bVar2": {
                    "byte1": 2,
                    "byte_val": 2,
                    "byte_value": 1,
                    "byte_var": 5,
                    "byte_var1": 1,
                    "byte_var2": 11,
                    "byte_var_2": 3,
                    "byte_variable_2": 2,
                    "temp_2": 1,
                    "var2": 1
                },
                "cVar1": {
                    "ch": 1,
                    "char1": 3,
                    "char_value": 1,
                    "char_var": 5,
                    "char_var1": 13,
                    "char_var_1": 3,
                    "char_variable_1": 2,
                    "temp_1": 1,
                    "var1": 1
                },
                "cVar2": {
                    "byte_var2": 1
                },
                "cVar3": {
                    "char2": 3,
                    "char_var2": 9,
                    "char_var3": 7,
                    "char_var_2": 3,
                    "char_var_3": 1,
                    "char_variable_3": 2,
                    "result": 2,
                    "status": 1,
                    "temp_3": 1,
                    "var3": 1
                },
                "concat": {
                    "join_strings": 1
                },
                "copy_and_null_terminate_string_00109a0b": {
                    "copy_and_null_terminate_string": 1
                },
                "dVar19": {
                    "double1": 1,
                    "double_val": 1,
                    "double_value": 1,
                    "double_var": 13,
                    "double_var1": 1,
                    "double_var19": 7,
                    "double_variable_19": 2,
                    "temp_14": 1,
                    "var19": 1,
                    "var9": 1
                },
                "dVar20": {
                    "double_var_20": 1
                },
                "dcgettext": {
                    "get_translated_string": 1
                },
                "fprintf": {
                    "print_formatted_output_to_file": 1
                },
                "free": {
                    "dealocate_memory": 1
                },
                "handle_debug_end_function_0010be1a": {
                    "handle_debug_end_function": 1
                },
                "iVar5": {
                    "index": 1,
                    "int1": 1,
                    "int_var": 13,
                    "int_var1": 1,
                    "int_var5": 7,
                    "int_var_5": 1,
                    "int_variable": 1,
                    "int_variable_5": 1,
                    "num": 1,
                    "temp_5": 1,
                    "var1": 1,
                    "var5": 1
                },
                "initialize_debug_info_0010bbd3": {
                    "initialize_debug_info": 1
                },
                "initialize_memory_block_with_type_information_0010c218": {
                    "initialize_memory_block_with_type_information": 1
                },
                "initialize_memory_if_valid_pointers_00112996": {
                    "initialize_memory_if_valid_pointers": 1
                },
                "initialize_or_get_memory_block_00113d3a": {
                    "initialize_or_get_memory_block": 1
                },
                "join_strings": {
                    "join_strings": 1
                },
                "lVar10": {
                    "long2": 1,
                    "long_val1": 1,
                    "long_value1": 1,
                    "long_var": 2,
                    "long_var1": 5,
                    "long_var10": 7,
                    "long_var2": 4,
                    "long_var_1": 3,
                    "long_var_10": 1,
                    "long_variable_10": 2,
                    "temp_7": 1,
                    "var10": 1,
                    "var2": 1
                },
                "lVar11": {
                    "long3": 1,
                    "long_val2": 1,
                    "long_value2": 1,
                    "long_var11": 7,
                    "long_var2": 6,
                    "long_var3": 4,
                    "long_var_11": 1,
                    "long_var_2": 3,
                    "long_var_4": 1,
                    "long_variable_11": 2,
                    "temp_8": 1,
                    "var11": 1,
                    "var3": 1
                },
                "lVar12": {
                    "long4": 1,
                    "long_value3": 1,
                    "long_var12": 7,
                    "long_var3": 5,
                    "long_var4": 5,
                    "long_var_12": 1,
                    "long_var_3": 4,
                    "long_variable_12": 2,
                    "ptr_val1": 1,
                    "temp_9": 1,
                    "var12": 1,
                    "var4": 1
                },
                "lVar13": {
                    "long5": 1,
                    "long_ptr_var": 1,
                    "long_value4": 1,
                    "long_var13": 2,
                    "long_var4": 2,
                    "long_var_13": 1,
                    "long_var_4": 1,
                    "long_variable_13": 1,
                    "temp_10": 1,
                    "var13": 1,
                    "var5": 1
                },
                "lVar14": {
                    "long_variable_14": 1
                },
                "lVar15": {
                    "long_variable_15": 1
                },
                "lVar16": {
                    "long_var_16": 1
                },
                "local_40": {
                    "list1": 1,
                    "local_array": 2,
                    "local_array_of_pointers": 1,
                    "local_array_ptr": 1,
                    "local_long_double_pointer_array": 1,
                    "local_long_pointer_40": 1,
                    "local_long_ptr_arr": 1,
                    "local_long_ptr_arr40": 1,
                    "local_long_ptr_array": 2,
                    "local_long_ptr_array_2": 1,
                    "local_long_ptr_ptr": 2,
                    "local_long_ptr_ptr40": 1,
                    "local_long_ptr_ptr_40": 1,
                    "local_long_ptr_ptr_array": 1,
                    "local_pointer_to_pointer_to_long_40": 1,
                    "local_ptr2": 1,
                    "local_ptr_arr": 1,
                    "local_ptr_array": 5,
                    "local_ptr_ptr": 1,
                    "local_ptr_var40": 1,
                    "long_ptr_ptr": 1,
                    "long_ptr_ptr_var2": 1
                },
                "local_48": {
                    "char_ptr1": 1,
                    "char_ptr_var3": 1,
                    "local_char": 1,
                    "local_char_array": 1,
                    "local_char_pointer": 2,
                    "local_char_pointer_48": 1,
                    "local_char_ptr": 7,
                    "local_char_ptr1": 3,
                    "local_char_ptr48": 2,
                    "local_char_ptr_48": 1,
                    "local_char_var48": 1,
                    "local_pointer_char_var48": 1,
                    "local_pointer_to_char_48": 1,
                    "local_ptr": 1,
                    "local_ptr_char_48": 1,
                    "local_str": 2,
                    "local_str_ptr": 1,
                    "local_string": 1,
                    "str3": 1
                },
                "param_1": {
                    "func_ptr": 1,
                    "function_address": 2,
                    "function_identifier": 1,
                    "function_param": 1,
                    "function_param_1": 1,
                    "param": 11,
                    "param1": 3,
                    "param_1": 3,
                    "param_a": 1,
                    "param_base": 1,
                    "param_pointer": 3,
                    "param_pointer_1": 1,
                    "param_ptr": 2
                },
                "param_2": {
                    "args": 1,
                    "arr": 1,
                    "array": 2,
                    "debug_info": 9,
                    "function_param_2": 1,
                    "param2": 3,
                    "param_array": 6,
                    "param_b": 1,
                    "param_pointer_2": 1,
                    "param_ptr_2": 1,
                    "ptr": 1,
                    "stab_data": 1,
                    "variable_2": 1,
                    "variable_param": 1
                },
                "param_3": {
                    "code": 2,
                    "code_param": 1,
                    "function_param_3": 1,
                    "instruction_type": 1,
                    "num1": 1,
                    "opcode": 9,
                    "param3": 3,
                    "param_c": 1,
                    "param_int1": 2,
                    "param_int_1": 3,
                    "param_integer_1": 1,
                    "param_value": 1,
                    "size": 1,
                    "stab_type": 1,
                    "type": 1,
                    "variable_3": 1
                },
                "param_4": {
                    "block_num": 1,
                    "count": 1,
                    "count_param": 1,
                    "flag": 3,
                    "function_param_4": 1,
                    "line_number": 1,
                    "num2": 1,
                    "num_params": 1,
                    "op_count": 1,
                    "operand": 1,
                    "operand_count": 1,
                    "opnd_type": 1,
                    "param4": 4,
                    "param_count": 2,
                    "param_d": 1,
                    "param_int2": 2,
                    "param_int_2": 3,
                    "param_integer_2": 1,
                    "size": 1,
                    "stab_unk": 1,
                    "variable_4": 1
                },
                "param_5": {
                    "addr": 1,
                    "address": 8,
                    "address_param": 1,
                    "current_address": 1,
                    "function_param_5": 1,
                    "line_addr": 1,
                    "line_num": 1,
                    "num3": 1,
                    "opnd_value": 1,
                    "param5": 3,
                    "param_address": 1,
                    "param_e": 1,
                    "param_ulong": 4,
                    "param_unsigned_long": 2,
                    "stab_offset": 1,
                    "value": 1,
                    "variable_5": 1
                },
                "param_6": {
                    "arg_string": 1,
                    "function_param_6": 1,
                    "name": 9,
                    "operand": 1,
                    "param6": 3,
                    "param_char_pointer": 1,
                    "param_f": 1,
                    "param_str": 2,
                    "param_string": 4,
                    "stab_str": 1,
                    "str": 2,
                    "string": 2,
                    "string_param": 1,
                    "variable_6": 1
                },
                "pcVar16": {
                    "char_pointer2": 1,
                    "char_pointer_var16": 1,
                    "char_ptr": 1,
                    "char_ptr16": 3,
                    "char_ptr2": 6,
                    "char_ptr_2": 2,
                    "char_ptr_var2": 2,
                    "char_ptr_var_2": 1,
                    "char_ptr_variable_16": 1,
                    "char_var16": 1,
                    "pc_var2": 1,
                    "pointer_char_var16": 1,
                    "pointer_to_char_16": 1,
                    "ptr16": 1,
                    "str": 1,
                    "str2": 1,
                    "str_ptr2": 1,
                    "temp_str_2": 1
                },
                "pcVar17": {
                    "ptr_char_var_17": 1
                },
                "pcVar8": {
                    "char3": 1,
                    "char_array": 1,
                    "char_pointer": 2,
                    "char_pointer_var8": 1,
                    "char_ptr": 7,
                    "char_ptr1": 1,
                    "char_ptr8": 3,
                    "char_ptr_var": 3,
                    "char_ptr_variable_8": 1,
                    "char_var8": 2,
                    "pc_var": 1,
                    "pointer_char_var8": 1,
                    "pointer_to_char": 1,
                    "ptr8": 1,
                    "ptr_char_var_8": 1,
                    "str1": 1,
                    "str_ptr": 1,
                    "temp_str": 1
                },
                "plVar16": {
                    "long_ptr": 1
                },
                "plVar7": {
                    "long1": 1,
                    "long_array": 3,
                    "long_pointer": 1,
                    "long_ptr": 4,
                    "long_ptr_var": 1,
                    "long_ptr_variable_7": 1,
                    "long_var": 5,
                    "long_var7": 5,
                    "pl_var": 1,
                    "pointer_to_long": 1,
                    "pointer_var7": 1,
                    "ptr3": 1,
                    "ptr7": 1,
                    "ptr_array": 1,
                    "ptr_array_2": 1,
                    "ptr_var_7": 1,
                    "temp_ptr_3": 1
                },
                "pplVar13": {
                    "long_double_pointer_pointer": 1,
                    "long_pointer_var13": 1,
                    "long_ptr_ptr": 2,
                    "long_ptr_ptr13": 3,
                    "long_ptr_ptr_var": 2,
                    "long_ptr_ptr_variable_13": 1,
                    "ppl_var": 1,
                    "ptr_ptr": 1,
                    "ptr_ptr_array": 1,
                    "ptr_ptr_array1": 2,
                    "ptr_ptr_long_var_13": 1,
                    "ptr_ptr_var": 1,
                    "ptr_ptr_var13": 1
                },
                "pplVar18": {
                    "long_ptr2": 1,
                    "long_ptr_ptr": 2,
                    "long_ptr_ptr18": 2,
                    "long_ptr_ptr_var": 2,
                    "pointer_to_pointer_to_long": 1,
                    "ptr18": 1,
                    "ptr_ptr": 1,
                    "ptr_ptr_array2": 1,
                    "ptr_ptr_long_var_18": 1,
                    "temp_ptr_4": 1
                },
                "print_bad_stab_error_message_00108fb9": {
                    "print_bad_stab_error_message": 1
                },
                "print_variable_debug_info_0010c283": {
                    "print_variable_debug_info": 1
                },
                "print_warning_message_00108fe8": {
                    "print_warning_message": 1
                },
                "puVar6": {
                    "allocated_ptr": 1,
                    "local_ptr1": 1,
                    "pointer_var": 1,
                    "pointer_var6": 2,
                    "pointer_variable_6": 1,
                    "ptr2": 2,
                    "ptr6": 1,
                    "ptr_array": 3,
                    "ptr_var": 4,
                    "ptr_var2": 3,
                    "ptr_var6": 5,
                    "ptr_var_2": 1,
                    "ptr_var_6": 1,
                    "ptr_variable_6": 1,
                    "pu_var": 1,
                    "temp_ptr_2": 1,
                    "undefined8_pointer": 1
                },
                "record_line_debug_info_0010bf86": {
                    "record_line_debug_info": 1
                },
                "record_or_create_variable_info_0010c139": {
                    "record_or_create_variable_info": 1
                },
                "record_parameter_debug_info_0010bd62": {
                    "record_parameter_debug_info": 1
                },
                "record_variable_debug_info_0010c05d": {
                    "record_variable_debug_info": 1
                },
                "source_debug_start_00108f08": {
                    "source_debug_start": 1
                },
                "strcmp": {
                    "compare_strings": 1
                },
                "strlen": {
                    "get_string_length": 1
                },
                "uVar14": {
                    "temp_11": 1,
                    "ulong1": 1,
                    "ulong_val1": 1,
                    "ulong_value1": 1,
                    "ulong_var": 8,
                    "ulong_var1": 5,
                    "ulong_var14": 6,
                    "ulong_var_14": 1,
                    "ulong_variable_14": 1,
                    "unsigned_long_var14": 1,
                    "unsigned_long_var_1": 1,
                    "var14": 1,
                    "var6": 1
                },
                "uVar15": {
                    "temp_12": 1,
                    "ulong2": 1,
                    "ulong_val2": 1,
                    "ulong_value2": 1,
                    "ulong_var15": 6,
                    "ulong_var2": 10,
                    "ulong_var_1": 1,
                    "ulong_var_15": 1,
                    "ulong_var_2": 2,
                    "ulong_variable_15": 1,
                    "unsigned_long_var15": 1,
                    "unsigned_long_var_2": 1,
                    "var15": 1,
                    "var7": 1
                },
                "uVar16": {
                    "uint_var16": 1
                },
                "uVar17": {
                    "temp_13": 1,
                    "uint1": 1,
                    "uint_val": 1,
                    "uint_value": 1,
                    "uint_var": 12,
                    "uint_var1": 1,
                    "uint_var17": 6,
                    "uint_variable_17": 2,
                    "unsigned_int_var": 1,
                    "unsigned_int_var17": 1,
                    "var17": 1,
                    "var8": 1
                },
                "uVar18": {
                    "ulong_var_18": 1
                },
                "uVar19": {
                    "ulong_var_19": 1
                },
                "uVar4": {
                    "result": 1,
                    "temp_4": 1,
                    "undefined1": 1,
                    "undefined_val": 1,
                    "undefined_value": 1,
                    "undefined_var": 14,
                    "undefined_var4": 7,
                    "undefined_var_4": 1,
                    "undefined_variable_4": 2,
                    "var4": 1
                },
                "uVar9": {
                    "long_var": 1,
                    "temp_6": 1,
                    "undefined2": 1,
                    "undefined8_var": 1,
                    "undefined_pointer": 1,
                    "undefined_val": 1,
                    "undefined_val2": 1,
                    "undefined_var2": 9,
                    "undefined_var9": 7,
                    "undefined_var_2": 3,
                    "undefined_var_9": 1,
                    "undefined_variable_9": 2,
                    "var9": 1
                },
                "update_variable_debug_info_0010c1c6": {
                    "update_variable_debug_info": 1
                },
                "xmalloc": {
                    "allocate_memory": 1
                },
                "xstrdup": {
                    "duplicate_string": 1
                }
            },
            "called": [
                "fprintf",
                "concat",
                "FUN_00108f08",
                "FUN_0010be88",
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_0010bf86",
                "FUN_00113d3a",
                "FUN_0010bd62",
                "free",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010bbd3",
                "FUN_0010bf20",
                "FUN_0010c139",
                "xstrdup",
                "FUN_00108fb9",
                "xrealloc",
                "strtod",
                "FUN_0010be1a",
                "FUN_0010c05d",
                "strtol",
                "FUN_00113ce0",
                "FUN_0010ee3f",
                "FUN_0010c218",
                "dcgettext",
                "FUN_00108fe8",
                "FUN_0010c1c6",
                "strchr",
                "strlen"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined process_debug_info_0011173a(undefined8 param,long *debug_info,int opcode,int param4,ulong address,\n                      char *name)\n\n{\n  char char_var1;\n  byte byte_var2;\n  void *ptr;\n  char char_var2;\n  undefined undefined_var;\n  int int_var;\n  undefined8 *ptr_var6;\n  long *long_var7;\n  char *char_ptr;\n  undefined8 undefined_var2;\n  long long_var10;\n  long long_var11;\n  long long_var12;\n  long **long_ptr_ptr13;\n  ulong ulong_var;\n  ulong ulong_var2;\n  char *char_ptr2;\n  uint uint_var;\n  long **long_ptr_ptr;\n  double double_var;\n  char *local_char_ptr;\n  long **local_ptr_array [2];\n  \n  if (debug_info[4] != 0) {\n    if (((opcode == 100) && (*name != '\\0')) && (debug_info[5] == address)) goto LAB_00111a06;\n    char_var2 = initialize_debug_info(param);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debug_info + 0x44) = 0;\n    *(undefined4 *)(debug_info + 8) = 0;\n    debug_info[9] = debug_info[4];\n    if (*(char *)(debug_info + 1) == '\\0') {\n      debug_info[6] = debug_info[5];\n    }\n    *(undefined4 *)(debug_info + 0x10) = 1;\n    ptr_var6 = (undefined8 *)xmalloc(8);\n    debug_info[0x11] = (long)ptr_var6;\n    *ptr_var6 = 0;\n    debug_info[4] = 0;\n  }\n  strlen(name);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefined_var = source_debug_start(param,name);\n    return undefined_var;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      int_var = strcmp(name,\"gcc2_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(debug_info + 8) = 2;\n        return 1;\n      }\n      int_var = strcmp(name,\"gcc_compiled.\");\n      if (int_var == 0) {\n        *(undefined4 *)(debug_info + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debug_info + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debug_info + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debug_info + 1) != '\\0') {\n            address = address + debug_info[7];\n          }\n          char_var2 = update_variable_debug_info(param,debug_info);\n          if (char_var2 != '\\0') {\n            char_var2 = handle_debug_end_function(param,address);\n            if (char_var2 != '\\0') {\n              *(undefined *)(debug_info + 0xc) = 0;\n              debug_info[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debug_info + 0xc) != '\\0') &&\n           ((address < (ulong)debug_info[0xd] || (debug_info[0xd] == 0xffffffffffffffff)))) {\n          debug_info[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debug_info + 0xc) != '\\0') {\n          ulong_var = address;\n          if (((*name != '\\0') && (ulong_var2 = debug_info[0xd], ulong_var2 != 0xffffffffffffffff)) &&\n             (ulong_var = ulong_var2, address < ulong_var2)) {\n            ulong_var = address;\n          }\n          char_var2 = update_variable_debug_info(param,debug_info);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          char_var2 = handle_debug_end_function(param,ulong_var);\n          if (char_var2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debug_info + 0xc) = 0;\n          debug_info[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)debug_info[4];\n        if (ptr == (void *)0x0) {\n          long_var12 = xstrdup(name);\n          debug_info[4] = long_var12;\n        }\n        else {\n          if (*name == '/') {\n            long_var12 = xstrdup(name);\n          }\n          else {\n            long_var12 = concat(ptr,name,0);\n          }\n          debug_info[4] = long_var12;\n          free(ptr);\n        }\n        debug_info[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          long_var12 = 0;\n          if (*(char *)(debug_info + 0xc) != '\\0') {\n            long_var12 = debug_info[7];\n          }\n          undefined_var = record_line_debug_info(param,(long)param4,long_var12 + address);\n          return undefined_var;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        long_var7 = (long *)xmalloc();\n        int_var = *(int *)(debug_info + 0x10);\n        long_var10 = debug_info[10];\n        long_var11 = debug_info[0xb];\n        long_var7[5] = 0;\n        long_var12 = debug_info[0x11];\n        *(int *)(long_var7 + 4) = int_var;\n        uint_var = int_var + 1;\n        *(uint *)(debug_info + 0x10) = uint_var;\n        *long_var7 = long_var11;\n        long_var7[1] = long_var10;\n        long_var7[2] = (long)name;\n        long_var7[3] = address;\n        debug_info[10] = (long)long_var7;\n        debug_info[0xb] = (long)long_var7;\n        long_var12 = xrealloc(long_var12,(ulong)uint_var << 3);\n        uint_var = *(uint *)(long_var7 + 4);\n        debug_info[0x11] = long_var12;\n        *(undefined8 *)(long_var12 + (ulong)uint_var * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr = strchr(name,0x3a);\n    if ((char_ptr != (char *)0x0) && ((char_ptr[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debug_info + 0xc) != '\\0') {\n        ulong_var = debug_info[0xd];\n        ulong_var2 = address;\n        if ((ulong_var != 0xffffffffffffffff) && (ulong_var2 = ulong_var, address < ulong_var)) {\n          ulong_var2 = address;\n        }\n        char_var2 = update_variable_debug_info(param,debug_info);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        char_var2 = handle_debug_end_function(param,ulong_var2);\n        if (char_var2 == '\\0') {\n          return 0;\n        }\n        debug_info[0xd] = -1;\n      }\n      if (*(char *)(debug_info + 1) != '\\0') {\n        debug_info[7] = address;\n      }\n      *(undefined *)(debug_info + 0xc) = 1;\n    }\n    local_char_ptr = strchr(name,0x3a);\n    if (local_char_ptr == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_ptr[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      char_var2 = name[1];\n      char_ptr2 = \"eh_throw\";\n      if (char_var2 != 'e') {\n        if (char_var2 < 'f') {\n          if ((char_var2 != 'X') && (char_var2 != '_')) {\nLAB_00111d1a:\n            undefined_var2 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_message(name,undefined_var2);\n          }\n        }\n        else {\n          char_ptr2 = \"this\";\n          if (char_var2 == 't') goto LAB_00111d62;\n          if (char_var2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr2 = (char *)0x0;\n      if ((name != local_char_ptr) && ((*name != ' ' || (local_char_ptr != name + 1)))) {\n        char_ptr2 = (char *)copy_and_null_terminate_string(name,(int)local_char_ptr - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte_var2 = local_char_ptr[1];\n    char_ptr = local_char_ptr + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_var2 * 2) >> 2) & 1 |\n        (byte_var2 == 0x2d || byte_var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_var2 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr = local_char_ptr + 2;\n    char_var2 = local_char_ptr[1];\n    switch(char_var2) {\n    case 'C':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      char_ptr = \"debug_record_label: not implemented\";\n      if (long_var12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      char_var2 = record_debug_function_0010bc80(param,char_ptr2,long_var12,char_var2 == 'F',address);\n      if (char_var2 != '\\0') {\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) goto LAB_0011208f;\n      long_var10 = debug_info[3];\n      long_var7 = (long *)debug_info[2];\n      char_var2 = *(char *)(*(long *)(*debug_info + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        local_char_ptr = char_ptr;\n        do {\n          if (*local_char_ptr != ';') {\n            return 1;\n          }\n          local_char_ptr = local_char_ptr + 1;\n          long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n        } while (long_var12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 2;\n      break;\n    case 'S':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char_var2 = local_char_ptr[2];\n      if (char_var2 == 't') {\n        char_ptr = local_char_ptr + 3;\n      }\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,char_ptr2,&local_char_ptr,local_ptr_array);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      char_var1 = *(char *)(debug_info + 0x35);\n      long_var7 = (long *)check_debug_tag_type_0010c6be(param,char_ptr2,long_var12);\n      if (long_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] != (long **)0x0) {\n        *local_ptr_array[0] = long_var7;\n      }\n      if (char_var1 != '\\0') goto LAB_001122f0;\n      long_ptr_ptr13 = (long **)(debug_info + 0x34);\n      long_ptr_ptr = (long **)debug_info[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr = local_char_ptr + 3;\n      if (((local_char_ptr[2] != '\\0') && (char_ptr = local_char_ptr + 4, local_char_ptr[3] == 'n')) &&\n         (char_ptr = local_char_ptr + 5, char_ptr2 = local_char_ptr + 4, local_char_ptr = char_ptr, *char_ptr2 == '0')) {\n        for (; char_ptr = local_char_ptr, *local_char_ptr != '\\0'; local_char_ptr = local_char_ptr + 1) {\n          if (*local_char_ptr == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 4;\n      break;\n    case 'c':\n      if (local_char_ptr[2] == '=') {\n        char_ptr = local_char_ptr + 4;\n        char_var2 = local_char_ptr[3];\n        local_char_ptr = char_ptr;\n        if (char_var2 == 'i') {\n          long_var12 = strtol(char_ptr,(char **)0x0,10);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var10 = initialize_memory_if_valid_pointers(param,char_ptr2,4);\n          if (long_var10 != 0) {\n            *(long *)(long_var10 + 0x20) = (long)(int)long_var12;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'r') {\n          double_var = strtod(char_ptr,(char **)0x0);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long_var12 = initialize_memory_if_valid_pointers(param,char_ptr2,5);\n          if (long_var12 != 0) {\n            *(double *)(long_var12 + 0x20) = double_var;\n            return 1;\n          }\n          return 0;\n        }\n        if (char_var2 == 'e') {\n          long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n          if (long_var12 == 0) {\n            return 0;\n          }\n          char_ptr = local_char_ptr;\n          if (*local_char_ptr == ',') {\n            long_var10 = strtol(local_char_ptr,(char **)0x0,10);\n            if (char_ptr2 == (char *)0x0) {\n              return 0;\n            }\n            long_var11 = initialize_memory_if_valid_pointers(param,char_ptr2,6);\n            if (long_var11 != 0) {\n              long_var7 = (long *)xmalloc(0x10);\n              *long_var7 = long_var12;\n              long_var7[1] = (long)(int)long_var10;\n              *(long **)(long_var11 + 0x20) = long_var7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_ptr[2] == 'F') {\n        local_char_ptr = local_char_ptr + 3;\n        long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n        if (long_var12 == 0) {\n          return 0;\n        }\n        undefined_var2 = initialize_memory_block_00113ce0(long_var12,0,0);\n        long_var12 = initialize_or_get_memory_block(undefined_var2);\n      }\n      else {\n        local_char_ptr = char_ptr;\n        long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      }\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 1;\n      break;\n    case 'r':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 5;\nLAB_001123e8:\n      char_var2 = record_or_create_variable_info(param,debug_info,char_ptr2,long_var12,undefined_var2,address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,char_ptr2,&local_char_ptr,local_ptr_array);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      long_var7 = (long *)initialize_memory_block_with_type_information(param,char_ptr2,long_var12);\n      if (long_var7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_var7;\n      return 1;\n    case 'v':\n      local_char_ptr = char_ptr;\n      long_var12 = FUNC_0010ee3f(param,debug_info,0,&local_char_ptr,0);\n      if (long_var12 == 0) {\n        return 0;\n      }\n      undefined_var2 = 3;\n    }\n    char_var2 = record_parameter_debug_info(param,char_ptr2,long_var12,undefined_var2,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    char_var2 = update_variable_debug_info(param,debug_info);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    char_var2 = end_block_debug_0010bf20(param,debug_info[7] + debug_info[6] + address);\n    if (char_var2 == '\\0') {\n      return 0;\n    }\n    debug_info = debug_info + 0xe;\n    *(int *)debug_info = *(int *)debug_info + -1;\n    char_ptr = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debug_info) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        char_ptr = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_var2 = dcgettext(0,char_ptr,5);\n      fprintf(standard_error_output,\"%s\\n\",undefined_var2);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        int_var = *(int *)(debug_info + 0x10);\n        *(uint *)(debug_info + 0x10) = int_var + 1U;\n        long_var12 = xrealloc(debug_info[0x11],(ulong)(int_var + 1U) << 3);\n        ptr_var6 = (undefined8 *)debug_info[0xb];\n        debug_info[0x11] = long_var12;\n        while( true ) {\n          if (ptr_var6 == (undefined8 *)0x0) {\n            undefined_var2 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_message(name,undefined_var2);\n            *(undefined8 *)(debug_info[0x11] + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptr_var6[3]) && (int_var = strcmp((char *)ptr_var6[2],name), int_var == 0))\n          break;\n          ptr_var6 = (undefined8 *)*ptr_var6;\n        }\n        *(undefined8 *)(long_var12 + (ulong)(*(int *)(debug_info + 0x10) - 1) * 8) = ptr_var6[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        long_var12 = debug_info[10];\n        if (long_var12 != 0) {\n          long_var10 = *(long *)(long_var12 + 8);\n          uint_var = *(uint *)(long_var12 + 0x20);\n          debug_info[10] = long_var10;\n          if ((uint_var < *(uint *)(debug_info + 0x10)) &&\n             (*(undefined8 *)(long_var12 + 0x28) = *(undefined8 *)(debug_info[0x11] + (ulong)uint_var * 8),\n             long_var10 != 0)) {\n            name = *(char **)(long_var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debug_info[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debug_info + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(debug_info + 0xc) != '\\0') {\n      char_var2 = debug_block_start_0010be88(param,debug_info[7] + debug_info[6] + address);\n      if (char_var2 == '\\0') {\n        return 0;\n      }\n      char_var2 = update_variable_debug_info(param,debug_info);\n      if (char_var2 != '\\0') {\n        *(int *)(debug_info + 0xe) = *(int *)(debug_info + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr = (char *)dcgettext(0,char_ptr,5);\n  fprintf(standard_error_output,char_ptr);\n  return 0;\ncode_r0x00111cc7:\n  local_char_ptr = local_char_ptr + 2;\n  local_char_ptr = strchr(local_char_ptr,0x3a);\n  if (local_char_ptr == (char *)0x0) {\n    char_ptr = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_ptr = char_ptr;\n    print_bad_stab_error_message(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (long_ptr_ptr == (long **)0x0) {\nLAB_001122f0:\n    if (char_var2 != 't') {\n      return 1;\n    }\n    long_var7 = (long *)initialize_memory_block_with_type_information(param,char_ptr2,long_var7);\n    if (long_var7 != (long *)0x0) {\n      if (local_ptr_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_ptr_array[0] = long_var7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)long_ptr_ptr[1] == *char_ptr2) &&\n     (int_var = strcmp((char *)long_ptr_ptr[1],char_ptr2), int_var == 0)) {\n    long_ptr_ptr[3] = long_var7;\n    *long_ptr_ptr13 = *long_ptr_ptr;\n    goto LAB_001122f0;\n  }\n  long_ptr_ptr13 = long_ptr_ptr;\n  long_ptr_ptr = (long **)*long_ptr_ptr;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_var10 < 1) {\nLAB_0011208f:\n    undefined_var2 = 1;\nLAB_001121c4:\n    char_var2 = record_variable_debug_info(param,char_ptr2,long_var12,undefined_var2,address);\njoined_r0x001123f8:\n    if (char_var2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr = *(char **)(*long_var7 + 8);\n  if ((char_var2 != '\\0') && (char_var2 == *char_ptr)) {\n    char_ptr = char_ptr + 1;\n  }\n  if ((*char_ptr == *char_ptr2) && (int_var = strcmp(char_ptr,char_ptr2), int_var == 0)) {\n    address = *(long *)(*long_var7 + 0x10) + *(long *)(*(long *)(*long_var7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_var10 = long_var10 + -1;\n  long_var7 = long_var7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "current_name": "process_debug_info_0011173a",
            "entrypoint": "0x0011173a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011173a": "process_debug_info_0011173a",
                "__ptr": "ptr",
                "_stderr": "standard_error_output",
                "bVar2": "byte_var2",
                "cVar1": "char_var1",
                "cVar3": "char_var2",
                "concat": "join_strings",
                "copy_and_null_terminate_string_00109a0b": "copy_and_null_terminate_string",
                "dVar19": "double_var",
                "dcgettext": "get_translated_string",
                "fprintf": "print_formatted_output_to_file",
                "free": "dealocate_memory",
                "handle_debug_end_function_0010be1a": "handle_debug_end_function",
                "iVar5": "int_var",
                "initialize_debug_info_0010bbd3": "initialize_debug_info",
                "initialize_memory_block_with_type_information_0010c218": "initialize_memory_block_with_type_information",
                "initialize_memory_if_valid_pointers_00112996": "initialize_memory_if_valid_pointers",
                "initialize_or_get_memory_block_00113d3a": "initialize_or_get_memory_block",
                "lVar10": "long_var10",
                "lVar11": "long_var11",
                "lVar12": "long_var12",
                "lVar13": "long_var13",
                "local_40": "local_ptr_array",
                "local_48": "local_char_ptr",
                "param_1": "param",
                "param_2": "debug_info",
                "param_3": "opcode",
                "param_4": "param4",
                "param_5": "address",
                "param_6": "name",
                "pcVar16": "char_ptr2",
                "pcVar8": "char_ptr",
                "plVar7": "long_var7",
                "pplVar13": "long_ptr_ptr13",
                "pplVar18": "long_ptr_ptr",
                "print_bad_stab_error_message_00108fb9": "print_bad_stab_error_message",
                "print_warning_message_00108fe8": "print_warning_message",
                "puVar6": "ptr_var6",
                "record_line_debug_info_0010bf86": "record_line_debug_info",
                "record_or_create_variable_info_0010c139": "record_or_create_variable_info",
                "record_parameter_debug_info_0010bd62": "record_parameter_debug_info",
                "record_variable_debug_info_0010c05d": "record_variable_debug_info",
                "source_debug_start_00108f08": "source_debug_start",
                "strcmp": "compare_strings",
                "strlen": "get_string_length",
                "uVar14": "ulong_var",
                "uVar15": "ulong_var2",
                "uVar17": "uint_var",
                "uVar4": "undefined_var",
                "uVar9": "undefined_var2",
                "update_variable_debug_info_0010c1c6": "update_variable_debug_info",
                "xmalloc": "allocate_memory",
                "xstrdup": "duplicate_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112502": {
            "additional_data": {
                "FUN_00112502": {
                    "check_and_process_data": 1,
                    "check_file_data": 5,
                    "file_processing_function": 1,
                    "process_and_check_data": 5,
                    "process_and_validate_data": 1,
                    "process_and_validate_files": 1,
                    "process_data": 8,
                    "process_file": 6,
                    "process_file_data": 1,
                    "process_files": 2
                },
                "cVar4": {
                    "file_check_result": 1,
                    "file_data_status": 3,
                    "file_processing_status": 1,
                    "file_status": 1,
                    "is_valid": 1,
                    "process_result": 2,
                    "processing_result": 1,
                    "result": 19,
                    "result_flag": 1,
                    "return_value": 1
                },
                "param_1": {
                    "data": 4,
                    "data_ptr": 7,
                    "data_struct_addr": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 3,
                    "data_structure_ptr": 1,
                    "file_data": 8,
                    "file_index": 1,
                    "file_info": 1,
                    "file_struct_ptr": 1,
                    "filename": 1,
                    "param": 1,
                    "param_1": 1
                },
                "param_2": {
                    "context": 1,
                    "data_ptr": 2,
                    "file_data": 7,
                    "file_data_ptr": 3,
                    "file_descriptor": 1,
                    "file_handle": 9,
                    "file_info": 1,
                    "file_path": 1,
                    "file_pointer": 1,
                    "file_ptr": 4,
                    "param_2": 1
                },
                "param_3": {
                    "data_size": 1,
                    "file_data_length": 1,
                    "file_data_size": 1,
                    "file_size": 20,
                    "limit": 2,
                    "max_value": 1,
                    "param_3": 1,
                    "size_limit": 1,
                    "threshold": 2,
                    "value": 1
                },
                "process_file_data_0010edb4": {
                    "process_data": 1,
                    "process_file_data": 2
                },
                "puVar2": {
                    "array_pointer": 1,
                    "array_ptr": 2,
                    "current_data_ptr": 1,
                    "data_array": 1,
                    "data_ptr": 2,
                    "entry_point": 1,
                    "entry_ptr": 1,
                    "file_array": 2,
                    "file_array_ptr": 1,
                    "file_buffer": 1,
                    "file_data": 1,
                    "file_data_pointer": 1,
                    "file_data_ptr": 2,
                    "file_entries": 2,
                    "file_info": 2,
                    "file_info_ptr": 2,
                    "file_ptr": 1,
                    "info_ptr": 1,
                    "next_structure": 1,
                    "pointer": 2,
                    "ptr_array": 2,
                    "sub_ptr": 1
                },
                "uVar1": {
                    "array_index": 2,
                    "count": 2,
                    "counter": 6,
                    "index": 19,
                    "iteration": 1
                },
                "uVar3": {
                    "current_element": 1,
                    "current_entry": 2,
                    "current_file": 2,
                    "current_file_handle": 1,
                    "current_file_ptr": 1,
                    "current_ptr": 2,
                    "current_structure": 1,
                    "file_data": 1,
                    "new_file_ptr": 1,
                    "next_data_ptr": 2,
                    "next_entry": 1,
                    "next_entry_point": 1,
                    "next_file": 2,
                    "next_file_data": 1,
                    "next_file_info": 1,
                    "next_function": 1,
                    "next_pointer": 1,
                    "next_ptr": 2,
                    "next_sub_ptr": 1,
                    "temp": 2,
                    "temp_value": 2,
                    "temp_var": 2
                }
            },
            "called": [
                "FUN_0010edb4"
            ],
            "calling": [
                "FUN_0011378f",
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "code": "\nundefined check_and_process_data_00112502(long file_data,undefined8 file_handle,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_info;\n  undefined8 next_file;\n  char result;\n  \n  do {\n    file_info = *(undefined8 **)(file_data + 0x40);\n    if (file_info == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_data + 0x48), index < 10 && (file_info[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_info[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = process_file_data(file_handle,*(undefined8 *)(file_info[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(file_data + 0x48) = *(int *)(file_data + 0x48) + 1;\n    }\n    next_file = *file_info;\n    *(undefined4 *)(file_data + 0x48) = 0;\n    *(undefined8 *)(file_data + 0x40) = next_file;\n  } while( true );\n}\n\n",
            "current_name": "check_and_process_data_00112502",
            "entrypoint": "0x00112502",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112502": "check_and_process_data_00112502",
                "cVar4": "result",
                "param_1": "file_data",
                "param_2": "file_handle",
                "param_3": "file_size",
                "process_file_data_0010edb4": "process_file_data",
                "puVar2": "file_info",
                "uVar1": "index",
                "uVar3": "next_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011256b": {
            "additional_data": {
                "F": {
                    "print_matching_formats": 1
                },
                "FUN_0011256b": {
                    "print_matching_formats": 30
                },
                "__format": {
                    "error_message_format": 2,
                    "format": 1,
                    "format_message": 3,
                    "format_string": 17,
                    "message": 1,
                    "message_format": 1
                },
                "_stderr": {
                    "standard_error": 6,
                    "stderr": 1
                },
                "_stdout": {
                    "standard_output": 6,
                    "stdout": 1
                },
                "param_1": {
                    "format_array": 1,
                    "format_list": 7,
                    "format_strings": 11,
                    "formats": 8,
                    "input_formats": 1,
                    "string_array": 1
                },
                "plVar2": {
                    "current_format": 17,
                    "current_format_string": 2,
                    "current_string": 2,
                    "format": 1,
                    "format_iterator": 1,
                    "ptr": 1
                },
                "uVar1": {
                    "data": 1,
                    "data_pointer": 1,
                    "default_format": 2,
                    "default_locale": 1,
                    "default_val": 1,
                    "default_value": 3,
                    "format": 1,
                    "format_message": 1,
                    "format_string_ptr": 1,
                    "matching_format": 2,
                    "matching_formats": 5,
                    "translation_handle": 1,
                    "user_data": 1
                }
            },
            "called": [
                "fprintf",
                "fputc",
                "free",
                "fflush",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\n\n\nvoid print_matching_formats_0011256b(long *format_strings)\n\n{\n  undefined8 matching_formats;\n  char *format_string;\n  long *current_format;\n  \n  fflush(standard_output);\n  matching_formats = DAT_001275e0;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standard_error,format_string,matching_formats);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(standard_error,\" %s\");\n  }\n  free(format_strings);\n  fputc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_matching_formats_0011256b",
            "entrypoint": "0x0011256b",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "format_string",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "param_1": "format_strings",
                "plVar2": "current_format",
                "uVar1": "matching_formats"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001125fa": {
            "additional_data": {
                "DAT_00127a30": {
                    "formatted_string": 1
                },
                "DAT_00127a38": {
                    "max_string_length": 1
                },
                "FUN_001125fa": {
                    "construct_modified_string": 1,
                    "construct_string": 1,
                    "generate_formatted_string": 1,
                    "get_concatenated_string": 1,
                    "get_filename_from_archive": 1,
                    "get_formatted_filename": 2,
                    "get_formatted_string": 9,
                    "get_modified_file_name": 2,
                    "get_modified_file_path": 1,
                    "get_modified_filename": 5,
                    "get_modified_string": 7
                },
                "__assert_fail": {
                    "assert_fail": 1,
                    "assert_failure": 1,
                    "assertion_failed": 1
                },
                "__s": {
                    "filename": 1,
                    "formatted_string": 5,
                    "input_string": 3,
                    "modified_file_path": 1,
                    "modified_filename": 1,
                    "modified_name": 1,
                    "modified_string": 4,
                    "original_file_name": 1,
                    "original_filename": 5,
                    "original_string": 3,
                    "output_string": 2,
                    "result": 1,
                    "source_filename": 1,
                    "source_string": 2
                },
                "param_1": {
                    "archive": 1,
                    "args": 1,
                    "argument_list": 1,
                    "arguments": 8,
                    "input_args": 1,
                    "input_parameters": 1,
                    "input_params": 5,
                    "input_string": 1,
                    "input_strings": 2,
                    "param_array": 1,
                    "parameters": 6,
                    "string_array": 1,
                    "strings": 2
                },
                "ppcVar2": {
                    "additional_data": 1,
                    "archive_entry": 1,
                    "archive_filename": 7,
                    "archive_filename_ptr": 1,
                    "archive_name_pointer": 1,
                    "file_info": 1,
                    "file_pointer": 1,
                    "file_ptr": 1,
                    "filename_pointer": 1,
                    "parameter2": 2,
                    "pointer": 1,
                    "ppc_var": 1,
                    "ptr_argument": 1,
                    "ptr_string": 1,
                    "ptr_to_char": 1,
                    "ptr_to_char_array": 1,
                    "ptr_to_char_pointer": 1,
                    "ptr_to_char_ptr": 1,
                    "ptr_to_filename": 1,
                    "ptr_to_filename_array": 1,
                    "ptr_to_param": 1,
                    "second_param": 1,
                    "temp_string_ptr": 1,
                    "var2": 1
                },
                "sVar3": {
                    "archive_filename_length": 4,
                    "archive_name_length": 1,
                    "entry_length": 1,
                    "file1_size": 1,
                    "file_info_length": 1,
                    "file_len": 1,
                    "file_length": 1,
                    "filename_length": 1,
                    "filename_length1": 1,
                    "input_str_len": 1,
                    "len_arg1": 1,
                    "len_first_param": 1,
                    "len_ptr_to_char_ptr": 1,
                    "len_string1": 1,
                    "length1": 6,
                    "length_archive_filename": 1,
                    "length_param1": 1,
                    "length_param2": 1,
                    "length_var1": 1,
                    "original_length": 1,
                    "parameter2_length": 1,
                    "string1_length": 1
                },
                "sVar4": {
                    "file2_size": 1,
                    "file_name_length": 1,
                    "filename_length": 1,
                    "filename_length2": 1,
                    "formatted_string_length": 1,
                    "input_length": 1,
                    "input_string_length": 2,
                    "len_formatted_string": 2,
                    "len_second_param": 1,
                    "len_string2": 1,
                    "length2": 6,
                    "length_input": 1,
                    "length_param1": 1,
                    "length_source_string": 1,
                    "length_var2": 1,
                    "original_filename_length": 2,
                    "original_name_len": 1,
                    "original_string_length": 1,
                    "output_str_len": 1,
                    "source_length": 1,
                    "source_string_length": 1,
                    "string2_length": 1
                },
                "uVar1": {
                    "final_string_length": 2,
                    "formatted_filename_length": 1,
                    "formatted_length": 1,
                    "formatted_string_length": 2,
                    "modified_filename_length": 2,
                    "modified_filename_size": 1,
                    "modified_string_length": 1,
                    "new_length": 2,
                    "new_string_length": 2,
                    "required_length": 1,
                    "total_len": 2,
                    "total_length": 10,
                    "total_string_length": 1
                }
            },
            "called": [
                "free",
                "sprintf",
                "xmalloc",
                "__assert_fail",
                "strlen"
            ],
            "calling": [
                "FUN_001152b6",
                "FUN_00105828",
                "FUN_001126c0",
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_00107976"
            ],
            "code": "\nchar * get_formatted_string_001125fa(char **arguments)\n\n{\n  ulong total_length;\n  char **archive_filename;\n  size_t length1;\n  size_t length2;\n  char *original_filename;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive_filename = (char **)arguments[0x1d];\n  original_filename = *arguments;\n  if ((archive_filename != (char **)0x0) && ((*(byte *)((long)archive_filename + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*archive_filename);\n    length2 = strlen(original_filename);\n    total_length = length1 + 3 + length2;\n    if (DAT_00127a38 < total_length) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (total_length >> 1) + total_length;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    original_filename = DAT_00127a30;\n  }\n  return original_filename;\n}\n\n",
            "current_name": "get_formatted_string_001125fa",
            "entrypoint": "0x001125fa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001125fa": "get_formatted_string_001125fa",
                "__assert_fail": "assert_fail",
                "__s": "original_filename",
                "param_1": "arguments",
                "ppcVar2": "archive_filename",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar1": "total_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001126c0": {
            "additional_data": {
                "FUN_001126c0": {
                    "display_error_message": 1,
                    "print_bfd_error_message": 1,
                    "print_error": 7,
                    "print_error_details": 2,
                    "print_error_message": 19,
                    "print_error_msg": 1
                },
                "iVar1": {
                    "bfd_error": 6,
                    "bfd_error_code": 1,
                    "error": 1,
                    "error_check": 3,
                    "error_code": 1,
                    "error_flag": 1,
                    "error_result": 1,
                    "error_value": 1
                },
                "in_AL": {
                    "boolean_check": 1,
                    "boolean_flag": 1,
                    "condition": 2,
                    "condition_flag": 2,
                    "enable_context": 1,
                    "error_flag": 1,
                    "flag": 9,
                    "flag1": 1,
                    "input_flag": 4,
                    "is_additional_error": 1,
                    "is_error": 2,
                    "is_error_known": 1
                },
                "local_100": {
                    "buffer_length": 1,
                    "buffer_size": 7,
                    "buffer_size1": 4,
                    "buffer_size_1": 1,
                    "formatted_str_length1": 1,
                    "formatted_string_size": 1,
                    "local1": 1,
                    "local_flag1": 1,
                    "local_var1": 1,
                    "local_variable1": 2,
                    "param_length1": 1,
                    "size1": 4,
                    "size_var1": 1
                },
                "local_48": {
                    "copy8": 1,
                    "error8_copy": 1,
                    "error_code16": 1,
                    "error_code8_copy": 3,
                    "error_code8_saved": 1,
                    "local8": 2,
                    "local_err_code8": 1,
                    "local_error_code8": 2,
                    "local_error_flag_8": 1,
                    "local_error_param8": 1,
                    "local_param8": 3,
                    "localized_error_code8": 1,
                    "param12": 1,
                    "param8": 1,
                    "param8_1": 1,
                    "param8_copy": 3,
                    "var10": 1
                },
                "local_58": {
                    "copy7": 1,
                    "error7_copy": 1,
                    "error_code15": 1,
                    "error_code7_copy": 3,
                    "error_code7_saved": 1,
                    "local7": 2,
                    "local_err_code7": 1,
                    "local_error_code7": 2,
                    "local_error_flag_7": 1,
                    "local_error_param7": 1,
                    "local_param7": 3,
                    "localized_error_code7": 1,
                    "param11": 1,
                    "param7": 1,
                    "param7_1": 1,
                    "param7_copy": 3,
                    "var9": 1
                },
                "local_68": {
                    "copy6": 1,
                    "error6_copy": 1,
                    "error_code14": 1,
                    "error_code6_copy": 3,
                    "error_code6_saved": 1,
                    "local6": 2,
                    "local_err_code6": 1,
                    "local_error_code6": 2,
                    "local_error_flag_6": 1,
                    "local_error_param6": 1,
                    "local_param6": 3,
                    "localized_error_code6": 1,
                    "param10": 1,
                    "param6": 1,
                    "param6_1": 1,
                    "param6_copy": 3,
                    "var8": 1
                },
                "local_78": {
                    "copy5": 1,
                    "error5_copy": 1,
                    "error_code13": 1,
                    "error_code5_copy": 3,
                    "error_code5_saved": 1,
                    "local5": 2,
                    "local_err_code5": 1,
                    "local_error_code5": 2,
                    "local_error_flag_5": 1,
                    "local_error_param5": 1,
                    "local_param5": 3,
                    "localized_error_code5": 1,
                    "param5": 1,
                    "param5_1": 1,
                    "param5_copy": 3,
                    "param9": 1,
                    "var7": 1
                },
                "local_88": {
                    "copy4": 1,
                    "error4_copy": 1,
                    "error_code12": 1,
                    "error_code4_copy": 3,
                    "error_code4_saved": 1,
                    "local4": 2,
                    "local_err_code4": 1,
                    "local_error_code4": 2,
                    "local_error_flag_4": 1,
                    "local_error_param4": 1,
                    "local_error_sub_code": 1,
                    "local_param4": 2,
                    "localized_error_code4": 1,
                    "param4": 1,
                    "param4_1": 1,
                    "param4_copy": 3,
                    "param8": 1,
                    "var6": 1
                },
                "local_98": {
                    "copy3": 1,
                    "error3_copy": 1,
                    "error_code11": 1,
                    "error_code3_copy": 3,
                    "error_code3_saved": 1,
                    "local3": 2,
                    "local_err_code3": 1,
                    "local_error_code": 1,
                    "local_error_code3": 2,
                    "local_error_flag_3": 1,
                    "local_error_param3": 1,
                    "local_param3": 2,
                    "localized_error_code3": 1,
                    "param3": 1,
                    "param3_1": 1,
                    "param3_copy": 3,
                    "param7": 1,
                    "var5": 1
                },
                "local_a8": {
                    "copy2": 1,
                    "error2_copy": 1,
                    "error_code10": 1,
                    "error_code2_copy": 3,
                    "error_code2_saved": 1,
                    "error_code_copy": 1,
                    "local2": 2,
                    "local_err_code2": 1,
                    "local_error_class": 1,
                    "local_error_code2": 2,
                    "local_error_flag_2": 1,
                    "local_error_param2": 1,
                    "local_param2": 2,
                    "localized_error_code2": 1,
                    "param2": 1,
                    "param2_1": 1,
                    "param2_copy": 2,
                    "param6": 1,
                    "var4": 1
                },
                "local_b8": {
                    "copy1": 1,
                    "error1_copy": 1,
                    "error_code1_copy": 3,
                    "error_code1_saved": 1,
                    "error_code9": 1,
                    "error_code_copy": 2,
                    "error_type1": 1,
                    "error_type_copy": 1,
                    "local1": 2,
                    "local_err_code1": 1,
                    "local_error_code1": 2,
                    "local_error_flag_1": 1,
                    "local_error_param1": 1,
                    "local_param1": 2,
                    "local_severity": 1,
                    "localized_error_code1": 1,
                    "param1": 1,
                    "param5": 1,
                    "var3": 1
                },
                "local_c0": {
                    "arg12": 1,
                    "detail2": 1,
                    "error_param2_copy": 1,
                    "error_param4": 1,
                    "extra_data2": 1,
                    "extra_param4": 1,
                    "local10": 1,
                    "local_additional_info2": 1,
                    "local_additional_info_2": 1,
                    "local_param14": 3,
                    "local_param2": 2,
                    "localized_additional_param2": 1,
                    "param14": 1,
                    "param14_1": 1,
                    "param14_copy": 6,
                    "param14_saved": 1,
                    "param4": 1,
                    "param_14_copy": 1,
                    "param_value2": 1,
                    "unknown_local2": 1,
                    "var2": 1
                },
                "local_c8": {
                    "arg11": 1,
                    "detail1": 1,
                    "error_param1_copy": 1,
                    "error_param3": 1,
                    "extra_data1": 1,
                    "extra_param3": 1,
                    "local9": 1,
                    "local_additional_info1": 1,
                    "local_additional_info_1": 1,
                    "local_param1": 2,
                    "local_param13": 3,
                    "localized_additional_param1": 1,
                    "param13": 1,
                    "param13_1": 1,
                    "param13_copy": 6,
                    "param13_saved": 1,
                    "param3": 1,
                    "param_13_copy": 1,
                    "param_value1": 1,
                    "unknown_local1": 1,
                    "var1": 1
                },
                "local_e8": {
                    "buffer": 7,
                    "error_buffer": 1,
                    "format_buffer": 1,
                    "formatted_string_buffer": 1,
                    "local_array": 7,
                    "local_buffer": 4,
                    "local_data": 2,
                    "local_error_buffer": 2,
                    "local_stack_buffer": 1,
                    "local_string_buffer": 1
                },
                "local_f0": {
                    "buffer": 1,
                    "buffer_data": 1,
                    "format_arg2": 1,
                    "formatted_str_arr": 1,
                    "formatted_string_buffer": 1,
                    "local4": 1,
                    "local_array": 1,
                    "local_buffer": 4,
                    "local_error_info": 1,
                    "local_error_message": 1,
                    "local_pointer2": 2,
                    "local_ptr2": 2,
                    "local_var": 1,
                    "local_var2": 2,
                    "local_var4": 1,
                    "local_variable4": 2,
                    "local_variables": 1,
                    "pointer2": 1,
                    "ptr2": 2,
                    "temp2": 1
                },
                "local_f8": {
                    "additional_info_ptr": 1,
                    "buffer": 1,
                    "format_arg1": 1,
                    "format_arg_list": 1,
                    "local3": 1,
                    "local_pointer1": 2,
                    "local_ptr1": 2,
                    "local_var1": 2,
                    "local_var3": 1,
                    "local_variable3": 2,
                    "pointer1": 1,
                    "ptr1": 2,
                    "ptr_1": 1,
                    "ptr_stack": 1,
                    "stack_arg1": 1,
                    "stack_pointer": 3,
                    "stack_pointer_param": 1,
                    "stack_ptr": 1,
                    "stack_var1": 1,
                    "stack_variable1": 1,
                    "temp1": 1
                },
                "local_fc": {
                    "buffer_format_length": 1,
                    "buffer_length": 1,
                    "buffer_size2": 4,
                    "buffer_size_2": 1,
                    "decimal_width": 1,
                    "format_size": 1,
                    "formatted_size": 3,
                    "formatted_str_length2": 1,
                    "formatted_string_constraint": 1,
                    "local2": 1,
                    "local_flag1": 1,
                    "local_flag2": 1,
                    "local_var2": 1,
                    "local_variable2": 2,
                    "param_length2": 1,
                    "size2": 4,
                    "size_var2": 1
                },
                "param_1": {
                    "arg1": 1,
                    "error1": 4,
                    "error_code": 6,
                    "error_code1": 11,
                    "error_param1": 2,
                    "error_type": 6,
                    "severity": 1
                },
                "param_10": {
                    "error_code": 6,
                    "error_code_length": 2,
                    "error_message2": 1,
                    "error_message_length": 3,
                    "error_message_size": 1,
                    "error_size": 2,
                    "error_string_length": 1,
                    "format_length": 1,
                    "formatted_string_length": 7,
                    "formatted_string_size": 4,
                    "string_length": 2,
                    "string_size": 1
                },
                "param_11": {
                    "additional_error_message": 1,
                    "array_pointer": 1,
                    "error_array": 3,
                    "error_code": 3,
                    "error_code_arr": 1,
                    "error_code_array": 1,
                    "error_code_pointer": 1,
                    "error_code_ptr": 1,
                    "error_data": 1,
                    "error_info": 1,
                    "error_message3": 1,
                    "error_message_data": 1,
                    "error_param": 1,
                    "error_string": 1,
                    "format_array": 1,
                    "formatted_string": 6,
                    "formatted_string_array": 1,
                    "formatted_string_ptr": 1,
                    "param11": 2,
                    "param_array": 1,
                    "string_ptr": 1
                },
                "param_12": {
                    "additional_error_message": 1,
                    "additional_info": 2,
                    "additional_string": 1,
                    "error_context": 1,
                    "error_description": 1,
                    "error_message": 2,
                    "format": 6,
                    "format_specifier": 1,
                    "format_string": 14,
                    "formatted_output": 1,
                    "param12": 1
                },
                "param_13": {
                    "additional_info1": 1,
                    "additional_info_1": 1,
                    "additional_param1": 2,
                    "arg9": 1,
                    "error_detail1": 1,
                    "error_param1": 2,
                    "extra_info1": 1,
                    "extra_param1": 1,
                    "param1": 3,
                    "param13": 15,
                    "param_13": 1,
                    "unknown_param1": 1,
                    "value1": 1
                },
                "param_14": {
                    "additional_info2": 1,
                    "additional_info_2": 1,
                    "additional_param2": 2,
                    "arg10": 1,
                    "error_detail2": 1,
                    "error_param2": 2,
                    "extra_info2": 1,
                    "extra_param2": 1,
                    "param14": 15,
                    "param2": 3,
                    "param_14": 1,
                    "unknown_param2": 1,
                    "value2": 1
                },
                "param_2": {
                    "arg2": 1,
                    "error2": 4,
                    "error_class": 1,
                    "error_code": 3,
                    "error_code2": 11,
                    "error_flag_1": 1,
                    "error_param2": 2,
                    "error_status": 1,
                    "param2": 6,
                    "parameter2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "error3": 4,
                    "error_code": 1,
                    "error_code3": 11,
                    "error_flag_2": 1,
                    "error_param3": 2,
                    "error_sub_status": 1,
                    "param3": 9,
                    "parameter3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "error4": 4,
                    "error_code4": 11,
                    "error_flag": 1,
                    "error_flag_3": 1,
                    "error_param4": 2,
                    "error_sub_code": 1,
                    "param4": 9,
                    "parameter4": 1
                },
                "param_5": {
                    "arg5": 1,
                    "error5": 4,
                    "error_code5": 11,
                    "error_flag_4": 1,
                    "error_param5": 2,
                    "param5": 11,
                    "parameter5": 1
                },
                "param_6": {
                    "arg6": 1,
                    "error6": 4,
                    "error_code6": 11,
                    "error_flag_5": 1,
                    "error_param6": 2,
                    "param6": 11,
                    "parameter6": 1
                },
                "param_7": {
                    "arg7": 1,
                    "error7": 4,
                    "error_code7": 11,
                    "error_flag_6": 1,
                    "error_param7": 2,
                    "param7": 11,
                    "parameter7": 1
                },
                "param_8": {
                    "arg8": 1,
                    "error8": 4,
                    "error_code8": 11,
                    "error_flag_7": 1,
                    "error_param8": 2,
                    "param8": 11,
                    "parameter8": 1
                },
                "param_9": {
                    "error_code": 1,
                    "error_message": 19,
                    "error_message1": 1,
                    "error_message_1": 1,
                    "error_msg": 1,
                    "error_string": 1,
                    "format_string": 1,
                    "formatted_error_message": 1,
                    "formatted_error_string": 2,
                    "formatted_string": 2,
                    "message_ptr": 1
                },
                "uVar2": {
                    "error_message": 6,
                    "error_message_copy": 1,
                    "error_message_ptr": 1,
                    "error_message_text": 1,
                    "error_msg": 3,
                    "error_string": 3
                }
            },
            "called": [
                "fprintf",
                "vfprintf",
                "bfd_errmsg",
                "fputs",
                "fflush",
                "FUN_001125fa",
                "dcgettext",
                "fwrite",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00108466",
                "FUN_00104ea2",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00104d25",
                "FUN_00114690",
                "FUN_00116110",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\n\n\nvoid print_bfd_error_message_001126c0(undefined4 error_code1,undefined4 error_code2,undefined4 error_code3,undefined4 error_code4,\n                 undefined4 error_code5,undefined4 error_code6,undefined4 error_code7,undefined4 param8,\n                 long error_message,long formatted_string_length,long *formatted_string,char *format_string,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int bfd_error;\n  undefined8 error_message;\n  undefined4 buffer_size;\n  undefined4 size2;\n  undefined *stack_pointer;\n  undefined *local_buffer;\n  undefined buffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code1_copy;\n  undefined4 error_code2_copy;\n  undefined4 error_code3_copy;\n  undefined4 param4_copy;\n  undefined4 error_code5_copy;\n  undefined4 param6_copy;\n  undefined4 local_param7;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code1_copy = error_code1;\n    error_code2_copy = error_code2;\n    error_code3_copy = error_code3;\n    param4_copy = error_code4;\n    error_code5_copy = error_code5;\n    param6_copy = error_code6;\n    local_param7 = error_code7;\n    param8_copy = param8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  bfd_error = bfd_get_error();\n  if (bfd_error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (formatted_string_length != 0) {\n    if (error_message == 0) {\n      error_message = get_formatted_string_001125fa(formatted_string_length);\n    }\n    if ((formatted_string != (long *)0x0) && (*formatted_string != 0)) {\n      fprintf(_stderr,\": %s[%s]\",error_message);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",error_message);\nLAB_001127c1:\n  if (format_string != (char *)0x0) {\n    stack_pointer = &stack0x00000008;\n    local_buffer = buffer;\n    buffer_size = 0x20;\n    size2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,format_string,&buffer_size);\n  }\n  fprintf(_stderr,\": %s\\n\",error_message);\n  return;\n}\n\n",
            "current_name": "print_bfd_error_message_001126c0",
            "entrypoint": "0x001126c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001126c0": "print_bfd_error_message_001126c0",
                "iVar1": "bfd_error",
                "in_AL": "flag",
                "local_100": "buffer_size",
                "local_48": "param8_copy",
                "local_58": "local_param7",
                "local_68": "param6_copy",
                "local_78": "error_code5_copy",
                "local_88": "param4_copy",
                "local_98": "error_code3_copy",
                "local_a8": "error_code2_copy",
                "local_b8": "error_code1_copy",
                "local_c0": "param14_copy",
                "local_c8": "param13_copy",
                "local_e8": "buffer",
                "local_f0": "local_buffer",
                "local_f8": "stack_pointer",
                "local_fc": "size2",
                "param_1": "error_code1",
                "param_10": "formatted_string_length",
                "param_11": "formatted_string",
                "param_12": "format_string",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "error_code2",
                "param_3": "error_code3",
                "param_4": "error_code4",
                "param_5": "error_code5",
                "param_6": "error_code6",
                "param_7": "error_code7",
                "param_8": "param8",
                "param_9": "error_message",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011283f": {
            "additional_data": {
                "FUN_0011283f": {
                    "check_access_and_stat": 1,
                    "check_and_return_directory": 1,
                    "check_directory": 4,
                    "check_directory_access": 3,
                    "check_directory_permission": 4,
                    "check_directory_permissions": 4,
                    "find_directory": 5,
                    "find_executable_path": 1,
                    "get_directory": 1,
                    "get_directory_path": 2,
                    "validate_and_get_directory": 1,
                    "validate_directory": 3,
                    "validate_directory_path": 1
                },
                "iVar1": {
                    "access_result": 24,
                    "permission": 1
                },
                "param_1": {
                    "directory_path": 9,
                    "file_path": 1,
                    "filepath": 1,
                    "input_path": 3,
                    "path": 16,
                    "path_to_check": 1
                },
                "param_2": {
                    "current_directory": 1,
                    "default_directory": 5,
                    "default_path": 4,
                    "dir_path": 1,
                    "directory": 11,
                    "executable_path": 1,
                    "found_directory_path": 1,
                    "output_path": 2,
                    "result": 3,
                    "valid_directory_path": 1,
                    "valid_path": 1
                },
                "sStack_a8": {
                    "directory_stats": 1,
                    "file_info": 6,
                    "file_stat": 9,
                    "file_stat_info": 1,
                    "file_stats": 7,
                    "file_status": 1,
                    "path_status": 1,
                    "stat_buffer": 1,
                    "stat_info": 2,
                    "stats": 1
                }
            },
            "called": [
                "stat",
                "access"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nchar * check_directory_permission_0011283f(char *path,char *directory)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((directory == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        directory = path;\n      }\n    }\n  }\n  return directory;\n}\n\n",
            "current_name": "check_directory_permission_0011283f",
            "entrypoint": "0x0011283f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "iVar1": "access_result",
                "param_1": "path",
                "param_2": "directory",
                "sStack_a8": "file_stat"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112894": {
            "additional_data": {
                "FUN_00112894": {
                    "allocate_and_initialize_array": 1,
                    "allocate_and_initialize_data": 1,
                    "allocate_and_initialize_data_structure": 1,
                    "allocate_memory_and_initialize": 1,
                    "create_data_structure": 4,
                    "create_dynamic_array": 1,
                    "create_dynamic_memory": 1,
                    "create_initialized_block": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 2,
                    "initialize_data_structure": 11,
                    "initialize_memory": 5,
                    "initialize_structure": 1
                },
                "bVar4": {
                    "byte_counter": 2,
                    "byte_increment": 1,
                    "byte_index": 2,
                    "byte_value": 10,
                    "byte_var": 2,
                    "byte_variable": 1,
                    "constant_zero": 1,
                    "counter": 1,
                    "flag_value": 1,
                    "increment": 1,
                    "initial_value": 1,
                    "loop_index": 1,
                    "offset": 4,
                    "temp_byte": 3
                },
                "lVar3": {
                    "count": 2,
                    "counter": 4,
                    "loop_counter": 23,
                    "loop_index": 1,
                    "loop_variable": 1
                },
                "param_1": {
                    "arg1": 1,
                    "base_address": 2,
                    "data": 5,
                    "data1": 1,
                    "data_1": 1,
                    "data_item": 1,
                    "data_pointer": 2,
                    "input": 1,
                    "input1": 5,
                    "input_1": 2,
                    "input_param1": 1,
                    "input_parameter_1": 1,
                    "input_value": 1,
                    "param1": 1,
                    "value": 2,
                    "value1": 4
                },
                "param_2": {
                    "arg2": 1,
                    "byte1": 1,
                    "byte_value": 3,
                    "data2": 1,
                    "data_2": 1,
                    "flag": 8,
                    "input2": 5,
                    "input_2": 2,
                    "input_param2": 1,
                    "input_parameter_2": 1,
                    "param2": 1,
                    "value": 1,
                    "value1": 1,
                    "value2": 4
                },
                "param_3": {
                    "arg3": 1,
                    "data1": 1,
                    "data3": 1,
                    "data_3": 1,
                    "data_field_1": 1,
                    "input3": 5,
                    "input_3": 2,
                    "input_param3": 1,
                    "input_parameter_3": 1,
                    "param1": 1,
                    "param3": 5,
                    "parameter1": 1,
                    "value1": 5,
                    "value2": 1,
                    "value3": 4
                },
                "param_4": {
                    "arg4": 1,
                    "data2": 1,
                    "data4": 1,
                    "data_4": 1,
                    "data_field_2": 1,
                    "input4": 5,
                    "input_4": 2,
                    "input_param4": 1,
                    "input_parameter_4": 1,
                    "param2": 1,
                    "param4": 5,
                    "parameter2": 1,
                    "value2": 5,
                    "value3": 1,
                    "value4": 4
                },
                "puVar1": {
                    "allocated_memory": 1,
                    "allocated_ptr": 1,
                    "array_ptr": 2,
                    "block_ptr": 1,
                    "buffer": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "data_structure": 14,
                    "data_structure_pointer": 1,
                    "dynamic_memory": 1,
                    "memory_block": 5,
                    "structure": 1,
                    "structure_array": 1
                },
                "puVar2": {
                    "allocation": 2,
                    "current_address": 1,
                    "current_element": 2,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_ptr": 3,
                    "current_value": 1,
                    "dynamic_memory": 1,
                    "initialized_memory": 1,
                    "next_ptr": 1,
                    "pointer": 2,
                    "ptr": 1,
                    "ptr_array": 1,
                    "temp_pointer": 4,
                    "temp_ptr": 7,
                    "temporary_ptr": 1,
                    "value_pointer": 1
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined8 *\nallocate_and_initialize_data_structure_00112894(undefined8 input1,undefined flag,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *data_structure;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_value;\n  \n  byte_value = 0;\n  data_structure = (undefined8 *)xmalloc(0x1b0);\n  temp_ptr = data_structure;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_value * -8 + 4);\n  }\n  *data_structure = input1;\n  *(undefined *)(data_structure + 1) = flag;\n  data_structure[2] = input3;\n  data_structure[3] = input4;\n  *(undefined4 *)(data_structure + 0x10) = 1;\n  temp_ptr = (undefined8 *)xmalloc(8);\n  data_structure[0xd] = 0xffffffffffffffff;\n  data_structure[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return data_structure;\n}\n\n",
            "current_name": "allocate_and_initialize_data_structure_00112894",
            "entrypoint": "0x00112894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112894": "allocate_and_initialize_data_structure_00112894",
                "bVar4": "byte_value",
                "lVar3": "loop_counter",
                "param_1": "input1",
                "param_2": "flag",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "data_structure",
                "puVar2": "temp_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112904": {
            "additional_data": {
                "FUN_00112904": {
                    "allocate_and_initialize_array": 1,
                    "allocate_and_initialize_data": 1,
                    "allocate_memory": 1,
                    "allocate_memory_for_data": 1,
                    "initialize_data": 4,
                    "initialize_data_struct": 1,
                    "initialize_data_structure": 7,
                    "initialize_memory": 8,
                    "initialize_memory_block": 5,
                    "initialize_parameters": 1,
                    "initialize_struct": 1
                },
                "param_1": {
                    "data": 1,
                    "data1": 2,
                    "data_size": 1,
                    "data_value1": 1,
                    "first_param": 1,
                    "first_parameter": 1,
                    "initial_value": 3,
                    "input_param1": 1,
                    "input_value1": 4,
                    "parameter1": 1,
                    "size": 2,
                    "source": 1,
                    "source_address": 2,
                    "value1": 9,
                    "value_one": 1
                },
                "param_2": {
                    "data2": 2,
                    "data_value2": 1,
                    "default_value": 1,
                    "destination": 1,
                    "destination_address": 2,
                    "input_param2": 1,
                    "input_value2": 4,
                    "parameter2": 1,
                    "second_param": 1,
                    "second_parameter": 1,
                    "second_value": 2,
                    "secondary_value": 1,
                    "size": 1,
                    "val": 1,
                    "value": 1,
                    "value2": 9,
                    "value_two": 1
                },
                "puVar1": {
                    "allocated_array": 1,
                    "allocated_data": 1,
                    "allocated_memory": 6,
                    "allocated_memory_ptr": 1,
                    "allocated_pointer": 2,
                    "data_pointer": 2,
                    "data_struct": 1,
                    "data_structure": 2,
                    "dynamic_array": 1,
                    "dynamic_memory_pointer": 1,
                    "memory_block": 7,
                    "memory_block_ptr": 1,
                    "memory_buffer": 1,
                    "memory_ptr": 1,
                    "new_memory_block": 1,
                    "new_struct": 1,
                    "ptr": 1
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00113cb9",
                "FUN_00113b71",
                "FUN_0010c95e",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113b4a",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_0010c6be",
                "FUN_00113ce0",
                "FUN_00113da9",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00113b98",
                "FUN_0010c892",
                "FUN_0010c218",
                "FUN_00113d6e",
                "FUN_00113e17",
                "FUN_00113e23",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_memory_block_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *memory_block;\n  \n  memory_block = (undefined4 *)xmalloc(0x18);\n  *memory_block = value1;\n  memory_block[1] = value2;\n  *(undefined (*) [16])(memory_block + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_block_00112904",
            "entrypoint": "0x00112904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112904": "initialize_memory_block_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112925": {
            "additional_data": {
                "FUN_00112925": {
                    "initialize_array": 4,
                    "initialize_array_with_parameters": 1,
                    "initialize_data": 4,
                    "initialize_data_structure": 8,
                    "initialize_data_structures": 1,
                    "initialize_memory": 13
                },
                "ZEXT816": {
                    "extend_to64_bits": 1,
                    "extend_to64bits": 1,
                    "set_zero": 1,
                    "zero_extended": 1
                },
                "bVar5": {
                    "byte_flag": 2,
                    "byte_val": 1,
                    "byte_value": 4,
                    "byte_var": 4,
                    "flag": 4,
                    "index": 1,
                    "init_value": 1,
                    "is_first_element": 1,
                    "is_first_iteration": 2,
                    "is_zero": 1,
                    "loop_condition": 1,
                    "offset": 2,
                    "reset_flag": 1,
                    "temp_flag": 1,
                    "zero": 2,
                    "zero_byte": 2,
                    "zero_value": 1
                },
                "lVar3": {
                    "count": 5,
                    "counter": 5,
                    "iteration": 1,
                    "iteration_count": 1,
                    "loop_counter": 17,
                    "loop_index": 2
                },
                "param_1": {
                    "array": 4,
                    "array_pointer": 2,
                    "array_ptr": 4,
                    "data": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_structure": 5,
                    "data_structure_pointer": 1,
                    "data_structure_ptr": 2,
                    "memory": 2,
                    "memory_array": 4,
                    "memory_block": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1
                },
                "param_2": {
                    "address": 3,
                    "param1": 2,
                    "param2": 1,
                    "param2_value": 2,
                    "param_2": 1,
                    "param_value": 3,
                    "value": 19
                },
                "param_3": {
                    "count": 1,
                    "flag1": 1,
                    "param1": 1,
                    "param2": 2,
                    "param3": 13,
                    "param3_value": 2,
                    "param_3": 1,
                    "param_value2": 1,
                    "size": 5,
                    "size1": 1,
                    "value": 1,
                    "value1": 2
                },
                "param_4": {
                    "capacity": 1,
                    "count": 1,
                    "flag2": 1,
                    "length": 3,
                    "param2": 1,
                    "param3": 2,
                    "param4": 13,
                    "param4_value": 2,
                    "param_4": 1,
                    "param_value3": 1,
                    "size": 2,
                    "size2": 1,
                    "value2": 2
                },
                "pauVar2": {
                    "array_ptr": 1,
                    "existing_array": 6,
                    "existing_array_ptr": 3,
                    "existing_block": 1,
                    "existing_data": 4,
                    "existing_data_pointer": 1,
                    "existing_data_ptr": 2,
                    "existing_data_structure": 1,
                    "existing_memory": 4,
                    "existing_memory_array": 2,
                    "existing_memory_block": 1,
                    "existing_memory_ptr": 1,
                    "existing_structure": 1,
                    "new_array_ptr": 1,
                    "pau_data_pointer": 1,
                    "ptr_array": 1
                },
                "puVar1": {
                    "allocated_memory": 4,
                    "array_pointer": 1,
                    "data_array": 1,
                    "data_array_ptr": 1,
                    "data_pointer": 3,
                    "data_ptr": 3,
                    "initialized_memory": 1,
                    "memory": 1,
                    "memory_block": 2,
                    "memory_ptr": 1,
                    "new_array": 1,
                    "new_array_ptr": 1,
                    "new_data": 2,
                    "new_data_structure": 1,
                    "new_memory": 1,
                    "new_memory_block": 1,
                    "new_structure": 1,
                    "ptr": 1,
                    "result": 3,
                    "result_ptr": 1
                },
                "puVar4": {
                    "current_block": 1,
                    "current_block_ptr": 1,
                    "current_data_ptr": 1,
                    "current_element": 4,
                    "current_memory": 5,
                    "current_memory_block": 1,
                    "current_pointer": 3,
                    "current_ptr": 4,
                    "loop_pointer": 1,
                    "next_element": 1,
                    "temp": 1,
                    "temp_data": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 4,
                    "temp_var": 1
                },
                "xmalloc": {
                    "allocate_memory": 4
                }
            },
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00112996",
                "FUN_0010c05d",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_0010c218"
            ],
            "code": "\nundefined4 *\ninitialize_memory_00112925(undefined (**data_structure) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocated_memory;\n  undefined (*existing_array) [16];\n  long loop_counter;\n  undefined4 *current_memory;\n  byte flag;\n  \n  flag = 0;\n  allocated_memory = (undefined4 *)xmalloc(0x28);\n  current_memory = allocated_memory;\n  for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *current_memory = 0;\n    current_memory = current_memory + (ulong)flag * -2 + 1;\n  }\n  existing_array = *data_structure;\n  *(undefined8 *)(allocated_memory + 2) = value;\n  allocated_memory[5] = param3;\n  allocated_memory[6] = param4;\n  if (existing_array == (undefined (*) [16])0x0) {\n    existing_array = (undefined (*) [16])xmalloc(0x10);\n    *existing_array = zero_extended(0);\n    *data_structure = existing_array;\n    *(undefined (**) [16])(*existing_array + 8) = existing_array;\n  }\n  **(undefined8 **)(*existing_array + 8) = allocated_memory;\n  *(undefined4 **)(*existing_array + 8) = allocated_memory;\n  return allocated_memory;\n}\n\n",
            "current_name": "initialize_memory_00112925",
            "entrypoint": "0x00112925",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "ZEXT816": "zero_extended",
                "bVar5": "flag",
                "lVar3": "loop_counter",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "pauVar2": "existing_array",
                "puVar1": "allocated_memory",
                "puVar4": "current_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112996": {
            "additional_data": {
                "FUN_00112996": {
                    "add_to_file_namespace": 1,
                    "initialize_memory": 13,
                    "initialize_memory_if_needed": 1,
                    "initialize_memory_if_valid": 2,
                    "initialize_memory_if_valid_input": 1,
                    "initialize_memory_if_valid_pointer": 1,
                    "initialize_memory_if_valid_pointers": 4,
                    "initialize_or_print_debug_message": 1,
                    "initialize_or_print_debug_statement": 1,
                    "initialize_or_print_error": 5,
                    "initialize_or_print_error_message": 1
                },
                "_stderr": {
                    "error_output_stream": 1,
                    "error_stream": 1,
                    "stderr": 1
                },
                "dcgettext": {
                    "get_localized_string": 1
                },
                "initialize_memory_00112925": {
                    "initialize_memory": 1
                },
                "lVar2": {
                    "address": 1,
                    "allocated_memory": 1,
                    "data_pointer": 1,
                    "dynamic_address": 1,
                    "memory_address": 3,
                    "memory_offset": 1,
                    "memory_size": 8,
                    "offset": 9,
                    "offset_1": 1,
                    "pointer_offset": 2,
                    "ptr1": 1,
                    "temp_variable": 1,
                    "var1": 1
                },
                "param_1": {
                    "arg1": 2,
                    "base_address": 1,
                    "current_file_ptr": 1,
                    "file_address": 3,
                    "file_descriptor": 1,
                    "file_info": 2,
                    "file_info_ptr": 1,
                    "file_namespace_ptr": 1,
                    "file_ptr": 1,
                    "input": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_pointer": 2,
                    "memory_address": 7,
                    "memory_block": 1,
                    "pointer": 1,
                    "pointer_to_data": 1,
                    "pointer_to_struct": 1,
                    "structure_pointer": 1
                },
                "param_2": {
                    "arg2": 3,
                    "config_param": 1,
                    "memory_param": 1,
                    "param2": 8,
                    "param2_value": 1,
                    "param_2": 15,
                    "parameter_2": 2
                },
                "param_3": {
                    "arg3": 3,
                    "data_param": 1,
                    "namespace_param": 1,
                    "param3": 8,
                    "param3_value": 1,
                    "param_3": 15,
                    "parameter_3": 2
                },
                "uVar1": {
                    "error": 1,
                    "error_message": 4,
                    "localized_error_message": 1,
                    "memory_initialization_result": 1,
                    "message": 1,
                    "result": 19,
                    "return_value": 4
                }
            },
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00112925"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\nundefined8 initialize_memory_if_valid_pointers_00112996(long memory_address,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(memory_address + 8) != 0) && (*(long *)(memory_address + 0x10) != 0)) {\n    offset = *(long *)(memory_address + 0x10) + 0x10;\n    if (*(long *)(memory_address + 0x20) != 0) {\n      offset = *(long *)(memory_address + 0x20) + 0x28;\n    }\n    result = initialize_memory(offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(error_output_stream,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_if_valid_pointers_00112996",
            "entrypoint": "0x00112996",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112996": "initialize_memory_if_valid_pointers_00112996",
                "_stderr": "error_output_stream",
                "dcgettext": "get_localized_string",
                "initialize_memory_00112925": "initialize_memory",
                "lVar2": "offset",
                "param_1": "memory_address",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001129f4": {
            "additional_data": {
                "FUN_001129f4": {
                    "decompile_and_extract": 1,
                    "extract_data": 2,
                    "extract_data_from_binary": 1,
                    "extract_function_data": 1,
                    "extract_value": 2,
                    "extract_value_from_binary": 4,
                    "extract_value_from_pointer": 1,
                    "get_data": 1,
                    "get_linked_value": 1,
                    "get_next_value": 1,
                    "get_return_value": 3,
                    "get_value_from_array": 1,
                    "get_value_from_pointer": 1,
                    "parse_data": 1,
                    "retrieve_value_from_data": 1,
                    "reverse_and_retrieve_data": 1,
                    "reverse_array": 1,
                    "reverse_lookup": 2
                },
                "param_1": {
                    "array": 2,
                    "data": 3,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 2,
                    "input_array": 19,
                    "input_list": 1,
                    "input_values": 1
                },
                "piVar2": {
                    "current_array": 2,
                    "current_element": 3,
                    "current_list": 1,
                    "current_pointer": 12,
                    "current_ptr": 4,
                    "next_pointer": 1,
                    "next_values": 1,
                    "ptr_temp": 1,
                    "ptr_to_nested_array": 1,
                    "ptr_to_next_data": 1,
                    "temp_ptr": 3,
                    "temp_ptr_value": 1
                },
                "puVar1": {
                    "array_pointer": 5,
                    "array_ptr": 1,
                    "data_pointer": 1,
                    "info_ptr": 1,
                    "next_array": 2,
                    "next_list": 1,
                    "pointer": 1,
                    "pointer_to_array": 4,
                    "pointer_to_value": 2,
                    "ptr": 1,
                    "ptr_data": 1,
                    "ptr_to_array": 3,
                    "ptr_to_data": 1,
                    "ptr_to_input": 1,
                    "ptr_to_input_array": 1,
                    "ptr_to_values": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "value_pointer": 1
                }
            },
            "called": [
                "FUN_001129f4"
            ],
            "calling": [
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 extract_value_from_binary_001129f4(int *input_array)\n\n{\n  undefined8 *array_pointer;\n  int *current_pointer;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    array_pointer = (undefined8 *)(input_array + 4);\n    current_pointer = **(int ***)(undefined8 *)*array_pointer;\n  } while ((input_array != current_pointer) && (input_array = current_pointer, current_pointer != (int *)0x0));\n  return ((undefined8 *)*array_pointer)[1];\n}\n\n",
            "current_name": "extract_value_from_binary_001129f4",
            "entrypoint": "0x001129f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001129f4": "extract_value_from_binary_001129f4",
                "param_1": "input_array",
                "piVar2": "current_pointer",
                "puVar1": "array_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112a33": {
            "additional_data": {
                "FUN_00112a33": {
                    "improve_debug_info": 1,
                    "process_debug_data": 1,
                    "process_debug_info": 18,
                    "process_debug_information": 2,
                    "record_debug_info": 4
                },
                "allocate_and_initialize_slots_0010da0b": {
                    "allocate_and_initialize_slots": 3
                },
                "check_debug_tag_type_0010c6be": {
                    "check_debug_tag_type": 3
                },
                "initialize_memory_block_with_type_information_0010c218": {
                    "initialize_memory_block_with_type_info": 1,
                    "initialize_memory_block_with_type_information": 2
                },
                "lVar2": {
                    "block_info": 1,
                    "debug_result": 1,
                    "debug_type": 1,
                    "long_var": 1,
                    "memory_block": 1,
                    "result": 5,
                    "result2": 1,
                    "return_value": 4,
                    "tag_type": 1,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "type_info": 6,
                    "type_result": 1,
                    "value": 6
                },
                "param_1": {
                    "arg1": 6,
                    "debug_info_ptr": 1,
                    "first_param": 1,
                    "func_ptr": 1,
                    "param": 1,
                    "param1": 10,
                    "param_0": 1,
                    "param_1": 8,
                    "param_ptr": 1,
                    "unknown_param": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 6,
                    "buffer": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "debug_info": 1,
                    "file_ptr": 1,
                    "info_struct_ptr": 1,
                    "input_pointer": 1,
                    "param2": 7,
                    "param_2": 1,
                    "param_pointer": 1,
                    "param_ptr": 1,
                    "record_ptr": 2,
                    "record_start": 1,
                    "second_param": 1,
                    "source_address": 2,
                    "src_buffer": 1
                },
                "param_3": {
                    "arg3": 6,
                    "debug_record_ptr": 1,
                    "param3": 10,
                    "param_2": 1,
                    "param_3": 8,
                    "param_obj": 1,
                    "param_ptr2": 1,
                    "struct_ptr": 1,
                    "third_param": 1,
                    "unknown_param2": 1
                },
                "param_4": {
                    "arg4": 1,
                    "byte_val": 1,
                    "debug_info_type": 3,
                    "debug_tag": 4,
                    "debug_type": 14,
                    "fourth_param": 1,
                    "info_type": 2,
                    "param4": 1,
                    "param_4": 1,
                    "record_type": 1,
                    "type": 1,
                    "type_index": 1
                },
                "param_5": {
                    "arg4": 1,
                    "arg5": 4,
                    "debug_data": 1,
                    "debug_info": 1,
                    "debug_record": 2,
                    "debug_records_ptr": 1,
                    "fifth_param": 1,
                    "info_ptr": 1,
                    "param5": 9,
                    "param_3": 1,
                    "param_5": 7,
                    "param_ptr3": 1,
                    "unknown_param3": 1
                },
                "param_6": {
                    "arg5": 1,
                    "arg6": 5,
                    "data_ptr": 1,
                    "debug_data": 1,
                    "param6": 10,
                    "param_4": 1,
                    "param_6": 9,
                    "param_ptr4": 1,
                    "sixth_param": 1,
                    "unknown_param4": 1
                },
                "param_7": {
                    "arg6": 1,
                    "arg7": 3,
                    "debug_flag": 2,
                    "flag": 1,
                    "flags": 5,
                    "info_flag": 1,
                    "param7": 8,
                    "param_5": 1,
                    "param_7": 7,
                    "seventh_param": 1,
                    "uint_val": 1
                },
                "plVar3": {
                    "allocated_slots": 10,
                    "debug_slot_ptr": 1,
                    "debug_slots": 2,
                    "info_pointer": 1,
                    "initialized_slots": 1,
                    "long_ptr": 1,
                    "slot": 1,
                    "slot_pointer": 4,
                    "slot_ptr": 7,
                    "slots": 3
                },
                "record_parameter_debug_info_0010bd62": {
                    "record_parameter_debug_info": 3
                },
                "record_variable_debug_info_0010c05d": {
                    "record_variable_debug_info": 3
                },
                "uVar1": {
                    "result": 24,
                    "return_value": 6,
                    "success": 1
                }
            },
            "called": [
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c6be",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nbool process_debug_info_00112a33(undefined8 param1,long param2,undefined8 param3,byte debug_type,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long type_info;\n  long *allocated_slots;\n  \n  if (debug_type < 0x12) {\n    if (debug_type != 0) {\n      switch(debug_type) {\n      case 1:\n        result = record_variable_debug_info(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable_debug_info(param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable_debug_info(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_debug_info(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type_info = check_debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (type_info == 0) {\n          return false;\n        }\n        allocated_slots = (long *)allocate_and_initialize_slots(param1,param3);\n        *allocated_slots = type_info;\n        break;\n      case 0xd:\n        type_info = initialize_memory_block_with_type_information(param5,*(undefined8 *)(param2 + 8));\n        return type_info != 0;\n      case 0x11:\n        result = record_parameter_debug_info(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (debug_type == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable_debug_info(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "current_name": "process_debug_info_00112a33",
            "entrypoint": "0x00112a33",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112a33": "process_debug_info_00112a33",
                "allocate_and_initialize_slots_0010da0b": "allocate_and_initialize_slots",
                "check_debug_tag_type_0010c6be": "check_debug_tag_type",
                "initialize_memory_block_with_type_information_0010c218": "initialize_memory_block_with_type_information",
                "lVar2": "type_info",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "debug_type",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "plVar3": "allocated_slots",
                "record_parameter_debug_info_0010bd62": "record_parameter_debug_info",
                "record_variable_debug_info_0010c05d": "record_variable_debug_info",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112b6e": {
            "additional_data": {
                "FUN_00112b6e": {
                    "check_real_type_circular_dependency": 1,
                    "extract_debug_info": 1,
                    "extract_debug_type_info": 1,
                    "extract_real_type": 5,
                    "extract_real_type_debug_info": 1,
                    "extract_real_type_from_debug_info": 1,
                    "extract_real_type_hierarchy": 1,
                    "find_debug_type": 2,
                    "find_real_type": 9,
                    "get_real_type": 5,
                    "process_debug_info": 2
                },
                "__format": {
                    "error_format": 1,
                    "error_message": 6,
                    "error_message_format": 5,
                    "format_str": 2,
                    "format_string": 16,
                    "msg_format": 1
                },
                "bVar5": {
                    "check_result": 1,
                    "circular_debug_info": 1,
                    "circular_flag": 1,
                    "has_circular_info": 1,
                    "is_circular": 25,
                    "is_circular_dependency": 1,
                    "is_equal": 1
                },
                "iVar1": {
                    "array_length": 2,
                    "array_size": 2,
                    "array_value": 1,
                    "first_element": 2,
                    "first_element_value": 1,
                    "first_value": 5,
                    "input_val": 1,
                    "input_value": 2,
                    "root_type_value": 1,
                    "type_code": 2,
                    "type_flag": 1,
                    "type_id": 1,
                    "type_indicator": 1,
                    "type_param": 1,
                    "type_value": 4,
                    "value": 2
                },
                "local_10": {
                    "current_info": 1,
                    "current_input": 2,
                    "current_input_array": 1,
                    "current_input_ptr": 2,
                    "current_input_type": 1,
                    "current_type": 4,
                    "current_type_index": 1,
                    "current_type_info": 1,
                    "current_type_param": 1,
                    "input_type": 1,
                    "local_input_array": 3,
                    "local_input_ptr": 1,
                    "local_param": 1,
                    "local_value_ptr": 1,
                    "nested_input_ptr": 1,
                    "saved_input_array": 1,
                    "temp_array": 2,
                    "temp_array3": 1,
                    "temp_input": 1,
                    "temp_type_hierarchy_root": 1,
                    "type_stack": 2,
                    "visited_type_info": 1
                },
                "local_18": {
                    "current_debug_info": 1,
                    "current_debug_info_array": 1,
                    "current_debug_info_list": 1,
                    "current_info_ptr": 1,
                    "debug_info": 1,
                    "debug_info_stack": 1,
                    "debug_stack": 1,
                    "local_debug_info": 2,
                    "local_debug_info_ptr": 1,
                    "local_debug_ptr": 2,
                    "local_pointer_array": 1,
                    "nested_debug_info": 1,
                    "nested_info": 1,
                    "previous_debug_info": 1,
                    "previous_elements": 1,
                    "processed_debug_info_array": 1,
                    "saved_debug_info": 1,
                    "temp_array2": 1,
                    "temp_debug": 1,
                    "temp_debug_info": 1,
                    "temp_info": 1,
                    "temp_visited_nodes": 1,
                    "visited_debug_info": 4,
                    "visited_info": 1,
                    "visited_ptrs": 2
                },
                "param_1": {
                    "input": 2,
                    "input_array": 10,
                    "input_param": 1,
                    "input_ptr": 4,
                    "input_type": 7,
                    "type_hierarchy_root": 1,
                    "type_index": 1,
                    "type_info": 2,
                    "type_param": 1,
                    "type_ptr": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "debug_info": 19,
                    "debug_info_array": 3,
                    "debug_info_ptr": 4,
                    "debug_list": 1,
                    "debug_ptr": 1,
                    "input_array2": 1,
                    "pointer_array": 1,
                    "visited_nodes": 1
                },
                "piVar3": {
                    "output_array": 2,
                    "recursive_result": 1,
                    "result": 15,
                    "result_array": 5,
                    "result_ptr": 7
                },
                "plVar4": {
                    "current_debug": 1,
                    "current_debug_info": 11,
                    "current_element": 1,
                    "current_info": 4,
                    "current_node": 1,
                    "current_pointer": 1,
                    "current_ptr": 3,
                    "debug_entry": 1,
                    "debug_ptr": 2,
                    "info": 1,
                    "info_pointer": 1,
                    "info_ptr": 1,
                    "next_debug_info": 1,
                    "ptr": 1,
                    "temp_array": 1
                },
                "uVar2": {
                    "extracted_value": 9,
                    "value": 1,
                    "value_from_binary": 1
                }
            },
            "called": [
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00113b1e",
                "FUN_0010ee3f",
                "FUN_0010922b"
            ],
            "code": "\n\n\nint * extract_real_type_from_debug_info_00112b6e(int *input_array,long *debug_info)\n\n{\n  int first_value;\n  undefined8 extracted_value;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *visited_debug_info;\n  int *current_type;\n  \n  first_value = *input_array;\n  if ((first_value != 1) && (1 < first_value - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      extracted_value = extract_value_from_binary_001129f4(input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,extracted_value);\n      return (int *)0x0;\n    }\n  }\n  visited_debug_info = debug_info;\n  current_type = input_array;\n  if (first_value - 0x16U < 2) {\n    result = (int *)extract_real_type_from_debug_info_00112b6e((*(undefined8 **)(input_array + 4))[1],&visited_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result) {\n    return input_array;\n  }\n  if (result == (int *)0x0) {\n    return input_array;\n  }\n  result = (int *)extract_real_type_from_debug_info_00112b6e(result,&visited_debug_info);\n  return result;\n}\n\n",
            "current_name": "extract_real_type_from_debug_info_00112b6e",
            "entrypoint": "0x00112b6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112b6e": "extract_real_type_from_debug_info_00112b6e",
                "__format": "format_string",
                "bVar5": "is_circular",
                "iVar1": "first_value",
                "local_10": "current_type",
                "local_18": "visited_debug_info",
                "param_1": "input_array",
                "param_2": "debug_info",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "uVar2": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00112c1f": {
            "additional_data": {
                "FUN_00112c1f": {
                    "extract_and_process_data": 1,
                    "process_and_improve": 1,
                    "process_data": 2,
                    "process_debug_data": 3,
                    "process_debug_info": 3,
                    "reverse_and_process_data": 1,
                    "reverse_and_process_type": 1
                },
                "abort": {
                    "terminate": 1
                },
                "bVar14": {
                    "b_var14": 1,
                    "b_var14_boolean": 1,
                    "bool_val": 1,
                    "bool_var": 12,
                    "bool_var14": 1,
                    "bool_var_14": 1,
                    "bool_variable": 1,
                    "boolean": 1,
                    "boolean_flag": 1,
                    "condition": 1,
                    "flag2": 2,
                    "is_current_entry": 1,
                    "temp_b_var14": 1,
                    "temp_flag": 1,
                    "var10": 1,
                    "var8": 1,
                    "var9": 1,
                    "var_bool": 1
                },
                "cVar5": {
                    "c_var5_char": 1,
                    "char_val": 1,
                    "char_var": 10,
                    "char_var5": 1,
                    "char_variable": 2,
                    "character_var": 1,
                    "condition": 1,
                    "flag": 7,
                    "result": 2,
                    "status": 1,
                    "var2": 2,
                    "var_flag": 1
                },
                "calloc": {
                    "allocate_zero": 1
                },
                "dcgettext": {
                    "dc_get_text": 1,
                    "lang_translation": 1
                },
                "extract_real_type_from_debug_info_00112b6e": {
                    "extract_real_type": 1,
                    "extract_real_type_from_debug": 1
                },
                "fprintf": {
                    "f_printf": 1
                },
                "free": {
                    "release": 1
                },
                "iVar9": {
                    "current_element": 1,
                    "entry_type": 1,
                    "i_var": 1,
                    "i_var9": 3,
                    "i_var9_value": 1,
                    "i_var_9": 1,
                    "index": 1,
                    "int_value": 1,
                    "int_var": 6,
                    "int_var2": 1,
                    "temp_i_var9": 1,
                    "type_id": 1,
                    "var2": 1,
                    "var3": 3,
                    "var4": 1,
                    "var5": 1,
                    "var9": 1,
                    "var_1": 1,
                    "var_9": 1,
                    "var_extracted2": 1
                },
                "initialize_data_structure_00109d3e": {
                    "init_data_struct": 1,
                    "init_data_structure": 1
                },
                "initialize_data_structure_00109fdd": {
                    "init_data_struct2": 1
                },
                "initialize_data_structure_0010b800": {
                    "init_data_struct": 1,
                    "init_data_structure": 1
                },
                "initialize_or_create_data_structure_00109d97": {
                    "init_or_create_data_structure": 1
                },
                "initialize_or_create_data_structure_0010b948": {
                    "init_or_create_data_struct": 1,
                    "init_or_create_data_structure": 1
                },
                "initialize_or_increment_data_structure_00109dfe": {
                    "init_or_inc_data_struct": 1,
                    "init_or_inc_data_structure": 1
                },
                "lVar2": {
                    "current_entry": 1,
                    "current_value": 1,
                    "data": 1,
                    "data_offset": 1,
                    "l_var2": 1,
                    "l_var2_value": 1,
                    "local_var": 1,
                    "local_var2": 2,
                    "long_var": 5,
                    "long_var2": 2,
                    "long_var_1": 1,
                    "long_variable": 1,
                    "type_info_ptr": 1,
                    "val_1": 1,
                    "value": 2,
                    "var1": 6,
                    "var2": 1,
                    "var_current_element": 1
                },
                "local_3c": {
                    "local_3c": 1,
                    "local_3c_value": 1,
                    "local_counter": 2,
                    "local_val": 1,
                    "local_value": 2,
                    "local_var": 11,
                    "local_var3": 1,
                    "local_var3c": 1,
                    "local_var_3c": 1,
                    "local_variable": 2,
                    "loop_counter": 1,
                    "temp_var": 1,
                    "uint_var2": 1,
                    "uint_var_local": 1,
                    "var10": 1,
                    "var11": 1,
                    "var9": 1
                },
                "lookup_and_initialize_data_structure_0010bba1": {
                    "lookup_and_init_data_struct": 1,
                    "lookup_and_init_data_structure": 1
                },
                "malloc": {
                    "allocate": 1
                },
                "memcpy": {
                    "memory_copy": 1
                },
                "param_1": {
                    "data": 1,
                    "info": 6,
                    "info_id": 1,
                    "input_data": 1,
                    "input_param": 8,
                    "input_parameter": 1,
                    "input_val": 1,
                    "input_value": 2,
                    "original_param": 2,
                    "param1": 3,
                    "param_1": 3,
                    "param_1_address": 1,
                    "param_read": 1
                },
                "param_2": {
                    "data": 3,
                    "data_param": 3,
                    "data_structure": 3,
                    "improvement_param": 1,
                    "name": 1,
                    "new_param": 1,
                    "output_data": 1,
                    "output_param": 1,
                    "output_val": 1,
                    "output_value": 1,
                    "param": 1,
                    "param2": 4,
                    "param_2": 6,
                    "param_2_value": 1,
                    "param_object": 1,
                    "param_print": 1,
                    "param_with_meaningful_name": 1
                },
                "param_3": {
                    "array": 1,
                    "data_structures": 1,
                    "debug_info": 2,
                    "input_array": 3,
                    "int_array": 1,
                    "int_array_param": 1,
                    "int_ptr_param": 2,
                    "param3": 4,
                    "param_3": 3,
                    "param_3_pointer": 1,
                    "param_array": 4,
                    "ptr": 1,
                    "ptr_param": 1,
                    "type_array": 1,
                    "type_info": 4,
                    "type_structure": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_val": 1,
                    "base_address": 1,
                    "base_type": 1,
                    "class_struct": 1,
                    "current_type": 1,
                    "data_structure": 1,
                    "local_param": 1,
                    "long_param": 3,
                    "param": 1,
                    "param4": 4,
                    "param_4": 7,
                    "param_4_value": 1,
                    "param_current": 1,
                    "param_long": 1,
                    "param_ptr": 1,
                    "param_to_reverse": 1,
                    "param_value": 1,
                    "target_value": 1,
                    "type": 1
                },
                "piVar6": {
                    "current_index": 1,
                    "info_ptr": 1,
                    "int_pointer": 1,
                    "int_pointer_var": 1,
                    "int_ptr": 4,
                    "int_ptr_var": 2,
                    "int_var": 2,
                    "integer_array": 1,
                    "p_int_var6": 1,
                    "p_user_data_val": 1,
                    "pi_var6_pointer": 1,
                    "pointer4": 1,
                    "pointer6": 1,
                    "pointer_6": 1,
                    "pointer_to_integer": 1,
                    "ptr3": 1,
                    "ptr4": 3,
                    "ptr6": 1,
                    "ptr_4": 1,
                    "ptr_extracted": 1,
                    "ptr_i_var6": 1,
                    "ptr_pi_var6": 1,
                    "ptr_var6": 1
                },
                "plVar1": {
                    "array_pointer": 2,
                    "data_ptr": 2,
                    "long_ptr1": 1,
                    "long_ptr_1": 1,
                    "long_ptr_var": 1,
                    "p_long_var1": 1,
                    "p_type_array_entry": 1,
                    "pointer": 1,
                    "pointer1": 2,
                    "pointer_1": 1,
                    "pointer_to_l_var1": 1,
                    "pointer_to_long": 1,
                    "pointer_var": 1,
                    "pointer_var1": 2,
                    "ptr1": 5,
                    "ptr_1": 1,
                    "ptr_array_element": 1,
                    "ptr_l_var1": 2,
                    "ptr_var1": 2,
                    "type_list": 1
                },
                "puVar3": {
                    "p_undefined_var3": 1,
                    "p_user_data_entry": 1,
                    "pointer2": 1,
                    "pointer3": 1,
                    "pointer_1": 1,
                    "pointer_3": 1,
                    "pointer_to_output": 1,
                    "pointer_var2": 1,
                    "pointer_var3": 2,
                    "ptr1": 1,
                    "ptr2": 4,
                    "ptr3": 1,
                    "ptr_2": 1,
                    "ptr_print_var1": 1,
                    "ptr_pu_var3": 1,
                    "ptr_u_var3": 1,
                    "ptr_var3": 2,
                    "pu_var3_pointer": 1,
                    "result_ptr": 1,
                    "uint8_ptr": 1,
                    "undefined8_ptr1": 1,
                    "undefined8_ptr_var": 1,
                    "undefined_pointer": 1,
                    "var_pointer3": 1,
                    "var_ptr": 1
                },
                "puVar4": {
                    "data_pointer": 1,
                    "element_ptr": 1,
                    "p_undefined_var4": 1,
                    "p_user_data_entry1": 1,
                    "pointer3": 1,
                    "pointer4": 1,
                    "pointer_2": 1,
                    "pointer_4": 1,
                    "pointer_var3": 1,
                    "pointer_var4": 2,
                    "ptr2": 1,
                    "ptr3": 4,
                    "ptr4": 1,
                    "ptr_3": 1,
                    "ptr_print_var2": 1,
                    "ptr_pu_var4": 1,
                    "ptr_to_data": 1,
                    "ptr_u_var4": 1,
                    "ptr_var4": 2,
                    "pu_var4_pointer": 1,
                    "second_pointer_to_output": 1,
                    "uint8_ptr_temp": 1,
                    "undefined8_ptr2": 1,
                    "undefined8_ptr_var2": 1,
                    "var_pointer4": 1
                },
                "realloc": {
                    "reallocate": 1
                },
                "set_debug_class_id_0010c7a0": {
                    "set_debug_class_id": 2
                },
                "tex": {
                    "text": 1
                },
                "uVar10": {
                    "count_var": 1,
                    "data_var2": 1,
                    "extra_var2": 1,
                    "new_var3": 1,
                    "temp_element": 1,
                    "temp_u_var10": 1,
                    "temp_value_3": 1,
                    "temp_var2": 1,
                    "u_var10": 3,
                    "u_var10_value": 1,
                    "u_var_10": 1,
                    "uint_var": 2,
                    "undefined4_var": 2,
                    "unused_var2": 1,
                    "userdata": 1,
                    "value2": 1,
                    "var10": 1,
                    "var3": 1,
                    "var4": 3,
                    "var5": 1,
                    "var6": 1,
                    "var_10": 1,
                    "var_2": 1,
                    "var_extracted3": 1
                },
                "uVar11": {
                    "data_var2": 1,
                    "data_var3": 1,
                    "entry_data1": 1,
                    "extra_var3": 1,
                    "new_var4": 1,
                    "return_value11": 1,
                    "temp_u_var11": 1,
                    "temp_value": 1,
                    "temp_value_4": 1,
                    "temp_var3": 1,
                    "u_var11": 3,
                    "u_var11_value": 1,
                    "u_var_11": 1,
                    "uint64_var": 1,
                    "undefined8_var2": 2,
                    "unused_var3": 1,
                    "value3": 1,
                    "var11": 1,
                    "var4": 1,
                    "var5": 3,
                    "var6": 1,
                    "var7": 1,
                    "var_11": 1,
                    "var_3": 1,
                    "var_extracted4": 1
                },
                "uVar12": {
                    "count": 1,
                    "counter": 1,
                    "data_var4": 1,
                    "loop_counter": 1,
                    "loop_var": 1,
                    "return_value12": 1,
                    "temp_counter": 1,
                    "temp_u_var12": 1,
                    "temp_value_5": 1,
                    "u_var12": 2,
                    "u_var12_value": 1,
                    "u_var_12": 1,
                    "ulong_var": 7,
                    "value4": 1,
                    "var12": 1,
                    "var5": 1,
                    "var6": 2,
                    "var7": 1,
                    "var8": 1,
                    "var_12": 1,
                    "var_4": 1,
                    "var_iter": 1
                },
                "uVar13": {
                    "data_size": 1,
                    "data_var5": 1,
                    "entry_size": 1,
                    "temp_u_var13": 1,
                    "temp_uint": 1,
                    "temp_value_6": 1,
                    "u_var13": 3,
                    "u_var13_value": 1,
                    "u_var_13": 1,
                    "uint_value": 1,
                    "uint_var": 6,
                    "uint_var_temp": 1,
                    "value5": 1,
                    "var13": 1,
                    "var6": 2,
                    "var7": 2,
                    "var8": 1,
                    "var9": 1,
                    "var_13": 1,
                    "var_5": 1,
                    "var_counter": 1
                },
                "uVar7": {
                    "new_var1": 1,
                    "output_1": 1,
                    "result": 12,
                    "result_var": 4,
                    "return_val": 1,
                    "return_value": 7,
                    "return_var": 1,
                    "u_var7_value": 1,
                    "var3": 1,
                    "var_result": 1
                },
                "uVar8": {
                    "data_var": 1,
                    "data_var1": 1,
                    "entry_data": 1,
                    "extra_var1": 1,
                    "new_var2": 1,
                    "output_2": 1,
                    "return_value8": 1,
                    "temp_u_var8": 1,
                    "temp_value_1": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "u_var8": 3,
                    "u_var8_value": 1,
                    "u_var_8": 1,
                    "uint8_var": 1,
                    "undefined8_var": 1,
                    "undefined8_var1": 1,
                    "unused_var1": 1,
                    "value1": 1,
                    "var1": 1,
                    "var2": 3,
                    "var3": 1,
                    "var4": 1,
                    "var8": 1,
                    "var_8": 1,
                    "var_extracted1": 1
                },
                "uVar9": {
                    "temp_value_2": 1
                },
                "update_and_create_data_structure_00109e76": {
                    "update_and_create_data_struct": 1,
                    "update_and_create_data_structure": 1
                }
            },
            "called": [
                "fprintf",
                "FUN_00112c1f",
                "FUN_00109d3e",
                "FUN_00109bbb",
                "FUN_0010add5",
                "FUN_0010a83e",
                "FUN_00109dfe",
                "FUN_0010a181",
                "FUN_0010ae0e",
                "FUN_0010c7a0",
                "FUN_0010b948",
                "FUN_0010b800",
                "__assert_fail",
                "FUN_0010a2b9",
                "FUN_0010ab4d",
                "FUN_0010a0e9",
                "FUN_0010bba1",
                "FUN_0010a69a",
                "FUN_00109e76",
                "FUN_0010a77a",
                "FUN_0010adf2",
                "FUN_0010a94e",
                "FUN_00112b6e",
                "FUN_0010e5db",
                "FUN_0010a0a0",
                "FUN_0010a0bd",
                "FUN_0010aa53",
                "FUN_0010a083",
                "FUN_0010a377",
                "FUN_0010ba08",
                "FUN_0010a0d3",
                "dcgettext",
                "FUN_0010a424",
                "FUN_00109d97",
                "FUN_00109d5c",
                "FUN_0010e453",
                "abort"
            ],
            "calling": [
                "FUN_00112c1f",
                "FUN_001135a5"
            ],
            "code": "\n\n\nundefined8 process_debug_data_00112c1f(ulong input_param,undefined8 param_2,int *type_info,long param_4)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  char char_var;\n  int *int_ptr;\n  undefined8 result;\n  undefined8 u_var8;\n  int int_var;\n  undefined4 u_var10;\n  undefined8 var5;\n  ulong ulong_var;\n  uint uint_var;\n  bool bool_var;\n  uint local_var;\n  \n  ulong_var = input_param;\nLAB_00112c39:\n  if (type_info != (int *)0x0) {\n    int_var = *type_info;\n    if (int_var - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(type_info + 4);\n        uint_var = *(uint *)(input_param + 0x30);\n        ulong_var = (ulong)uint_var;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == uint_var) {\n          if (int_var == 0x16) {\n            result = lookup_and_init_data_structure(param_2,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          int_ptr = (int *)extract_real_type_from_debug(type_info,0);\n          if (int_ptr == (int *)0x0) goto LAB_00112dd6;\n          if ((*int_ptr - 7U < 4) && (*(long *)(int_ptr + 4) != 0)) {\n            if ((*(uint *)(*(long *)(int_ptr + 4) + 0xc) <= *(uint *)(input_param + 0x38)) &&\n               (char_var = set_debug_class_id(input_param,*(undefined8 *)(**(long **)(type_info + 4) + 8),int_ptr),\n               char_var == '\\0')) {\n              return 0;\n            }\n            uint_var = *(uint *)(*(long *)(int_ptr + 4) + 0xc);\n          }\n          else {\n            uint_var = 0;\n          }\n          int_var = *int_ptr;\n          result = *(undefined8 *)(**(long **)(type_info + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (int_var == 0x17) {\n          if (var1 != param_4) goto LAB_00112c94;\n          *(uint *)(param_4 + 0x10) = uint_var;\n          param_4 = *ptr1;\n          type_info = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (param_4 != 0) {\n          *(uint *)(param_4 + 0x10) = uint_var;\n        }\n        type_info = (int *)ptr1[1];\n        if (type_info == (int *)0x0) goto LAB_00112dd6;\n        int_var = *type_info;\n        param_4 = 0;\n      } while (int_var - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param_4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param_4 + 0x10) = *(undefined4 *)(input_param + 0x30);\n      if (*(int *)(param_4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param_4 + 8);\n    }\n    switch(int_var) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = init_or_inc_data_structure(param_2);\n      return result;\n    case 3:\n      result = init_data_structure(param_2,type_info[1],*(undefined *)(type_info + 4));\n      return result;\n    case 4:\n      result = init_or_create_data_structure(param_2,type_info[1]);\n      return result;\n    case 5:\n      result = update_and_create_data_struct(param_2,type_info[1]);\n      return result;\n    case 6:\n      result = init_data_structure(param_2,type_info[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(type_info + 4) != 0) {\n        if ((*(uint *)(*(long *)(type_info + 4) + 0xc) <= *(uint *)(input_param + 0x38)) &&\n           (char_var = set_debug_class_id(input_param,result,type_info), char_var == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(type_info + 4);\n        if (*(int *)(input_param + 0x30) == *(int *)(var1 + 8)) {\n          uint_var = *(uint *)(var1 + 0xc);\n          if (uint_var <= *(uint *)(input_param + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          int_var = *type_info;\nLAB_00112ed2:\n          result = resize_and_initialize_array_00109d5c(param_2,result,uint_var,int_var);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(input_param + 0x30);\n      }\n      u_var10 = 0;\n      if (*(long *)(type_info + 4) != 0) {\n        u_var10 = *(undefined4 *)(*(long *)(type_info + 4) + 0xc);\n      }\n      char_var = create_and_initialize_data_structure_0010a69a(param_2,result,u_var10,*type_info == 7,type_info[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(type_info + 4) != (long *)0x0) && (ulong_var = 0, **(long **)(type_info + 4) != 0)) {\n        while( true ) {\n          ptr3 = *(undefined8 **)(**(long **)(type_info + 4) + ulong_var * 8);\n          if (ptr3 == (undefined8 *)0x0) break;\n          char_var = process_debug_data_00112c1f(input_param,param_2,ptr3[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = generate_warning_message_0010ba08(param_2,*ptr3,*(undefined4 *)(ptr3 + 3),\n                               *(undefined4 *)((long)ptr3 + 0x1c),*(undefined4 *)(ptr3 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          ulong_var = (ulong)((int)ulong_var + 1);\n        }\n      }\n      result = process_data_and_create_structure_0010a77a(param_2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(type_info + 4) == 0) {\n        uint_var = 0;\n        int_ptr = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(type_info + 4) + 0xc) <= *(uint *)(input_param + 0x38)) &&\n           (ulong_var = input_param, char_var = set_debug_class_id(input_param,result,type_info), char_var == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(type_info + 4);\n        uint_var = *(uint *)(var1 + 0xc);\n        if (*(int *)(input_param + 0x30) == *(int *)(var1 + 8)) {\n          if (uint_var <= *(uint *)(input_param + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          int_var = *type_info;\n          goto LAB_00112ed2;\n        }\n        int_ptr = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(input_param + 0x30);\n        if (((int_ptr != (int *)0x0) && (type_info != int_ptr)) &&\n           (ulong_var = input_param, char_var = process_debug_data_00112c1f(input_param,param_2,int_ptr,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = process_data_0010a83e(param_2,result,uint_var,*type_info == 9,type_info[1],int_ptr != (int *)0x0,\n                           type_info == int_ptr,ulong_var);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(type_info + 4) != (long *)0x0) {\n        uint_var = 0;\n        if (**(long **)(type_info + 4) != 0) {\n          while (ptr3 = *(undefined8 **)(**(long **)(type_info + 4) + (ulong)uint_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = process_debug_data_00112c1f(input_param,param_2,ptr3[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n              char_var = generate_warning_message_0010ba08(param_2,*ptr3,*(undefined4 *)(ptr3 + 3));\n            }\n            else {\n              char_var = generate_formatted_string_0010a94e(param_2,*ptr3,ptr3[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = uint_var + 1;\n          }\n        }\n        uint_var = 0;\n        if (*(long *)(*(long *)(type_info + 4) + 0x10) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(type_info + 4) + 0x10) + (ulong)uint_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = process_debug_data_00112c1f(input_param,param_2,*ptr3,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = process_input_data_0010aa53(param_2,*(undefined4 *)(ptr3 + 1),\n                                 *(undefined *)((long)ptr3 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = uint_var + 1;\n          }\n        }\n        local_var = 0;\n        if (*(long *)(*(long *)(type_info + 4) + 0x18) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(type_info + 4) + 0x18) + (ulong)local_var * 8),\n                ptr3 != (undefined8 *)0x0) {\n            char_var = update_string_with_prefix_0010ab4d(param_2,*ptr3);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            uint_var = 0;\n            while (ptr2 = *(undefined8 **)(ptr3[1] + (ulong)uint_var * 8),\n                  ptr2 != (undefined8 *)0x0) {\n              if ((ptr2[4] != 0) &&\n                 (char_var = process_debug_data_00112c1f(input_param,param_2,ptr2[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = process_debug_data_00112c1f(input_param,param_2,ptr2[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (ptr2[3] == -1) {\n                char_var = process_and_return_data_0010adf2(param_2,*ptr2,*(undefined4 *)(ptr2 + 2),\n                                     *(undefined *)((long)ptr2 + 0x14),\n                                     *(undefined *)((long)ptr2 + 0x15));\n              }\n              else {\n                char_var = process_data_and_return_0010add5(param_2);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              uint_var = uint_var + 1;\n            }\n            char_var = append_semicolon_to_end_of_non_null_string_00109bbb(param_2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var = local_var + 1;\n          }\n        }\n      }\n      result = reverse_and_concatenate_strings_0010ae0e(param_2);\n      return result;\n    case 0xb:\n      ptr3 = *(undefined8 **)(type_info + 4);\n      if (ptr3 == (undefined8 *)0x0) {\n        u_var8 = 0;\n        var5 = 0;\n      }\n      else {\n        u_var8 = ptr3[1];\n        var5 = *ptr3;\n      }\n      result = extract_and_initialize_data_structure_0010e453(param_2,result,var5,u_var8);\n      return result;\n    case 0xc:\n      char_var = process_debug_data_00112c1f(input_param,param_2,*(undefined8 *)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_and_update_data_0010a083(param_2);\n      return result;\n    case 0xd:\n      char_var = process_debug_data_00112c1f(input_param,param_2,**(undefined8 **)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      ulong_var = 0;\n      if (*(long *)(*(long *)(type_info + 4) + 8) == 0) {\n        ulong_var = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(type_info + 4) + 8) + ulong_var * 8), var1 != 0) {\n          ulong_var = ulong_var + 1;\n          char_var = process_debug_data_00112c1f(input_param,param_2,var1,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        ulong_var = ulong_var & 0xffffffff;\n      }\n      result = process_and_return_data_0010e5db(param_2,ulong_var,*(undefined *)(*(long *)(type_info + 4) + 0x10));\n      return result;\n    case 0xe:\n      char_var = process_debug_data_00112c1f(input_param,param_2,*(undefined8 *)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_and_update_data_0010a0a0(param_2);\n      return result;\n    case 0xf:\n      char_var = process_debug_data_00112c1f(input_param,param_2,**(undefined8 **)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_and_create_structure_0010a0e9(param_2,*(undefined8 *)(*(long *)(type_info + 4) + 8),\n                           *(undefined8 *)(*(long *)(type_info + 4) + 0x10));\n      return result;\n    case 0x10:\n      char_var = process_debug_data_00112c1f(input_param,param_2,**(undefined8 **)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_debug_data_00112c1f(input_param,param_2,*(undefined8 *)(*(long *)(type_info + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(type_info + 4);\n      result = extract_and_process_data_0010a181(param_2,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      char_var = process_debug_data_00112c1f(input_param,param_2,**(undefined8 **)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = extract_and_process_data_0010a2b9(param_2,*(undefined *)(*(long *)(type_info + 4) + 8));\n      return result;\n    case 0x12:\n      char_var = process_debug_data_00112c1f(input_param,param_2,**(undefined8 **)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = process_debug_data_00112c1f(input_param,param_2,*(undefined8 *)(*(long *)(type_info + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a377(param_2);\n      return result;\n    case 0x13:\n      char_var = process_debug_data_00112c1f(input_param,param_2,**(undefined8 **)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      ulong_var = 0;\n      if (*(long *)(*(long *)(type_info + 4) + 0x10) == 0) {\n        ulong_var = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(type_info + 4) + 0x10) + ulong_var * 8), var1 != 0)\n        {\n          ulong_var = ulong_var + 1;\n          char_var = process_debug_data_00112c1f(input_param,param_2,var1,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(type_info + 4) + 8) != 0) &&\n         (char_var = process_debug_data_00112c1f(input_param,param_2,*(long *)(*(long *)(type_info + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      result = process_data_0010a424(param_2,*(long *)(*(long *)(type_info + 4) + 8) != 0,ulong_var & 0xffffffff,\n                           *(undefined *)(*(long *)(type_info + 4) + 0x18));\n      return result;\n    case 0x14:\n      char_var = process_debug_data_00112c1f(input_param,param_2,*(undefined8 *)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(param_2);\n      return result;\n    case 0x15:\n      char_var = process_debug_data_00112c1f(input_param,param_2,*(undefined8 *)(type_info + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      result = process_and_send_data_0010a0d3(param_2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var = *(int **)**(undefined8 **)(type_info + 4) == type_info;\n  type_info = *(int **)**(undefined8 **)(type_info + 4);\n  if (bool_var) {\nLAB_00112dd6:\n    result = init_or_create_data_structure(param_2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "current_name": "process_debug_data_00112c1f",
            "entrypoint": "0x00112c1f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00112c1f": "process_debug_data_00112c1f",
                "abort": "terminate",
                "bVar14": "bool_var",
                "cVar5": "char_var",
                "dcgettext": "dc_get_text",
                "extract_real_type_from_debug_info_00112b6e": "extract_real_type_from_debug",
                "fprintf": "f_printf",
                "iVar9": "int_var",
                "initialize_data_structure_00109d3e": "init_data_structure",
                "initialize_data_structure_0010b800": "init_data_structure",
                "initialize_or_create_data_structure_00109d97": "init_or_create_data_structure",
                "initialize_or_create_data_structure_0010b948": "init_or_create_data_structure",
                "initialize_or_increment_data_structure_00109dfe": "init_or_inc_data_structure",
                "lVar2": "var1",
                "local_3c": "local_var",
                "lookup_and_initialize_data_structure_0010bba1": "lookup_and_init_data_structure",
                "param_1": "input_param",
                "param_3": "type_info",
                "piVar6": "int_ptr",
                "plVar1": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "set_debug_class_id_0010c7a0": "set_debug_class_id",
                "tex": "text",
                "uVar10": "u_var10",
                "uVar11": "var5",
                "uVar12": "ulong_var",
                "uVar13": "uint_var",
                "uVar7": "result",
                "uVar8": "u_var8",
                "update_and_create_data_structure_00109e76": "update_and_create_data_struct"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001135a5": {
            "additional_data": {
                "FUNC_00113a4d": {
                    "process_another_data": 1,
                    "process_func": 1,
                    "process_function": 1
                },
                "FUN_001135a5": {
                    "process_data": 28,
                    "process_function": 1
                },
                "F_001135a5": {
                    "process_data": 1
                },
                "cVar2": {
                    "char_value": 2,
                    "char_var": 2,
                    "check": 5,
                    "check_var": 1,
                    "flag": 5,
                    "process_result": 1,
                    "result": 13,
                    "success": 1,
                    "temp_var2": 1
                },
                "check_and_process_data_00112502": {
                    "check_and_process_data": 3
                },
                "format_and_process_string_0010e842": {
                    "format_and_process_string": 2,
                    "format_and_process_string2": 1
                },
                "format_string_and_process_0010e9a0": {
                    "format_and_process_string": 1,
                    "format_string_and_process": 2
                },
                "get_one_00108f05": {
                    "get_one": 3
                },
                "iVar1": {
                    "count": 6,
                    "counter": 2,
                    "index": 12,
                    "index_var": 2,
                    "int_value": 2,
                    "int_var": 2,
                    "integer_var": 1,
                    "temp_var1": 1,
                    "value": 1,
                    "var1": 1,
                    "variable1": 1
                },
                "param_1": {
                    "arg1": 6,
                    "input1": 17,
                    "input_arg1": 1,
                    "input_data1": 1,
                    "input_param": 2,
                    "input_param1": 3,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 6,
                    "input2": 17,
                    "input_arg2": 1,
                    "input_data2": 1,
                    "input_param2": 3,
                    "output_param": 2,
                    "param2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "data": 20,
                    "data_param": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_data": 1,
                    "input_param3": 2,
                    "param3": 1
                },
                "process_and_format_string_0010e7c2": {
                    "process_and_format_string": 3
                },
                "process_and_free_string_0010e8a9": {
                    "process_and_free_string": 1,
                    "process_and_free_string3": 2
                },
                "process_and_free_string_0010eafe": {
                    "process_and_free_string": 2,
                    "process_and_free_string2": 1
                },
                "process_and_free_string_0010ebb0": {
                    "process_and_free_string2": 2,
                    "process_and_free_string3": 1
                },
                "process_and_send_data_0010e918": {
                    "process_and_send_data": 2
                },
                "process_debug_data_00112c1f": {
                    "process_debug_data": 3
                },
                "process_string_and_store_0010e6a8": {
                    "process_and_store_string": 3
                },
                "puVar4": {
                    "curr_data": 1,
                    "curr_node": 1,
                    "current": 1,
                    "current_item": 1,
                    "current_node": 2,
                    "current_pointer": 4,
                    "current_ptr": 1,
                    "linked_list_ptr": 1,
                    "pointer1": 1,
                    "ptr1": 10,
                    "ptr_var1": 2,
                    "ptr_variable1": 2,
                    "temp_pointer1": 2,
                    "temp_ptr": 1,
                    "temp_var4": 1
                },
                "puVar5": {
                    "current_ptr": 1,
                    "data_pointer": 1,
                    "head": 2,
                    "head_node": 2,
                    "list_node": 1,
                    "list_ptr": 1,
                    "loop_pointer": 1,
                    "main_pointer": 1,
                    "main_ptr": 1,
                    "next_data": 1,
                    "next_pointer": 1,
                    "pointer2": 1,
                    "ptr2": 10,
                    "ptr_var2": 2,
                    "ptr_variable2": 2,
                    "temp_pointer2": 2,
                    "temp_var5": 1
                },
                "uVar3": {
                    "output": 9,
                    "result": 13,
                    "return_value": 7,
                    "return_var": 1,
                    "temp_var3": 1
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_00113a4d",
                "FUN_0010e8a9",
                "FUN_0010ebb0",
                "FUN_0010e7c2",
                "FUN_00108f05",
                "FUN_0010e918",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010e6a8",
                "abort"
            ],
            "calling": [
                "FUN_0011378f",
                "FUN_00113a4d"
            ],
            "code": "\nundefined8 process_data_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int index;\n  char result;\n  undefined8 result;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = process_debug_data(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      result = process_and_store_string(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 1:\n    result = process_debug_data(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      result = process_and_format_string(input2,*(undefined8 *)(data + 8));\n      return result;\n    }\n    break;\n  case 2:\n    result = process_debug_data(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      result = format_string_and_process(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    result = *(undefined8 *)(data + 8);\n    result = check_and_process_data_001135a5(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = process_debug_data(input1,input2,*ptr2,0), result != '\\0')) &&\n       (result = process_and_free_string(input2,result,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = process_debug_data(input1,input2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_free_string2(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          result = get_one(input2);\n          return result;\n        }\n        result = process_recursive_data_00113a4d(input1,input2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    result = format_and_process_string(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return result;\n  case 5:\n    result = process_and_free_string3(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return result;\n  case 6:\n    result = process_debug_data(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      result = process_and_send_data(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_and_store_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_format_string_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = format_string_and_process_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = check_and_process_data_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_debug_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_and_free_string_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_debug_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_free_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_one_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = format_and_process_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_001135a5",
            "entrypoint": "0x001135a5",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "cVar2": "result",
                "check_and_process_data_00112502": "check_and_process_data",
                "format_and_process_string_0010e842": "format_and_process_string",
                "format_string_and_process_0010e9a0": "format_string_and_process",
                "get_one_00108f05": "get_one",
                "iVar1": "index",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "process_and_format_string_0010e7c2": "process_and_format_string",
                "process_and_free_string_0010e8a9": "process_and_free_string3",
                "process_and_free_string_0010eafe": "process_and_free_string",
                "process_and_free_string_0010ebb0": "process_and_free_string2",
                "process_and_send_data_0010e918": "process_and_send_data",
                "process_debug_data_00112c1f": "process_debug_data",
                "process_string_and_store_0010e6a8": "process_and_store_string",
                "puVar4": "ptr1",
                "puVar5": "ptr2",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011378f": {
            "additional_data": {
                "FUN_0011378f": {
                    "analyze_binary": 2,
                    "decompiled_function": 1,
                    "extract_and_process_data": 1,
                    "parse_parameters": 1,
                    "process_binary_data": 1,
                    "process_binary_function": 1
                },
                "__dest": {
                    "current_destination": 1,
                    "dest": 2,
                    "dest_ptr": 1,
                    "destination": 16,
                    "destination_ptr": 2,
                    "destination_str": 1,
                    "destination_string": 6,
                    "destination_var": 2
                },
                "auVar1": {
                    "array_var": 1,
                    "auxiliary_variable1": 1,
                    "result_array": 1,
                    "temp1": 1,
                    "temp_array": 10,
                    "temp_buffer": 5,
                    "temp_var": 3,
                    "temp_var1": 2,
                    "temp_var_1": 1,
                    "temp_variable": 2,
                    "temp_variable1": 1,
                    "temporary_array": 2,
                    "temporary_var_1": 1
                },
                "bVar12": {
                    "bool_value": 1,
                    "boolean_value": 1,
                    "boolean_var": 2,
                    "boolean_variable": 2,
                    "buffer": 1,
                    "byte_flag": 1,
                    "byte_val": 1,
                    "byte_var": 3,
                    "byte_variable": 2,
                    "flag": 14,
                    "flag_var": 1,
                    "temp_byte": 1,
                    "var1": 1
                },
                "cVar2": {
                    "char_var": 6,
                    "char_variable": 2,
                    "character_variable": 1,
                    "flag": 1,
                    "is_success": 1,
                    "result": 5,
                    "result_var": 1,
                    "status": 12,
                    "success": 1,
                    "temp_char": 1
                },
                "lVar7": {
                    "count": 2,
                    "i": 1,
                    "index": 1,
                    "loop_counter": 17,
                    "loop_index": 1,
                    "loop_var": 5,
                    "loop_variable": 2,
                    "temp_index": 1,
                    "value_1": 1
                },
                "local_1e8": {
                    "array1": 6,
                    "buffer_2": 1,
                    "hash_table2": 2,
                    "hash_table_2": 2,
                    "local_array": 2,
                    "local_array1": 1,
                    "local_array2": 1,
                    "local_array3": 4,
                    "local_array4": 1,
                    "local_array_2": 1,
                    "local_array_3": 2,
                    "local_data_array": 1,
                    "local_var_11": 1,
                    "local_var_12": 1,
                    "string_array_variable": 1,
                    "temp_array": 1,
                    "var7": 1,
                    "var_9_local": 1,
                    "var_arr": 1
                },
                "local_1f0": {
                    "constant2": 1,
                    "constant4": 1,
                    "constant_100": 1,
                    "local_data_8": 1,
                    "local_int_2": 1,
                    "local_val2": 1,
                    "local_value7": 1,
                    "local_var3": 1,
                    "local_var5": 1,
                    "local_var8": 1,
                    "local_var9": 1,
                    "local_var_10": 1,
                    "local_var_11": 1,
                    "local_var_7": 1,
                    "local_variable7": 1,
                    "local_variable8": 1,
                    "local_variable_7": 1,
                    "local_variable_8": 1,
                    "temp3": 1,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "temp_var_5": 1,
                    "value6": 1,
                    "value8": 1,
                    "var3": 1,
                    "var6": 1,
                    "var7": 2,
                    "var8": 1,
                    "var_8": 1,
                    "var_8_local": 1
                },
                "local_1f8": {
                    "local_data_7": 1,
                    "local_long_3": 1,
                    "local_val1": 1,
                    "local_value6": 1,
                    "local_var2": 1,
                    "local_var4": 1,
                    "local_var7": 1,
                    "local_var8": 1,
                    "local_var_10": 1,
                    "local_var_6": 1,
                    "local_var_9": 1,
                    "local_variable6": 1,
                    "local_variable7": 1,
                    "local_variable_6": 1,
                    "local_variable_7": 1,
                    "temp2": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "temp_var_4": 1,
                    "temp_variable5": 1,
                    "temp_variable_2": 1,
                    "value5": 1,
                    "value7": 1,
                    "var2": 1,
                    "var5": 1,
                    "var6": 2,
                    "var7": 1,
                    "var_7": 1,
                    "var_7_local": 1,
                    "variable1": 1
                },
                "local_220": {
                    "buffer1": 1,
                    "buffer_1": 1,
                    "buffer_data": 1,
                    "hash_table1": 4,
                    "hash_table_1": 3,
                    "hash_table_variable": 1,
                    "local_array": 1,
                    "local_array2": 4,
                    "local_array3": 1,
                    "local_array_2": 2,
                    "local_buffer": 1,
                    "local_buffer1": 1,
                    "local_data_4": 1,
                    "local_hash_table1": 1,
                    "local_var_8": 1,
                    "local_var_9": 1,
                    "temp_array3": 1,
                    "temp_buffer": 1,
                    "temp_buffer2": 1,
                    "temp_string": 1,
                    "temporary_memory": 1,
                    "var_6": 1
                },
                "local_228": {
                    "constant1": 1,
                    "constant3": 1,
                    "constant_1": 1,
                    "flag": 1,
                    "local_data_6": 1,
                    "local_long_2": 1,
                    "local_param2": 1,
                    "local_val": 1,
                    "local_value5": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "local_var_5": 1,
                    "local_var_7": 1,
                    "local_var_8": 1,
                    "local_variable6": 1,
                    "local_variable_5": 1,
                    "local_variable_6": 1,
                    "temp1": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var_3": 1,
                    "temporary_value": 1,
                    "value6": 1,
                    "var1": 1,
                    "var5": 2,
                    "var6": 1,
                    "var_5": 1,
                    "var_6_local": 1
                },
                "local_238": {
                    "array": 1,
                    "hash_4": 1,
                    "local_array": 2,
                    "local_array1": 3,
                    "local_array2": 1,
                    "local_array_1": 2,
                    "local_data": 1,
                    "local_data_5": 1,
                    "local_var3": 1,
                    "local_var_6": 1,
                    "local_var_7": 1,
                    "local_variable_5": 1,
                    "placeholder": 1,
                    "temp": 1,
                    "temp_array": 3,
                    "temp_array2": 1,
                    "temp_memory": 2,
                    "temp_var_2": 1,
                    "temp_variable4": 1,
                    "value5": 1,
                    "var5": 1,
                    "var_5_local": 1,
                    "var_array": 1,
                    "zero_memory": 1
                },
                "local_248": {
                    "hash_1": 1,
                    "hash_1_1": 1,
                    "hash_table_init_result1": 1,
                    "local_data_3": 1,
                    "local_int_1": 1,
                    "local_output_param2": 1,
                    "local_value1": 1,
                    "local_var1": 2,
                    "local_var2": 2,
                    "local_var3": 1,
                    "local_var_1": 1,
                    "local_var_2": 1,
                    "local_var_3": 1,
                    "local_variable2": 2,
                    "local_variable_1": 2,
                    "temp_variable2": 1,
                    "value1": 5,
                    "var1": 4,
                    "var_1": 1,
                    "var_1_local": 1
                },
                "local_250": {
                    "allocated_mem_1": 1,
                    "allocated_memory": 6,
                    "allocated_memory2": 1,
                    "allocated_memory_copy": 1,
                    "allocated_memory_size": 2,
                    "allocated_size": 1,
                    "buffer": 1,
                    "buffer_size": 3,
                    "dynamic_memory": 1,
                    "local_buffer": 1,
                    "local_data": 1,
                    "local_data_2": 1,
                    "local_long_1": 1,
                    "local_output_param1": 1,
                    "local_var1": 2,
                    "local_var2": 1,
                    "local_var_2": 1,
                    "local_variable1": 2,
                    "malloc_size": 1,
                    "malloc_size_local": 1,
                    "memory_allocation": 1
                },
                "local_258": {
                    "current_value": 1,
                    "file": 1,
                    "file_ptr": 1,
                    "input_data": 1,
                    "input_data_pointer": 1,
                    "input_files": 1,
                    "input_files_ptr": 1,
                    "input_list_local": 1,
                    "input_list_ptr": 1,
                    "input_pointer": 1,
                    "input_ptr": 4,
                    "input_ptr_local": 1,
                    "input_string": 1,
                    "local_array1": 1,
                    "local_data_1": 1,
                    "local_input": 1,
                    "local_input1": 1,
                    "local_input_data_1": 1,
                    "local_input_param1": 1,
                    "local_param1": 1,
                    "local_pointer_1": 1,
                    "local_ptr": 2,
                    "local_var1": 1,
                    "local_var_1": 2,
                    "param_1_copy": 2
                },
                "local_58": {
                    "constant7": 1,
                    "hash_5": 1,
                    "local_data_13": 1,
                    "local_int_4": 1,
                    "local_val7": 1,
                    "local_value11": 1,
                    "local_var11": 1,
                    "local_var13": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "local_var9": 1,
                    "local_var_13": 1,
                    "local_var_17": 1,
                    "local_var_18": 1,
                    "local_variable10": 1,
                    "local_variable12": 1,
                    "local_variable_11": 1,
                    "local_variable_12": 1,
                    "temp_value6": 1,
                    "temp_var_9": 1,
                    "temporary3": 1,
                    "value10": 1,
                    "value13": 1,
                    "value9": 1,
                    "var11": 1,
                    "var12": 2,
                    "var13": 1,
                    "var6": 1,
                    "var_13_local": 1,
                    "var_14": 1
                },
                "local_60": {
                    "constant6": 1,
                    "constant_0_2": 1,
                    "local_data_12": 1,
                    "local_int_3": 1,
                    "local_val6": 1,
                    "local_value10": 1,
                    "local_var10": 1,
                    "local_var12": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "local_var8": 1,
                    "local_var_12": 1,
                    "local_var_16": 1,
                    "local_var_17": 1,
                    "local_variable11": 1,
                    "local_variable9": 1,
                    "local_variable_10": 1,
                    "local_variable_11": 1,
                    "temp_value5": 1,
                    "temp_var_8": 1,
                    "temporary2": 1,
                    "value12": 1,
                    "value8": 1,
                    "value9": 1,
                    "var10": 1,
                    "var11": 2,
                    "var12": 1,
                    "var5": 1,
                    "var_12_local": 1,
                    "var_13": 1
                },
                "local_68": {
                    "constant5": 1,
                    "constant_0": 1,
                    "local_array_6": 1,
                    "local_data_11": 1,
                    "local_val5": 1,
                    "local_value9": 1,
                    "local_var11": 1,
                    "local_var4": 1,
                    "local_var5": 1,
                    "local_var7": 1,
                    "local_var9": 1,
                    "local_var_11": 1,
                    "local_var_15": 1,
                    "local_var_16": 1,
                    "local_variable10": 1,
                    "local_variable8": 1,
                    "local_variable_10": 1,
                    "local_variable_9": 1,
                    "temp_value4": 1,
                    "temp_var_7": 1,
                    "temporary1": 1,
                    "value11": 1,
                    "value7": 1,
                    "value8": 1,
                    "var10": 2,
                    "var11": 1,
                    "var4": 1,
                    "var9": 1,
                    "var_11_local": 1,
                    "var_12": 1
                },
                "local_70": {
                    "local_value8": 1
                },
                "local_78": {
                    "array2": 1,
                    "buffer3": 1,
                    "constant_ffffffffffffffff": 1,
                    "flag_array": 1,
                    "flag_memory": 1,
                    "hash_table_2_3": 1,
                    "local_array5": 3,
                    "local_array6": 1,
                    "local_array_4": 1,
                    "local_array_5": 2,
                    "local_buffer3": 2,
                    "local_data_10": 1,
                    "local_val3": 1,
                    "local_var_13": 1,
                    "local_var_14": 1,
                    "local_var_9": 1,
                    "temp_array5": 1,
                    "temp_memory2": 1,
                    "temp_string3": 1,
                    "value5": 1,
                    "value9": 1,
                    "var8": 1,
                    "var9": 2,
                    "var_10": 1,
                    "var_10_local": 1
                },
                "local_a0": {
                    "array2": 1,
                    "buffer2": 1,
                    "buffer_3": 1,
                    "hash_table2": 1,
                    "hash_table3": 2,
                    "hash_table_2": 1,
                    "hash_table_2_2": 1,
                    "local_array": 1,
                    "local_array4": 4,
                    "local_array5": 1,
                    "local_array_3": 1,
                    "local_array_4": 2,
                    "local_buffer2": 2,
                    "local_data_9": 1,
                    "local_hash_table2": 1,
                    "local_var_12": 1,
                    "local_var_13": 1,
                    "local_var_8": 1,
                    "string_list_1": 1,
                    "temp_array4": 1,
                    "temp_buffer3": 1,
                    "temp_string2": 1,
                    "temporary_memory2": 1,
                    "var8": 1,
                    "var_9": 1
                },
                "param_1": {
                    "file_data": 2,
                    "file_ptr": 1,
                    "input": 1,
                    "input1": 2,
                    "input_array": 1,
                    "input_array1": 1,
                    "input_array_1": 1,
                    "input_data": 1,
                    "input_data_1": 2,
                    "input_files": 1,
                    "input_list": 4,
                    "input_param": 1,
                    "input_param1": 2,
                    "input_param_1": 2,
                    "input_ptr": 2,
                    "original_list": 1,
                    "output_buffer": 2,
                    "output_file": 1,
                    "output_files": 1,
                    "param1": 1,
                    "result_ptr": 1
                },
                "param_2": {
                    "counter_ptr": 1,
                    "input2": 1,
                    "input_array2": 1,
                    "input_array_2": 1,
                    "input_buffer": 2,
                    "input_data_2": 2,
                    "input_file": 1,
                    "input_param2": 2,
                    "input_param_2": 2,
                    "modified_list": 1,
                    "output": 1,
                    "output1": 1,
                    "output_array": 2,
                    "output_data": 4,
                    "output_list": 3,
                    "output_param": 1,
                    "output_ptr": 2,
                    "param2": 1,
                    "statistics": 1,
                    "stats_ptr": 1
                },
                "param_3": {
                    "allocated_memory": 3,
                    "data_size": 3,
                    "dynamic_memory": 1,
                    "memory": 1,
                    "memory_location": 1,
                    "new_variable_1": 1,
                    "output1": 1,
                    "output2": 1,
                    "output_array1": 1,
                    "output_array_1": 1,
                    "output_data_1": 2,
                    "output_data_length": 1,
                    "output_length": 1,
                    "output_param1": 2,
                    "output_param_1": 2,
                    "output_ptr": 1,
                    "output_size": 2,
                    "param3": 1,
                    "result": 1,
                    "result_array": 1,
                    "result_param": 1,
                    "result_ptr": 2
                },
                "param_4": {
                    "addr_ptr": 1,
                    "data": 1,
                    "data_param": 1,
                    "hash": 1,
                    "hash_ptr": 1,
                    "hash_table": 2,
                    "hash_table1": 1,
                    "hash_value": 2,
                    "new_variable_2": 1,
                    "output2": 1,
                    "output3": 1,
                    "output_array2": 1,
                    "output_array_2": 1,
                    "output_data_2": 2,
                    "output_hash_1": 1,
                    "output_param2": 2,
                    "output_param_2": 2,
                    "output_ptr1": 1,
                    "param4": 1,
                    "param_4": 1,
                    "result1": 2,
                    "result_1": 1,
                    "status_ptr": 1,
                    "temporary_buffer": 1,
                    "var_4_ptr": 1
                },
                "param_5": {
                    "hash_table2": 1,
                    "new_variable_3": 1,
                    "output3": 1,
                    "output4": 1,
                    "output_array3": 1,
                    "output_array_3": 1,
                    "output_data_3": 2,
                    "output_param3": 2,
                    "output_param_3": 2,
                    "output_ptr2": 1,
                    "output_strings": 1,
                    "param5": 1,
                    "param_5": 1,
                    "result2": 2,
                    "result_2": 1,
                    "result_buffer": 1,
                    "string_array": 2,
                    "string_data": 1,
                    "string_list": 1,
                    "string_param": 1,
                    "string_ptr": 1,
                    "strings": 2,
                    "strings_ptr": 3
                },
                "param_6": {
                    "count": 2,
                    "flag_ptr": 1,
                    "new_variable_4": 1,
                    "output4": 1,
                    "output5": 1,
                    "output_array4": 1,
                    "output_array_4": 1,
                    "output_data_4": 2,
                    "output_hash_2": 1,
                    "output_param4": 2,
                    "output_param_4": 2,
                    "output_ptr3": 1,
                    "param6": 1,
                    "param_6": 1,
                    "result": 4,
                    "result3": 2,
                    "result_3": 1,
                    "result_length": 1,
                    "return_value": 1,
                    "state_param": 1,
                    "status_ptr": 1,
                    "value_ptr": 1,
                    "var_6_ptr": 1
                },
                "plVar11": {
                    "current_memory": 1,
                    "data_pointer": 1,
                    "linked_list_element": 1,
                    "linked_list_pointer": 1,
                    "list": 1,
                    "list_ptr": 1,
                    "long_pointer": 1,
                    "long_ptr": 1,
                    "pl_var11": 1,
                    "pointer4": 1,
                    "pointer_3": 1,
                    "pointer_5": 1,
                    "pointer_array3": 1,
                    "pointer_var5": 1,
                    "pointer_var_5": 2,
                    "pointer_variable5": 1,
                    "ptr4": 1,
                    "ptr5": 1,
                    "ptr_11": 1,
                    "ptr_list": 1,
                    "ptr_long": 1,
                    "ptr_var5": 1,
                    "ptr_variable_5": 1,
                    "temp_long_ptr": 1,
                    "temp_pointer_5": 2,
                    "temp_pointer_array": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_var_5": 1
                },
                "puVar10": {
                    "current_ptr": 1,
                    "data_ptr": 1,
                    "linked_list": 1,
                    "linked_list_ptr": 1,
                    "loop_iterator": 1,
                    "loop_ptr": 1,
                    "pointer3": 1,
                    "pointer_2": 1,
                    "pointer_4": 1,
                    "pointer_array2": 1,
                    "pointer_iterator": 1,
                    "pointer_var4": 1,
                    "pointer_var_4": 2,
                    "pointer_variable4": 1,
                    "ptr3": 2,
                    "ptr4": 1,
                    "ptr_10": 1,
                    "ptr_data": 1,
                    "ptr_temp2": 1,
                    "ptr_var4": 1,
                    "ptr_variable_4": 1,
                    "pu_var10": 1,
                    "temp_pointer": 1,
                    "temp_pointer_4": 2,
                    "temp_ptr": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_var_4": 1
                },
                "puVar5": {
                    "allocated_memory": 2,
                    "allocation": 1,
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "dest_ptr": 2,
                    "dynamic_memory": 2,
                    "malloc_ptr": 1,
                    "memory_ptr": 1,
                    "pointer": 2,
                    "pointer_1": 1,
                    "pointer_var": 2,
                    "pointer_var_1": 1,
                    "pointer_variable1": 1,
                    "ptr": 3,
                    "ptr1": 1,
                    "ptr_5": 1,
                    "ptr_var": 1,
                    "ptr_variable": 1,
                    "temp2": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 1,
                    "temp_ptr_var_1": 1
                },
                "puVar8": {
                    "data_pointer": 1,
                    "inner_pointer": 1,
                    "iter": 1,
                    "loop_iterator": 1,
                    "loop_pointer": 2,
                    "pointer": 2,
                    "pointer1": 1,
                    "pointer_2": 1,
                    "pointer_var2": 1,
                    "pointer_var_2": 2,
                    "pointer_variable2": 1,
                    "ptr": 3,
                    "ptr1": 1,
                    "ptr2": 2,
                    "ptr_8": 1,
                    "ptr_loop": 1,
                    "ptr_temp": 1,
                    "ptr_var2": 1,
                    "ptr_variable_2": 1,
                    "temp_pointer": 1,
                    "temp_pointer_2": 2,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1,
                    "temp_ptr_var_2": 1
                },
                "puVar9": {
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 3,
                    "pointer2": 1,
                    "pointer_3": 1,
                    "pointer_array": 4,
                    "pointer_var3": 1,
                    "pointer_var_3": 2,
                    "pointer_variable3": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_9": 1,
                    "ptr_array": 4,
                    "ptr_iter": 1,
                    "ptr_var3": 1,
                    "ptr_variable_3": 1,
                    "temp_pointer_3": 2,
                    "temp_pointer_array": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_var_3": 1
                },
                "sVar6": {
                    "length": 5,
                    "length_var": 1,
                    "size": 1,
                    "size_var": 1,
                    "str_length": 1,
                    "string_len": 2,
                    "string_length": 19,
                    "temp_size": 1
                },
                "uStack_23c": {
                    "constant2": 1,
                    "hash_2": 1,
                    "hash_3": 1,
                    "hash_table_init_result4": 1,
                    "local_value4": 1,
                    "local_var4": 1,
                    "local_var5": 2,
                    "local_var6": 1,
                    "local_var_4": 1,
                    "local_var_5": 1,
                    "local_var_6": 1,
                    "local_variable5": 2,
                    "local_variable_4": 2,
                    "stack_data_3": 1,
                    "stack_var_3": 1,
                    "temp_stack_var3": 1,
                    "value4": 5,
                    "var4": 4,
                    "var_4": 1,
                    "var_4_local": 1
                },
                "uStack_240": {
                    "constant1": 1,
                    "constant_500": 1,
                    "hash_table_init_result3": 1,
                    "local_value3": 1,
                    "local_var3": 1,
                    "local_var4": 2,
                    "local_var5": 1,
                    "local_var_3": 1,
                    "local_var_4": 1,
                    "local_var_5": 1,
                    "local_variable4": 2,
                    "local_variable_3": 2,
                    "some_value": 1,
                    "stack_data_2": 1,
                    "stack_var_2": 1,
                    "temp_stack_var2": 1,
                    "value3": 5,
                    "var3": 4,
                    "var_3": 1,
                    "var_3_local": 1
                },
                "uStack_244": {
                    "hash_1_2": 1,
                    "hash_2": 1,
                    "hash_table_init_result2": 1,
                    "local_value2": 1,
                    "local_var2": 1,
                    "local_var3": 2,
                    "local_var4": 1,
                    "local_var_2": 1,
                    "local_var_3": 1,
                    "local_var_4": 1,
                    "local_variable3": 2,
                    "local_variable_2": 2,
                    "stack_data_1": 1,
                    "stack_var_1": 1,
                    "temp_stack_var1": 1,
                    "temp_variable3": 1,
                    "value2": 5,
                    "var2": 4,
                    "var_2": 1,
                    "var_2_local": 1
                },
                "uStack_4c": {
                    "constant10": 1,
                    "constant_ffffffffffffffff": 1,
                    "local_val10": 1,
                    "local_value14": 1,
                    "local_var12": 1,
                    "local_var16": 1,
                    "local_var_16": 1,
                    "local_var_20": 1,
                    "local_var_21": 1,
                    "local_variable15": 1,
                    "local_variable_14": 1,
                    "local_variable_15": 1,
                    "stack_data_7": 1,
                    "stack_var_7": 1,
                    "temp_stack_var7": 1,
                    "temp_value9": 1,
                    "temp_var4": 2,
                    "temp_var7": 1,
                    "temp_var_12": 1,
                    "temporary6": 1,
                    "value12": 1,
                    "value13": 1,
                    "value16": 1,
                    "var14": 1,
                    "var15": 2,
                    "var16": 1,
                    "var9": 1,
                    "var_16_local": 1,
                    "var_17": 1
                },
                "uStack_50": {
                    "constant9": 1,
                    "constant_ffffffff": 1,
                    "local_val9": 1,
                    "local_value13": 1,
                    "local_var11": 1,
                    "local_var15": 1,
                    "local_var_15": 1,
                    "local_var_19": 1,
                    "local_var_20": 1,
                    "local_variable14": 1,
                    "local_variable_13": 1,
                    "local_variable_14": 1,
                    "stack_data_6": 1,
                    "stack_var_6": 1,
                    "temp_stack_var6": 1,
                    "temp_value8": 1,
                    "temp_var3": 2,
                    "temp_var6": 1,
                    "temp_var_11": 1,
                    "temporary5": 1,
                    "value11": 1,
                    "value12": 1,
                    "value15": 1,
                    "var13": 1,
                    "var14": 2,
                    "var15": 1,
                    "var8": 1,
                    "var_15_local": 1,
                    "var_16": 1
                },
                "uStack_54": {
                    "constant8": 1,
                    "constant_0_3": 1,
                    "local_val8": 1,
                    "local_value12": 1,
                    "local_var10": 1,
                    "local_var14": 1,
                    "local_var_14": 1,
                    "local_var_18": 1,
                    "local_var_19": 1,
                    "local_variable13": 1,
                    "local_variable_12": 1,
                    "local_variable_13": 1,
                    "stack_data_5": 1,
                    "stack_var_5": 1,
                    "temp_stack_var5": 1,
                    "temp_value7": 1,
                    "temp_var2": 2,
                    "temp_var5": 1,
                    "temp_var_10": 1,
                    "temporary4": 1,
                    "value10": 1,
                    "value11": 1,
                    "value14": 1,
                    "var12": 1,
                    "var13": 2,
                    "var14": 1,
                    "var7": 1,
                    "var_14_local": 1,
                    "var_15": 1
                },
                "uStack_70": {
                    "another_temporary_value": 1,
                    "local_val4": 1,
                    "local_var10": 1,
                    "local_var6": 1,
                    "local_var_10": 1,
                    "local_var_14": 1,
                    "local_var_15": 1,
                    "local_variable9": 1,
                    "local_variable_8": 1,
                    "local_variable_9": 1,
                    "stack_data_4": 1,
                    "stack_var_4": 1,
                    "temp_ptr5": 1,
                    "temp_stack_var4": 1,
                    "temp_var1": 3,
                    "temp_var4": 1,
                    "temp_var_6": 1,
                    "temp_variable6": 1,
                    "temp_variable_3": 1,
                    "temporary_storage1": 1,
                    "u_var5": 1,
                    "value10": 1,
                    "value6": 1,
                    "value7": 1,
                    "var10": 1,
                    "var8": 1,
                    "var9": 1,
                    "var_11": 1
                },
                "uVar3": {
                    "error": 4,
                    "error_code": 23,
                    "result": 2,
                    "result_var": 1,
                    "temp_value": 1
                },
                "uVar4": {
                    "errmsg": 1,
                    "error_message": 24,
                    "error_msg": 4,
                    "error_var": 1,
                    "temp_result": 1
                },
                "unique0x100000e9": {
                    "unique_var1": 1
                },
                "unique0x100000ed": {
                    "unique_var2": 1
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_00119ed0",
                "bfd_errmsg",
                "FUN_001135a5",
                "FUN_0010e439",
                "xmalloc",
                "FUN_0010bb52",
                "strcpy",
                "FUN_0010e2f0",
                "bfd_hash_table_init",
                "bfd_get_error",
                "thunk_FUN_0010e439",
                "strlen"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nundefined4\nanalyze_binary_0011378f(undefined8 *input_list,undefined8 *output_data,long *allocated_memory,undefined8 *output_param_2,\n            undefined8 *strings_ptr,undefined8 *result)\n\n{\n  undefined temp_array [16];\n  char status;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *ptr;\n  undefined4 *pointer_array;\n  char *destination;\n  undefined8 *pointer_var_4;\n  long *temp_pointer_5;\n  byte flag;\n  undefined8 *input_ptr;\n  long allocated_memory;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined temp_array [16];\n  undefined8 var5;\n  undefined hash_table1 [40];\n  undefined8 var6;\n  undefined8 var7;\n  undefined4 array1 [82];\n  undefined local_array4 [40];\n  undefined local_array5 [8];\n  undefined8 temp_var1;\n  undefined8 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  flag = 0;\n  value1 = 0;\n  value2 = 0;\n  value3 = 500;\n  value4 = 0;\n  input_ptr = input_list;\n  allocated_memory = xmalloc(500);\n  var5 = 1;\n  temp_array = ZEXT816(0);\n  status = bfd_hash_table_init(hash_table1,allocate_and_initialize_bfd_hash_0010bb52,0x30);\n  if ((status == '\\0') || (status = bfd_hash_table_init(local_array4,allocate_and_initialize_bfd_hash_0010bb52,0x30), status == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    print_error_message_with_params_00119ed0(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var6 = 0;\n    unique_var1 = 0xffffffff;\n    local_array5 = (undefined  [8])0xffffffffffffffff;\n    unique_var2 = 0xffffffff;\n    pointer_array = array1;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *pointer_array = 0;\n      pointer_array = pointer_array + (ulong)flag * -2 + 1;\n    }\n    var10 = 0;\n    var11 = 0;\n    var7 = 1;\n    var12 = 0;\n    var13 = 0;\n    temp_var3 = 0xffffffff;\n    temp_var4 = 0xffffffff;\n    status = process_string_0010e2f0(&input_ptr,0,0,0,0);\n    temp_array = _local_array5;\n    if (status != '\\0') {\n      local_array5._4_4_ = value2;\n      local_array5._0_4_ = value1;\n      temp_var1 = temp_array._8_8_;\n      status = process_string_0010e2f0(&input_ptr,100,0,0,*input_list);\n      if (status != '\\0') {\n        *(int *)(output_data + 6) = *(int *)(output_data + 6) + 1;\n        output_data[10] = 0;\n        pointer_var_4 = (undefined8 *)*output_data;\n        *(undefined4 *)(output_data + 7) = *(undefined4 *)((long)output_data + 0x34);\n        for (; pointer_var_4 != (undefined8 *)0x0; pointer_var_4 = (undefined8 *)*pointer_var_4) {\n          output_data[8] = pointer_var_4[2];\n          *(undefined4 *)(output_data + 9) = 0;\n          status = thunk_set_param_to_value_and_process_string_0010e439(&input_ptr,*(undefined8 *)(pointer_var_4[1] + 8));\n          if (status == '\\0') {\n            return 0;\n          }\n          temp_pointer_5 = (long *)pointer_var_4[1];\n          if (temp_pointer_5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)temp_pointer_5[2] != (undefined8 *)0x0) {\n                for (ptr = *(undefined8 **)(undefined8 *)temp_pointer_5[2]; ptr != (undefined8 *)0x0;\n                    ptr = (undefined8 *)*ptr) {\n                  status = process_data_001135a5(output_data,&input_ptr);\n                  if (status == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              temp_pointer_5 = (long *)*temp_pointer_5;\n              if (temp_pointer_5 == (long *)0x0) break;\n              status = set_param_to_value_and_process_string_0010e439(&input_ptr,temp_pointer_5[1]);\n              if (status == '\\0') {\n                return 0;\n              }\n            }\n          }\n          status = check_and_process_data_00112502(output_data,&input_ptr,0xffffffffffffffff);\n          if (status == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(temp_var4,temp_var3) == -1) &&\n           (error_code = process_string_0010e2f0(&input_ptr,100,0,var10,0), (char)error_code != '\\0')) {\n          (**(code **)(input_list[1] + 0x50))(var5,allocated_memory + 8);\n          *allocated_memory = allocated_memory;\n          *output_param_2 = CONCAT44(value2,value1);\n          *result = var5;\n          ptr = (undefined *)xmalloc();\n          *ptr = 0;\n          destination = ptr + 1;\n          *strings_ptr = ptr;\n          for (loop_counter = temp_array._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination,*(char **)(loop_counter + 8));\n            string_length = strlen(destination);\n            destination = destination + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_bfd_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_bfd_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_with_params_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_set_param_to_value_and_process_string_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_param_to_value_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = check_and_process_data_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "analyze_binary_0011378f",
            "entrypoint": "0x0011378f",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011378f": "analyze_binary_0011378f",
                "__dest": "destination",
                "auVar1": "temp_array",
                "bVar12": "flag",
                "cVar2": "status",
                "lVar7": "loop_counter",
                "local_1e8": "array1",
                "local_1f0": "var7",
                "local_1f8": "var6",
                "local_220": "hash_table1",
                "local_228": "var5",
                "local_238": "temp_array",
                "local_248": "value1",
                "local_250": "allocated_memory",
                "local_258": "input_ptr",
                "local_58": "var12",
                "local_60": "var11",
                "local_68": "var10",
                "local_78": "local_array5",
                "local_a0": "local_array4",
                "param_1": "input_list",
                "param_2": "output_data",
                "param_3": "allocated_memory",
                "param_4": "output_param_2",
                "param_5": "strings_ptr",
                "param_6": "result",
                "plVar11": "temp_pointer_5",
                "puVar10": "pointer_var_4",
                "puVar5": "ptr",
                "puVar8": "ptr",
                "puVar9": "pointer_array",
                "sVar6": "string_length",
                "uStack_23c": "value4",
                "uStack_240": "value3",
                "uStack_244": "value2",
                "uStack_4c": "temp_var4",
                "uStack_50": "temp_var3",
                "uStack_54": "var13",
                "uStack_70": "temp_var1",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "unique0x100000e9": "unique_var1",
                "unique0x100000ed": "unique_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113a4d": {
            "additional_data": {
                "FUN_00113a4d": {
                    "process_data": 4,
                    "process_data_and_update": 1,
                    "process_data_recursive": 22,
                    "process_data_recursively": 1,
                    "process_nested_data": 1,
                    "process_recursive_data": 1
                },
                "auVar4": {
                    "auxiliary_data": 1,
                    "check_and_process_result": 1,
                    "check_result": 5,
                    "check_result_arr": 1,
                    "check_result_array": 3,
                    "data_array": 2,
                    "data_check": 1,
                    "output": 1,
                    "process_result": 1,
                    "processed_data": 3,
                    "result_array": 9,
                    "result_data": 1
                },
                "cVar1": {
                    "check_result": 6,
                    "data_processed": 1,
                    "data_valid": 1,
                    "flag": 1,
                    "is_data_valid": 1,
                    "result": 19,
                    "status": 1
                },
                "check_and_process_data_00112502": {
                    "check_and_process_data": 2
                },
                "param_1": {
                    "arg1": 3,
                    "arg_1": 1,
                    "data_1": 10,
                    "input_1": 12,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "param_1": 1
                },
                "param_2": {
                    "arg2": 3,
                    "arg_2": 1,
                    "data_2": 10,
                    "input_2": 12,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "param_2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "data": 7,
                    "data_1": 1,
                    "data_3": 3,
                    "data_ptr": 4,
                    "data_struct": 2,
                    "data_struct_ptr": 3,
                    "data_structure": 2,
                    "param_3_value": 1,
                    "param_struct": 1,
                    "ptr_struct": 2,
                    "recursive_data": 1,
                    "recursive_param": 1
                },
                "param_4": {
                    "arg4": 3,
                    "arg_4": 1,
                    "data_4": 7,
                    "input_4": 4,
                    "input_param_4": 1,
                    "param4": 2,
                    "param_4": 7,
                    "ptr_4": 1,
                    "ptr_data": 1,
                    "unused_param": 2,
                    "unused_param_1": 1
                },
                "param_5": {
                    "arg5": 3,
                    "arg_5": 1,
                    "data_5": 7,
                    "input_5": 4,
                    "input_param_5": 1,
                    "output": 1,
                    "param5": 2,
                    "param_5": 7,
                    "ptr_5": 1,
                    "unused_param": 1,
                    "unused_param_2": 2
                },
                "process_and_update_data_0010ec73": {
                    "process_and_update_data": 2
                },
                "process_data_001135a5": {
                    "process_data": 1,
                    "process_data_item": 1
                },
                "puVar3": {
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "data_iterator": 1,
                    "data_pointer": 1,
                    "data_ptr": 6,
                    "list_ptr": 1,
                    "nested_struct_ptr": 1,
                    "next_data_ptr": 1,
                    "pointer": 1,
                    "ptr": 12,
                    "ptr_next": 1,
                    "ptr_to_data": 1,
                    "ptr_to_data_struct": 1,
                    "ptr_var": 1
                },
                "uVar2": {
                    "output": 1,
                    "result": 6,
                    "return_val": 1,
                    "return_value": 3,
                    "update_result": 5,
                    "updated_param": 1,
                    "updated_result": 8,
                    "updated_value": 4,
                    "updated_var": 1
                },
                "update_max_param_and_process_string_0010ed2c": {
                    "update_max_param_and_process_string": 2
                }
            },
            "called": [
                "FUN_00112502",
                "FUN_0010ed2c",
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d"
            ],
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "code": "\nundefined8\nprocess_recursive_data_00113a4d(undefined8 input_1,undefined8 input_2,long data,undefined8 data_4,\n            undefined8 data_5)\n\n{\n  char result;\n  undefined8 updated_result;\n  undefined8 *ptr;\n  undefined result_array [16];\n  \n  result = check_and_process_data(input_1,input_2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = process_and_update_data(input_2,*(undefined8 *)(data + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = process_data(input_1,input_2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_recursive_data_00113a4d(input_1,input_2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    result_array = check_and_process_data(input_1,input_2,*(undefined8 *)(data + 0x20));\n    if (result_array[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return result_array._0_8_;\n      }\n      updated_result = update_max_param_and_process_string(input_2,*(undefined8 *)(data + 0x20),result_array._8_8_,data_5);\n      return updated_result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_recursive_data_00113a4d",
            "entrypoint": "0x00113a4d",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113a4d": "process_recursive_data_00113a4d",
                "auVar4": "result_array",
                "cVar1": "result",
                "check_and_process_data_00112502": "check_and_process_data",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data",
                "param_4": "data_4",
                "param_5": "data_5",
                "process_and_update_data_0010ec73": "process_and_update_data",
                "process_data_001135a5": "process_data",
                "puVar3": "ptr",
                "uVar2": "updated_result",
                "update_max_param_and_process_string_0010ed2c": "update_max_param_and_process_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b1e": {
            "additional_data": {
                "FUN_00113b1e": {
                    "decompile_and_extract_info": 1,
                    "extract_and_validate_data": 1,
                    "extract_data": 2,
                    "extract_data_from_binary": 7,
                    "extract_real_type": 8,
                    "extract_real_type_and_offset": 1,
                    "extract_real_type_data": 1,
                    "extract_real_type_from_debug_info": 2,
                    "extract_real_type_from_param": 1,
                    "extract_value_from_binary": 6,
                    "get_real_value_from_param": 1
                },
                "auVar1": {
                    "data_with_address": 1,
                    "default_output": 4,
                    "default_output_data": 1,
                    "default_value": 1,
                    "extracted_value": 1,
                    "output": 3,
                    "output_1": 1,
                    "output_address_and_offset": 1,
                    "output_array": 1,
                    "output_data": 1,
                    "output_value_1": 1,
                    "output_var1": 1,
                    "result": 2,
                    "result_1": 1,
                    "result_data": 1,
                    "result_without_data": 1,
                    "return_value1": 1,
                    "undefined_result": 1
                },
                "auVar4": {
                    "aux_output": 1,
                    "data_with_value": 1,
                    "final_output": 1,
                    "final_result": 2,
                    "improved_output_array": 1,
                    "modified_result": 1,
                    "output": 1,
                    "output_2": 1,
                    "output_data": 2,
                    "output_error": 1,
                    "output_value": 2,
                    "output_value_2": 1,
                    "output_var2": 1,
                    "result": 5,
                    "result_2": 1,
                    "result_value": 2,
                    "result_with_data": 1,
                    "return_val": 1,
                    "return_value": 1,
                    "return_value2": 1,
                    "updated_output_data": 1,
                    "updated_result": 1
                },
                "param_1": {
                    "binary_address": 6,
                    "binary_data": 2,
                    "binary_offset": 1,
                    "binary_ptr": 1,
                    "input_address": 1,
                    "input_data": 3,
                    "input_param": 11,
                    "input_value": 3,
                    "input_value_1": 1,
                    "source_param": 1,
                    "value": 1
                },
                "param_2": {
                    "data_param": 1,
                    "data_type": 1,
                    "debug_info": 7,
                    "debug_param": 2,
                    "input_value_2": 1,
                    "param_2": 1,
                    "ptr_param": 1,
                    "unused": 2,
                    "unused_param": 13,
                    "unused_parameter": 2
                },
                "param_3": {
                    "auxiliary_data": 1,
                    "data_address": 1,
                    "data_length": 2,
                    "data_param": 2,
                    "data_value": 1,
                    "default_offset": 1,
                    "default_value": 6,
                    "destination_param": 1,
                    "extracted_data_address": 1,
                    "initial_value": 2,
                    "input_value": 1,
                    "input_value_3": 1,
                    "output_data": 1,
                    "output_param": 3,
                    "output_val": 1,
                    "output_value": 1,
                    "param_3": 1,
                    "param_value": 1,
                    "source_param": 1,
                    "ulong_param": 1,
                    "value": 1
                },
                "param_4": {
                    "aux_data": 1,
                    "aux_param": 1,
                    "constant_param": 1,
                    "custom_value": 1,
                    "default_val": 1,
                    "default_value": 6,
                    "desired_value": 1,
                    "error_value": 1,
                    "initial_value": 1,
                    "input_value_4": 1,
                    "output_value": 4,
                    "param_4": 1,
                    "ptr_param2": 1,
                    "real_type_param": 1,
                    "result": 1,
                    "result_param": 2,
                    "result_placeholder": 1,
                    "return_param": 1,
                    "target_value": 1,
                    "unused_param2": 2,
                    "unused_parameter_2": 1
                },
                "piVar2": {
                    "debug_data": 3,
                    "debug_info": 8,
                    "debug_info_ptr": 4,
                    "debug_ptr": 1,
                    "extracted_info": 3,
                    "info_ptr": 1,
                    "pointer_to_int": 1,
                    "ptr_extracted_info": 1,
                    "real_type_data": 1,
                    "real_type_info": 2,
                    "real_type_pointer": 1,
                    "real_type_ptr": 3,
                    "type_info": 2
                },
                "uVar3": {
                    "extracted_data": 3,
                    "extracted_value": 11,
                    "real_type": 1,
                    "real_value": 1,
                    "result": 9,
                    "result_value": 4,
                    "value": 2
                }
            },
            "called": [
                "FUN_00112b6e"
            ],
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "code": "\nundefined  [16] extract_real_type_from_debug_info_00113b1e(long input_param,undefined8 unused_param,ulong default_value,undefined8 default_value)\n\n{\n  undefined default_output [16];\n  int *debug_info;\n  undefined8 extracted_value;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    debug_info = (int *)extract_real_type_from_debug_info_00113b1e_00112b6e(input_param,0);\n    if ((debug_info == (int *)0x0) || (3 < *debug_info - 7U)) {\n      extracted_value = 0;\n    }\n    else {\n      extracted_value = **(undefined8 **)(debug_info + 4);\n    }\n    result._8_8_ = default_value;\n    result._0_8_ = extracted_value;\n    return result;\n  }\n  default_output._8_8_ = 0;\n  default_output._0_8_ = default_value;\n  return default_output << 0x40;\n}\n\n",
            "current_name": "extract_real_type_from_debug_info_00113b1e",
            "entrypoint": "0x00113b1e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b1e": "extract_real_type_from_debug_info_00113b1e",
                "auVar1": "default_output",
                "auVar4": "result",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "default_value",
                "param_4": "default_value",
                "piVar2": "debug_info",
                "uVar3": "extracted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b4a": {
            "additional_data": {
                "FUN_00113b4a": {
                    "allocate_memory_block": 2,
                    "create_initialized_memory_block": 1,
                    "create_memory_block": 2,
                    "initialize_memory": 1,
                    "initialize_memory_block": 22,
                    "initialize_memory_block_from_param": 1,
                    "initialize_memory_block_or_return_zero": 1,
                    "initialize_memory_block_with_param": 1
                },
                "initialize_memory_block_00112904": {
                    "allocate_memory_block": 1,
                    "initialize_memory_block": 2
                },
                "lVar1": {
                    "allocated_block": 1,
                    "memory_block": 24,
                    "memory_block_address": 2,
                    "memory_block_pointer": 1,
                    "memory_block_ptr": 1,
                    "result": 1
                },
                "param_1": {
                    "data": 2,
                    "input_param": 1,
                    "input_value": 23,
                    "memory_size": 3,
                    "size": 2
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_block_from_param_00113b4a(long input_value)\n\n{\n  long memory_block;\n  \n  if (input_value != 0) {\n    memory_block = initialize_memory_block(0x15,0);\n    if (memory_block == 0) {\n      memory_block = 0;\n    }\n    else {\n      *(long *)(memory_block + 0x10) = input_value;\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_block_from_param_00113b4a",
            "entrypoint": "0x00113b4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b4a": "initialize_memory_block_from_param_00113b4a",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar1": "memory_block",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b71": {
            "additional_data": {
                "0x14": {
                    "block_size": 1
                },
                "FUN_00113b71": {
                    "allocate_memory_block": 1,
                    "create_memory_block": 1,
                    "initialize_memory": 1,
                    "initialize_memory_block": 28
                },
                "initialize_memory_block_00112904": {
                    "allocate_memory_block": 1,
                    "initialize_block": 1
                },
                "lVar1": {
                    "memory_block": 26,
                    "memory_block_addr": 1,
                    "memory_block_ptr": 4
                },
                "param_1": {
                    "block_size": 1,
                    "data": 1,
                    "data_size": 1,
                    "input_value": 17,
                    "memory_size": 5,
                    "size": 5,
                    "size_of_block": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_block_00113b71(long input_value)\n\n{\n  long memory_block;\n  \n  if (input_value != 0) {\n    memory_block = allocate_memory_block(0x14,0);\n    if (memory_block == 0) {\n      memory_block = 0;\n    }\n    else {\n      *(long *)(memory_block + 0x10) = input_value;\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_block_00113b71",
            "entrypoint": "0x00113b71",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b71": "initialize_memory_block_00113b71",
                "initialize_memory_block_00112904": "allocate_memory_block",
                "lVar1": "memory_block",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113b98": {
            "additional_data": {
                "FUN_00113b98": {
                    "allocate_memory_block": 1,
                    "create_and_initialize_memory_block": 1,
                    "create_memory_block": 4,
                    "initialize_and_allocate_memory": 1,
                    "initialize_memory": 1,
                    "initialize_memory_block": 23
                },
                "lVar1": {
                    "mem_block": 1,
                    "memory_block": 24,
                    "memory_block_address": 2,
                    "memory_block_ptr": 3
                },
                "param_1": {
                    "block_size": 10,
                    "initial_value": 1,
                    "input1": 2,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "input_parameter1": 1,
                    "mem_block_id": 1,
                    "memory_address": 1,
                    "memory_block_size": 3,
                    "size": 3,
                    "size_of_block": 4,
                    "source_address": 1,
                    "value1": 1
                },
                "param_2": {
                    "input2": 2,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "input_parameter2": 1,
                    "param2": 4,
                    "param2_value": 2,
                    "param_2": 6,
                    "second_value": 1,
                    "value1": 4,
                    "value2": 1,
                    "value_1": 7
                },
                "param_3": {
                    "input3": 2,
                    "input_param3": 1,
                    "input_param_3": 2,
                    "input_parameter3": 1,
                    "param3": 4,
                    "param3_value": 2,
                    "param_3": 6,
                    "third_value": 1,
                    "value2": 4,
                    "value3": 1,
                    "value_2": 7
                },
                "param_4": {
                    "additional_parameter": 1,
                    "input4": 2,
                    "input_param4": 1,
                    "input_param_4": 2,
                    "input_parameter4": 1,
                    "param4": 4,
                    "param4_value": 2,
                    "param_4": 7,
                    "undefined_param": 3,
                    "value3": 2,
                    "value4": 1,
                    "value_3": 4
                },
                "plVar2": {
                    "allocated_block": 4,
                    "allocated_block_pointer": 1,
                    "allocated_memory": 1,
                    "allocated_memory_block": 2,
                    "block_pointer": 3,
                    "block_ptr": 4,
                    "data_block": 1,
                    "dynamic_memory": 1,
                    "new_block": 4,
                    "new_block_ptr": 2,
                    "new_memory_block": 2,
                    "ptr_block": 1,
                    "ptr_mem": 1,
                    "ptr_to_allocated_memory": 1,
                    "ptr_to_data": 1,
                    "ptr_to_memory": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_and_initialize_memory_block_00113b98(long block_size,long value_1,long value_2,undefined param_4)\n\n{\n  long memory_block;\n  long *new_block;\n  \n  if ((block_size != 0) && (memory_block = initialize_memory_block_00112904(0x13,0), memory_block != 0)) {\n    new_block = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)new_block + 0x19) = 0;\n    *new_block = block_size;\n    *(undefined4 *)((long)new_block + 0x1c) = 0;\n    new_block[1] = value_1;\n    new_block[2] = value_2;\n    *(undefined *)(new_block + 3) = param_4;\n    *(long **)(memory_block + 0x10) = new_block;\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_and_initialize_memory_block_00113b98",
            "entrypoint": "0x00113b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113b98": "create_and_initialize_memory_block_00113b98",
                "lVar1": "memory_block",
                "param_1": "block_size",
                "param_2": "value_1",
                "param_3": "value_2",
                "plVar2": "new_block",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113bfa": {
            "additional_data": {
                "FUN_00113bfa": {
                    "create_memory_block": 21,
                    "initialize_memory_and_store_params": 1,
                    "initialize_memory_block": 9
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 3
                },
                "lVar1": {
                    "block": 1,
                    "block_address": 1,
                    "memory_address": 1,
                    "memory_block": 25,
                    "memory_block_address": 3
                },
                "param_1": {
                    "block_size": 2,
                    "data_1": 2,
                    "data_size": 1,
                    "initial_value": 1,
                    "input_1": 7,
                    "input_param_1": 3,
                    "input_value_1": 2,
                    "memory_size": 3,
                    "size": 7,
                    "source_address": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "data": 1,
                    "data_2": 2,
                    "data_size": 1,
                    "initial_value": 3,
                    "input_2": 7,
                    "input_param_2": 3,
                    "input_value_2": 2,
                    "size": 2,
                    "value": 8,
                    "value2": 1,
                    "value_2": 1
                },
                "plVar2": {
                    "allocated_block": 1,
                    "allocated_memory": 9,
                    "block_data": 2,
                    "block_pointer": 2,
                    "block_ptr": 2,
                    "data_ptr": 1,
                    "memory_block": 3,
                    "memory_block_ptr": 1,
                    "memory_ptr": 1,
                    "new_memory_block": 1,
                    "pointer": 3,
                    "ptr": 2,
                    "ptr_memory_block": 1,
                    "ptr_to_values": 2
                },
                "xmalloc": {
                    "allocate_memory": 7
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nlong create_memory_block_00113bfa(long size,long value)\n\n{\n  long memory_block;\n  long *allocated_memory;\n  \n  if (((size != 0) && (value != 0)) && (memory_block = initialize_memory_block(0x12,0), memory_block != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = size;\n    allocated_memory[1] = value;\n    *(long **)(memory_block + 0x10) = allocated_memory;\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "create_memory_block_00113bfa",
            "entrypoint": "0x00113bfa",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113bfa": "create_memory_block_00113bfa",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar1": "memory_block",
                "param_1": "size",
                "param_2": "value",
                "plVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113c43": {
            "additional_data": {
                "FUN_00113c43": {
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_initialize_memory_block": 1,
                    "create_memory_block": 1,
                    "initialize_and_allocate_memory": 2,
                    "initialize_and_store_data": 1,
                    "initialize_block": 1,
                    "initialize_data_block": 1,
                    "initialize_data_structure": 2,
                    "initialize_memory": 3,
                    "initialize_memory_allocation": 1,
                    "initialize_memory_and_store_params": 4,
                    "initialize_memory_block": 13
                },
                "LAB_00113caa": {
                    "end_label": 1
                },
                "auVar3": {
                    "result": 16,
                    "result_struct": 2,
                    "return_value": 4
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 2
                },
                "lVar1": {
                    "allocated_memory": 1,
                    "mem_block": 2,
                    "mem_block_addr": 1,
                    "memory_block": 22,
                    "memory_block_address": 1,
                    "memory_block_pointer": 1,
                    "memory_block_ptr": 3
                },
                "param_1": {
                    "block_value_1": 1,
                    "data_1": 1,
                    "data_ptr": 1,
                    "initial_value": 1,
                    "input1": 2,
                    "input_1": 2,
                    "input_param1": 3,
                    "input_param_1": 3,
                    "memory_address": 1,
                    "memory_block_size": 2,
                    "memory_size": 5,
                    "size": 4,
                    "source_address": 3,
                    "source_param": 1,
                    "value_1": 1
                },
                "param_2": {
                    "block_value_2": 1,
                    "count": 1,
                    "data_2": 1,
                    "destination_address": 3,
                    "destination_param": 1,
                    "flag": 1,
                    "initial_value": 1,
                    "initialized_value": 1,
                    "input2": 2,
                    "input_2": 2,
                    "input_param2": 3,
                    "input_param_2": 3,
                    "memory_flag": 1,
                    "other_data_ptr": 1,
                    "padding": 1,
                    "param_2": 1,
                    "param_2_value": 2,
                    "secondary_value": 1,
                    "value": 3,
                    "value_2": 1
                },
                "param_3": {
                    "block_value_3": 1,
                    "data_3": 1,
                    "data_value_1": 1,
                    "input3": 2,
                    "input_3": 2,
                    "input_param3": 3,
                    "input_param_3": 3,
                    "param1": 2,
                    "param3": 2,
                    "param_3": 7,
                    "param_3_value": 2,
                    "parameter_3": 1,
                    "size_param": 1,
                    "tertiary_value": 1,
                    "value1": 1,
                    "value_3": 1
                },
                "param_4": {
                    "block_value_4": 1,
                    "data_4": 1,
                    "data_value_2": 1,
                    "input4": 2,
                    "input_4": 2,
                    "input_param4": 3,
                    "input_param_4": 3,
                    "offset_param": 1,
                    "param2": 2,
                    "param4": 2,
                    "param_4": 7,
                    "param_4_value": 2,
                    "parameter_4": 1,
                    "quaternary_value": 1,
                    "value2": 1,
                    "value_4": 1
                },
                "param_5": {
                    "block_undefined": 1,
                    "data_5": 1,
                    "data_value_3": 1,
                    "input5": 2,
                    "input_5": 2,
                    "input_param5": 3,
                    "input_param_5": 3,
                    "param3": 2,
                    "param5": 2,
                    "param_5": 7,
                    "param_5_value": 2,
                    "parameter_5": 1,
                    "undefined_param": 1,
                    "unknown_value": 1,
                    "value3": 1,
                    "value_5": 1
                },
                "param_6": {
                    "callback_fn": 1,
                    "callback_function": 1,
                    "input6": 2,
                    "input_6": 2,
                    "input_param6": 3,
                    "input_param_6": 3,
                    "param4": 2,
                    "param6": 2,
                    "param_6": 8,
                    "param_6_value": 2,
                    "parameter_6": 1,
                    "result": 1,
                    "result_value": 2,
                    "value_6": 1
                },
                "plVar2": {
                    "allocated_block": 2,
                    "allocated_memory": 2,
                    "block_ptr": 3,
                    "buffer": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_block": 3,
                    "data_pointer": 1,
                    "dynamic_array_ptr": 1,
                    "mem_info": 1,
                    "memory_block": 1,
                    "memory_block_contents": 1,
                    "memory_block_ptr": 1,
                    "memory_data": 2,
                    "new_block": 1,
                    "pointer_array": 1,
                    "pointer_to_struct": 1,
                    "ptr": 1,
                    "ptr_memory_block": 1,
                    "struct_ptr": 4
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\nallocate_and_initialize_memory_block_00113c43(long memory_size,long input_param_2,long param_3,long param_4,undefined param_5,\n            undefined8 param_6)\n\n{\n  long memory_block;\n  long *struct_ptr;\n  undefined result [16];\n  \n  if ((memory_size != 0) && (input_param_2 != 0)) {\n    memory_block = initialize_memory_block(0x10,0);\n    if (memory_block != 0) {\n      struct_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)struct_ptr + 0x21) = 0;\n      *struct_ptr = memory_size;\n      *(undefined4 *)((long)struct_ptr + 0x24) = 0;\n      struct_ptr[1] = input_param_2;\n      struct_ptr[2] = param_3;\n      struct_ptr[3] = param_4;\n      *(undefined *)(struct_ptr + 4) = param_5;\n      *(long **)(memory_block + 0x10) = struct_ptr;\n      goto end_label;\n    }\n  }\n  memory_block = 0;\nend_label:\n  result._8_8_ = param_6;\n  result._0_8_ = memory_block;\n  return result;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_block_00113c43",
            "entrypoint": "0x00113c43",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_memory_block_00113c43",
                "LAB_00113caa": "end_label",
                "auVar3": "result",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar1": "memory_block",
                "param_1": "memory_size",
                "param_2": "input_param_2",
                "plVar2": "struct_ptr",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113cb9": {
            "additional_data": {
                "FUN_00113cb9": {
                    "allocate_memory_block": 2,
                    "create_memory_block": 1,
                    "initialize_memory": 2,
                    "initialize_memory_block": 25,
                    "initialize_memory_block_or_zero": 1
                },
                "initialize_memory_block_00112904": {
                    "allocate_memory_block": 2,
                    "initialize_memory_block": 2
                },
                "lVar1": {
                    "mem_block": 1,
                    "memory_block": 25,
                    "memory_block_addr": 1,
                    "memory_block_address": 2,
                    "memory_block_ptr": 2
                },
                "param_1": {
                    "input": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 26,
                    "size": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_memory_block_or_zero_00113cb9(long input_value)\n\n{\n  long memory_block;\n  \n  if (input_value != 0) {\n    memory_block = allocate_memory_block(0xe,0);\n    if (memory_block == 0) {\n      memory_block = 0;\n    }\n    else {\n      *(long *)(memory_block + 0x10) = input_value;\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_block_or_zero_00113cb9",
            "entrypoint": "0x00113cb9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113cb9": "initialize_memory_block_or_zero_00113cb9",
                "initialize_memory_block_00112904": "allocate_memory_block",
                "lVar1": "memory_block",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ce0": {
            "additional_data": {
                "FUN_00113ce0": {
                    "allocate_memory_block": 2,
                    "initialize_and_allocate_block": 1,
                    "initialize_and_allocate_memory": 6,
                    "initialize_block": 1,
                    "initialize_memory": 6,
                    "initialize_memory_and_store_params": 3,
                    "initialize_memory_block": 12
                },
                "auVar3": {
                    "output": 1,
                    "result": 12,
                    "return_value": 8
                },
                "lVar1": {
                    "allocated_memory": 1,
                    "block_initialized": 1,
                    "memory_block": 25,
                    "memory_block_address": 1,
                    "memory_block_initialized": 1,
                    "memory_block_ptr": 2
                },
                "param_1": {
                    "address": 1,
                    "block_size": 1,
                    "input1": 1,
                    "input_1": 1,
                    "input_param": 6,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_value": 1,
                    "memory_address": 3,
                    "memory_block": 2,
                    "memory_block_size": 2,
                    "memory_contents": 1,
                    "memory_pointer": 1,
                    "memory_size": 6,
                    "source_address": 2
                },
                "param_2": {
                    "data_size": 2,
                    "destination_address": 2,
                    "initial_value": 1,
                    "input2": 1,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "input_value": 1,
                    "length_param": 1,
                    "other_param": 1,
                    "param_2": 9,
                    "param_2_value": 2,
                    "param_value": 2,
                    "size_param": 3,
                    "value": 2
                },
                "param_3": {
                    "arg_3": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "flag_value": 1,
                    "input3": 1,
                    "input_3": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "param_3": 10,
                    "param_3_value": 2,
                    "param_undefined": 1,
                    "placeholder": 1,
                    "some_value": 1,
                    "undefined_data": 1,
                    "undefined_param": 4,
                    "undefined_value": 1,
                    "unknown_param": 1
                },
                "param_4": {
                    "arg_4": 1,
                    "input_4": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "param_4": 11,
                    "param_4_value": 2,
                    "param_undefined8_1": 1,
                    "undefined8_param_1": 1,
                    "unused": 1,
                    "unused_param": 6,
                    "unused_param_1": 3
                },
                "param_5": {
                    "arg_5": 1,
                    "input5": 1,
                    "input_5": 1,
                    "input_param5": 1,
                    "input_param_5": 1,
                    "input_parameter_5": 1,
                    "output_param": 4,
                    "param_5": 9,
                    "param_5_value": 1,
                    "param_undefined8_2": 1,
                    "result": 2,
                    "result_param": 1,
                    "result_value": 2,
                    "undefined8_param_2": 1,
                    "unused_param_2": 3
                },
                "plVar2": {
                    "allocated_block": 2,
                    "allocated_memory": 8,
                    "allocated_memory_block": 1,
                    "block_metadata": 1,
                    "block_pointer": 1,
                    "block_ptr": 3,
                    "data_ptr": 1,
                    "dynamic_array": 2,
                    "mem_block_ptr": 1,
                    "memory_block": 1,
                    "memory_block_ptr": 2,
                    "memory_ptr": 1,
                    "new_block": 1,
                    "new_memory_block": 3,
                    "pointer_to_memory_block": 1,
                    "ptr_to_struct": 1,
                    "struct_ptr": 1
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nundefined  [16]\ninitialize_memory_block_00113ce0(long input_param,long param_2,undefined param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  long memory_block;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if (input_param != 0) {\n    memory_block = initialize_memory_block_00113ce0_00112904(0xd,0);\n    if (memory_block != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = param_2;\n      *(undefined *)(allocated_memory + 2) = param_3;\n      *(long **)(memory_block + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  memory_block = 0;\nLAB_00113d2f:\n  result._8_8_ = param_5;\n  result._0_8_ = memory_block;\n  return result;\n}\n\n",
            "current_name": "initialize_memory_block_00113ce0",
            "entrypoint": "0x00113ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ce0": "initialize_memory_block_00113ce0",
                "auVar3": "result",
                "lVar1": "memory_block",
                "param_1": "input_param",
                "plVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d3a": {
            "additional_data": {
                "FUN_00113d3a": {
                    "allocate_or_get_existing_memory_block": 1,
                    "find_memory_block": 1,
                    "find_or_initialize_memory_block": 1,
                    "get_initialized_block": 1,
                    "get_initialized_memory_block": 1,
                    "get_memory_block": 6,
                    "get_memory_block_address": 1,
                    "get_or_create_memory_block": 2,
                    "initialize_memory_block": 3,
                    "initialize_memory_if_needed": 1,
                    "initialize_or_get_memory_block": 13
                },
                "initialize_memory_block_00112904": {
                    "create_memory_block": 1,
                    "initialize_memory_block": 4
                },
                "lVar1": {
                    "block_address": 1,
                    "existing_block": 3,
                    "existing_block_address": 1,
                    "existing_block_pointer": 1,
                    "existing_memory_block": 1,
                    "initialized_block": 1,
                    "memory_block": 18,
                    "memory_block_address": 2,
                    "new_memory_block": 1,
                    "next_block": 1,
                    "next_memory_block": 1
                },
                "param_1": {
                    "address": 1,
                    "input": 6,
                    "input_address": 2,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_value": 6,
                    "memory_address": 4,
                    "memory_block": 5,
                    "memory_block_address": 1,
                    "memory_block_pointer": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_or_get_memory_block_00113d3a(long input)\n\n{\n  long memory_block;\n  \n  if (input != 0) {\n    memory_block = *(long *)(input + 8);\n    if (memory_block == 0) {\n      memory_block = initialize_memory_block(0xc,0);\n      if (memory_block == 0) {\n        memory_block = 0;\n      }\n      else {\n        *(long *)(memory_block + 0x10) = input;\n        *(long *)(input + 8) = memory_block;\n      }\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_or_get_memory_block_00113d3a",
            "entrypoint": "0x00113d3a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_memory_block_00113d3a",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar1": "memory_block",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113d6e": {
            "additional_data": {
                "FUN_00113d6e": {
                    "allocate_and_initialize_memory": 1,
                    "allocate_memory_block": 3,
                    "create_memory_block": 7,
                    "initialize_and_allocate_memory_block": 2,
                    "initialize_and_store_memory_block": 1,
                    "initialize_memory": 1,
                    "initialize_memory_block": 16
                },
                "lVar1": {
                    "block_ptr": 1,
                    "mem_block": 1,
                    "memory_block": 23,
                    "memory_block_address": 3,
                    "memory_block_ptr": 2
                },
                "param_1": {
                    "address": 1,
                    "block_value": 1,
                    "data_1": 3,
                    "first_parameter": 1,
                    "initial_value": 1,
                    "input1": 3,
                    "input_1": 2,
                    "input_param1": 3,
                    "input_param_1": 3,
                    "input_parameter_1": 1,
                    "input_value_1": 3,
                    "memory_block_size": 1,
                    "param1": 3,
                    "size": 1,
                    "source_address": 1,
                    "source_value": 1,
                    "value1": 2
                },
                "param_2": {
                    "block_size": 1,
                    "data_2": 3,
                    "destination_address": 1,
                    "destination_value": 1,
                    "flag": 1,
                    "initializer": 1,
                    "input2": 3,
                    "input_2": 2,
                    "input_param2": 3,
                    "input_param_2": 3,
                    "input_parameter_2": 1,
                    "input_value_2": 3,
                    "param2": 3,
                    "second_parameter": 1,
                    "secondary_value": 1,
                    "value": 1,
                    "value2": 2
                },
                "puVar2": {
                    "allocated_block": 1,
                    "allocated_memory": 12,
                    "allocated_memory_block": 3,
                    "allocated_ptr": 2,
                    "block_ptr": 1,
                    "dynamic_memory_ptr": 1,
                    "memory_block_ptr": 1,
                    "new_alloc_ptr": 1,
                    "new_block_ptr": 3,
                    "new_data": 2,
                    "new_memory_block": 2,
                    "ptr": 1,
                    "ptr_to_memory": 1
                },
                "xmalloc": {
                    "allocate_memory": 2
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "code": "\nlong initialize_and_allocate_memory_block_00113d6e(undefined8 input_value_1,undefined8 input2)\n\n{\n  long memory_block;\n  undefined8 *allocated_memory;\n  \n  memory_block = initialize_memory_block_00112904(0xb,0);\n  if (memory_block != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_value_1;\n    allocated_memory[1] = input2;\n    *(undefined8 **)(memory_block + 0x10) = allocated_memory;\n  }\n  return memory_block;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_block_00113d6e",
            "entrypoint": "0x00113d6e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113d6e": "initialize_and_allocate_memory_block_00113d6e",
                "lVar1": "memory_block",
                "param_1": "input_value_1",
                "param_2": "input2",
                "puVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113da9": {
            "additional_data": {
                "FUN_00113da9": {
                    "initialize_and_allocate_memory": 1,
                    "initialize_and_allocate_memory_block": 1,
                    "initialize_and_assign_memory": 1,
                    "initialize_block": 3,
                    "initialize_memory": 13,
                    "initialize_memory_and_set_value": 1,
                    "initialize_memory_block": 11
                },
                "auVar5": {
                    "allocated_memory": 1,
                    "result": 24,
                    "return_value": 3
                },
                "bVar4": {
                    "byte_count": 1,
                    "byte_counter": 2,
                    "byte_offset": 2,
                    "byte_offset_counter": 1,
                    "byte_val": 2,
                    "byte_value": 1,
                    "byte_var": 1,
                    "counter": 1,
                    "increment": 1,
                    "index": 2,
                    "loop_increment": 2,
                    "loop_index": 2,
                    "offset_increment": 1,
                    "padding": 1,
                    "temp": 2,
                    "temp_byte": 3,
                    "temp_value": 1,
                    "temp_var": 1,
                    "value": 1,
                    "zero": 1,
                    "zero_value": 1
                },
                "lVar2": {
                    "count": 2,
                    "counter": 4,
                    "i": 2,
                    "loop_count": 1,
                    "loop_counter": 20,
                    "remaining_bytes": 1
                },
                "param_1": {
                    "block_size": 1,
                    "byte_count": 6,
                    "byte_length": 1,
                    "byte_offset": 2,
                    "byte_param": 5,
                    "byte_value": 6,
                    "bytes_to_allocate": 1,
                    "input_length": 1,
                    "input_size": 2,
                    "num_bytes": 1,
                    "offset": 3,
                    "size": 2
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 2,
                    "arg_2": 1,
                    "input1": 2,
                    "input_param1": 1,
                    "param2": 4,
                    "param_2": 15,
                    "unused": 1,
                    "unused_param": 2,
                    "unused_parameter": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 2,
                    "arg_3": 1,
                    "data": 1,
                    "initial_value": 1,
                    "input2": 2,
                    "input_param": 2,
                    "input_param2": 1,
                    "memory_value": 1,
                    "param3": 4,
                    "param3_value": 1,
                    "param_3": 9,
                    "param_3_value": 1,
                    "pointer_to_memory": 1,
                    "src_ptr": 1,
                    "value": 1,
                    "value_param": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 2,
                    "arg_4": 1,
                    "au_var5": 1,
                    "data": 2,
                    "dst_ptr": 1,
                    "input3": 2,
                    "input_param3": 1,
                    "output_param": 1,
                    "param4": 4,
                    "param4_value": 1,
                    "param_4": 12,
                    "param_4_value": 1,
                    "pointer_param": 1
                },
                "puVar1": {
                    "allocated_memory": 1,
                    "allocated_memory_block": 1,
                    "block_ptr": 2,
                    "mem_block": 2,
                    "memory_block": 21,
                    "new_block_ptr": 1,
                    "ptr": 1,
                    "ptr1": 1
                },
                "puVar3": {
                    "current_address": 2,
                    "current_block": 1,
                    "current_memory": 1,
                    "current_pointer": 6,
                    "current_ptr": 8,
                    "new_ptr": 1,
                    "pointer": 1,
                    "ptr": 6,
                    "ptr2": 1,
                    "ptr3": 1,
                    "temp_ptr": 2
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f",
                "FUN_0010e07c"
            ],
            "code": "\nundefined  [16] initialize_and_allocate_memory_block_00113da9(byte byte_value,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *memory_block;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte temp_byte;\n  undefined result [16];\n  \n  temp_byte = 0;\n  result._0_8_ = initialize_memory_block_00112904(8 - (uint)byte_value);\n  if (result._0_8_ != 0) {\n    memory_block = (undefined8 *)xmalloc(0x28);\n    current_ptr = memory_block + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)temp_byte * -8 + 4);\n    }\n    *memory_block = param_3;\n    *(undefined8 **)(result._0_8_ + 0x10) = memory_block;\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "current_name": "initialize_and_allocate_memory_block_00113da9",
            "entrypoint": "0x00113da9",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113da9": "initialize_and_allocate_memory_block_00113da9",
                "auVar5": "result",
                "bVar4": "temp_byte",
                "lVar2": "loop_counter",
                "param_1": "byte_value",
                "puVar1": "memory_block",
                "puVar3": "current_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113df2": {
            "additional_data": {
                "FUN_00113df2": {
                    "initialize_block": 1,
                    "initialize_block_with_size": 1,
                    "initialize_memory": 7,
                    "initialize_memory_block": 22
                },
                "initialize_memory_block_00112904": {
                    "initialize_block": 4,
                    "initialize_block_helper": 1,
                    "initialize_memory_block": 3,
                    "initialize_memory_block_for_size": 1
                },
                "param_1": {
                    "block_size": 16,
                    "memory_block_size": 3,
                    "memory_size": 2,
                    "param": 2,
                    "size": 8
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_memory_block_00113df2(undefined4 block_size)\n\n{\n  initialize_block(4,block_size);\n  return;\n}\n\n",
            "current_name": "initialize_memory_block_00113df2",
            "entrypoint": "0x00113df2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113df2": "initialize_memory_block_00113df2",
                "initialize_memory_block_00112904": "initialize_block",
                "param_1": "block_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113dfe": {
            "additional_data": {
                "FUN_00113dfe": {
                    "init_memory_block": 1,
                    "initialize_memory": 1,
                    "initialize_memory_and_set_value": 1,
                    "initialize_memory_block": 7,
                    "initialize_memory_with_param": 1,
                    "initialize_memory_with_parameter": 2,
                    "initialize_memory_with_value": 2,
                    "set_memory_block_value": 3,
                    "set_memory_value": 1,
                    "store_data": 1,
                    "store_parameter_value": 1,
                    "update_block_data": 1,
                    "update_memory_block": 6,
                    "write_char_to_memory_block": 1,
                    "write_to_memory": 1,
                    "write_to_memory_block": 1
                },
                "lVar1": {
                    "block_address": 2,
                    "mem_block": 1,
                    "memory_block": 18,
                    "memory_block_addr": 2,
                    "memory_block_address": 6,
                    "memory_block_pointer": 1,
                    "memory_block_start": 1
                },
                "param_1": {
                    "block_size": 15,
                    "data_type": 1,
                    "memory_block_size": 1,
                    "memory_size": 2,
                    "num": 1,
                    "num_blocks": 2,
                    "param": 1,
                    "param_ptr": 1,
                    "parameter": 1,
                    "size": 4,
                    "value": 1
                },
                "param_2": {
                    "byte_value": 1,
                    "char_to_write": 1,
                    "data": 8,
                    "new_value": 1,
                    "param_value": 1,
                    "value": 16,
                    "value_to_assign": 1,
                    "value_to_set": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_memory_block_00113dfe(undefined4 block_size,undefined value)\n\n{\n  long memory_block;\n  \n  memory_block = initialize_memory_block_00113dfe_00112904(3,block_size);\n  if (memory_block != 0) {\n    *(undefined *)(memory_block + 0x10) = value;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_block_00113dfe",
            "entrypoint": "0x00113dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113dfe": "initialize_memory_block_00113dfe",
                "lVar1": "memory_block",
                "param_1": "block_size",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e17": {
            "additional_data": {
                "0": {
                    "default_value": 1,
                    "init_value": 2,
                    "initial_value": 4,
                    "parameter2": 1,
                    "value": 4
                },
                "2": {
                    "block_size": 3,
                    "memory_block_size": 1,
                    "num_blocks": 2,
                    "parameter1": 1,
                    "size": 5
                },
                "DAT_": {
                    "": 2,
                    "dat_": 1
                },
                "FUN_00113e17": {
                    "initialize_and_return_memory_block": 1,
                    "initialize_memory_block": 30
                },
                "PTR_": {
                    "": 2,
                    "ptr_": 1
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 15,
                    "initialize_memory_block_helper": 4
                },
                "num_blocks": {
                    "2": 1
                }
            },
            "called": [
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010c2d2"
            ],
            "code": "\nvoid initialize_and_return_memory_block_00113e17(void)\n\n{\n  initialize_memory_block(2,0);\n  return;\n}\n\n",
            "current_name": "initialize_and_return_memory_block_00113e17",
            "entrypoint": "0x00113e17",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e17": "initialize_and_return_memory_block_00113e17",
                "initialize_memory_block_00112904": "initialize_memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e23": {
            "additional_data": {
                "FUN_00113e23": {
                    "allocate_and_initialize_memory": 1,
                    "allocate_memory_block": 4,
                    "create_memory_block": 4,
                    "initialize_and_allocate_memory_block": 2,
                    "initialize_and_assign_memory_block": 2,
                    "initialize_and_store_block": 1,
                    "initialize_and_store_memory_block": 1,
                    "initialize_memory": 1,
                    "initialize_memory_block": 14,
                    "initialize_memory_with_parameters": 1
                },
                "initialize_memory_block_00112904": {
                    "initialize_memory_block": 3
                },
                "lVar1": {
                    "allocated_memory_block": 1,
                    "memory_block": 27,
                    "memory_block_address": 3
                },
                "param_1": {
                    "address": 1,
                    "data_1": 3,
                    "first_parameter": 3,
                    "input1": 3,
                    "input_param1": 3,
                    "input_param_1": 2,
                    "input_parameter_1": 4,
                    "input_value1": 2,
                    "input_value_1": 1,
                    "parameter1": 1,
                    "source_value": 1,
                    "value1": 3,
                    "value_1": 4
                },
                "param_2": {
                    "data_2": 3,
                    "destination_value": 1,
                    "input2": 3,
                    "input_param2": 3,
                    "input_param_2": 2,
                    "input_parameter_2": 4,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "parameter2": 1,
                    "second_parameter": 3,
                    "value": 1,
                    "value2": 3,
                    "value_2": 4
                },
                "puVar2": {
                    "allocated_block": 1,
                    "allocated_data": 1,
                    "allocated_memory": 11,
                    "allocated_memory_block": 2,
                    "allocated_memory_ptr": 1,
                    "data_pointer": 1,
                    "memory_block_ptr": 2,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "new_block": 4,
                    "new_memory": 1,
                    "new_memory_block": 1,
                    "pointer_to_memory": 1,
                    "ptr_alloc": 1,
                    "ptr_data": 1,
                    "ptr_to_values": 1
                },
                "xmalloc": {
                    "allocate_memory": 4
                }
            },
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010afd5",
                "FUN_0010c2d2"
            ],
            "code": "\nlong initialize_and_assign_memory_block_00113e23(undefined8 input_parameter_1,undefined8 input_parameter_2)\n\n{\n  long memory_block;\n  undefined8 *allocated_memory;\n  \n  memory_block = initialize_memory_block(1,0);\n  if (memory_block != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_parameter_1;\n    allocated_memory[1] = input_parameter_2;\n    *(undefined8 **)(memory_block + 0x10) = allocated_memory;\n  }\n  return memory_block;\n}\n\n",
            "current_name": "initialize_and_assign_memory_block_00113e23",
            "entrypoint": "0x00113e23",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e23": "initialize_and_assign_memory_block_00113e23",
                "initialize_memory_block_00112904": "initialize_memory_block",
                "lVar1": "memory_block",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "puVar2": "allocated_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113e5e": {
            "additional_data": {
                "FUN_00113e5e": {
                    "check_and_process_data_type": 1,
                    "check_and_process_input": 1,
                    "check_and_process_type": 6,
                    "check_and_update_string": 1,
                    "check_function_type": 1,
                    "check_op_type": 1,
                    "check_syntax_and_execute": 1,
                    "check_type_and_execute": 1,
                    "check_type_and_process": 1,
                    "parse_and_check_type": 1,
                    "parse_and_compare_type": 1,
                    "parse_and_validate_type": 1,
                    "parse_type": 3,
                    "process_function": 1,
                    "process_parameter": 1,
                    "process_string": 2,
                    "validate_and_parse_input": 1,
                    "validate_and_process_input": 1,
                    "validate_and_process_str": 1,
                    "validate_string": 1,
                    "validate_type": 1,
                    "verify_and_extract_type": 2
                },
                "cVar1": {
                    "comparison_result": 11,
                    "result": 5
                },
                "local_20": {
                    "arg_ptr": 1,
                    "current_argument": 1,
                    "current_char": 1,
                    "current_string": 3,
                    "input_str": 1,
                    "modified_input_string": 1,
                    "modified_str": 1,
                    "modified_string": 1,
                    "original_str": 2,
                    "original_type_string": 1,
                    "param_copy": 1,
                    "str": 2,
                    "str_ptr": 1,
                    "string": 1,
                    "string_address": 1,
                    "string_ptr": 1,
                    "temp_string": 2,
                    "temp_strings": 3,
                    "type_string": 1
                },
                "param_1": {
                    "input": 13,
                    "input_param": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "output": 3,
                    "output_buffer": 1,
                    "output_buffer_address": 1,
                    "param": 3,
                    "param1": 2,
                    "param_1": 3,
                    "result": 2
                },
                "param_2": {
                    "argv": 1,
                    "input": 1,
                    "input_ptr": 1,
                    "input_str": 1,
                    "input_string": 6,
                    "input_strings": 1,
                    "param2": 2,
                    "param_2": 1,
                    "ptr_argv": 1,
                    "ptr_to_argv": 1,
                    "ptr_to_str": 1,
                    "str": 1,
                    "str_array": 2,
                    "str_ptr": 2,
                    "string_array": 1,
                    "string_ptr": 5,
                    "strings": 2,
                    "type_string": 1
                },
                "param_3": {
                    "input_length": 4,
                    "input_string_length": 1,
                    "length": 6,
                    "offset": 5,
                    "param3": 2,
                    "param_3": 1,
                    "str_len": 1,
                    "str_length": 2,
                    "string_len": 1,
                    "string_length": 7,
                    "string_start": 1
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nundefined8 check_and_process_data_type_00113e5e(undefined8 input,char **input_string,long string_length)\n\n{\n  char comparison_result;\n  char *current_string [2];\n  \n  current_string[0] = *input_string;\n  *input_string = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)current_string[0] < 5) ||\n      (comparison_result = string_comparison_function_00113fb0(current_string[0],\"type\"), comparison_result == '\\0')) ||\n     ((current_string[0][4] != '$' && (current_string[0][4] != '.')))) {\n    if (*current_string[0] != '_') {\n      return 1;\n    }\n    if (current_string[0][1] != '_') {\n      return 1;\n    }\n    if (current_string[0][2] != 'o') {\n      return 1;\n    }\n    if (current_string[0][3] != 'p') {\n      return 1;\n    }\n    current_string[0] = current_string[0] + 4;\n  }\n  else {\n    current_string[0] = current_string[0] + 5;\n  }\n  comparison_result = parse_and_process_data_0010c95e(input,current_string,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = string_comparison_function_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_and_process_data_type_00113e5e",
            "entrypoint": "0x00113e5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113e5e": "check_and_process_data_type_00113e5e",
                "cVar1": "comparison_result",
                "local_20": "current_string",
                "param_1": "input",
                "param_2": "input_string",
                "param_3": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113ede": {
            "additional_data": {
                "FUN_00113ede": {
                    "analyze_string": 1,
                    "check_last_four_characters": 1,
                    "check_last_four_chars": 1,
                    "check_string_length": 19,
                    "check_string_suffix": 2,
                    "check_suffix_and_compare": 1,
                    "check_suffix_length": 1,
                    "compare_ending_string": 1,
                    "validate_string": 1,
                    "validate_string_length": 3
                },
                "__s": {
                    "current_string": 9,
                    "input_string": 5,
                    "str": 2,
                    "string": 13,
                    "string_to_check": 2
                },
                "param_1": {
                    "input_array": 1,
                    "input_string": 3,
                    "string": 1,
                    "string_array": 12,
                    "string_list": 2,
                    "string_pointer": 1,
                    "string_ptr": 4,
                    "strings": 7
                },
                "sVar1": {
                    "length": 5,
                    "str_length": 2,
                    "string_length": 24
                },
                "uVar2": {
                    "comparison_result": 21,
                    "result": 10
                }
            },
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  string = *string_array;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      comparison_result = string_comparison_function_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_string_length_00113ede",
            "entrypoint": "0x00113ede",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "__s": "string",
                "param_1": "string_array",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f20": {
            "additional_data": {
                "FUN_00113f20": {
                    "create_and_initialize_hashtable": 1,
                    "create_hash_tab": 2,
                    "create_hash_table": 8,
                    "create_hashtable": 6,
                    "create_string_hash_table": 1,
                    "initialize_hash_tab": 1,
                    "initialize_hash_table": 10,
                    "initialize_hashtable": 1,
                    "initialize_string_hash_table": 1
                },
                "free": {
                    "dealloc_memory": 1,
                    "deallocate_memory": 8,
                    "free_memory": 4,
                    "release_memory": 18
                },
                "htab_create_alloc": {
                    "allocate_and_create_hash_table": 2,
                    "allocate_and_initialize_hash_table": 1,
                    "allocate_hash_table": 6,
                    "allocate_hashtable": 4,
                    "create_and_allocate_hash_table": 1,
                    "create_hash_table": 10,
                    "create_hash_table_with_allocation": 1,
                    "create_hash_table_with_allocator": 1,
                    "create_hashtable": 2,
                    "create_hashtable_with_allocation": 1,
                    "create_string_hash_table": 1,
                    "new_hashtable": 1
                },
                "htab_eq_string": {
                    "compare_string": 5,
                    "compare_strings": 14,
                    "is_equal_string": 8,
                    "is_equal_to_string": 1,
                    "string_equality_function": 3
                },
                "htab_hash_string": {
                    "calculate_hash": 2,
                    "hash_string": 24,
                    "hash_string_for_key": 1,
                    "string_hash": 1,
                    "string_hash_function": 3
                },
                "xcalloc": {
                    "allocate_memory": 31
                }
            },
            "called": [
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc",
                "free"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid initialize_string_hash_table_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compare_strings,0,xcalloc,free);\n  return;\n}\n\n",
            "current_name": "initialize_string_hash_table_00113f20",
            "entrypoint": "0x00113f20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f20": "initialize_string_hash_table_00113f20",
                "free": "release_memory",
                "htab_create_alloc": "create_hash_table",
                "htab_eq_string": "compare_strings",
                "htab_hash_string": "hash_string",
                "xcalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113f50": {
            "additional_data": {
                "FUN_00113f50": {
                    "check_file": 16,
                    "check_file_info": 1,
                    "check_file_stats": 1,
                    "check_file_status": 3,
                    "check_file_validity": 1,
                    "get_file_info": 2,
                    "get_file_information": 2,
                    "get_file_size": 3,
                    "get_file_stat": 1,
                    "get_file_stats": 1
                },
                "iVar1": {
                    "result": 10,
                    "stat_result": 2,
                    "status": 19
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 23,
                    "filename": 7
                },
                "pcVar4": {
                    "err_reason": 1,
                    "err_str": 1,
                    "error_reason": 22,
                    "error_string": 1,
                    "reason": 2,
                    "str_err": 1,
                    "str_error": 2
                },
                "piVar2": {
                    "err_num_ptr": 1,
                    "errno": 2,
                    "errno_loc": 1,
                    "errno_location": 1,
                    "errno_ptr": 12,
                    "errno_val": 1,
                    "errnum_ptr": 1,
                    "error": 2,
                    "error_code": 2,
                    "error_num": 2,
                    "error_num_ptr": 1,
                    "error_number": 2,
                    "error_ptr": 3
                },
                "sStack_a8": {
                    "file_info": 7,
                    "file_stat": 6,
                    "file_stats": 14,
                    "file_status": 2,
                    "file_status_info": 1
                },
                "uVar3": {
                    "err_msg": 1,
                    "error_message": 25,
                    "error_msg": 3,
                    "message": 1
                }
            },
            "called": [
                "stat",
                "FUN_00119ed0",
                "FUN_00104966",
                "dcgettext"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00116b90",
                "FUN_00114460"
            ],
            "code": "\nlong check_file_status_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_with_params_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_with_params_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_with_params_00119ed0(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_with_params_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_with_params_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "current_name": "check_file_status_00113f50",
            "entrypoint": "0x00113f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113f50": "check_file_status_00113f50",
                "iVar1": "status",
                "param_1": "file_path",
                "pcVar4": "error_reason",
                "piVar2": "errno_ptr",
                "sStack_a8": "file_stats",
                "uVar3": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fb0": {
            "additional_data": {
                "FUN_00113fb0": {
                    "check_string_comparison": 1,
                    "compare_strings": 9,
                    "string_comparator": 1,
                    "string_compare": 4,
                    "string_comparison": 15,
                    "string_comparison_function": 1
                },
                "__n": {
                    "compare_string_length": 1,
                    "comparison_length": 3,
                    "comparison_string_length": 1,
                    "length": 19,
                    "length_comparison_string": 1,
                    "string2_length": 3,
                    "string_length": 2,
                    "strlen_string2": 1
                },
                "_strlen": {
                    "string_length": 1
                },
                "auVar2": {
                    "comparison": 1,
                    "comparison_result": 2,
                    "output": 2,
                    "output_array": 1,
                    "result": 20,
                    "result_array": 1
                },
                "extraout_var": {
                    "additional_value": 1,
                    "additional_var": 1,
                    "additional_variable": 1,
                    "extra_output": 1,
                    "extra_var": 3,
                    "extra_variable": 1,
                    "result": 2
                },
                "iVar1": {
                    "comparison": 1,
                    "comparison_result": 26,
                    "result": 2,
                    "string_comparison_result": 1
                },
                "in_RAX": {
                    "input_register": 1,
                    "return_address": 1,
                    "return_value": 3
                },
                "param_1": {
                    "first_string": 3,
                    "input_string": 6,
                    "input_string1": 1,
                    "str1": 1,
                    "string1": 19,
                    "string_1": 1
                },
                "param_2": {
                    "compare_string": 1,
                    "comparison_string": 5,
                    "input_string2": 1,
                    "second_string": 3,
                    "str2": 1,
                    "string2": 19,
                    "string_2": 1
                }
            },
            "called": [
                "strncmp",
                "strlen"
            ],
            "calling": [
                "FUN_00108c86",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00113e5e",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00114c20",
                "FUN_00115f50"
            ],
            "code": "\nundefined  [16] string_comparison_function_00113fb0(char *string1,char *string2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t length;\n  undefined4 extra_var;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparison_result = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extra_var,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "current_name": "string_comparison_function_00113fb0",
            "entrypoint": "0x00113fb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fb0": "string_comparison_function_00113fb0",
                "__n": "length",
                "auVar2": "result",
                "extraout_var": "extra_var",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "param_1": "string1",
                "param_2": "string2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00113fe0": {
            "additional_data": {
                "FUN_00113fe0": {
                    "convert_flags_to_value": 1,
                    "parse_section_flags": 28,
                    "section_flags": 1,
                    "section_flags_parser": 1
                },
                "FUN_00119dd0": {
                    "print_message": 1,
                    "print_supported_flags": 1
                },
                "FUN_00119ed0": {
                    "log_error": 1,
                    "print_error_with_flag": 1
                },
                "auVar8": {
                    "parsed_result": 1,
                    "result": 14,
                    "result_container": 2,
                    "result_flags": 1,
                    "result_object": 1,
                    "result_struct": 2,
                    "result_var": 1,
                    "return_array": 1,
                    "return_val": 1,
                    "return_value": 7
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_localized_text": 1
                },
                "iVar1": {
                    "comparison": 1,
                    "comparison_result": 15,
                    "result": 13,
                    "strcmp_result": 1,
                    "string_comparison_result": 1
                },
                "iVar6": {
                    "current_flag_length": 1,
                    "flag_index": 6,
                    "flag_length": 3,
                    "flag_length_int": 2,
                    "flag_string_index": 1,
                    "flag_string_length": 1,
                    "length": 2,
                    "position_difference": 1,
                    "section_diff": 1,
                    "section_flag_index": 3,
                    "section_index": 1,
                    "section_length_int": 1,
                    "section_name_length": 2,
                    "string_length": 1,
                    "substring_length": 3,
                    "substring_length_int": 2
                },
                "param_1": {
                    "flag_string": 3,
                    "flags_str": 1,
                    "flags_string": 1,
                    "input_string": 6,
                    "section": 1,
                    "section_flag": 1,
                    "section_flag_string": 1,
                    "section_flags": 15,
                    "section_flags_string": 1,
                    "section_name": 1
                },
                "param_2": {
                    "arg2": 1,
                    "param2": 19,
                    "param_2": 11
                },
                "param_3": {
                    "arg3": 1,
                    "param3": 19,
                    "param_3": 11
                },
                "param_4": {
                    "arg4": 1,
                    "flag_value": 1,
                    "flags": 1,
                    "param4": 18,
                    "param_4": 5,
                    "section_data": 1,
                    "section_flag_pointer": 1,
                    "section_name": 1,
                    "section_size": 1,
                    "section_type": 1
                },
                "pcVar3": {
                    "comma": 2,
                    "comma_index": 3,
                    "comma_location": 2,
                    "comma_pos": 2,
                    "comma_position": 20,
                    "delimiter": 2
                },
                "pcVar4": {
                    "next_flag": 10,
                    "next_flag_position": 2,
                    "next_flag_start": 2,
                    "next_flag_string": 1,
                    "next_flags_str": 1,
                    "next_position": 4,
                    "next_section": 2,
                    "next_section_flag": 6,
                    "next_string": 1,
                    "next_substring": 2
                },
                "sVar5": {
                    "flag_length": 13,
                    "flag_string_length": 3,
                    "length": 2,
                    "section_flag_length": 3,
                    "section_length": 5,
                    "str_length": 1,
                    "string_length": 2,
                    "substring_length": 2
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 14,
                    "error_str": 1,
                    "error_string": 3,
                    "error_text": 1,
                    "localized_error_message": 2,
                    "localized_error_string": 1,
                    "message": 3,
                    "msg": 1,
                    "translated_string": 1
                },
                "uVar7": {
                    "combined_flags": 2,
                    "flag_result": 1,
                    "flag_value": 1,
                    "flags": 1,
                    "new_section_flags": 1,
                    "output_value": 1,
                    "parsed_flags": 9,
                    "result_flags": 2,
                    "section_flag": 1,
                    "section_flag_value": 1,
                    "section_flags": 9,
                    "section_mask": 1,
                    "updated_flags": 1
                },
                "xmalloc": {
                    "allocate_and_copy_string": 1,
                    "allocate_memory": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_section_flags_00113fe0(char *section_flags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *next_flag;\n  size_t flag_length;\n  int flag_index;\n  uint section_flags;\n  undefined result [16];\n  \n  section_flags = 0;\n  do {\n    comma_position = strchr(section_flags,0x2c);\n    if (comma_position == (char *)0x0) {\n      flag_length = strlen(section_flags);\n      flag_index = (int)flag_length;\n      next_flag = (char *)0x0;\n    }\n    else {\n      next_flag = comma_position + 1;\n      flag_index = (int)comma_position - (int)section_flags;\n    }\n    flag_length = (size_t)flag_index;\n    comparison_result = strncasecmp(\"alloc\",section_flags,flag_length);\n    if (comparison_result == 0) {\n      section_flags = section_flags | 1;\n    }\n    else {\n      comparison_result = strncasecmp(\"load\",section_flags,flag_length);\n      if (comparison_result == 0) {\n        section_flags = section_flags | 2;\n      }\n      else {\n        comparison_result = strncasecmp(\"noload\",section_flags,flag_length);\n        if (comparison_result == 0) {\n          section_flags = section_flags | 0x200;\n        }\n        else {\n          comparison_result = strncasecmp(\"readonly\",section_flags,flag_length);\n          if (comparison_result == 0) {\n            section_flags = section_flags | 8;\n          }\n          else {\n            comparison_result = strncasecmp(\"debug\",section_flags,flag_length);\n            if (comparison_result == 0) {\n              section_flags = section_flags | 0x2000;\n            }\n            else {\n              comparison_result = strncasecmp(\"code\",section_flags,flag_length);\n              if (comparison_result == 0) {\n                section_flags = section_flags | 0x10;\n              }\n              else {\n                comparison_result = strncasecmp(\"data\",section_flags,flag_length);\n                if (comparison_result == 0) {\n                  section_flags = section_flags | 0x20;\n                }\n                else {\n                  comparison_result = strncasecmp(\"rom\",section_flags,flag_length);\n                  if (comparison_result == 0) {\n                    section_flags = section_flags | 0x40;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"exclude\",section_flags,flag_length);\n                    if (comparison_result == 0) {\n                      section_flags = section_flags | 0x8000;\n                    }\n                    else {\n                      comparison_result = strncasecmp(\"share\",section_flags,flag_length);\n                      if (comparison_result == 0) {\n                        section_flags = section_flags | 0x8000000;\n                      }\n                      else {\n                        comparison_result = strncasecmp(\"contents\",section_flags,flag_length);\n                        if (comparison_result == 0) {\n                          section_flags = section_flags | 0x100;\n                        }\n                        else {\n                          comparison_result = strncasecmp(\"merge\",section_flags,flag_length);\n                          if (comparison_result == 0) {\n                            section_flags = section_flags | 0x800000;\n                          }\n                          else {\n                            comparison_result = strncasecmp(\"strings\",section_flags,flag_length);\n                            if (comparison_result != 0) {\n                              comma_position = (char *)xmalloc((long)(flag_index + 1));\n                              strncpy(comma_position,section_flags,flag_length);\n                              comma_position[flag_length] = '\\0';\n                              error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_with_params_00119ed0(error_message,comma_position);\n                              error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_message_and_exit_00119dd0(error_message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            section_flags = section_flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    section_flags = next_flag;\n  } while (next_flag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = section_flags;\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "current_name": "parse_section_flags_00113fe0",
            "entrypoint": "0x00113fe0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "auVar8": "result",
                "dcgettext": "get_localized_message",
                "iVar1": "comparison_result",
                "iVar6": "flag_index",
                "param_1": "section_flags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar3": "comma_position",
                "pcVar4": "next_flag",
                "sVar5": "flag_length",
                "uVar2": "error_message",
                "uVar7": "section_flags",
                "xmalloc": "allocate_and_copy_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114190": {
            "additional_data": {
                "FUN_00114190": {
                    "analyze_functions": 1,
                    "find_matching_entry": 3,
                    "find_matching_function": 1,
                    "find_matching_patterns": 1,
                    "find_pattern_match": 1,
                    "parse_command": 1,
                    "process_entries": 1,
                    "process_flags": 1,
                    "process_input": 1,
                    "process_matching_patterns": 1,
                    "process_rules": 1
                },
                "iVar4": {
                    "comparison": 1,
                    "comparison_result": 19,
                    "fnmatch_result": 2,
                    "int_var": 1,
                    "result": 2,
                    "temp_var4": 6
                },
                "param_1": {
                    "command": 1,
                    "entries": 1,
                    "entry_to_match": 1,
                    "input": 2,
                    "input_array": 16,
                    "input_data": 1,
                    "input_param": 1,
                    "input_string": 4,
                    "parameter_array": 1,
                    "pattern": 1,
                    "search_string": 1,
                    "source": 1
                },
                "param_2": {
                    "case_flag": 1,
                    "case_sensitive": 1,
                    "flag": 14,
                    "is_copy": 1,
                    "is_exact": 1,
                    "is_exact_match": 6,
                    "is_exclusion": 1,
                    "is_flag_set": 1,
                    "is_match_case": 1,
                    "is_matched": 1,
                    "is_null": 1,
                    "is_recursive": 1,
                    "reverse_match": 1
                },
                "param_3": {
                    "bitmask": 2,
                    "condition": 1,
                    "flag_value": 1,
                    "flags": 15,
                    "mask": 2,
                    "options": 7,
                    "permissions": 2,
                    "search_flags": 1
                },
                "plVar2": {
                    "array_element": 1,
                    "current_array": 1,
                    "current_element": 1,
                    "current_entry": 1,
                    "current_pattern": 4,
                    "current_rule": 1,
                    "entry": 1,
                    "entry_name": 1,
                    "entry_string": 1,
                    "function_name": 1,
                    "match_pattern": 1,
                    "next_pointer": 1,
                    "pattern": 4,
                    "pattern_expression": 1,
                    "pattern_string": 1,
                    "pointer_var1": 1,
                    "string_ptr": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 1,
                    "temp_var2": 6
                },
                "pplVar3": {
                    "current": 1,
                    "current_element": 1,
                    "current_entry": 2,
                    "current_function": 2,
                    "current_node": 1,
                    "match": 1,
                    "matched_pattern": 1,
                    "matching_entry": 1,
                    "next_array": 1,
                    "next_patterns": 1,
                    "pointer_pointer_var1": 1,
                    "previous_entry": 1,
                    "previous_pattern": 1,
                    "result": 2,
                    "result_pointer": 1,
                    "result_ptr": 3,
                    "return_value": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_var3": 6
                },
                "pplVar6": {
                    "curr_result_ptr": 1,
                    "current_entry": 3,
                    "current_item": 1,
                    "current_match": 1,
                    "current_node": 5,
                    "current_pattern": 1,
                    "current_pattern_ptr": 1,
                    "current_pointer": 2,
                    "current_ptr": 1,
                    "current_result": 1,
                    "next": 1,
                    "next_element": 1,
                    "next_entry": 2,
                    "next_rule": 1,
                    "pointer_pointer_var2": 1,
                    "prev_function": 1,
                    "temp_array": 1,
                    "temp_ptr1": 1,
                    "temp_var6": 4
                },
                "pplVar7": {
                    "current": 1,
                    "current_entry": 1,
                    "current_entry_list": 1,
                    "current_entry_ptr": 1,
                    "current_match": 1,
                    "current_node": 1,
                    "current_ptr": 1,
                    "data_array": 1,
                    "iterator": 1,
                    "list_pointer1": 1,
                    "parent_node": 1,
                    "patterns": 1,
                    "pointer_pointer_var3": 1,
                    "prev": 1,
                    "prev_entry": 2,
                    "prev_item": 1,
                    "prev_pointer": 1,
                    "prev_result_ptr": 1,
                    "previous_element": 1,
                    "previous_entry": 1,
                    "previous_match": 1,
                    "previous_node": 2,
                    "previous_pattern": 1,
                    "previous_pointer": 1,
                    "previous_ptr": 1,
                    "previous_result": 1,
                    "temp_ptr2": 1,
                    "temp_var7": 1
                },
                "pplVar8": {
                    "list_pointer2": 1,
                    "next": 1,
                    "next_data_array": 1,
                    "next_entry": 4,
                    "next_entry_list": 1,
                    "next_item": 1,
                    "next_match": 2,
                    "next_node": 6,
                    "next_pattern": 1,
                    "next_pattern_ptr": 1,
                    "next_pointer": 1,
                    "next_pointer2": 1,
                    "next_ptr": 2,
                    "next_result": 1,
                    "next_result_ptr": 1,
                    "pointer_pointer_var4": 1,
                    "temp": 1,
                    "temp_element": 1,
                    "temp_ptr3": 1,
                    "temp_var8": 1
                },
                "uVar1": {
                    "bitwise_comparison": 1,
                    "entry_flags": 2,
                    "flag": 1,
                    "flag_check": 3,
                    "flag_result": 1,
                    "flags": 1,
                    "flags_check": 2,
                    "node_flags": 1,
                    "option_check": 3,
                    "option_result": 1,
                    "pattern_flags": 3,
                    "permission_mask": 1,
                    "result": 1,
                    "temp": 1,
                    "temp_flag": 1,
                    "temp_var1": 7,
                    "value": 1
                },
                "uVar5": {
                    "error_message": 23,
                    "error_msg": 1,
                    "temp_var2": 1,
                    "temp_var5": 6
                }
            },
            "called": [
                "FUN_00104bba",
                "FUN_00119dd0",
                "fnmatch",
                "xmalloc",
                "dcgettext",
                "strcmp"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110",
                "FUN_00115b70",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00114c20",
                "FUN_00115530"
            ],
            "code": "\nlong ** find_matching_entry_00114190(long *input_array,char flag,uint flags)\n\n{\n  uint temp_var1;\n  long *temp_var2;\n  long **temp_var3;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_node;\n  long **previous_node;\n  long **next_node;\n  \n  previous_node = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((flags & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      current_node = (long **)*previous_node;\n      if (current_node == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_node = (long **)0x0;\n    }\n    else {\n      temp_var2 = DAT_001278e0[1];\n      if (*(char *)temp_var2 == '!') {\n        comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        current_node = previous_node;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      current_node = (long **)*previous_node;\n      if (current_node == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_node + 0x14)) != 0) {\n      temp_var2 = current_node[1];\n      if (*(char *)temp_var2 == '!') {\n        comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_node + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n        if ((previous_node == (long **)0x0) && (comparison_result == 0)) {\n          next_node = (long **)*current_node;\n          previous_node = current_node;\n          if (next_node == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_node = (long **)*current_node;\n    current_node = previous_node;\n    if (next_node != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)DAT_001278e0[1],(char *)input_array);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      temp_var1 = *(uint *)((long)previous_node + 0x14);\n      if ((((temp_var1 & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((temp_var1 & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_message_and_exit_00119dd0(error_message,input_array);\n      }\n      if ((((temp_var1 & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_message_and_exit_00119dd0(error_message,input_array);\n      }\n      if ((((temp_var1 & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_node + 0x14) = temp_var1 | flags;\n        return previous_node;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_message_and_exit_00119dd0(error_message,input_array);\n    }\n    previous_node = (long **)*previous_node;\n    if (previous_node == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)previous_node[1],(char *)input_array);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_node = (long **)*previous_node;\n    current_node = (long **)0x0;\n    if (next_node == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_node = current_node;\n      if (flag == '\\0') {\n        while (current_node = next_node, temp_var3 = previous_node, next_node = current_node,\n              (flags & *(uint *)((long)current_node + 0x14)) != 0) {\n          temp_var2 = current_node[1];\n          if (*(char *)temp_var2 == '!') {\n            comparison_result = fnmatch((char *)((long)temp_var2 + 1),(char *)input_array,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_node = (long **)*current_node;\n            if ((long **)*current_node == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)temp_var2,(char *)input_array,0);\n            if ((previous_node == (long **)0x0) && (comparison_result == 0)) {\n              previous_node = current_node;\n              next_node = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_node = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_node[1],(char *)input_array);\n        temp_var3 = current_node;\n        previous_node = next_node;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      current_node = temp_var3;\n      next_node = (long **)*next_node;\n      previous_node = current_node;\n    } while (next_node != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      current_node = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_node + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_node + 2) = 0;\n      *(uint *)((long)current_node + 0x14) = flags;\n      current_node[5] = (long *)0x0;\n      previous_node = current_node;\n      *current_node = (long *)DAT_001278e0;\n      DAT_001278e0 = previous_node;\n      current_node[1] = input_array;\n      return current_node;\n    }\n  }\nLAB_00114212:\n  if (previous_node == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_node + 2) = 1;\n  return previous_node;\n}\n\n",
            "current_name": "find_matching_entry_00114190",
            "entrypoint": "0x00114190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114190": "find_matching_entry_00114190",
                "iVar4": "comparison_result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "flags",
                "plVar2": "temp_var2",
                "pplVar3": "temp_var3",
                "pplVar6": "current_node",
                "pplVar7": "previous_node",
                "pplVar8": "next_node",
                "uVar1": "temp_var1",
                "uVar5": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114460": {
            "additional_data": {
                "FUN_00114460": {
                    "load_and_process_file": 4,
                    "load_file_and_process_lines": 1,
                    "parse_file": 3,
                    "parse_input_file": 1,
                    "process_file": 1,
                    "read_and_process_file": 16,
                    "read_file_and_process": 1,
                    "read_file_and_process_lines": 4
                },
                "__n": {
                    "file_size": 30,
                    "filesize": 1
                },
                "__ptr": {
                    "buffer": 21,
                    "file_buffer": 9,
                    "file_content": 1
                },
                "__stream": {
                    "file": 14,
                    "file_pointer": 2,
                    "file_stream": 15
                },
                "bVar10": {
                    "next_byte": 1
                },
                "bVar11": {
                    "next_byte": 1
                },
                "bVar8": {
                    "byte_value": 1,
                    "char": 1,
                    "curr_byte": 1,
                    "current_byte": 23,
                    "current_char": 3,
                    "current_character": 1,
                    "next_char": 1
                },
                "bVar9": {
                    "next_byte": 1
                },
                "iVar1": {
                    "line_count": 4,
                    "line_counter": 2,
                    "line_index": 2,
                    "line_number": 19
                },
                "param_1": {
                    "file_name": 3,
                    "file_path": 8,
                    "filename": 20
                },
                "param_2": {
                    "hash_table": 23,
                    "hashtable": 1,
                    "htab": 2,
                    "symbol_table": 2,
                    "table": 3
                },
                "param_3": {
                    "content": 1,
                    "file_content": 15,
                    "file_contents": 1,
                    "file_data": 14
                },
                "pbVar10": {
                    "char_ptr2": 1,
                    "curr_ptr": 1,
                    "current_byte": 2,
                    "current_byte_ptr": 2,
                    "current_char": 4,
                    "current_character": 1,
                    "current_line": 1,
                    "current_pointer": 3,
                    "current_pos": 4,
                    "current_position": 4,
                    "current_ptr": 4,
                    "current_token": 1,
                    "iterator": 1,
                    "line_ptr": 1,
                    "scan_ptr": 1
                },
                "pbVar11": {
                    "char_ptr3": 1,
                    "last_token": 1,
                    "line_break": 1,
                    "line_break_point": 1,
                    "line_break_pos": 1,
                    "line_end": 1,
                    "line_ptr": 1,
                    "line_start": 3,
                    "line_start_position": 1,
                    "next_byte": 2,
                    "next_byte_ptr": 2,
                    "next_char": 4,
                    "next_character": 1,
                    "next_line": 1,
                    "next_line_pos": 1,
                    "next_pointer": 2,
                    "next_pos": 2,
                    "next_position": 1,
                    "next_ptr": 3,
                    "prev_ptr": 1
                },
                "pbVar12": {
                    "char_ptr4": 1,
                    "current_char": 1,
                    "current_line": 3,
                    "current_line_pos": 1,
                    "line_end": 2,
                    "line_end_position": 1,
                    "line_start": 11,
                    "line_start_point": 1,
                    "line_start_ptr": 5,
                    "start_byte": 1,
                    "start_line": 1,
                    "start_of_line": 1,
                    "start_pointer": 1,
                    "start_ptr": 1
                },
                "pbVar7": {
                    "char_ptr": 1,
                    "curr_char": 1,
                    "current_byte": 2,
                    "current_char": 18,
                    "current_line": 2,
                    "current_position": 1,
                    "line": 1,
                    "line_ptr": 1,
                    "line_start": 1,
                    "rubbish_character": 1,
                    "rubbish_found": 1,
                    "skip_whitespace_ptr": 1
                },
                "pbVar8": {
                    "next_char": 1
                },
                "pbVar9": {
                    "line_end": 1,
                    "new_line_character": 1,
                    "next_byte": 14,
                    "next_char": 9,
                    "next_char_ptr": 1,
                    "next_line": 1,
                    "next_line_ptr": 2,
                    "next_line_start": 1,
                    "next_position": 1
                },
                "pcVar3": {
                    "errno_str": 1,
                    "errno_string": 1,
                    "error_description": 1,
                    "error_message": 7,
                    "error_message_string": 1,
                    "error_msg": 3,
                    "error_string": 8
                },
                "piVar2": {
                    "errno_location": 3,
                    "errno_ptr": 4,
                    "error_code": 4,
                    "error_num": 1,
                    "error_num_ptr": 2,
                    "error_number": 7
                },
                "ppbVar6": {
                    "hash_entry": 1,
                    "hash_slot": 8,
                    "hash_table_entry": 1,
                    "hash_table_slot": 6,
                    "slot": 5,
                    "slot_ptr": 7,
                    "symbol_slot": 1,
                    "table_slot": 1
                },
                "sVar5": {
                    "bytes_read": 20,
                    "read_bytes": 1,
                    "read_size": 10
                },
                "uVar4": {
                    "error_message": 12,
                    "error_msg": 1,
                    "error_string": 1,
                    "error_translate": 1,
                    "error_translation": 1,
                    "gettext_result": 1,
                    "message": 1,
                    "translated_error": 1,
                    "translated_message": 1,
                    "translated_msg": 3
                }
            },
            "called": [
                "fread",
                "__errno_location",
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00113f50",
                "dcgettext",
                "ferror",
                "strerror",
                "fclose",
                "fopen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_file_and_process_lines_00114460(char *filename,undefined8 hash_table,byte **file_content)\n\n{\n  int line_number;\n  int *error_number;\n  char *error_string;\n  undefined8 error_message;\n  size_t file_size;\n  byte *buffer;\n  FILE *file_stream;\n  size_t bytes_read;\n  byte **hash_slot;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  byte *current_pos;\n  byte *next_char;\n  byte *line_start;\n  \n  file_size = check_file_status_00113f50();\n  if (file_size == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(file_size + 2);\n    file_stream = fopen(filename,\"r\");\n    if (file_stream == (FILE *)0x0) {\n      error_number = __errno_location();\n      error_string = strerror(*error_number);\n      error_message = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(error_message,filename,error_string);\n    }\n    bytes_read = fread(buffer,1,file_size,file_stream);\n    if ((bytes_read == 0) || (line_number = ferror(file_stream), line_number != 0)) {\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_message_and_exit_00119dd0(error_message,filename);\n    }\n    line_number = 1;\n    fclose(file_stream);\n    *(undefined2 *)(buffer + file_size) = 10;\n    current_byte = *buffer;\n    line_start = buffer;\n    while (current_pos = line_start, current_byte != 0) {\n      for (; current_byte = *current_pos, next_char = current_pos, current_byte != 10; current_pos = current_pos + 1) {\n        if ((char)current_byte < '\\v') {\n          if (current_byte == 0) {\n            next_byte = current_pos + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (current_byte == 0xd) {\n            *current_pos = 0;\n            next_byte = current_pos + 1;\n            if (current_pos[1] == 10) {\n              next_byte = current_pos + 2;\n              next_char = current_pos + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (current_byte == 0x23) {\n            find_and_process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *current_pos = 0;\n      if (current_pos[1] == 0xd) {\n        next_char = current_pos + 1;\n        next_byte = current_pos + 2;\n      }\n      else {\n        next_byte = current_pos + 1;\n      }\nLAB_00114553:\n      current_byte = *line_start;\n      while ((current_byte == 0x20 || (current_pos = line_start, current_byte == 9))) {\n        current_pos = line_start + 1;\n        line_start = line_start + 1;\n        current_byte = *current_pos;\n      }\n      do {\n        if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n        if (current_byte == 0) goto LAB_00114599;\n        current_byte = current_pos[1];\n        current_pos = current_pos + 1;\n      } while ((current_byte != 0x20) && (current_byte != 9));\n      if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        current_byte = current_pos[1];\n        if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n              ((current_byte = current_pos[2], current_byte == 9 || (current_byte == 0x20)))) &&\n             ((current_byte = current_pos[3], current_byte == 9 || (current_byte == 0x20)))) &&\n            ((current_byte = current_pos[4], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = current_pos[5], current_byte == 9 || (current_byte == 0x20)))) {\n          current_byte = current_pos[6];\n          current_char = current_pos + 6;\n          if ((current_byte == 9) || (current_byte == 0x20)) {\n            do {\n              do {\n                current_byte = current_char[1];\n                current_char = current_char + 1;\n              } while (current_byte == 0x20);\n            } while (current_byte == 9);\n          }\n        }\n        if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n          error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_with_params_00119ed0(error_message,filename,line_number);\n        }\n      }\nLAB_00114599:\n      *current_pos = 0;\n      if (line_start < current_pos) {\n        hash_slot = (byte **)htab_find_slot(hash_table,line_start,1);\n        *hash_slot = line_start;\n      }\n      line_number = line_number + 1;\n      line_start = next_byte;\n      current_byte = next_char[1];\n    }\n    *file_content = buffer;\n  }\n  return;\n}\n\n",
            "current_name": "read_file_and_process_lines_00114460",
            "entrypoint": "0x00114460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114460": "read_file_and_process_lines_00114460",
                "__n": "file_size",
                "__ptr": "buffer",
                "__stream": "file_stream",
                "bVar10": "next_byte",
                "bVar11": "next_byte",
                "bVar8": "current_byte",
                "bVar9": "next_byte",
                "iVar1": "line_number",
                "param_1": "filename",
                "param_2": "hash_table",
                "param_3": "file_content",
                "pbVar10": "current_pos",
                "pbVar11": "next_char",
                "pbVar12": "line_start",
                "pbVar7": "current_char",
                "pbVar9": "next_byte",
                "pcVar3": "error_string",
                "piVar2": "error_number",
                "ppbVar6": "hash_slot",
                "sVar5": "bytes_read",
                "uVar4": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114690": {
            "additional_data": {
                "FUN_00114690": {
                    "check_and_copy_archive_files": 1,
                    "copy_and_extract_archive": 2,
                    "improved_extract_and_copy_archive": 1,
                    "process_archived_files": 1,
                    "process_binary": 3,
                    "process_binary_file": 3,
                    "process_file": 8,
                    "process_input_file": 2
                },
                "__ptr": {
                    "linked_list_ptr": 1,
                    "pointer": 1,
                    "pointer_to_u_int64_3": 1,
                    "pointer_to_undefined8_var_ptr": 1,
                    "pointer_to_unsigned_long": 1,
                    "pointer_to_unsigned_long_var_ptr": 1,
                    "pointer_unsigned_long_var3": 1,
                    "ptr5": 1,
                    "ptr_aux_var2": 1,
                    "ptr_to_array_item": 1,
                    "temp_dir_path_list": 1,
                    "temp_struct_ptr": 1,
                    "undefined8_pointer_var4": 1,
                    "undefined8_ptr_2": 1,
                    "undefined8_ptr_var3": 1
                },
                "bVar1": {
                    "additional_flags": 1,
                    "byte_flag": 1,
                    "byte_var": 7,
                    "byte_var1": 11,
                    "byte_variable1": 1,
                    "flag": 6,
                    "flag1": 1,
                    "flags": 1
                },
                "bVar25": {
                    "bool1": 1,
                    "bool_flag": 1,
                    "bool_var": 5,
                    "bool_var1": 6,
                    "bool_var25": 4,
                    "bool_variable1": 1,
                    "boolean_var": 2,
                    "condition_flag": 1,
                    "debug_flag": 1,
                    "flag": 2,
                    "flag3": 1,
                    "flag_var": 1,
                    "has_gnu_debuglink": 1,
                    "is_conditional": 1,
                    "preserve_timestamp": 1
                },
                "bVar26": {
                    "bool_value": 1,
                    "bool_var": 1,
                    "bool_var2": 1,
                    "bool_var26": 1,
                    "byte1": 1,
                    "byte_flag": 2,
                    "byte_var2": 9,
                    "byte_var26": 3,
                    "byte_var_2": 3,
                    "byte_variable2": 1,
                    "check_failed": 1,
                    "flag": 2,
                    "flag4": 1,
                    "flag_var2": 1,
                    "zero_flag": 1
                },
                "cVar2": {
                    "char1": 1,
                    "char_var": 2,
                    "char_var1": 10,
                    "char_var2": 4,
                    "char_var_1": 2,
                    "char_variable1": 1,
                    "check_result": 1,
                    "format_check": 3,
                    "format_check_result": 3,
                    "format_result": 1
                },
                "cVar3": {
                    "char2": 1,
                    "char_var2": 11,
                    "char_var3": 4,
                    "char_var_2": 3,
                    "char_variable2": 1,
                    "copy_result": 1,
                    "format_check2": 1,
                    "format_check_result": 2,
                    "format_check_result2": 1,
                    "format_check_result_2": 1,
                    "format_set": 1,
                    "subformat_check_result": 1
                },
                "iVar4": {
                    "arch_status": 1,
                    "auxiliary_result": 1,
                    "current_architecture": 1,
                    "error_code1": 1,
                    "format_check_error": 1,
                    "format_check_result": 1,
                    "int1": 1,
                    "int_var": 1,
                    "int_var1": 4,
                    "int_var4": 4,
                    "int_var_1": 2,
                    "int_variable1": 1,
                    "integer_var1": 4,
                    "iteration_var1": 1,
                    "result": 3,
                    "result2": 1,
                    "stat_result": 1,
                    "status": 1
                },
                "iVar5": {
                    "bfd_stat_result": 2,
                    "bfd_stat_status": 1,
                    "copy_status": 1,
                    "error_code2": 1,
                    "int2": 1,
                    "int_var2": 4,
                    "int_var5": 4,
                    "int_var_2": 2,
                    "int_variable2": 1,
                    "integer_var2": 4,
                    "iteration_var2": 1,
                    "open_result": 1,
                    "result": 2,
                    "result_2": 1,
                    "stat_result": 3,
                    "status": 2
                },
                "lStack_98": {
                    "file_size": 14,
                    "l_stack": 1,
                    "l_stack_98": 1,
                    "l_stack_var_1": 1,
                    "long4": 1,
                    "long_stack_98": 1,
                    "long_stack_var": 1,
                    "long_stack_var1": 2,
                    "long_stack_var98": 2,
                    "long_var4": 3,
                    "long_variable4": 1,
                    "size": 1,
                    "stack_var_98": 1
                },
                "lVar13": {
                    "file_status": 9,
                    "file_status_result": 1,
                    "long2": 1,
                    "long_var13": 3,
                    "long_var2": 7,
                    "long_var_2": 1,
                    "long_variable2": 1,
                    "result": 1,
                    "status": 2,
                    "temp_dir_path": 3,
                    "tempdir_creation_result": 1,
                    "var3": 1
                },
                "lVar21": {
                    "bread_result": 1,
                    "bytes_read": 5,
                    "bytes_written": 5,
                    "chunk_size": 2,
                    "copy_result": 1,
                    "copy_size": 1,
                    "long3": 1,
                    "long_var2": 1,
                    "long_var21": 3,
                    "long_var3": 7,
                    "long_var_2": 1,
                    "long_variable3": 1
                },
                "lVar8": {
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "bytes_read": 6,
                    "long1": 1,
                    "long_var": 1,
                    "long_var1": 9,
                    "long_var8": 4,
                    "long_var_1": 2,
                    "long_variable1": 1,
                    "read_result": 1,
                    "seek_offset": 1,
                    "size": 1,
                    "tempdir_path": 1,
                    "temporary_path_length": 1
                },
                "local_158": {
                    "arch_stat": 1,
                    "archived_file_info": 1,
                    "archived_file_stat": 3,
                    "file_info": 1,
                    "file_stat_struct": 1,
                    "local_file_stats": 1,
                    "local_stat": 4,
                    "local_stat158": 1,
                    "local_stat_buffer": 1,
                    "local_stat_struct": 1,
                    "local_stat_var158": 1,
                    "local_stat_var_158": 1,
                    "local_stat_variable": 1,
                    "source_file_stat": 1,
                    "stat_buffer": 1,
                    "stat_data": 1,
                    "stat_struct": 1,
                    "stat_struct1": 1,
                    "stat_struct_var1": 1,
                    "stat_structure": 1,
                    "stat_var": 1,
                    "stat_var2": 1,
                    "temp_dir_stat": 1,
                    "temp_stat": 2
                },
                "local_198": {
                    "archived_files_array": 1,
                    "current_handle_info": 1,
                    "file_handle_list": 1,
                    "local_array2": 2,
                    "local_buffer": 1,
                    "local_long_buffer": 1,
                    "local_long_pointer_var": 1,
                    "local_pointer_to_long1": 1,
                    "local_pointer_to_long198": 1,
                    "local_pointer_to_long_var198": 1,
                    "local_pointer_to_long_var_198": 1,
                    "local_stat_buffer_ptr": 1,
                    "local_temp_dir_array": 1,
                    "local_variable2": 1,
                    "long_array1": 1,
                    "long_pointer1": 1,
                    "long_pointer_var1": 1,
                    "long_ptr": 1,
                    "long_ptr198": 1,
                    "long_ptr_var1": 1,
                    "next_output_archived_file": 1,
                    "output_data_ptr": 1,
                    "output_stats": 1,
                    "ptr_local": 1,
                    "temp_buffer": 1,
                    "temp_file_len_ptr": 1,
                    "temp_file_paths": 1,
                    "temp_output_dir_list": 1,
                    "tempdir_paths": 1
                },
                "local_1a0": {
                    "bfd_output_ptr": 1,
                    "local_array": 1,
                    "local_array1": 1,
                    "local_bfd_handler": 1,
                    "local_buffer": 1,
                    "local_output_ptr": 1,
                    "local_pointer_to_undefined8_1": 1,
                    "local_pointer_to_undefined8_var_1a0": 1,
                    "local_pointer_to_unsigned_long1a0": 1,
                    "local_pointer_to_unsigned_long_var1a0": 1,
                    "local_temp_dir": 1,
                    "local_u8_pointer_var": 1,
                    "local_variable1": 1,
                    "output_archived_file_ptr": 1,
                    "output_bfd": 3,
                    "output_bfd_handle": 1,
                    "output_file": 5,
                    "output_file_handle": 1,
                    "output_file_ptr": 1,
                    "ptr6": 1,
                    "undefined8_pointer3": 1,
                    "undefined8_pointer_var5": 1,
                    "undefined8_ptr_3": 1,
                    "undefined8_ptr_var4": 1
                },
                "local_c8": {
                    "local_array3": 2,
                    "local_array_void_var_c8": 1,
                    "local_pointer_to_void_c8": 1,
                    "local_pointer_void_array3": 1,
                    "local_variables_array": 1,
                    "local_void_buffer": 1,
                    "local_void_pointer1": 1,
                    "local_void_pointer_array": 1,
                    "local_void_ptr_c8": 1,
                    "ptr_array1": 1,
                    "temp_dir_array": 1,
                    "temp_dir_info": 1,
                    "temp_dir_list": 1,
                    "temp_dir_path_list": 1,
                    "temp_dir_paths": 2,
                    "temp_directories": 1,
                    "temp_directory": 1,
                    "temp_directory_array": 1,
                    "temp_directory_data": 1,
                    "temp_directory_path": 1,
                    "temp_dirs": 2,
                    "tempdir_buffer": 1,
                    "void_pointer_array": 1,
                    "void_pointer_array1": 1,
                    "void_ptr_array": 3
                },
                "param_1": {
                    "input_file": 9,
                    "input_file_name": 2,
                    "input_file_path": 17,
                    "input_filename": 2,
                    "input_path": 1
                },
                "param_2": {
                    "output_file": 9,
                    "output_file_name": 2,
                    "output_file_path": 17,
                    "output_filename": 2,
                    "output_path": 1
                },
                "param_3": {
                    "descriptor": 1,
                    "fd": 1,
                    "file_desc": 1,
                    "file_descriptor": 28
                },
                "param_4": {
                    "file_stat": 5,
                    "file_stat_buffer": 1,
                    "file_status": 4,
                    "stat_buf": 1,
                    "stat_buffer": 11,
                    "stat_data": 1,
                    "stat_struct": 3,
                    "stat_structure": 3,
                    "status": 1,
                    "target_stats": 1
                },
                "param_5": {
                    "b_fd_openr_param": 1,
                    "bfd_flags": 2,
                    "bfd_mode": 1,
                    "bfd_open_mode": 1,
                    "bfd_options": 5,
                    "bfd_target": 1,
                    "binary_format": 1,
                    "file_flags": 2,
                    "file_format": 1,
                    "file_open_mode": 1,
                    "file_options": 1,
                    "flags": 1,
                    "mode": 1,
                    "target": 4,
                    "target_filter": 1,
                    "target_format": 5,
                    "target_name": 2
                },
                "param_6": {
                    "bfd_architecture": 1,
                    "buffer_size": 1,
                    "copy_flags": 1,
                    "copy_permissions": 1,
                    "default_permissions": 1,
                    "file_arch": 1,
                    "file_create_mode": 1,
                    "file_length": 1,
                    "file_mode": 1,
                    "file_permission": 1,
                    "file_size": 3,
                    "new_file_path_size": 1,
                    "param6": 1,
                    "target_size": 1,
                    "temp_dir": 4,
                    "temp_dir_mode": 1,
                    "temp_dir_size": 1,
                    "temp_directory": 2,
                    "temp_directory_path": 1,
                    "temp_file": 1,
                    "temp_file_flags": 1,
                    "temp_file_path": 1,
                    "temp_output_dir": 1,
                    "tempdir_path": 1,
                    "temporary_directory": 1
                },
                "param_7": {
                    "additional_param": 1,
                    "conditional_code": 2,
                    "conditional_flag": 1,
                    "conditional_function": 8,
                    "conditional_function_ptr": 1,
                    "conditional_param": 1,
                    "conditional_statement": 1,
                    "copy_status": 1,
                    "custom_param": 1,
                    "debug_level": 1,
                    "exec_cond_func_param": 1,
                    "executable_permissions": 1,
                    "execute_condition": 1,
                    "execute_flags": 1,
                    "flags": 1,
                    "func_ptr": 1,
                    "function_flags": 1,
                    "function_ptr": 1,
                    "modification_time": 1,
                    "param7": 2,
                    "param_7": 1,
                    "params": 1
                },
                "pcVar15": {
                    "pointer_char_var1": 1,
                    "pointer_to_char15": 1,
                    "pointer_to_char_array2": 1,
                    "pointer_to_char_var15": 2,
                    "string1": 1,
                    "temp_dir_name": 1,
                    "temp_dir_path": 7,
                    "temp_directory_path": 1,
                    "temp_path1": 1,
                    "tempdir_path": 1
                },
                "pcVar16": {
                    "archive_member": 1,
                    "archived_file": 1,
                    "archived_file_path": 1
                },
                "pcVar17": {
                    "char_pointer_var_1": 1,
                    "char_ptr_var1": 1,
                    "current_file_name": 1,
                    "current_path": 2,
                    "current_path_segment": 1,
                    "file": 1,
                    "pathname": 3,
                    "pointer_char1": 1,
                    "pointer_char_var2": 1,
                    "pointer_to_char17": 1,
                    "pointer_to_char_array3": 1,
                    "pointer_to_char_var17": 2,
                    "source_path": 1,
                    "string2": 1,
                    "string_var1": 1,
                    "sub_path": 1,
                    "substring_start": 1,
                    "temp_path": 1,
                    "temp_path2": 1
                },
                "pcVar18": {
                    "char_pointer_var_2": 1,
                    "char_ptr_var2": 1,
                    "copy_path": 1,
                    "current_file_path": 1,
                    "file_path": 1,
                    "full_archived_file_path": 1,
                    "full_path": 1,
                    "full_pathname": 1,
                    "pointer_char2": 1,
                    "pointer_char_var3": 1,
                    "pointer_to_char18": 1,
                    "pointer_to_char_array4": 1,
                    "pointer_to_char_var18": 2,
                    "string3": 1,
                    "string_var2": 1,
                    "temp_combined_path": 1,
                    "temp_dir_path": 1,
                    "temp_file_path": 3,
                    "temp_path3": 1,
                    "tempdir_path": 1
                },
                "pcVar19": {
                    "archived_file_path": 1,
                    "format_params": 1,
                    "output_format": 1,
                    "pointer_char3": 1,
                    "temp_path2": 1
                },
                "pcVar20": {
                    "bfd_close_function": 1,
                    "close_function": 4,
                    "close_function_ptr": 1,
                    "code_pointer": 1,
                    "code_pointer_var1": 1,
                    "code_ptr_var1": 1,
                    "function1": 1,
                    "function_ptr": 1,
                    "pointer_code": 1,
                    "pointer_code_var1": 1,
                    "pointer_to_code": 1,
                    "pointer_to_code20": 1,
                    "pointer_to_code_var20": 2
                },
                "pcVar23": {
                    "aux_var": 1,
                    "char_pointer1": 1,
                    "char_pointer_var_3": 1,
                    "char_ptr_var3": 1,
                    "char_var23": 1,
                    "error_message": 1,
                    "iteration_var": 1,
                    "path_end": 1,
                    "path_ptr": 1,
                    "pathname": 1,
                    "pc_var": 1,
                    "pointer_char": 1,
                    "pointer_char4": 1,
                    "pointer_char_var4": 1,
                    "pointer_to_char1": 1,
                    "pointer_to_char2": 1,
                    "pointer_to_char23": 1,
                    "pointer_to_char_array5": 1,
                    "pointer_to_char_var23": 2,
                    "print_format": 2,
                    "string4": 1,
                    "string_var3": 1,
                    "substring_end": 1,
                    "temp": 1,
                    "temp_char_ptr": 1,
                    "temp_ptr": 1,
                    "temp_var": 1
                },
                "piVar10": {
                    "errno_loc": 1,
                    "errno_location": 8,
                    "errno_ptr": 2,
                    "error_num_ptr": 1,
                    "error_number": 1,
                    "int_pointer1": 1,
                    "int_pointer_var1": 1,
                    "int_ptr": 2,
                    "int_ptr_var1": 1,
                    "int_ptr_var10": 1,
                    "pointer_int": 2,
                    "pointer_integer_var1": 1,
                    "pointer_to_int": 1,
                    "pointer_to_int10": 1,
                    "pointer_to_int_var10": 2,
                    "pointer_to_integer": 1,
                    "pointer_to_integer1": 1,
                    "ptr3": 1,
                    "ptr_errno": 1,
                    "ptr_to_int": 1
                },
                "piVar15": {
                    "errno_location": 1
                },
                "ppcVar16": {
                    "char_pointer_pointer_var_2": 1,
                    "char_ptr_ptr_var3": 1,
                    "current_archived_file": 1,
                    "current_file": 3,
                    "current_file_ptr": 1,
                    "file_ptr": 1,
                    "input_format": 1,
                    "pointer_pointer_char2": 1,
                    "pointer_pointer_char_var2": 1,
                    "pointer_to_pointer_char_var16": 1,
                    "pointer_to_pointer_to_array1": 1,
                    "pointer_to_pointer_to_char16": 1,
                    "pointer_to_pointer_to_char_var16": 1,
                    "ppc_file": 1,
                    "ptr_to_ptr_archived_file": 1,
                    "string_array2": 1,
                    "string_pointer_var2": 1
                },
                "ppcVar19": {
                    "char_ptr_ptr_3": 1,
                    "current_output_file_ptr": 1,
                    "output_archived_file": 1,
                    "output_bfd": 1,
                    "output_files": 1,
                    "pointer_pointer_char": 1,
                    "pointer_pointer_char3": 1,
                    "pointer_pointer_char_var3": 1,
                    "pointer_to_pointer_char_var19": 1,
                    "pointer_to_pointer_to_array2": 1,
                    "pointer_to_pointer_to_char19": 1,
                    "pointer_to_pointer_to_char_var19": 1,
                    "ppc_aux_var2": 1,
                    "ptr_to_ptr_char2": 1,
                    "source_file_ptr": 1,
                    "string_array3": 1,
                    "string_pointer_var3": 1,
                    "temp_file": 1,
                    "temp_ptr": 1
                },
                "ppcVar20": {
                    "close_function": 4,
                    "code_ptr": 1
                },
                "ppcVar23": {
                    "new_path": 1
                },
                "ppcVar6": {
                    "archived_file": 5,
                    "archived_file_name": 1,
                    "archived_file_ptr": 1,
                    "archived_files": 4,
                    "archived_files_ptr": 1,
                    "char_pointer_pointer_var": 1,
                    "char_ptr_ptr": 1,
                    "char_ptr_ptr_var1": 1,
                    "char_ptr_ptr_var6": 1,
                    "file_ptr_check": 1,
                    "pointer_pointer_char": 1,
                    "pointer_pointer_char1": 1,
                    "pointer_pointer_char_var1": 1,
                    "pointer_to_char_array1": 1,
                    "pointer_to_char_pointer": 1,
                    "pointer_to_char_pointer1": 2,
                    "pointer_to_char_pointer6": 1,
                    "pointer_to_char_var6": 1,
                    "pointer_to_pointer_char_var6": 1,
                    "ppc_aux_var1": 1,
                    "ptr_to_ptr_char1": 1,
                    "string_array1": 1,
                    "string_pointer_var1": 1
                },
                "psVar24": {
                    "archived_file_info": 1,
                    "file_stat": 1,
                    "file_stats": 1,
                    "pointer_stat": 1,
                    "pointer_stat_var1": 1,
                    "pointer_to_stat": 1,
                    "pointer_to_stat1": 1,
                    "pointer_to_stat24": 1,
                    "pointer_to_stat_structure": 1,
                    "pointer_to_stat_var24": 2,
                    "ptr_stat": 1,
                    "ptr_stat_buffer": 1,
                    "ptr_to_stat": 1,
                    "stat_buffer": 1,
                    "stat_buffer_internal": 1,
                    "stat_buffer_ptr": 1,
                    "stat_pointer": 2,
                    "stat_ptr": 2,
                    "stat_ptr_var24": 1,
                    "stat_result": 1,
                    "stat_struct": 1,
                    "stat_struct_pointer": 1,
                    "stat_struct_pointer1": 1,
                    "stat_structure_pointer": 1,
                    "stat_var1": 1,
                    "temp_file_stat": 1
                },
                "puVar14": {
                    "bfd_descriptor": 1,
                    "bfd_file_ptr": 2,
                    "bfd_handle": 4,
                    "bfd_handler": 1,
                    "bfd_ptr": 2,
                    "binary_file": 1,
                    "file_descriptor_ptr": 1,
                    "input_bfd": 3,
                    "input_file": 3,
                    "input_file_ptr": 1,
                    "pointer_to_u_int64_2": 1,
                    "pointer_to_undefined8_1": 1,
                    "pointer_to_undefined8_var14": 1,
                    "pointer_to_unsigned_long14": 1,
                    "pointer_to_unsigned_long_var14": 1,
                    "pointer_unsigned_long_var2": 1,
                    "ptr4": 1,
                    "undefined8_pointer2": 1,
                    "undefined8_pointer_var2": 1,
                    "undefined8_ptr_var2": 1
                },
                "puVar19": {
                    "char_ptr_ptr_2": 1,
                    "char_ptr_ptr_var2": 1,
                    "pointer_to_char_pointer1": 1,
                    "pointer_to_char_pointer2": 1,
                    "undefined8_pointer_var3": 1
                },
                "puVar20": {
                    "pointer_to_function": 1
                },
                "puVar9": {
                    "auxiliary_ptr1": 1,
                    "pointer_to_long1": 2,
                    "pointer_to_u_int64": 1,
                    "pointer_to_undefined8_var9": 1,
                    "pointer_to_unsigned_long9": 1,
                    "pointer_to_unsigned_long_var9": 1,
                    "pointer_u_int": 1,
                    "pointer_uint": 1,
                    "pointer_unsigned_long_var1": 1,
                    "ptr2": 1,
                    "ptr_to_uint64": 1,
                    "ptr_var": 1,
                    "temp": 1,
                    "temp_data": 1,
                    "temp_dir": 1,
                    "temp_dir_data": 1,
                    "temp_dir_info": 3,
                    "temp_directory": 1,
                    "temp_directory_data": 1,
                    "temp_ptr": 2,
                    "temp_var9": 1,
                    "u8_pointer_var": 1,
                    "undefined8_pointer1": 1,
                    "undefined8_pointer_var1": 1,
                    "undefined8_ptr": 1,
                    "undefined8_ptr_var1": 1,
                    "undefined8_ptr_var9": 1
                },
                "pvVar7": {
                    "buffer": 10,
                    "buffer_ptr": 1,
                    "pointer_to_void1": 2,
                    "pointer_to_void7": 1,
                    "pointer_to_void_var7": 2,
                    "pointer_void": 2,
                    "pointer_void_var1": 1,
                    "ptr1": 1,
                    "ptr_to_void": 1,
                    "temp_buffer": 1,
                    "temporary_buffer": 1,
                    "void_pointer": 1,
                    "void_pointer1": 1,
                    "void_pointer_var": 1,
                    "void_pointer_var1": 1,
                    "void_ptr": 1,
                    "void_ptr_var1": 1,
                    "void_ptr_var7": 1,
                    "void_var": 1
                },
                "uStack_b0": {
                    "chmod_value": 1,
                    "file_permission": 1,
                    "file_permissions": 7,
                    "flags": 1,
                    "permission": 2,
                    "permission_bitmask": 1,
                    "permission_value": 1,
                    "permissions": 1,
                    "stack_var_b0": 1,
                    "u_stack": 1,
                    "u_stack_b0": 1,
                    "u_stack_var_1": 1,
                    "uint2": 1,
                    "uint_stack_b0": 1,
                    "uint_stack_var": 1,
                    "uint_var2": 3,
                    "unsigned_int_variable2": 1,
                    "unsigned_stack_var1": 2,
                    "unsigned_stack_varb0": 2
                },
                "uVar11": {
                    "error_format_str": 1,
                    "error_message": 4,
                    "error_message1": 1,
                    "error_message_1": 1,
                    "error_message_param": 1,
                    "error_str": 1,
                    "error_string": 1,
                    "gnu_debuglink": 1,
                    "message_param1": 1,
                    "message_params1": 1,
                    "u8_var_1": 1,
                    "uint64_var1": 1,
                    "uint_var1": 1,
                    "undefined8_var1": 3,
                    "undefined8_var11": 2,
                    "undefined8_var_1": 1,
                    "undefined_var1": 1,
                    "unsigned_long_var1": 2,
                    "unsigned_long_var11": 2,
                    "unsigned_long_variable1": 1,
                    "var1": 2,
                    "var_1": 1
                },
                "uVar12": {
                    "error_message": 5,
                    "error_message2": 1,
                    "error_message_2": 1,
                    "error_message_param": 1,
                    "error_message_params": 2,
                    "error_message_with_params": 1,
                    "message_param2": 1,
                    "message_params2": 1,
                    "u8_var_2": 1,
                    "uint64_var2": 1,
                    "uint_var2": 1,
                    "undefined8_var12": 2,
                    "undefined8_var2": 3,
                    "undefined8_var_2": 1,
                    "undefined_var2": 1,
                    "unsigned_long_var12": 2,
                    "unsigned_long_var2": 2,
                    "unsigned_long_variable2": 1,
                    "var2": 2,
                    "var_2": 1
                },
                "uVar22": {
                    "archive_copy_option": 1,
                    "bfd_format": 1,
                    "copy_mode": 1,
                    "flag": 1,
                    "flag2": 2,
                    "format_check_result": 1,
                    "format_flag": 2,
                    "format_index": 1,
                    "format_option": 1,
                    "format_var": 1,
                    "is_thin_archive": 1,
                    "thin_archive_flag": 1,
                    "uint1": 1,
                    "uint_var": 1,
                    "uint_var1": 4,
                    "uint_var22": 1,
                    "uint_var3": 1,
                    "undefined_var3": 1,
                    "unsigned_int_variable1": 1,
                    "unsigned_var1": 2,
                    "unsigned_var22": 2,
                    "var4": 1
                }
            },
            "called": [
                "FUN_0011256b",
                "__errno_location",
                "bfd_openw",
                "bfd_fdopenw",
                "strerror",
                "FUN_00114e50",
                "free",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "bfd_check_format",
                "FUN_00114d50",
                "FUN_00119ed0",
                "bfd_openr_next_archived_file",
                "FUN_00119dd0",
                "bfd_set_error",
                "FUN_00104d25",
                "close",
                "bfd_openr",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_stat",
                "bfd_close_all_done",
                "FUN_00113f50",
                "dcgettext",
                "bfd_get_error",
                "bfd_close"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid process_binary_file_00114690(undefined8 input_file_path,undefined8 output_file_path,int file_descriptor,undefined8 stat_buffer,\n                 undefined8 target_format,long temp_dir,undefined8 conditional_function)\n\n{\n  byte byte_var1;\n  char char_var1;\n  char char_var2;\n  int int_var4;\n  int integer_var2;\n  char **archived_file;\n  void *buffer;\n  long long_var1;\n  undefined8 *temp_dir_info;\n  int *errno_location;\n  undefined8 error_message;\n  undefined8 error_message;\n  long file_status;\n  undefined8 *bfd_handle;\n  char *temp_dir_path;\n  char **current_file;\n  char *pathname;\n  char *temp_file_path;\n  undefined8 *undefined8_ptr_var3;\n  char **output_bfd;\n  code *close_function;\n  long long_var3;\n  uint uint_var1;\n  char *pointer_to_char_var23;\n  stat *pointer_to_stat_var24;\n  bool bool_var1;\n  byte byte_var2;\n  undefined8 *output_file;\n  long *local_array2;\n  stat local_stat;\n  void *void_ptr_array [3];\n  uint file_permissions;\n  long file_size;\n  \n  byte_var2 = 0;\n  file_status = check_file_status_00113f50();\n  if (file_status < 1) {\n    if (file_status == 0) {\n      error_message = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_with_params_00119ed0(error_message,input_file_path);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  bfd_handle = (undefined8 *)bfd_openr(input_file_path,target_format);\n  if ((bfd_handle == (undefined8 *)0x0) || (integer_var2 = bfd_stat(bfd_handle,stat_buffer), integer_var2 != 0)) {\n    print_bfd_error_message_001126c0(input_file_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x40000;\n  }\n  char_var1 = bfd_check_format(bfd_handle,2);\n  if (char_var1 != '\\0') {\n    if (temp_dir == 0) {\n      char_var1 = '\\0';\n      temp_dir = *(long *)bfd_handle[1];\n    }\n    if (file_descriptor < 0) {\n      output_file = (undefined8 *)bfd_openw(output_file_path,temp_dir);\n    }\n    else {\n      output_file = (undefined8 *)bfd_fdopenw(output_file_path,temp_dir,file_descriptor);\n    }\n    if (output_file != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        error_message = *bfd_handle;\n        error_message = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_with_params_00119ed0(error_message,error_message);\n        DAT_00127a10 = 0;\n      }\n      execute_conditional_function_00114d50(output_file,bfd_handle,DAT_001264b4);\n      local_array2 = output_file + 0x1f;\n      if ((*(byte *)((long)bfd_handle + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        error_message = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_bfd_error_message_001126c0(0,bfd_handle,0,error_message);\n        return;\n      }\n      temp_dir_path = (char *)create_temp_directory_path_0011a0e0(*output_file);\n      if (temp_dir_path == (char *)0x0) {\n        errno_location = __errno_location();\n        temp_dir_path = strerror(*errno_location);\n        error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_message_and_exit_00119dd0(error_message,temp_dir_path);\n      }\n      if (DAT_00127a2c == 7) {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = 0;\n      }\n      else {\n        byte_var1 = *(byte *)((long)bfd_handle + 0x49);\n        uint_var1 = byte_var1 >> 3 & 1;\n      }\n      bool_var1 = _DAT_001264b0 != 0;\n      *(byte *)((long)output_file + 0x49) =\n           byte_var1 & 0x10 | (byte)(uint_var1 << 3) | *(byte *)((long)output_file + 0x49) & 0xe7;\n      if (bool_var1) {\n        *(uint *)((long)output_file + 0x44) = *(uint *)((long)output_file + 0x44) | 0x2000;\n      }\n      undefined8_ptr_var3 = (undefined8 *)0x0;\n      current_file = (char **)bfd_openr_next_archived_file(bfd_handle,0);\n      char_var2 = bfd_set_format(output_file,*(byte *)(bfd_handle + 9) & 7);\n      if (char_var2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_bfd_error_message_001126c0(0,output_file,0,0);\n        remove_directory_and_free_memory_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (current_file != (char **)0x0))) {\n        temp_file_path = *current_file;\n        pathname = temp_file_path;\n        if (*temp_file_path == '/') {\nLAB_0010527d:\n          error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_with_params_00119ed0(error_message,temp_file_path);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pathname != '\\0') {\n          pointer_to_char_var23 = pathname;\n          if ((*pathname == '.') && (pointer_to_char_var23 = pathname + 1, pathname[1] == '.')) {\n            pointer_to_char_var23 = pathname + 2;\n            if ((pathname[2] == '\\0') || (pathname[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointer_to_char_var23 != '\\0' && (*pointer_to_char_var23 != '/')); pointer_to_char_var23 = pointer_to_char_var23 + 1) {\n          }\n          pathname = pointer_to_char_var23;\n          if (*pointer_to_char_var23 == '/') {\n            copy_and_extract_archive_001052a2();\n            return;\n          }\n        }\n        temp_file_path = (char *)concat(temp_dir_path,&DAT_0011b47d);\n        integer_var2 = stat(temp_file_path,&local_stat);\n        temp_dir_info = undefined8_ptr_var3;\n        if (-1 < integer_var2) {\n          file_status = create_temp_directory_path_0011a0e0(temp_file_path);\n          free(temp_file_path);\n          if (file_status == 0) {\n            errno_location = __errno_location();\n            temp_file_path = strerror(*errno_location);\n            error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_with_params_00119ed0(error_message,temp_file_path);\n            goto LAB_00104e93;\n          }\n          temp_dir_info = (undefined8 *)xmalloc(0x18);\n          temp_file_path = *current_file;\n          *temp_dir_info = undefined8_ptr_var3;\n          temp_dir_info[2] = 0;\n          temp_dir_info[1] = file_status;\n          temp_file_path = (char *)concat(file_status,&DAT_0011b47d,temp_file_path);\n        }\n        integer_var2 = 0;\n        if (DAT_001279cb != '\\0') {\n          pointer_to_stat_var24 = &local_stat;\n          for (file_status = 0x24; file_status != 0; file_status = file_status + -1) {\n            *(undefined4 *)&pointer_to_stat_var24->st_dev = 0;\n            pointer_to_stat_var24 = (stat *)((long)pointer_to_stat_var24 + (ulong)byte_var2 * -8 + 4);\n          }\n          output_bfd = (char **)current_file[0x1d];\n          if ((char **)current_file[0x1d] == (char **)0x0) {\n            output_bfd = current_file;\n          }\n          integer_var2 = (**(code **)(output_bfd[1] + 0x1e8))(current_file,&local_stat);\n          if (integer_var2 != 0) {\n            pathname = *current_file;\n            error_message = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_with_params_00119ed0(error_message,pathname);\n          }\n        }\n        undefined8_ptr_var3 = (undefined8 *)xmalloc(0x18);\n        undefined8_ptr_var3[1] = temp_file_path;\n        *undefined8_ptr_var3 = temp_dir_info;\n        undefined8_ptr_var3[2] = 0;\n        char_var2 = bfd_check_format(current_file,1);\n        if (char_var2 == '\\0') {\n          error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_bfd_error_message_001126c0(0,current_file,0,error_message);\n          output_bfd = (char **)bfd_openw(temp_file_path,temp_dir);\n          if (output_bfd == (char **)0x0) {\nLAB_00104e80:\n            print_bfd_error_message_001126c0(temp_file_path,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          archived_file = (char **)current_file[0x1d];\n          if ((char **)current_file[0x1d] == (char **)0x0) {\n            archived_file = current_file;\n          }\n          int_var4 = (**(code **)(archived_file[1] + 0x1e8))(current_file);\n          file_status = file_size;\n          if (int_var4 == 0) {\n            if (file_size < 0) {\n              get_formatted_string_001125fa(current_file);\n              error_message = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_with_params_00119ed0(error_message);\n            }\n            else {\n              int_var4 = bfd_seek(current_file,0,0);\n              if (int_var4 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  pathname = *output_bfd;\n                  error_message = get_formatted_string_001125fa(current_file);\n                  pointer_to_char_var23 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointer_to_char_var23,error_message,pathname);\n                }\n                buffer = (void *)xmalloc(0x2000);\n                for (; file_status != 0; file_status = file_status - long_var3) {\n                  long_var3 = 0x2000;\n                  if (file_status < 0x2001) {\n                    long_var3 = file_status;\n                  }\n                  long_var1 = bfd_bread(buffer,long_var3,current_file);\n                  archived_file = current_file;\n                  if ((long_var3 != long_var1) ||\n                     (long_var1 = bfd_bwrite(buffer,long_var3,output_bfd), archived_file = output_bfd,\n                     long_var3 != long_var1)) {\n                    print_bfd_error_message_001126c0(0,archived_file,0,0);\n                    free(buffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*output_bfd,file_permissions | 0x100);\n                free(buffer);\n                char_var2 = bfd_close_all_done(output_bfd);\n                if (char_var2 == '\\0') {\n                  print_bfd_error_message_001126c0(temp_file_path,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              error_message = get_formatted_string_001125fa(current_file);\n              print_error_message_0011a110(error_message);\n            }\n          }\n          else {\n            print_bfd_error_message_001126c0(0,current_file,0,0);\n          }\nLAB_00104f00:\n          char_var2 = bfd_close_all_done(output_bfd);\n          if (char_var2 == '\\0') {\n            print_bfd_error_message_001126c0(temp_file_path,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(temp_file_path);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (char_var1 == '\\0') {\n            output_bfd = (char **)bfd_openw(temp_file_path,*(undefined8 *)current_file[1]);\n          }\n          else {\n            output_bfd = (char **)bfd_openw(temp_file_path,temp_dir);\n          }\n          if (output_bfd == (char **)0x0) goto LAB_00104e80;\n          char_var2 = FUNC_00114e50(current_file,output_bfd,conditional_function);\n          if (char_var2 == '\\0') {\n            int_var4 = bfd_get_arch(current_file);\n            if (int_var4 == 0) goto LAB_00104d75;\n            char_var2 = bfd_close_all_done(output_bfd);\n            if (char_var2 == '\\0') {\n              print_bfd_error_message_001126c0(temp_file_path,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          char_var2 = bfd_close(output_bfd);\n          if (char_var2 == '\\0') {\n            print_bfd_error_message_001126c0(temp_file_path,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (integer_var2 == 0)) {\n            set_file_modification_time_0011a350(temp_file_path,&local_stat);\n          }\n          file_status = bfd_openr(temp_file_path,temp_dir);\n          undefined8_ptr_var3[2] = file_status;\n          *local_array2 = file_status;\n          local_array2 = (long *)(file_status + 0xf0);\n          output_bfd = (char **)bfd_openr_next_archived_file(bfd_handle);\n          bfd_close(current_file);\n          current_file = output_bfd;\n        }\n      }\n      *local_array2 = 0;\n      buffer = (void *)xstrdup(*output_file);\n      if (DAT_00127a20 == 0) {\n        close_function = bfd_close;\n      }\n      else {\n        close_function = bfd_close_all_done;\n      }\n      char_var1 = (*close_function)(output_file);\n      if (char_var1 == '\\0') {\n        DAT_00127a20 = 1;\n        print_bfd_error_message_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\n      buffer = (void *)xstrdup(*bfd_handle);\n      char_var1 = bfd_close(bfd_handle);\n      if (char_var1 == '\\0') {\n        DAT_00127a20 = 1;\n        print_bfd_error_message_001126c0(buffer,0,0,0);\n      }\n      free(buffer);\nLAB_00114b4b:\n      while (undefined8_ptr_var3 != (undefined8 *)0x0) {\n        if (undefined8_ptr_var3[2] == 0) {\n          rmdir((char *)undefined8_ptr_var3[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)undefined8_ptr_var3[1]);\n        }\n        free((void *)undefined8_ptr_var3[1]);\n        bfd_handle = (undefined8 *)*undefined8_ptr_var3;\n        free(undefined8_ptr_var3);\n        undefined8_ptr_var3 = bfd_handle;\n      }\n      rmdir(temp_dir_path);\n      free(temp_dir_path);\n      return;\n    }\nLAB_00105231:\n    close(file_descriptor);\n    print_bfd_error_message_001126c0(output_file_path,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  char_var1 = bfd_check_format_matches(bfd_handle,1,void_ptr_array);\n  if (char_var1 == '\\0') {\n    integer_var2 = bfd_get_error();\n    char_var1 = bfd_check_format_matches(bfd_handle,3,&local_stat);\n    if (char_var1 == '\\0') {\n      int_var4 = bfd_get_error();\n      if (integer_var2 != int_var4) {\n        bfd_set_error(integer_var2);\n      }\n      print_bfd_error_message_001126c0(input_file_path,0,0,0);\n      if (integer_var2 == 0xd) {\n        print_matching_formats_0011256b(void_ptr_array[0]);\n      }\n      if (int_var4 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(local_stat.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (integer_var2 == 0xd) {\n      free(void_ptr_array[0]);\n    }\n  }\n  if (temp_dir == 0) {\n    temp_dir = *(long *)bfd_handle[1];\n  }\n  if (file_descriptor < 0) {\n    file_status = bfd_openw(output_file_path,temp_dir);\n  }\n  else {\n    file_status = bfd_fdopenw(output_file_path,temp_dir,file_descriptor);\n  }\n  if (file_status == 0) goto LAB_00105231;\n  execute_conditional_function_00114d50(file_status,bfd_handle,DAT_001264b4);\n  char_var1 = FUNC_00114e50(bfd_handle,file_status,conditional_function);\n  if (char_var1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    char_var1 = bfd_close(file_status);\n    goto LAB_001147d5;\n  }\n  char_var1 = bfd_close_all_done(file_status);\nLAB_001147d5:\n  if (char_var1 != '\\x01') {\n    DAT_00127a20 = 1;\n    print_bfd_error_message_001126c0(output_file_path,0,0,0);\n    return;\n  }\n  char_var1 = bfd_close(bfd_handle);\n  if (char_var1 == '\\0') {\n    DAT_00127a20 = 1;\n    print_bfd_error_message_001126c0(input_file_path,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_file_00114690",
            "entrypoint": "0x00114690",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114690": "process_binary_file_00114690",
                "__ptr": "undefined8_ptr_var3",
                "bVar1": "byte_var1",
                "bVar25": "bool_var1",
                "bVar26": "byte_var2",
                "cVar2": "char_var1",
                "cVar3": "char_var2",
                "iVar4": "int_var4",
                "iVar5": "integer_var2",
                "lStack_98": "file_size",
                "lVar13": "file_status",
                "lVar21": "long_var3",
                "lVar8": "long_var1",
                "local_158": "local_stat",
                "local_198": "local_array2",
                "local_1a0": "output_file",
                "local_c8": "void_ptr_array",
                "param_1": "input_file_path",
                "param_2": "output_file_path",
                "param_3": "file_descriptor",
                "param_4": "stat_buffer",
                "param_5": "target_format",
                "param_6": "temp_dir",
                "param_7": "conditional_function",
                "pcVar15": "temp_dir_path",
                "pcVar16": "archived_file",
                "pcVar17": "pathname",
                "pcVar18": "temp_file_path",
                "pcVar19": "temp_path2",
                "pcVar20": "close_function",
                "pcVar23": "pointer_to_char_var23",
                "piVar10": "errno_location",
                "ppcVar16": "current_file",
                "ppcVar19": "output_bfd",
                "ppcVar6": "archived_file",
                "psVar24": "pointer_to_stat_var24",
                "puVar14": "bfd_handle",
                "puVar9": "temp_dir_info",
                "pvVar7": "buffer",
                "uStack_b0": "file_permissions",
                "uVar11": "error_message",
                "uVar12": "error_message",
                "uVar22": "uint_var1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114b84": {
            "additional_data": {
                "FUN_00114b84": {
                    "remove_and_free_directory": 11,
                    "remove_directory": 17,
                    "remove_directory_and_free_memory": 3
                },
                "param_9": {
                    "directory_path": 30,
                    "path": 1
                }
            },
            "called": [
                "free",
                "rmdir"
            ],
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "code": "\nvoid remove_directory_and_free_memory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "current_name": "remove_directory_and_free_memory_00114b84",
            "entrypoint": "0x00114b84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114b84": "remove_directory_and_free_memory_00114b84",
                "param_9": "directory_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c20": {
            "additional_data": {
                "DAT_0011b499": {
                    "comparison_string": 7,
                    "string_data": 1,
                    "string_to_compare": 3,
                    "target_string": 1
                },
                "DAT_001278b8": {
                    "flag": 10,
                    "is_processed": 1,
                    "result": 1,
                    "return_value": 1
                },
                "FUN_00114c20": {
                    "find_and_match_entries": 1,
                    "find_and_process_entry": 1,
                    "find_matching_entries": 2,
                    "process_data": 17,
                    "process_entries": 2,
                    "process_entry": 7
                },
                "F_00114c20": {
                    "process_data": 1
                },
                "cVar1": {
                    "comparison_result": 11,
                    "is_match": 1,
                    "match_result": 1,
                    "result": 17
                },
                "find_matching_entry_00114190": {
                    "find_matching_entry": 10
                },
                "param_1": {
                    "data": 9,
                    "entry": 7,
                    "entry_address": 3,
                    "entry_pointer": 1,
                    "input": 2,
                    "input_address": 1,
                    "input_data": 7,
                    "input_param": 1
                },
                "pcVar2": {
                    "char_pointer": 1,
                    "char_ptr": 3,
                    "character_ptr": 1,
                    "current": 1,
                    "current_address": 1,
                    "current_char": 1,
                    "current_entry": 1,
                    "matching_entry": 1,
                    "next_char": 2,
                    "next_data": 1,
                    "next_entry": 5,
                    "pointer": 3,
                    "pointer_to_char": 1,
                    "pointer_to_data": 1,
                    "ptr": 3,
                    "ptr_to_char": 2,
                    "sub_input": 1,
                    "temp_ptr": 1
                },
                "string_comparison_function_00113fb0": {
                    "compare_strings": 10
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid process_data_00114c20(long data)\n\n{\n  char result;\n  char *next_entry;\n  \n  find_matching_entry(data,1,1);\n  result = compare_strings(data,&DAT_0011b499);\n  if (result != '\\0') {\n    next_entry = (char *)(data + 5);\n    if (*(char *)(data + 4) != 'a') {\n      next_entry = (char *)(data + 4);\n    }\n    if (*next_entry != '\\0') {\n      find_matching_entry(next_entry,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "current_name": "process_data_00114c20",
            "entrypoint": "0x00114c20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c20": "process_data_00114c20",
                "cVar1": "result",
                "find_matching_entry_00114190": "find_matching_entry",
                "param_1": "data",
                "pcVar2": "next_entry",
                "string_comparison_function_00113fb0": "compare_strings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114c80": {
            "additional_data": {
                "0": {
                    "zero": 1
                },
                "0x30": {
                    "allocated_size": 1
                },
                "0x3d": {
                    "equal_sign": 1
                },
                "FUN_00114c80": {
                    "extract_data_from_string": 1,
                    "extract_key_value": 2,
                    "extract_key_value_pair": 2,
                    "extract_key_value_pairs": 1,
                    "extract_parameter": 1,
                    "extract_parameter_from_string": 1,
                    "parse_assignment": 2,
                    "parse_input_parameters": 1,
                    "parse_key_value": 1,
                    "parse_key_value_pair": 1,
                    "parse_param": 1,
                    "parse_param_and_args": 1,
                    "parse_param_string": 1,
                    "parse_parameter": 5,
                    "parse_parameter_string": 3,
                    "parse_parameter_value": 1,
                    "parse_query_string": 2,
                    "parse_url": 1,
                    "parse_url_parameters": 2,
                    "parse_variable": 1
                },
                "auVar3": {
                    "extracted_data": 2,
                    "extracted_param": 1,
                    "output_array": 1,
                    "parsed_assignment": 1,
                    "parsed_data": 6,
                    "parsed_info": 1,
                    "parsed_output": 1,
                    "parsed_parameters": 2,
                    "parsed_params": 1,
                    "parsed_query": 1,
                    "parsed_result": 3,
                    "parsed_url": 1,
                    "parsed_values": 1,
                    "result": 7,
                    "result_array": 2
                },
                "copy_string_with_null_terminator_0011a480": {
                    "copy_string": 5,
                    "copy_substring": 1
                },
                "dcgettext": {
                    "get_error_message": 3,
                    "get_error_message_translation": 1,
                    "get_localized_string": 1
                },
                "param_1": {
                    "input_str": 1,
                    "input_string": 22,
                    "param_string": 1,
                    "parameter_string": 2,
                    "query_string": 2,
                    "url": 3
                },
                "param_2": {
                    "default_param": 1,
                    "default_value": 3,
                    "input1": 1,
                    "key": 1,
                    "param2": 5,
                    "param_2": 2,
                    "param_2_value": 3,
                    "param_start": 1,
                    "param_value": 1,
                    "param_value_1": 1,
                    "value": 1,
                    "value1": 3,
                    "value_1": 8
                },
                "param_3": {
                    "error_message": 17,
                    "error_msg": 2,
                    "input2": 1,
                    "param3": 5,
                    "param_3": 2,
                    "param_3_value": 3,
                    "param_value_2": 1
                },
                "param_4": {
                    "config": 1,
                    "custom_message": 1,
                    "exit_code": 1,
                    "extra_param": 1,
                    "optional_data": 1,
                    "output": 1,
                    "param4": 5,
                    "param_4": 3,
                    "param_4_value": 3,
                    "param_end": 1,
                    "param_value2": 1,
                    "param_value_3": 1,
                    "value2": 3,
                    "value_2": 8
                },
                "pcVar1": {
                    "delimiter_pos": 1,
                    "equal_char_ptr": 1,
                    "equal_sign": 4,
                    "equal_sign_pointer": 1,
                    "equal_sign_pos": 9,
                    "equal_sign_position": 6,
                    "equal_sign_ptr": 5,
                    "equals_sign": 2,
                    "equals_sign_position": 2
                },
                "print_error_message_and_exit_00119dd0": {
                    "exit_with_error": 1,
                    "print_and_exit": 1,
                    "print_error_and_exit": 3,
                    "print_error_message_and_exit": 1
                },
                "strchr": {
                    "find_equal_sign": 1
                },
                "uVar2": {
                    "copy_result": 1,
                    "error": 1,
                    "error_code": 2,
                    "error_message": 7,
                    "error_message_ptr": 1,
                    "error_message_translation": 1,
                    "error_msg": 1,
                    "error_string": 1,
                    "error_text": 2,
                    "format_error": 2,
                    "format_error_message": 1,
                    "format_error_msg": 1,
                    "localized_error_message": 1,
                    "message": 1,
                    "message_ptr": 1,
                    "msg": 1,
                    "result": 3,
                    "string_copy": 1,
                    "string_copy_result": 1
                },
                "xmalloc": {
                    "allocate_memory": 5
                }
            },
            "called": [
                "FUN_001053b5",
                "xmalloc",
                "strchr",
                "FUN_0011a480"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16] parse_parameter_string_00114c80(char *input_string,undefined8 value_1,undefined8 error_message,undefined8 value_2)\n\n{\n  char *equal_sign_pos;\n  undefined8 error_message;\n  undefined result [16];\n  \n  equal_sign_pos = strchr(input_string,0x3d);\n  if (equal_sign_pos != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_message = copy_string(input_string,(long)equal_sign_pos - (long)input_string);\n    result._0_8_[2] = equal_sign_pos + 1;\n    result._0_8_[1] = error_message;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value_1;\n    result._8_8_ = value_2;\n    return result;\n  }\n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit(error_message,error_message);\n}\n\n",
            "current_name": "parse_parameter_string_00114c80",
            "entrypoint": "0x00114c80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114c80": "parse_parameter_string_00114c80",
                "auVar3": "result",
                "copy_string_with_null_terminator_0011a480": "copy_string",
                "dcgettext": "get_error_message",
                "param_1": "input_string",
                "param_2": "value_1",
                "param_3": "error_message",
                "param_4": "value_2",
                "pcVar1": "equal_sign_pos",
                "print_error_message_and_exit_00119dd0": "print_error_and_exit",
                "strchr": "find_equal_sign",
                "uVar2": "error_message",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114cf0": {
            "additional_data": {
                "FUN_00114cf0": {
                    "allocate_and_initialize_path": 1,
                    "allocate_file_name": 1,
                    "allocate_file_path": 1,
                    "allocate_memory_and_copy": 1,
                    "allocate_memory_and_copy_path": 1,
                    "create_file_path": 7,
                    "create_file_with_x_padding": 1,
                    "create_filepath": 2,
                    "create_path_from_file_name": 1,
                    "extract_directory": 2,
                    "extract_file_name": 7,
                    "extract_filename": 3,
                    "extract_last_directory": 1,
                    "extract_path_and_copy": 1,
                    "reverse_file_path": 1
                },
                "bVar6": {
                    "backward": 1,
                    "flag": 5,
                    "found_slash": 15,
                    "is_forward_slash_present": 1,
                    "is_root": 1,
                    "is_slash": 2,
                    "is_slash_present": 3,
                    "should_allocate_memory": 1,
                    "slash_exists": 1
                },
                "lVar2": {
                    "count": 2,
                    "current_index": 1,
                    "distance": 1,
                    "i": 1,
                    "idx": 1,
                    "index": 10,
                    "iteration": 1,
                    "len": 1,
                    "length": 5,
                    "loop_counter": 2,
                    "loop_index": 1,
                    "path_length": 4,
                    "remaining_chars": 1
                },
                "lVar3": {
                    "copy_length": 1,
                    "file_name_length": 3,
                    "file_name_start": 1,
                    "file_path_length": 1,
                    "filename_length": 1,
                    "filename_offset": 1,
                    "folder_path_length": 1,
                    "length_before_last_slash": 1,
                    "new_file_name_len": 1,
                    "new_file_name_length": 1,
                    "new_string_length": 1,
                    "offset": 4,
                    "path_length": 6,
                    "prefix_length": 4,
                    "slice_index": 1,
                    "start": 1,
                    "start_index": 2
                },
                "lVar4": {
                    "directory_length": 1,
                    "end": 1,
                    "file_name_length": 5,
                    "index_difference": 1,
                    "last_forward_slash_index": 1,
                    "last_slash_distance": 1,
                    "last_slash_index": 2,
                    "length": 1,
                    "slash_distance": 2,
                    "slash_index": 8,
                    "slash_offset": 2,
                    "slash_position": 4,
                    "suffix_length": 2
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 14,
                    "filepath": 3,
                    "input_path": 2,
                    "path": 11
                },
                "pcVar1": {
                    "last_forward_slash": 1,
                    "last_slash": 30
                },
                "pcVar5": {
                    "copy_destination": 1,
                    "current_char": 2,
                    "dest": 2,
                    "destination": 1,
                    "file_name_ptr": 1,
                    "file_path_ptr": 1,
                    "filename": 1,
                    "new_directory": 1,
                    "new_file_name": 4,
                    "new_file_path": 2,
                    "new_filename": 1,
                    "new_filepath": 1,
                    "new_path": 11,
                    "new_string": 1,
                    "path": 1
                }
            },
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "code": "\nvoid create_path_from_file_name_00114cf0(char *file_path)\n\n{\n  char *last_slash;\n  long index;\n  long path_length;\n  long slash_index;\n  char *new_path;\n  byte found_slash;\n  \n  found_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    slash_index = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(slash_index + 0xb);\n    path_length = slash_index + 1;\n    new_path = last_slash;\n    for (index = slash_index; index != 0; index = index + -1) {\n      *new_path = *file_path;\n      file_path = file_path + (ulong)found_slash * -2 + 1;\n      new_path = new_path + (ulong)found_slash * -2 + 1;\n    }\n    last_slash[slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  return;\n}\n\n",
            "current_name": "create_path_from_file_name_00114cf0",
            "entrypoint": "0x00114cf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114cf0": "create_path_from_file_name_00114cf0",
                "bVar6": "found_slash",
                "lVar2": "index",
                "lVar3": "path_length",
                "lVar4": "slash_index",
                "param_1": "file_path",
                "pcVar1": "last_slash",
                "pcVar5": "new_path"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d50": {
            "additional_data": {
                "0x380": {
                    "offset1": 2
                },
                "0x71": {
                    "offset2": 1
                },
                "0x78": {
                    "function_pointer": 1
                },
                "DAT": {
                    "dat": 1
                },
                "FUN_00114d50": {
                    "execute_callback": 2,
                    "execute_command": 1,
                    "execute_conditional_action": 1,
                    "execute_conditional_function": 1,
                    "execute_function": 20,
                    "process_data": 3,
                    "process_param": 2
                },
                "PTR": {
                    "ptr": 1
                },
                "byte": {
                    "byte_data": 1,
                    "byte_val": 2,
                    "byte_value": 3,
                    "char_value": 1,
                    "data": 1,
                    "data_byte": 2,
                    "function_data": 1,
                    "status": 1,
                    "status_byte": 1
                },
                "byteValue": {
                    "byte_value": 1
                },
                "byte_1": {
                    "byte_value": 1
                },
                "byte_ptr_1": {
                    "byte_ptr_1": 1
                },
                "byte_ptr_2": {
                    "byte_ptr_2": 1
                },
                "code": {
                    "callback_function": 1,
                    "function_code": 1,
                    "function_pointer": 3,
                    "function_ptr": 3
                },
                "code_ptr": {
                    "function_ptr": 1
                },
                "code_ptr_1": {
                    "func_ptr_1": 1
                },
                "code_ptr_2": {
                    "func_ptr_2": 1
                },
                "int_1": {
                    "value1": 1
                },
                "int_2": {
                    "value2": 1
                },
                "long_1": {
                    "var1": 1
                },
                "long_2": {
                    "var2": 1
                },
                "long_3": {
                    "var3": 1
                },
                "long_4": {
                    "var4": 1
                },
                "param_1": {
                    "arg1": 5,
                    "callback_arg1": 1,
                    "callback_pointer1": 1,
                    "command1": 1,
                    "condition1": 1,
                    "data_1": 1,
                    "data_ptr1": 1,
                    "func_arg1": 1,
                    "func_context": 1,
                    "func_ptr1": 1,
                    "function_arg1": 1,
                    "function_argument_1": 1,
                    "function_parameter": 1,
                    "function_parameter1": 2,
                    "input1": 5,
                    "input_1": 1,
                    "input_param1": 1,
                    "input_ptr": 2,
                    "parameter1": 1,
                    "source_address": 1,
                    "source_data": 1
                },
                "param_2": {
                    "arg2": 5,
                    "binary_parameter": 1,
                    "callback_arg2": 1,
                    "callback_pointer2": 1,
                    "command2": 1,
                    "condition2": 1,
                    "data_2": 1,
                    "data_context": 1,
                    "data_ptr2": 1,
                    "dest_address": 1,
                    "func_arg2": 1,
                    "func_ptr2": 1,
                    "function_arg2": 1,
                    "function_argument_2": 1,
                    "function_parameter2": 2,
                    "input2": 5,
                    "input_2": 1,
                    "input_param2": 1,
                    "output_ptr": 1,
                    "param_ptr": 1,
                    "parameter2": 1,
                    "target_data": 1
                },
                "param_3": {
                    "action_value": 1,
                    "arg3": 2,
                    "callback_result": 1,
                    "callback_value": 1,
                    "command_type": 1,
                    "condition": 8,
                    "condition_param": 1,
                    "flag": 8,
                    "flags": 1,
                    "func_arg3": 1,
                    "function_arg3": 1,
                    "function_argument_3": 1,
                    "function_parameter3": 2,
                    "parameter3": 1,
                    "status": 1
                }
            },
            "called": [
                "FUN_0010540e"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid execute_conditional_function_00114d50(long input1,long input2,uint flag)\n\n{\n  if (*(int *)(*(long *)(input1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(input2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte_value *)(*(long *)(*(long *)(input2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function_ptr **)(*(long *)(*(long *)(input1 + 8) + 0x380) + 0x78))(input1,flag != 0);\n  return;\n}\n\n",
            "current_name": "execute_conditional_function_00114d50",
            "entrypoint": "0x00114d50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d50": "execute_conditional_function_00114d50",
                "byte": "byte_value",
                "code": "function_ptr",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114d60": {
            "additional_data": {
                "FUN_00114d60": {
                    "read_and_store_file": 1,
                    "read_and_store_file_contents": 6,
                    "read_and_store_file_data": 2,
                    "read_data_from_file": 1,
                    "read_file_and_store": 2,
                    "read_file_and_store_content": 1,
                    "read_file_and_store_contents": 4,
                    "read_file_and_store_data": 5,
                    "read_file_contents": 7,
                    "read_file_data": 1
                },
                "__errno_location": {
                    "get_errno_location": 1,
                    "get_error_code": 2
                },
                "__stream": {
                    "file": 2,
                    "file_pointer": 6,
                    "file_ptr": 1,
                    "file_stream": 22
                },
                "iVar1": {
                    "end_of_file": 5,
                    "eof_flag": 3,
                    "eof_indicator": 14,
                    "eof_status": 1,
                    "feof_status": 1,
                    "is_end_of_file": 1,
                    "is_eof": 2
                },
                "lVar7": {
                    "bytes_read": 2,
                    "current_file_size": 1,
                    "current_index": 1,
                    "current_offset": 5,
                    "current_pos": 1,
                    "current_position": 7,
                    "current_size": 3,
                    "position": 1,
                    "total_bytes_read": 10
                },
                "lVar8": {
                    "allocated_memory_size": 2,
                    "allocated_size": 5,
                    "buffer_size": 20,
                    "current_size": 1,
                    "max_size": 3
                },
                "param_1": {
                    "file_data": 1,
                    "file_descriptor": 1,
                    "file_info": 4,
                    "file_name": 1,
                    "file_path": 24
                },
                "pcVar3": {
                    "err_msg": 1,
                    "errno_message": 1,
                    "error_message": 22,
                    "error_msg": 2,
                    "error_string": 5
                },
                "piVar2": {
                    "err_num_ptr": 1,
                    "errno_location": 4,
                    "errno_location_ptr": 2,
                    "errno_ptr": 4,
                    "error_code": 3,
                    "error_indicator": 1,
                    "error_location": 5,
                    "error_location_pointer": 1,
                    "error_number": 8,
                    "error_number_ptr": 1,
                    "error_pointer": 1
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_and_exit_error_message": 1,
                    "print_error_message_and_exit": 1
                },
                "sVar6": {
                    "bytes_read": 24,
                    "bytes_to_read": 1,
                    "read_bytes": 1,
                    "read_size": 5
                },
                "uVar4": {
                    "err_msg_fmt": 1,
                    "error_code": 1,
                    "error_format": 11,
                    "error_format_string": 2,
                    "error_message": 4,
                    "error_message_format": 1,
                    "error_message_template": 1,
                    "error_string": 6,
                    "error_template": 1,
                    "format_string": 1,
                    "i18n_msg": 1,
                    "translated_message": 1
                },
                "uVar5": {
                    "allocated_memory": 6,
                    "allocation_pointer": 1,
                    "allocation_result": 1,
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "data_buffer": 1,
                    "dynamic_memory": 2,
                    "error_message_argument": 1,
                    "file_data_buffer": 1,
                    "file_name": 1,
                    "file_path": 1,
                    "file_path_copy": 5,
                    "file_path_cpy": 1,
                    "file_path_to_print": 1,
                    "memory_allocation": 1,
                    "memory_buffer": 1,
                    "msg_arg": 1,
                    "temp_data": 1,
                    "temp_variable": 2
                }
            },
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid read_file_and_store_contents_00114d60(long file_path)\n\n{\n  int eof_indicator;\n  int *error_number;\n  char *error_message;\n  undefined8 error_format;\n  FILE *file_stream;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long total_bytes_read;\n  long buffer_size;\n  \n  file_stream = fopen(*(char **)(file_path + 0x10),\"r\");\n  if (file_stream == (FILE *)0x0) {\n    error_number = __errno_location();\n    error_message = strerror(*error_number);\n    allocated_memory = *(undefined8 *)(file_path + 0x10);\n    error_format = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_and_exit_error_message(error_format,allocated_memory,error_message);\n  }\n  buffer_size = 0x1000;\n  total_bytes_read = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_path + 0x20) = allocated_memory;\n  while( true ) {\n    eof_indicator = feof(file_stream);\n    if (eof_indicator != 0) {\n      *(long *)(file_path + 0x18) = total_bytes_read;\n      fclose(file_stream);\n      return;\n    }\n    if (total_bytes_read == buffer_size) {\n      buffer_size = total_bytes_read * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_path + 0x20),buffer_size);\n      *(undefined8 *)(file_path + 0x20) = allocated_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_path + 0x20) + total_bytes_read),1,buffer_size - total_bytes_read,file_stream);\n    eof_indicator = ferror(file_stream);\n    if (eof_indicator != 0) break;\n    total_bytes_read = total_bytes_read + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_path + 0x10);\n  error_format = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_and_exit_error_message(error_format,allocated_memory);\n}\n\n",
            "current_name": "read_file_and_store_contents_00114d60",
            "entrypoint": "0x00114d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114d60": "read_file_and_store_contents_00114d60",
                "__errno_location": "get_error_code",
                "__stream": "file_stream",
                "iVar1": "eof_indicator",
                "lVar7": "total_bytes_read",
                "lVar8": "buffer_size",
                "param_1": "file_path",
                "pcVar3": "error_message",
                "piVar2": "error_number",
                "print_error_message_and_exit_00119dd0": "print_and_exit_error_message",
                "sVar6": "bytes_read",
                "uVar4": "error_format",
                "uVar5": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114dc7": {
            "additional_data": {
                "FUN_00114dc7": {
                    "read_and_allocate_memory": 1,
                    "read_and_enlarge_buffer": 1,
                    "read_and_expand_buffer": 1,
                    "read_and_expand_data": 2,
                    "read_and_expand_file": 2,
                    "read_and_parse_file": 1,
                    "read_and_print_file_data": 1,
                    "read_and_process_file": 1,
                    "read_and_resize": 1,
                    "read_and_resize_buffer": 12,
                    "read_and_resize_data": 2,
                    "read_and_resize_file": 1,
                    "read_file_and_expand": 1,
                    "read_file_and_resize": 2,
                    "read_file_and_resize_buffer": 2
                },
                "PTR_00119dd0": {
                    "error_msg_format": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_localized_error_msg": 1,
                    "get_localized_message": 1,
                    "get_translated_string": 1
                },
                "fclose": {
                    "close_file": 5
                },
                "feof": {
                    "check_end_of_file": 1
                },
                "ferror": {
                    "check_error": 1
                },
                "fread": {
                    "read_from_file": 1
                },
                "iVar1": {
                    "error": 25,
                    "error_check": 1,
                    "error_flag": 1,
                    "error_status": 2
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_and_exit": 1,
                    "print_error_message_and_exit": 4
                },
                "sVar4": {
                    "bytes_read": 23,
                    "num_bytes_read": 1,
                    "read_size": 6
                },
                "uVar2": {
                    "error_message": 22,
                    "error_message1": 1,
                    "error_msg": 5,
                    "error_string": 1
                },
                "uVar3": {
                    "category": 1,
                    "error_code": 1,
                    "error_context": 4,
                    "error_message2": 1,
                    "error_parameter": 1,
                    "error_source": 1,
                    "error_text": 1,
                    "locale": 2,
                    "localized_error_message": 1,
                    "message": 1,
                    "message_context": 2,
                    "message_parameter": 1,
                    "message_ptr": 1,
                    "message_text": 1,
                    "message_translation": 1,
                    "system_error_message": 1,
                    "translated_error_message": 4,
                    "translated_message": 2,
                    "translation": 2
                },
                "unaff_R12": {
                    "buffer_offset": 1,
                    "buffer_start": 1,
                    "current_offset": 3,
                    "current_pos": 3,
                    "current_position": 3,
                    "read_index": 1,
                    "read_offset": 2,
                    "start": 2,
                    "start_of_buffer": 1,
                    "start_offset": 3,
                    "start_pos": 5,
                    "start_position": 6
                },
                "unaff_R14": {
                    "buffer_end": 1,
                    "buffer_size": 6,
                    "end": 2,
                    "end_of_buffer": 1,
                    "end_offset": 5,
                    "end_pos": 6,
                    "end_position": 7,
                    "expanded_size": 1,
                    "max_position": 1,
                    "target_pos": 1
                },
                "unaff_RBP": {
                    "buffer": 15,
                    "buffer_address": 2,
                    "buffer_data": 2,
                    "buffer_info": 2,
                    "buffer_offset": 1,
                    "buffer_pointer": 6,
                    "buffer_ptr": 3
                },
                "unaff_RBX": {
                    "file": 26,
                    "file_pointer": 3,
                    "file_ptr": 2
                },
                "xrealloc": {
                    "resize_buffer": 1
                }
            },
            "called": [
                "fread",
                "FUN_00114dc7",
                "feof",
                "FUN_00119dd0",
                "xrealloc",
                "ferror",
                "dcgettext",
                "fclose"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\nvoid read_file_and_resize_buffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 error_context;\n  size_t bytes_read;\n  FILE *file;\n  long buffer;\n  long start_position;\n  long end_position;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer + 0x20) + start_position),1,end_position - start_position,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      error_context = *(undefined8 *)(buffer + 0x10);\n      error_message = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_message_and_exit(error_message,error_context);\n    }\n    start_position = start_position + bytes_read;\n    error = feof(file);\n    if (error != 0) break;\n    if (start_position == end_position) {\n      end_position = start_position * 2;\n      error_context = xrealloc(*(undefined8 *)(buffer + 0x20),end_position);\n      *(undefined8 *)(buffer + 0x20) = error_context;\n    }\n  }\n  *(long *)(buffer + 0x18) = start_position;\n  fclose(file);\n  return;\n}\n\n",
            "current_name": "read_file_and_resize_buffer_00114dc7",
            "entrypoint": "0x00114dc7",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114dc7": "read_file_and_resize_buffer_00114dc7",
                "dcgettext": "get_localized_message",
                "fclose": "close_file",
                "feof": "check_end_of_file",
                "ferror": "check_error",
                "fread": "read_from_file",
                "iVar1": "error",
                "print_error_message_and_exit_00119dd0": "print_error_message_and_exit",
                "sVar4": "bytes_read",
                "uVar2": "error_message",
                "uVar3": "error_context",
                "unaff_R12": "start_position",
                "unaff_R14": "end_position",
                "unaff_RBP": "buffer",
                "unaff_RBX": "file",
                "xrealloc": "resize_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e00": {
            "additional_data": {
                "FUN_00114e00": {
                    "check_endianness": 2,
                    "determine_endianness": 2,
                    "get_endianness": 9,
                    "get_endianness_description": 1,
                    "get_endianness_label": 1,
                    "get_endianness_string": 3,
                    "identify_endianness": 1,
                    "print_endianness": 11,
                    "print_endianness_message": 1
                },
                "am_accept": {
                    "domain": 1
                },
                "dcgettext": {
                    "get_endianness_text": 1,
                    "get_localization_string": 1,
                    "print_endianness": 2,
                    "translate": 1,
                    "translate_and_print": 1,
                    "translate_endianness": 1,
                    "translate_message": 1,
                    "translate_text": 3
                },
                "original_variable_name_1": {
                    "endianness_string": 1
                },
                "param_1": {
                    "endian": 1,
                    "endian_type": 2,
                    "endian_value": 1,
                    "endianness": 15,
                    "endianness_code": 2,
                    "endianness_flag": 2,
                    "endianness_type": 4,
                    "endianness_value": 4
                }
            },
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\nvoid get_endianness_description_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "current_name": "get_endianness_description_00114e00",
            "entrypoint": "0x00114e00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00114e00": "get_endianness_description_00114e00",
                "dcgettext": "translate_text",
                "param_1": "endianness"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00114e50": {
            "called": [
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001126c0",
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107976"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_with_params_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_with_params_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_bfd_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_with_params_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_with_params_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = get_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_with_params_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_with_params_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_formatted_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_with_params_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_with_params_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_input_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = string_comparison_function_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = string_comparison_function_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_with_params_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_and_check_section_options_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = find_matching_entry_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_matching_entry_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_matching_entry_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_with_params_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_with_params_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_with_params_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_debug_information_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)allocate_and_initialize_data_structure_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = process_debug_info_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_info_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = allocate_and_initialize_data_structure_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_entry_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = process_debug_info_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_info_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_and_create_memory_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_debug_info_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_block_start_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = end_block_debug_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_and_create_memory_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = record_debug_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_line_debug_info_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = handle_debug_end_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_with_params_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_with_params_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_data_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_with_params_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_and_check_section_options_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_match_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_data_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = analyze_binary_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_bfd_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_relocation_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_section_options_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_section_contents_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_with_params_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = string_comparison_function_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_bfd_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_with_params_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_with_params_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_with_params_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = string_comparison_function_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)improved_parse_gnu_build_attributes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_00114e50",
            "entrypoint": "0x00114e50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_001152b6": {
            "called": [
                "FUN_00119ed0",
                "FUN_00107880",
                "dcgettext",
                "FUN_001125fa"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_formatted_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_with_params_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_with_params_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_with_params_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_input_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_bfd_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_function_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_function_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_with_params_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_bfd_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_output_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_matching_entry_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_bfd_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_with_params_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_bfd_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_bfd_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_bfd_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_with_params_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_with_params_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_debug_information_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)allocate_and_initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = allocate_and_initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = process_debug_info_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_and_create_memory_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_info_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_block_start_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debug_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_and_create_memory_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = handle_debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_with_params_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_with_params_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_data_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_with_params_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,check_pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,check_pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_and_check_section_options_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_data_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = analyze_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_bfd_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_section_contents_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_bfd_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_with_params_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_function_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_bfd_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_with_params_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_with_params_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_with_params_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_bfd_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_function_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_bfd_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)improved_parse_gnu_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_bfd_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "current_name": "FUNC_001152b6",
            "entrypoint": "0x001152b6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00115530": {
            "additional_data": {
                "FUN_00115530": {
                    "create_output_section": 5,
                    "process_and_check_section_options": 2,
                    "process_and_create_output_section": 3,
                    "process_binary_function": 1,
                    "process_output_section": 3,
                    "process_section": 6,
                    "process_section_options": 10,
                    "process_sections": 1
                },
                "bVar14": {
                    "append_flag": 1,
                    "bool_flag": 1,
                    "bool_value": 1,
                    "bool_var14": 2,
                    "bool_variable": 1,
                    "condition": 2,
                    "flag": 7,
                    "flag_result": 1,
                    "is_coff": 2,
                    "is_coff_flag": 1,
                    "is_coff_format": 1,
                    "is_coff_output": 1,
                    "is_condition_met": 1,
                    "is_dropped": 1,
                    "is_flag_set": 1,
                    "is_match": 1,
                    "is_matching_entry_found": 1,
                    "is_share_flag_dropped": 1,
                    "temp_bool_var14": 1,
                    "temp_var13": 1,
                    "temp_var14": 1,
                    "variable13": 1
                },
                "cVar4": {
                    "char_var4": 1,
                    "char_variable": 1,
                    "check_result": 1,
                    "flag": 5,
                    "result": 16,
                    "result_char": 1,
                    "return_value": 1,
                    "status": 2,
                    "temp_char_var4": 1,
                    "temp_var4": 1
                },
                "iVar5": {
                    "comparison": 3,
                    "comparison_result": 15,
                    "int_var5": 2,
                    "int_variable": 1,
                    "result": 3,
                    "result_int": 1,
                    "temp_int1": 1,
                    "temp_int_var5": 1,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "variable4": 1
                },
                "lVar1": {
                    "entry": 1,
                    "entry_match": 1,
                    "length": 1,
                    "length1": 2,
                    "length_var1": 2,
                    "matching_entry": 10,
                    "result": 2,
                    "section_data_size": 1,
                    "size": 1,
                    "temp_long": 1,
                    "temp_long1": 1,
                    "temp_long_var1": 1,
                    "temp_var1": 3,
                    "temporary1": 1,
                    "var1": 1,
                    "variable1": 1
                },
                "lVar9": {
                    "entry": 2,
                    "length2": 1,
                    "length_var9": 1,
                    "matching_entry": 12,
                    "matching_entry2": 1,
                    "matching_entry_2": 1,
                    "matching_entry_value": 1,
                    "matching_val_entry": 1,
                    "matching_value": 3,
                    "result_var": 1,
                    "temp_long2": 1,
                    "temp_long_var9": 1,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "temp_var9": 1,
                    "variable8": 1
                },
                "local_30": {
                    "alignment_and_copy_data": 1
                },
                "local_40": {
                    "array1": 1,
                    "local_array40": 1,
                    "local_var3": 1,
                    "local_var40": 2,
                    "new_section_size": 1,
                    "section_data": 3,
                    "section_size": 5,
                    "section_size_array": 1,
                    "section_size_info": 1,
                    "size_alignment_flag": 1,
                    "size_and_alignment": 4,
                    "size_array": 6,
                    "size_info": 1,
                    "temp_array": 1,
                    "temp_long_array_var40": 1,
                    "variable16": 1
                },
                "local_48": {
                    "current_option_with_flag": 1,
                    "current_string": 1,
                    "file_name": 1,
                    "file_symbol": 1,
                    "full_section_name": 1,
                    "local_var2": 1,
                    "local_var48": 2,
                    "local_variable48": 1,
                    "merged_section_name": 1,
                    "modified_section_name": 1,
                    "modified_str": 1,
                    "new_section_name": 1,
                    "original_section_name": 1,
                    "output_section_name": 2,
                    "output_string": 1,
                    "processed_section_name": 2,
                    "processed_string": 1,
                    "section_name": 1,
                    "section_name_copy": 2,
                    "section_name_temp": 1,
                    "string_pointer4": 1,
                    "temp_char_var48": 1,
                    "temp_string1": 1,
                    "updated_section_name": 2,
                    "value4": 1,
                    "variable15": 1
                },
                "local_50": {
                    "error": 1,
                    "error_code": 1,
                    "error_message": 16,
                    "error_message1": 1,
                    "error_message_flag": 1,
                    "error_msg": 1,
                    "error_string": 4,
                    "local_var1": 1,
                    "local_var50": 2,
                    "local_variable50": 1,
                    "temp_long_var50": 1,
                    "variable14": 1
                },
                "param_1": {
                    "arg1": 3,
                    "binary_param": 1,
                    "counter": 1,
                    "input": 1,
                    "input_bfd": 1,
                    "input_file": 6,
                    "input_param": 2,
                    "input_param1": 1,
                    "old_param1": 1,
                    "output_section": 1,
                    "output_section_structure": 1,
                    "param1": 3,
                    "param_1": 2,
                    "parameter_a": 1,
                    "section": 1,
                    "section_list": 1,
                    "section_options": 1,
                    "section_parameter": 1,
                    "section_ptr": 1,
                    "section_size": 1
                },
                "param_2": {
                    "arg2": 3,
                    "arg_list": 1,
                    "args": 1,
                    "arguments": 1,
                    "argv": 4,
                    "command_line_args": 1,
                    "input_args": 1,
                    "input_param2": 1,
                    "input_section": 1,
                    "input_section_structure": 1,
                    "input_string_array": 1,
                    "input_strings": 1,
                    "input_strings_param": 1,
                    "options": 2,
                    "output_params": 1,
                    "param2": 3,
                    "param_names": 1,
                    "parameter_b": 1,
                    "section_args": 1,
                    "section_options": 2,
                    "sections": 1,
                    "string_array_param": 1
                },
                "param_3": {
                    "arg3": 3,
                    "bfd": 3,
                    "binary_size_param": 1,
                    "input_file_structure": 1,
                    "input_param3": 1,
                    "old_param3": 1,
                    "output": 2,
                    "output_bfd": 2,
                    "output_file": 5,
                    "output_format": 1,
                    "output_param": 2,
                    "output_parameter": 1,
                    "output_section": 1,
                    "param3": 3,
                    "param_3": 2,
                    "param_val": 1,
                    "parameter_c": 1
                },
                "pcVar10": {
                    "copied_section_name": 1,
                    "current_option": 1,
                    "current_section": 1,
                    "current_string": 1,
                    "merged_section_name": 1,
                    "new_section": 1,
                    "output_section": 3,
                    "pointer_var10": 2,
                    "pointer_variable10": 1,
                    "section_name": 6,
                    "str1": 1,
                    "str2": 1,
                    "string_pointer1": 1,
                    "temp_char_pointer1": 1,
                    "temp_char_var10": 1,
                    "temp_pointer": 3,
                    "temp_var10": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "value1": 1,
                    "variable9": 1
                },
                "pcVar11": {
                    "entry_name": 1,
                    "file_section_name": 1,
                    "header_value": 1,
                    "matching_entry_data": 1,
                    "matching_entry_value": 1,
                    "matching_section": 1,
                    "matching_string": 1,
                    "matching_value": 2,
                    "pc_var11": 1,
                    "pointer_var11": 2,
                    "pointer_variable11": 1,
                    "section_data": 4,
                    "section_name": 1,
                    "str2": 1,
                    "str3": 1,
                    "string_pointer2": 1,
                    "temp_char_pointer2": 1,
                    "temp_char_ptr2": 1,
                    "temp_char_var11": 1,
                    "temp_pointer2": 1,
                    "temp_pointer_2": 1,
                    "temp_var10": 1,
                    "temp_var11": 1,
                    "temp_var8": 1,
                    "value2": 1,
                    "variable10": 1
                },
                "pcVar12": {
                    "additional_section_data": 1,
                    "concatenated_name": 1,
                    "copy_section_name": 1,
                    "data_offset": 2,
                    "file_name": 1,
                    "file_section_data": 1,
                    "matching_section2": 1,
                    "offset_string": 1,
                    "output_section_names_concat": 1,
                    "pointer_var12": 2,
                    "pointer_variable12": 1,
                    "section_base": 1,
                    "section_data2": 1,
                    "str3": 1,
                    "str4": 1,
                    "str_concatenated": 1,
                    "string_pointer5": 1,
                    "symbol_name": 1,
                    "temp_char_pointer3": 1,
                    "temp_char_ptr3": 1,
                    "temp_char_var12": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_3": 1,
                    "temp_var11": 1,
                    "temp_var12": 1,
                    "temp_var9": 1,
                    "value3": 1,
                    "variable11": 1
                },
                "pcVar2": {
                    "comparison_value": 1,
                    "current_arg": 1,
                    "current_option": 1,
                    "current_section": 1,
                    "file_name": 1,
                    "input_arg": 1,
                    "input_section": 1,
                    "option": 1,
                    "p": 1,
                    "pc_var2": 1,
                    "pointer_var2": 2,
                    "pointer_variable2": 1,
                    "ptr": 1,
                    "section_name": 6,
                    "str1": 1,
                    "temp_char_ptr1": 1,
                    "temp_char_var2": 1,
                    "temp_var2": 3,
                    "temporary2": 1,
                    "var2": 1,
                    "variable2": 1
                },
                "pcVar4": {
                    "section_options_result": 1
                },
                "ppcVar3": {
                    "current_entry": 1,
                    "entry": 2,
                    "entry_array": 1,
                    "entry_ptr": 1,
                    "iterator": 1,
                    "list": 1,
                    "option_list": 3,
                    "pointer_pointer_var3": 2,
                    "pointer_pointer_variable3": 1,
                    "section_entry": 1,
                    "section_list": 1,
                    "section_option": 2,
                    "section_options": 3,
                    "sections": 1,
                    "temp_char_ptr_ptr1": 1,
                    "temp_char_ptr_ptr_var3": 1,
                    "temp_var3": 3,
                    "var3": 1,
                    "variable3": 1
                },
                "sVar7": {
                    "input_section_length": 1,
                    "len1": 1,
                    "len_input": 1,
                    "length1": 9,
                    "length2": 1,
                    "length_a": 1,
                    "length_section_name": 1,
                    "name_length1": 1,
                    "section_name_length": 1,
                    "size1": 2,
                    "size_var1": 1,
                    "size_var7": 2,
                    "size_variable1": 1,
                    "str_len1": 1,
                    "string_length1": 2,
                    "strlen_flag1": 1,
                    "temp_sizet_var7": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "variable6": 1
                },
                "sVar8": {
                    "len2": 1,
                    "len_output": 1,
                    "length2": 9,
                    "length3": 1,
                    "length_b": 1,
                    "length_updated_section_name": 1,
                    "name_length2": 1,
                    "output_section_length": 1,
                    "output_section_name_length": 1,
                    "size2": 2,
                    "size_var2": 1,
                    "size_var8": 2,
                    "size_variable2": 1,
                    "str_len2": 1,
                    "string_length2": 2,
                    "strlen_flag2": 1,
                    "temp_sizet_var8": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "variable7": 1
                },
                "tempVar14": {
                    "temp_var14": 1
                },
                "tempVar15": {
                    "temp_var15": 1
                },
                "uVar13": {
                    "drop_share_flag": 1,
                    "flags": 10,
                    "result_u_int2": 1,
                    "section_flags": 6,
                    "share_flag": 2,
                    "share_flags": 1,
                    "temp_uint_var13": 1,
                    "temp_var12": 1,
                    "temp_var13": 1,
                    "uint_var13": 2,
                    "uint_variable2": 1,
                    "updated_flags": 1,
                    "updated_value": 1,
                    "updated_value_flag": 1,
                    "variable12": 1
                },
                "uVar6": {
                    "bitwise_flag": 1,
                    "filtered_options": 1,
                    "flag": 3,
                    "flags": 1,
                    "mask": 4,
                    "result_u_int": 1,
                    "section_flags": 1,
                    "temp": 1,
                    "temp_uint1": 1,
                    "temp_uint_var6": 1,
                    "temp_var": 3,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "temporary_value": 1,
                    "u_var6": 1,
                    "uint_var6": 2,
                    "uint_variable": 1,
                    "updated_flag": 2,
                    "updated_flags": 1,
                    "updated_section_flags": 1,
                    "variable5": 1
                }
            },
            "called": [
                "FUN_00115f30",
                "bfd_convert_section_setup",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "xmalloc",
                "strcmp",
                "FUN_00114190",
                "strcpy",
                "FUN_001159d0",
                "bfd_set_section_size",
                "strcat",
                "dcgettext",
                "strlen"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_and_check_section_options_00115530(long input_file,char **argv,long output_file)\n\n{\n  long matching_entry;\n  char *section_name;\n  char **temp_var3;\n  char result;\n  int comparison_result;\n  uint mask;\n  size_t length1;\n  size_t length2;\n  long matching_entry;\n  char *section_name;\n  char *section_data;\n  char *pointer_var12;\n  uint flags;\n  bool flag;\n  long error_message;\n  char *processed_section_name;\n  long size_array [2];\n  \n  result = process_and_check_section_options_00115530_001159d0(argv);\n  if (result != '\\0') {\n    return;\n  }\n  section_name = *argv;\n  flags = *(uint *)((long)argv + 0x24);\n  processed_section_name = section_name;\n  temp_var3 = DAT_001278d8;\n  if (*(int *)(*(long *)(input_file + 8) + 8) != *(int *)(*(long *)(output_file + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(input_file + 8) + 0x18) &\n             *(uint *)(*(long *)(output_file + 8) + 0x18);\n  }\n  for (; temp_var3 != (char **)0x0; temp_var3 = (char **)temp_var3[3]) {\n    comparison_result = strcmp(*temp_var3,section_name);\n    if (comparison_result == 0) {\n      if (*(uint *)(temp_var3 + 2) != 0xffffffff) {\n        flags = *(uint *)(temp_var3 + 2);\n      }\n      if (section_name != temp_var3[1]) {\n        processed_section_name = temp_var3[1];\n        flags = drop_share_flag_if_output_not_coff_00115f30(flags,output_file);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (section_name = DAT_001278f8, (*(byte *)((long)argv + 0x24) & 1) != 0)) ||\n     (section_name = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    length1 = strlen(section_name);\n    length2 = strlen(processed_section_name);\n    pointer_var12 = (char *)xmalloc(length1 + 1 + length2);\n    section_name = strcpy(pointer_var12,section_name);\n    processed_section_name = strcat(section_name,processed_section_name);\n  }\n  matching_entry = find_matching_entry_00114190(*argv,0,0x80);\n  flag = false;\n  if (matching_entry == 0) {\n    if ((DAT_00127a2c == 4) && ((flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(input_file + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(argv[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(output_file + 8) + 8) == 5) {\n            flag = (flags & 0x2000000) == 0;\n            mask = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)argv + 0x24) = *(uint *)((long)argv + 0x24) & mask;\n          }\n          else {\n            mask = 0xfdfffefd;\n          }\n          flags = flags & mask;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*argv,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    flags = drop_share_flag_if_output_not_coff_00115f30(flags & 0x104 | *(uint *)(matching_entry + 0x28),output_file,*argv);\n  }\n  result = bfd_convert_section_setup(input_file,argv,output_file,&processed_section_name,size_array);\n  if (result == '\\0') {\n    section_name = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  section_name = (char *)bfd_make_section_anyway_with_flags(output_file,processed_section_name,flags);\n  if (section_name == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      size_array[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(section_name,size_array[0]);\n    if (result == '\\0') {\n      set_size_and_alignment_00108072();\n      return;\n    }\n  }\n  else {\n    size_array[0] = ((((long)DAT_00127a1c - 1U) + size_array[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(section_name);\n    if (result == '\\0') {\n      set_size_and_alignment_00108072();\n      return;\n    }\n  }\n  error_message = 0;\n  pointer_var12 = argv[6];\n  matching_entry = find_matching_entry_00114190(*argv,0,0x18);\n  if (matching_entry == 0) {\n    section_name[0x28] = section_name[0x28] | 1;\n    section_data = *argv;\n    pointer_var12 = pointer_var12 + _DAT_00127990;\n    *(char **)(section_name + 0x30) = pointer_var12;\n    *(char **)(section_name + 0x38) = pointer_var12;\n    pointer_var12 = argv[7];\n    matching_entry = find_matching_entry_00114190(section_data,0,0x60);\n    if (matching_entry == 0) goto LAB_00115695;\nLAB_00115860:\n    section_data = *(char **)(matching_entry + 0x20);\n    if ((*(byte *)(matching_entry + 0x14) & 0x40) != 0) {\n      section_data = section_data + (long)pointer_var12;\n    }\n    *(char **)(section_name + 0x38) = section_data;\n    matching_entry = find_matching_entry_00114190(*argv,0,0x200);\n    if (matching_entry != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)argv + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(section_name + 0xb4) = *(undefined4 *)((long)argv + 0xb4);\n    section_name[0x28] = section_name[0x28] & 0xcfU | *(byte *)(argv + 5) & 0x30;\n    argv[0xc] = section_name;\n    argv[0xb] = (char *)0x0;\n    if ((*(byte *)((long)argv + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(output_file + 8) + 0x158))(input_file,argv,output_file,section_name);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    section_data = *(char **)(matching_entry + 0x18);\n    if ((*(byte *)(matching_entry + 0x14) & 8) == 0) {\n      section_data = section_data + (long)pointer_var12;\n    }\n    section_name[0x28] = section_name[0x28] | 1;\n    section_name = *argv;\n    *(char **)(section_name + 0x30) = section_data;\n    *(char **)(section_name + 0x38) = section_data;\n    pointer_var12 = argv[7];\n    matching_entry = find_matching_entry_00114190(section_name,0,0x60);\n    if (matching_entry != 0) goto LAB_00115860;\nLAB_00115695:\n    section_data = *argv;\n    *(char **)(section_name + 0x38) = pointer_var12 + _DAT_00127990;\n    matching_entry = find_matching_entry_00114190(section_data,0,0x200);\n    if (matching_entry == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(matching_entry + 0x2c);\n    if (0x3e < flags) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(section_name + 0x7c) = flags;\n    *(undefined4 *)(section_name + 0xb4) = *(undefined4 *)((long)argv + 0xb4);\n    section_name[0x28] = section_name[0x28] & 0xcfU | *(byte *)(argv + 5) & 0x30;\n    argv[0xc] = section_name;\n    argv[0xb] = (char *)0x0;\n    if ((*(byte *)((long)argv + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    pointer_var12 = argv[0x1a];\n    matching_entry = find_matching_value_00115d00(pointer_var12,argv[0x1c]);\n    if ((matching_entry == 0) ||\n       (matching_entry = *(long *)(input_file + 8), *(uint *)(matching_entry + 0x18) = *(uint *)(matching_entry + 0x18) | 0x20,\n       *(int *)(matching_entry + 8) != 5)) goto LAB_00115700;\n    *(long *)(pointer_var12 + 0xb0) = matching_entry;\n    result = (**(code **)(*(long *)(output_file + 8) + 0x158))(input_file,argv,output_file,section_name);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (flag) {\n    *(undefined4 *)(*(long *)(section_name + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  print_bfd_error_message_001126c0(0,output_file,section_name,error_message);\n  return;\n}\n\n",
            "current_name": "process_and_check_section_options_00115530",
            "entrypoint": "0x00115530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115530": "process_and_check_section_options_00115530",
                "bVar14": "flag",
                "cVar4": "result",
                "iVar5": "comparison_result",
                "lVar1": "matching_entry",
                "lVar9": "matching_entry",
                "local_40": "size_array",
                "local_48": "processed_section_name",
                "local_50": "error_message",
                "param_1": "input_file",
                "param_2": "argv",
                "param_3": "output_file",
                "pcVar10": "section_name",
                "pcVar11": "section_data",
                "pcVar12": "pointer_var12",
                "pcVar2": "section_name",
                "ppcVar3": "temp_var3",
                "sVar7": "length1",
                "sVar8": "length2",
                "uVar13": "flags",
                "uVar6": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115970": {
            "additional_data": {
                "FUN_00115970": {
                    "copy_and_delete_file": 11,
                    "copy_and_modify_file": 1,
                    "copy_and_print_error": 3,
                    "copy_and_print_error_message": 1,
                    "copy_and_print_error_with_params": 1,
                    "copy_and_print_file": 1,
                    "copy_and_remove_file": 2,
                    "copy_and_rename_file": 2,
                    "copy_and_replace_file": 1,
                    "copy_and_set_file_properties": 1,
                    "copy_and_set_mod_time": 1,
                    "copy_and_set_modification_time": 1,
                    "copy_and_unlink_file": 1,
                    "copy_and_update_file": 1,
                    "copy_file_and_print_error": 1,
                    "copy_file_with_mod_time": 1,
                    "improved_copy_file_with_time": 1
                },
                "auVar6": {
                    "result": 13,
                    "result_variable": 1,
                    "return_data": 1,
                    "return_struct": 1,
                    "return_val": 1,
                    "return_value": 12,
                    "return_value_struct": 2
                },
                "copy_file_data_00115a90": {
                    "copy_file_data": 1
                },
                "param_1": {
                    "old_file_path": 2,
                    "original_file_path": 2,
                    "source_file": 3,
                    "source_file_path": 17,
                    "source_filename": 1,
                    "source_path": 6
                },
                "param_2": {
                    "dest_file_path": 2,
                    "destination_file": 3,
                    "destination_file_path": 15,
                    "destination_filename": 1,
                    "destination_path": 6,
                    "new_file_path": 4
                },
                "param_3": {
                    "buffer_size": 4,
                    "copy_buffer_size": 1,
                    "file_descriptor": 1,
                    "file_mode": 1,
                    "file_permission": 4,
                    "file_permissions": 16,
                    "flags": 1,
                    "permission_flags": 1,
                    "permissions": 1
                },
                "param_4": {
                    "buffer_size": 1,
                    "file_attributes": 1,
                    "file_descriptor": 1,
                    "file_owner": 1,
                    "file_permissions": 1,
                    "file_size": 24,
                    "file_timestamp": 1,
                    "total_size": 1
                },
                "param_5": {
                    "copy_mod_time_flag": 1,
                    "copy_modification_time": 1,
                    "modify_file": 1,
                    "modify_time_flag": 4,
                    "preserve_time": 1,
                    "preserve_timestamp": 1,
                    "set_mod_time": 2,
                    "set_mod_time_flag": 1,
                    "set_modification_time": 11,
                    "set_mtime": 1,
                    "set_timestamp": 1,
                    "should_set_modification_time": 5,
                    "update_modification_time": 1
                },
                "param_6": {
                    "additional_info": 1,
                    "custom_param": 1,
                    "error_code": 8,
                    "error_message_ptr": 1,
                    "old_file_size": 1,
                    "original_file_size": 1,
                    "result": 7,
                    "result_code": 1,
                    "result_size": 1,
                    "return_address": 2,
                    "return_value": 6,
                    "return_variable": 1
                },
                "pcVar3": {
                    "err_msg": 1,
                    "errno_message": 1,
                    "error_message": 17,
                    "error_string": 12
                },
                "piVar2": {
                    "errno_location": 10,
                    "errno_location_ptr": 3,
                    "errno_pointer": 4,
                    "errno_ptr": 3,
                    "error": 1,
                    "error_location": 3,
                    "error_number": 3,
                    "error_number_pointer": 1,
                    "error_number_ptr": 2,
                    "error_pointer": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message_with_params": 1
                },
                "set_file_modification_time_0011a350": {
                    "set_file_modification_time": 1
                },
                "uVar1": {
                    "copy_result": 27,
                    "copy_status": 2,
                    "result": 1
                },
                "uVar4": {
                    "error_message": 12,
                    "error_message_ptr": 1,
                    "localized_error_message": 6,
                    "translated_err_msg": 1,
                    "translated_error": 3,
                    "translated_error_message": 7,
                    "translated_message": 1
                },
                "uVar5": {
                    "bytes_copied": 7,
                    "copied_size": 1,
                    "copy_bytes": 1,
                    "copy_file_size": 1,
                    "copy_size": 15,
                    "file_copy_bytes": 1,
                    "num_bytes_copied": 2,
                    "num_copied": 1,
                    "unlink_result": 1
                },
                "unlink": {
                    "delete_file": 1
                }
            },
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nundefined  [16]\ncopy_and_delete_file_00115970(char *source_file_path,char *destination_file_path,undefined4 file_permissions,undefined8 file_size,char set_modification_time,\n            undefined8 error_code)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_message;\n  ulong copy_size;\n  undefined result [16];\n  \n  if (destination_file_path == source_file_path) {\n    copy_size = 0;\n  }\n  else {\n    copy_result = copy_file_data(file_permissions,destination_file_path,file_size);\n    copy_size = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_with_params(error_message,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  if (set_modification_time != '\\0') {\n    set_file_modification_time(destination_file_path,file_size);\n  }\n  result._8_8_ = error_code;\n  result._0_8_ = copy_size;\n  return result;\n}\n\n",
            "current_name": "copy_and_delete_file_00115970",
            "entrypoint": "0x00115970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "auVar6": "result",
                "copy_file_data_00115a90": "copy_file_data",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "file_permissions",
                "param_4": "file_size",
                "param_5": "set_modification_time",
                "param_6": "error_code",
                "pcVar3": "error_message",
                "piVar2": "errno_location",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "set_file_modification_time_0011a350": "set_file_modification_time",
                "uVar1": "copy_result",
                "uVar4": "error_message",
                "uVar5": "copy_size",
                "unlink": "delete_file"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001159d0": {
            "additional_data": {
                "DAT_001279f8": {
                    "pattern2": 1
                },
                "DAT_00127a08": {
                    "pattern1": 1
                },
                "DAT_00127a2c": {
                    "constant1": 1
                },
                "FUN_001159d0": {
                    "process_and_check_section_options": 2,
                    "process_binary_section": 2,
                    "process_section": 10,
                    "process_section_options": 15,
                    "process_section_with_options": 1,
                    "process_sections": 1
                },
                "FUN_00115b70": {
                    "check_section_options": 1
                },
                "cVar2": {
                    "check_result": 1,
                    "is_match": 3,
                    "is_pattern_matched": 1,
                    "match_check_result": 1,
                    "match_flag": 1,
                    "match_result": 7,
                    "pattern_match": 4,
                    "pattern_match_result": 11,
                    "result": 2
                },
                "check_pattern_match_00115d70": {
                    "check_pattern_match": 5,
                    "is_pattern_match": 1
                },
                "find_matching_value_00115d00": {
                    "find_matching_value": 5
                },
                "lVar4": {
                    "matching_address": 4,
                    "matching_offset": 1,
                    "matching_value": 11,
                    "matching_value_address": 5,
                    "matching_value_pointer": 1,
                    "matching_value_result": 1,
                    "value": 2,
                    "value_address": 4,
                    "value_ptr": 2
                },
                "lVar5": {
                    "current_address": 8,
                    "current_offset": 1,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "current_value": 11,
                    "current_value_address": 3,
                    "current_value_ptr": 1,
                    "next_address": 1,
                    "next_value": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "input_value": 1,
                    "param": 1,
                    "section": 3,
                    "section_address": 14,
                    "section_data": 1,
                    "section_options": 2,
                    "section_param": 1,
                    "section_pointer": 6,
                    "section_ptr": 2
                },
                "process_section_options_00115b70": {
                    "check_section_options": 1,
                    "process_options": 1,
                    "process_section_options": 2,
                    "process_section_options_1": 1
                },
                "uVar1": {
                    "matched_value": 1,
                    "matching_value": 19,
                    "result1": 1,
                    "return_value": 1,
                    "value": 9
                },
                "uVar3": {
                    "option_result": 1,
                    "result": 14,
                    "return_value": 7,
                    "section_options": 1,
                    "section_options_result": 4,
                    "section_process_result": 1,
                    "status": 3
                }
            },
            "called": [
                "FUN_00115d00",
                "FUN_00115b70",
                "FUN_00115d70"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_00115f50"
            ],
            "code": "\nundefined4 process_and_check_section_options_001159d0(long section_address)\n\n{\n  undefined8 matching_value;\n  char pattern_match_result;\n  undefined4 result;\n  long matching_value;\n  long current_value;\n  \n  result = process_section_options();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return result;\n    }\n    matching_value = find_matching_value(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((matching_value != 0) &&\n       (((matching_value = *(undefined8 *)(matching_value + 8), DAT_00127a2c != 7 ||\n         (pattern_match_result = check_pattern_match(matching_value,DAT_00127a08), pattern_match_result != '\\0')) &&\n        (pattern_match_result = check_pattern_match(matching_value,DAT_001279f8), pattern_match_result == '\\0')))) {\n      matching_value = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_value = matching_value;\n      do {\n        if (current_value == 0) {\n          return 1;\n        }\n        pattern_match_result = process_section_options(current_value);\n        if (pattern_match_result == '\\0') {\n          return result;\n        }\n        current_value = *(long *)(*(long *)(current_value + 0xd0) + 0xc0);\n      } while (matching_value != current_value);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "process_and_check_section_options_001159d0",
            "entrypoint": "0x001159d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001159d0": "process_and_check_section_options_001159d0",
                "cVar2": "pattern_match_result",
                "check_pattern_match_00115d70": "check_pattern_match",
                "find_matching_value_00115d00": "find_matching_value",
                "lVar4": "matching_value",
                "lVar5": "current_value",
                "param_1": "section_address",
                "process_section_options_00115b70": "process_section_options",
                "uVar1": "matching_value",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115a90": {
            "additional_data": {
                "FUN_00115a90": {
                    "copy_and_write_file": 1,
                    "copy_file": 17,
                    "copy_file_contents": 2,
                    "copy_file_data": 4,
                    "copy_file_to_destination": 1,
                    "copy_file_to_new_location": 1,
                    "copy_to_another_file": 1,
                    "read_and_write_file": 1,
                    "read_write_file": 2,
                    "transfer_data": 1
                },
                "_Var3": {
                    "current_file_position": 2,
                    "current_offset": 2,
                    "current_position": 2,
                    "current_seek_position": 1,
                    "file_offset": 6,
                    "seek_position": 1,
                    "seek_result": 8,
                    "source_file_offset": 3,
                    "source_file_pointer": 1,
                    "source_file_position": 3,
                    "source_file_size": 1,
                    "src_file_position": 1
                },
                "__fd": {
                    "dest_fd": 1,
                    "dest_file_descriptor": 4,
                    "destination_descriptor": 1,
                    "destination_fd": 2,
                    "destination_file_descriptor": 20,
                    "fd_dst": 1,
                    "new_file_descriptor": 1,
                    "output_file_descriptor": 1
                },
                "iVar1": {
                    "errno": 1,
                    "errno_copy": 1,
                    "errno_value": 5,
                    "error": 1,
                    "error_code": 1,
                    "error_number": 1,
                    "file_errno": 1,
                    "original_err_num": 1,
                    "original_errno": 8,
                    "original_errno_value": 3,
                    "original_error": 3,
                    "original_error_code": 3,
                    "saved_error_code": 1
                },
                "iVar2": {
                    "bytes_read": 6,
                    "current_errno": 4,
                    "current_error": 1,
                    "err_num_on_close": 1,
                    "errno_value": 1,
                    "error_code": 1,
                    "error_number_temp": 1,
                    "fd_value": 1,
                    "last_error": 1,
                    "num_bytes_read": 2,
                    "read_bytes": 1,
                    "read_result": 7
                },
                "local_2038": {
                    "buffer": 30
                },
                "param_1": {
                    "fd_src": 1,
                    "file_descriptor": 4,
                    "source_fd": 3,
                    "source_file": 3,
                    "source_file_descriptor": 19,
                    "src_file_descriptor": 1
                },
                "param_2": {
                    "dest_file": 1,
                    "dest_file_path": 1,
                    "destination_file": 2,
                    "destination_file_name": 4,
                    "destination_file_path": 15,
                    "destination_path": 3,
                    "file_path": 3,
                    "filename_dst": 1,
                    "source_file_path": 1
                },
                "param_3": {
                    "destination_file_path": 1,
                    "file_attributes": 1,
                    "file_info": 2,
                    "file_metadata": 1,
                    "file_metadata_address": 2,
                    "file_permission": 1,
                    "file_permissions": 1,
                    "file_stat": 4,
                    "file_stat_address": 1,
                    "file_stat_buffer": 1,
                    "metadata_pointer": 1,
                    "metadata_ptr": 1,
                    "mode_structure_pointer": 1,
                    "permission_info": 2,
                    "permission_info_address": 1,
                    "permission_pointer": 1,
                    "permission_ptr": 1,
                    "permissions": 2,
                    "permissions_pointer": 1,
                    "permissions_struct_pointer": 1,
                    "source_file_metadata": 1,
                    "source_file_stat": 2,
                    "stat_buffer_address": 1
                },
                "piVar6": {
                    "err_num": 1,
                    "errno_location": 5,
                    "errno_pointer": 8,
                    "errno_ptr": 5,
                    "error_code": 2,
                    "error_location": 5,
                    "error_location_pointer": 2,
                    "error_location_ptr": 1,
                    "error_pointer": 2
                },
                "sVar5": {
                    "bytes_copied": 1,
                    "bytes_written": 22,
                    "num_bytes_written": 1,
                    "write_result": 6,
                    "write_size": 1
                },
                "uVar4": {
                    "bytes_copied": 6,
                    "bytes_read": 12,
                    "bytes_written": 1,
                    "error_status": 1,
                    "read_result": 5,
                    "return_status": 1,
                    "return_value": 2,
                    "status_code": 1,
                    "total_bytes_copied": 1,
                    "write_result": 1
                }
            },
            "called": [
                "__errno_location",
                "FUN_00108237",
                "lseek",
                "fchmod",
                "read",
                "open",
                "close",
                "write"
            ],
            "calling": [
                "FUN_00115970"
            ],
            "code": "\nulong copy_file_data_00115a90(int source_file_descriptor,char *destination_file_path,long file_stat)\n\n{\n  int original_errno;\n  int destination_file_descriptor;\n  int read_result;\n  __off_t seek_result;\n  ulong bytes_read;\n  size_t bytes_written;\n  int *errno_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < source_file_descriptor) && (seek_result = lseek(source_file_descriptor,0,0), seek_result == 0)) {\n    destination_file_descriptor = open(destination_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      bytes_read = close_file_and_return_error_status_00108237();\n      return bytes_read;\n    }\n    do {\n      bytes_read = read(source_file_descriptor,buffer,0x2000);\n      read_result = (int)bytes_read;\n      if (read_result < 1) {\n        errno_pointer = __errno_location();\n        original_errno = *errno_pointer;\n        fchmod(destination_file_descriptor,*(__mode_t *)(file_stat + 0x18));\n        close(source_file_descriptor);\n        close(destination_file_descriptor);\n        if (read_result != 0) {\n          *errno_pointer = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_read & 0xffffffff;\n      }\n      bytes_written = write(destination_file_descriptor,buffer,(long)read_result);\n    } while (bytes_written == (long)read_result);\n    errno_pointer = __errno_location();\n    read_result = *errno_pointer;\n    close(source_file_descriptor);\n    close(destination_file_descriptor);\n    *errno_pointer = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "copy_file_data_00115a90",
            "entrypoint": "0x00115a90",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115a90": "copy_file_data_00115a90",
                "_Var3": "seek_result",
                "__fd": "destination_file_descriptor",
                "iVar1": "original_errno",
                "iVar2": "read_result",
                "local_2038": "buffer",
                "param_1": "source_file_descriptor",
                "param_2": "destination_file_path",
                "param_3": "file_stat",
                "piVar6": "errno_pointer",
                "sVar5": "bytes_written",
                "uVar4": "bytes_read"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115b70": {
            "additional_data": {
                "DAT_001278b8": {
                    "flag1": 1
                },
                "DAT_00127980": {
                    "flag4": 1
                },
                "DAT_001279b8": {
                    "section_list2": 1
                },
                "DAT_00127a19": {
                    "flag2": 1
                },
                "DAT_00127a28": {
                    "flag3": 1
                },
                "DAT_00127a2c": {
                    "section_index": 1
                },
                "FUN_00115b70": {
                    "check_section_options": 9,
                    "find_matching_entry": 1,
                    "find_matching_section": 5,
                    "find_matching_section_index": 1,
                    "find_section_conflicts": 1,
                    "find_section_match": 1,
                    "process_entries": 1,
                    "process_entry": 1,
                    "process_section": 8,
                    "process_section_options": 1,
                    "section_matching_check": 1,
                    "validate_section": 1
                },
                "check_string_length_00113ede": {
                    "check_string_length": 2
                },
                "dcgettext": {
                    "get_localized_message": 1,
                    "get_translated_string": 1
                },
                "iVar2": {
                    "comparison_result": 17,
                    "comparison_result1": 1,
                    "entry_comparison_result": 1,
                    "result": 2,
                    "section_comparison": 1,
                    "section_comparison_result": 2,
                    "section_name_comparison": 1,
                    "str_cmp_result": 1,
                    "strcmp_result": 3,
                    "string_comparison": 1,
                    "string_comparison_result": 1
                },
                "iVar3": {
                    "comparison_result2": 1,
                    "entry_type": 1,
                    "option": 2,
                    "section_conflict_type": 1,
                    "section_count": 1,
                    "section_flag": 1,
                    "section_number": 1,
                    "section_option": 3,
                    "section_type": 18,
                    "section_type_index": 1,
                    "section_value": 1
                },
                "invert_and_return_length_001082b3": {
                    "invert_and_return_length": 2
                },
                "lVar4": {
                    "matching_entry": 7,
                    "matching_entry1": 12,
                    "matching_entry_0x4": 1,
                    "matching_entry_1": 7,
                    "matching_entry_index": 1,
                    "matching_remove": 1,
                    "matching_remove_section": 1,
                    "section_match_remove": 1
                },
                "lVar5": {
                    "matching_copy": 1,
                    "matching_copy_section": 1,
                    "matching_entry2": 14,
                    "matching_entry_0x2": 1,
                    "matching_entry_2": 8,
                    "matching_entry_copy": 1,
                    "matching_entry_index_2": 1,
                    "other_matching_entry": 2,
                    "second_matching_entry": 1,
                    "section_match_copy": 1
                },
                "param_1": {
                    "entries": 2,
                    "entry": 1,
                    "section": 3,
                    "section_list": 2,
                    "section_name": 7,
                    "section_names": 12,
                    "sections": 3
                },
                "pcVar1": {
                    "current_entry": 2,
                    "current_section": 18,
                    "current_section_name": 5,
                    "section": 1,
                    "section_name": 5
                },
                "plVar7": {
                    "current_entry": 1,
                    "entry": 1,
                    "entry_list": 1,
                    "entry_pointer": 5,
                    "entry_ptr": 1,
                    "head_node": 1,
                    "linked_list": 1,
                    "linked_list_ptr": 1,
                    "list_iterator": 1,
                    "list_pointer": 2,
                    "section": 1,
                    "section_entries": 1,
                    "section_entry_pointer": 1,
                    "section_list": 11,
                    "section_list_ptr": 1,
                    "section_type_list": 1
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_message_and_exit": 2
                },
                "process_data_0010829e": {
                    "process_data": 2
                },
                "strcmp": {
                    "compare_strings": 2
                },
                "uVar6": {
                    "error": 2,
                    "error_code": 1,
                    "error_message": 8,
                    "result": 16,
                    "return_value": 4
                }
            },
            "called": [
                "FUN_0010829e",
                "FUN_00114190",
                "FUN_00119dd0",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "calling": [
                "FUN_001159d0"
            ],
            "code": "\nundefined8 process_section_options_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long matching_entry1;\n  long matching_entry2;\n  undefined8 result;\n  long *section_list;\n  \n  matching_entry1 = find_matching_entry_00114190(*section_names,0,4);\n  if (matching_entry1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      matching_entry1 = find_matching_entry_00114190(*section_names,0,1);\n      matching_entry2 = find_matching_entry_00114190(*section_names,0,2);\n      if (matching_entry1 != 0) {\n        if (matching_entry2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_message_and_exit(result,current_section);\n        }\n        if (matching_entry1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          section_list = DAT_001279b8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_message_and_exit(result,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (matching_entry2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a2c;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = process_data();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = check_string_length(section_names);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = invert_and_return_length();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_section_options_00115b70",
            "entrypoint": "0x00115b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115b70": "process_section_options_00115b70",
                "check_string_length_00113ede": "check_string_length",
                "dcgettext": "get_localized_message",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "invert_and_return_length_001082b3": "invert_and_return_length",
                "lVar4": "matching_entry1",
                "lVar5": "matching_entry2",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "plVar7": "section_list",
                "print_error_message_and_exit_00119dd0": "print_error_message_and_exit",
                "process_data_0010829e": "process_data",
                "strcmp": "compare_strings",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d00": {
            "additional_data": {
                "DAT_001278b0": {
                    "data_array": 1,
                    "value_array": 1
                },
                "FUN_00115d00": {
                    "find_corresponding_value": 1,
                    "find_data": 1,
                    "find_element": 1,
                    "find_element_in_array": 1,
                    "find_matching_index": 1,
                    "find_matching_value": 9,
                    "find_value": 3,
                    "find_value_based_on_conditions": 1,
                    "get_data": 1,
                    "get_data_by_conditions": 1,
                    "get_matching_data": 1,
                    "get_matching_value": 3,
                    "get_relevant_value": 1,
                    "get_reversed_value": 1,
                    "get_valid_address": 1,
                    "retrieve_data": 3,
                    "retrieve_value": 1
                },
                "lVar2": {
                    "corresponding_value": 1,
                    "element_value": 1,
                    "matching_data": 1,
                    "matching_value": 8,
                    "result": 18,
                    "return_value": 1,
                    "reversed_value": 1
                },
                "param_1": {
                    "address1": 1,
                    "array": 1,
                    "array_start": 1,
                    "condition_data": 1,
                    "data_list": 1,
                    "data_ptr": 2,
                    "first_array": 1,
                    "input_1": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 13,
                    "input_value1": 1,
                    "value1": 1,
                    "value_list": 1,
                    "value_to_find": 1
                },
                "param_2": {
                    "address2": 1,
                    "binary_data": 3,
                    "binary_info": 1,
                    "context": 1,
                    "context_ptr": 1,
                    "data": 1,
                    "data_object": 1,
                    "data_param": 3,
                    "data_struct": 3,
                    "data_structure": 9,
                    "data_structure_pointer": 1,
                    "input_2": 1,
                    "input_value2": 1,
                    "second_array": 1,
                    "struct": 1,
                    "struct_ptr": 1,
                    "value2": 1
                },
                "uVar1": {
                    "array_length": 1,
                    "comparison_value": 1,
                    "count": 6,
                    "counter": 2,
                    "desired_value": 1,
                    "division_result": 1,
                    "element_index": 1,
                    "length": 2,
                    "limit": 1,
                    "matching_index": 1,
                    "num_conditions": 1,
                    "num_iterations": 1,
                    "num_values": 1,
                    "required_value": 1,
                    "size": 1,
                    "target_value_count": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "threshold": 2,
                    "value": 2
                }
            },
            "called": [
                "FUN_001082c3"
            ],
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "code": "\nlong find_matching_value_00115d00(long input_value,long data_structure)\n\n{\n  uint count;\n  long result;\n  \n  result = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(data_structure + 8) + 8) == 5) {\n      if (*(int *)(input_value + 0x28) == *(int *)(*(long *)(data_structure + 0x110) + 0xd40)) {\n        count = *(uint *)(input_value + 0x2c);\n        if (count == 0) {\n          result = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(data_structure + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(data_structure + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278b0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "find_matching_value_00115d00",
            "entrypoint": "0x00115d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "lVar2": "result",
                "param_1": "input_value",
                "param_2": "data_structure",
                "uVar1": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115d70": {
            "additional_data": {
                "FUN_00115d70": {
                    "check_and_traverse": 1,
                    "check_htab_entry": 1,
                    "check_match": 2,
                    "check_pattern": 10,
                    "check_pattern_exists": 1,
                    "check_pattern_match": 3,
                    "check_value_in_table": 1,
                    "find_match_or_traverse": 1,
                    "find_or_traverse": 5,
                    "find_pattern": 2,
                    "find_pattern_in_hash_table": 1,
                    "find_pattern_match": 2,
                    "pattern_match": 1
                },
                "lVar1": {
                    "entry_value": 1,
                    "found_value": 2,
                    "htab_result": 1,
                    "lookup_result": 3,
                    "pattern_found": 3,
                    "pattern_result": 1,
                    "result": 14,
                    "search_value": 1,
                    "value": 1
                },
                "local_10": {
                    "found": 2,
                    "has_match": 1,
                    "is_found": 1,
                    "is_match": 8,
                    "is_matched": 2,
                    "is_pattern_found": 2,
                    "is_pattern_match": 1,
                    "is_pattern_matched": 1,
                    "is_value_found": 1,
                    "match_found": 1,
                    "pattern_exists": 1,
                    "pattern_found": 1,
                    "pattern_match_result": 1,
                    "pattern_matched": 1,
                    "result": 7
                },
                "local_18": {
                    "current_element": 1,
                    "current_input": 1,
                    "current_item": 1,
                    "current_key": 1,
                    "current_pattern": 2,
                    "current_value": 3,
                    "found_value": 1,
                    "input_ptr": 1,
                    "item": 1,
                    "match_data": 1,
                    "matched_value": 1,
                    "matching_item": 1,
                    "param_copy": 1,
                    "pattern": 6,
                    "pattern_found": 1,
                    "pattern_to_check": 1,
                    "search_element": 1,
                    "search_key": 1,
                    "search_result": 1,
                    "temp_value": 1,
                    "traverse_arg": 1,
                    "traverse_data": 1,
                    "traverse_input": 1
                },
                "param_1": {
                    "data": 1,
                    "element": 1,
                    "entry_key": 1,
                    "input": 6,
                    "input1": 1,
                    "input_1": 1,
                    "input_data": 3,
                    "input_key": 1,
                    "input_param": 3,
                    "input_pattern": 2,
                    "input_value": 2,
                    "key": 1,
                    "pattern": 3,
                    "search_value": 1,
                    "target": 1,
                    "target_value": 1,
                    "value": 1,
                    "value_to_check": 1
                },
                "param_2": {
                    "data_structure": 1,
                    "hash_table": 10,
                    "hashtable": 3,
                    "htab": 1,
                    "input2": 1,
                    "input_2": 1,
                    "lookup_table": 1,
                    "pattern_table": 4,
                    "table": 8,
                    "table_param": 1
                }
            },
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "code": "\nundefined check_pattern_match_00115d70(undefined8 input,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 pattern;\n  undefined is_match;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(hash_table,input);\n    is_match = result != 0;\n  }\n  else {\n    is_match = 0;\n    pattern = input;\n    htab_traverse(hash_table,check_pattern_match_00115d70_0011a170,&pattern);\n  }\n  return is_match;\n}\n\n",
            "current_name": "check_pattern_match_00115d70",
            "entrypoint": "0x00115d70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115d70": "check_pattern_match_00115d70",
                "lVar1": "result",
                "local_10": "is_match",
                "local_18": "pattern",
                "param_1": "input",
                "param_2": "hash_table"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115dc0": {
            "additional_data": {
                "DAT_001278b0": {
                    "config": 1,
                    "constant3": 1,
                    "constant4": 1,
                    "reloc_option1": 1,
                    "reloc_type_array": 1,
                    "reloc_value": 1,
                    "variable3": 1
                },
                "DAT_00127a08": {
                    "constant3": 1,
                    "constant4": 1,
                    "pattern": 3,
                    "variable4": 1
                },
                "DAT_00127a20": {
                    "constant2": 4,
                    "constant_value2": 1,
                    "error_flag": 2,
                    "variable2": 1
                },
                "DAT_00127a2c": {
                    "constant1": 4,
                    "constant_value1": 1,
                    "section_count": 1,
                    "section_value": 1,
                    "variable1": 1
                },
                "DCGETTEXT": {
                    "gettext": 1
                },
                "FUN_00115dc0": {
                    "check_and_call_function": 1,
                    "check_section_options": 1,
                    "find_and_process_relocations": 1,
                    "process_binary": 5,
                    "process_binary_data": 3,
                    "process_binary_function": 3,
                    "process_binary_section": 2,
                    "process_section_options": 11,
                    "relocate_entries": 1,
                    "section_options_validator": 1,
                    "validate_section_options": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jmp_table": 4,
                    "jmp_table_func": 1,
                    "jmp_table_function": 1,
                    "jump_table": 14,
                    "jumptable": 7,
                    "jumptable_func": 2,
                    "jumptable_function": 2
                },
                "bfd_alloc": {
                    "alloc_memory": 1,
                    "allocate_bfd": 1,
                    "allocate_memory": 2,
                    "bfd_alloc": 1
                },
                "bfd_canonicalize_reloc": {
                    "bfd_canonicalize_reloc": 1,
                    "canonicalize_reloc": 5
                },
                "bfd_get_error": {
                    "get_bfd_error": 1
                },
                "bfd_get_reloc_upper_bound": {
                    "get_reloc_upper_bound": 7
                },
                "cVar1": {
                    "invalid_options": 1,
                    "is_section_options_valid": 4,
                    "is_valid": 6,
                    "is_valid_options": 2,
                    "is_valid_section": 2,
                    "is_valid_section_options": 13,
                    "section_options_valid": 1,
                    "valid_options": 1,
                    "valid_section_options": 1
                },
                "check_if_section_options_are_valid_00115f50": {
                    "check_if_options_valid": 1,
                    "check_section_options": 3,
                    "check_section_options_validity": 2,
                    "is_section_options_valid": 1
                },
                "check_pattern_match_00115d70": {
                    "check_pattern_match": 6,
                    "is_pattern_match": 1
                },
                "dcgettext": {
                    "dc_get_text": 1,
                    "get_error_message": 1,
                    "get_message": 1,
                    "gettext": 1
                },
                "find_matching_entry_00114190": {
                    "find_matching_entry": 7
                },
                "iVar2": {
                    "bfd_error": 4,
                    "bfd_error_code": 1,
                    "error": 14,
                    "error_check": 1,
                    "error_code": 8,
                    "error_count": 1,
                    "error_value": 2
                },
                "lVar4": {
                    "entry": 1,
                    "entry_match": 2,
                    "match": 1,
                    "matching_entry": 26,
                    "reloc_size": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument_1": 1,
                    "bfd": 1,
                    "binary_file": 2,
                    "binary_handle": 3,
                    "binary_param": 1,
                    "file_handle": 2,
                    "input_param": 1,
                    "option1": 1,
                    "param": 1,
                    "param1": 12,
                    "param_1": 2,
                    "param_a": 1,
                    "parameter1": 1,
                    "section_options": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arguments": 1,
                    "arguments_array": 1,
                    "binary_options": 1,
                    "input_array": 1,
                    "option2_array": 1,
                    "options": 3,
                    "options_array": 1,
                    "param2": 11,
                    "param2_arr": 1,
                    "param_b": 1,
                    "param_list": 1,
                    "parameter2": 1,
                    "params": 1,
                    "params_array": 1,
                    "section_options": 4
                },
                "param_3": {
                    "arg3": 1,
                    "binary_data_size": 1,
                    "binary_size": 1,
                    "context": 2,
                    "data_offset": 1,
                    "input_length": 1,
                    "length": 1,
                    "param": 1,
                    "param3": 13,
                    "param_3": 2,
                    "param_c": 1,
                    "param_length": 1,
                    "param_size": 3,
                    "parameter3": 1,
                    "section_data": 1
                },
                "pointerToJumpTable": {
                    "ptr_unrecovered_jump_table_address": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 6,
                    "print_error_message": 1
                },
                "print_error_message_0011a110": {
                    "print_error_message": 7
                },
                "puVar5": {
                    "reloc_array": 9,
                    "reloc_buffer": 2,
                    "reloc_entries": 6,
                    "reloc_entries_array": 1,
                    "reloc_ptr": 1,
                    "reloc_table": 6,
                    "relocation_data": 1,
                    "relocation_table": 2,
                    "relocations": 1,
                    "relocs": 2
                },
                "puVar7": {
                    "cur_reloc": 1,
                    "current_reloc": 1,
                    "current_reloc_entry": 2,
                    "current_relocation": 1,
                    "dest_array": 1,
                    "dest_reloc_table": 1,
                    "dst_ptr": 1,
                    "filtered_array": 1,
                    "filtered_buffer": 1,
                    "filtered_reloc_table": 1,
                    "filtered_table": 1,
                    "matching_entries_array": 1,
                    "new_reloc_array": 1,
                    "new_reloc_entries": 2,
                    "next_reloc_entry": 1,
                    "output_entries": 1,
                    "processed_relocs": 1,
                    "ptr1": 2,
                    "pu_var7": 1,
                    "reloc_array_ptr": 1,
                    "reloc_result": 1,
                    "reloc_table_iter": 1,
                    "relocated_data_ptr": 1,
                    "result_array": 1,
                    "source_buffer": 1,
                    "table_iterator": 1,
                    "temp_ptr1": 1,
                    "valid_relocations": 1
                },
                "puVar8": {
                    "cur_reloc": 1,
                    "current_entry": 2,
                    "current_ptr": 1,
                    "current_reloc_entry": 1,
                    "dest_ptr": 1,
                    "dest_reloc_table_entry": 1,
                    "destination_buffer": 1,
                    "filtered_array_index": 1,
                    "new_reloc_array_ptr": 1,
                    "new_reloc_table_iter": 1,
                    "new_result": 1,
                    "next_filtered_entry": 1,
                    "next_reloc": 3,
                    "next_reloc_entry": 2,
                    "next_reloc_result": 1,
                    "next_relocated_data_ptr": 1,
                    "next_relocation": 1,
                    "output_entry": 1,
                    "ptr2": 2,
                    "pu_var8": 1,
                    "reloc_array_ptr_next": 1,
                    "reloc_entry": 1,
                    "table_iterator_next": 1,
                    "temp_ptr2": 1,
                    "updated_reloc_entries": 1,
                    "valid_relocations_end": 1
                },
                "uStack_38": {
                    "error_stack_variable": 1,
                    "stack": 1,
                    "stack_val": 1,
                    "stack_value": 1,
                    "stack_var": 11,
                    "stack_variable": 5,
                    "temp_stack": 1,
                    "temp_stack_var": 1,
                    "temp_var": 1,
                    "u_stack_38": 1,
                    "unknown_value": 2,
                    "unused": 1,
                    "unused_stack": 1,
                    "unused_stack_var": 2,
                    "unused_variable": 1
                },
                "uVar3": {
                    "bfd_error_message": 1,
                    "error_string": 1,
                    "reloc_count": 4,
                    "reloc_entry": 1,
                    "reloc_error": 3,
                    "reloc_info": 1,
                    "reloc_param": 1,
                    "reloc_size": 1,
                    "reloc_type": 1,
                    "reloc_upper_bound": 4,
                    "reloc_val": 1,
                    "reloc_value": 1,
                    "relocation": 1,
                    "relocation_count": 2,
                    "relocation_result": 1,
                    "result": 6,
                    "section_size": 1
                },
                "uVar6": {
                    "count": 2,
                    "num_relocs": 1,
                    "reloc_count": 23,
                    "reloc_count_canonicalized": 1,
                    "relocation_count": 3,
                    "relocation_size": 1
                },
                "uVar9": {
                    "count": 1,
                    "counter": 4,
                    "current_index": 2,
                    "index": 7,
                    "iter": 3,
                    "iter_counter": 1,
                    "iteration": 1,
                    "iterator": 2,
                    "loop_count": 1,
                    "loop_counter": 5,
                    "loop_index": 3,
                    "u_var9": 1
                },
                "xexit": {
                    "exit": 4,
                    "exit_program": 2,
                    "x_exit": 1
                }
            },
            "called": [
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "FUN_00114190",
                "FUN_001082df",
                "xexit",
                "FUN_001126c0",
                "bfd_get_reloc_upper_bound",
                "FUN_0011a110",
                "dcgettext",
                "bfd_get_error",
                "FUN_00115f50"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_section_options_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char is_valid_section_options;\n  int error;\n  undefined8 result;\n  long matching_entry;\n  undefined8 *reloc_array;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *current_reloc_entry;\n  undefined8 *next_reloc;\n  ulong index;\n  undefined8 stack_var;\n  \n  is_valid_section_options = check_section_options(param1,param2,0);\n  if (is_valid_section_options != '\\0') {\n    return;\n  }\n  result = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (matching_entry = find_matching_entry(*param2,0,0x100), matching_entry == 0)) {\n    matching_entry = bfd_get_reloc_upper_bound(param1,param2);\n    if (matching_entry < 0) {\n      if ((matching_entry != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a20 = 1;\n        result = 0;\nLAB_00108315:\n        print_bfd_error_message(0,param1,param2,result,stack_var);\n        return;\n      }\n    }\n    else if (matching_entry != 0) {\n      reloc_array = (undefined8 *)param2[0xe];\n      if (reloc_array == (undefined8 *)0x0) {\n        reloc_array = (undefined8 *)bfd_alloc(param3);\n        if (reloc_array == (undefined8 *)0x0) {\n          print_error_message(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(param1,param2,reloc_array,DAT_001278b0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a20 = 1;\n          result = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        current_reloc_entry = reloc_array;\n        for (index = 0; index != reloc_count; index = index + 1) {\n          next_reloc = current_reloc_entry;\n          if (((*(long **)reloc_array[index] != (long *)0x0) &&\n              (matching_entry = **(long **)reloc_array[index], matching_entry != 0)) &&\n             (is_valid_section_options = check_pattern_match(*(undefined8 *)(matching_entry + 8),DAT_00127a08), is_valid_section_options != '\\0')) {\n            next_reloc = current_reloc_entry + 1;\n            *current_reloc_entry = reloc_array[index];\n          }\n          current_reloc_entry = next_reloc;\n        }\n        *current_reloc_entry = 0;\n        reloc_count = (long)current_reloc_entry - (long)reloc_array >> 3;\n      }\n      jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_array = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_array = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(param3,result,reloc_array,reloc_count);\n  return;\n}\n\n",
            "current_name": "process_section_options_00115dc0",
            "entrypoint": "0x00115dc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115dc0": "process_section_options_00115dc0",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bfd_alloc": "allocate_memory",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_error": "get_bfd_error",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "cVar1": "is_valid_section_options",
                "check_if_section_options_are_valid_00115f50": "check_section_options",
                "check_pattern_match_00115d70": "check_pattern_match",
                "dcgettext": "dc_get_text",
                "find_matching_entry_00114190": "find_matching_entry",
                "iVar2": "error",
                "lVar4": "matching_entry",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "print_bfd_error_message_001126c0": "print_bfd_error_message",
                "print_error_message_0011a110": "print_error_message",
                "puVar5": "reloc_array",
                "puVar7": "current_reloc_entry",
                "puVar8": "next_reloc",
                "uStack_38": "stack_var",
                "uVar3": "result",
                "uVar6": "reloc_count",
                "uVar9": "index",
                "xexit": "exit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f30": {
            "additional_data": {
                "FUN_00115f30": {
                    "drop_share_flag": 2,
                    "drop_share_flag_if_needed": 2,
                    "drop_share_flag_if_not_coff": 18,
                    "drop_share_flag_if_not_coff_format": 1,
                    "drop_share_flag_if_not_coff_output": 1,
                    "drop_share_flag_if_output_not_coff": 1,
                    "extract_share_flag": 1,
                    "remove_share_flag": 1,
                    "remove_share_flag_if_not_coff": 3,
                    "remove_share_flag_if_not_coff_format": 1
                },
                "param_1": {
                    "flag": 2,
                    "flags": 21,
                    "input_flag": 3,
                    "input_flags": 4
                },
                "param_2": {
                    "arguments": 1,
                    "input_params": 2,
                    "param_array": 1,
                    "parameters": 9,
                    "params": 16,
                    "params_array": 1
                },
                "param_3": {
                    "format": 3,
                    "message": 1,
                    "output": 3,
                    "output_format": 22,
                    "output_param": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message_with_params": 2
                },
                "uVar1": {
                    "first_input_param": 1,
                    "first_param": 10,
                    "first_param_array_element": 1,
                    "param1_copy": 1,
                    "param1_value": 2,
                    "param_1_copy": 1,
                    "ptr": 1,
                    "share_flag": 1,
                    "u_variable1": 1,
                    "value": 4,
                    "value1": 4,
                    "var1": 4
                },
                "uVar2": {
                    "err_msg": 1,
                    "error_message": 12,
                    "error_msg": 4,
                    "error_string": 2,
                    "error_text": 1,
                    "localized_message": 1,
                    "message": 2,
                    "u_variable2": 1,
                    "value2": 3,
                    "var2": 4
                }
            },
            "called": [
                "FUN_00108375"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "code": "\nuint drop_share_flag_if_output_not_coff_00115f30(uint flags,undefined8 *params,undefined8 output_format)\n\n{\n  undefined8 first_param;\n  undefined8 error_message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    first_param = *params;\n    flags = flags & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_with_params(error_message,first_param,output_format);\n  }\n  return flags;\n}\n\n",
            "current_name": "drop_share_flag_if_output_not_coff_00115f30",
            "entrypoint": "0x00115f30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_output_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "params",
                "param_3": "output_format",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "uVar1": "first_param",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00115f50": {
            "additional_data": {
                "DAT_001278ec": {
                    "condition2": 1,
                    "data_flag2": 1,
                    "flag2": 2,
                    "flag_b": 1,
                    "is_flag_enabled": 1,
                    "is_section_ignored": 1,
                    "some_flag": 1
                },
                "DAT_001279b8": {
                    "ignored_sections": 1,
                    "linked_data_list": 1,
                    "linked_options_ptr": 1,
                    "option_linked_list": 1,
                    "option_name": 1,
                    "section_list": 2,
                    "section_list_ptr": 1
                },
                "DAT_00127a00": {
                    "build_attribute_flag": 1,
                    "condition3": 1,
                    "data_flag3": 1,
                    "flag3": 2,
                    "flag_c": 1,
                    "is_build_attribute_section_ignored": 1,
                    "is_flag_set": 1
                },
                "DAT_00127a20": {
                    "condition1": 1,
                    "data_flag1": 1,
                    "flag1": 2,
                    "flag_a": 1,
                    "global_option_flag": 1,
                    "is_option_enabled": 1,
                    "is_option_set": 1
                },
                "FUN_00115f50": {
                    "check_if_section_options_are_valid": 1,
                    "check_if_section_options_valid": 1,
                    "check_option_validity": 1,
                    "check_section_options": 25,
                    "process_section": 1,
                    "process_section_options": 1,
                    "validate_section_options": 1
                },
                "__S1": {
                    "current_section": 1
                },
                "__s1": {
                    "command": 1,
                    "current_arg": 1,
                    "current_arg_value": 1,
                    "current_argument": 4,
                    "current_name": 1,
                    "current_option": 5,
                    "current_section": 2,
                    "current_string": 5,
                    "file_path": 1,
                    "filename": 1,
                    "section_argument": 1,
                    "section_name": 5,
                    "string1": 1
                },
                "_s1": {
                    "current_section_name": 1
                },
                "auVar4": {
                    "check_result": 1,
                    "compare_result": 1,
                    "comparison_result": 3,
                    "comparison_result_array": 3,
                    "comparison_result_data": 1,
                    "comparison_result_wrapper": 1,
                    "comparison_results": 1,
                    "process_result": 5,
                    "result": 4,
                    "result_array": 6,
                    "temp_container": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_var": 2
                },
                "extraout_EDX": {
                    "extra_output": 1,
                    "extra_output_edx": 1,
                    "unused": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "entry_address": 1,
                    "file_offset": 1,
                    "file_size": 3,
                    "option_counter": 1,
                    "section_address": 9,
                    "section_array": 1,
                    "section_handle": 1,
                    "section_info": 2,
                    "section_length": 1,
                    "section_long": 1,
                    "section_options": 4,
                    "section_pointer": 3,
                    "section_size": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arguments": 6,
                    "arguments_array": 1,
                    "argv": 1,
                    "command_line_args": 1,
                    "command_line_arguments": 1,
                    "file_paths": 1,
                    "options": 2,
                    "section_arguments": 1,
                    "section_char_array": 1,
                    "section_content": 1,
                    "section_names": 4,
                    "section_options": 5,
                    "section_strings": 4,
                    "strings": 1
                },
                "param_3": {
                    "arg3": 1,
                    "character": 1,
                    "check_attributes": 1,
                    "check_flag": 1,
                    "flag": 14,
                    "is_build_attribute": 2,
                    "is_build_section": 1,
                    "is_flag_set": 4,
                    "is_option_enabled": 1,
                    "is_section_empty": 1,
                    "is_section_enabled": 1,
                    "is_section_valid": 1,
                    "section_char": 1,
                    "section_flag": 1
                },
                "plVar3": {
                    "argument_list": 1,
                    "attribute_list": 1,
                    "current_node": 1,
                    "current_section": 5,
                    "linked_list": 2,
                    "linked_options": 1,
                    "list_pointer": 3,
                    "option_list": 3,
                    "pointer_array": 1,
                    "ptr": 1,
                    "ptr_list": 1,
                    "section_array_pointer": 1,
                    "section_list": 6,
                    "section_option": 1,
                    "section_options": 2,
                    "section_pointer": 1
                },
                "process_and_check_section_options_001159d0": {
                    "process_and_check_options": 2,
                    "process_and_check_section_options": 4,
                    "process_section_options": 1
                },
                "string_comparison_function_00113fb0": {
                    "compare_string": 1,
                    "compare_strings": 1,
                    "str_comparison_function": 1,
                    "string_comparison_function": 4
                },
                "uVar1": {
                    "comparison_result": 17,
                    "name_comparison": 1,
                    "name_comparison_res": 1,
                    "result": 2,
                    "strcmp_result": 4,
                    "string_comparison_result": 6
                },
                "uVar2": {
                    "additional_value": 1,
                    "attribute_type": 1,
                    "comparison_result": 3,
                    "condition_result": 1,
                    "extra": 1,
                    "extra_out": 1,
                    "extra_output": 1,
                    "extra_result": 1,
                    "extra_value": 8,
                    "extra_var": 1,
                    "extra_variable": 1,
                    "func_ret_val": 1,
                    "option_count": 1,
                    "option_flag": 1,
                    "result": 4,
                    "result_code": 1,
                    "section_attributes": 1,
                    "section_option": 1,
                    "temp_result": 1
                }
            },
            "called": [
                "FUN_00113fb0",
                "FUN_001159d0",
                "strcmp"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "code": "\nuint check_if_section_options_are_valid_00115f50(long section_address,char **arguments,char flag)\n\n{\n  char *section_name;\n  uint comparison_result;\n  undefined4 extra_value;\n  undefined4 extra_output_edx;\n  long *section_list;\n  undefined result_array [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  result_array = process_and_check_section_options(arguments);\n  if (result_array[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      section_name = *arguments;\n      section_list = DAT_001279b8;\n      do {\n        comparison_result = strcmp(section_name,(char *)section_list[1]);\n        result_array._4_4_ = 0;\n        result_array._0_4_ = comparison_result;\n        result_array._8_4_ = extra_output_edx;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        section_list = (long *)*section_list;\n      } while (section_list != (long *)0x0);\n    }\n    extra_value = result_array._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (result_array._8_4_ = extra_value, result_array._0_8_ = *(long *)(section_address + 8),\n         *(int *)(*(long *)(section_address + 8) + 8) != 5)) ||\n        ((result_array._0_8_ = (ulong)arguments[0x1a], *(int *)(arguments[0x1a] + 4) != 7 ||\n         (result_array = string_comparison_function(*arguments,\".gnu.build.attributes\"), result_array[0] == '\\0')))) &&\n       ((*(byte *)((long)arguments + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(result_array._1_7_,arguments[8] == (char *)0x0) |\n             CONCAT31(result_array._9_3_,arguments[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_if_section_options_are_valid_00115f50",
            "entrypoint": "0x00115f50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00115f50": "check_if_section_options_are_valid_00115f50",
                "__s1": "section_name",
                "_s1": "current_section_name",
                "auVar4": "result_array",
                "extraout_EDX": "extra_output_edx",
                "param_1": "section_address",
                "param_2": "arguments",
                "param_3": "flag",
                "plVar3": "section_list",
                "process_and_check_section_options_001159d0": "process_and_check_section_options",
                "string_comparison_function_00113fb0": "string_comparison_function",
                "uVar1": "comparison_result",
                "uVar2": "extra_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116030": {
            "additional_data": {
                "FUN_00116030": {
                    "analyze_relocation": 1,
                    "process_bfd_reloc": 1,
                    "process_binary": 1,
                    "process_reloc": 2,
                    "process_reloc_data": 4,
                    "process_reloc_section": 1,
                    "process_reloc_table": 2,
                    "process_relocation": 11,
                    "process_relocs": 3,
                    "relocate_and_clear_flags": 1,
                    "rewrite_function": 1,
                    "sanitize_bfd_relocation": 1,
                    "update_relocation_flags": 1,
                    "update_relocations": 1
                },
                "__ptr": {
                    "reloc_buffer": 14,
                    "reloc_data": 7,
                    "reloc_data_ptr": 1,
                    "reloc_entries": 1,
                    "reloc_list": 1,
                    "reloc_ptr": 5,
                    "relocated_ptr": 1,
                    "relocation_buffer": 1
                },
                "extraout_RAX": {
                    "exit_status": 2,
                    "extra_result": 3,
                    "extra_return_value": 1,
                    "result": 1,
                    "return_val": 1,
                    "return_value": 7,
                    "updated_return_value": 1
                },
                "iVar5": {
                    "bfd_error": 4,
                    "bfd_error_code": 1,
                    "err_code": 1,
                    "error": 5,
                    "error_code": 19
                },
                "in_RAX": {
                    "result": 18,
                    "return_value": 11
                },
                "lVar1": {
                    "upper_bound": 2
                },
                "lVar2": {
                    "current_reloc": 1,
                    "current_value": 3,
                    "data_value": 1,
                    "entry_addr": 1,
                    "ptr_value": 1,
                    "reloc": 1,
                    "reloc_addr": 1,
                    "reloc_address": 3,
                    "reloc_entry": 3,
                    "reloc_entry_value": 1,
                    "reloc_offset": 4,
                    "reloc_offset2": 1,
                    "reloc_value": 3,
                    "relocation": 2,
                    "relocation_value": 1,
                    "temp1": 1,
                    "tmp_value": 1,
                    "value": 2
                },
                "lVar3": {
                    "arch_symbol1": 1,
                    "buffer1": 1,
                    "constant1": 4,
                    "constant_1": 1,
                    "dat_00128568": 1,
                    "data1": 1,
                    "data_section_address": 1,
                    "default_reloc_value": 1,
                    "first_dat_value": 1,
                    "first_data_address": 1,
                    "free_addr": 1,
                    "l_var3": 1,
                    "lvalue_1": 1,
                    "magic_number1": 1,
                    "offset_lvar3": 1,
                    "reloc_addr1": 1,
                    "reloc_addr_1": 1,
                    "reloc_entry1": 1,
                    "reloc_section_start": 1,
                    "reloc_start": 1,
                    "reloc_value1": 1,
                    "relocation_condition1": 1,
                    "special_value_1": 1,
                    "start_offset": 1,
                    "str_table": 1,
                    "temp2": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "lVar4": {
                    "arch_symbol2": 1,
                    "buffer2": 1,
                    "constant2": 4,
                    "constant_2": 1,
                    "dat_00128680": 1,
                    "data2": 1,
                    "end_offset": 1,
                    "fwrite_addr": 1,
                    "fwrite_func": 1,
                    "l_var4": 1,
                    "lvalue_2": 1,
                    "magic_number2": 1,
                    "offset_lvar4": 1,
                    "reloc_addr2": 1,
                    "reloc_addr_2": 1,
                    "reloc_end": 1,
                    "reloc_entry2": 1,
                    "reloc_value2": 1,
                    "relocation_condition2": 1,
                    "second_dat_value": 1,
                    "second_data_address": 1,
                    "secondary_reloc_value": 1,
                    "special_value_2": 1,
                    "temp3": 1,
                    "text_section_address": 1,
                    "value2": 1,
                    "value_2": 1,
                    "write": 1
                },
                "lVar6": {
                    "bfd_get_reloc_upper_bound_result": 1,
                    "bfd_reloc_upper_bound": 1,
                    "file_write_function": 1,
                    "fwrite": 2,
                    "fwrite_addr": 2,
                    "fwrite_address": 2,
                    "fwrite_func": 4,
                    "fwrite_value": 2,
                    "reloc_bound": 1,
                    "reloc_count": 3,
                    "reloc_size": 1,
                    "reloc_upper_bound": 4,
                    "relocation_count": 1,
                    "relocation_size": 1,
                    "upper_bound": 5
                },
                "lVar7": {
                    "bfd_canonicalize_reloc_result": 1,
                    "canonicalized_count": 5,
                    "canonicalized_reloc": 1,
                    "num_reloc_entries": 1,
                    "num_relocs": 8,
                    "reloc_count": 11,
                    "reloc_result": 2,
                    "relocated_size": 1,
                    "retval": 1
                },
                "lVar8": {
                    "count": 1,
                    "counter": 2,
                    "current_reloc_entry": 1,
                    "i": 5,
                    "index": 8,
                    "iterator": 1,
                    "loop_counter": 2,
                    "loop_index": 2,
                    "rel_index": 1,
                    "reloc_index": 8
                },
                "param_1": {
                    "args": 1,
                    "arguments": 4,
                    "command": 1,
                    "config": 1,
                    "config_file": 1,
                    "config_params": 1,
                    "data": 1,
                    "file_parameters": 1,
                    "file_path": 4,
                    "file_paths": 2,
                    "function_name": 1,
                    "function_parameters": 1,
                    "input_file": 1,
                    "input_files": 1,
                    "input_params": 1,
                    "input_strings": 1,
                    "options": 1,
                    "param": 1,
                    "param_array": 1,
                    "param_list": 1,
                    "parameters": 1,
                    "params": 2,
                    "section_header": 1
                },
                "param_2": {
                    "bfd_handle": 2,
                    "binary_address": 1,
                    "binary_offset": 1,
                    "count": 1,
                    "data": 3,
                    "data_address": 1,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "file_count": 1,
                    "file_descriptor": 1,
                    "file_header": 1,
                    "file_info": 1,
                    "file_offset": 1,
                    "file_size": 1,
                    "header": 1,
                    "length": 2,
                    "num_files": 1,
                    "offset": 1,
                    "param2": 1,
                    "param_address": 1,
                    "param_size": 1,
                    "reloc_offset": 3,
                    "reloc_table_addr": 1,
                    "size": 2
                },
                "plVar1": {
                    "current_ptr": 1,
                    "current_reloc": 2,
                    "current_reloc_entry": 1,
                    "pointer": 2,
                    "ptr_list": 1,
                    "ptr_to_data": 1,
                    "reloc_address": 1,
                    "reloc_entry": 4,
                    "reloc_entry_pointer": 1,
                    "reloc_list": 1,
                    "reloc_ptr": 1,
                    "relocation_ptr": 1,
                    "tmp_ptr": 1
                },
                "uStack_28": {
                    "default_return": 2,
                    "default_return_val": 1,
                    "default_return_value": 2,
                    "empty_result": 1,
                    "error_value": 1,
                    "initial_result": 1,
                    "result": 1,
                    "return_value": 4,
                    "return_value_2": 1,
                    "returned_value": 1,
                    "stack_result": 1,
                    "stack_value": 2,
                    "stack_var": 3,
                    "stack_variable": 3,
                    "temp_variable": 1,
                    "u_stack_28": 1
                }
            },
            "called": [
                "bfd_canonicalize_reloc",
                "fwrite",
                "xexit",
                "free",
                "FUN_001083b7",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "FUN_0011a110"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\n\n\nundefined8 process_relocation_00116030(undefined8 *arguments,long reloc_offset)\n\n{\n  long *reloc_entry;\n  long reloc_offset;\n  long constant1;\n  long constant2;\n  int error_code;\n  undefined8 result;\n  long upper_bound;\n  void *reloc_buffer;\n  long reloc_count;\n  undefined8 return_value;\n  long reloc_index;\n  undefined8 return_value;\n  \n  if (*(long *)(reloc_offset + 0x60) == 0) {\n    return result;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_message_0011a110(*arguments);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(arguments,reloc_offset,reloc_buffer);\n    constant2 = _DAT_00128680;\n    constant1 = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (reloc_count < 0) {\n      print_error_message_0011a110(*arguments);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_offset = *reloc_entry, reloc_offset != 0)) && (reloc_offset != upper_bound)) &&\n           ((reloc_offset != constant2 && (reloc_offset != constant1)))) {\n          *(uint *)(reloc_offset + 0x18) = *(uint *)(reloc_offset + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (reloc_count != reloc_index);\n    }\n    free(reloc_buffer);\n    return return_value;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_relocation_00116030",
            "entrypoint": "0x00116030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116030": "process_relocation_00116030",
                "__ptr": "reloc_buffer",
                "extraout_RAX": "return_value",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar1": "upper_bound",
                "lVar2": "reloc_offset",
                "lVar3": "constant1",
                "lVar4": "constant2",
                "lVar6": "upper_bound",
                "lVar7": "reloc_count",
                "lVar8": "reloc_index",
                "param_1": "arguments",
                "param_2": "reloc_offset",
                "plVar1": "reloc_entry",
                "uStack_28": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116110": {
            "additional_data": {
                "FUN_00116110": {
                    "process_binary_section": 1,
                    "process_section": 13,
                    "process_section_contents": 2,
                    "reverse_and_print_section": 1,
                    "reverse_binary_section": 1,
                    "reverse_bytes_in_section": 1,
                    "reverse_section": 2,
                    "reverse_section_contents": 8,
                    "update_section_contents": 1,
                    "validate_and_reverse_section": 1
                },
                "__ptr": {
                    "allocated_memory": 6,
                    "buffer": 15,
                    "buffer_ptr": 1,
                    "data_buffer": 2,
                    "new_section_contents": 1,
                    "section_contents": 2,
                    "section_contents_ptr": 1,
                    "section_data": 1,
                    "section_data_pointer": 1,
                    "temp_pointer": 1
                },
                "bVar20": {
                    "": 1,
                    "boolean_var": 1,
                    "boolean_variable": 1,
                    "byte_flag": 1,
                    "check_passed": 1,
                    "flag": 9,
                    "is_aligned": 1,
                    "is_divisible_by2": 1,
                    "is_even_divisible": 1,
                    "is_multiple": 1,
                    "is_odd": 1,
                    "is_odd_size": 4,
                    "temp_byte": 1,
                    "temp_flag": 3,
                    "use_extra_buffer": 1,
                    "zero": 1,
                    "zero_byte": 2
                },
                "cVar6": {
                    "check_result": 3,
                    "is_section_valid": 1,
                    "is_valid": 11,
                    "is_valid_entry": 1,
                    "is_valid_section": 9,
                    "result": 4,
                    "section_validity_check": 1,
                    "validity_check": 1
                },
                "iVar10": {
                    "": 1,
                    "alignment_factor": 1,
                    "byte_count": 3,
                    "counter_limit": 1,
                    "divide_by2": 1,
                    "divider": 2,
                    "divisible_factor": 1,
                    "division_factor": 1,
                    "division_result": 1,
                    "division_var": 1,
                    "divisor": 3,
                    "loop_counter": 1,
                    "loop_counter2": 1,
                    "loop_counter3": 1,
                    "loop_counter_3": 1,
                    "loop_index2": 1,
                    "loop_size": 1,
                    "loop_size2": 1,
                    "loop_var2": 1,
                    "loop_variable3": 1,
                    "num_bytes": 1,
                    "num_iterations": 1,
                    "section_size": 1,
                    "temp9": 1,
                    "temp_var7": 1
                },
                "iVar4": {
                    "": 1,
                    "byte_count1": 1,
                    "byte_index": 1,
                    "byte_var1": 1,
                    "half_size": 2,
                    "i_var1": 1,
                    "i_var4": 1,
                    "index1": 1,
                    "loop_counter_1": 2,
                    "loop_index1": 1,
                    "lower_bound": 2,
                    "num1": 1,
                    "num_bytes": 1,
                    "num_entries": 1,
                    "num_iterations": 2,
                    "start_index": 4,
                    "start_offset": 2,
                    "temp4": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "var1": 1,
                    "variable4": 1
                },
                "iVar5": {
                    "": 1,
                    "byte_count2": 1,
                    "byte_var2": 1,
                    "chunk_size": 1,
                    "end_index": 4,
                    "end_offset": 2,
                    "entry_index": 1,
                    "i_var2": 1,
                    "i_var5": 1,
                    "index2": 1,
                    "loop_counter_2": 2,
                    "loop_index2": 1,
                    "num2": 1,
                    "offset": 1,
                    "remainder": 1,
                    "reverse_bytes": 1,
                    "section_index2": 1,
                    "section_size": 1,
                    "temp5": 1,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "upper_bound": 2,
                    "var2": 1,
                    "variable5": 1
                },
                "lVar13": {
                    "end_index": 1,
                    "entry_index": 1,
                    "length": 1,
                    "loop_counter_4": 1,
                    "matching_entry": 7,
                    "matching_entry_index": 1,
                    "matching_entry_offset": 1,
                    "matching_index": 1,
                    "num_bytes_remaining": 1,
                    "remainder": 1,
                    "remaining_bytes": 4,
                    "remaining_length": 3,
                    "remaining_size": 5,
                    "temp11": 1,
                    "temp_length": 1,
                    "temp_var9": 1
                },
                "lVar3": {
                    "index": 1,
                    "length": 1,
                    "section_address": 1,
                    "section_header": 1,
                    "section_header_offset": 1,
                    "section_header_size": 1,
                    "section_index": 12,
                    "section_offset": 5,
                    "section_size": 5,
                    "temp3": 1,
                    "temp_var2": 1,
                    "temp_var3": 1
                },
                "lVar8": {
                    "": 1,
                    "buffer_index": 1,
                    "buffer_offset": 1,
                    "byte_index": 2,
                    "copy_index": 1,
                    "count": 2,
                    "counter": 4,
                    "idx": 1,
                    "index": 1,
                    "inner_index": 1,
                    "inner_loop_counter": 2,
                    "iteration": 1,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "loop_index1": 1,
                    "loop_iterator": 1,
                    "loop_variable": 1,
                    "loop_variable1": 1,
                    "partial_section_size": 1,
                    "remaining_size": 1,
                    "subloop_index": 1,
                    "temp7": 1,
                    "temp_var5": 1
                },
                "local_30": {
                    "full_section_data": 1,
                    "local_section_contents": 1,
                    "section_content": 9,
                    "section_content_variable": 1,
                    "section_contents": 13,
                    "section_data": 4,
                    "temp_buffer": 1,
                    "temp_pointer5": 1
                },
                "local_38": {
                    "buffer_size": 1,
                    "section_length": 5,
                    "section_size": 21,
                    "section_size2": 1,
                    "section_size_bytes": 1,
                    "section_size_variable": 1,
                    "temp_size": 1
                },
                "param_1": {
                    "bfd": 1,
                    "bfd_file": 1,
                    "bfd_handle": 2,
                    "bfd_in": 1,
                    "binary": 5,
                    "binary_file": 2,
                    "binary_handle": 1,
                    "input_bfd": 1,
                    "input_binary": 4,
                    "input_file": 7,
                    "input_section": 2,
                    "original_binary": 1,
                    "param1": 1,
                    "source": 1,
                    "source_file": 1
                },
                "param_2": {
                    "param2": 1,
                    "section": 1,
                    "section_data": 4,
                    "section_header": 4,
                    "section_headers": 4,
                    "section_info": 6,
                    "section_options": 10,
                    "section_properties": 1
                },
                "param_3": {
                    "bfd_out": 1,
                    "destination": 1,
                    "destination_file": 1,
                    "output_bfd": 7,
                    "output_binary": 5,
                    "output_file": 7,
                    "output_section": 8,
                    "param3": 1
                },
                "puVar12": {
                    "": 1,
                    "byte1": 1,
                    "byte_pointer": 3,
                    "byte_ptr": 3,
                    "pointer": 1,
                    "pointer_variable": 1,
                    "ptr": 2,
                    "ptr1": 1,
                    "ptr_to_byte": 1,
                    "temp_pointer": 8,
                    "temp_pointer_2": 1,
                    "temp_ptr": 8
                },
                "puVar14": {
                    "": 1,
                    "adjusted_ptr": 1,
                    "aligned_buffer": 1,
                    "aligned_pointer": 1,
                    "aligned_ptr": 2,
                    "buffer_end": 1,
                    "buffer_ptr": 3,
                    "byte4": 1,
                    "byte_pointer2": 1,
                    "chunk_pointer": 1,
                    "end_ptr": 1,
                    "initialized_ptr": 1,
                    "pointer_var1": 1,
                    "ptr1": 5,
                    "ptr2": 2,
                    "ptr_start": 1,
                    "ptr_to_buffer": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 2,
                    "temp_pointer_3": 1,
                    "temp_ptr2": 2
                },
                "puVar15": {
                    "": 1,
                    "adjusted_ptr_2": 1,
                    "buffer_ptr": 1,
                    "buffer_ptr2": 1,
                    "byte2": 1,
                    "byte_pointer3": 1,
                    "current_ptr": 1,
                    "final_buffer_ptr": 1,
                    "final_ptr": 1,
                    "iterator": 1,
                    "last_chunk_pointer": 1,
                    "pointer_var2": 1,
                    "progress_ptr": 2,
                    "ptr2": 5,
                    "ptr3": 2,
                    "ptr_end": 1,
                    "temp_buffer": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 2,
                    "temp_pointer_2": 1,
                    "temp_pointer_4": 1,
                    "temp_ptr": 1,
                    "temp_ptr3": 2
                },
                "pvVar16": {
                    "": 1,
                    "copy_ptr": 1,
                    "current_pointer": 1,
                    "dest_ptr": 1,
                    "destination_ptr": 1,
                    "new_section_content": 1,
                    "output_buffer": 2,
                    "output_pointer": 1,
                    "pointer2": 1,
                    "pointer_var3": 1,
                    "ptr": 1,
                    "ptr3": 2,
                    "ptr4": 2,
                    "ptr_tmp": 1,
                    "ptr_var": 1,
                    "section_content": 1,
                    "section_contents": 1,
                    "section_ptr": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_pointer4": 2,
                    "temp_pointer_2": 1,
                    "temp_pointer_3": 1,
                    "temp_pointer_5": 1,
                    "temp_ptr2": 2,
                    "temp_ptr4": 1
                },
                "uVar1": {
                    "": 1,
                    "current_byte": 1,
                    "temp": 6,
                    "temp1": 5,
                    "temp_byte": 6,
                    "temp_char": 1,
                    "temp_var": 3,
                    "temp_var1": 6,
                    "temp_variable1": 1
                },
                "uVar11": {
                    "": 1,
                    "byte_index": 1,
                    "byte_offset": 1,
                    "copy_index3": 1,
                    "current_index": 1,
                    "entry_offset": 1,
                    "loop_counter": 1,
                    "loop_counter3": 1,
                    "loop_counter4": 1,
                    "loop_end_var": 1,
                    "loop_index2": 1,
                    "loop_iterator_4": 1,
                    "loop_var3": 1,
                    "loop_variable4": 1,
                    "offset": 5,
                    "position": 2,
                    "source_offset": 1,
                    "starting_index": 1,
                    "swap_offset": 1,
                    "temp10": 1,
                    "temp_offset": 2,
                    "temp_offset1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var8": 1
                },
                "uVar17": {
                    "": 1,
                    "buffer_idx": 1,
                    "byte_index": 1,
                    "byte_offset": 1,
                    "byte_offset_2": 1,
                    "loop_counter5": 1,
                    "loop_index3": 1,
                    "loop_temp_var": 1,
                    "offset2": 1,
                    "reverse_index": 1,
                    "section_iterator": 1,
                    "source_index": 1,
                    "temp12": 1,
                    "temp3": 2,
                    "temp_index": 1,
                    "temp_offset": 5,
                    "temp_offset2": 2,
                    "temp_offset_2": 1,
                    "temp_size": 1,
                    "temp_var10": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_variable3": 1
                },
                "uVar18": {
                    "alignment": 4,
                    "block_size": 3,
                    "byte_length": 1,
                    "byte_size": 3,
                    "divider": 1,
                    "divisible": 1,
                    "divisible_size": 1,
                    "division_factor": 3,
                    "division_var2": 1,
                    "divisor": 4,
                    "divisor2": 1,
                    "element_size": 1,
                    "entry_length": 1,
                    "section_alignment_size": 1,
                    "section_size": 1,
                    "temp13": 1,
                    "temp_var11": 1,
                    "temp_variable4": 1,
                    "unit_size": 1
                },
                "uVar19": {
                    "": 1,
                    "byte_offset_3": 1,
                    "copy_start": 1,
                    "current_index": 1,
                    "loop_counter2": 1,
                    "loop_counter6": 1,
                    "loop_end_var2": 1,
                    "loop_index3": 1,
                    "loop_index4": 1,
                    "loop_var4": 1,
                    "outer_loop_counter": 1,
                    "section_iterator_2": 1,
                    "temp14": 1,
                    "temp4": 2,
                    "temp_counter": 1,
                    "temp_index": 2,
                    "temp_offset2": 2,
                    "temp_offset3": 1,
                    "temp_offset_3": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var12": 1,
                    "temp_var3": 1,
                    "temp_var4": 3,
                    "temp_variable5": 1,
                    "unit_index": 1
                },
                "uVar2": {
                    "": 1,
                    "entry": 1,
                    "section_id": 1,
                    "section_name": 2,
                    "source_filename": 1,
                    "temp1": 1,
                    "temp2": 10,
                    "temp_var1": 2,
                    "temp_var2": 7,
                    "temp_var_2": 2,
                    "temp_variable2": 1,
                    "tmp_var1": 1
                },
                "uVar4": {
                    "total_size": 1
                },
                "uVar5": {
                    "target_index": 1
                },
                "uVar6": {
                    "data_index": 1
                },
                "uVar7": {
                    "": 1,
                    "error_message": 23,
                    "error_msg": 4,
                    "error_string": 1,
                    "temp6": 1,
                    "temp_index": 1
                },
                "uVar9": {
                    "": 1,
                    "block_index": 1,
                    "copy_index2": 1,
                    "counter": 2,
                    "i": 1,
                    "inner_counter": 2,
                    "inner_loop_counter": 1,
                    "inner_loop_counter2": 1,
                    "inner_loop_counter_2": 1,
                    "iteration": 3,
                    "loop_counter": 2,
                    "loop_counter1": 1,
                    "loop_counter2": 1,
                    "loop_index": 1,
                    "loop_index1": 1,
                    "loop_index2": 1,
                    "loop_iterator_2": 1,
                    "loop_size1": 1,
                    "loop_var": 1,
                    "loop_var1": 1,
                    "loop_variable2": 1,
                    "progress_index": 1,
                    "subloop_index2": 1,
                    "temp8": 1,
                    "temp_counter": 1,
                    "temp_var6": 1
                }
            },
            "called": [
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "FUN_00114190",
                "FUN_001083de",
                "free",
                "FUN_001126c0",
                "bfd_set_section_size",
                "xmalloc",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_00115f50"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid process_section_contents_00116110(undefined8 input_file,undefined8 *section_options,undefined8 output_section)\n\n{\n  undefined temp;\n  undefined8 temp2;\n  long section_index;\n  int start_index;\n  int end_index;\n  char is_valid;\n  undefined8 error_message;\n  undefined8 *buffer;\n  long counter;\n  ulong iteration;\n  int divisor;\n  ulong offset;\n  undefined *temp_ptr;\n  long matching_entry;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  void *output_buffer;\n  ulong temp_offset;\n  ulong divisor;\n  ulong temp_var4;\n  byte flag;\n  ulong section_size;\n  void *section_contents;\n  \n  flag = 0;\n  is_valid = check_if_section_options_are_valid_00115f50(input_file,section_options,1);\n  if (is_valid != '\\0') {\n    return;\n  }\n  section_size = section_options[8];\n  section_index = section_options[0xc];\n  if (((*(byte *)((long)section_options + 0x25) & 1) == 0) || ((*(byte *)(section_index + 0x25) & 1) == 0)) {\n    matching_entry = find_matching_entry_00114190(*section_options,0,0x80);\n    if (matching_entry == 0) {\n      return;\n    }\n    if ((*(byte *)(matching_entry + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(section_size);\n    ptr2 = buffer;\n    if (7 < section_size) {\n      for (divisor = section_size >> 3; divisor != 0; divisor = divisor - 1) {\n        *ptr2 = 0;\n        ptr2 = ptr2 + (ulong)flag * -2 + 1;\n      }\n    }\n    ptr1 = ptr2;\n    if ((section_size & 4) != 0) {\n      ptr1 = (undefined8 *)((long)ptr2 + (ulong)flag * -8 + 4);\n      *(undefined4 *)ptr2 = 0;\n    }\n    ptr2 = ptr1;\n    if ((section_size & 2) != 0) {\n      ptr2 = (undefined8 *)((long)ptr1 + (ulong)flag * -4 + 2);\n      *(undefined2 *)ptr1 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)ptr2 = 0;\n    }\n    is_valid = bfd_set_section_contents(output_section,section_index,buffer,0);\n    if (is_valid != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a20 = 1;\n    print_bfd_error_message_001126c0(0,output_section,section_index,0);\n    free(buffer);\n    return;\n  }\n  section_contents = (void *)0x0;\n  is_valid = bfd_get_full_section_contents(input_file,section_options,&section_contents);\n  if ((is_valid == '\\0') ||\n     (is_valid = bfd_convert_section_contents(input_file,section_options,output_section,&section_contents,&section_size),\n     divisor = DAT_001278e8, is_valid == '\\0')) {\n    bfd_set_section_size(section_index,0);\n    DAT_00127a20 = 1;\n    print_bfd_error_message_001126c0(0,input_file,section_options,0);\n    free(section_contents);\n    return;\n  }\n  start_index = DAT_001264b8;\n  end_index = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    divisor = (ulong)DAT_001278e8;\n    if (section_size % divisor != 0) {\n      temp2 = *section_options;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_message_and_exit_00119dd0(error_message,temp2,divisor);\n    }\n    divisor = DAT_001278e8 / 2;\n    offset = 0;\n    while (temp_var4 = offset, start_index = DAT_001264b8, end_index = DAT_001264bc, temp_var4 < section_size) {\n      offset = divisor + temp_var4;\n      temp_offset = offset;\n      for (iteration = 0; iteration < (ulong)(long)divisor; iteration = iteration + 1) {\n        temp_offset = temp_offset - 1;\n        temp_ptr = (undefined *)(temp_var4 + iteration + (long)section_contents);\n        temp = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)section_contents + temp_offset);\n        *(undefined *)((long)section_contents + temp_offset) = temp;\n      }\n    }\n  }\n  DAT_001264b8 = start_index;\n  DAT_001264bc = end_index;\n  if (-1 < end_index) {\n    divisor = (ulong)DAT_00127a1c;\n    divisor = (int)((ulong)section_options[7] % divisor);\n    offset = ((long)end_index - (long)divisor) + (long)section_contents;\n    if (end_index < divisor) {\n      offset = offset + divisor;\n    }\n    matching_entry = (section_size + (long)section_contents) - offset;\n    output_buffer = section_contents;\n    for (; offset < section_size + (long)section_contents; offset = offset + divisor) {\n      for (counter = 0; ((int)counter < start_index && (counter != matching_entry)); counter = counter + 1) {\n        *(undefined *)((long)output_buffer + counter) = *(undefined *)(offset + counter);\n      }\n      output_buffer = (void *)((long)output_buffer + counter);\n      matching_entry = matching_entry - divisor;\n    }\n    section_size = ((((divisor - 1) + section_size) - (long)end_index) / divisor) * (long)start_index;\n    divisor = *(ulong *)(section_index + 0x38) / divisor;\n    *(ulong *)(section_index + 0x38) = divisor;\n    if (end_index < divisor) {\n      *(ulong *)(section_index + 0x38) = divisor + 1;\n      is_valid = bfd_set_section_contents(output_section,section_index,section_contents,0,section_size);\n      if (is_valid == '\\0') {\n        free_memory_and_print_error_message_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  is_valid = bfd_set_section_contents(output_section,section_index,section_contents,0,section_size);\n  if (is_valid == '\\0') {\n    free_memory_and_print_error_message_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_contents);\n  return;\n}\n\n",
            "current_name": "process_section_contents_00116110",
            "entrypoint": "0x00116110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116110": "process_section_contents_00116110",
                "__ptr": "buffer",
                "bVar20": "flag",
                "cVar6": "is_valid",
                "iVar10": "divisor",
                "iVar4": "start_index",
                "iVar5": "end_index",
                "lVar13": "matching_entry",
                "lVar3": "section_index",
                "lVar8": "counter",
                "local_30": "section_contents",
                "local_38": "section_size",
                "param_1": "input_file",
                "param_2": "section_options",
                "param_3": "output_section",
                "puVar12": "temp_ptr",
                "puVar14": "ptr1",
                "puVar15": "ptr2",
                "pvVar16": "output_buffer",
                "uVar1": "temp",
                "uVar11": "offset",
                "uVar17": "temp_offset",
                "uVar18": "divisor",
                "uVar19": "temp_var4",
                "uVar2": "temp2",
                "uVar7": "error_message",
                "uVar9": "iteration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001163d0": {
            "additional_data": {
                "DAT_001278b0": {
                    "unknown_data": 1
                },
                "FUN_001163d0": {
                    "improve_and_merge_gnu_build_attributes": 1,
                    "improve_and_parse_gnu_build_attr_notes": 1,
                    "improve_and_parse_gnu_build_attributes": 1,
                    "improve_gnu_build_attributes": 1,
                    "improved_gnu_build_attributes": 1,
                    "improved_parse_gnu_build_attributes": 2,
                    "merge_build_attributes": 1,
                    "parse_and_process_gnu_build_attributes": 1,
                    "parse_build_attribute_notes": 1,
                    "parse_gnu_build_attribute_notes": 1,
                    "parse_gnu_build_attributes": 15,
                    "process_gnu_build_attributes": 2
                },
                "_DAT_00127a24": {
                    "unknown_data2": 1
                },
                "__nmemb": {
                    "array_length": 1,
                    "array_size": 1,
                    "count": 2,
                    "note_count": 1,
                    "notes_count": 1,
                    "num_elements": 1,
                    "num_items": 1,
                    "num_notes": 1,
                    "num_records": 8,
                    "number_of_records": 1,
                    "record_count": 6,
                    "size_of_array": 1,
                    "size_records": 1,
                    "size_t_var": 1,
                    "temp_var_18": 1
                },
                "__ptr": {
                    "buffer": 4,
                    "ptr": 3,
                    "ptr_relocs": 1,
                    "reloc_buffer": 15,
                    "reloc_ptr": 1,
                    "relocation_buffer": 2,
                    "temp_buffer": 1,
                    "temp_ptr": 1,
                    "temp_ptr_2": 1,
                    "void_ptr": 1
                },
                "__ptr_00": {
                    "new_buffer": 1,
                    "output_ptr": 1,
                    "processed_notes": 1,
                    "ptr0": 1,
                    "temp_ptr_00": 1
                },
                "bVar26": {
                    "alignment": 1,
                    "alignment_check": 1,
                    "alignment_constant": 1,
                    "alignment_flag": 2,
                    "byte_flag": 3,
                    "byte_var": 5,
                    "condition": 1,
                    "false": 1,
                    "flag": 2,
                    "is_big_endian": 1,
                    "is_error": 1,
                    "is_little_endian": 1,
                    "is_negative": 1,
                    "null_terminated": 1,
                    "padding_byte": 1,
                    "padding_flag": 1,
                    "pointer_direction": 1,
                    "temp_bool": 1,
                    "temp_byte_variable": 1,
                    "temp_var_19": 1,
                    "unused_flag": 1,
                    "zero_byte": 1
                },
                "bVar4": {
                    "bool_var": 2,
                    "check_result": 1,
                    "condition": 3,
                    "flag": 6,
                    "found": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_match": 2,
                    "is_valid": 4,
                    "loop_condition": 4,
                    "unreachable4": 1,
                    "valid_condition": 1,
                    "valid_reloc": 1
                },
                "bfd_canonicalize_reloc": {
                    "canonicalize_reloc": 3,
                    "retrieve_relocations": 1
                },
                "bfd_get_reloc_upper_bound": {
                    "get_reloc_buffer_size": 2,
                    "get_reloc_upper_bound": 3
                },
                "bfd_set_error": {
                    "set_error": 2
                },
                "cVar19": {
                    "build_attr_type": 1,
                    "char_value": 2,
                    "char_var": 5,
                    "character": 1,
                    "note_identifier": 1,
                    "note_type": 5,
                    "note_version": 3,
                    "record_type": 1,
                    "temp_char_variable": 1,
                    "temp_var_15": 1,
                    "version": 1,
                    "version_char": 2,
                    "version_flag": 2,
                    "version_indicator": 1,
                    "version_note": 3
                },
                "compare_memory_and_values_0011a1b0": {
                    "compare_memory_and_values": 1,
                    "compare_records": 3,
                    "compare_records_by_values": 1
                },
                "compare_records_0011a250": {
                    "compare_records": 5
                },
                "dcgettext": {
                    "get_error_message": 2,
                    "get_message_translation": 1,
                    "get_msg_translation": 1
                },
                "free": {
                    "deallocate": 1,
                    "deallocate_memory": 1,
                    "free_memory": 2,
                    "release_memory": 1
                },
                "iVar21": {
                    "attr_count": 1,
                    "counter": 3,
                    "counter_2": 1,
                    "int_var2": 1,
                    "int_var_21": 1,
                    "loop_count": 2,
                    "loop_counter": 10,
                    "loop_index": 2,
                    "loop_index2": 1,
                    "loop_variable": 2,
                    "record_index": 1,
                    "temp_integer_variable": 1,
                    "temp_var9": 1,
                    "temp_var_16": 1,
                    "var13": 1,
                    "var21": 1
                },
                "iVar6": {
                    "cmp_result": 1,
                    "compare_result": 2,
                    "comparison_result": 4,
                    "counter": 1,
                    "i": 1,
                    "index": 4,
                    "int_var": 2,
                    "loop_index": 2,
                    "memcmp_result": 4,
                    "reloc_result": 1,
                    "result": 1,
                    "result_cmp": 1,
                    "temp_result": 1,
                    "temp_var_4": 1,
                    "temp_variable": 1,
                    "unreachable6": 1,
                    "var3": 1,
                    "var6": 1
                },
                "improve_and_parse_gnu_build_attributes_001086af": {
                    "improve_and_parse_attributes": 1,
                    "improve_and_parse_gnu_build_attributes": 4
                },
                "lVar12": {
                    "reloc_buffer_length": 1
                },
                "lVar8": {
                    "error": 1,
                    "error_code": 6,
                    "error_msg": 1,
                    "length": 6,
                    "long_var": 1,
                    "message_length": 6,
                    "reloc_upper_bound": 1,
                    "result_length": 1,
                    "result_size": 1,
                    "size": 3,
                    "temp_long_variable": 1,
                    "temp_var_6": 1,
                    "var8": 1
                },
                "local_10": {
                    "temp_07": 1
                },
                "local_20": {
                    "temp_06": 1
                },
                "local_28": {
                    "prev_attr_desc_ptr": 1
                },
                "local_30": {
                    "temp_05": 1
                },
                "local_40": {
                    "temp_04": 1
                },
                "local_50": {
                    "prev_attr_ptr": 1
                },
                "local_60": {
                    "allocated_memory": 1,
                    "attribute_notes": 1,
                    "attributes": 1,
                    "local_array": 3,
                    "local_ptr60": 1,
                    "memory_block": 1,
                    "new_notes": 1,
                    "new_records_buffer": 1,
                    "note_array": 2,
                    "notes_array": 1,
                    "ptr8": 1,
                    "ptr_all_records": 1,
                    "ptr_records": 1,
                    "ptr_var_60": 1,
                    "record_array": 4,
                    "record_array_ptr": 1,
                    "record_buffer": 5,
                    "record_table": 1,
                    "records": 1,
                    "records_buffer": 1,
                    "temp_buffer": 1
                },
                "local_68": {
                    "final_output_size": 1,
                    "final_section_size": 1,
                    "final_size": 1,
                    "local_var3": 1,
                    "local_var4": 2,
                    "local_var68": 1,
                    "local_variable_4": 1,
                    "new_file_size": 1,
                    "new_size": 1,
                    "output_size": 3,
                    "remaining_size": 1,
                    "result": 2,
                    "result_length": 1,
                    "result_output": 1,
                    "result_size": 5,
                    "updated_length": 1,
                    "updated_param3": 1,
                    "updated_section_size": 1,
                    "updated_size": 1,
                    "value_68": 1,
                    "var18": 1,
                    "var_4": 1,
                    "version_2_end": 1
                },
                "local_70": {
                    "address_3": 1,
                    "current_name_buffer": 1,
                    "current_note": 1,
                    "current_version": 1,
                    "local_data_3": 1,
                    "local_min": 1,
                    "local_value3": 1,
                    "local_var2": 1,
                    "local_var3": 3,
                    "local_var70": 1,
                    "local_var_3": 1,
                    "local_variable_3": 1,
                    "prev_101_val": 1,
                    "section_attributes": 1,
                    "section_offset": 2,
                    "section_relocation": 1,
                    "temp_note": 1,
                    "value5": 1,
                    "value6": 1,
                    "value_3": 1,
                    "value_70": 1,
                    "var17": 1,
                    "var_3": 1,
                    "version2_offset": 1,
                    "version_2_start": 1,
                    "version_3_offset": 2,
                    "version_note": 1
                },
                "local_8": {
                    "temp_08": 1
                },
                "local_88": {
                    "address_1": 1,
                    "local_data_1": 1,
                    "local_max": 1,
                    "local_value1": 1,
                    "local_var1": 4,
                    "local_var88": 1,
                    "local_var_1": 1,
                    "local_variable_1": 1,
                    "prev_100_val": 1,
                    "previous_name_buffer": 1,
                    "section_flags": 1,
                    "section_offset": 2,
                    "value3": 1,
                    "value4": 1,
                    "value_1": 1,
                    "value_88": 1,
                    "var15": 1,
                    "var_1": 1,
                    "version3_offset": 1,
                    "version_1_offset": 1,
                    "version_1_start": 1,
                    "version_2": 1,
                    "version_3_value": 1,
                    "version_note": 4
                },
                "memcmp": {
                    "compare_buffers": 1,
                    "compare_memory": 2,
                    "compare_memory_blocks": 1
                },
                "memset": {
                    "set_buffer": 1
                },
                "param_1": {
                    "attribute_table": 1,
                    "input_file": 2,
                    "input_param": 1,
                    "input_param1": 1,
                    "param1": 5,
                    "param_1": 4,
                    "param_a": 1,
                    "param_address": 1,
                    "param_elf_file": 1,
                    "param_elf_header": 3,
                    "param_identifier_1": 1,
                    "param_section_name": 1,
                    "param_source": 1,
                    "reloc_table": 1,
                    "section": 1,
                    "section_data": 1,
                    "section_header": 1,
                    "section_name1": 1,
                    "section_start": 1,
                    "section_x": 1,
                    "source_section": 1
                },
                "param_2": {
                    "input_param2": 1,
                    "output_file": 2,
                    "output_param": 1,
                    "param2": 5,
                    "param_2": 4,
                    "param_b": 1,
                    "param_destination": 1,
                    "param_identifier_2": 1,
                    "param_length": 1,
                    "param_section": 1,
                    "param_section_data": 1,
                    "param_section_header": 3,
                    "section": 2,
                    "section2": 1,
                    "section_data_end": 1,
                    "section_end": 1,
                    "section_header_table": 1,
                    "section_name2": 1,
                    "section_y": 1,
                    "target_section": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "data_size": 1,
                    "file_size": 2,
                    "input_length": 1,
                    "input_param3": 1,
                    "param3": 4,
                    "param_3": 2,
                    "param_section_size": 5,
                    "param_size": 4,
                    "param_total_length": 1,
                    "section_data_length": 1,
                    "section_size": 4,
                    "size": 4
                },
                "param_4": {
                    "buffer": 3,
                    "data": 3,
                    "input_param4": 1,
                    "output": 1,
                    "output_buffer": 10,
                    "output_data": 1,
                    "param4": 4,
                    "param_4": 2,
                    "param_buffer": 2,
                    "param_output": 2,
                    "param_output_buffer": 2
                },
                "parse_gnu_build_attributes_00116490": {
                    "parse_attributes": 1,
                    "parse_gnu_build_attributes": 4
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 3,
                    "print_error_message": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 3,
                    "print_error_message_with_params": 2
                },
                "puVar11": {
                    "reloc_buffer_ptr": 1
                },
                "puVar17": {
                    "attr_record": 1,
                    "current_note": 1,
                    "current_record": 3,
                    "note": 1,
                    "note_ptr": 1,
                    "pointer_2": 1,
                    "ptr17": 1,
                    "ptr2": 1,
                    "ptr_record": 1,
                    "ptr_records": 1,
                    "ptr_var2": 1,
                    "ptr_var_17": 1,
                    "record": 4,
                    "record_ptr": 11,
                    "temp_array1": 1,
                    "temp_ptr_3": 1
                },
                "puVar18": {
                    "buffer_ptr": 1,
                    "copy_ptr": 1,
                    "current_reloc_ptr": 1,
                    "name_ptr": 3,
                    "new_attr_ptr": 1,
                    "next_record": 1,
                    "pointer_3": 1,
                    "ptr1": 1,
                    "ptr18": 1,
                    "ptr3": 1,
                    "ptr_current_description": 1,
                    "ptr_description": 1,
                    "ptr_output": 1,
                    "ptr_var3": 1,
                    "ptr_var_18": 1,
                    "record_data": 1,
                    "record_desc_ptr": 1,
                    "record_description": 1,
                    "record_ptr": 1,
                    "target_buffer": 1,
                    "temp_array2": 1,
                    "temp_buffer": 1,
                    "temp_ptr_2": 2,
                    "temp_ptr_4": 1,
                    "tmp_ptr": 1
                },
                "puVar20": {
                    "attr_name": 1,
                    "attr_ptr": 1,
                    "attribute_ptr": 1,
                    "data_dest": 1,
                    "description_ptr": 2,
                    "end_ptr": 1,
                    "name_pointer": 1,
                    "name_ptr": 1,
                    "out_buffer_ptr": 1,
                    "output_buffer_ptr": 1,
                    "output_ptr": 1,
                    "pointer_4": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr20": 1,
                    "ptr4": 1,
                    "ptr_attributes": 1,
                    "ptr_current_name": 1,
                    "ptr_temp_2": 1,
                    "ptr_var4": 1,
                    "ptr_var_20": 1,
                    "record_buffer": 1,
                    "target_ptr": 1,
                    "temp_array3": 1,
                    "temp_ptr": 2,
                    "temp_ptr_3": 2,
                    "temp_ptr_5": 1,
                    "tmp_pointer3": 1
                },
                "puVar22": {
                    "attr_data_ptr": 1,
                    "attr_desc_ptr": 1,
                    "attr_note_ptr": 1,
                    "attribute_data": 1,
                    "attribute_ptr": 1,
                    "current_data": 1,
                    "current_data_ptr": 1,
                    "current_ptr": 3,
                    "data": 1,
                    "desc_ptr": 1,
                    "input_buffer_ptr": 1,
                    "note_data_ptr": 2,
                    "note_ptr": 2,
                    "pointer_5": 1,
                    "ptr": 1,
                    "ptr22": 1,
                    "ptr5": 1,
                    "ptr_current_record_data": 1,
                    "ptr_data": 1,
                    "ptr_temp_3": 1,
                    "ptr_var": 1,
                    "ptr_var5": 1,
                    "record_data": 1,
                    "record_data_ptr": 1,
                    "temp_ptr": 1,
                    "temp_ptr_4": 1,
                    "temp_ptr_6": 1
                },
                "puVar23": {
                    "attr_buffer": 1,
                    "attr_note_array_ptr": 1,
                    "attribute_record_ptr": 1,
                    "attribute_records": 1,
                    "note_output_ptr": 1,
                    "notes": 1,
                    "pointer_6": 1,
                    "processed_notes_ptr": 1,
                    "ptr23": 1,
                    "ptr6": 1,
                    "ptr_buffer": 1,
                    "ptr_record_buffer": 1,
                    "ptr_records": 1,
                    "ptr_var6": 1,
                    "ptr_var_23": 1,
                    "record_array": 2,
                    "record_buffer": 2,
                    "record_buffer_ptr": 2,
                    "record_ptr": 1,
                    "record_ptr_2": 1,
                    "record_start": 2,
                    "record_table": 1,
                    "records": 2,
                    "records_buffer": 1,
                    "result_array": 1,
                    "temp_ptr_7": 1
                },
                "puVar25": {
                    "attr_prev_ptr": 1,
                    "compare_record_ptr": 1,
                    "comparison_note": 1,
                    "comparison_record": 1,
                    "current_record_ptr": 1,
                    "matching_note": 1,
                    "pointer_7": 1,
                    "previous_note_ptr": 1,
                    "ptr25": 1,
                    "ptr3": 1,
                    "ptr7": 1,
                    "ptr_current_record": 1,
                    "ptr_previous_record": 1,
                    "ptr_temp_4": 1,
                    "ptr_var7": 1,
                    "ptr_var_25": 1,
                    "record_ptr": 1,
                    "record_ptr2": 1,
                    "temp_array4": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_ptr_4": 1,
                    "temp_ptr_5": 1,
                    "temp_ptr_8": 1,
                    "temp_record_ptr": 1,
                    "tmp_pointer2": 1,
                    "tmp_ptr2": 1,
                    "unreachable25": 1
                },
                "puVar26": {
                    "b_var26": 1
                },
                "puVar30": {
                    "attr_end": 1
                },
                "puVar31": {
                    "prev_attr_prev_ptr": 1
                },
                "puVar35": {
                    "temp": 1
                },
                "puVar40": {
                    "temp_01": 1
                },
                "puVar45": {
                    "temp_02": 1
                },
                "puVar5": {
                    "current_ptr": 1,
                    "current_record": 1,
                    "pointer": 1,
                    "pointer_1": 1,
                    "pointer_temp": 1,
                    "previous_record": 1,
                    "ptr": 7,
                    "ptr1": 1,
                    "ptr5": 1,
                    "ptr_array": 1,
                    "ptr_previous_record": 1,
                    "ptr_temp": 1,
                    "ptr_var": 2,
                    "ptr_var_5": 1,
                    "reloc_ptr": 2,
                    "temp_ptr": 3,
                    "temp_ptr_01": 1,
                    "temp_ptr_1": 1,
                    "tmp_pointer": 1,
                    "unreachable5": 1
                },
                "puVar50": {
                    "temp_03": 1
                },
                "qsort": {
                    "quick_sort": 2,
                    "sort_array": 1,
                    "sort_records": 2
                },
                "reverse_and_process_records_00116852": {
                    "reverse_and_process_records": 1
                },
                "uPtr14": {
                    "record_field1_ptr": 1
                },
                "uStack_80": {
                    "address_2": 1,
                    "last_value": 1,
                    "local_data_2": 1,
                    "local_value2": 1,
                    "local_var2": 4,
                    "local_var_2": 1,
                    "local_variable_2": 1,
                    "note_offset": 1,
                    "other_note": 1,
                    "prev_102_val": 1,
                    "previous_description_buffer": 1,
                    "record_version": 1,
                    "section_offset": 1,
                    "stack_var80": 1,
                    "temp_value_10": 1,
                    "unreachable80": 1,
                    "value4": 1,
                    "value5": 1,
                    "value_2": 1,
                    "value_80": 1,
                    "var16": 1,
                    "var_2": 1,
                    "version": 1,
                    "version2or3_offset": 1,
                    "version_1_end": 1,
                    "version_2_offset": 1,
                    "version_3": 1,
                    "version_value": 1
                },
                "uVar1": {
                    "name_length": 1,
                    "result": 25,
                    "result_length": 1,
                    "temp_var_1": 1,
                    "total_reloc_size": 1,
                    "unreachable1": 1,
                    "value": 1
                },
                "uVar10": {
                    "attr_start": 1,
                    "first_value": 1,
                    "name_length": 2,
                    "name_size": 2,
                    "record_field1": 1,
                    "temp2": 2,
                    "temp_ulong_variable_1": 1,
                    "temp_value_2": 2,
                    "temp_var2": 2,
                    "temp_var_10": 1,
                    "temp_var_8": 1,
                    "tmp_value2": 1,
                    "unreachable10": 1,
                    "val2": 2,
                    "value": 3,
                    "value1": 4,
                    "value_1": 1,
                    "var10": 1,
                    "var6": 1,
                    "var_10": 1
                },
                "uVar11": {
                    "description_size": 1,
                    "note_type": 5,
                    "offset": 1,
                    "record_field2": 1,
                    "second_value": 1,
                    "temp3": 1,
                    "temp_ulong_variable_2": 1,
                    "temp_value_3": 2,
                    "temp_var3": 2,
                    "temp_var_11": 1,
                    "temp_var_9": 1,
                    "type": 1,
                    "unreachable11": 1,
                    "val3": 2,
                    "value2": 3,
                    "value_2": 1,
                    "var11": 1,
                    "var7": 1,
                    "var_11": 1
                },
                "uVar12": {
                    "attr_size": 1,
                    "current_offset": 1,
                    "desc_size": 1,
                    "description_length": 2,
                    "description_size_1": 1,
                    "min_length": 1,
                    "min_size": 1,
                    "min_value": 2,
                    "name_length": 1,
                    "offset": 1,
                    "size1": 1,
                    "size_rounded": 1,
                    "temp4": 1,
                    "temp_ulong_variable_3": 1,
                    "temp_value_4": 2,
                    "temp_var4": 2,
                    "temp_var_10": 1,
                    "temp_var_12": 1,
                    "unreachable12": 1,
                    "val4": 2,
                    "value3": 1,
                    "var12": 1,
                    "var8": 1,
                    "var_12": 1
                },
                "uVar13": {
                    "aligned_desc_size": 1,
                    "aligned_first": 1,
                    "aligned_length": 1,
                    "aligned_name_length": 1,
                    "aligned_offset": 1,
                    "aligned_size": 3,
                    "aligned_size1": 1,
                    "aligned_value1": 1,
                    "name_alignment": 1,
                    "name_length_rounded": 1,
                    "name_size": 2,
                    "pad_size": 1,
                    "padded_name_length": 1,
                    "temp5": 1,
                    "temp_ulong_variable_4": 1,
                    "temp_value_5": 2,
                    "temp_var5": 2,
                    "temp_var_11": 1,
                    "temp_var_13": 1,
                    "unreachable13": 1,
                    "val5": 2,
                    "var13": 1,
                    "var9": 1,
                    "var_13": 1
                },
                "uVar14": {
                    "description_size_2": 1,
                    "note_offset": 1,
                    "note_type": 1,
                    "prev_desc_size": 1,
                    "previous_name_length": 1,
                    "previous_note_type": 1,
                    "start_offset": 1,
                    "temp1": 3,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_ulong_variable_5": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_value_6": 2,
                    "temp_var6": 2,
                    "temp_var_12": 1,
                    "temp_var_14": 1,
                    "unreachable14": 1,
                    "val6": 2,
                    "value": 1,
                    "var10": 1,
                    "var14": 1,
                    "var_14": 1,
                    "version": 1
                },
                "uVar15": {
                    "last_value": 1,
                    "merge_value": 1,
                    "name_offset": 2,
                    "prev_pad_size": 1,
                    "previous_description_length": 2,
                    "size_1": 1,
                    "start": 1,
                    "start_offset": 2,
                    "temp2": 3,
                    "temp4": 1,
                    "temp7": 1,
                    "temp_ulong_variable_6": 1,
                    "temp_value2": 1,
                    "temp_value_7": 2,
                    "temp_var7": 2,
                    "temp_var_13": 1,
                    "temp_var_15": 1,
                    "unreachable15": 1,
                    "val7": 2,
                    "var11": 1,
                    "var15": 1,
                    "var_15": 1
                },
                "uVar16": {
                    "note_size": 1,
                    "remaining_length": 3,
                    "remaining_section_size": 1,
                    "remaining_size": 11,
                    "size": 1,
                    "size_2": 1,
                    "temp8": 1,
                    "temp_ulong_variable_7": 1,
                    "temp_value_8": 2,
                    "temp_var8": 2,
                    "temp_var_14": 1,
                    "temp_var_16": 1,
                    "val8": 1,
                    "var12": 1,
                    "var16": 1,
                    "var_16": 1
                },
                "uVar19": {
                    "corruption_flag": 1
                },
                "uVar2": {
                    "address_1": 1,
                    "current_section": 1,
                    "elf_header": 3,
                    "file": 1,
                    "file_name": 1,
                    "input_ptr": 1,
                    "name": 1,
                    "param1_val": 1,
                    "param_1_value": 4,
                    "ptr_var1": 1,
                    "section_data_begin": 1,
                    "section_name": 1,
                    "section_name1": 1,
                    "section_start": 2,
                    "source_value": 1,
                    "start_address": 1,
                    "temp_var_2": 1,
                    "unreachable2": 1,
                    "var1": 4,
                    "var2": 2,
                    "var_2": 1
                },
                "uVar24": {
                    "end_offset": 1,
                    "max_value": 1,
                    "merge_value2": 1,
                    "offset": 1,
                    "previous_description_offset": 1,
                    "previous_description_size": 1,
                    "record_size": 1,
                    "size2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp9": 1,
                    "temp_ulong_variable_8": 1,
                    "temp_value_9": 1,
                    "temp_var10": 1,
                    "temp_var9": 1,
                    "temp_var_17": 1,
                    "temp_var_24": 1,
                    "tmp_value3": 1,
                    "unreachable24": 1,
                    "val8": 1,
                    "val9": 1,
                    "value2": 1,
                    "var14": 1,
                    "var24": 1,
                    "var_24": 1,
                    "version_note_value": 1,
                    "version_start": 1
                },
                "uVar25": {
                    "temp10": 1
                },
                "uVar3": {
                    "address_2": 1,
                    "build_attribute": 1,
                    "end_address": 1,
                    "next_section": 1,
                    "note_type": 1,
                    "output_ptr": 1,
                    "param2_val": 1,
                    "param_2_value": 4,
                    "ptr_var2": 1,
                    "section_data_end": 1,
                    "section_end": 2,
                    "section_header": 3,
                    "section_name": 2,
                    "section_name2": 1,
                    "target_value": 1,
                    "temp_var_3": 1,
                    "unreachable3": 1,
                    "var2": 4,
                    "var3": 2,
                    "var_3": 1
                },
                "uVar4": {
                    "condition": 1,
                    "has_relocations": 1
                },
                "uVar7": {
                    "error_message": 21,
                    "message": 1,
                    "ptr_var3": 1,
                    "temp_var_5": 1,
                    "unreachable7": 1,
                    "var4": 1,
                    "var7": 2,
                    "var_7": 1
                },
                "uVar9": {
                    "buffer_length": 1,
                    "count": 1,
                    "current_offset": 1,
                    "current_record": 1,
                    "description_offset": 1,
                    "description_size": 1,
                    "name_size1": 1,
                    "prev_diff": 1,
                    "prev_size": 1,
                    "previous_offset": 1,
                    "start": 2,
                    "temp": 1,
                    "temp1": 2,
                    "temp_ulong_variable": 1,
                    "temp_value": 1,
                    "temp_value_1": 2,
                    "temp_var1": 2,
                    "temp_var_7": 1,
                    "temp_var_9": 1,
                    "tmp_value1": 1,
                    "unreachable9": 1,
                    "val1": 2,
                    "var5": 1,
                    "var9": 1,
                    "var_9": 1
                },
                "xcalloc": {
                    "allocate_cleared_memory": 1,
                    "allocate_memory": 2
                },
                "xdcalloc": {
                    "xallocate_and_clear": 1
                },
                "xmalloc": {
                    "allocate_memory": 4,
                    "xallocate": 1
                }
            },
            "called": [
                "bfd_canonicalize_reloc",
                "FUN_00119ed0",
                "free",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "xcalloc",
                "dcgettext"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong improved_parse_gnu_build_attributes_001163d0(undefined8 *param1,undefined8 *param2,ulong param_section_size,undefined *output_buffer)\n\n{\n  ulong result;\n  undefined8 param_1_value;\n  undefined8 var2;\n  bool flag;\n  ulong *ptr;\n  int index;\n  undefined8 error_message;\n  long error_code;\n  void *reloc_buffer;\n  ulong start;\n  ulong value1;\n  ulong note_type;\n  ulong temp_var4;\n  undefined *ptr0;\n  ulong aligned_size;\n  ulong temp1;\n  ulong temp2;\n  ulong remaining_size;\n  ulong *record_ptr;\n  undefined *name_ptr;\n  char char_var;\n  undefined *temp_ptr_3;\n  int loop_counter;\n  undefined *current_ptr;\n  ulong *records;\n  ulong version_note_value;\n  size_t num_records;\n  ulong *temp_ptr;\n  byte byte_var;\n  ulong version_note;\n  ulong local_var2;\n  ulong local_var3;\n  ulong result_size;\n  ulong *record_buffer;\n  \n  byte_var = 0;\n  error_code = bfd_get_reloc_upper_bound();\n  result_size = param_section_size;\n  if (0 < error_code) {\n    reloc_buffer = (void *)xmalloc(error_code);\n    error_code = bfd_canonicalize_reloc(param1,param2,reloc_buffer,DAT_001278b0);\n    free_memory(reloc_buffer);\n    if (error_code != 0) {\n      if (_DAT_00127a24 == 0) {\n        param_1_value = *param1;\n        var2 = *param2;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message(error_message,param_1_value,var2);\n      }\n      record_buffer = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  record_buffer = (ulong *)xcalloc(param_section_size / 0xc,0x48,param_section_size % 0xc);\n  version_note = 0;\n  local_var3 = 0;\n  remaining_size = param_section_size;\n  temp2 = 0;\n  records = record_buffer;\n  temp1 = 0;\n  current_ptr = output_buffer;\n  while (0xb < remaining_size) {\n    value1 = (**(code **)(param1[1] + 0x40))(current_ptr);\n    *records = value1;\n    value1 = (**(code **)(param1[1] + 0x40))(current_ptr + 4);\n    records[1] = value1;\n    note_type = (**(code **)(param1[1] + 0x40))(current_ptr + 8);\n    value1 = *records;\n    records[2] = note_type;\n    temp_var4 = records[1];\n    aligned_size = value1 + 3 & 0xfffffffffffffffc;\n    records[6] = aligned_size;\n    if (temp_var4 != (temp_var4 + 3 & 0xfffffffffffffffc)) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = aligned_size + temp_var4 + 0xc;\n    if (remaining_size < result) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (value1 < 2) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    records[3] = (ulong)(current_ptr + 0xc);\n    records[4] = (ulong)(current_ptr + aligned_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (aligned_size + temp_var4));\n    if (value1 != 2) {\n      if (current_ptr[0xc] == '$') {\n        if ((current_ptr[0xd] == '\\x01') && (current_ptr[0xe] == '1')) {\n          remaining_size = parse_gnu_build_attributes();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < value1) && (current_ptr[0xc] == 'G')) && (current_ptr[0xd] == 'A')) &&\n              ((current_ptr[0xe] == '$' && (current_ptr[0xf] == '\\x01')))) {\n        if (current_ptr[0x10] == '2') {\n          remaining_size = parse_gnu_build_attributes();\n          return remaining_size;\n        }\n        if (current_ptr[0x10] == '3') {\n          remaining_size = parse_gnu_build_attributes();\n          return remaining_size;\n        }\n        error_code = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    start = temp2;\n    version_note_value = temp1;\n    if (temp_var4 == 0) {\n      if (note_type == 0x100) {\n        records[7] = version_note;\nLAB_001164af:\n        temp_var4 = temp1;\n        version_note_value = temp1;\n      }\n      else {\n        records[7] = local_var3;\nLAB_0011669e:\n        start = temp2;\n        temp_var4 = temp2;\n      }\n    }\n    else {\n      if (temp_var4 != 0x10) {\n        if (temp_var4 < 0x11) {\n          if (temp_var4 == 4) {\n            note_type = (**(code **)(param1[1] + 0x40))();\n            temp_var4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp_var4 == 8) {\n            remaining_size = improve_and_parse_gnu_build_attributes();\n            return remaining_size;\n          }\n        }\n        error_code = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      note_type = (**(code **)(param1[1] + 0x28))(current_ptr + aligned_size + 0xc);\n      temp_var4 = (**(code **)(param1[1] + 0x28))();\n      if (temp_var4 < note_type) {\n        note_type = temp_var4;\n      }\nLAB_00116631:\n      if (records[2] == 0x100) {\n        if (note_type == 0) {\n          note_type = version_note;\n        }\n        value1 = *records;\n        records[7] = note_type;\n        version_note_value = temp_var4;\n        version_note = note_type;\n        if (temp_var4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (note_type == 0) {\n          note_type = local_var3;\n        }\n        value1 = *records;\n        records[7] = note_type;\n        start = temp_var4;\n        local_var3 = note_type;\n        if (temp_var4 == 0) goto LAB_0011669e;\n      }\n    }\n    records[8] = temp_var4;\n    if (*(char *)((records[3] - 1) + value1) != '\\0') {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    records = records + 9;\n    temp2 = start;\n    temp1 = version_note_value;\n    current_ptr = current_ptr + result;\n  }\n  if (remaining_size == 0) {\n    param_1_value = *param1;\n    var2 = *param2;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message(error_message,param_1_value,var2);\n    num_records = ((long)records - (long)record_buffer >> 3) * -0x71c71c71c71c71c7;\n    qsort(record_buffer,num_records,0x48,compare_records);\n    for (record_ptr = record_buffer; record_ptr < records; record_ptr = record_ptr + 9) {\n      remaining_size = record_ptr[2];\n      if (remaining_size != 0) {\n        temp2 = record_ptr[7];\n        temp1 = record_ptr[8];\n        temp_ptr = record_ptr;\n        loop_counter = 0;\n        if (temp2 == temp1) {\n          record_ptr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr = temp_ptr;\n              temp_ptr = ptr + -9;\n              if (temp_ptr < record_buffer) goto LAB_001167f5;\n              value1 = ptr[-7];\n            } while (value1 == 0);\n            if ((*temp_ptr != *record_ptr) ||\n               (index = memcmp((void *)ptr[-6],(void *)record_ptr[3],*record_ptr), index != 0)) break;\n            temp_var4 = ptr[-2];\n            note_type = ptr[-1];\n            if (temp2 == temp_var4) {\n              if (temp1 == note_type) {\n                record_ptr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp1 <= note_type) {\n                record_ptr[2] = 0;\n                break;\n              }\n              if (note_type < temp2) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < note_type) || (temp2 <= (note_type + 0xf & 0xfffffffffffffff0))\n                   ) goto reverse_and_process_records;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (value1 == 0x101)) {\n                if (note_type <= temp1) {\n                  note_type = temp1;\n                }\n                if (temp_var4 < temp2) {\n                  temp2 = temp_var4;\n                }\n                ptr[-1] = note_type;\n                ptr[-2] = temp2;\n                record_ptr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp_var4 <= temp2) goto LAB_001167a6;\n              if (note_type < temp2) goto LAB_0010852c;\n              if (temp1 < temp2) {\n                if ((0xfffffffffffffff0 < temp1) || (temp_var4 <= (temp1 + 0xf & 0xfffffffffffffff0))\n                   ) goto reverse_and_process_records;\n                goto LAB_001167b8;\n              }\n              if (temp1 != note_type) goto LAB_001167b8;\n            }\nreverse_and_process_records:\n            flag = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(record_buffer,num_records,0x48,compare_records);\n    ptr0 = (undefined *)allocate_memory(param_section_size * 2);\n    local_var2 = 0;\n    local_var3 = 0;\n    current_ptr = ptr0;\n    for (record_ptr = record_buffer; record_ptr < records; record_ptr = record_ptr + 9) {\n      if (record_ptr[2] != 0) {\n        name_ptr = current_ptr + 0xc;\n        if ((record_ptr[7] == local_var3) && (record_ptr[8] == local_var2)) {\n          (**(code **)(param1[1] + 0x50))(*record_ptr,current_ptr);\n          (**(code **)(param1[1] + 0x50))(0,current_ptr + 4);\n          (**(code **)(param1[1] + 0x50))(record_ptr[2],current_ptr + 8);\n          temp2 = record_ptr[6];\n          remaining_size = *record_ptr;\n          current_ptr = (undefined *)record_ptr[3];\n          temp_ptr_3 = name_ptr;\n          for (temp1 = remaining_size; temp1 != 0; temp1 = temp1 - 1) {\n            *temp_ptr_3 = *current_ptr;\n            current_ptr = current_ptr + (ulong)byte_var * -2 + 1;\n            temp_ptr_3 = temp_ptr_3 + (ulong)byte_var * -2 + 1;\n          }\n          if (remaining_size < temp2) {\n            for (error_code = temp2 - remaining_size; error_code != 0; error_code = error_code + -1) {\n              *temp_ptr_3 = 0;\n              temp_ptr_3 = temp_ptr_3 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          current_ptr = name_ptr + temp2;\n        }\n        else {\n          (**(code **)(param1[1] + 0x50))();\n          if (*(int *)(param1[1] + 8) == 5) {\n            char_var = (*(char *)(param1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(param1[1] + 0x50))(char_var,current_ptr + 4);\n          (**(code **)(param1[1] + 0x50))(record_ptr[2],current_ptr + 8);\n          remaining_size = *record_ptr;\n          current_ptr = (undefined *)record_ptr[3];\n          temp_ptr_3 = name_ptr;\n          for (temp2 = remaining_size; temp2 != 0; temp2 = temp2 - 1) {\n            *temp_ptr_3 = *current_ptr;\n            current_ptr = current_ptr + (ulong)byte_var * -2 + 1;\n            temp_ptr_3 = temp_ptr_3 + (ulong)byte_var * -2 + 1;\n          }\n          temp2 = record_ptr[6];\n          if (remaining_size < temp2) {\n            for (error_code = temp2 - remaining_size; error_code != 0; error_code = error_code + -1) {\n              *temp_ptr_3 = 0;\n              temp_ptr_3 = temp_ptr_3 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          error_code = param1[1];\n          name_ptr = name_ptr + temp2;\n          current_ptr = name_ptr + 8;\n          if ((*(int *)(error_code + 8) == 5) && (*(char *)(param1[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_code + 0x38))(record_ptr[7],name_ptr);\n            (**(code **)(param1[1] + 0x38))(record_ptr[8],current_ptr);\n            current_ptr = name_ptr + 0x10;\n          }\n          else {\n            (**(code **)(error_code + 0x50))(record_ptr[7],name_ptr);\n            (**(code **)(param1[1] + 0x50))(record_ptr[8],name_ptr + 4);\n          }\n          local_var3 = record_ptr[7];\n          local_var2 = record_ptr[8];\n        }\n      }\n    }\n    temp2 = (long)current_ptr - (long)ptr0;\n    remaining_size = temp2;\n    current_ptr = ptr0;\n    result_size = param_section_size;\n    if (temp2 < param_section_size) {\n      for (; result_size = temp2, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *output_buffer = *current_ptr;\n        current_ptr = current_ptr + (ulong)byte_var * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free_memory(ptr0);\n  }\n  else {\n    error_code = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (error_code != 0) {\n      bfd_set_error(0x11);\n      print_bfd_error_message(0,param1,param2,error_code);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free_memory(record_buffer);\n  return result_size;\n}\n\n",
            "current_name": "improved_parse_gnu_build_attributes_001163d0",
            "entrypoint": "0x001163d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001163d0": "improved_parse_gnu_build_attributes_001163d0",
                "__nmemb": "num_records",
                "__ptr": "reloc_buffer",
                "__ptr_00": "ptr0",
                "bVar26": "byte_var",
                "bVar4": "flag",
                "bfd_canonicalize_reloc": "canonicalize_reloc",
                "bfd_get_reloc_upper_bound": "get_reloc_upper_bound",
                "bfd_set_error": "set_error",
                "cVar19": "char_var",
                "compare_memory_and_values_0011a1b0": "compare_records",
                "compare_records_0011a250": "compare_records",
                "dcgettext": "get_error_message",
                "free": "free_memory",
                "iVar21": "loop_counter",
                "iVar6": "index",
                "improve_and_parse_gnu_build_attributes_001086af": "improve_and_parse_gnu_build_attributes",
                "lVar8": "error_code",
                "local_60": "record_buffer",
                "local_68": "result_size",
                "local_70": "local_var3",
                "local_8": "temp_08",
                "local_88": "version_note",
                "memcmp": "compare_memory",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param_section_size",
                "param_4": "output_buffer",
                "parse_gnu_build_attributes_00116490": "parse_gnu_build_attributes",
                "print_bfd_error_message_001126c0": "print_bfd_error_message",
                "print_error_message_with_params_00119ed0": "print_error_message",
                "puVar17": "record_ptr",
                "puVar18": "name_ptr",
                "puVar20": "temp_ptr_3",
                "puVar22": "current_ptr",
                "puVar23": "records",
                "puVar25": "temp_ptr",
                "puVar5": "ptr",
                "qsort": "quick_sort",
                "reverse_and_process_records_00116852": "reverse_and_process_records",
                "uStack_80": "local_var2",
                "uVar1": "result",
                "uVar10": "value1",
                "uVar11": "note_type",
                "uVar12": "temp_var4",
                "uVar13": "aligned_size",
                "uVar14": "temp1",
                "uVar15": "temp2",
                "uVar16": "remaining_size",
                "uVar2": "param_1_value",
                "uVar24": "version_note_value",
                "uVar25": "temp10",
                "uVar3": "var2",
                "uVar7": "error_message",
                "uVar9": "start",
                "xcalloc": "allocate_memory",
                "xmalloc": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116490": {
            "additional_data": {
                "DAT_00127a20": {
                    "error_flag": 1
                },
                "FUN_00116490": {
                    "extract_build_attributes": 3,
                    "parse_build_attribute_note": 2,
                    "parse_build_attribute_notes": 2,
                    "parse_build_attributes": 2,
                    "parse_gnu_build_attributes": 1,
                    "process_build_attribute_note": 1,
                    "process_build_attribute_notes": 2,
                    "process_build_attributes": 2
                },
                "__nmemb": {
                    "attr_count": 1,
                    "count": 1,
                    "count2": 1,
                    "counter_variable": 1,
                    "nmemb_var": 1,
                    "note_count": 1,
                    "note_record_count": 1,
                    "num_attributes": 1,
                    "num_elements": 2,
                    "num_notes": 2,
                    "num_records": 1,
                    "number_of_members": 1,
                    "record_count": 2,
                    "size": 2,
                    "temp_size": 1,
                    "var_n": 1
                },
                "__ptr": {
                    "buffer": 7,
                    "buffer_ptr": 1,
                    "dynamic_buffer": 1,
                    "dynamic_memory": 2,
                    "dynamic_memory_pointer": 1,
                    "dynamic_memory_ptr": 1,
                    "dynamic_pointer": 1,
                    "output_buffer": 1,
                    "ptr": 1,
                    "ptr_mem": 1,
                    "ptr_var": 1,
                    "str_ptr": 1,
                    "temp_ptr": 1
                },
                "bVar21": {
                    "boolean": 1,
                    "byte1": 1,
                    "byte_flag": 1,
                    "byte_value": 1,
                    "byte_var": 8,
                    "condition": 1,
                    "flag": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "flag_value": 1,
                    "is_end_of_note": 1,
                    "multiple_versions": 1,
                    "recurse": 1,
                    "temp_byte": 1,
                    "temp_var_17": 1
                },
                "bVar4": {
                    "bool_flag": 1,
                    "bool_value": 1,
                    "bool_var": 3,
                    "condition": 1,
                    "flag": 9,
                    "flag_1": 1,
                    "flag_5": 1,
                    "found_matching_record": 1,
                    "has_description": 1,
                    "is_valid": 1,
                    "is_valid_attr": 1,
                    "temp_bool": 1
                },
                "bfd_set_error": {
                    "set_error_number": 1
                },
                "cVar16": {
                    "char1": 1,
                    "char_value": 1,
                    "char_var": 10,
                    "char_var_1": 1,
                    "character": 2,
                    "character_variable": 1,
                    "note_flag": 1,
                    "note_version": 1,
                    "note_version_type": 1,
                    "temp_char": 1,
                    "temp_var_12": 1,
                    "warning_type": 1
                },
                "compare_memory_and_values_0011a1b0": {
                    "compare_attribute_entries": 1,
                    "compare_memory_and_values": 1
                },
                "compare_records_0011a250": {
                    "compare_entry_order": 1,
                    "compare_records": 1
                },
                "dcgettext": {
                    "get_localized_text": 1
                },
                "free": {
                    "release_memory": 1
                },
                "iVar22": {
                    "compare_result": 1,
                    "counter": 1,
                    "counter2": 1,
                    "counter_2": 1,
                    "counter_var2": 1,
                    "i_var2": 1,
                    "idx": 1,
                    "index2": 1,
                    "int_var1": 1,
                    "int_var2": 2,
                    "integer_variable": 1,
                    "iterator": 1,
                    "loop_counter": 2,
                    "loop_counter2": 1,
                    "loop_index2": 1,
                    "loop_var": 1,
                    "temp_int2": 1,
                    "temp_var_18": 1,
                    "temp_variable_7": 1
                },
                "iVar6": {
                    "count": 1,
                    "counter": 1,
                    "counter_1": 1,
                    "counter_var": 1,
                    "i_var": 1,
                    "index": 4,
                    "int_var": 3,
                    "loop_counter": 4,
                    "loop_index": 1,
                    "loop_var": 2,
                    "result": 1,
                    "temp_int": 1,
                    "var6": 1
                },
                "in_R11": {
                    "address_offset": 1,
                    "attr_name": 1,
                    "byte_counter": 1,
                    "desc_buf": 1,
                    "desc_start": 1,
                    "description_address": 1,
                    "description_size": 1,
                    "description_start": 2,
                    "in_reg2": 1,
                    "in_register_r11": 1,
                    "input2": 1,
                    "note_data_offset": 1,
                    "note_description": 1,
                    "note_description_start": 1,
                    "note_name": 1,
                    "r11_value": 1,
                    "register3": 1,
                    "register_r11": 2,
                    "temp_reg11": 1,
                    "temp_var_9": 1,
                    "value_in_r11": 1
                },
                "in_RAX": {
                    "attr_type": 1,
                    "attribute_type": 2,
                    "in_reg1": 1,
                    "in_register_ax": 1,
                    "input1": 1,
                    "note_size": 1,
                    "note_type": 11,
                    "rax_value": 1,
                    "register_rax": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "type": 1,
                    "value1": 1,
                    "value_in_rax": 1
                },
                "in_stack_00000020": {
                    "allocated_buffer_size": 1,
                    "buffer_size": 4,
                    "input_size": 1,
                    "local_stack_var1": 1,
                    "local_var1": 1,
                    "new_output_size": 1,
                    "output_size": 4,
                    "record_size": 1,
                    "result": 2,
                    "result_size": 2,
                    "size": 3,
                    "stack_value": 1,
                    "stack_var1": 3,
                    "temp_value_1": 1,
                    "temp_var_15": 1,
                    "total_size": 2
                },
                "in_stack_00000028": {
                    "attribute_buffer": 1,
                    "attribute_note_struct_array": 1,
                    "local_stack_var2": 1,
                    "local_var2": 1,
                    "note_array": 1,
                    "note_buffer": 1,
                    "note_records": 1,
                    "notes_array": 1,
                    "ptr8": 1,
                    "ptr_array": 1,
                    "ptr_notes": 1,
                    "record_array": 3,
                    "record_ptr": 1,
                    "records": 2,
                    "records_array": 1,
                    "sorted_notes": 1,
                    "sorted_records": 2,
                    "stack_pointer": 1,
                    "stack_var2": 3,
                    "temp_buffer": 1,
                    "temp_stack_ptr": 1,
                    "temp_value_2": 1,
                    "temp_var_16": 1
                },
                "in_stack_00000030": {
                    "buf_ptr": 1,
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "data_ptr": 1,
                    "description": 1,
                    "local_stack_var3": 1,
                    "local_var3": 1,
                    "note_data": 1,
                    "output": 1,
                    "output_buffer": 4,
                    "ptr1": 1,
                    "ptr9": 1,
                    "ptr_temp": 1,
                    "record_destination": 1,
                    "record_ptr": 1,
                    "result_ptr": 2,
                    "stack_pointer2": 1,
                    "stack_var3": 3,
                    "temp_stack_ptr2": 1,
                    "temp_value_3": 1,
                    "temp_var_17": 1,
                    "temp_variable": 1
                },
                "in_stack_00000038": {
                    "arg10": 1,
                    "excess_data": 1,
                    "flag2": 2,
                    "flag3": 1,
                    "flag4": 1,
                    "flag_1": 1,
                    "flag_3": 1,
                    "flag_a": 1,
                    "has_multiple_versions": 2,
                    "has_name": 2,
                    "has_version": 1,
                    "has_version_note": 1,
                    "local_stack_var4": 1,
                    "local_var4": 1,
                    "param3": 1,
                    "param38": 1,
                    "size_flag": 1,
                    "stack_param": 1,
                    "stack_var4": 3,
                    "temp_value_4": 1,
                    "temp_var_18": 1,
                    "version_missing": 1,
                    "version_note_flag1": 1,
                    "version_note_missing": 1
                },
                "in_stack_00000040": {
                    "arg11": 1,
                    "excess_data": 1,
                    "excess_note_data": 1,
                    "flag1": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "flag5": 1,
                    "flag_2": 1,
                    "flag_4": 1,
                    "flag_b": 1,
                    "has_description": 1,
                    "has_missing_version": 2,
                    "has_note": 1,
                    "has_note_records": 1,
                    "has_note_type": 1,
                    "local_stack_var5": 1,
                    "local_var5": 1,
                    "no_version_note": 1,
                    "note_flag1": 1,
                    "param4": 1,
                    "param40": 1,
                    "stack_param2": 1,
                    "stack_var5": 3,
                    "temp_value_5": 1,
                    "temp_var_19": 1,
                    "version_note_flag2": 1
                },
                "in_stack_00000048": {
                    "definition_path": 1,
                    "domain": 1,
                    "error_message": 4,
                    "error_message_param": 1,
                    "error_message_ptr": 1,
                    "error_message_template": 1,
                    "error_messages": 2,
                    "error_param1": 1,
                    "error_params": 2,
                    "local_stack_var6": 1,
                    "local_var6": 1,
                    "message_array": 1,
                    "msg_params": 1,
                    "param1_ptr": 1,
                    "param_array": 1,
                    "print_error_func": 1,
                    "ptr10": 1,
                    "ptr_error": 1,
                    "stack_pointer3": 1,
                    "stack_var6": 3,
                    "temp_value_6": 1,
                    "temp_var_20": 1
                },
                "lVar7": {
                    "attr_size": 1,
                    "count": 1,
                    "error_string": 1,
                    "error_text": 1,
                    "length": 4,
                    "length_var": 1,
                    "long_var": 1,
                    "loop_var": 1,
                    "loop_variable": 1,
                    "note_start": 1,
                    "retval": 1,
                    "size": 1,
                    "temp_long": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "temp_variable": 1,
                    "var7": 1
                },
                "param_1": {
                    "arg1": 2,
                    "data": 1,
                    "input": 1,
                    "input_param": 3,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "param": 2,
                    "param1": 18,
                    "param_1": 2
                },
                "param_2": {
                    "arg2": 1,
                    "attribute_size": 2,
                    "buffer_size": 1,
                    "data_size": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_size": 1,
                    "length": 1,
                    "note_count": 1,
                    "note_size": 5,
                    "note_type": 3,
                    "num_attributes": 2,
                    "param2": 7,
                    "param_length": 1,
                    "param_size": 1,
                    "size": 1,
                    "size_param": 1
                },
                "param_3": {
                    "arg3": 1,
                    "attribute_data": 2,
                    "attribute_name": 2,
                    "attributes": 1,
                    "attributes_buffer": 1,
                    "data": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "name": 4,
                    "name_param": 1,
                    "note_data": 4,
                    "note_name": 5,
                    "notes_section": 1,
                    "param3": 6
                },
                "param_4": {
                    "arg4": 1,
                    "attribute_note": 1,
                    "attribute_size": 1,
                    "attributes_buffer_size": 1,
                    "data": 1,
                    "data_size": 1,
                    "desc_size": 1,
                    "description": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "length_param": 1,
                    "note": 1,
                    "note_buffer": 1,
                    "note_data": 1,
                    "note_data_size": 1,
                    "note_description": 4,
                    "note_end": 1,
                    "note_size": 2,
                    "param4": 6,
                    "section_size": 1,
                    "size": 2
                },
                "param_7": {
                    "arg7": 1,
                    "input_param7": 1,
                    "input_param_7": 1,
                    "matching_record_count": 1,
                    "max_size": 1,
                    "note_count": 1,
                    "note_version": 1,
                    "output_length": 1,
                    "output_param": 2,
                    "output_size": 1,
                    "param7": 7,
                    "param_value_1": 1,
                    "record_count": 1,
                    "result_buffer_size": 1,
                    "result_size": 3,
                    "var_param": 1,
                    "version": 2,
                    "version_note_size": 1
                },
                "param_8": {
                    "arg8": 1,
                    "error_flag": 1,
                    "flag1": 3,
                    "flag3": 1,
                    "flag_1": 1,
                    "flag_param": 1,
                    "has_records_with_version_note": 1,
                    "has_version_note": 4,
                    "input_param8": 1,
                    "input_param_8": 1,
                    "multiple_versions": 1,
                    "param8": 9,
                    "param_value_2": 1,
                    "parse_options": 1,
                    "var_param3": 1,
                    "version_note_flag": 1
                },
                "param_9": {
                    "arg9": 1,
                    "default_retaddr": 1,
                    "default_version": 1,
                    "flag2": 2,
                    "flag_2": 1,
                    "input_param9": 1,
                    "input_param_9": 1,
                    "note_address": 2,
                    "note_desc_size": 1,
                    "param9": 9,
                    "param_value_3": 1,
                    "retaddr": 1,
                    "temp_param": 1,
                    "var_param4": 1,
                    "version": 1,
                    "version_addr": 1,
                    "version_note": 2,
                    "version_note_data": 1,
                    "version_note_value": 1,
                    "warning_note": 1
                },
                "param_9_2": {
                    "note_address": 1
                },
                "print_bfd_error_message_001126c0": {
                    "print_bfd_error_message": 1
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message_with_params": 1
                },
                "puVar14": {
                    "attribute_ptr": 1,
                    "current_note": 1,
                    "note_ptr": 1,
                    "pointer1": 1,
                    "pointer2": 2,
                    "pointer_var1": 1,
                    "pointer_var2": 3,
                    "pointer_var_1": 1,
                    "pointer_variable_2": 1,
                    "ptr2": 2,
                    "ptr_to_attributes": 1,
                    "ptr_var": 1,
                    "ptr_var14": 1,
                    "record": 1,
                    "records": 2,
                    "temp_pointer2": 1,
                    "temp_var_5": 1
                },
                "puVar15": {
                    "current_note": 1,
                    "current_record": 1,
                    "name_ptr": 1,
                    "pointer2": 1,
                    "pointer3": 2,
                    "pointer_var2": 1,
                    "pointer_var3": 3,
                    "pointer_var_2": 1,
                    "pointer_variable_3": 1,
                    "ptr3": 2,
                    "ptr_var15": 1,
                    "ptr_var2": 1,
                    "record1": 1,
                    "record_name": 1,
                    "temp_pointer3": 1,
                    "temp_ptr": 1,
                    "temp_var_11": 1,
                    "temp_var_6": 1
                },
                "puVar17": {
                    "description_ptr": 1,
                    "dest": 1,
                    "name_ptr1": 1,
                    "note_data_ptr": 1,
                    "pointer3": 1,
                    "pointer4": 2,
                    "pointer_var3": 1,
                    "pointer_var4": 3,
                    "pointer_var_3": 1,
                    "pointer_variable_4": 1,
                    "ptr1": 1,
                    "ptr4": 2,
                    "ptr_var17": 1,
                    "ptr_var3": 1,
                    "temp_pointer4": 1,
                    "temp_ptr1": 1,
                    "temp_var_13": 1,
                    "temp_var_7": 1
                },
                "puVar18": {
                    "attribute_ptr1": 1,
                    "end_ptr": 1,
                    "output_ptr": 1,
                    "pointer4": 1,
                    "pointer5": 2,
                    "pointer_var4": 1,
                    "pointer_var5": 3,
                    "pointer_var_4": 1,
                    "pointer_variable_5": 1,
                    "ptr2": 1,
                    "ptr5": 2,
                    "ptr_var18": 1,
                    "ptr_var4": 1,
                    "source": 1,
                    "temp_pointer5": 1,
                    "temp_ptr2": 1,
                    "temp_var_14": 1,
                    "temp_var_8": 1
                },
                "puVar19": {
                    "array_ptr": 1,
                    "attribute_ptr": 1,
                    "next_note": 1,
                    "pointer5": 1,
                    "pointer6": 2,
                    "pointer_var5": 1,
                    "pointer_var6": 3,
                    "pointer_var_5": 1,
                    "pointer_variable_6": 1,
                    "ptr6": 2,
                    "ptr_note_data": 1,
                    "ptr_to_current_attr": 1,
                    "ptr_var19": 1,
                    "record_ptr": 1,
                    "records_start": 1,
                    "start_record": 1,
                    "temp_pointer6": 1,
                    "temp_var_11": 1
                },
                "puVar20": {
                    "current_note2": 1,
                    "current_record": 1,
                    "matching_record": 1,
                    "pointer6": 1,
                    "pointer7": 2,
                    "pointer_var6": 1,
                    "pointer_var7": 3,
                    "pointer_var_6": 1,
                    "pointer_variable_7": 1,
                    "ptr1": 1,
                    "ptr7": 2,
                    "ptr_var6": 1,
                    "record2": 1,
                    "temp_pointer7": 1,
                    "temp_var_14": 1,
                    "temp_var_16": 1
                },
                "puVar21": {
                    "pointer_variable_8": 1
                },
                "puVar5": {
                    "array_pointer": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_var": 3,
                    "pointer_var1": 1,
                    "pointer_variable_1": 1,
                    "prev_record": 1,
                    "ptr": 5,
                    "ptr1": 3,
                    "ptr_1": 1,
                    "ptr_to_attr": 1,
                    "ptr_var": 1,
                    "ptr_var5": 1,
                    "temp_pointer": 1
                },
                "uVar1": {
                    "prev_note_type": 1,
                    "result": 2,
                    "result1": 6,
                    "result_1": 2,
                    "return_value": 2,
                    "temp_var1": 2,
                    "temp_var_1": 1,
                    "unused_var1": 1,
                    "unused_variable_1": 1,
                    "var1": 4
                },
                "uVar10": {
                    "address": 1,
                    "attribute_address": 1,
                    "note_value": 1,
                    "result10": 1,
                    "result6": 4,
                    "result_6": 2,
                    "temp_var10": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "temp_variable_3": 1,
                    "value3": 1,
                    "var10": 4,
                    "version": 1
                },
                "uVar11": {
                    "found_note_type": 1,
                    "result11": 1,
                    "result7": 4,
                    "result_7": 2,
                    "ret_addr": 2,
                    "temp_var11": 1,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "temp_variable_4": 1,
                    "value4": 1,
                    "var11": 4,
                    "version2": 1
                },
                "uVar12": {
                    "desc_start": 1,
                    "description_size": 1,
                    "found_note_description_size": 1,
                    "min_align": 1,
                    "result12": 1,
                    "result8": 4,
                    "result_8": 2,
                    "temp_var12": 1,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_var_8": 1,
                    "temp_variable_5": 1,
                    "value5": 1,
                    "var12": 4
                },
                "uVar13": {
                    "description_offset": 1,
                    "found_memory_size": 1,
                    "record_count": 1,
                    "result13": 1,
                    "result9": 4,
                    "result_9": 2,
                    "size": 1,
                    "temp_var13": 1,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "temp_var9": 1,
                    "temp_var_9": 1,
                    "temp_variable_6": 1,
                    "value6": 1,
                    "var13": 4
                },
                "uVar2": {
                    "placeholder1": 1,
                    "prev_note_description_size": 1,
                    "result2": 6,
                    "result_2": 2,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "temp_var_2": 1,
                    "unused_var2": 1,
                    "unused_variable_2": 1,
                    "var2": 4,
                    "version": 2
                },
                "uVar3": {
                    "align_size": 1,
                    "alignment": 2,
                    "placeholder2": 1,
                    "result": 1,
                    "result3": 6,
                    "result_3": 2,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var_3": 1,
                    "temp_variable_1": 1,
                    "var3": 4
                },
                "uVar8": {
                    "error_msg": 1,
                    "message": 1,
                    "placeholder3": 1,
                    "result4": 5,
                    "result8": 1,
                    "result_4": 2,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var8": 1,
                    "temp_var_4": 1,
                    "unused_var3": 1,
                    "unused_variable_3": 1,
                    "var8": 4,
                    "warning_string": 1
                },
                "uVar9": {
                    "additional_size": 1,
                    "desc_size": 1,
                    "note_name": 1,
                    "result5": 4,
                    "result9": 1,
                    "result_5": 2,
                    "temp_var1": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var9": 1,
                    "temp_var_5": 1,
                    "temp_variable_2": 1,
                    "value2": 1,
                    "var9": 4,
                    "version1": 1
                },
                "unaff_R08": {
                    "description_end": 1
                },
                "unaff_R09": {
                    "record_index": 1
                },
                "unaff_R10": {
                    "cmp_result": 1
                },
                "unaff_R11": {
                    "domain_count": 1
                },
                "unaff_R12": {
                    "array": 1,
                    "attribute_array": 1,
                    "attribute_entry": 1,
                    "attribute_note_struct": 1,
                    "attribute_pointer": 1,
                    "attribute_ptr": 2,
                    "attribute_record": 1,
                    "current_note": 1,
                    "current_record": 1,
                    "note_attributes": 1,
                    "note_data_ptr": 1,
                    "note_header": 1,
                    "note_pointer": 1,
                    "note_ptr": 1,
                    "note_start": 1,
                    "notes_array": 1,
                    "ptr_note": 1,
                    "ptr_to_current_attr_type": 1,
                    "record": 1,
                    "record_ptr": 1,
                    "reg_r12": 1,
                    "register3": 1,
                    "register4": 1,
                    "register_r12": 2,
                    "temp_var_10": 1,
                    "unaff_r12": 1,
                    "unaffected_r12": 2
                },
                "unaff_R13": {
                    "array_size": 1,
                    "attribute_start": 2,
                    "count": 1,
                    "default_note": 1,
                    "end_record": 1,
                    "first_param": 1,
                    "note_address": 1,
                    "note_attributes": 1,
                    "note_description": 1,
                    "note_end": 1,
                    "note_size_backup": 1,
                    "note_start_offset": 1,
                    "original_version": 1,
                    "output_count": 1,
                    "param2_copy": 1,
                    "param9": 1,
                    "previous_addr": 1,
                    "previous_note_value": 1,
                    "reg_r13": 1,
                    "register4": 1,
                    "register5": 1,
                    "register_r13": 2,
                    "retaddr": 1,
                    "temp_var_12": 1,
                    "temp_var_15": 1,
                    "unaff_r13": 1,
                    "unaffected_r13": 2,
                    "var_r13": 1
                },
                "unaff_R14": {
                    "bfd": 1,
                    "context": 1,
                    "elf_file": 1,
                    "error_handler": 1,
                    "error_info": 1,
                    "error_message": 1,
                    "error_messages": 2,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "libbfd": 1,
                    "message_parameters": 1,
                    "msg_param": 1,
                    "params_array": 1,
                    "print_error_params": 1,
                    "ptr_var5": 1,
                    "reg_r14": 1,
                    "register5": 1,
                    "register6": 1,
                    "register_r14": 1,
                    "strings": 1,
                    "temp_var_13": 1,
                    "translation": 1,
                    "translation_context": 1,
                    "unaff_r14": 1,
                    "unaffected_r14": 2
                },
                "unaff_R15": {
                    "message_type": 1
                },
                "unaff_RAX": {
                    "lower_bound": 1
                },
                "unaff_RBP": {
                    "backup_rbp": 1,
                    "base_addr": 1,
                    "base_address": 1,
                    "base_pointer": 3,
                    "current_version": 1,
                    "data_address": 1,
                    "note_address_temp": 1,
                    "note_description": 1,
                    "note_size_copy": 1,
                    "param3_copy": 1,
                    "reg_bp": 1,
                    "register2": 2,
                    "register_bp": 1,
                    "register_rbp": 1,
                    "ret_addr2": 1,
                    "ret_addr_backup": 1,
                    "retaddr": 1,
                    "return_value": 1,
                    "temp_var_10": 1,
                    "temp_var_4": 1,
                    "unaff_rbp": 2,
                    "unaffected_rbp": 2,
                    "var_rbp": 1,
                    "version_note": 2,
                    "version_note_data_size": 1
                },
                "unaff_RBX": {
                    "data_size": 2,
                    "note_buffer_size": 1,
                    "note_remaining": 1,
                    "note_remaining_size": 2,
                    "note_size": 2,
                    "reg_bx": 1,
                    "register1": 2,
                    "register_bx": 1,
                    "register_rbx": 1,
                    "remaining_bytes": 1,
                    "remaining_data": 1,
                    "remaining_data_size": 1,
                    "remaining_note_size": 1,
                    "remaining_notes": 1,
                    "remaining_size": 5,
                    "temp_var_3": 1,
                    "unaff_rbx": 2,
                    "unaffected_rbx": 2,
                    "upper_bound": 1,
                    "var_rbx": 1
                },
                "unaff_RDI": {
                    "destination": 1
                },
                "unaff_RIP": {
                    "instruction_pointer": 1
                },
                "unaff_RSI": {
                    "current_pointer": 1
                },
                "unaff_retaddr": {
                    "current_retaddr": 1,
                    "default_retaddr": 1,
                    "initial_addr": 1,
                    "note_address": 1,
                    "register6": 1,
                    "register_ret_addr": 2,
                    "result_note": 1,
                    "ret_addr": 1,
                    "ret_address": 1,
                    "retaddr": 1,
                    "return_addr": 3,
                    "return_address": 9,
                    "saved_return_address": 1,
                    "unaff_retaddr": 3,
                    "unaffected_return_address": 2,
                    "version": 1
                },
                "xmalloc": {
                    "allocate_dynamic_memory": 1
                }
            },
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "code": "\nulong parse_gnu_build_attributes_00116490(undefined8 param1,ulong param2,ulong param3,long param4)\n\n{\n  undefined8 result1;\n  undefined8 result2;\n  ulong result3;\n  bool flag;\n  ulong *ptr;\n  int index;\n  long length;\n  undefined8 result4;\n  ulong note_type;\n  ulong var9;\n  ulong result6;\n  ulong var11;\n  ulong var12;\n  undefined *buffer;\n  ulong var13;\n  ulong remaining_size;\n  ulong base_pointer;\n  ulong *pointer_var2;\n  undefined *pointer_var3;\n  char char_var;\n  undefined *pointer_var4;\n  undefined *pointer_var5;\n  ulong register_r11;\n  ulong *register_r12;\n  ulong *pointer_var6;\n  ulong register_r13;\n  size_t num_notes;\n  undefined8 *unaffected_r14;\n  ulong *pointer_var7;\n  byte byte_var;\n  int int_var2;\n  ulong return_address;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong buffer_size;\n  ulong *stack_var2;\n  undefined *output_buffer;\n  uint stack_var4;\n  uint stack_var5;\n  undefined8 *error_message;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  length = param4;\n  result6 = base_pointer;\n  var13 = register_r13;\n  if (note_type == 0) {\n    if (param2 == 0x100) {\n      register_r12[7] = return_address;\n      var11 = return_address;\nLAB_001164af:\n      var9 = register_r13;\n      var13 = register_r13;\n      return_address = var11;\n    }\n    else {\n      register_r12[7] = param9;\nLAB_0011669e:\n      result6 = base_pointer;\n      var9 = base_pointer;\n    }\nLAB_001164bb:\n    register_r12[8] = var9;\n    if (*(char *)((register_r12[3] - 1) + param3) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointer_var6 = register_r12 + 9;\n    if (0xb < remaining_size) {\n      var9 = (**(code **)(unaffected_r14[1] + 0x40))(length);\n      *pointer_var6 = var9;\n      var9 = (**(code **)(unaffected_r14[1] + 0x40))(length + 4);\n      register_r12[10] = var9;\n      param2 = (**(code **)(unaffected_r14[1] + 0x40))(length + 8);\n      param3 = *pointer_var6;\n      register_r12[0xb] = param2;\n      note_type = register_r12[10];\n      var9 = param3 + 3 & 0xfffffffffffffffc;\n      register_r12[0xf] = var9;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param2 - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + note_type + 0xc;\n      if (remaining_size < var11) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param3 < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      register_r12[0xc] = length + 0xc;\n      register_r11 = length + 0xc + var9;\n      register_r12[0xd] = register_r11;\n      remaining_size = remaining_size + (-0xc - (var9 + note_type));\n      param4 = length + var11;\n      base_pointer = result6;\n      register_r12 = pointer_var6;\n      register_r13 = var13;\n      if (param3 != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            result6 = parse_gnu_build_attributes_00116490();\n            return result6;\n          }\n        }\n        else if ((((4 < param3) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            result6 = parse_gnu_build_attributes_00116490();\n            return result6;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            result6 = parse_gnu_build_attributes_00116490();\n            return result6;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_size != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_var4 | stack_var5 | param8) == 0) {\n      result1 = *unaffected_r14;\n      result2 = *error_message;\n      result4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_with_params(result4,result1,result2);\nLAB_0011671b:\n      num_notes = ((long)pointer_var6 - (long)stack_var2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stack_var2,num_notes,0x48,compare_attribute_entries);\n      for (pointer_var2 = stack_var2; pointer_var2 < pointer_var6; pointer_var2 = pointer_var2 + 9) {\n        result6 = pointer_var2[2];\n        if (result6 != 0) {\n          var13 = pointer_var2[7];\n          var9 = pointer_var2[8];\n          pointer_var7 = pointer_var2;\n          int_var2 = 0;\n          if (var13 == var9) {\n            pointer_var2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = pointer_var7;\n                pointer_var7 = ptr + -9;\n                if (pointer_var7 < stack_var2) goto LAB_001167f5;\n                var11 = ptr[-7];\n              } while (var11 == 0);\n              if ((*pointer_var7 != *pointer_var2) ||\n                 (index = memcmp((void *)ptr[-6],(void *)pointer_var2[3],*pointer_var2), index != 0))\n              break;\n              result3 = ptr[-2];\n              var12 = ptr[-1];\n              if (var13 == result3) {\n                if (var9 == var12) {\n                  pointer_var2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  pointer_var2[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto reverse_and_process_records_00116852;\n                }\nLAB_001167b8:\n                if ((result6 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (result3 < var13) {\n                    var13 = result3;\n                  }\n                  ptr[-1] = var12;\n                  ptr[-2] = var13;\n                  pointer_var2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (result3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (result3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto reverse_and_process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nreverse_and_process_records_00116852:\n              flag = int_var2 < 0x11;\n              int_var2 = int_var2 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stack_var2,num_notes,0x48,compare_records);\n      buffer = (undefined *)xmalloc(buffer_size * 2);\n      param7 = 0;\n      param9 = 0;\n      pointer_var5 = buffer;\n      for (pointer_var2 = stack_var2; pointer_var2 < pointer_var6; pointer_var2 = pointer_var2 + 9) {\n        if (pointer_var2[2] != 0) {\n          pointer_var4 = pointer_var5 + 4;\n          pointer_var3 = pointer_var5 + 0xc;\n          if ((pointer_var2[7] == param9) && (pointer_var2[8] == param7)) {\n            (**(code **)(unaffected_r14[1] + 0x50))(*pointer_var2,pointer_var5);\n            (**(code **)(unaffected_r14[1] + 0x50))(0,pointer_var4);\n            (**(code **)(unaffected_r14[1] + 0x50))(pointer_var2[2],pointer_var5 + 8);\n            var13 = pointer_var2[6];\n            result6 = *pointer_var2;\n            pointer_var5 = (undefined *)pointer_var2[3];\n            pointer_var4 = pointer_var3;\n            for (var9 = result6; var9 != 0; var9 = var9 - 1) {\n              *pointer_var4 = *pointer_var5;\n              pointer_var5 = pointer_var5 + (ulong)byte_var * -2 + 1;\n              pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n            }\n            if (result6 < var13) {\n              for (length = var13 - result6; length != 0; length = length + -1) {\n                *pointer_var4 = 0;\n                pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            pointer_var5 = pointer_var3 + var13;\n          }\n          else {\n            (**(code **)(unaffected_r14[1] + 0x50))();\n            if (*(int *)(unaffected_r14[1] + 8) == 5) {\n              char_var = (*(char *)(unaffected_r14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(unaffected_r14[1] + 0x50))(char_var,pointer_var4);\n            (**(code **)(unaffected_r14[1] + 0x50))(pointer_var2[2],pointer_var5 + 8);\n            result6 = *pointer_var2;\n            pointer_var5 = (undefined *)pointer_var2[3];\n            pointer_var4 = pointer_var3;\n            for (var13 = result6; var13 != 0; var13 = var13 - 1) {\n              *pointer_var4 = *pointer_var5;\n              pointer_var5 = pointer_var5 + (ulong)byte_var * -2 + 1;\n              pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = pointer_var2[6];\n            if (result6 < var13) {\n              for (length = var13 - result6; length != 0; length = length + -1) {\n                *pointer_var4 = 0;\n                pointer_var4 = pointer_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            length = unaffected_r14[1];\n            pointer_var3 = pointer_var3 + var13;\n            pointer_var5 = pointer_var3 + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(unaffected_r14[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(pointer_var2[7],pointer_var3);\n              (**(code **)(unaffected_r14[1] + 0x38))(pointer_var2[8],pointer_var5);\n              pointer_var5 = pointer_var3 + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(pointer_var2[7],pointer_var3);\n              (**(code **)(unaffected_r14[1] + 0x50))(pointer_var2[8],pointer_var3 + 4);\n            }\n            param9 = pointer_var2[7];\n            param7 = pointer_var2[8];\n          }\n        }\n      }\n      var13 = (long)pointer_var5 - (long)buffer;\n      result6 = var13;\n      pointer_var5 = buffer;\n      if (var13 < buffer_size) {\n        for (; buffer_size = var13, result6 != 0; result6 = result6 - 1) {\n          *output_buffer = *pointer_var5;\n          pointer_var5 = pointer_var5 + (ulong)byte_var * -2 + 1;\n          output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(buffer);\nLAB_001166f8:\n      free(stack_var2);\n      return buffer_size;\n    }\n    if (((stack_var5 | param8) == 0) || (stack_var4 == 0)) {\n      if (stack_var5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      var11 = (**(code **)(unaffected_r14[1] + 0x28))(register_r11);\n      var9 = (**(code **)(unaffected_r14[1] + 0x28))(register_r12[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (register_r12[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = return_address;\n        }\n        param3 = *register_r12;\n        register_r12[7] = var11;\n        var13 = var9;\n        return_address = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        param3 = *register_r12;\n        register_r12[7] = var11;\n        result6 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        var11 = (**(code **)(unaffected_r14[1] + 0x40))(register_r11);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        result6 = improve_and_parse_gnu_build_attributes_001086af();\n        return result6;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    print_bfd_error_message(0,unaffected_r14,error_message,length);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_with_params_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_and_values_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto reverse_and_process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto reverse_and_process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nreverse_and_process_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_bfd_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "current_name": "parse_gnu_build_attributes_00116490",
            "entrypoint": "0x00116490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116490": "parse_gnu_build_attributes_00116490",
                "__nmemb": "num_notes",
                "__ptr": "buffer",
                "bVar21": "byte_var",
                "bVar4": "flag",
                "bfd_set_error": "set_error_number",
                "cVar16": "char_var",
                "compare_memory_and_values_0011a1b0": "compare_attribute_entries",
                "compare_records_0011a250": "compare_records",
                "dcgettext": "get_localized_text",
                "free": "release_memory",
                "iVar22": "int_var2",
                "iVar6": "index",
                "in_R11": "register_r11",
                "in_RAX": "note_type",
                "in_stack_00000020": "buffer_size",
                "in_stack_00000028": "stack_var2",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "stack_var4",
                "in_stack_00000040": "stack_var5",
                "in_stack_00000048": "error_message",
                "lVar7": "length",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "print_bfd_error_message_001126c0": "print_bfd_error_message",
                "print_error_message_with_params_00119ed0": "print_error_message_with_params",
                "puVar14": "pointer_var2",
                "puVar15": "pointer_var3",
                "puVar17": "pointer_var4",
                "puVar18": "pointer_var5",
                "puVar19": "pointer_var6",
                "puVar20": "pointer_var7",
                "puVar5": "ptr",
                "uVar1": "result1",
                "uVar10": "result6",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar13": "var13",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar8": "result4",
                "uVar9": "var9",
                "unaff_R12": "register_r12",
                "unaff_R13": "register_r13",
                "unaff_R14": "unaffected_r14",
                "unaff_RBP": "base_pointer",
                "unaff_RBX": "remaining_size",
                "unaff_retaddr": "return_address",
                "xmalloc": "allocate_dynamic_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116852": {
            "additional_data": {
                "FUN_00116852": {
                    "find_and_process_records": 1,
                    "parse_records": 1,
                    "process_data": 1,
                    "process_records": 22,
                    "reverse_and_process_records": 2
                },
                "__ptr": {
                    "allocated_memory": 1,
                    "allocated_ptr": 1,
                    "buffer": 4,
                    "buffer_ptr": 1,
                    "dynamic_array": 1,
                    "dynamic_buffer": 3,
                    "extracted_data_ptr": 1,
                    "memory_pointer": 2,
                    "output_buffer": 1,
                    "ptr4": 1,
                    "result_buffer": 1,
                    "temp_buffer": 3,
                    "temp_pointer": 1,
                    "temp_ptr": 1
                },
                "bVar14": {
                    "byte_flag": 3,
                    "byte_val": 2,
                    "byte_var": 8,
                    "flag": 4,
                    "flag2": 1,
                    "is_found": 1,
                    "is_match": 1,
                    "num_fields": 1,
                    "temp_byte": 1,
                    "temp_flag": 2,
                    "zero_byte": 1
                },
                "cVar10": {
                    "char_value": 1,
                    "char_var": 9,
                    "character": 2,
                    "compare_mode": 1,
                    "condition": 1,
                    "condition_flag": 1,
                    "condition_result": 1,
                    "condition_variable": 1,
                    "conditional_var": 1,
                    "flag": 1,
                    "record_processing_flag": 1,
                    "temp_char": 2,
                    "value": 1
                },
                "iVar3": {
                    "cmp_result": 2,
                    "compare_result": 5,
                    "comparison": 1,
                    "comparison_result": 5,
                    "memcmp_result": 3,
                    "result": 5
                },
                "in_R10": {
                    "count": 1,
                    "counter": 3,
                    "current_index": 1,
                    "i": 1,
                    "index": 4,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "record_count": 2,
                    "record_idx": 1,
                    "record_index": 9
                },
                "in_R11": {
                    "buffer_size": 1,
                    "condition": 1,
                    "current_flag": 1,
                    "current_status": 1,
                    "flag": 1,
                    "record_size": 3,
                    "record_type": 2,
                    "record_value1": 1,
                    "s_var1": 1,
                    "value": 1,
                    "value1": 1
                },
                "in_R15": {
                    "min_value": 1
                },
                "in_RBP": {
                    "original_array": 1,
                    "record_pointer": 1
                },
                "in_RBX": {
                    "original_array_size": 1,
                    "record_count": 1,
                    "record_list_size": 1,
                    "record_param1_copy": 1
                },
                "in_RCX": {
                    "end_of_array": 1,
                    "end_of_input": 1,
                    "end_ptr": 1,
                    "end_record": 1,
                    "end_record_pointer": 1,
                    "end_records_ptr": 1,
                    "input_array": 1,
                    "record_array": 8,
                    "record_count": 3,
                    "record_end": 1,
                    "record_list": 2,
                    "size_array": 1
                },
                "lVar7": {
                    "counter": 1,
                    "difference": 2,
                    "length": 2,
                    "loop_count": 1,
                    "loop_counter": 4,
                    "loop_counter2": 1,
                    "loop_index": 2,
                    "loop_size": 1,
                    "loop_var": 5,
                    "loop_variable": 1,
                    "temp3": 2,
                    "temp_index": 1,
                    "temp_length": 1,
                    "temp_var3": 1
                },
                "param_10": {
                    "buffer_size": 1,
                    "max_output_size": 1,
                    "max_records": 1,
                    "num_records": 1,
                    "output_buffer_size": 1,
                    "output_size": 2,
                    "param10": 13,
                    "param3": 6,
                    "param_3": 1,
                    "param_value2": 1,
                    "record_param2": 1,
                    "result_buffer_size": 1
                },
                "param_11": {
                    "array": 1,
                    "compare_function": 1,
                    "input_data": 1,
                    "input_record_array": 1,
                    "input_records": 1,
                    "param11": 6,
                    "param4": 4,
                    "param_array": 1,
                    "param_array1": 1,
                    "record_array": 4,
                    "record_array_copy": 1,
                    "record_ptr_array": 1,
                    "record_size_array": 1,
                    "records": 5,
                    "temp_array": 1
                },
                "param_12": {
                    "buffer": 1,
                    "output": 5,
                    "output_array": 1,
                    "output_buffer": 8,
                    "output_data": 1,
                    "output_pointer": 2,
                    "output_ptr": 1,
                    "output_records": 1,
                    "param12": 4,
                    "param5": 3,
                    "param_array2": 1,
                    "result_buffer": 1,
                    "result_buffer_ptr": 1
                },
                "param_13": {
                    "additional_data": 1,
                    "callback_data": 1,
                    "comparison_data": 1,
                    "comparison_info": 1,
                    "context": 9,
                    "function_pointer": 1,
                    "param13": 5,
                    "param3": 2,
                    "param4": 1,
                    "param6": 4,
                    "param_d": 1,
                    "record_data": 1,
                    "record_info": 1,
                    "struct_pointer": 1
                },
                "param_14": {
                    "array_length": 1,
                    "array_size": 2,
                    "num_bytes": 1,
                    "num_records": 5,
                    "param14": 7,
                    "param5": 1,
                    "param7": 4,
                    "record_array_size": 2,
                    "record_count": 3,
                    "record_count_copy": 1,
                    "record_size": 3
                },
                "param_7": {
                    "input_size": 1,
                    "param1": 7,
                    "param7": 13,
                    "param_1": 1,
                    "param_7": 1,
                    "record_count": 3,
                    "record_size": 2,
                    "search_value1": 1,
                    "target_field_size": 1
                },
                "param_9": {
                    "param1": 1,
                    "param2": 8,
                    "param9": 13,
                    "param_1": 1,
                    "param_2": 1,
                    "param_9": 1,
                    "param_a": 1,
                    "param_value1": 1,
                    "record_param1": 1,
                    "search_value2": 1,
                    "target_record_size": 1
                },
                "pcVar2": {
                    "callback": 3,
                    "callback_function": 1,
                    "code_ptr": 1,
                    "compare_func": 3,
                    "compare_function": 2,
                    "func_ptr": 1,
                    "function_pointer": 4,
                    "function_ptr": 1,
                    "record_processor": 1
                },
                "psVar13": {
                    "curr_record": 1,
                    "current_array_element": 1,
                    "current_input_record": 1,
                    "current_ptr": 1,
                    "current_record_pointer": 1,
                    "current_record_ptr": 3,
                    "ptr7": 1,
                    "record": 2,
                    "record_pointer2": 1,
                    "record_ptr": 4,
                    "temp_ptr4": 1
                },
                "puVar11": {
                    "buffer_pointer2": 1,
                    "copy_dest": 1,
                    "data_pointer2": 1,
                    "dest": 1,
                    "destination_ptr2": 1,
                    "output_ptr": 1,
                    "output_ptr2": 1,
                    "pointer": 1,
                    "ptr11": 1,
                    "ptr2": 5,
                    "ptr5": 1,
                    "temp_buffer": 1,
                    "temp_field": 1,
                    "temp_output_data": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 4
                },
                "puVar12": {
                    "buffer_pointer3": 1,
                    "copy_ptr": 1,
                    "copy_src": 1,
                    "current_ptr": 1,
                    "data_ptr": 1,
                    "end_buffer": 1,
                    "output_data_pointer": 1,
                    "ptr12": 1,
                    "ptr3": 5,
                    "ptr6": 1,
                    "record_data_ptr": 1,
                    "temp_buffer": 1,
                    "temp_field_ptr": 1,
                    "temp_output_data_end": 1,
                    "temp_pointer3": 1,
                    "temp_pointer4": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 2
                },
                "puVar9": {
                    "buffer_pointer1": 1,
                    "data_pointer1": 1,
                    "dest": 1,
                    "dest_buffer": 1,
                    "dest_ptr": 1,
                    "destination_ptr": 1,
                    "output_buffer_ptr": 1,
                    "output_data_end": 1,
                    "output_ptr": 2,
                    "ptr1": 5,
                    "ptr9": 1,
                    "record_end_ptr": 1,
                    "src": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 3,
                    "var4": 1
                },
                "sVar1": {
                    "array_length": 1,
                    "comparison_result": 2,
                    "current_record_size": 1,
                    "field_size": 1,
                    "input_data_size": 1,
                    "record_data_size": 1,
                    "record_size": 7,
                    "record_size2": 1,
                    "size": 5,
                    "size_var": 4,
                    "temp_size": 1
                },
                "uVar4": {
                    "counter": 9,
                    "counter_plus_one": 1,
                    "counter_var": 1,
                    "field_index": 1,
                    "increment": 1,
                    "index": 4,
                    "loop_counter": 2,
                    "record_index": 1,
                    "temp_count": 1,
                    "temp_var": 2,
                    "tmp_var": 1
                },
                "uVar5": {
                    "min_field_size": 1,
                    "min_result": 1,
                    "min_result_size": 1,
                    "min_size": 3,
                    "min_val_temp": 1,
                    "min_value": 2,
                    "min_value_updated": 1,
                    "new_end_address": 1,
                    "record_size": 1,
                    "record_size1": 1,
                    "record_size2": 1,
                    "size1": 1,
                    "start_index": 1,
                    "temp1": 3,
                    "temp_value1": 1,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "var1": 1,
                    "var5": 1
                },
                "uVar6": {
                    "end_index": 1,
                    "max_result": 1,
                    "max_result_size": 1,
                    "max_size": 4,
                    "max_val_temp": 1,
                    "max_value": 2,
                    "max_value_updated": 1,
                    "min_record_size": 1,
                    "new_start_address": 1,
                    "record_limit2": 1,
                    "record_size2": 1,
                    "size2": 1,
                    "temp2": 3,
                    "temp_value2": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "var2": 1,
                    "var6": 1
                },
                "uVar8": {
                    "compare_result": 1,
                    "current_size": 1,
                    "record": 1,
                    "record_identifier": 1,
                    "record_index_2": 1,
                    "record_val": 1,
                    "size": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp_value": 1,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "value": 2,
                    "var3": 1,
                    "var8": 1
                },
                "unaff_R11": {
                    "condition": 1,
                    "is_condition_true": 1,
                    "record_size": 1
                },
                "unaff_R13": {
                    "array_ptr2": 1,
                    "compare_array": 1,
                    "current_record": 1,
                    "end_of_records": 1,
                    "end_ptr": 2,
                    "end_record": 2,
                    "end_record_list": 1,
                    "ptr2": 1,
                    "record_array": 3,
                    "record_array_start": 1,
                    "record_end": 2,
                    "record_end_pointer": 1,
                    "record_ptr": 1,
                    "record_start": 2,
                    "start_record": 3,
                    "start_record_pointer": 1,
                    "start_record_ptr": 1,
                    "temp_array1": 1
                },
                "unaff_R14": {
                    "current_ptr": 1,
                    "current_record": 9,
                    "current_record_pointer": 1,
                    "current_record_ptr": 3,
                    "ptr3": 1,
                    "record": 3,
                    "record_array_ptr": 1,
                    "record_iterator": 1,
                    "record_pointer": 1,
                    "record_ptr": 1,
                    "records": 2,
                    "start_record": 1,
                    "temp_array2": 1
                },
                "unaff_R15": {
                    "current_min": 1,
                    "current_size": 1,
                    "max_field_size": 1,
                    "max_record": 2,
                    "max_record_index": 1,
                    "max_record_size": 2,
                    "max_size": 2,
                    "max_size2": 1,
                    "max_start_address": 1,
                    "max_val": 1,
                    "max_value": 4,
                    "max_value1": 1,
                    "min_record": 1,
                    "min_valid_size": 1,
                    "min_value": 1,
                    "record_count": 1,
                    "record_limit": 1,
                    "record_maximum": 1,
                    "record_size": 1,
                    "record_value2": 1,
                    "value3": 1
                },
                "unaff_RBP": {
                    "array_ptr1": 1,
                    "base_record": 1,
                    "comparison_record_ptr": 1,
                    "current": 1,
                    "current_record": 8,
                    "next_record": 1,
                    "previous_record": 1,
                    "ptr1": 1,
                    "record": 1,
                    "record_array": 1,
                    "record_base_pointer": 1,
                    "record_iterator": 1,
                    "record_list": 1,
                    "record_pointer": 6,
                    "record_pointer2": 1,
                    "record_ptr": 2,
                    "records": 1
                },
                "unaff_RBX": {
                    "current_max": 1,
                    "current_offset": 1,
                    "default_size": 1,
                    "max_end_address": 1,
                    "max_record": 1,
                    "max_record_size": 1,
                    "max_size1": 1,
                    "max_valid_size": 1,
                    "max_value": 2,
                    "max_value2": 1,
                    "min_index": 1,
                    "min_record": 2,
                    "min_record_index": 1,
                    "min_record_size": 2,
                    "min_size": 1,
                    "min_val": 1,
                    "min_value": 4,
                    "min_value_stored": 1,
                    "record_count2": 1,
                    "record_minimum": 1,
                    "record_size": 1,
                    "record_value1": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_0011a250",
                "memcmp",
                "free",
                "FUN_00116852",
                "xmalloc",
                "qsort"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nulong reverse_and_process_records_00116852(void)\n\n{\n  size_t record_size;\n  code *function_pointer;\n  int comparison_result;\n  uint counter;\n  undefined *buffer;\n  size_t *record_array;\n  ulong min_size;\n  ulong max_size;\n  long loop_var;\n  ulong temp4;\n  size_t min_value;\n  size_t *current_record;\n  undefined *ptr1;\n  char char_var;\n  undefined *ptr2;\n  ulong record_index;\n  undefined *ptr3;\n  size_t record_size;\n  size_t *record_array;\n  size_t *current_record;\n  size_t max_value;\n  size_t *record_ptr;\n  byte byte_var;\n  size_t param7;\n  size_t param9;\n  ulong param10;\n  size_t *param11;\n  undefined *output_buffer;\n  long context;\n  size_t param14;\n  \n  byte_var = 0;\ncode_r0x00116852:\n  counter = (int)record_index + 1;\n  if (0x10 < (int)record_index) goto LAB_001167f5;\nLAB_00116863:\n  current_record = current_record + -9;\n  do {\n    if (record_array <= current_record) {\n      record_size = current_record[2];\n      if (record_size == 0) goto LAB_00116863;\n      temp4 = (ulong)counter;\n      if ((*current_record == *current_record) &&\n         (comparison_result = memcmp((void *)current_record[3],(void *)current_record[3],*current_record), comparison_result == 0)) {\n        max_size = current_record[7];\n        min_size = current_record[8];\n        record_index = temp4 & 0xffffffff;\n        if (max_value == max_size) {\n          if (min_value != min_size) goto LAB_001167a6;\n          current_record[2] = 0;\n        }\n        else {\n          if (max_value < max_size) {\n            if (min_size < max_value) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < min_size) || (max_value <= (min_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_value < max_value) {\n              if ((0xfffffffffffffff0 < min_value) ||\n                 (max_size <= (min_value + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_value == min_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_value <= min_size) {\n              current_record[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (min_size < max_value) goto LAB_0010852c;\n          }\n          if ((record_size == 0x101) != (record_size == 0x101)) goto code_r0x00116852;\n          if (min_size <= min_value) {\n            min_size = min_value;\n          }\n          if (max_size < max_value) {\n            max_value = max_size;\n          }\n          current_record[8] = min_size;\n          current_record[7] = max_value;\n          current_record[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_record = current_record;\n        current_record = current_record + 9;\n        if (record_array <= current_record) {\n          qsort(param11,param14,0x48,compare_records_0011a250);\n          buffer = (undefined *)xmalloc(param10 * 2);\n          param7 = 0;\n          ptr3 = buffer;\n          for (record_ptr = param11; record_ptr < record_array; record_ptr = record_ptr + 9) {\n            if (record_ptr[2] != 0) {\n              ptr2 = ptr3 + 4;\n              ptr1 = ptr3 + 0xc;\n              function_pointer = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((record_ptr[7] == param9) && (record_ptr[8] == param7)) {\n                (*function_pointer)(*record_ptr,ptr3);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(record_ptr[2],ptr3 + 8);\n                max_size = record_ptr[6];\n                temp4 = *record_ptr;\n                ptr3 = (undefined *)record_ptr[3];\n                ptr2 = ptr1;\n                for (min_size = temp4; min_size != 0; min_size = min_size - 1) {\n                  *ptr2 = *ptr3;\n                  ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n                  ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n                }\n                if (temp4 < max_size) {\n                  for (loop_var = max_size - temp4; loop_var != 0; loop_var = loop_var + -1) {\n                    *ptr2 = 0;\n                    ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                ptr3 = ptr1 + max_size;\n              }\n              else {\n                (*function_pointer)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  char_var = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  char_var = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(char_var,ptr2);\n                (**(code **)(*(long *)(context + 8) + 0x50))(record_ptr[2],ptr3 + 8);\n                temp4 = *record_ptr;\n                ptr3 = (undefined *)record_ptr[3];\n                ptr2 = ptr1;\n                for (max_size = temp4; max_size != 0; max_size = max_size - 1) {\n                  *ptr2 = *ptr3;\n                  ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n                  ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n                }\n                max_size = record_ptr[6];\n                if (temp4 < max_size) {\n                  for (loop_var = max_size - temp4; loop_var != 0; loop_var = loop_var + -1) {\n                    *ptr2 = 0;\n                    ptr2 = ptr2 + (ulong)byte_var * -2 + 1;\n                  }\n                }\n                loop_var = *(long *)(context + 8);\n                ptr1 = ptr1 + max_size;\n                ptr3 = ptr1 + 8;\n                if ((*(int *)(loop_var + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_var + 0x38))(record_ptr[7],ptr1);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(record_ptr[8],ptr3);\n                  ptr3 = ptr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loop_var + 0x50))(record_ptr[7],ptr1);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(record_ptr[8],ptr1 + 4);\n                }\n                param9 = record_ptr[7];\n                param7 = record_ptr[8];\n              }\n            }\n          }\n          max_size = (long)ptr3 - (long)buffer;\n          temp4 = max_size;\n          ptr3 = buffer;\n          if (max_size < param10) {\n            for (; param10 = max_size, temp4 != 0; temp4 = temp4 - 1) {\n              *output_buffer = *ptr3;\n              ptr3 = ptr3 + (ulong)byte_var * -2 + 1;\n              output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n            }\n          }\n          free(buffer);\n          free(param11);\n          return param10;\n        }\n        record_size = current_record[0xb];\n      } while (record_size == 0);\n      max_value = current_record[0x10];\n      min_value = current_record[0x11];\n      counter = 0;\n      if (max_value != min_value) break;\n      current_record[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "current_name": "reverse_and_process_records_00116852",
            "entrypoint": "0x00116852",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00116852": "reverse_and_process_records_00116852",
                "__ptr": "buffer",
                "bVar14": "byte_var",
                "cVar10": "char_var",
                "iVar3": "comparison_result",
                "in_R10": "record_index",
                "in_R11": "record_size",
                "in_RCX": "record_array",
                "lVar7": "loop_var",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "output_buffer",
                "param_13": "context",
                "param_14": "param14",
                "param_7": "param7",
                "param_9": "param9",
                "pcVar2": "function_pointer",
                "psVar13": "record_ptr",
                "puVar11": "ptr2",
                "puVar12": "ptr3",
                "puVar9": "ptr1",
                "sVar1": "record_size",
                "uVar4": "counter",
                "uVar5": "min_size",
                "uVar6": "max_size",
                "uVar8": "temp4",
                "unaff_R13": "record_array",
                "unaff_R14": "current_record",
                "unaff_R15": "max_value",
                "unaff_RBP": "current_record",
                "unaff_RBX": "min_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00116ad0": {
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116ad0",
            "entrypoint": "0x00116ad0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b00": {
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "calling": [
                "_INIT_0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00116b00",
            "entrypoint": "0x00116b00",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00116b90": {
            "called": [
                "fprintf",
                "strncpy",
                "FUN_00114cf0",
                "FUN_00108c86",
                "FUN_00113fe0",
                "FUN_00113f20",
                "FUN_00114460",
                "xmalloc",
                "strerror",
                "strcmp",
                "FUN_00113fb0",
                "xexit",
                "FUN_00108d9a",
                "free",
                "setlocale",
                "fread",
                "htab_elements",
                "ftell",
                "xmalloc_set_program_name",
                "xcalloc",
                "FUN_00119dd0",
                "FUN_00108a2a",
                "xstrdup",
                "xrealloc",
                "bfd_init",
                "getopt_long",
                "close",
                "strncasecmp",
                "strtol",
                "FUN_00113f50",
                "FUN_00108916",
                "bfd_scan_arch",
                "bfd_get_error",
                "strlen",
                "FUN_0011a480",
                "__errno_location",
                "memmove",
                "bfd_set_error_program_name",
                "bfd_errmsg",
                "FUN_001199d0",
                "fopen",
                "FUN_00114c20",
                "FUN_00115970",
                "FUN_00108800",
                "FUN_00114190",
                "FUN_00108898",
                "bfd_set_default_target",
                "strtoul",
                "strcpy",
                "free",
                "malloc",
                "FUN_001126c0",
                "htab_find_slot",
                "ferror",
                "FUN_00114d60",
                "bindtextdomain",
                "dup",
                "FUN_001054af",
                "FUN_00119970",
                "FUN_00114c80",
                "stat",
                "FUN_00119ed0",
                "memcpy",
                "fclose",
                "textdomain",
                "FUN_0011a390",
                "FUN_00114690",
                "filename_cmp",
                "htab_create_alloc",
                "strcasecmp",
                "getc",
                "unlink_if_ordinary",
                "dcgettext",
                "FUN_00119940",
                "mkstemp",
                "strchr",
                "fseek"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_message_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_message_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = initialize_string_hash_table_00113f20();\n  DAT_001279f0 = initialize_string_hash_table_00113f20();\n  DAT_00127a08 = initialize_string_hash_table_00113f20();\n  DAT_001279e8 = initialize_string_hash_table_00113f20();\n  DAT_001279e0 = initialize_string_hash_table_00113f20();\n  DAT_001279d8 = initialize_string_hash_table_00113f20();\n  DAT_001279d0 = initialize_string_hash_table_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278c8 = initialize_string_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_function_chain_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_and_exit_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_data_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        find_matching_entry_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        find_matching_entry_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_and_exit_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_binary_header_info_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = string_comparison_function_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = parse_driver_version_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = string_comparison_function_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = parse_driver_version_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)create_path_from_file_name_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_binary_file_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_delete_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_with_params_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_with_params_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = check_file_status_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)create_path_from_file_name_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_bfd_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    process_binary_file_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_delete_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        symbol_redefinition_check_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    symbol_redefinition_check_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_message_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_message_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_message_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_data_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_matching_entry_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = parse_parameter_string_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    read_file_and_store_contents_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_with_null_terminator_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_with_null_terminator_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_with_params_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_with_null_terminator_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = validate_and_print_error_message_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_matching_entry_00114190(pcVar32,1,uVar12);\n    lVar17 = validate_and_print_error_message_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = validate_and_print_error_message_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = parse_parameter_string_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = validate_and_print_error_message_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)validate_and_print_error_message_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_with_params_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_with_params_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_with_params_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = validate_and_print_error_message_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_matching_entry_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_file_and_process_lines_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = validate_and_print_error_message_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    symbol_redefinition_check_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_matching_entry_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_with_params_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = validate_and_print_error_message_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_matching_entry_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_matching_entry_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = validate_and_print_error_message_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = validate_and_print_error_message_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_with_params_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_with_params_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_with_params_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = parse_parameter_string_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    read_file_and_store_contents_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = validate_and_print_error_message_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_message_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "current_name": "FUNC_00116b90",
            "entrypoint": "0x00116b90",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00119940": {
            "additional_data": {
                "FUN_00119940": {
                    "check_and_print_error": 8,
                    "check_and_print_error_message": 3,
                    "check_number": 1,
                    "convert_and_print_error_message": 1,
                    "process_bad_numbers": 1,
                    "scan_and_print_error_message": 1,
                    "scan_vma_and_print_error": 1,
                    "validate_and_exit": 1,
                    "validate_and_print_error": 10,
                    "validate_and_print_error_message": 2,
                    "validate_input_and_print_error": 1,
                    "validate_print": 1
                },
                "local_20": {
                    "buffer": 3,
                    "result": 1,
                    "scan_result": 8,
                    "scan_results": 4,
                    "scanned_address": 1,
                    "scanned_data": 1,
                    "scanned_info": 1,
                    "scanned_result": 2,
                    "scanned_value": 2,
                    "scanned_values": 2,
                    "scanned_vma": 3,
                    "scanned_vmas": 1,
                    "vma_array": 1,
                    "vma_buffer": 1
                },
                "param_1": {
                    "address": 7,
                    "file_offset": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_param": 3,
                    "input_value": 6,
                    "memory_address": 2,
                    "value": 2,
                    "virtual_address": 1,
                    "vma": 3,
                    "vma_address": 4
                },
                "param_2": {
                    "bad_number": 2,
                    "error_code": 1,
                    "error_message": 14,
                    "error_param": 1,
                    "error_value": 1,
                    "filename": 1,
                    "message": 8,
                    "number": 1,
                    "output_param": 2
                },
                "uVar1": {
                    "error_message": 9,
                    "error_message_ptr": 1,
                    "error_msg": 2,
                    "error_string": 2,
                    "error_text": 1,
                    "localized_error": 3,
                    "localized_error_message": 2,
                    "translated_error": 1,
                    "translated_error_message": 2,
                    "translation": 1
                }
            },
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid validate_and_print_error_message_00119940(undefined8 address,undefined8 error_message)\n\n{\n  undefined8 error_message;\n  char *scan_result [2];\n  \n  bfd_scan_vma(address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(error_message,error_message,address);\n}\n\n",
            "current_name": "validate_and_print_error_message_00119940",
            "entrypoint": "0x00119940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119940": "validate_and_print_error_message_00119940",
                "local_20": "scan_result",
                "param_1": "address",
                "param_2": "error_message",
                "uVar1": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119970": {
            "additional_data": {
                "FUN_00119970": {
                    "print_binutils_info": 3,
                    "print_gnu_info": 1,
                    "print_info": 2,
                    "print_license_info": 1,
                    "print_program_info": 2,
                    "print_software_info": 1,
                    "print_version_info": 15,
                    "print_version_information": 4,
                    "print_welcome_message": 2
                },
                "exit": {
                    "terminate_program": 1
                },
                "param_1": {
                    "binutils_version": 1,
                    "compiler_version": 1,
                    "distribution_name": 1,
                    "package_name": 1,
                    "program_name": 5,
                    "version": 15,
                    "version_number": 1,
                    "version_string": 6
                },
                "pcVar1": {
                    "copy_right": 1,
                    "copy_right_message": 2,
                    "copy_right_msg": 1,
                    "copy_right_string": 1,
                    "copy_right_text": 1,
                    "copyright_message": 11,
                    "copyright_msg": 2,
                    "copyright_notice": 2,
                    "copyright_text": 1,
                    "license_info": 1,
                    "localized_copyright": 1,
                    "localized_string": 2,
                    "message": 5
                },
                "printf": {
                    "print": 1
                }
            },
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid print_version_info_00119970(undefined8 version)\n\n{\n  char *copyright_message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyright_message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyright_message);\n  copyright_message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyright_message);\n                    \n  exit(0);\n}\n\n",
            "current_name": "print_version_info_00119970",
            "entrypoint": "0x00119970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "exit": "terminate_program",
                "param_1": "version",
                "pcVar1": "copyright_message",
                "printf": "print"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_001199d0": {
            "additional_data": {
                "DAT_00120324": {
                    "default_temp_directory": 1,
                    "example_directory": 1
                },
                "DAT_001278c0": {
                    "temp_directory": 2,
                    "temporary_directory_path": 1
                },
                "FUN_001199d0": {
                    "improved_print_architecture": 1,
                    "print_bfd_header": 1,
                    "print_bfd_header_info": 1,
                    "print_binary_architectures": 1,
                    "print_binary_data": 4,
                    "print_binary_data_summary": 1,
                    "print_binary_details": 2,
                    "print_binary_header_info": 1,
                    "print_binary_info": 13,
                    "print_binary_information": 1,
                    "print_binary_metadata": 1,
                    "print_binary_targets": 2,
                    "print_formatted_binary_data": 1,
                    "print_formatted_data": 1
                },
                "_stderr": {
                    "standard_error": 2,
                    "stderr": 1
                },
                "_stdout": {
                    "standard_output": 3,
                    "stdout": 1
                },
                "check_directory_permission_0011283f": {
                    "check_dir_permission": 1
                },
                "iVar1": {
                    "column_width": 10,
                    "columns": 7,
                    "columns_width": 1,
                    "max_columns": 3,
                    "num_columns": 3,
                    "output_column_width": 1,
                    "screen_width": 1,
                    "terminal_columns": 1,
                    "total_columns": 1
                },
                "iVar2": {
                    "arch_index": 3,
                    "arch_mach": 1,
                    "arch_mach_index": 2,
                    "counter": 1,
                    "current_target_index": 1,
                    "file_descriptor": 2,
                    "i": 1,
                    "outer_index": 1,
                    "target_id": 1,
                    "target_index": 15
                },
                "iVar3": {
                    "arch_comp": 1,
                    "arch_comparison_result": 1,
                    "arch_index": 1,
                    "arch_iterator": 1,
                    "arch_mach_index": 1,
                    "cmp_result": 2,
                    "comp_result": 1,
                    "compare_result": 2,
                    "comparison_result": 10,
                    "is_unknown": 1,
                    "str_cmp_result": 1,
                    "strcmp_result": 5,
                    "string_comparison_result": 1
                },
                "iVar9": {
                    "arch_and_machine_index": 1,
                    "arch_comp2": 1,
                    "arch_index": 4,
                    "arch_index2": 1,
                    "arch_index_2": 1,
                    "arch_mach": 1,
                    "arch_mach_index": 4,
                    "arch_mach_value": 1,
                    "current_target": 1,
                    "i": 2,
                    "iterator": 2,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "target_index": 4,
                    "target_index2": 1,
                    "target_iterator": 1,
                    "tmp_file_close_result": 1
                },
                "lVar10": {
                    "arch_index": 1,
                    "arch_index_length": 1,
                    "arch_length": 3,
                    "arch_mach_name_length": 1,
                    "directory_length": 2,
                    "file_len": 1,
                    "header_fmt_length": 1,
                    "header_string_length": 1,
                    "header_version_length": 1,
                    "index": 2,
                    "index1": 1,
                    "length": 1,
                    "length1": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "loop_index1": 1,
                    "loop_var1": 3,
                    "num_chars": 1,
                    "outer_loop_index": 1,
                    "path_length": 1,
                    "string_length": 1,
                    "temp_directory_length": 1,
                    "temp_file_path_length": 2,
                    "temp_path_length": 1
                },
                "lVar11": {
                    "arch_index": 4,
                    "arch_index_start": 2,
                    "arch_start": 1,
                    "binary_info_index": 1,
                    "column_index": 1,
                    "current_index": 2,
                    "current_printing_index": 1,
                    "i": 1,
                    "index2": 1,
                    "inner_loop_index": 1,
                    "iteration_index": 1,
                    "length2": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "loop_index2": 1,
                    "loop_index_2": 1,
                    "loop_var2": 3,
                    "offset": 1,
                    "row_count": 1,
                    "start_index": 2,
                    "start_offset": 1,
                    "starting_index": 1,
                    "temp_index": 1
                },
                "local_70": {
                    "arch_count": 1,
                    "arch_index": 4,
                    "arch_index_iterator": 1,
                    "column_width": 1,
                    "counter": 1,
                    "current_index": 1,
                    "index": 4,
                    "iter_index": 1,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "loop_index_2": 1,
                    "loop_var": 1,
                    "negative_index": 2,
                    "negative_one": 1,
                    "negative_threshold": 1,
                    "result": 1,
                    "start_index2": 1,
                    "target_index": 1,
                    "temp_file_descriptor": 3,
                    "unknown_index": 1
                },
                "pcVar12": {
                    "arch_mach_pointer": 1
                },
                "pcVar4": {
                    "header_file": 2,
                    "header_file_message": 1,
                    "header_file_string": 3,
                    "header_format": 4,
                    "header_format_string": 1,
                    "header_message": 7,
                    "header_msg": 1,
                    "header_string": 3,
                    "header_text": 1,
                    "header_version": 6,
                    "header_version_format": 1,
                    "str": 1
                },
                "pcVar6": {
                    "temp_dir": 1,
                    "temp_dir_path": 1,
                    "temp_directory": 2,
                    "temp_file": 1,
                    "temp_file_name": 1,
                    "temp_file_path": 17,
                    "temp_file_prefix": 2,
                    "temp_path": 1,
                    "temporary_directory": 2,
                    "temporary_file_path": 2,
                    "temporary_file_pattern": 1
                },
                "piVar8": {
                    "errno_loc": 1,
                    "errno_location": 5,
                    "errno_ptr": 4,
                    "errno_value": 1,
                    "error_code": 5,
                    "error_code_ptr": 1,
                    "error_location": 1,
                    "error_num": 1,
                    "error_number": 11,
                    "error_pointer": 1
                },
                "ppcVar12": {
                    "arch_and_mach_ptr": 1,
                    "arch_list_ptr": 1,
                    "arch_mach_array": 4,
                    "arch_mach_list": 2,
                    "arch_mach_pointer": 1,
                    "arch_mach_ptr": 4,
                    "arch_mach_string_ptr": 1,
                    "arch_name": 1,
                    "arch_ptr": 1,
                    "architecture_list": 1,
                    "binary_data": 5,
                    "binary_data_pointer": 1,
                    "binary_data_pointers": 1,
                    "binary_data_ptr": 1,
                    "binary_info": 1,
                    "binary_info_array": 1,
                    "loop_ptr": 1,
                    "string_list": 1,
                    "target": 1,
                    "target_info": 1
                },
                "process_binary_data_00119f70": {
                    "process_binary_data": 1
                },
                "sVar5": {
                    "arch_length": 1,
                    "env_var_size": 1,
                    "header_file_message_length": 1,
                    "header_format_length": 1,
                    "header_length": 5,
                    "header_message_length": 1,
                    "header_string_length": 1,
                    "header_version_length": 4,
                    "length": 6,
                    "length_of_substring": 1,
                    "str_len": 2,
                    "str_length": 3,
                    "string_length": 3,
                    "temp_tmplen": 1
                },
                "sVar6": {
                    "env_var_value": 1
                },
                "uVar13": {
                    "max_arch_and_machine_name_length": 1,
                    "max_arch_length": 6,
                    "max_arch_mach_length": 9,
                    "max_arch_mach_name_length": 1,
                    "max_arch_name_length": 4,
                    "max_architecture_length": 1,
                    "max_len": 1,
                    "max_length": 4,
                    "max_size": 1,
                    "max_str_len": 1,
                    "max_string_length": 2
                },
                "uVar14": {
                    "arch_length": 1,
                    "arch_mach_len": 1,
                    "arch_mach_string_length": 1,
                    "arch_name_length": 2,
                    "binary_data_length": 1,
                    "char_counter": 1,
                    "char_length": 1,
                    "length": 1,
                    "loop_counter": 1,
                    "max_string_size": 1,
                    "name_length": 2,
                    "str_len": 1,
                    "str_length": 3,
                    "str_length2": 1,
                    "string_length": 9,
                    "strlen_result": 1,
                    "sub_size": 1,
                    "temp_length": 1,
                    "temp_val": 1
                },
                "uVar7": {
                    "arch_and_machine_name": 1,
                    "arch_mach": 6,
                    "arch_mach_name": 1,
                    "arch_mach_printable": 1,
                    "arch_mach_string": 1,
                    "directory_permission": 1,
                    "perm_check_result": 1,
                    "permission_check_result": 3,
                    "permission_result": 8,
                    "permission_status": 3,
                    "result": 5
                }
            },
            "called": [
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "getenv",
                "bfd_iterate_over_targets",
                "printf",
                "xmalloc",
                "strerror",
                "close",
                "FUN_0011283f",
                "strcpy",
                "free",
                "FUN_00119f70",
                "unlink",
                "FUN_00104943",
                "dcgettext",
                "mkstemps",
                "strlen",
                "abort"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid print_binary_header_info_001199d0(void)\n\n{\n  int column_width;\n  int target_index;\n  int comparison_result;\n  char *header_message;\n  size_t length;\n  char *temp_file_path;\n  undefined8 permission_result;\n  int *error_number;\n  int arch_mach_index;\n  long arch_length;\n  long arch_index;\n  char **binary_data;\n  uint max_arch_mach_length;\n  ulong string_length;\n  int index;\n  \n  header_message = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(header_message,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    header_message = getenv(\"TMPDIR\");\n    permission_result = check_dir_permission(header_message,0);\n    header_message = getenv(\"TMP\");\n    permission_result = check_dir_permission(header_message,permission_result);\n    header_message = getenv(\"TEMP\");\n    permission_result = check_dir_permission(header_message,permission_result);\n    permission_result = check_dir_permission(&DAT_0011b39a,permission_result);\n    permission_result = check_dir_permission(\"/var/tmp\",permission_result);\n    header_message = (char *)check_dir_permission(&DAT_00120324,permission_result);\n    if (header_message == (char *)0x0) {\n      header_message = \".\";\n    }\n    length = strlen(header_message);\n    temp_file_path = (char *)xmalloc((int)length + 2);\n    DAT_001278c0 = strcpy(temp_file_path,header_message);\n    DAT_001278c0[length & 0xffffffff] = '/';\n    DAT_001278c0[(int)length + 1] = '\\0';\n  }\n  header_message = DAT_001278c0;\n  length = strlen(DAT_001278c0);\n  arch_length = (long)(int)length;\n  temp_file_path = (char *)xmalloc(arch_length + 9);\n  strcpy(temp_file_path,header_message);\n  *(undefined2 *)(temp_file_path + arch_length) = 0x6363;\n  *(undefined4 *)(temp_file_path + arch_length + 2) = 0x58585858;\n  *(undefined4 *)((long)(temp_file_path + arch_length + 2) + 3) = 0x585858;\n  temp_file_path[arch_length + 8] = '\\0';\n  target_index = mkstemps(temp_file_path,0);\n  if (target_index == -1) {\n    error_number = __errno_location();\n    temp_file_path = strerror(*error_number);\n    fprintf(standard_error,\"Cannot create temporary file in %s: %s\\n\",header_message,temp_file_path);\n                    \n    abort();\n  }\n  target_index = close(target_index);\n  if (target_index != 0) {\n                    \n    abort();\n  }\n  max_arch_mach_length = 0;\n  target_index = 2;\n  bfd_iterate_over_targets(process_binary_data);\n  unlink(temp_file_path);\n  free(temp_file_path);\n  index = 0;\n  do {\n    header_message = (char *)bfd_printable_arch_mach(target_index);\n    length = strlen(header_message);\n    if ((int)max_arch_mach_length < (int)(uint)length) {\n      max_arch_mach_length = (uint)length;\n    }\n    target_index = target_index + 1;\n  } while (target_index != 0x57);\n  header_message = getenv(\"COLUMNS\");\n  target_index = index;\n  if (header_message != (char *)0x0) {\n    arch_length = strtol(header_message,(char **)0x0,10);\n    column_width = (int)arch_length;\n    if (column_width != 0) goto LAB_00119b11;\n  }\n  column_width = 0x50;\nLAB_00119b11:\n  do {\n    index = target_index;\n    if (-1 < index) {\n      return;\n    }\n    arch_index = (long)index;\n    arch_mach_index = (column_width - max_arch_mach_length) + -1;\n    arch_length = arch_index;\n    do {\n      target_index = (int)arch_length;\n      if (-1 < target_index) break;\n      length = strlen(*(char **)(arch_length * 0x60));\n      arch_length = arch_length + 1;\n      arch_mach_index = (arch_mach_index - (int)length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(max_arch_mach_length + 1),&DAT_0011b4a1);\n    for (binary_data = (char **)(arch_index * 0x60);\n        ((ulong)(uint)(target_index - index) + arch_index) * 0x60 - (long)binary_data != 0;\n        binary_data = binary_data + 0xc) {\n      printf(\"%s \",*binary_data);\n    }\n    arch_mach_index = 2;\n    putc(10,standard_output);\n    do {\n      header_message = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      comparison_result = strcmp(header_message,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        permission_result = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)max_arch_mach_length,permission_result);\n        binary_data = (char **)(arch_index * 0x60);\n        comparison_result = index;\n        while (target_index != comparison_result) {\n          if (*(char *)((long)binary_data + (ulong)(arch_mach_index - 2) + 8) == '\\0') {\n            length = strlen(*binary_data);\n            for (string_length = length & 0xffffffff; (int)string_length != 0; string_length = (ulong)((int)string_length - 1)) {\n              putc(0x2d,standard_output);\n            }\n          }\n          else {\n            fputs(*binary_data,standard_output);\n          }\n          comparison_result = comparison_result + 1;\n          if (target_index != comparison_result) {\n            putc(0x20,standard_output);\n          }\n          binary_data = binary_data + 0xc;\n        }\n        putc(10,standard_output);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "current_name": "print_binary_header_info_001199d0",
            "entrypoint": "0x001199d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_001199d0": "print_binary_header_info_001199d0",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "check_directory_permission_0011283f": "check_dir_permission",
                "iVar1": "column_width",
                "iVar2": "target_index",
                "iVar3": "comparison_result",
                "iVar9": "arch_mach_index",
                "lVar10": "arch_length",
                "lVar11": "arch_index",
                "local_70": "index",
                "pcVar12": "arch_mach_pointer",
                "pcVar4": "header_message",
                "pcVar6": "temp_file_path",
                "piVar8": "error_number",
                "ppcVar12": "binary_data",
                "process_binary_data_00119f70": "process_binary_data",
                "sVar5": "length",
                "uVar13": "max_arch_mach_length",
                "uVar14": "string_length",
                "uVar7": "permission_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119dd0": {
            "additional_data": {
                "FUN_00119dd0": {
                    "print_and_exit": 6,
                    "print_error_and_exit": 20,
                    "print_error_message": 1,
                    "print_error_message_and_exit": 4
                },
                "in_AL": {
                    "bool_flag": 1,
                    "condition": 7,
                    "condition_flag": 1,
                    "flag": 8,
                    "is_error": 7,
                    "is_error_present": 1,
                    "should_print_error": 1,
                    "should_print_error_message": 1
                },
                "local_18": {
                    "arg8_copy": 1,
                    "flag_code": 1,
                    "local_18": 2,
                    "local_22": 1,
                    "local_param8": 3,
                    "local_param_8": 1,
                    "local_value8": 1,
                    "param8": 1,
                    "param8_copy": 8,
                    "param_8": 3,
                    "param_8_copy": 6,
                    "param_8_ptr": 1
                },
                "local_28": {
                    "arg7_copy": 1,
                    "local_21": 1,
                    "local_28": 2,
                    "local_param7": 3,
                    "local_param_7": 1,
                    "local_value7": 1,
                    "param7": 1,
                    "param7_copy": 8,
                    "param_7": 3,
                    "param_7_copy": 6,
                    "param_7_ptr": 1,
                    "status_code": 1
                },
                "local_38": {
                    "arg6_copy": 1,
                    "config_code": 1,
                    "local_20": 1,
                    "local_38": 2,
                    "local_param6": 3,
                    "local_param_6": 1,
                    "local_value6": 1,
                    "param6": 1,
                    "param6_copy": 8,
                    "param_6": 3,
                    "param_6_copy": 6,
                    "param_6_ptr": 1
                },
                "local_48": {
                    "arg5_copy": 1,
                    "local_19": 1,
                    "local_48": 2,
                    "local_param5": 3,
                    "local_param_5": 1,
                    "local_value5": 1,
                    "output_code": 1,
                    "param5": 1,
                    "param5_copy": 8,
                    "param_5": 3,
                    "param_5_copy": 6,
                    "param_5_ptr": 1
                },
                "local_58": {
                    "arg4_copy": 1,
                    "input_code": 1,
                    "local_18": 1,
                    "local_58": 2,
                    "local_param4": 3,
                    "local_param_4": 1,
                    "local_value4": 1,
                    "param4": 1,
                    "param4_copy": 8,
                    "param_4": 3,
                    "param_4_copy": 6,
                    "param_4_ptr": 1
                },
                "local_68": {
                    "arg3_copy": 1,
                    "data_code": 1,
                    "local_17": 1,
                    "local_68": 2,
                    "local_param3": 3,
                    "local_param_3": 1,
                    "local_value3": 1,
                    "param3": 1,
                    "param3_copy": 8,
                    "param_3": 3,
                    "param_3_copy": 6,
                    "param_3_ptr": 1
                },
                "local_78": {
                    "arg2_copy": 1,
                    "local_16": 1,
                    "local_78": 2,
                    "local_param2": 3,
                    "local_param_2": 1,
                    "local_value2": 1,
                    "message_code": 1,
                    "param2": 1,
                    "param2_copy": 8,
                    "param_2": 3,
                    "param_2_copy": 6,
                    "param_2_ptr": 1
                },
                "local_88": {
                    "error_code": 3,
                    "error_code_copy": 7,
                    "error_code_ptr": 1,
                    "local_15": 1,
                    "local_88": 2,
                    "local_error_code": 1,
                    "local_param1": 3,
                    "local_value1": 1,
                    "param1": 1,
                    "param1_copy": 2,
                    "param_1": 1,
                    "param_1_copy": 6
                },
                "local_90": {
                    "buffer5": 1,
                    "data5": 1,
                    "local_14": 1,
                    "local_message5": 1,
                    "local_param_14": 1,
                    "param14": 1,
                    "param14_copy": 10,
                    "param_14": 6,
                    "param_14_copy": 6,
                    "param_14_ptr": 1,
                    "param_19": 1,
                    "temp14": 1
                },
                "local_98": {
                    "buffer4": 1,
                    "data4": 1,
                    "local_13": 1,
                    "local_message4": 1,
                    "local_param_13": 1,
                    "param13": 1,
                    "param13_copy": 10,
                    "param_13": 6,
                    "param_13_copy": 6,
                    "param_13_ptr": 1,
                    "param_18": 1,
                    "temp13": 1
                },
                "local_a0": {
                    "buffer3": 1,
                    "data3": 1,
                    "local_12": 1,
                    "local_message3": 1,
                    "local_param_12": 1,
                    "param12": 1,
                    "param12_copy": 10,
                    "param_12": 6,
                    "param_12_copy": 6,
                    "param_12_ptr": 1,
                    "param_17": 1,
                    "temp12": 1
                },
                "local_a8": {
                    "buffer2": 1,
                    "data2": 1,
                    "local_11": 1,
                    "local_message2": 1,
                    "local_param_11": 1,
                    "param11": 1,
                    "param11_copy": 10,
                    "param_11": 6,
                    "param_11_copy": 6,
                    "param_11_ptr": 1,
                    "param_16": 1,
                    "temp11": 1
                },
                "local_b0": {
                    "buffer1": 1,
                    "data1": 1,
                    "local_10": 1,
                    "local_message1": 1,
                    "local_param_10": 1,
                    "param10": 1,
                    "param10_copy": 10,
                    "param_10": 6,
                    "param_10_copy": 6,
                    "param_10_ptr": 1,
                    "param_15": 1,
                    "temp10": 1
                },
                "local_b8": {
                    "buffer": 2,
                    "char_buffer": 1,
                    "error_buffer": 4,
                    "error_message_array": 1,
                    "local_array": 2,
                    "local_b8_buffer": 1,
                    "local_buffer": 4,
                    "local_data": 1,
                    "local_sub": 1,
                    "local_variable": 1,
                    "output_buffer": 1,
                    "result_buffer": 1,
                    "temp_buffer": 4,
                    "temporary_buffer": 1,
                    "unused": 1,
                    "unused_buffer": 1
                },
                "local_c8": {
                    "buffer": 5,
                    "local_b8_address": 1,
                    "local_b8_ptr": 1,
                    "local_buffer": 16,
                    "local_buffer1": 1,
                    "local_c8": 1,
                    "local_data": 2,
                    "local_error_buffer": 1,
                    "local_var3": 1,
                    "local_var_2": 1
                },
                "local_d0": {
                    "array_start": 1,
                    "buffer": 10,
                    "buffer_pointer": 3,
                    "buffer_ptr": 4,
                    "data_ptr": 1,
                    "local_address": 1,
                    "local_pointer1": 1,
                    "local_sub_buffer": 1,
                    "local_var2": 1,
                    "message_buffer": 1,
                    "pointer": 1,
                    "stack_buffer": 1,
                    "stack_pointer": 1,
                    "stack_ptr": 1,
                    "stack_var_1": 1
                },
                "local_d4": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "characters_to_print": 1,
                    "copy_len": 1,
                    "local_b8_size": 2,
                    "local_d4": 1,
                    "local_size2": 1,
                    "local_sub_size": 1,
                    "local_var": 1,
                    "local_var1": 2,
                    "local_var_1": 1,
                    "message_buffer_size": 1,
                    "offset": 2,
                    "size": 2
                },
                "local_d8": {
                    "array_size": 1,
                    "buffer_len": 1,
                    "buffer_size": 13,
                    "count": 1,
                    "data_size": 1,
                    "error_code_size": 1,
                    "error_message_length": 1,
                    "length": 2,
                    "local_buffer_size": 1,
                    "local_size": 1,
                    "local_size1": 1,
                    "num_bytes": 1,
                    "size": 5,
                    "stack_size": 1
                },
                "param_1": {
                    "error_code": 30,
                    "error_message": 1
                },
                "param_10": {
                    "data1": 1,
                    "message1": 1,
                    "param10": 13,
                    "param_10": 15,
                    "param_9": 1
                },
                "param_11": {
                    "data2": 1,
                    "message2": 1,
                    "param11": 13,
                    "param_10": 1,
                    "param_11": 15
                },
                "param_12": {
                    "data3": 1,
                    "message3": 1,
                    "param12": 13,
                    "param_11": 1,
                    "param_12": 15
                },
                "param_13": {
                    "data4": 1,
                    "message4": 1,
                    "param13": 13,
                    "param_12": 1,
                    "param_13": 15
                },
                "param_14": {
                    "data5": 1,
                    "message5": 1,
                    "param14": 13,
                    "param_13": 1,
                    "param_14": 15
                },
                "param_2": {
                    "arg2": 1,
                    "error_message": 1,
                    "message_code": 2,
                    "param2": 13,
                    "param_2": 14
                },
                "param_3": {
                    "arg3": 1,
                    "data_code": 1,
                    "param3": 14,
                    "param_3": 15
                },
                "param_4": {
                    "arg4": 1,
                    "input_code": 1,
                    "param4": 14,
                    "param_4": 15
                },
                "param_5": {
                    "arg5": 1,
                    "output_code": 1,
                    "param5": 14,
                    "param_5": 15
                },
                "param_6": {
                    "arg6": 1,
                    "config_code": 1,
                    "param6": 14,
                    "param_6": 15
                },
                "param_7": {
                    "arg7": 1,
                    "param7": 14,
                    "param_7": 15,
                    "status_code": 1
                },
                "param_8": {
                    "arg8": 1,
                    "flag_code": 1,
                    "param8": 14,
                    "param_8": 15
                },
                "param_9": {
                    "address": 1,
                    "error_address": 1,
                    "error_code": 1,
                    "error_handler": 1,
                    "error_location": 1,
                    "error_message": 22,
                    "message": 3,
                    "param_9": 1
                }
            },
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "calling": [
                "FUN_001053b5",
                "FUN_0010543c",
                "FUN_001083de",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00104920",
                "FUN_0010827b",
                "FUN_00114690",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00104ad6",
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00114dc7",
                "FUN_0010554f",
                "FUN_00108808"
            ],
            "code": "\nvoid print_error_message_and_exit_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined temp_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param_2;\n    param3_copy = param_3;\n    param4_copy = param_4;\n    param5_copy = param_5;\n    param6_copy = param_6;\n    param7_copy = param_7;\n    param8_copy = param_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = temp_buffer;\n  offset = 0x30;\n  param10_copy = error_code0;\n  param11_copy = error_code1;\n  param12_copy = error_code2;\n  param13_copy = error_code3;\n  param14_copy = error_code4;\n  print_error_message_00119e70(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "current_name": "print_error_message_and_exit_00119dd0",
            "entrypoint": "0x00119dd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119dd0": "print_error_message_and_exit_00119dd0",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "temp_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "offset",
                "local_d8": "buffer_size",
                "param_1": "error_code",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119e70": {
            "additional_data": {
                "FUN_00119e70": {
                    "print_error": 1,
                    "print_error_message": 27,
                    "print_formatted_message": 3
                },
                "__gnuc_va_list": {
                    "variable_arguments": 1
                },
                "_stderr": {
                    "standard_error": 19,
                    "stderr": 1,
                    "stderr_file": 1,
                    "stderr_stream": 3
                },
                "_stdout": {
                    "standard_output": 19,
                    "stdout": 1,
                    "stdout_file": 1,
                    "stdout_stream": 3
                },
                "fflush": {
                    "flush_standard_output": 1
                },
                "fprintf": {
                    "formatted_print": 1,
                    "print_to_standard_error": 1
                },
                "param_1": {
                    "error_message": 12,
                    "format_string": 7,
                    "message": 11,
                    "message_format": 1
                },
                "param_2": {
                    "args": 10,
                    "argument_list": 1,
                    "arguments": 14,
                    "format_arguments": 2,
                    "varargs": 1,
                    "variable_arguments": 2
                },
                "putc": {
                    "print_character": 1,
                    "print_line": 1,
                    "print_new_line": 1,
                    "put_character": 1,
                    "put_character_to_standard_error": 1
                },
                "stderr": {
                    "standard_error": 1
                },
                "stdout": {
                    "standard_output": 1
                }
            },
            "called": [
                "fprintf",
                "putc",
                "vfprintf",
                "fflush"
            ],
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "code": "\n\n\nvoid print_error_message_00119e70(char *error_message,variable_arguments arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_001275e0);\n  vfprintf(standard_error,error_message,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "current_name": "print_error_message_00119e70",
            "entrypoint": "0x00119e70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "__gnuc_va_list": "variable_arguments",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "fflush": "flush_standard_output",
                "fprintf": "print_to_standard_error",
                "param_1": "error_message",
                "param_2": "arguments",
                "putc": "put_character_to_standard_error",
                "stderr": "standard_error",
                "stdout": "standard_output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119ed0": {
            "additional_data": {
                "FUN_00119ed0": {
                    "print_error": 3,
                    "print_error_and_log": 1,
                    "print_error_and_parameters": 1,
                    "print_error_message": 24,
                    "print_error_message_with_params": 1,
                    "print_error_with_parameters": 1
                },
                "in_AL": {
                    "character": 1,
                    "condition": 2,
                    "condition_flag": 2,
                    "error_flag": 1,
                    "flag": 12,
                    "input_flag": 1,
                    "input_valid": 1,
                    "is_condition_true": 1,
                    "is_error": 4,
                    "is_error_flag": 1,
                    "is_error_set": 1,
                    "is_exception": 1,
                    "should_print_error": 1,
                    "true_condition": 1
                },
                "local_18": {
                    "error8": 2,
                    "error_param8_copy": 1,
                    "error_subsystem_copy": 1,
                    "local_18": 1,
                    "local_array16": 1,
                    "local_data_8": 1,
                    "local_param_8": 1,
                    "param8": 6,
                    "param8_copy": 9,
                    "param8_local": 1,
                    "param_8": 2,
                    "param_8_copy": 1,
                    "temp8": 1,
                    "temp_param8": 1,
                    "unused8": 1
                },
                "local_28": {
                    "error7": 2,
                    "error_module_copy": 1,
                    "error_param7_copy": 1,
                    "local_28": 1,
                    "local_array15": 1,
                    "local_data_7": 1,
                    "local_param_7": 1,
                    "param7": 6,
                    "param7_copy": 9,
                    "param7_local": 1,
                    "param_7": 2,
                    "param_7_copy": 1,
                    "temp7": 1,
                    "temp_param7": 1,
                    "unused7": 1
                },
                "local_38": {
                    "error6": 2,
                    "error_action_copy": 1,
                    "error_param6_copy": 1,
                    "local_38": 1,
                    "local_array14": 1,
                    "local_data_6": 1,
                    "local_param_6": 1,
                    "param6": 6,
                    "param6_copy": 9,
                    "param6_local": 1,
                    "param_6": 2,
                    "param_6_copy": 1,
                    "temp6": 1,
                    "temp_param6": 1,
                    "unused6": 1
                },
                "local_48": {
                    "error5": 2,
                    "error_location_copy": 1,
                    "error_param5_copy": 1,
                    "local_48": 1,
                    "local_array13": 1,
                    "local_data_5": 1,
                    "local_param_5": 1,
                    "message_copy": 1,
                    "param5": 6,
                    "param5_copy": 9,
                    "param5_local": 1,
                    "param_5": 2,
                    "temp5": 1,
                    "temp_param5": 1,
                    "unused5": 1
                },
                "local_58": {
                    "error4": 2,
                    "error_param4_copy": 1,
                    "error_severity_copy": 1,
                    "function_name_copy": 1,
                    "local_58": 1,
                    "local_array12": 1,
                    "local_data_4": 1,
                    "local_param_4": 1,
                    "param4": 6,
                    "param4_copy": 9,
                    "param4_local": 1,
                    "param_4": 2,
                    "temp4": 1,
                    "temp_param4": 1,
                    "unused4": 1
                },
                "local_68": {
                    "error3": 2,
                    "error_category_copy": 1,
                    "error_param3_copy": 1,
                    "file_name_copy": 1,
                    "local_68": 1,
                    "local_array11": 1,
                    "local_data_3": 1,
                    "local_param_3": 1,
                    "param3": 6,
                    "param3_copy": 9,
                    "param3_local": 1,
                    "param_3": 2,
                    "temp3": 1,
                    "temp_param3": 1,
                    "unused3": 1
                },
                "local_78": {
                    "error2": 2,
                    "error_param2_copy": 1,
                    "error_type_copy": 1,
                    "line_number_copy": 1,
                    "local_78": 1,
                    "local_array10": 1,
                    "local_data_2": 1,
                    "local_param_2": 1,
                    "param2": 6,
                    "param2_copy": 9,
                    "param2_local": 1,
                    "param_2": 2,
                    "temp2": 1,
                    "temp_param2": 1,
                    "unused2": 1
                },
                "local_88": {
                    "error1": 2,
                    "error_code": 6,
                    "error_code_copy": 11,
                    "error_code_local": 1,
                    "local_88": 1,
                    "local_array9": 1,
                    "local_data_1": 1,
                    "local_param_1": 1,
                    "param1_copy": 1,
                    "param_1": 2,
                    "temp1": 1,
                    "temp_param1": 1,
                    "unused1": 1
                },
                "local_90": {
                    "local_90": 1,
                    "local_array8": 1,
                    "local_param_14": 2,
                    "message6": 1,
                    "param14": 4,
                    "param14_copy": 12,
                    "param15": 1,
                    "param6": 1,
                    "param_14": 2,
                    "param_14_copy": 1,
                    "temp14": 1,
                    "var14": 1,
                    "var5_copy": 1,
                    "variable5": 1
                },
                "local_98": {
                    "local_98": 1,
                    "local_array7": 1,
                    "local_param_13": 2,
                    "message5": 1,
                    "param13": 4,
                    "param13_copy": 12,
                    "param14": 1,
                    "param5": 1,
                    "param_13": 2,
                    "param_13_copy": 1,
                    "temp13": 1,
                    "var13": 1,
                    "var4_copy": 1,
                    "variable4": 1
                },
                "local_a0": {
                    "local_a0": 1,
                    "local_array6": 1,
                    "local_param_12": 2,
                    "message4": 1,
                    "param12": 4,
                    "param12_copy": 12,
                    "param13": 1,
                    "param4": 1,
                    "param_12": 2,
                    "param_12_copy": 1,
                    "temp12": 1,
                    "var12": 1,
                    "var3_copy": 1,
                    "variable3": 1
                },
                "local_a8": {
                    "local_a8": 1,
                    "local_array5": 1,
                    "local_param_11": 2,
                    "message3": 1,
                    "param11": 4,
                    "param11_copy": 12,
                    "param12": 1,
                    "param3": 1,
                    "param_11": 2,
                    "param_11_copy": 1,
                    "temp11": 1,
                    "var11": 1,
                    "var2_copy": 1,
                    "variable2": 1
                },
                "local_b0": {
                    "local_array4": 1,
                    "local_b0": 1,
                    "local_param_10": 2,
                    "message2": 1,
                    "param10": 4,
                    "param10_copy": 12,
                    "param11": 1,
                    "param2": 1,
                    "param_10": 2,
                    "param_10_copy": 1,
                    "temp10": 1,
                    "var10": 1,
                    "var1_copy": 1,
                    "variable1": 1
                },
                "local_b8": {
                    "buffer": 4,
                    "error_buffer": 4,
                    "error_buffer_storage": 1,
                    "error_code_buffer": 1,
                    "error_text": 1,
                    "local_array": 3,
                    "local_array3": 1,
                    "local_b8": 2,
                    "local_buffer": 3,
                    "local_error_array": 1,
                    "local_string": 1,
                    "message_buffer": 1,
                    "output_array": 1,
                    "stack_buffer": 1,
                    "temp_buffer": 3,
                    "temporary_array": 1,
                    "unused_buffer": 1
                },
                "local_c8": {
                    "buffer": 3,
                    "buffer_ptr": 1,
                    "error_buffer": 1,
                    "local_array": 2,
                    "local_array2": 1,
                    "local_b8_buffer": 1,
                    "local_buffer": 13,
                    "local_buffer_start": 1,
                    "local_c8": 2,
                    "local_ptr": 1,
                    "local_string_pointer2": 1,
                    "local_var3": 1,
                    "local_variable1": 1
                },
                "local_d0": {
                    "buffer": 8,
                    "buffer_addr": 1,
                    "buffer_address": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 4,
                    "error_buffer_pointer": 1,
                    "local_array1": 1,
                    "local_buffer": 1,
                    "local_buffer_pointer": 1,
                    "local_ptr": 1,
                    "local_string_pointer1": 1,
                    "local_var2": 1,
                    "pointer": 1,
                    "pointer_to_stack": 1,
                    "source": 1,
                    "stack_array": 1,
                    "stack_pointer": 2,
                    "stack_ptr": 1
                },
                "local_d4": {
                    "buffer_length": 2,
                    "buffer_offset": 1,
                    "buffer_size": 1,
                    "constant": 2,
                    "error_code_max_length": 1,
                    "error_message_length": 1,
                    "length": 4,
                    "local_52": 1,
                    "local_buffer_length": 1,
                    "local_buffer_size": 1,
                    "local_char": 1,
                    "local_d4": 2,
                    "local_var1": 1,
                    "local_variable": 1,
                    "local_variable2": 3
                },
                "local_d8": {
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 10,
                    "count": 1,
                    "error_code_length": 1,
                    "error_code_size": 1,
                    "local_buffer_size": 2,
                    "local_variable1": 2,
                    "size": 12
                },
                "param_1": {
                    "error": 1,
                    "error1": 1,
                    "error_code": 29
                },
                "param_10": {
                    "buffer": 1,
                    "error_param10": 1,
                    "message1": 1,
                    "param10": 18,
                    "param2": 1,
                    "param_10": 7,
                    "value1": 1,
                    "var1": 1
                },
                "param_11": {
                    "error_param11": 1,
                    "message2": 1,
                    "param11": 19,
                    "param3": 1,
                    "param_11": 7,
                    "value2": 1,
                    "var2": 1
                },
                "param_12": {
                    "error_param12": 1,
                    "message3": 1,
                    "param12": 19,
                    "param4": 1,
                    "param_12": 7,
                    "value3": 1,
                    "var3": 1
                },
                "param_13": {
                    "error_param13": 1,
                    "message4": 1,
                    "param13": 19,
                    "param5": 1,
                    "param_13": 7,
                    "value4": 1,
                    "var4": 1
                },
                "param_14": {
                    "error_param14": 1,
                    "message5": 1,
                    "param14": 19,
                    "param6": 1,
                    "param_14": 7,
                    "value5": 1,
                    "var5": 1
                },
                "param_2": {
                    "error2": 1,
                    "error_param2": 1,
                    "error_type": 1,
                    "line_number": 1,
                    "param2": 20,
                    "param_2": 5,
                    "parameter1": 1,
                    "severity": 1
                },
                "param_3": {
                    "data_1": 1,
                    "error3": 1,
                    "error_category": 1,
                    "error_param3": 1,
                    "file_name": 1,
                    "param3": 20,
                    "param_3": 5,
                    "parameter2": 1
                },
                "param_4": {
                    "data_2": 1,
                    "error4": 1,
                    "error_param4": 1,
                    "error_severity": 1,
                    "function_name": 1,
                    "param4": 20,
                    "param_4": 5,
                    "parameter3": 1
                },
                "param_5": {
                    "data_3": 1,
                    "error5": 1,
                    "error_location": 1,
                    "error_param5": 1,
                    "message": 1,
                    "param5": 20,
                    "param_5": 5,
                    "parameter4": 1
                },
                "param_6": {
                    "data_4": 1,
                    "error6": 1,
                    "error_action": 1,
                    "error_param6": 1,
                    "param6": 20,
                    "param_6": 6,
                    "parameter5": 1
                },
                "param_7": {
                    "data_5": 1,
                    "error7": 1,
                    "error_module": 1,
                    "error_param7": 1,
                    "param7": 20,
                    "param_7": 6,
                    "parameter6": 1
                },
                "param_8": {
                    "data_6": 1,
                    "error8": 1,
                    "error_param8": 1,
                    "error_subsystem": 1,
                    "param8": 20,
                    "param_8": 6,
                    "parameter7": 1
                },
                "param_9": {
                    "error_details": 1,
                    "error_message": 20,
                    "error_msg": 2,
                    "error_string": 1,
                    "file_pointer": 1,
                    "message": 1,
                    "param1": 1,
                    "param9": 3,
                    "param_9": 1
                }
            },
            "called": [
                "FUN_00119e70"
            ],
            "calling": [
                "FUN_00104cc1",
                "FUN_00104966",
                "FUN_00105828",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_001163d0",
                "FUN_001086af",
                "FUN_0010e07c",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_0010dac0",
                "FUN_00108375",
                "FUN_0010b800",
                "FUN_001152b6",
                "FUN_0011378f",
                "FUN_00107880",
                "FUN_00104ad6",
                "FUN_00116b90",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_0010554f",
                "FUN_0010ba08",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid print_error_message_with_params_00119ed0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined error_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  local_buffer = error_buffer;\n  length = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00119e70(error_message,&size);\n  return;\n}\n\n",
            "current_name": "print_error_message_with_params_00119ed0",
            "entrypoint": "0x00119ed0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119ed0": "print_error_message_with_params_00119ed0",
                "in_AL": "flag",
                "local_18": "param8_copy",
                "local_28": "param7_copy",
                "local_38": "param6_copy",
                "local_48": "param5_copy",
                "local_58": "param4_copy",
                "local_68": "param3_copy",
                "local_78": "param2_copy",
                "local_88": "error_code_copy",
                "local_90": "param14_copy",
                "local_98": "param13_copy",
                "local_a0": "param12_copy",
                "local_a8": "param11_copy",
                "local_b0": "param10_copy",
                "local_b8": "error_buffer",
                "local_c8": "local_buffer",
                "local_d0": "buffer",
                "local_d4": "length",
                "local_d8": "size",
                "param_1": "error_code",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00119f70": {
            "additional_data": {
                "FUN_00119f70": {
                    "analyze_and_print_binary": 1,
                    "parse_and_print_header": 2,
                    "parse_bfd_header": 1,
                    "parse_binary": 1,
                    "parse_header_and_data": 2,
                    "process_binary": 1,
                    "process_binary_data": 3,
                    "process_data": 8,
                    "process_data_and_print": 1,
                    "process_header": 4,
                    "process_header_data": 1,
                    "reformat_and_print_header": 1,
                    "reverse_and_print_binary_header": 1,
                    "write_data": 1
                },
                "__format": {
                    "format": 1,
                    "format_str": 4,
                    "format_string": 22,
                    "message_format": 2,
                    "output_format": 1,
                    "text_format": 1
                },
                "bfd_close_all_done": {
                    "cleanup": 1,
                    "close_all_bfds": 1,
                    "close_all_done": 2,
                    "close_bfd_all_done": 1,
                    "close_binary_file": 2,
                    "close_file": 3
                },
                "bfd_get_error": {
                    "get_bfd_error": 6,
                    "get_error": 2,
                    "get_error_code": 1,
                    "get_file_error": 1
                },
                "bfd_openw": {
                    "open_bfd_write_mode": 1,
                    "open_binary_file": 3,
                    "open_file": 1,
                    "open_output_file": 2,
                    "open_write": 2,
                    "open_write_file": 1
                },
                "bfd_printable_arch_mach": {
                    "get_arch_mach_description": 1,
                    "get_arch_mach_info": 1,
                    "get_architecture_info": 1,
                    "get_architecture_machine": 1,
                    "get_architecture_string": 1,
                    "get_printable_arch_mach": 1,
                    "get_printable_architecture": 1,
                    "print_arch_mach": 1,
                    "printable_arch_mach": 1,
                    "printable_architecture_machine": 1
                },
                "bfd_set_format": {
                    "set_bfd_format": 4,
                    "set_binary_format": 2,
                    "set_file_format": 1,
                    "set_format": 2,
                    "set_output_format": 1
                },
                "cVar2": {
                    "char_val": 1,
                    "char_value": 1,
                    "char_var": 1,
                    "character": 1,
                    "error_check": 1,
                    "flag": 7,
                    "format_status": 1,
                    "is_successful": 1,
                    "result": 10,
                    "status": 2,
                    "success": 4,
                    "success_flag": 1
                },
                "dcgettext": {
                    "get_i18n_text": 1,
                    "get_text": 1,
                    "get_translated_string": 1,
                    "translate": 1,
                    "translate_string": 1
                },
                "do_output": {
                    "output_architecture_types": 1
                },
                "get_endianness_description_00114e00": {
                    "get_endian_desc": 1,
                    "get_endianness_desc": 1,
                    "get_endianness_description": 5
                },
                "iVar3": {
                    "arch_count": 1,
                    "arch_id": 1,
                    "arch_mach": 1,
                    "arch_mach_iteration": 1,
                    "arch_mach_num": 1,
                    "arch_mach_type": 1,
                    "arch_mach_value": 2,
                    "count": 2,
                    "counter": 2,
                    "format_count": 1,
                    "format_index": 3,
                    "format_value": 1,
                    "i": 1,
                    "index": 11,
                    "iteration": 1,
                    "iterator": 1
                },
                "lVar6": {
                    "alloc_size": 3,
                    "allocated_memory_size": 1,
                    "allocated_size": 3,
                    "allocation_size": 5,
                    "block_size": 1,
                    "buffer_size": 11,
                    "data_length": 1,
                    "data_size": 2,
                    "max_size": 1,
                    "memory_size": 1,
                    "size": 1,
                    "size_1": 1
                },
                "lVar8": {
                    "allocated_memory": 5,
                    "allocated_size": 1,
                    "allocation_address": 1,
                    "buffer": 3,
                    "buffer_pointer": 1,
                    "data_ptr": 1,
                    "new_block_ptr": 1,
                    "new_buffer": 4,
                    "new_buffer_size": 2,
                    "new_data_ptr": 1,
                    "realloc_output": 1,
                    "realloc_ptr": 1,
                    "realloc_result": 6,
                    "realloc_val": 1,
                    "reallocated_buffer": 1,
                    "size_2": 1
                },
                "memset": {
                    "fill_memory": 1,
                    "initialize_memory": 1
                },
                "param_1": {
                    "binary_header": 2,
                    "header": 15,
                    "header_data": 9,
                    "header_info": 2,
                    "headers": 1,
                    "input_data": 1,
                    "input_header": 1
                },
                "param_2": {
                    "binary_data": 1,
                    "binary_info": 4,
                    "data": 7,
                    "data_buffer": 1,
                    "data_info": 2,
                    "file_data": 2,
                    "file_info": 1,
                    "header_info": 1,
                    "output": 5,
                    "output_data": 3,
                    "output_file": 1,
                    "output_file_info": 1,
                    "output_info": 2
                },
                "print_error_message_0011a110": {
                    "print_error": 1,
                    "print_error_message": 9
                },
                "printf": {
                    "print": 1,
                    "print_formatted": 1,
                    "print_formatted_output": 1,
                    "print_formatted_string": 1,
                    "print_formatted_text": 1,
                    "print_string": 1
                },
                "uVar1": {
                    "endian_desc_1": 1,
                    "endian_desc_header": 1,
                    "endian_format": 1,
                    "endian_type": 1,
                    "endian_value": 1,
                    "endianness_description_1": 1,
                    "endianness_header": 1,
                    "error_code": 1,
                    "format": 1,
                    "header_format": 3,
                    "header_length": 1,
                    "header_size": 3,
                    "result": 3,
                    "status": 12
                },
                "uVar4": {
                    "endian_desc_1": 1,
                    "endian_desc_2": 1,
                    "endian_desc_data": 1,
                    "endianness_desc_1": 1,
                    "endianness_desc_header": 1,
                    "endianness_description_2": 1,
                    "endianness_description_header": 1,
                    "header_desc": 5,
                    "header_description": 8,
                    "header_endian": 1,
                    "header_endian_desc": 1,
                    "header_endianness": 2,
                    "header_endianness_desc": 2,
                    "header_endianness_description": 5
                },
                "uVar5": {
                    "data_desc": 5,
                    "data_description": 8,
                    "data_endian": 1,
                    "data_endian_desc": 1,
                    "data_endianness": 2,
                    "data_endianness_desc": 2,
                    "data_endianness_description": 5,
                    "endian_desc_2": 1,
                    "endian_desc_3": 1,
                    "endian_desc_header_info": 1,
                    "endianness_desc_2": 1,
                    "endianness_desc_data": 1,
                    "endianness_description_3": 1,
                    "endianness_description_data": 1
                },
                "uVar7": {
                    "arch_mach_value_tmp": 1,
                    "binary_value": 1,
                    "current_header": 2,
                    "data_pointer": 1,
                    "file_name": 1,
                    "first_element": 1,
                    "header": 4,
                    "header_data": 1,
                    "header_data_value": 1,
                    "header_val": 1,
                    "header_value": 15,
                    "info": 1,
                    "printable_data": 1
                },
                "xrealloc": {
                    "realloc_memory": 1
                }
            },
            "called": [
                "bfd_set_format",
                "bfd_printable_arch_mach",
                "bfd_close_all_done",
                "printf",
                "bfd_openw",
                "FUN_0011a110",
                "xrealloc",
                "dcgettext",
                "memset",
                "bfd_get_error",
                "FUN_00114e00",
                "FUN_001053d5"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nundefined4 process_binary_data_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 status;\n  char result;\n  int index;\n  undefined8 header_description;\n  undefined8 data_description;\n  char *format_string;\n  long buffer_size;\n  undefined8 header_value;\n  long realloc_result;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < index) {\n      buffer_size = (long)index * 0xc0;\n    }\n    realloc_result = xrealloc(data[3]);\n    data[3] = realloc_result;\n    memset((void *)(realloc_result + data[2]),0,buffer_size - data[2]);\n    data[2] = buffer_size;\n  }\n  status = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  header_description = get_endianness_description(status);\n  data_description = get_endianness_description(*(undefined4 *)(header + 2));\n  header_value = *header;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_value,data_description,header_description);\n  buffer_size = bfd_openw(*data,*header);\n  if (buffer_size == 0) {\n    print_error_message(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    result = bfd_set_format(buffer_size,1);\n    if (result == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        print_error_message(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,index,0);\n        if (result != '\\0') {\n          header_value = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",header_value);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "current_name": "process_binary_data_00119f70",
            "entrypoint": "0x00119f70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "__format": "format_string",
                "bfd_close_all_done": "close_file",
                "bfd_get_error": "get_bfd_error",
                "bfd_openw": "open_binary_file",
                "bfd_printable_arch_mach": "get_architecture_info",
                "bfd_set_format": "set_bfd_format",
                "cVar2": "result",
                "dcgettext": "get_text",
                "get_endianness_description_00114e00": "get_endianness_description",
                "iVar3": "index",
                "lVar6": "buffer_size",
                "lVar8": "realloc_result",
                "memset": "initialize_memory",
                "param_1": "header",
                "param_2": "data",
                "print_error_message_0011a110": "print_error_message",
                "printf": "print_formatted_text",
                "uVar1": "status",
                "uVar4": "header_description",
                "uVar5": "data_description",
                "uVar7": "header_value",
                "xrealloc": "realloc_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a0e0": {
            "additional_data": {
                "FUN_0011a0e0": {
                    "create_temp_directory": 21,
                    "create_temp_directory_path": 2,
                    "create_temporary_directory": 7,
                    "create_unique_directory": 1
                },
                "__template": {
                    "file_path": 1,
                    "new_path": 1,
                    "path": 18,
                    "path_buffer": 1,
                    "path_template": 1,
                    "temp_directory_path": 2,
                    "temp_file_path": 1,
                    "template": 1,
                    "template_path": 3,
                    "temporary_directory_path": 1,
                    "temporary_path": 1
                },
                "create_path_from_file_name_00114cf0": {
                    "generate_path_from_file_name": 1
                },
                "mkdtemp": {
                    "make_temp_directory": 1
                },
                "pcVar1": {
                    "created_directory": 1,
                    "result": 10,
                    "temp_dir": 4,
                    "temp_dir_path": 2,
                    "temp_directory": 5,
                    "temp_directory_path": 4,
                    "temp_directory_result": 2,
                    "temporary_directory": 2,
                    "temporary_directory_path": 1
                }
            },
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nchar * create_temp_directory_path_0011a0e0(void)\n\n{\n  char *path;\n  char *result;\n  \n  path = (char *)generate_path_from_file_name();\n  result = mkdtemp(path);\n  if (result == (char *)0x0) {\n    free(path);\n  }\n  return result;\n}\n\n",
            "current_name": "create_temp_directory_path_0011a0e0",
            "entrypoint": "0x0011a0e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_path_0011a0e0",
                "__template": "path",
                "create_path_from_file_name_00114cf0": "generate_path_from_file_name",
                "mkdtemp": "make_temp_directory",
                "pcVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a110": {
            "additional_data": {
                "FUN_0011a110": {
                    "print_bfd_error": 1,
                    "print_error": 6,
                    "print_error_details": 1,
                    "print_error_info": 1,
                    "print_error_message": 22
                },
                "_stderr": {
                    "standard_error": 2
                },
                "_stdout": {
                    "standard_output": 2
                },
                "iVar1": {
                    "bfd_error": 1,
                    "error": 13,
                    "error_code": 6,
                    "error_num": 1,
                    "error_number": 1,
                    "error_status": 7,
                    "error_type": 2
                },
                "in_R10": {
                    "additional_info": 10,
                    "extra_info": 4,
                    "unknown": 1,
                    "unknown_cause": 1,
                    "unspecified_param": 1
                },
                "param_1": {
                    "error": 1,
                    "error_address": 1,
                    "error_code": 4,
                    "error_description": 6,
                    "error_message": 6,
                    "error_msg": 1,
                    "error_type": 12
                },
                "uVar2": {
                    "error_message": 24,
                    "error_message_text": 2,
                    "error_msg": 2,
                    "error_string": 3
                }
            },
            "called": [
                "bfd_errmsg",
                "FUN_0010871c",
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00116030",
                "FUN_001053d5"
            ],
            "code": "\n\n\nvoid print_error_message_0011a110(long error_type)\n\n{\n  int error;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error);\n  }\n  fflush(standard_output);\n  if (error_type != 0) {\n    fprintf(standard_error,\"%s: %s: %s\\n\",DAT_001275e0,error_type,error_message,additional_info);\n    return;\n  }\n  fprintf(standard_error,\"%s: %s\\n\",DAT_001275e0,error_message,additional_info);\n  return;\n}\n\n",
            "current_name": "print_error_message_0011a110",
            "entrypoint": "0x0011a110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "_stderr": "standard_error",
                "_stdout": "standard_output",
                "iVar1": "error",
                "in_R10": "additional_info",
                "param_1": "error_type",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a170": {
            "additional_data": {
                "FUN_0011a170": {
                    "check_pattern_match": 1,
                    "match_and_flag": 1,
                    "match_fn": 1,
                    "match_pattern": 15,
                    "match_strings": 1,
                    "pattern_match": 7,
                    "pattern_matching": 4,
                    "perform_pattern_matching": 1
                },
                "__pattern": {
                    "current_pattern": 21,
                    "first_char": 2,
                    "pattern": 2,
                    "pattern_char": 1,
                    "pattern_ptr": 2,
                    "pattern_str": 1,
                    "pattern_string": 1,
                    "ptr_pattern": 1
                },
                "iVar1": {
                    "match_result": 20,
                    "result": 11
                },
                "param_1": {
                    "pattern": 29,
                    "pattern_array": 1,
                    "pattern_ptr": 1
                },
                "param_2": {
                    "input": 4,
                    "input_array": 1,
                    "input_string": 13,
                    "string": 7,
                    "string_ptr": 1,
                    "target": 2,
                    "text": 3
                }
            },
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nint check_pattern_match_0011a170(char **pattern,char **input_string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*input_string,0);\n    if (match_result == 0) {\n      *(undefined *)(input_string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*input_string,0);\n    if (match_result == 0) {\n      *(undefined *)(input_string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_pattern_match_0011a170",
            "entrypoint": "0x0011a170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a170": "check_pattern_match_0011a170",
                "__pattern": "current_pattern",
                "iVar1": "match_result",
                "param_1": "pattern",
                "param_2": "input_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a1b0": {
            "additional_data": {
                "FUN_0011a1b0": {
                    "compare_and_get_result": 1,
                    "compare_and_select": 1,
                    "compare_buffers": 1,
                    "compare_data": 1,
                    "compare_memory": 11,
                    "compare_memory_and_values": 3,
                    "compare_memory_blocks": 3,
                    "compare_memory_ranges": 2,
                    "compare_memory_regions": 1,
                    "compare_memory_sections": 1,
                    "compare_param_values": 1,
                    "compare_parameters": 2,
                    "compare_records": 2,
                    "find_common_prefix": 1
                },
                "auVar5": {
                    "output": 5,
                    "output_result": 1,
                    "result": 8,
                    "result_array": 1,
                    "result_structure": 1,
                    "return_data": 1,
                    "return_val": 2,
                    "return_value": 8
                },
                "extraout_var": {
                    "additional_result": 1,
                    "extra_out_var": 1,
                    "extra_output": 1,
                    "extra_output_var": 1,
                    "extra_result": 1,
                    "extra_var": 1,
                    "extraout_value": 1,
                    "result": 2,
                    "unused": 1
                },
                "iVar3": {
                    "compare_result": 1,
                    "comparison_result": 15,
                    "memcmp_result": 10,
                    "result": 5
                },
                "param_1": {
                    "arr1": 1,
                    "array1": 3,
                    "block1": 1,
                    "buffer1": 3,
                    "data1": 2,
                    "data_1": 3,
                    "first_array": 1,
                    "first_block": 1,
                    "first_param": 1,
                    "input1": 3,
                    "input_1": 2,
                    "input_array_1": 1,
                    "input_data1": 1,
                    "list1": 1,
                    "min_block": 1,
                    "range1": 2,
                    "record1": 2,
                    "section1": 1,
                    "values1": 1
                },
                "param_2": {
                    "arr2": 1,
                    "array2": 3,
                    "block2": 1,
                    "buffer2": 3,
                    "data2": 2,
                    "data_2": 3,
                    "input2": 3,
                    "input_2": 2,
                    "input_array_2": 1,
                    "input_data2": 1,
                    "list2": 1,
                    "max_block": 1,
                    "range2": 2,
                    "record2": 2,
                    "second_array": 1,
                    "second_block": 1,
                    "second_param": 1,
                    "section2": 1,
                    "values2": 1
                },
                "param_3": {
                    "arg1": 1,
                    "arg_1": 1,
                    "extra_param1": 1,
                    "extra_parameter_1": 1,
                    "length1": 1,
                    "param1": 7,
                    "param3": 4,
                    "param_1_length": 1,
                    "param_3": 2,
                    "param_3_data": 1,
                    "size": 1,
                    "size1": 1,
                    "start_addr_range1": 1,
                    "value1": 4,
                    "value_1": 2,
                    "var1": 2
                },
                "param_4": {
                    "arg2": 1,
                    "arg_2": 1,
                    "extra_param2": 1,
                    "extra_parameter_2": 1,
                    "length2": 1,
                    "param2": 7,
                    "param4": 4,
                    "param_2_length": 1,
                    "param_4": 2,
                    "param_4_data": 1,
                    "result": 1,
                    "size2": 1,
                    "start_addr_range2": 1,
                    "value2": 4,
                    "value_2": 2,
                    "var2": 2
                },
                "uVar1": {
                    "array1_end": 2,
                    "array1_value": 1,
                    "array_1_element_8": 1,
                    "block1_size": 1,
                    "buffer1_size": 3,
                    "data1_len": 1,
                    "data1_value": 1,
                    "data_1_length": 1,
                    "first_block_size": 1,
                    "first_param_value": 1,
                    "first_value": 1,
                    "input1_8": 1,
                    "input1_len": 1,
                    "input1_length": 1,
                    "input_1_index": 1,
                    "list1_size": 1,
                    "min_block_item8": 1,
                    "range1_end_addr": 1,
                    "range1_length": 1,
                    "record1_field_value": 1,
                    "record1_length": 1,
                    "section1_size": 1,
                    "size1": 3,
                    "size_1": 1,
                    "value1": 1,
                    "values1_length": 1
                },
                "uVar2": {
                    "array2_end": 2,
                    "array2_value": 1,
                    "array_2_element_8": 1,
                    "block2_size": 1,
                    "buffer2_size": 3,
                    "data2_len": 1,
                    "data2_value": 1,
                    "data_2_length": 1,
                    "input2_8": 1,
                    "input2_len": 1,
                    "input2_length": 1,
                    "input_2_index": 1,
                    "list2_size": 1,
                    "max_block_item8": 1,
                    "range2_end_addr": 1,
                    "range2_length": 1,
                    "record2_field_value": 1,
                    "record2_length": 1,
                    "second_block_size": 1,
                    "second_param_value": 1,
                    "second_value": 1,
                    "section2_size": 1,
                    "size2": 3,
                    "size_2": 1,
                    "value2": 1,
                    "values2_length": 1
                },
                "uVar4": {
                    "combined_result": 14,
                    "comparison_result": 4,
                    "final_result": 5,
                    "merged_result": 1,
                    "result": 5,
                    "return_value": 2
                }
            },
            "called": [
                "memcmp",
                "FUN_001087da"
            ],
            "calling": [
                "FUN_001086af"
            ],
            "code": "\nundefined  [16] compare_memory_and_values_0011a1b0(ulong *input1,ulong *input2,undefined8 param1,undefined8 param2)\n\n{\n  ulong size1;\n  ulong size2;\n  int comparison_result;\n  undefined4 result;\n  ulong combined_result;\n  undefined return_value [16];\n  \n  combined_result = *input1;\n  if (*input2 <= *input1) {\n    combined_result = *input2;\n  }\n  comparison_result = memcmp((void *)(input1[3] + 3),(void *)(input2[3] + 3),combined_result - 3);\n  combined_result = CONCAT44(result,comparison_result);\n  if (comparison_result == 0) {\n    size1 = input1[8];\n    if (size1 < input2[7]) {\n      combined_result = 0xffffffff;\n    }\n    else {\n      size2 = input2[8];\n      if (size2 < input1[7]) {\n        combined_result = 1;\n      }\n      else {\n        combined_result = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (size2 < size1) {\n            combined_result = 1;\n          }\n          else {\n            combined_result = 0xffffffff;\n            if (size2 <= size1) {\n              if (input1[2] == 0x100) {\n                combined_result = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                combined_result = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return_value._8_8_ = param2;\n  return_value._0_8_ = combined_result;\n  return return_value;\n}\n\n",
            "current_name": "compare_memory_and_values_0011a1b0",
            "entrypoint": "0x0011a1b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a1b0": "compare_memory_and_values_0011a1b0",
                "auVar5": "return_value",
                "extraout_var": "result",
                "iVar3": "comparison_result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "size1",
                "uVar2": "size2",
                "uVar4": "combined_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a250": {
            "additional_data": {
                "3": {
                    "char_offset": 1,
                    "flag_offset": 1,
                    "record_char_offset": 1
                },
                "4": {
                    "min_flag_size": 1,
                    "min_record_size": 1,
                    "min_size": 1
                },
                "FUN_0011a250": {
                    "compare_elements": 1,
                    "compare_entries": 1,
                    "compare_memory_blocks": 1,
                    "compare_params": 1,
                    "compare_record_values": 1,
                    "compare_records": 25,
                    "compare_ulong_arrays": 1
                },
                "char": {
                    "character": 1
                },
                "param_1": {
                    "array1": 2,
                    "entry_1": 1,
                    "first_params": 1,
                    "memory_block1": 1,
                    "record1": 18,
                    "record_1": 6,
                    "record_a": 1,
                    "record_entry1": 1
                },
                "param_2": {
                    "array2": 2,
                    "entry_2": 1,
                    "memory_block2": 1,
                    "record2": 18,
                    "record_2": 6,
                    "record_b": 1,
                    "record_entry2": 1,
                    "second_params": 1
                },
                "recordEntry1": {
                    "param1": 1
                },
                "recordEntry2": {
                    "param2": 1
                },
                "return": {
                    "comparison_result": 1,
                    "result": 1
                },
                "uVar1": {
                    "array1_element2": 1,
                    "entry_1_flag": 1,
                    "length1": 1,
                    "record1_clock": 1,
                    "record1_field2": 3,
                    "record1_field3": 1,
                    "record1_flag": 4,
                    "record1_revision": 1,
                    "record1_timestamp": 4,
                    "record1_type": 1,
                    "record1_u_var": 1,
                    "record1time": 1,
                    "record_1_id": 1,
                    "record_1_size": 1,
                    "record_1_timestamp": 1,
                    "record_1_type": 1,
                    "record_1_value": 2,
                    "record_a_sequence": 1,
                    "record_entry1_value": 1,
                    "size1": 1,
                    "value_param_1": 1
                }
            },
            "called": [
                "FUN_001087fd"
            ],
            "calling": [
                "FUN_00116852"
            ],
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_flag;\n  \n  record1_flag = record1[2];\n  if (record1_flag == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          result -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(character *)(record1[3] + 3) != *(character *)(record2[3] + 3)) {\n              result (int)*(character *)(record1[3] + 3) - (int)*(character *)(record2[3] + 3);\n            }\n          }\n          result 0;\n        }\n      }\n      result 1;\n    }\n  }\n  else if ((record1_flag == 0) || ((record1_flag != 0x100 && (record2[2] != 0)))) {\n    result 1;\n  }\n  result -1;\n}\n\n",
            "current_name": "compare_records_0011a250",
            "entrypoint": "0x0011a250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "char": "character",
                "param_1": "record1",
                "param_2": "record2",
                "return": "result",
                "uVar1": "record1_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a2e0": {
            "additional_data": {
                "FUN_0011a2e0": {
                    "copy_section_data": 1,
                    "extract_section": 1,
                    "extract_section_and_copy": 1,
                    "extract_section_data": 7,
                    "extract_section_from_binary": 5,
                    "extract_section_info": 5,
                    "extracted_function": 1,
                    "initialize_section": 2,
                    "translate_and_copy_section_info": 1,
                    "update_section": 1,
                    "update_section_info": 5,
                    "update_section_information": 1
                },
                "bfd_get_section_by_name": {
                    "find_section_by_name": 3,
                    "get_section_by_name": 1
                },
                "dcgettext": {
                    "get_error_message": 1,
                    "get_localized_error_message": 1,
                    "get_translated_message": 1
                },
                "lVar3": {
                    "extracted_data": 1,
                    "new_section_info": 1,
                    "new_section_info_ptr": 1,
                    "result": 1,
                    "section": 1,
                    "section_addr": 1,
                    "section_address": 1,
                    "section_buffer": 1,
                    "section_data": 8,
                    "section_data_pointer": 1,
                    "section_end": 1,
                    "section_header": 1,
                    "section_header_address": 1,
                    "section_info": 5,
                    "section_info_ptr": 3,
                    "section_ptr": 1,
                    "section_result": 1,
                    "source_section": 1
                },
                "lVar4": {
                    "section": 2,
                    "section_address": 1,
                    "section_data": 1,
                    "section_id": 2,
                    "section_index": 1,
                    "section_name": 2,
                    "section_name_offset": 1,
                    "section_name_pointer": 1,
                    "section_name_ptr": 3,
                    "section_offset": 1,
                    "section_pointer": 3,
                    "section_ptr": 11,
                    "section_start": 1,
                    "target_section": 1
                },
                "param_1": {
                    "binary_buffer": 1,
                    "binary_header": 2,
                    "binary_header_address": 1,
                    "data_pointer": 1,
                    "dst": 1,
                    "info_source": 1,
                    "input_param": 1,
                    "param_binary": 1,
                    "param_elf_data": 1,
                    "section_data": 2,
                    "section_data_ptr": 3,
                    "section_info": 8,
                    "section_info_list": 1,
                    "section_info_ptr": 3,
                    "section_info_src": 1,
                    "source_data": 2,
                    "source_section_start": 1
                },
                "param_2": {
                    "bfd_ptr": 2,
                    "binary": 6,
                    "binary_context_address": 1,
                    "binary_data": 4,
                    "binary_file": 6,
                    "binary_handle": 1,
                    "binary_param": 1,
                    "binary_pointer": 1,
                    "binary_ptr": 4,
                    "file_pointer": 1,
                    "param_bfd": 1,
                    "param_binary_file": 1,
                    "param_ptr": 1,
                    "target_data": 1
                },
                "print_error_message_and_exit_00119dd0": {
                    "print_error_and_exit": 5,
                    "print_error_message_and_exit": 2
                },
                "uVar1": {
                    "original_section_name_pointer": 1,
                    "original_section_ptr": 2,
                    "section_address": 3,
                    "section_data": 1,
                    "section_header_address_alt": 1,
                    "section_name": 4,
                    "section_name_ptr": 1,
                    "section_offset": 2,
                    "section_param": 1,
                    "source_section_name": 1
                },
                "uVar2": {
                    "error_message": 13,
                    "error_message_ptr": 1,
                    "error_string": 1,
                    "section_error_message": 1,
                    "section_not_found_msg": 1
                }
            },
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nlong extract_section_data_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_name;\n  undefined8 error_message;\n  long section_data;\n  long section_ptr;\n  \n  section_data = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_data + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_data + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_data + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary);\n    if (section_ptr == 0) {\n      section_name = *(undefined8 *)(section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit(error_message,section_name);\n    }\n  }\n  *(long *)(section_data + 0x20) = section_ptr;\n  return section_data;\n}\n\n",
            "current_name": "extract_section_data_0011a2e0",
            "entrypoint": "0x0011a2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a2e0": "extract_section_data_0011a2e0",
                "bfd_get_section_by_name": "find_section_by_name",
                "dcgettext": "get_translated_message",
                "lVar3": "section_data",
                "lVar4": "section_ptr",
                "param_1": "section_info",
                "param_2": "binary",
                "print_error_message_and_exit_00119dd0": "print_error_and_exit",
                "uVar1": "section_name",
                "uVar2": "error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a350": {
            "additional_data": {
                "FUN_0011a350": {
                    "set_file_access_time": 1,
                    "set_file_modification_time": 4,
                    "set_file_modified_time": 1,
                    "set_file_time": 21,
                    "set_file_times": 2,
                    "set_file_timestamp": 1,
                    "update_file_timestamp": 1
                },
                "fileInfoPtr": {
                    "file_info_ptr": 1
                },
                "filePath": {
                    "file_path": 1
                },
                "iVar1": {
                    "result": 28,
                    "result_code": 1,
                    "return_code": 1
                },
                "local_28": {
                    "access_time": 1,
                    "backup_access_time": 2,
                    "current_access_time": 1,
                    "file_mode": 1,
                    "modification_time": 3,
                    "old_time_1": 1,
                    "time_spec2": 1,
                    "timespec1": 1,
                    "timespec2": 1
                },
                "local_38": {
                    "access_time": 16,
                    "access_time_sec": 1,
                    "modification_time": 1,
                    "time_spec1": 3,
                    "time_struct": 1,
                    "timespec1": 1,
                    "timespec_ptr": 1
                },
                "param_1": {
                    "file_name": 1,
                    "file_path": 28,
                    "filename": 1,
                    "filepath": 1
                },
                "param_2": {
                    "file_data": 1,
                    "file_info": 24,
                    "file_info_ptr": 4,
                    "file_metadata": 1,
                    "metadata": 1
                },
                "pcVar3": {
                    "err_message": 2,
                    "err_msg": 1,
                    "errno_message": 1,
                    "error_message": 7,
                    "error_msg": 5,
                    "error_str": 6,
                    "error_string": 8
                },
                "piVar2": {
                    "err_num_ptr": 2,
                    "errno_loc": 1,
                    "errno_location": 3,
                    "errno_pointer": 2,
                    "errno_ptr": 14,
                    "error": 2,
                    "error_code_ptr": 1,
                    "error_location": 1,
                    "error_number": 2,
                    "error_ptr": 2
                },
                "print_error_message_with_params_00119ed0": {
                    "print_error_message": 2
                },
                "timespec1": {
                    "timespec1": 1
                },
                "timespecPtr": {
                    "timespec_ptr": 1
                },
                "uStack_1c": {
                    "backup_current_time": 1,
                    "backup_file_creation_time": 1,
                    "old_time_4": 1
                },
                "uStack_20": {
                    "backup_status_change_time": 2,
                    "old_time0": 1,
                    "old_time_3": 1
                },
                "uStack_24": {
                    "backup_modification_time": 2,
                    "old_time1": 1,
                    "old_time_2": 1
                },
                "uStack_2c": {
                    "backup_time": 3,
                    "birth_time": 2,
                    "change_time": 1,
                    "create_t_ime": 1,
                    "creation_time": 2,
                    "current_time": 1,
                    "file_creation_time": 1,
                    "modification_time_nsec": 1,
                    "new_modification_time": 1,
                    "old_time2": 1,
                    "time_spec4": 2
                },
                "uStack_30": {
                    "change_time": 8,
                    "creation_time": 1,
                    "modification_time_sec": 1,
                    "new_access_time": 1,
                    "old_time3": 1,
                    "status_change_time": 3,
                    "time_spec3": 2
                },
                "uStack_34": {
                    "access_time_nsec": 1,
                    "mod_time": 2,
                    "modification_time": 11,
                    "old_time4": 1,
                    "time_spec2": 2
                },
                "uVar4": {
                    "error_format": 1,
                    "error_message": 4,
                    "error_msg": 3,
                    "error_string": 2,
                    "locale_message": 1,
                    "localized_err_msg": 1,
                    "localized_error": 1,
                    "localized_error_message": 2,
                    "localized_error_msg": 1,
                    "localized_error_string": 1,
                    "localized_msg": 1,
                    "translated_error": 2,
                    "translated_error_message": 4,
                    "translated_message": 2,
                    "translated_msg": 1,
                    "translated_str": 1,
                    "translated_string": 2
                }
            },
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "code": "\nvoid set_file_modification_time_0011a350(char *file_path,long file_info)\n\n{\n  int result;\n  int *errno_ptr;\n  char *error_string;\n  undefined8 translated_error_message;\n  undefined4 access_time;\n  undefined4 modification_time;\n  undefined4 change_time;\n  undefined4 backup_time;\n  undefined4 modification_time;\n  undefined4 backup_modification_time;\n  undefined4 backup_status_change_time;\n  undefined4 backup_current_time;\n  \n  modification_time = *(undefined4 *)(file_info + 0x58);\n  backup_modification_time = *(undefined4 *)(file_info + 0x5c);\n  backup_status_change_time = *(undefined4 *)(file_info + 0x60);\n  backup_current_time = *(undefined4 *)(file_info + 100);\n  access_time = *(undefined4 *)(file_info + 0x48);\n  modification_time = *(undefined4 *)(file_info + 0x4c);\n  change_time = *(undefined4 *)(file_info + 0x50);\n  backup_time = *(undefined4 *)(file_info + 0x54);\n  result = utimensat(-100,file_path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_ptr = __errno_location();\n    error_string = strerror(*errno_ptr);\n    translated_error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message(translated_error_message,file_path,error_string);\n  }\n  return;\n}\n\n",
            "current_name": "set_file_modification_time_0011a350",
            "entrypoint": "0x0011a350",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "iVar1": "result",
                "local_28": "modification_time",
                "local_38": "access_time",
                "param_1": "file_path",
                "param_2": "file_info",
                "pcVar3": "error_string",
                "piVar2": "errno_ptr",
                "print_error_message_with_params_00119ed0": "print_error_message",
                "uStack_1c": "backup_current_time",
                "uStack_20": "backup_status_change_time",
                "uStack_24": "backup_modification_time",
                "uStack_2c": "backup_time",
                "uStack_30": "change_time",
                "uStack_34": "modification_time",
                "uVar4": "translated_error_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a390": {
            "additional_data": {
                "FUN_0011a390": {
                    "execute_callbacks": 3,
                    "execute_function_chain": 7,
                    "execute_function_list": 1,
                    "execute_function_sequence": 1,
                    "execute_functions": 6,
                    "process_function": 1,
                    "process_functions": 1,
                    "run_callbacks": 1
                },
                "PTR_DAT_001264c0": {
                    "callback_pointer": 1
                },
                "lVar1": {
                    "callback_index": 2,
                    "count": 1,
                    "current_function_index": 1,
                    "current_idx": 1,
                    "current_index": 10,
                    "function_index": 2,
                    "index": 7,
                    "index1": 5,
                    "last_index": 1,
                    "loop_index1": 1
                },
                "lVar2": {
                    "current_index": 1,
                    "index": 3,
                    "index2": 5,
                    "index_minus_one": 1,
                    "loop_index2": 1,
                    "nested_index": 1,
                    "prev_index": 6,
                    "previous_function_index": 3,
                    "previous_idx": 1,
                    "previous_index": 7,
                    "sub_index": 1,
                    "temp_index": 1
                },
                "lVar3": {
                    "current_index": 1,
                    "index": 1,
                    "index3": 5,
                    "index_minus_two": 1,
                    "inner_index": 1,
                    "loop_index": 1,
                    "loop_index3": 1,
                    "prev_index": 2,
                    "sub_index2": 1,
                    "temp_idx": 1,
                    "temp_index": 16
                },
                "plVar4": {
                    "callback_list": 4,
                    "function_array": 2,
                    "function_chain": 4,
                    "function_chain_pointer": 1,
                    "function_chain_ptr": 2,
                    "function_list": 13,
                    "function_pointer": 2,
                    "function_pointer_array": 1,
                    "function_pointers_array": 1,
                    "ptr_list": 1
                },
                "uVar5": {
                    "callback_index": 1,
                    "callback_type": 1,
                    "count": 6,
                    "counter": 3,
                    "decrement_count": 1,
                    "func_index": 1,
                    "function_count": 1,
                    "function_index": 4,
                    "index": 4,
                    "loop_counter": 2,
                    "num_functions": 4,
                    "remaining_callbacks": 2,
                    "u_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid execute_function_chain_0011a390(void)\n\n{\n  long current_index;\n  long previous_index;\n  long temp_index;\n  long *function_list;\n  uint count;\n  \n  function_list = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(function_list + 1) - 1;\n      if (-1 < (int)count) {\n        current_index = (long)(int)count;\n        count = count & 7;\n        (*(code *)function_list[current_index + 2])();\n        previous_index = current_index + -1;\n        if (-1 < (int)previous_index) {\n          temp_index = previous_index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)function_list[current_index + 1])();\n                        previous_index = current_index + -2;\n                      }\n                      (*(code *)function_list[previous_index + 2])();\n                      previous_index = previous_index + -1;\n                    }\n                    (*(code *)function_list[previous_index + 2])();\n                    previous_index = previous_index + -1;\n                  }\n                  (*(code *)function_list[previous_index + 2])();\n                  previous_index = previous_index + -1;\n                }\n                (*(code *)function_list[previous_index + 2])();\n                previous_index = previous_index + -1;\n              }\n              (*(code *)function_list[previous_index + 2])();\n              previous_index = previous_index + -1;\n            }\n            (*(code *)function_list[previous_index + 2])();\n            temp_index = previous_index + -1;\n            if ((int)(previous_index + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)function_list[temp_index + 2])();\n            current_index = temp_index + -1;\n            (*(code *)function_list[temp_index + 1])();\n            (*(code *)function_list[temp_index])();\n            (*(code *)function_list[current_index])();\n            (*(code *)function_list[temp_index + -2])();\n            (*(code *)function_list[temp_index + -3])();\n            (*(code *)function_list[temp_index + -4])();\n            (*(code *)function_list[temp_index + -5])();\n            temp_index = temp_index + -8;\n          } while (-1 < (int)current_index + -7);\n        }\n      }\nLAB_0011a466:\n      function_list = (long *)*function_list;\n    } while (function_list != (long *)0x0);\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_chain_0011a390",
            "entrypoint": "0x0011a390",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "current_index",
                "lVar2": "previous_index",
                "lVar3": "temp_index",
                "plVar4": "function_list",
                "uVar5": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0011a480": {
            "additional_data": {
                "FUN_0011a480": {
                    "copy_and_null_terminate_string": 3,
                    "copy_string": 20,
                    "copy_string_and_null_terminate": 2,
                    "copy_string_with_length": 1,
                    "copy_string_with_null_terminator": 5
                },
                "__dest": {
                    "copied_string": 12,
                    "copy_buffer": 1,
                    "destination": 4,
                    "destination_string": 9,
                    "new_string": 4,
                    "output_string": 1
                },
                "__n": {
                    "length": 2,
                    "source_size": 1,
                    "source_string_length": 2,
                    "str_length": 2,
                    "string_length": 24
                },
                "param_1": {
                    "input_string": 10,
                    "source": 4,
                    "source_string": 17
                },
                "param_2": {
                    "length": 1,
                    "max_length": 23,
                    "max_size": 4,
                    "max_string_length": 1,
                    "source_length": 2
                }
            },
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "calling": [
                "FUN_00114c80",
                "FUN_00116b90"
            ],
            "code": "\nvoid copy_string_with_null_terminator_0011a480(char *source_string,size_t max_length)\n\n{\n  size_t string_length;\n  void *copied_string;\n  \n  string_length = strnlen(source_string,max_length);\n  copied_string = (void *)xmalloc(string_length + 1);\n  *(undefined *)((long)copied_string + string_length) = 0;\n  memcpy(copied_string,source_string,string_length);\n  return;\n}\n\n",
            "current_name": "copy_string_with_null_terminator_0011a480",
            "entrypoint": "0x0011a480",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0011a480": "copy_string_with_null_terminator_0011a480",
                "__dest": "copied_string",
                "__n": "string_length",
                "param_1": "source_string",
                "param_2": "max_length"
            },
            "skipped": false,
            "tags": []
        },
        "_DT_FINI": {
            "called": [],
            "calling": [],
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "current_name": "_DT_FINI",
            "entrypoint": "0x0011a4b4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_DT_INIT": {
            "called": [
                "__gmon_start__"
            ],
            "calling": [],
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "current_name": "_DT_INIT",
            "entrypoint": "0x00104000",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_FINI_0": {
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "calling": [],
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "current_name": "_FINI_0",
            "entrypoint": "0x00116b40",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "_INIT_0": {
            "called": [
                "FUN_00116b00"
            ],
            "calling": [],
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "current_name": "_INIT_0",
            "entrypoint": "0x00116b80",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__assert_fail": {
            "called": [
                "__assert_fail"
            ],
            "calling": [
                "FUN_0010c7a0",
                "FUN_00112c1f",
                "FUN_0010bbd3",
                "FUN_001125fa"
            ],
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "current_name": "__assert_fail",
            "entrypoint": "0x00104300",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__cxa_finalize": {
            "called": [
                "__cxa_finalize"
            ],
            "calling": [
                "_FINI_0"
            ],
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "current_name": "__cxa_finalize",
            "entrypoint": "0x00104910",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "__errno_location": {
            "called": [
                "__errno_location"
            ],
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_00109a32",
                "FUN_00114690",
                "FUN_00107880",
                "FUN_00115a90",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "current_name": "__errno_location",
            "entrypoint": "0x001040b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "abort": {
            "called": [
                "abort"
            ],
            "calling": [
                "FUN_0010a94e",
                "FUN_00112c1f",
                "FUN_001135a5",
                "FUN_0010e9a0",
                "FUN_001199d0",
                "FUN_0010d21c",
                "FUN_0010b0fa",
                "FUN_0010aa53",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010922b",
                "FUN_0010ebb0"
            ],
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "current_name": "abort",
            "entrypoint": "0x001040a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "access": {
            "called": [
                "access"
            ],
            "calling": [
                "FUN_0011283f"
            ],
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "current_name": "access",
            "entrypoint": "0x00104740",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alloc": {
            "called": [
                "bfd_alloc"
            ],
            "calling": [
                "FUN_00115dc0"
            ],
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "current_name": "bfd_alloc",
            "entrypoint": "0x00104250",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_alt_mach_code": {
            "called": [
                "bfd_alt_mach_code"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "current_name": "bfd_alt_mach_code",
            "entrypoint": "0x00104590",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bread": {
            "called": [
                "bfd_bread"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "current_name": "bfd_bread",
            "entrypoint": "0x00104870",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_bwrite": {
            "called": [
                "bfd_bwrite"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "current_name": "bfd_bwrite",
            "entrypoint": "0x00104530",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_canonicalize_reloc": {
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "current_name": "bfd_canonicalize_reloc",
            "entrypoint": "0x001047b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format": {
            "called": [
                "bfd_check_format"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "current_name": "bfd_check_format",
            "entrypoint": "0x00104810",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_check_format_matches": {
            "called": [
                "bfd_check_format_matches"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "current_name": "bfd_check_format_matches",
            "entrypoint": "0x00104780",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close": {
            "called": [
                "bfd_close"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "current_name": "bfd_close",
            "entrypoint": "0x00104908",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_close_all_done": {
            "called": [
                "bfd_close_all_done"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "current_name": "bfd_close_all_done",
            "entrypoint": "0x00104900",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_auxent": {
            "called": [
                "bfd_coff_get_auxent"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_auxent",
            "entrypoint": "0x001045b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_coff_get_syment": {
            "called": [
                "bfd_coff_get_syment"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "current_name": "bfd_coff_get_syment",
            "entrypoint": "0x001046a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_contents": {
            "called": [
                "bfd_convert_section_contents"
            ],
            "calling": [
                "FUN_00116110"
            ],
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_contents",
            "entrypoint": "0x001042f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_convert_section_setup": {
            "called": [
                "bfd_convert_section_setup"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "current_name": "bfd_convert_section_setup",
            "entrypoint": "0x001040f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_create_gnu_debuglink_section": {
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_create_gnu_debuglink_section",
            "entrypoint": "0x00104180",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_decode_symclass": {
            "called": [
                "bfd_decode_symclass"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "current_name": "bfd_decode_symclass",
            "entrypoint": "0x00104490",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_errmsg": {
            "called": [
                "bfd_errmsg"
            ],
            "calling": [
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010e07c"
            ],
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "current_name": "bfd_errmsg",
            "entrypoint": "0x001047a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fdopenw": {
            "called": [
                "bfd_fdopenw"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "current_name": "bfd_fdopenw",
            "entrypoint": "0x001048d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "current_name": "bfd_fill_in_gnu_debuglink_section",
            "entrypoint": "0x00104600",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_arch": {
            "called": [
                "bfd_get_arch"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00105828",
                "FUN_00104ea2",
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "current_name": "bfd_get_arch",
            "entrypoint": "0x00104570",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_error": {
            "called": [
                "bfd_get_error"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_00116b90",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "current_name": "bfd_get_error",
            "entrypoint": "0x00104370",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_full_section_contents": {
            "called": [
                "bfd_get_full_section_contents"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_full_section_contents",
            "entrypoint": "0x00104440",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_mach": {
            "called": [
                "bfd_get_mach"
            ],
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "current_name": "bfd_get_mach",
            "entrypoint": "0x00104650",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_reloc_upper_bound": {
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116030",
                "FUN_001163d0"
            ],
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "current_name": "bfd_get_reloc_upper_bound",
            "entrypoint": "0x00104840",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_by_name": {
            "called": [
                "bfd_get_section_by_name"
            ],
            "calling": [
                "FUN_0011a2e0",
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_by_name",
            "entrypoint": "0x00104400",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_section_contents": {
            "called": [
                "bfd_get_section_contents"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_get_section_contents",
            "entrypoint": "0x00104260",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_get_stab_name": {
            "called": [
                "bfd_get_stab_name"
            ],
            "calling": [
                "FUN_00108b3e"
            ],
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "current_name": "bfd_get_stab_name",
            "entrypoint": "0x00104110",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_allocate": {
            "called": [
                "bfd_hash_allocate"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "current_name": "bfd_hash_allocate",
            "entrypoint": "0x00104450",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_lookup": {
            "called": [
                "bfd_hash_lookup"
            ],
            "calling": [
                "FUN_0010bba1",
                "FUN_0010e2f0",
                "FUN_0010e6a8"
            ],
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "current_name": "bfd_hash_lookup",
            "entrypoint": "0x00104560",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_newfunc": {
            "called": [
                "bfd_hash_newfunc"
            ],
            "calling": [
                "FUN_0010bb52"
            ],
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "current_name": "bfd_hash_newfunc",
            "entrypoint": "0x00104200",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_hash_table_init": {
            "called": [
                "bfd_hash_table_init"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "current_name": "bfd_hash_table_init",
            "entrypoint": "0x00104830",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_init": {
            "called": [
                "bfd_init"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "current_name": "bfd_init",
            "entrypoint": "0x00104430",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_is_local_label": {
            "called": [
                "bfd_is_local_label"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "current_name": "bfd_is_local_label",
            "entrypoint": "0x001048a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_iterate_over_targets": {
            "called": [
                "bfd_iterate_over_targets"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "current_name": "bfd_iterate_over_targets",
            "entrypoint": "0x00104620",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_anyway_with_flags": {
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "calling": [
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_anyway_with_flags",
            "entrypoint": "0x00104190",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_make_section_with_flags": {
            "called": [
                "bfd_make_section_with_flags"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "current_name": "bfd_make_section_with_flags",
            "entrypoint": "0x00104120",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_malloc_and_get_section": {
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "calling": [
                "FUN_00107880"
            ],
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "current_name": "bfd_malloc_and_get_section",
            "entrypoint": "0x001041e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_map_over_sections": {
            "called": [
                "bfd_map_over_sections"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "current_name": "bfd_map_over_sections",
            "entrypoint": "0x00104850",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_octets_per_byte": {
            "called": [
                "bfd_octets_per_byte"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "current_name": "bfd_octets_per_byte",
            "entrypoint": "0x00104520",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr": {
            "called": [
                "bfd_openr"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "current_name": "bfd_openr",
            "entrypoint": "0x001041f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openr_next_archived_file": {
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "current_name": "bfd_openr_next_archived_file",
            "entrypoint": "0x00104820",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_openw": {
            "called": [
                "bfd_openw"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "current_name": "bfd_openw",
            "entrypoint": "0x00104690",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_printable_arch_mach": {
            "called": [
                "bfd_printable_arch_mach"
            ],
            "calling": [
                "FUN_00105828",
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00104943"
            ],
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "current_name": "bfd_printable_arch_mach",
            "entrypoint": "0x001045a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_arch": {
            "called": [
                "bfd_scan_arch"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "current_name": "bfd_scan_arch",
            "entrypoint": "0x00104710",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_scan_vma": {
            "called": [
                "bfd_scan_vma"
            ],
            "calling": [
                "FUN_00119940"
            ],
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "current_name": "bfd_scan_vma",
            "entrypoint": "0x00104070",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_seek": {
            "called": [
                "bfd_seek"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "current_name": "bfd_seek",
            "entrypoint": "0x001048e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_default_target": {
            "called": [
                "bfd_set_default_target"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "current_name": "bfd_set_default_target",
            "entrypoint": "0x00104150",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error": {
            "called": [
                "bfd_set_error"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "current_name": "bfd_set_error",
            "entrypoint": "0x001043a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_error_program_name": {
            "called": [
                "bfd_set_error_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "current_name": "bfd_set_error_program_name",
            "entrypoint": "0x001046e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_file_flags": {
            "called": [
                "bfd_set_file_flags"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "current_name": "bfd_set_file_flags",
            "entrypoint": "0x00104630",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_format": {
            "called": [
                "bfd_set_format"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00107880",
                "FUN_00119f70",
                "FUN_00114e50"
            ],
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "current_name": "bfd_set_format",
            "entrypoint": "0x00104500",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_contents": {
            "called": [
                "bfd_set_section_contents"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_contents",
            "entrypoint": "0x00104330",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_section_size": {
            "called": [
                "bfd_set_section_size"
            ],
            "calling": [
                "FUN_00116110",
                "FUN_00107880",
                "FUN_0010554f",
                "FUN_00115530"
            ],
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "current_name": "bfd_set_section_size",
            "entrypoint": "0x001045f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_start_address": {
            "called": [
                "bfd_set_start_address"
            ],
            "calling": [
                "FUN_00107976"
            ],
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "current_name": "bfd_set_start_address",
            "entrypoint": "0x00104860",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_set_symtab": {
            "called": [
                "bfd_set_symtab"
            ],
            "calling": [
                "FUN_0010554f"
            ],
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "current_name": "bfd_set_symtab",
            "entrypoint": "0x00104460",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_stat": {
            "called": [
                "bfd_stat"
            ],
            "calling": [
                "FUN_00114690"
            ],
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "current_name": "bfd_stat",
            "entrypoint": "0x001041b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bfd_target_list": {
            "called": [
                "bfd_target_list"
            ],
            "calling": [
                "FUN_00104a35"
            ],
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "current_name": "bfd_target_list",
            "entrypoint": "0x00104350",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "bindtextdomain": {
            "called": [
                "bindtextdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "current_name": "bindtextdomain",
            "entrypoint": "0x00104220",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "chmod": {
            "called": [
                "chmod"
            ],
            "calling": [
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "chmod",
            "entrypoint": "0x001046d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "close": {
            "called": [
                "close"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_001199d0"
            ],
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "close",
            "entrypoint": "0x001043c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "concat": {
            "called": [
                "concat"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_0010ee3f",
                "FUN_0010554f"
            ],
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "current_name": "concat",
            "entrypoint": "0x00104320",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle": {
            "called": [
                "cplus_demangle"
            ],
            "calling": [
                "FUN_0010d21c"
            ],
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "current_name": "cplus_demangle",
            "entrypoint": "0x001046b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_init_info": {
            "called": [
                "cplus_demangle_init_info"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_init_info",
            "entrypoint": "0x00104550",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_mangled_name": {
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_mangled_name",
            "entrypoint": "0x00104700",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "cplus_demangle_print": {
            "called": [
                "cplus_demangle_print"
            ],
            "calling": [
                "FUN_0010b0fa"
            ],
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "current_name": "cplus_demangle_print",
            "entrypoint": "0x00104050",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dcgettext": {
            "called": [
                "dcgettext"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_0010543c",
                "FUN_001083de",
                "FUN_00114460",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00104920",
                "FUN_0010bf86",
                "FUN_00115b70",
                "FUN_0010808f",
                "FUN_00104ad6",
                "FUN_0010bc80",
                "FUN_00108d9a",
                "FUN_0010c892",
                "FUN_00115dc0",
                "FUN_00104cc1",
                "FUN_00112996",
                "FUN_00105828",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_00108a2a",
                "FUN_001163d0",
                "FUN_00109a32",
                "FUN_0010827b",
                "FUN_0010911f",
                "FUN_0010dac0",
                "FUN_0010be1a",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00108b3e",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00108916",
                "FUN_00108fe8",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_001053b5",
                "FUN_00112c1f",
                "FUN_00104966",
                "FUN_0010be88",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00108072",
                "FUN_0010b6ea",
                "FUN_00104a35",
                "FUN_00116490",
                "FUN_0010914e",
                "FUN_0010b800",
                "FUN_001152b6",
                "FUN_00114190",
                "FUN_0010551d",
                "FUN_0010bd62",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00109022",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00108808",
                "FUN_00115530",
                "FUN_00119970",
                "FUN_00108179",
                "FUN_0010bf20",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_00107976",
                "FUN_00114690",
                "FUN_00108375",
                "FUN_00112b6e",
                "FUN_0010c05d",
                "FUN_00114dc7",
                "FUN_0010b0fa",
                "FUN_00119f70",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_0010c2d2",
                "FUN_00114e00"
            ],
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "current_name": "dcgettext",
            "entrypoint": "0x00104240",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "dup": {
            "called": [
                "dup"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "current_name": "dup",
            "entrypoint": "0x001042d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "entry": {
            "called": [
                "__libc_start_main",
                "FUN_00116b90"
            ],
            "calling": [],
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00116aa0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "exit": {
            "called": [
                "exit"
            ],
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "current_name": "exit",
            "entrypoint": "0x001047f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fchmod": {
            "called": [
                "fchmod"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "current_name": "fchmod",
            "entrypoint": "0x001046c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fclose": {
            "called": [
                "fclose"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fclose",
            "entrypoint": "0x00104210",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "feof": {
            "called": [
                "feof"
            ],
            "calling": [
                "FUN_00114dc7"
            ],
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "feof",
            "entrypoint": "0x001044d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ferror": {
            "called": [
                "ferror"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "ferror",
            "entrypoint": "0x00104130",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fflush": {
            "called": [
                "fflush"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_001126c0",
                "FUN_0010871c"
            ],
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fflush",
            "entrypoint": "0x001045e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "filename_cmp": {
            "called": [
                "filename_cmp"
            ],
            "calling": [
                "FUN_00108f08",
                "FUN_0010edb4",
                "FUN_00116b90"
            ],
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "current_name": "filename_cmp",
            "entrypoint": "0x001041a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fnmatch": {
            "called": [
                "fnmatch"
            ],
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "fnmatch",
            "entrypoint": "0x00104340",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fopen": {
            "called": [
                "fopen"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "current_name": "fopen",
            "entrypoint": "0x00104750",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fprintf": {
            "called": [
                "fprintf"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_00112c1f",
                "FUN_0010be88",
                "FUN_001199d0",
                "FUN_0010b6ea",
                "FUN_00104a35",
                "FUN_0010bf86",
                "FUN_0010914e",
                "FUN_0010bd62",
                "FUN_0010bc80",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00109022",
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010bf20",
                "FUN_00108a2a",
                "FUN_00108fb9",
                "FUN_0010911f",
                "FUN_0010be1a",
                "FUN_00112b6e",
                "FUN_0010c05d",
                "FUN_00116b90",
                "FUN_00108b3e",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_0010871c",
                "FUN_0010c218",
                "FUN_00108916",
                "FUN_0010c2d2",
                "FUN_00108fe8"
            ],
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "current_name": "fprintf",
            "entrypoint": "0x001044b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputc": {
            "called": [
                "fputc"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108b3e",
                "FUN_00104a35"
            ],
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputc",
            "entrypoint": "0x001043f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fputs": {
            "called": [
                "fputs"
            ],
            "calling": [
                "FUN_001126c0",
                "FUN_00104943"
            ],
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "fputs",
            "entrypoint": "0x00104310",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fread": {
            "called": [
                "fread"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00114460"
            ],
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "current_name": "fread",
            "entrypoint": "0x00104160",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "free": {
            "called": [
                "free"
            ],
            "calling": [
                "FUN_0011256b",
                "FUN_00108466",
                "FUN_0010c95e",
                "FUN_0010d21c",
                "FUN_001125fa",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00116852",
                "FUN_0010d559",
                "FUN_00109b2f",
                "FUN_00104ea2",
                "FUN_001163d0",
                "FUN_00108863",
                "FUN_0010a77a",
                "FUN_0010dac0",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_0010a424",
                "FUN_0010c1c6",
                "FUN_0011173a",
                "FUN_001199d0",
                "FUN_0010b6ea",
                "FUN_001081e9",
                "FUN_0010a83e",
                "FUN_0010ebb0",
                "FUN_00104a35",
                "FUN_0010ae0e",
                "FUN_0010e7c2",
                "FUN_0010551d",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010e9a0",
                "FUN_0010afd5",
                "FUN_00114b84",
                "FUN_0010e8a9",
                "FUN_0010e07c",
                "FUN_0010a94e",
                "FUN_00114690",
                "FUN_00116110",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010aa53",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010ba08",
                "FUN_001088ae",
                "FUN_0010e453"
            ],
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "current_name": "free",
            "entrypoint": "0x001048f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fseek": {
            "called": [
                "fseek"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "current_name": "fseek",
            "entrypoint": "0x00104660",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "ftell": {
            "called": [
                "ftell"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "current_name": "ftell",
            "entrypoint": "0x001044c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "fwrite": {
            "called": [
                "fwrite"
            ],
            "calling": [
                "FUN_00107880",
                "FUN_001126c0",
                "FUN_00108b3e"
            ],
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "current_name": "fwrite",
            "entrypoint": "0x00104800",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getc": {
            "called": [
                "getc"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "current_name": "getc",
            "entrypoint": "0x001048b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getenv": {
            "called": [
                "getenv"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "current_name": "getenv",
            "entrypoint": "0x00104040",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "getopt_long": {
            "called": [
                "getopt_long"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "current_name": "getopt_long",
            "entrypoint": "0x00104280",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_create_alloc": {
            "called": [
                "htab_create_alloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "current_name": "htab_create_alloc",
            "entrypoint": "0x00104720",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_delete": {
            "called": [
                "htab_delete"
            ],
            "calling": [
                "FUN_001054af"
            ],
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "current_name": "htab_delete",
            "entrypoint": "0x00104090",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_elements": {
            "called": [
                "htab_elements"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "current_name": "htab_elements",
            "entrypoint": "0x001044e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find": {
            "called": [
                "htab_find"
            ],
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "current_name": "htab_find",
            "entrypoint": "0x001047d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_find_slot": {
            "called": [
                "htab_find_slot"
            ],
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_00108d9a"
            ],
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "current_name": "htab_find_slot",
            "entrypoint": "0x001044a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_hash_string": {
            "called": [
                "htab_hash_string"
            ],
            "calling": [
                "FUN_00108800"
            ],
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "current_name": "htab_hash_string",
            "entrypoint": "0x001048f8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "htab_traverse": {
            "called": [
                "htab_traverse"
            ],
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "current_name": "htab_traverse",
            "entrypoint": "0x00104580",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "lseek": {
            "called": [
                "lseek"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "current_name": "lseek",
            "entrypoint": "0x001042e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "malloc": {
            "called": [
                "malloc"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "current_name": "malloc",
            "entrypoint": "0x001045c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcmp": {
            "called": [
                "memcmp"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0011a1b0"
            ],
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "memcmp",
            "entrypoint": "0x00104420",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memcpy": {
            "called": [
                "memcpy"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memcpy",
            "entrypoint": "0x00104540",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memmove": {
            "called": [
                "memmove"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memmove",
            "entrypoint": "0x001046f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "memset": {
            "called": [
                "memset"
            ],
            "calling": [
                "FUN_00119f70"
            ],
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "current_name": "memset",
            "entrypoint": "0x00104360",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkdtemp": {
            "called": [
                "mkdtemp"
            ],
            "calling": [
                "FUN_0011a0e0"
            ],
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "current_name": "mkdtemp",
            "entrypoint": "0x00104670",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemp": {
            "called": [
                "mkstemp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemp",
            "entrypoint": "0x00104640",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "mkstemps": {
            "called": [
                "mkstemps"
            ],
            "calling": [
                "FUN_001199d0"
            ],
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "current_name": "mkstemps",
            "entrypoint": "0x00104030",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "open": {
            "called": [
                "open"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "current_name": "open",
            "entrypoint": "0x00104730",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "printf": {
            "called": [
                "printf"
            ],
            "calling": [
                "FUN_00119970",
                "FUN_001199d0",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_00104943",
                "FUN_00107976"
            ],
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "current_name": "printf",
            "entrypoint": "0x001042a0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "putc": {
            "called": [
                "putc"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "current_name": "putc",
            "entrypoint": "0x00104480",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "qsort": {
            "called": [
                "qsort"
            ],
            "calling": [
                "FUN_00116852",
                "FUN_0010554f",
                "FUN_001086af"
            ],
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "current_name": "qsort",
            "entrypoint": "0x00104140",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "read": {
            "called": [
                "read"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "current_name": "read",
            "entrypoint": "0x00104410",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "rmdir": {
            "called": [
                "rmdir"
            ],
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "current_name": "rmdir",
            "entrypoint": "0x00104230",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "setlocale": {
            "called": [
                "setlocale"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "current_name": "setlocale",
            "entrypoint": "0x00104680",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "sprintf": {
            "called": [
                "sprintf"
            ],
            "calling": [
                "FUN_001125fa",
                "FUN_00109dfe",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010ae0e",
                "FUN_0010b948",
                "FUN_0010e7c2",
                "FUN_0010b800",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010ab4d",
                "FUN_0010e9a0",
                "FUN_00109cf4",
                "FUN_0010e8a9",
                "FUN_0010a69a",
                "FUN_00109e76",
                "FUN_0010a77a",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010ee3f",
                "FUN_0010eafe",
                "FUN_0010a377",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00109d97",
                "FUN_0010a424",
                "FUN_0010e453"
            ],
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "current_name": "sprintf",
            "entrypoint": "0x001047e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "stat": {
            "called": [
                "stat"
            ],
            "calling": [
                "FUN_0011283f",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_00113f50"
            ],
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "current_name": "stat",
            "entrypoint": "0x001044f0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcasecmp": {
            "called": [
                "strcasecmp"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcasecmp",
            "entrypoint": "0x00104080",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcat": {
            "called": [
                "strcat"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0010ee3f",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcat",
            "entrypoint": "0x001047c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strchr": {
            "called": [
                "strchr"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strchr",
            "entrypoint": "0x00104290",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcmp": {
            "called": [
                "strcmp"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00108c86",
                "FUN_0010afd5",
                "FUN_00115f50",
                "FUN_0010c7a0",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00108898",
                "FUN_00116b90",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010ee3f",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_00115530",
                "FUN_0010922b"
            ],
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "current_name": "strcmp",
            "entrypoint": "0x00104470",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strcpy": {
            "called": [
                "strcpy"
            ],
            "calling": [
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_00115530"
            ],
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "current_name": "strcpy",
            "entrypoint": "0x00104100",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strdup": {
            "called": [
                "strdup"
            ],
            "calling": [
                "FUN_00108d9a"
            ],
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "current_name": "strdup",
            "entrypoint": "0x00104880",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strerror": {
            "called": [
                "strerror"
            ],
            "calling": [
                "FUN_00114690",
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "current_name": "strerror",
            "entrypoint": "0x00104890",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strlen": {
            "called": [
                "strlen"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010c95e",
                "FUN_001199d0",
                "FUN_00109bbb",
                "FUN_0010d21c",
                "FUN_001125fa",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010ae0e",
                "FUN_00113fb0",
                "FUN_0010e7c2",
                "FUN_0010b800",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_00104ad6",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00115530",
                "FUN_0010d559",
                "FUN_0010a2b9",
                "FUN_0010a0e9",
                "FUN_0010ab4d",
                "FUN_0010e9a0",
                "FUN_0010e8a9",
                "FUN_0010a69a",
                "FUN_0010a77a",
                "FUN_0010a94e",
                "FUN_0011378f",
                "FUN_0010e5db",
                "FUN_00116b90",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e2f0",
                "FUN_0010aa53",
                "FUN_0010ee3f",
                "FUN_0010eafe",
                "FUN_00104943",
                "FUN_00113ede",
                "FUN_0010a377",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010a424",
                "FUN_0010e453"
            ],
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "current_name": "strlen",
            "entrypoint": "0x00104270",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncasecmp": {
            "called": [
                "strncasecmp"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncasecmp",
            "entrypoint": "0x001045d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncmp": {
            "called": [
                "strncmp"
            ],
            "calling": [
                "FUN_00113fb0",
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "current_name": "strncmp",
            "entrypoint": "0x001040e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strncpy": {
            "called": [
                "strncpy"
            ],
            "calling": [
                "FUN_00104ad6",
                "FUN_00116b90"
            ],
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "current_name": "strncpy",
            "entrypoint": "0x001040d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strnlen": {
            "called": [
                "strnlen"
            ],
            "calling": [
                "FUN_0011a480"
            ],
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "current_name": "strnlen",
            "entrypoint": "0x00104380",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strrchr": {
            "called": [
                "strrchr"
            ],
            "calling": [
                "FUN_00114cf0"
            ],
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "current_name": "strrchr",
            "entrypoint": "0x001042c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strspn": {
            "called": [
                "strspn"
            ],
            "calling": [
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "current_name": "strspn",
            "entrypoint": "0x001043e0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strstr": {
            "called": [
                "strstr"
            ],
            "calling": [
                "FUN_0010d21c",
                "FUN_0010ee3f"
            ],
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "current_name": "strstr",
            "entrypoint": "0x001048c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtod": {
            "called": [
                "strtod"
            ],
            "calling": [
                "FUN_0011173a"
            ],
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "current_name": "strtod",
            "entrypoint": "0x00104170",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtol": {
            "called": [
                "strtol"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00104943"
            ],
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "current_name": "strtol",
            "entrypoint": "0x00104510",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "strtoul": {
            "called": [
                "strtoul"
            ],
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "current_name": "strtoul",
            "entrypoint": "0x00104790",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "textdomain": {
            "called": [
                "textdomain"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "current_name": "textdomain",
            "entrypoint": "0x001041d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0010e439": {
            "additional_data": {
                "0x210": {
                    "offset": 2
                },
                "0x84": {
                    "length": 1,
                    "string_length": 1
                },
                "param_1": {
                    "address": 1,
                    "base_addr": 1,
                    "base_address": 9,
                    "data": 1,
                    "data_address": 2,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "instance": 1,
                    "obj_ptr": 1,
                    "object": 1,
                    "object_address": 2,
                    "object_ptr": 1,
                    "string_reference_address": 1,
                    "string_structure": 1,
                    "struct_address": 1,
                    "target_addr": 1,
                    "target_address": 1
                },
                "param_2": {
                    "callback_function": 1,
                    "data": 1,
                    "input_string": 1,
                    "new_data": 1,
                    "new_string": 2,
                    "new_string_reference": 1,
                    "new_value": 13,
                    "param_value": 2,
                    "string": 1,
                    "string_address": 1,
                    "string_data": 1,
                    "string_ptr": 1,
                    "string_value": 2,
                    "value": 3
                },
                "process_string_0010e2f0": {
                    "process_string": 15
                },
                "thunk_FUN_0010e439": {
                    "initialize_param": 1,
                    "process_and_store": 1,
                    "process_and_store_string": 1,
                    "set_callback": 1,
                    "set_data_pointer": 1,
                    "set_param_and_process_string": 5,
                    "set_param_value": 2,
                    "set_process_string_param": 2,
                    "set_string_address": 1,
                    "set_string_param": 1,
                    "set_string_parameter": 1,
                    "store_and_process_string": 1,
                    "store_param_and_process_string": 1,
                    "update_data": 2,
                    "update_data_with_value": 1,
                    "update_param_and_process_string": 1,
                    "update_param_value": 1,
                    "update_string": 1,
                    "update_string_and_process": 1,
                    "update_string_param": 1,
                    "update_string_parameter": 2,
                    "update_string_reference": 1,
                    "update_string_with_param": 1
                }
            },
            "called": [
                "FUN_0010e439"
            ],
            "calling": [
                "FUN_0011378f"
            ],
            "code": "\nvoid set_param_and_process_string_thunk_0010e439(long base_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = new_value;\n  process_string(base_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "current_name": "set_param_and_process_string_thunk_0010e439",
            "entrypoint": "0x0010e451",
            "imported": false,
            "improved": true,
            "renaming": {
                "param_1": "base_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string",
                "thunk_FUN_0010e439": "set_param_and_process_string_thunk_0010e439"
            },
            "skipped": false,
            "tags": []
        },
        "unlink": {
            "called": [
                "unlink"
            ],
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "current_name": "unlink",
            "entrypoint": "0x001040c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "unlink_if_ordinary": {
            "called": [
                "unlink_if_ordinary"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "current_name": "unlink_if_ordinary",
            "entrypoint": "0x00104610",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "utimensat": {
            "called": [
                "utimensat"
            ],
            "calling": [
                "FUN_0011a350"
            ],
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "current_name": "utimensat",
            "entrypoint": "0x00104060",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "vfprintf": {
            "called": [
                "vfprintf"
            ],
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "current_name": "vfprintf",
            "entrypoint": "0x00104770",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "write": {
            "called": [
                "write"
            ],
            "calling": [
                "FUN_00115a90"
            ],
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "current_name": "write",
            "entrypoint": "0x001041c0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xcalloc": {
            "called": [
                "xcalloc"
            ],
            "calling": [
                "FUN_001163d0"
            ],
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "current_name": "xcalloc",
            "entrypoint": "0x00104918",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xexit": {
            "called": [
                "xexit"
            ],
            "calling": [
                "FUN_00115dc0",
                "FUN_00116b90",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00119dd0"
            ],
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "current_name": "xexit",
            "entrypoint": "0x00104760",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc": {
            "called": [
                "xmalloc"
            ],
            "calling": [
                "FUN_00108c86",
                "FUN_00114cf0",
                "FUN_00114460",
                "FUN_001125fa",
                "FUN_0010a181",
                "FUN_00109b52",
                "FUN_0010bf86",
                "FUN_0010c7a0",
                "FUN_00104ad6",
                "FUN_0010bc80",
                "FUN_00116852",
                "FUN_00108d9a",
                "FUN_00113b98",
                "FUN_00112925",
                "FUN_0010ab4d",
                "FUN_00113bfa",
                "FUN_00104ea2",
                "FUN_001163d0",
                "FUN_0010a69a",
                "FUN_0010a77a",
                "FUN_0010dac0",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00116030",
                "FUN_0010a424",
                "FUN_0011a480",
                "FUN_0011173a",
                "FUN_00108f08",
                "FUN_0010be88",
                "FUN_001199d0",
                "FUN_0010d882",
                "FUN_0010b6ea",
                "FUN_00109a0b",
                "FUN_0010a83e",
                "FUN_0010ebb0",
                "FUN_0010ae0e",
                "FUN_0010e7c2",
                "FUN_00114190",
                "FUN_0010bd62",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_00113c43",
                "FUN_0010c6be",
                "FUN_00113da9",
                "FUN_00109022",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_00113d6e",
                "FUN_00114d60",
                "FUN_00115530",
                "FUN_0010a2b9",
                "FUN_00114c80",
                "FUN_0010a0e9",
                "FUN_0010e9a0",
                "FUN_0010afd5",
                "FUN_0010bbd3",
                "FUN_0010c139",
                "FUN_00112894",
                "FUN_0010e8a9",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0011378f",
                "FUN_0010c05d",
                "FUN_00113ce0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010a377",
                "FUN_0010ba08",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_0010e453"
            ],
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "current_name": "xmalloc",
            "entrypoint": "0x00104390",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xmalloc_set_program_name": {
            "called": [
                "xmalloc_set_program_name"
            ],
            "calling": [
                "FUN_00116b90"
            ],
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "current_name": "xmalloc_set_program_name",
            "entrypoint": "0x001043b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xrealloc": {
            "called": [
                "xrealloc"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_0010ab4d",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_0010e07c",
                "FUN_0010d7d4",
                "FUN_0010dac0",
                "FUN_00109be3",
                "FUN_00116b90",
                "FUN_00114dc7",
                "FUN_00109ed3",
                "FUN_00119f70",
                "FUN_0010e2f0",
                "FUN_0010aa53",
                "FUN_0010ee3f",
                "FUN_0010abdd"
            ],
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "current_name": "xrealloc",
            "entrypoint": "0x001042b0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "xstrdup": {
            "called": [
                "xstrdup"
            ],
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_001088ae",
                "FUN_00109b52"
            ],
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "current_name": "xstrdup",
            "entrypoint": "0x001043d0",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_00104020",
            "FUN_00104943",
            "FUN_00104a35",
            "FUN_00104bba",
            "FUN_00104c36",
            "FUN_00104d1c",
            "FUN_001052a2",
            "FUN_0010540e",
            "FUN_001054af",
            "FUN_001081e9",
            "FUN_00108237",
            "FUN_001082c3",
            "FUN_0010870e",
            "FUN_0010871c",
            "FUN_0010875d",
            "FUN_001087da",
            "FUN_001087fd",
            "FUN_00108800",
            "FUN_00108863",
            "FUN_00108898",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00108e76",
            "FUN_00108ea1",
            "FUN_00108f05",
            "FUN_00108f08",
            "FUN_00108fb9",
            "FUN_00108fe8",
            "FUN_00109022",
            "FUN_0010911f",
            "FUN_0010914e",
            "FUN_00109a0b",
            "FUN_00109b2f",
            "FUN_00109b52",
            "FUN_00109bbb",
            "FUN_00109be3",
            "FUN_00109c2e",
            "FUN_0010ab4d",
            "FUN_0010ae0e",
            "FUN_0010bb52",
            "FUN_0010bbd3",
            "FUN_0010bd62",
            "FUN_0010be1a",
            "FUN_0010be88",
            "FUN_0010bf20",
            "FUN_0010bf86",
            "FUN_0011256b",
            "FUN_001125fa",
            "FUN_0011283f",
            "FUN_00112894",
            "FUN_00112904",
            "FUN_00112925",
            "FUN_001129f4",
            "FUN_00113f20",
            "FUN_00113fb0",
            "FUN_00113fe0",
            "FUN_00114b84",
            "FUN_00114cf0",
            "FUN_00114d50",
            "FUN_00114e00",
            "FUN_00115d00",
            "FUN_00119970",
            "FUN_00119e70",
            "FUN_0011a110",
            "FUN_0011a170",
            "FUN_0011a1b0",
            "FUN_0011a250",
            "FUN_0011a390",
            "FUN_0011a480"
        ],
        [
            "FUN_001053d5",
            "FUN_001083b7",
            "FUN_00108916",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_00109a32",
            "FUN_00109cf4",
            "FUN_00109e76",
            "FUN_0010a0e9",
            "FUN_0010a181",
            "FUN_0010a2b9",
            "FUN_0010a377",
            "FUN_0010a69a",
            "FUN_0010a77a",
            "FUN_0010a94e",
            "FUN_0010aa53",
            "FUN_0010abdd",
            "FUN_0010bc80",
            "FUN_0010c05d",
            "FUN_0010c218",
            "FUN_0010c6be",
            "FUN_001126c0",
            "FUN_00112996",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00113b98",
            "FUN_00113bfa",
            "FUN_00113c43",
            "FUN_00113cb9",
            "FUN_00113ce0",
            "FUN_00113d3a",
            "FUN_00113d6e",
            "FUN_00113da9",
            "FUN_00113df2",
            "FUN_00113dfe",
            "FUN_00113e17",
            "FUN_00113e23",
            "FUN_00113ede",
            "FUN_00115a90",
            "FUN_00115d70",
            "FUN_00116030",
            "FUN_00116852",
            "FUN_00119dd0",
            "FUN_00119ed0",
            "FUN_00119f70",
            "FUN_0011a0e0"
        ],
        [
            "FUN_00104920",
            "FUN_00104966",
            "FUN_00104ad6",
            "FUN_00104cc1",
            "FUN_00104d25",
            "FUN_001053b5",
            "FUN_0010543c",
            "FUN_00105828",
            "FUN_0010808f",
            "FUN_0010827b",
            "FUN_001082b3",
            "FUN_001082df",
            "FUN_00108375",
            "FUN_001083de",
            "FUN_00108466",
            "FUN_00108808",
            "FUN_0010882c",
            "FUN_00108d9a",
            "FUN_00109ab1",
            "FUN_00109d3e",
            "FUN_00109d5c",
            "FUN_00109d97",
            "FUN_00109dfe",
            "FUN_00109ed3",
            "FUN_0010a83e",
            "FUN_0010add5",
            "FUN_0010adf2",
            "FUN_0010afd5",
            "FUN_0010b800",
            "FUN_0010ba08",
            "FUN_0010bba1",
            "FUN_0010c139",
            "FUN_0010c1c6",
            "FUN_0010c2d2",
            "FUN_0010da0b",
            "FUN_0010e2f0",
            "FUN_00113f50",
            "FUN_00114190",
            "FUN_00114c80",
            "FUN_00114d60",
            "FUN_00114dc7",
            "FUN_00115f30",
            "FUN_00119940",
            "FUN_001199d0",
            "FUN_0011a2e0",
            "FUN_0011a350"
        ],
        [
            "FUN_00104ea2",
            "FUN_00108179",
            "FUN_00108200",
            "FUN_0010829e",
            "FUN_0010a083",
            "FUN_0010a0a0",
            "FUN_0010a0bd",
            "FUN_0010a0d3",
            "FUN_0010a424",
            "FUN_0010b948",
            "FUN_0010c892",
            "FUN_0010e439",
            "thunk_FUN_0010e439",
            "FUN_0010e453",
            "FUN_0010e5db",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010e842",
            "FUN_0010e8a9",
            "FUN_0010e918",
            "FUN_0010e9a0",
            "FUN_0010eafe",
            "FUN_0010ebb0",
            "FUN_0010ec73",
            "FUN_0010ed2c",
            "FUN_0010edb4",
            "FUN_0011173a",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114690",
            "FUN_00114c20",
            "FUN_00115970"
        ],
        [
            "FUN_00108072",
            "FUN_00112502",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 1181199
}